
radar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000106ec  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  080108d0  080108d0  000208d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010d5c  08010d5c  00032a28  2**0
                  CONTENTS
  4 .ARM          00000000  08010d5c  08010d5c  00032a28  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010d5c  08010d5c  00032a28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010d5c  08010d5c  00020d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010d60  08010d60  00020d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002a28  20000000  08010d64  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021dc  20002a28  0801378c  00032a28  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c04  0801378c  00034c04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00032a28  2**0
                  CONTENTS, READONLY
 12 .debug_info   000294da  00000000  00000000  00032a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000485a  00000000  00000000  0005bf32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002400  00000000  00000000  00060790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021f8  00000000  00000000  00062b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027b0a  00000000  00000000  00064d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000239d2  00000000  00000000  0008c892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9ec2  00000000  00000000  000b0264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001aa126  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aad8  00000000  00000000  001aa178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20002a28 	.word	0x20002a28
 80001fc:	00000000 	.word	0x00000000
 8000200:	080108b4 	.word	0x080108b4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20002a2c 	.word	0x20002a2c
 800021c:	080108b4 	.word	0x080108b4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <lsm6dsl_read_reg>:
  *
  */
int32_t __weak lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b087      	sub	sp, #28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	607a      	str	r2, [r7, #4]
 8000c02:	461a      	mov	r2, r3
 8000c04:	460b      	mov	r3, r1
 8000c06:	72fb      	strb	r3, [r7, #11]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	685c      	ldr	r4, [r3, #4]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	68d8      	ldr	r0, [r3, #12]
 8000c14:	893b      	ldrh	r3, [r7, #8]
 8000c16:	7af9      	ldrb	r1, [r7, #11]
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	47a0      	blx	r4
 8000c1c:	6178      	str	r0, [r7, #20]

  return ret;
 8000c1e:	697b      	ldr	r3, [r7, #20]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	371c      	adds	r7, #28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd90      	pop	{r4, r7, pc}

08000c28 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8000c32:	2301      	movs	r3, #1
 8000c34:	683a      	ldr	r2, [r7, #0]
 8000c36:	210f      	movs	r1, #15
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff ffdd 	bl	8000bf8 <lsm6dsl_read_reg>
 8000c3e:	60f8      	str	r0, [r7, #12]

  return ret;
 8000c40:	68fb      	ldr	r3, [r7, #12]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c4c:	b5b0      	push	{r4, r5, r7, lr}
 8000c4e:	b08e      	sub	sp, #56	; 0x38
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
input_received_flag = 0;
 8000c52:	4b36      	ldr	r3, [pc, #216]	; (8000d2c <main+0xe0>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
uint8_t message2[] ="message in";
 8000c58:	4a35      	ldr	r2, [pc, #212]	; (8000d30 <main+0xe4>)
 8000c5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c60:	c303      	stmia	r3!, {r0, r1}
 8000c62:	801a      	strh	r2, [r3, #0]
 8000c64:	3302      	adds	r3, #2
 8000c66:	0c12      	lsrs	r2, r2, #16
 8000c68:	701a      	strb	r2, [r3, #0]
uint8_t lsm6dslError[] ="LSM6DSL whoAmI error";
 8000c6a:	4b32      	ldr	r3, [pc, #200]	; (8000d34 <main+0xe8>)
 8000c6c:	f107 0414 	add.w	r4, r7, #20
 8000c70:	461d      	mov	r5, r3
 8000c72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c76:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c7a:	6020      	str	r0, [r4, #0]
 8000c7c:	3404      	adds	r4, #4
 8000c7e:	7021      	strb	r1, [r4, #0]


// initialize command struct
control user_input;
user_input.mode_instructed = 'r'; // r:range, s:speed
 8000c80:	2372      	movs	r3, #114	; 0x72
 8000c82:	74bb      	strb	r3, [r7, #18]
user_input.mode_running = 'x'; // x:none
 8000c84:	2378      	movs	r3, #120	; 0x78
 8000c86:	74fb      	strb	r3, [r7, #19]
user_input.run_time_sec=0; // length of time in seconds to operate
 8000c88:	2300      	movs	r3, #0
 8000c8a:	823b      	strh	r3, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c8c:	f001 f845 	bl	8001d1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c90:	f000 f862 	bl	8000d58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c94:	f000 face 	bl	8001234 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c98:	f000 fa9a 	bl	80011d0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c9c:	f000 f8a8 	bl	8000df0 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000ca0:	f000 f920 	bl	8000ee4 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000ca4:	f000 fa46 	bl	8001134 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000ca8:	f000 f956 	bl	8000f58 <MX_SPI1_Init>
  MX_USB_Device_Init();
 8000cac:	f00c fb92 	bl	800d3d4 <MX_USB_Device_Init>
  MX_TIM1_Init();
 8000cb0:	f000 f990 	bl	8000fd4 <MX_TIM1_Init>
//  test line
//  HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,(uint32_t*)VTune,2484,DAC_ALIGN_12B_R);
//  HAL_TIM_Base_Start(&htim2);
//  end test
//  set_VCO_input_DAC(&user_input); // starts timer and sets dac output used for VCO
  HAL_TIM_Base_Start(&htim1); // start timer 1 for adc1 conversion for radar mixer o/p
 8000cb4:	4820      	ldr	r0, [pc, #128]	; (8000d38 <main+0xec>)
 8000cb6:	f007 fb09 	bl	80082cc <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3); // sets output compare for timer1, sets PA10 to toggle on timer1 register reload (40kHz)
 8000cba:	2108      	movs	r1, #8
 8000cbc:	481e      	ldr	r0, [pc, #120]	; (8000d38 <main+0xec>)
 8000cbe:	f007 fbfd 	bl	80084bc <HAL_TIM_OC_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_dma_buf_mixer_out, DMA_BUF_LEN); // start the adc with dma
 8000cc2:	22c8      	movs	r2, #200	; 0xc8
 8000cc4:	491d      	ldr	r1, [pc, #116]	; (8000d3c <main+0xf0>)
 8000cc6:	481e      	ldr	r0, [pc, #120]	; (8000d40 <main+0xf4>)
 8000cc8:	f001 fc9e 	bl	8002608 <HAL_ADC_Start_DMA>

  /* initialize accelerometer/gyroscope on lsm6dsl */
  stmdev_ctx_t dev_ctx;
  dev_ctx.write_reg = platform_write;
 8000ccc:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <main+0xf8>)
 8000cce:	603b      	str	r3, [r7, #0]
  dev_ctx.read_reg = platform_read;
 8000cd0:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <main+0xfc>)
 8000cd2:	607b      	str	r3, [r7, #4]
  dev_ctx.handle = &hspi1;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <main+0x100>)
 8000cd6:	60fb      	str	r3, [r7, #12]
  /* Check device ID */
    whoamI = 0;
 8000cd8:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <main+0x104>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
    lsm6dsl_device_id_get(&dev_ctx, &whoamI);
 8000cde:	463b      	mov	r3, r7
 8000ce0:	491b      	ldr	r1, [pc, #108]	; (8000d50 <main+0x104>)
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff ffa0 	bl	8000c28 <lsm6dsl_device_id_get>

    if ( whoamI != LSM6DSL_ID ) {
 8000ce8:	4b19      	ldr	r3, [pc, #100]	; (8000d50 <main+0x104>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b6a      	cmp	r3, #106	; 0x6a
 8000cee:	d005      	beq.n	8000cfc <main+0xb0>
    	CDC_Transmit_FS(lsm6dslError,sizeof(lsm6dslError));
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	2115      	movs	r1, #21
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f00c fc44 	bl	800d584 <CDC_Transmit_FS>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (input_received_flag)
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <main+0xe0>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d00e      	beq.n	8000d22 <main+0xd6>
	  {
	 	    	process_input(&UserRxBufferFS,&user_input);
 8000d04:	f107 0310 	add.w	r3, r7, #16
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4812      	ldr	r0, [pc, #72]	; (8000d54 <main+0x108>)
 8000d0c:	f000 fbee 	bl	80014ec <process_input>
	 	    	set_VCO_input_DAC(&user_input);
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	4618      	mov	r0, r3
 8000d16:	f000 fc85 	bl	8001624 <set_VCO_input_DAC>
	 	    	//perform_trial(&user_input);
	 	        input_received_flag=0;
 8000d1a:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <main+0xe0>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
 8000d20:	e7ec      	b.n	8000cfc <main+0xb0>
	  }
	  else
	  {
	 	    	HAL_Delay(250);
 8000d22:	20fa      	movs	r0, #250	; 0xfa
 8000d24:	f001 f86a 	bl	8001dfc <HAL_Delay>
	  if (input_received_flag)
 8000d28:	e7e8      	b.n	8000cfc <main+0xb0>
 8000d2a:	bf00      	nop
 8000d2c:	200044dc 	.word	0x200044dc
 8000d30:	080108d0 	.word	0x080108d0
 8000d34:	080108dc 	.word	0x080108dc
 8000d38:	20002be8 	.word	0x20002be8
 8000d3c:	20002c80 	.word	0x20002c80
 8000d40:	20002a44 	.word	0x20002a44
 8000d44:	0800137d 	.word	0x0800137d
 8000d48:	080013d9 	.word	0x080013d9
 8000d4c:	20002b84 	.word	0x20002b84
 8000d50:	20002e10 	.word	0x20002e10
 8000d54:	200034dc 	.word	0x200034dc

08000d58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b094      	sub	sp, #80	; 0x50
 8000d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5e:	f107 0318 	add.w	r3, r7, #24
 8000d62:	2238      	movs	r2, #56	; 0x38
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f00d f892 	bl	800de90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
 8000d78:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f005 fadc 	bl	8006338 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000d80:	2321      	movs	r3, #33	; 0x21
 8000d82:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d88:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d92:	2303      	movs	r3, #3
 8000d94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000d96:	2302      	movs	r3, #2
 8000d98:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8000d9a:	232a      	movs	r3, #42	; 0x2a
 8000d9c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV12;
 8000d9e:	230c      	movs	r3, #12
 8000da0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000da2:	2306      	movs	r3, #6
 8000da4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000da6:	2302      	movs	r3, #2
 8000da8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000daa:	f107 0318 	add.w	r3, r7, #24
 8000dae:	4618      	mov	r0, r3
 8000db0:	f005 fb66 	bl	8006480 <HAL_RCC_OscConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000dba:	f000 fc7f 	bl	80016bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dbe:	230f      	movs	r3, #15
 8000dc0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2104      	movs	r1, #4
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f005 fe69 	bl	8006ab0 <HAL_RCC_ClockConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000de4:	f000 fc6a 	bl	80016bc <Error_Handler>
  }
}
 8000de8:	bf00      	nop
 8000dea:	3750      	adds	r7, #80	; 0x50
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08c      	sub	sp, #48	; 0x30
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	2220      	movs	r2, #32
 8000e06:	2100      	movs	r1, #0
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f00d f841 	bl	800de90 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e0e:	4b33      	ldr	r3, [pc, #204]	; (8000edc <MX_ADC1_Init+0xec>)
 8000e10:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e14:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e16:	4b31      	ldr	r3, [pc, #196]	; (8000edc <MX_ADC1_Init+0xec>)
 8000e18:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e1c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e1e:	4b2f      	ldr	r3, [pc, #188]	; (8000edc <MX_ADC1_Init+0xec>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e24:	4b2d      	ldr	r3, [pc, #180]	; (8000edc <MX_ADC1_Init+0xec>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e2a:	4b2c      	ldr	r3, [pc, #176]	; (8000edc <MX_ADC1_Init+0xec>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e30:	4b2a      	ldr	r3, [pc, #168]	; (8000edc <MX_ADC1_Init+0xec>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e36:	4b29      	ldr	r3, [pc, #164]	; (8000edc <MX_ADC1_Init+0xec>)
 8000e38:	2204      	movs	r2, #4
 8000e3a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e3c:	4b27      	ldr	r3, [pc, #156]	; (8000edc <MX_ADC1_Init+0xec>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e42:	4b26      	ldr	r3, [pc, #152]	; (8000edc <MX_ADC1_Init+0xec>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000e48:	4b24      	ldr	r3, [pc, #144]	; (8000edc <MX_ADC1_Init+0xec>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e4e:	4b23      	ldr	r3, [pc, #140]	; (8000edc <MX_ADC1_Init+0xec>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000e56:	4b21      	ldr	r3, [pc, #132]	; (8000edc <MX_ADC1_Init+0xec>)
 8000e58:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000e5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e5e:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <MX_ADC1_Init+0xec>)
 8000e60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e64:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e66:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <MX_ADC1_Init+0xec>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e6e:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <MX_ADC1_Init+0xec>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000e74:	4b19      	ldr	r3, [pc, #100]	; (8000edc <MX_ADC1_Init+0xec>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e7c:	4817      	ldr	r0, [pc, #92]	; (8000edc <MX_ADC1_Init+0xec>)
 8000e7e:	f001 fa01 	bl	8002284 <HAL_ADC_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000e88:	f000 fc18 	bl	80016bc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e94:	4619      	mov	r1, r3
 8000e96:	4811      	ldr	r0, [pc, #68]	; (8000edc <MX_ADC1_Init+0xec>)
 8000e98:	f002 f9f0 	bl	800327c <HAL_ADCEx_MultiModeConfigChannel>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000ea2:	f000 fc0b 	bl	80016bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <MX_ADC1_Init+0xf0>)
 8000ea8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eaa:	2306      	movs	r3, #6
 8000eac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eb2:	237f      	movs	r3, #127	; 0x7f
 8000eb4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4806      	ldr	r0, [pc, #24]	; (8000edc <MX_ADC1_Init+0xec>)
 8000ec4:	f001 fc7e 	bl	80027c4 <HAL_ADC_ConfigChannel>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000ece:	f000 fbf5 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	3730      	adds	r7, #48	; 0x30
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20002a44 	.word	0x20002a44
 8000ee0:	04300002 	.word	0x04300002

08000ee4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08c      	sub	sp, #48	; 0x30
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000eea:	463b      	mov	r3, r7
 8000eec:	2230      	movs	r2, #48	; 0x30
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f00c ffcd 	bl	800de90 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000ef6:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <MX_DAC1_Init+0x6c>)
 8000ef8:	4a16      	ldr	r2, [pc, #88]	; (8000f54 <MX_DAC1_Init+0x70>)
 8000efa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000efc:	4814      	ldr	r0, [pc, #80]	; (8000f50 <MX_DAC1_Init+0x6c>)
 8000efe:	f002 fbd4 	bl	80036aa <HAL_DAC_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000f08:	f000 fbd8 	bl	80016bc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000f1c:	2312      	movs	r3, #18
 8000f1e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f30:	463b      	mov	r3, r7
 8000f32:	2200      	movs	r2, #0
 8000f34:	4619      	mov	r1, r3
 8000f36:	4806      	ldr	r0, [pc, #24]	; (8000f50 <MX_DAC1_Init+0x6c>)
 8000f38:	f002 fdaa 	bl	8003a90 <HAL_DAC_ConfigChannel>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000f42:	f000 fbbb 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	3730      	adds	r7, #48	; 0x30
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20002b10 	.word	0x20002b10
 8000f54:	50000800 	.word	0x50000800

08000f58 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f5c:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <MX_SPI1_Init+0x74>)
 8000f5e:	4a1c      	ldr	r2, [pc, #112]	; (8000fd0 <MX_SPI1_Init+0x78>)
 8000f60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f62:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <MX_SPI1_Init+0x74>)
 8000f64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <MX_SPI1_Init+0x74>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <MX_SPI1_Init+0x74>)
 8000f72:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f76:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <MX_SPI1_Init+0x74>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f7e:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <MX_SPI1_Init+0x74>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f84:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <MX_SPI1_Init+0x74>)
 8000f86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f8a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <MX_SPI1_Init+0x74>)
 8000f8e:	2220      	movs	r2, #32
 8000f90:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <MX_SPI1_Init+0x74>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <MX_SPI1_Init+0x74>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <MX_SPI1_Init+0x74>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000fa4:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <MX_SPI1_Init+0x74>)
 8000fa6:	2207      	movs	r2, #7
 8000fa8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <MX_SPI1_Init+0x74>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <MX_SPI1_Init+0x74>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <MX_SPI1_Init+0x74>)
 8000fb8:	f006 f9b4 	bl	8007324 <HAL_SPI_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000fc2:	f000 fb7b 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20002b84 	.word	0x20002b84
 8000fd0:	40013000 	.word	0x40013000

08000fd4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b09c      	sub	sp, #112	; 0x70
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fda:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ff4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
 8001004:	615a      	str	r2, [r3, #20]
 8001006:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	2234      	movs	r2, #52	; 0x34
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f00c ff3e 	bl	800de90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001014:	4b45      	ldr	r3, [pc, #276]	; (800112c <MX_TIM1_Init+0x158>)
 8001016:	4a46      	ldr	r2, [pc, #280]	; (8001130 <MX_TIM1_Init+0x15c>)
 8001018:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 42000-1;
 800101a:	4b44      	ldr	r3, [pc, #272]	; (800112c <MX_TIM1_Init+0x158>)
 800101c:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001020:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001022:	4b42      	ldr	r3, [pc, #264]	; (800112c <MX_TIM1_Init+0x158>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 8001028:	4b40      	ldr	r3, [pc, #256]	; (800112c <MX_TIM1_Init+0x158>)
 800102a:	2209      	movs	r2, #9
 800102c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102e:	4b3f      	ldr	r3, [pc, #252]	; (800112c <MX_TIM1_Init+0x158>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001034:	4b3d      	ldr	r3, [pc, #244]	; (800112c <MX_TIM1_Init+0x158>)
 8001036:	2200      	movs	r2, #0
 8001038:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103a:	4b3c      	ldr	r3, [pc, #240]	; (800112c <MX_TIM1_Init+0x158>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001040:	483a      	ldr	r0, [pc, #232]	; (800112c <MX_TIM1_Init+0x158>)
 8001042:	f007 f8eb 	bl	800821c <HAL_TIM_Base_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800104c:	f000 fb36 	bl	80016bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001054:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001056:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800105a:	4619      	mov	r1, r3
 800105c:	4833      	ldr	r0, [pc, #204]	; (800112c <MX_TIM1_Init+0x158>)
 800105e:	f007 fbb9 	bl	80087d4 <HAL_TIM_ConfigClockSource>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001068:	f000 fb28 	bl	80016bc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800106c:	482f      	ldr	r0, [pc, #188]	; (800112c <MX_TIM1_Init+0x158>)
 800106e:	f007 f9c4 	bl	80083fa <HAL_TIM_OC_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001078:	f000 fb20 	bl	80016bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800107c:	2320      	movs	r3, #32
 800107e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001080:	2300      	movs	r3, #0
 8001082:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001084:	2300      	movs	r3, #0
 8001086:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001088:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800108c:	4619      	mov	r1, r3
 800108e:	4827      	ldr	r0, [pc, #156]	; (800112c <MX_TIM1_Init+0x158>)
 8001090:	f008 f940 	bl	8009314 <HAL_TIMEx_MasterConfigSynchronization>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800109a:	f000 fb0f 	bl	80016bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800109e:	2330      	movs	r3, #48	; 0x30
 80010a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a6:	2300      	movs	r3, #0
 80010a8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010aa:	2300      	movs	r3, #0
 80010ac:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010b2:	2300      	movs	r3, #0
 80010b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010b6:	2300      	movs	r3, #0
 80010b8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010be:	2208      	movs	r2, #8
 80010c0:	4619      	mov	r1, r3
 80010c2:	481a      	ldr	r0, [pc, #104]	; (800112c <MX_TIM1_Init+0x158>)
 80010c4:	f007 fb0c 	bl	80086e0 <HAL_TIM_OC_ConfigChannel>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80010ce:	f000 faf5 	bl	80016bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001102:	2300      	movs	r3, #0
 8001104:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	4619      	mov	r1, r3
 800110e:	4807      	ldr	r0, [pc, #28]	; (800112c <MX_TIM1_Init+0x158>)
 8001110:	f008 f996 	bl	8009440 <HAL_TIMEx_ConfigBreakDeadTime>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800111a:	f000 facf 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800111e:	4803      	ldr	r0, [pc, #12]	; (800112c <MX_TIM1_Init+0x158>)
 8001120:	f000 fc62 	bl	80019e8 <HAL_TIM_MspPostInit>

}
 8001124:	bf00      	nop
 8001126:	3770      	adds	r7, #112	; 0x70
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20002be8 	.word	0x20002be8
 8001130:	40012c00 	.word	0x40012c00

08001134 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800113a:	f107 0310 	add.w	r3, r7, #16
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001152:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <MX_TIM2_Init+0x94>)
 8001154:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001158:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 255;
 800115a:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <MX_TIM2_Init+0x94>)
 800115c:	22ff      	movs	r2, #255	; 0xff
 800115e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <MX_TIM2_Init+0x94>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6.5204999E7;
 8001166:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <MX_TIM2_Init+0x94>)
 8001168:	4a18      	ldr	r2, [pc, #96]	; (80011cc <MX_TIM2_Init+0x98>)
 800116a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116c:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <MX_TIM2_Init+0x94>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <MX_TIM2_Init+0x94>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001178:	4813      	ldr	r0, [pc, #76]	; (80011c8 <MX_TIM2_Init+0x94>)
 800117a:	f007 f84f 	bl	800821c <HAL_TIM_Base_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001184:	f000 fa9a 	bl	80016bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800118e:	f107 0310 	add.w	r3, r7, #16
 8001192:	4619      	mov	r1, r3
 8001194:	480c      	ldr	r0, [pc, #48]	; (80011c8 <MX_TIM2_Init+0x94>)
 8001196:	f007 fb1d 	bl	80087d4 <HAL_TIM_ConfigClockSource>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011a0:	f000 fa8c 	bl	80016bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011a4:	2320      	movs	r3, #32
 80011a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	4619      	mov	r1, r3
 80011b0:	4805      	ldr	r0, [pc, #20]	; (80011c8 <MX_TIM2_Init+0x94>)
 80011b2:	f008 f8af 	bl	8009314 <HAL_TIMEx_MasterConfigSynchronization>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011bc:	f000 fa7e 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	3720      	adds	r7, #32
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20002c34 	.word	0x20002c34
 80011cc:	03e2f307 	.word	0x03e2f307

080011d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011d6:	4b16      	ldr	r3, [pc, #88]	; (8001230 <MX_DMA_Init+0x60>)
 80011d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011da:	4a15      	ldr	r2, [pc, #84]	; (8001230 <MX_DMA_Init+0x60>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	6493      	str	r3, [r2, #72]	; 0x48
 80011e2:	4b13      	ldr	r3, [pc, #76]	; (8001230 <MX_DMA_Init+0x60>)
 80011e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <MX_DMA_Init+0x60>)
 80011f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011f2:	4a0f      	ldr	r2, [pc, #60]	; (8001230 <MX_DMA_Init+0x60>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6493      	str	r3, [r2, #72]	; 0x48
 80011fa:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <MX_DMA_Init+0x60>)
 80011fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	200b      	movs	r0, #11
 800120c:	f002 fa19 	bl	8003642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001210:	200b      	movs	r0, #11
 8001212:	f002 fa30 	bl	8003676 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	200c      	movs	r0, #12
 800121c:	f002 fa11 	bl	8003642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001220:	200c      	movs	r0, #12
 8001222:	f002 fa28 	bl	8003676 <HAL_NVIC_EnableIRQ>

}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40021000 	.word	0x40021000

08001234 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123a:	f107 030c 	add.w	r3, r7, #12
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
 8001248:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800124a:	4b4a      	ldr	r3, [pc, #296]	; (8001374 <MX_GPIO_Init+0x140>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	4a49      	ldr	r2, [pc, #292]	; (8001374 <MX_GPIO_Init+0x140>)
 8001250:	f043 0320 	orr.w	r3, r3, #32
 8001254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001256:	4b47      	ldr	r3, [pc, #284]	; (8001374 <MX_GPIO_Init+0x140>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	f003 0320 	and.w	r3, r3, #32
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	4b44      	ldr	r3, [pc, #272]	; (8001374 <MX_GPIO_Init+0x140>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	4a43      	ldr	r2, [pc, #268]	; (8001374 <MX_GPIO_Init+0x140>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126e:	4b41      	ldr	r3, [pc, #260]	; (8001374 <MX_GPIO_Init+0x140>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	4b3e      	ldr	r3, [pc, #248]	; (8001374 <MX_GPIO_Init+0x140>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	4a3d      	ldr	r2, [pc, #244]	; (8001374 <MX_GPIO_Init+0x140>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001286:	4b3b      	ldr	r3, [pc, #236]	; (8001374 <MX_GPIO_Init+0x140>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001292:	2201      	movs	r2, #1
 8001294:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001298:	4837      	ldr	r0, [pc, #220]	; (8001378 <MX_GPIO_Init+0x144>)
 800129a:	f003 fadf 	bl	800485c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a8:	f003 fad8 	bl	800485c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012ac:	2303      	movs	r3, #3
 80012ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012b0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ba:	f107 030c 	add.w	r3, r7, #12
 80012be:	4619      	mov	r1, r3
 80012c0:	482d      	ldr	r0, [pc, #180]	; (8001378 <MX_GPIO_Init+0x144>)
 80012c2:	f003 f949 	bl	8004558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	4619      	mov	r1, r3
 80012de:	4826      	ldr	r0, [pc, #152]	; (8001378 <MX_GPIO_Init+0x144>)
 80012e0:	f003 f93a 	bl	8004558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ea:	2312      	movs	r3, #18
 80012ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 80012f6:	2302      	movs	r3, #2
 80012f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	4619      	mov	r1, r3
 8001300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001304:	f003 f928 	bl	8004558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001308:	f44f 7300 	mov.w	r3, #512	; 0x200
 800130c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800130e:	2312      	movs	r3, #18
 8001310:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800131a:	2304      	movs	r3, #4
 800131c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131e:	f107 030c 	add.w	r3, r7, #12
 8001322:	4619      	mov	r1, r3
 8001324:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001328:	f003 f916 	bl	8004558 <HAL_GPIO_Init>

  /*Configure GPIO pin : LSM6DSL_ncs_Pin */
  GPIO_InitStruct.Pin = LSM6DSL_ncs_Pin;
 800132c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001330:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001332:	2301      	movs	r3, #1
 8001334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LSM6DSL_ncs_GPIO_Port, &GPIO_InitStruct);
 800133e:	f107 030c 	add.w	r3, r7, #12
 8001342:	4619      	mov	r1, r3
 8001344:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001348:	f003 f906 	bl	8004558 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800134c:	2200      	movs	r2, #0
 800134e:	2100      	movs	r1, #0
 8001350:	2006      	movs	r0, #6
 8001352:	f002 f976 	bl	8003642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001356:	2006      	movs	r0, #6
 8001358:	f002 f98d 	bl	8003676 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800135c:	2200      	movs	r2, #0
 800135e:	2100      	movs	r1, #0
 8001360:	2007      	movs	r0, #7
 8001362:	f002 f96e 	bl	8003642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001366:	2007      	movs	r0, #7
 8001368:	f002 f985 	bl	8003676 <HAL_NVIC_EnableIRQ>

}
 800136c:	bf00      	nop
 800136e:	3720      	adds	r7, #32
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40021000 	.word	0x40021000
 8001378:	48000400 	.word	0x48000400

0800137c <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	607a      	str	r2, [r7, #4]
 8001386:	461a      	mov	r2, r3
 8001388:	460b      	mov	r3, r1
 800138a:	72fb      	strb	r3, [r7, #11]
 800138c:	4613      	mov	r3, r2
 800138e:	813b      	strh	r3, [r7, #8]
  HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139a:	f003 fa5f 	bl	800485c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &reg, 1, 2);
 800139e:	f107 010b 	add.w	r1, r7, #11
 80013a2:	2302      	movs	r3, #2
 80013a4:	2201      	movs	r2, #1
 80013a6:	480b      	ldr	r0, [pc, #44]	; (80013d4 <platform_write+0x58>)
 80013a8:	f006 f867 	bl	800747a <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, (uint8_t*) bufp, len, 1000);
 80013ac:	893a      	ldrh	r2, [r7, #8]
 80013ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	4807      	ldr	r0, [pc, #28]	; (80013d4 <platform_write+0x58>)
 80013b6:	f006 f860 	bl	800747a <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_SET);
 80013ba:	2201      	movs	r2, #1
 80013bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c4:	f003 fa4a 	bl	800485c <HAL_GPIO_WritePin>
  return 0;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20002b84 	.word	0x20002b84

080013d8 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	607a      	str	r2, [r7, #4]
 80013e2:	461a      	mov	r2, r3
 80013e4:	460b      	mov	r3, r1
 80013e6:	72fb      	strb	r3, [r7, #11]
 80013e8:	4613      	mov	r3, r2
 80013ea:	813b      	strh	r3, [r7, #8]
	uint8_t tx_data[2];
	tx_data[0] = 0x80 | reg;
 80013ec:	7afb      	ldrb	r3, [r7, #11]
 80013ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	753b      	strb	r3, [r7, #20]
	tx_data[1] = 0x00;
 80013f6:	2300      	movs	r3, #0
 80013f8:	757b      	strb	r3, [r7, #21]
	// get spi state
	HAL_SPI_StateTypeDef tmp_state;
	tmp_state = HAL_SPI_GetState(handle);
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	f006 fc56 	bl	8007cac <HAL_SPI_GetState>
 8001400:	4603      	mov	r3, r0
 8001402:	75fb      	strb	r3, [r7, #23]

	// Start the SPI transfer
	HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800140a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140e:	f003 fa25 	bl	800485c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(handle, &tx_data, bufp, len + 1);
 8001412:	893b      	ldrh	r3, [r7, #8]
 8001414:	3301      	adds	r3, #1
 8001416:	b29b      	uxth	r3, r3
 8001418:	f107 0114 	add.w	r1, r7, #20
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	68f8      	ldr	r0, [r7, #12]
 8001420:	f006 f99a 	bl	8007758 <HAL_SPI_TransmitReceive_DMA>
//	  {
//	    /* Transfer error in transmission process */
//	    Error_Handler();
//	  }
	// Wait for the transfer to complete
    while(HAL_SPI_GetState(handle) != tmp_state);
 8001424:	bf00      	nop
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f006 fc40 	bl	8007cac <HAL_SPI_GetState>
 800142c:	4603      	mov	r3, r0
 800142e:	461a      	mov	r2, r3
 8001430:	7dfb      	ldrb	r3, [r7, #23]
 8001432:	4293      	cmp	r3, r2
 8001434:	d1f7      	bne.n	8001426 <platform_read+0x4e>

	HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_SET);
 8001436:	2201      	movs	r2, #1
 8001438:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800143c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001440:	f003 fa0c 	bl	800485c <HAL_GPIO_WritePin>
  return 0;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  spi_complete_flag = 1;
 8001458:	4b04      	ldr	r3, [pc, #16]	; (800146c <HAL_SPI_RxCpltCallback+0x1c>)
 800145a:	2201      	movs	r2, #1
 800145c:	701a      	strb	r2, [r3, #0]
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	200031fc 	.word	0x200031fc

08001470 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  spi_complete_flag = 1;
 8001478:	4b04      	ldr	r3, [pc, #16]	; (800148c <HAL_SPI_TxRxCpltCallback+0x1c>)
 800147a:	2201      	movs	r2, #1
 800147c:	701a      	strb	r2, [r3, #0]
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	200031fc 	.word	0x200031fc

08001490 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	memcpy(tx_buffer,adc1_dma_buf_mixer_out[DMA_BUF_LEN/2-1],DMA_BUF_LEN/2);
 8001498:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <HAL_ADC_ConvCpltCallback+0x28>)
 800149a:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 800149e:	2264      	movs	r2, #100	; 0x64
 80014a0:	4619      	mov	r1, r3
 80014a2:	4806      	ldr	r0, [pc, #24]	; (80014bc <HAL_ADC_ConvCpltCallback+0x2c>)
 80014a4:	f00c fce6 	bl	800de74 <memcpy>
	CDC_Transmit_FS(tx_buffer, DMA_BUF_LEN/2);
 80014a8:	2164      	movs	r1, #100	; 0x64
 80014aa:	4804      	ldr	r0, [pc, #16]	; (80014bc <HAL_ADC_ConvCpltCallback+0x2c>)
 80014ac:	f00c f86a 	bl	800d584 <CDC_Transmit_FS>

}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20002c80 	.word	0x20002c80
 80014bc:	20002e14 	.word	0x20002e14

080014c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	memcpy(tx_buffer,adc1_dma_buf_mixer_out,DMA_BUF_LEN/2);
 80014c8:	2264      	movs	r2, #100	; 0x64
 80014ca:	4906      	ldr	r1, [pc, #24]	; (80014e4 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 80014cc:	4806      	ldr	r0, [pc, #24]	; (80014e8 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 80014ce:	f00c fcd1 	bl	800de74 <memcpy>
	CDC_Transmit_FS(tx_buffer, DMA_BUF_LEN/2);
 80014d2:	2164      	movs	r1, #100	; 0x64
 80014d4:	4804      	ldr	r0, [pc, #16]	; (80014e8 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 80014d6:	f00c f855 	bl	800d584 <CDC_Transmit_FS>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20002c80 	.word	0x20002c80
 80014e8:	20002e14 	.word	0x20002e14

080014ec <process_input>:
 * process the input received over usb to extract the operating mode and the time of operation
 *
 * @param arr    user input array
 * @param pCommand command struct to return mode and time
*/
void process_input(const uint8_t *arr, control *pControl) {
 80014ec:	b5b0      	push	{r4, r5, r7, lr}
 80014ee:	b092      	sub	sp, #72	; 0x48
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
	uint8_t messageIn[] ="processing input";
 80014f6:	4b47      	ldr	r3, [pc, #284]	; (8001614 <process_input+0x128>)
 80014f8:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80014fc:	461d      	mov	r5, r3
 80014fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001502:	682b      	ldr	r3, [r5, #0]
 8001504:	7023      	strb	r3, [r4, #0]
	uint8_t messageComplete[] ="processing complete";
 8001506:	4b44      	ldr	r3, [pc, #272]	; (8001618 <process_input+0x12c>)
 8001508:	f107 0418 	add.w	r4, r7, #24
 800150c:	461d      	mov	r5, r3
 800150e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001510:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001512:	682b      	ldr	r3, [r5, #0]
 8001514:	6023      	str	r3, [r4, #0]
	CDC_Transmit_FS(messageIn,sizeof(messageIn));
 8001516:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800151a:	2111      	movs	r1, #17
 800151c:	4618      	mov	r0, r3
 800151e:	f00c f831 	bl	800d584 <CDC_Transmit_FS>
	uint8_t mode[]={'m','o','d','e',':'};
 8001522:	4a3e      	ldr	r2, [pc, #248]	; (800161c <process_input+0x130>)
 8001524:	f107 0310 	add.w	r3, r7, #16
 8001528:	e892 0003 	ldmia.w	r2, {r0, r1}
 800152c:	6018      	str	r0, [r3, #0]
 800152e:	3304      	adds	r3, #4
 8001530:	7019      	strb	r1, [r3, #0]
    uint8_t time[] = {'t','i','m','e',':'};
 8001532:	4a3b      	ldr	r2, [pc, #236]	; (8001620 <process_input+0x134>)
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	e892 0003 	ldmia.w	r2, {r0, r1}
 800153c:	6018      	str	r0, [r3, #0]
 800153e:	3304      	adds	r3, #4
 8001540:	7019      	strb	r1, [r3, #0]
    int i = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	647b      	str	r3, [r7, #68]	; 0x44
    int j = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	643b      	str	r3, [r7, #64]	; 0x40
    // check input to ensure "mode:" is received
    while (arr[i]==mode[i]) {
 800154a:	e002      	b.n	8001552 <process_input+0x66>
        i++;
 800154c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800154e:	3301      	adds	r3, #1
 8001550:	647b      	str	r3, [r7, #68]	; 0x44
    while (arr[i]==mode[i]) {
 8001552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	4413      	add	r3, r2
 8001558:	781a      	ldrb	r2, [r3, #0]
 800155a:	f107 0110 	add.w	r1, r7, #16
 800155e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001560:	440b      	add	r3, r1
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	d0f1      	beq.n	800154c <process_input+0x60>
    }
    // set mode in command
    pControl->mode_instructed=arr[i];
 8001568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	781a      	ldrb	r2, [r3, #0]
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	709a      	strb	r2, [r3, #2]
    // move index past command for mode and '\n'
    while (arr[i]!='t') {
 8001574:	e002      	b.n	800157c <process_input+0x90>
        i++;
 8001576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001578:	3301      	adds	r3, #1
 800157a:	647b      	str	r3, [r7, #68]	; 0x44
    while (arr[i]!='t') {
 800157c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b74      	cmp	r3, #116	; 0x74
 8001586:	d1f6      	bne.n	8001576 <process_input+0x8a>
    }
    // check input to ensure "time:" is received
    while (arr[i]==time[j]) {
 8001588:	e005      	b.n	8001596 <process_input+0xaa>
        i++;
 800158a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800158c:	3301      	adds	r3, #1
 800158e:	647b      	str	r3, [r7, #68]	; 0x44
        j++;
 8001590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001592:	3301      	adds	r3, #1
 8001594:	643b      	str	r3, [r7, #64]	; 0x40
    while (arr[i]==time[j]) {
 8001596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	4413      	add	r3, r2
 800159c:	781a      	ldrb	r2, [r3, #0]
 800159e:	f107 0108 	add.w	r1, r7, #8
 80015a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015a4:	440b      	add	r3, r1
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d0ee      	beq.n	800158a <process_input+0x9e>
    }
    // set j to index one past first digit of command for time
    j=i+1;
 80015ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015ae:	3301      	adds	r3, #1
 80015b0:	643b      	str	r3, [r7, #64]	; 0x40
    // get index of last digit
    while (arr[j]!='\n') {
 80015b2:	e002      	b.n	80015ba <process_input+0xce>
        j++;
 80015b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015b6:	3301      	adds	r3, #1
 80015b8:	643b      	str	r3, [r7, #64]	; 0x40
    while (arr[j]!='\n') {
 80015ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	4413      	add	r3, r2
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b0a      	cmp	r3, #10
 80015c4:	d1f6      	bne.n	80015b4 <process_input+0xc8>
    }
    // set runt time to zero
    pControl->run_time_sec=0;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	2200      	movs	r2, #0
 80015ca:	801a      	strh	r2, [r3, #0]
    // add each digits value,
    // *10 to shift current value left one digit for adding next digit
    // -48 converts from ascii to int
    while (i < j) {
 80015cc:	e014      	b.n	80015f8 <process_input+0x10c>
        pControl->run_time_sec=(pControl->run_time_sec*10)+arr[i]-48;
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	881b      	ldrh	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	0092      	lsls	r2, r2, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	b29a      	uxth	r2, r3
 80015dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	440b      	add	r3, r1
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	4413      	add	r3, r2
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	3b30      	subs	r3, #48	; 0x30
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	801a      	strh	r2, [r3, #0]
        i++;
 80015f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015f4:	3301      	adds	r3, #1
 80015f6:	647b      	str	r3, [r7, #68]	; 0x44
    while (i < j) {
 80015f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80015fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015fc:	429a      	cmp	r2, r3
 80015fe:	dbe6      	blt.n	80015ce <process_input+0xe2>
    }
	CDC_Transmit_FS(messageComplete,sizeof(messageComplete));
 8001600:	f107 0318 	add.w	r3, r7, #24
 8001604:	2114      	movs	r1, #20
 8001606:	4618      	mov	r0, r3
 8001608:	f00b ffbc 	bl	800d584 <CDC_Transmit_FS>

}
 800160c:	bf00      	nop
 800160e:	3748      	adds	r7, #72	; 0x48
 8001610:	46bd      	mov	sp, r7
 8001612:	bdb0      	pop	{r4, r5, r7, pc}
 8001614:	080108f4 	.word	0x080108f4
 8001618:	08010908 	.word	0x08010908
 800161c:	0801091c 	.word	0x0801091c
 8001620:	08010924 	.word	0x08010924

08001624 <set_VCO_input_DAC>:


void set_VCO_input_DAC(control *ctrl_ptr) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af02      	add	r7, sp, #8
 800162a:	6078      	str	r0, [r7, #4]
	// if currently running is as instructed, return
	if (ctrl_ptr->mode_running==ctrl_ptr->mode_instructed) {
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	78da      	ldrb	r2, [r3, #3]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	789b      	ldrb	r3, [r3, #2]
 8001634:	429a      	cmp	r2, r3
 8001636:	d035      	beq.n	80016a4 <set_VCO_input_DAC+0x80>
		return;
	}

	  /* Set DAC_CH_1 to CTune or VTune based on user input for mode, defaults to range(r)*/
	if (ctrl_ptr->mode_instructed=='r')
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	789b      	ldrb	r3, [r3, #2]
 800163c:	2b72      	cmp	r3, #114	; 0x72
 800163e:	d117      	bne.n	8001670 <set_VCO_input_DAC+0x4c>
	{
		// if currently running in other mode, turn it off
		if (ctrl_ptr->mode_running=='s') {
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	78db      	ldrb	r3, [r3, #3]
 8001644:	2b73      	cmp	r3, #115	; 0x73
 8001646:	d103      	bne.n	8001650 <set_VCO_input_DAC+0x2c>
			HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
 8001648:	2100      	movs	r1, #0
 800164a:	4818      	ldr	r0, [pc, #96]	; (80016ac <set_VCO_input_DAC+0x88>)
 800164c:	f002 f8a2 	bl	8003794 <HAL_DAC_Stop>
		}
		// turn on dac using dma and timer 2
		HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,(uint32_t*)VTune,2484,DAC_ALIGN_12B_R);
 8001650:	2300      	movs	r3, #0
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	f640 13b4 	movw	r3, #2484	; 0x9b4
 8001658:	4a15      	ldr	r2, [pc, #84]	; (80016b0 <set_VCO_input_DAC+0x8c>)
 800165a:	2100      	movs	r1, #0
 800165c:	4813      	ldr	r0, [pc, #76]	; (80016ac <set_VCO_input_DAC+0x88>)
 800165e:	f002 f8b7 	bl	80037d0 <HAL_DAC_Start_DMA>
		HAL_TIM_Base_Start(&htim2);
 8001662:	4814      	ldr	r0, [pc, #80]	; (80016b4 <set_VCO_input_DAC+0x90>)
 8001664:	f006 fe32 	bl	80082cc <HAL_TIM_Base_Start>
		ctrl_ptr->mode_running='r';
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2272      	movs	r2, #114	; 0x72
 800166c:	70da      	strb	r2, [r3, #3]
 800166e:	e01a      	b.n	80016a6 <set_VCO_input_DAC+0x82>
	}
	else
	{
		if (ctrl_ptr->mode_running=='r') {
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	78db      	ldrb	r3, [r3, #3]
 8001674:	2b72      	cmp	r3, #114	; 0x72
 8001676:	d106      	bne.n	8001686 <set_VCO_input_DAC+0x62>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001678:	2100      	movs	r1, #0
 800167a:	480c      	ldr	r0, [pc, #48]	; (80016ac <set_VCO_input_DAC+0x88>)
 800167c:	f002 f976 	bl	800396c <HAL_DAC_Stop_DMA>
			HAL_TIM_Base_Stop(&htim2);
 8001680:	480c      	ldr	r0, [pc, #48]	; (80016b4 <set_VCO_input_DAC+0x90>)
 8001682:	f006 fe93 	bl	80083ac <HAL_TIM_Base_Stop>

		}
		HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001686:	2100      	movs	r1, #0
 8001688:	4808      	ldr	r0, [pc, #32]	; (80016ac <set_VCO_input_DAC+0x88>)
 800168a:	f002 f830 	bl	80036ee <HAL_DAC_Start>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, CTune);
 800168e:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <set_VCO_input_DAC+0x94>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2200      	movs	r2, #0
 8001694:	2100      	movs	r1, #0
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <set_VCO_input_DAC+0x88>)
 8001698:	f002 f9b3 	bl	8003a02 <HAL_DAC_SetValue>
		ctrl_ptr->mode_running='s';
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2273      	movs	r2, #115	; 0x73
 80016a0:	70da      	strb	r2, [r3, #3]
 80016a2:	e000      	b.n	80016a6 <set_VCO_input_DAC+0x82>
		return;
 80016a4:	bf00      	nop
	}
}
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20002b10 	.word	0x20002b10
 80016b0:	20000004 	.word	0x20000004
 80016b4:	20002c34 	.word	0x20002c34
 80016b8:	20000000 	.word	0x20000000

080016bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c0:	b672      	cpsid	i
}
 80016c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <Error_Handler+0x8>
	...

080016c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <HAL_MspInit+0x44>)
 80016d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d2:	4a0e      	ldr	r2, [pc, #56]	; (800170c <HAL_MspInit+0x44>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6613      	str	r3, [r2, #96]	; 0x60
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <HAL_MspInit+0x44>)
 80016dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <HAL_MspInit+0x44>)
 80016e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ea:	4a08      	ldr	r2, [pc, #32]	; (800170c <HAL_MspInit+0x44>)
 80016ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f0:	6593      	str	r3, [r2, #88]	; 0x58
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_MspInit+0x44>)
 80016f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fa:	603b      	str	r3, [r7, #0]
 80016fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40021000 	.word	0x40021000

08001710 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b09e      	sub	sp, #120	; 0x78
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001728:	f107 0310 	add.w	r3, r7, #16
 800172c:	2254      	movs	r2, #84	; 0x54
 800172e:	2100      	movs	r1, #0
 8001730:	4618      	mov	r0, r3
 8001732:	f00c fbad 	bl	800de90 <memset>
  if(hadc->Instance==ADC1)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800173e:	d15f      	bne.n	8001800 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001740:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001744:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8001746:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800174a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800174c:	f107 0310 	add.w	r3, r7, #16
 8001750:	4618      	mov	r0, r3
 8001752:	f005 fb99 	bl	8006e88 <HAL_RCCEx_PeriphCLKConfig>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800175c:	f7ff ffae 	bl	80016bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001760:	4b29      	ldr	r3, [pc, #164]	; (8001808 <HAL_ADC_MspInit+0xf8>)
 8001762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001764:	4a28      	ldr	r2, [pc, #160]	; (8001808 <HAL_ADC_MspInit+0xf8>)
 8001766:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800176a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800176c:	4b26      	ldr	r3, [pc, #152]	; (8001808 <HAL_ADC_MspInit+0xf8>)
 800176e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001770:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001778:	4b23      	ldr	r3, [pc, #140]	; (8001808 <HAL_ADC_MspInit+0xf8>)
 800177a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177c:	4a22      	ldr	r2, [pc, #136]	; (8001808 <HAL_ADC_MspInit+0xf8>)
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001784:	4b20      	ldr	r3, [pc, #128]	; (8001808 <HAL_ADC_MspInit+0xf8>)
 8001786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = mixer_op_filtered_Pin;
 8001790:	2301      	movs	r3, #1
 8001792:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001794:	2303      	movs	r3, #3
 8001796:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(mixer_op_filtered_GPIO_Port, &GPIO_InitStruct);
 800179c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017a0:	4619      	mov	r1, r3
 80017a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a6:	f002 fed7 	bl	8004558 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 80017aa:	4b18      	ldr	r3, [pc, #96]	; (800180c <HAL_ADC_MspInit+0xfc>)
 80017ac:	4a18      	ldr	r2, [pc, #96]	; (8001810 <HAL_ADC_MspInit+0x100>)
 80017ae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80017b0:	4b16      	ldr	r3, [pc, #88]	; (800180c <HAL_ADC_MspInit+0xfc>)
 80017b2:	2205      	movs	r2, #5
 80017b4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <HAL_ADC_MspInit+0xfc>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017bc:	4b13      	ldr	r3, [pc, #76]	; (800180c <HAL_ADC_MspInit+0xfc>)
 80017be:	2200      	movs	r2, #0
 80017c0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017c2:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_ADC_MspInit+0xfc>)
 80017c4:	2280      	movs	r2, #128	; 0x80
 80017c6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017c8:	4b10      	ldr	r3, [pc, #64]	; (800180c <HAL_ADC_MspInit+0xfc>)
 80017ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017d0:	4b0e      	ldr	r3, [pc, #56]	; (800180c <HAL_ADC_MspInit+0xfc>)
 80017d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017d6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <HAL_ADC_MspInit+0xfc>)
 80017da:	2220      	movs	r2, #32
 80017dc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_ADC_MspInit+0xfc>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017e4:	4809      	ldr	r0, [pc, #36]	; (800180c <HAL_ADC_MspInit+0xfc>)
 80017e6:	f002 fb85 	bl	8003ef4 <HAL_DMA_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80017f0:	f7ff ff64 	bl	80016bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a05      	ldr	r2, [pc, #20]	; (800180c <HAL_ADC_MspInit+0xfc>)
 80017f8:	655a      	str	r2, [r3, #84]	; 0x54
 80017fa:	4a04      	ldr	r2, [pc, #16]	; (800180c <HAL_ADC_MspInit+0xfc>)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001800:	bf00      	nop
 8001802:	3778      	adds	r7, #120	; 0x78
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40021000 	.word	0x40021000
 800180c:	20002ab0 	.word	0x20002ab0
 8001810:	4002001c 	.word	0x4002001c

08001814 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	; 0x28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a2b      	ldr	r2, [pc, #172]	; (80018e0 <HAL_DAC_MspInit+0xcc>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d150      	bne.n	80018d8 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001836:	4b2b      	ldr	r3, [pc, #172]	; (80018e4 <HAL_DAC_MspInit+0xd0>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	4a2a      	ldr	r2, [pc, #168]	; (80018e4 <HAL_DAC_MspInit+0xd0>)
 800183c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001842:	4b28      	ldr	r3, [pc, #160]	; (80018e4 <HAL_DAC_MspInit+0xd0>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	4b25      	ldr	r3, [pc, #148]	; (80018e4 <HAL_DAC_MspInit+0xd0>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	4a24      	ldr	r2, [pc, #144]	; (80018e4 <HAL_DAC_MspInit+0xd0>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800185a:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <HAL_DAC_MspInit+0xd0>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001866:	2310      	movs	r3, #16
 8001868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800186a:	2303      	movs	r3, #3
 800186c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	4619      	mov	r1, r3
 8001878:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800187c:	f002 fe6c 	bl	8004558 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8001880:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <HAL_DAC_MspInit+0xd4>)
 8001882:	4a1a      	ldr	r2, [pc, #104]	; (80018ec <HAL_DAC_MspInit+0xd8>)
 8001884:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8001886:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <HAL_DAC_MspInit+0xd4>)
 8001888:	2206      	movs	r2, #6
 800188a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800188c:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <HAL_DAC_MspInit+0xd4>)
 800188e:	2210      	movs	r2, #16
 8001890:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <HAL_DAC_MspInit+0xd4>)
 8001894:	2200      	movs	r2, #0
 8001896:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001898:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <HAL_DAC_MspInit+0xd4>)
 800189a:	2280      	movs	r2, #128	; 0x80
 800189c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800189e:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_DAC_MspInit+0xd4>)
 80018a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018a4:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <HAL_DAC_MspInit+0xd4>)
 80018a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018ac:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80018ae:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <HAL_DAC_MspInit+0xd4>)
 80018b0:	2220      	movs	r2, #32
 80018b2:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <HAL_DAC_MspInit+0xd4>)
 80018b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80018bc:	480a      	ldr	r0, [pc, #40]	; (80018e8 <HAL_DAC_MspInit+0xd4>)
 80018be:	f002 fb19 	bl	8003ef4 <HAL_DMA_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 80018c8:	f7ff fef8 	bl	80016bc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a06      	ldr	r2, [pc, #24]	; (80018e8 <HAL_DAC_MspInit+0xd4>)
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <HAL_DAC_MspInit+0xd4>)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80018d8:	bf00      	nop
 80018da:	3728      	adds	r7, #40	; 0x28
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	50000800 	.word	0x50000800
 80018e4:	40021000 	.word	0x40021000
 80018e8:	20002b24 	.word	0x20002b24
 80018ec:	40020008 	.word	0x40020008

080018f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	; 0x28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a1b      	ldr	r2, [pc, #108]	; (800197c <HAL_SPI_MspInit+0x8c>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d130      	bne.n	8001974 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001912:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <HAL_SPI_MspInit+0x90>)
 8001914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001916:	4a1a      	ldr	r2, [pc, #104]	; (8001980 <HAL_SPI_MspInit+0x90>)
 8001918:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800191c:	6613      	str	r3, [r2, #96]	; 0x60
 800191e:	4b18      	ldr	r3, [pc, #96]	; (8001980 <HAL_SPI_MspInit+0x90>)
 8001920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001922:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <HAL_SPI_MspInit+0x90>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	4a14      	ldr	r2, [pc, #80]	; (8001980 <HAL_SPI_MspInit+0x90>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001936:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_SPI_MspInit+0x90>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001942:	23e0      	movs	r3, #224	; 0xe0
 8001944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001946:	2302      	movs	r3, #2
 8001948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194e:	2300      	movs	r3, #0
 8001950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001952:	2305      	movs	r3, #5
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	4619      	mov	r1, r3
 800195c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001960:	f002 fdfa 	bl	8004558 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001964:	2200      	movs	r2, #0
 8001966:	2100      	movs	r1, #0
 8001968:	2023      	movs	r0, #35	; 0x23
 800196a:	f001 fe6a 	bl	8003642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800196e:	2023      	movs	r0, #35	; 0x23
 8001970:	f001 fe81 	bl	8003676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001974:	bf00      	nop
 8001976:	3728      	adds	r7, #40	; 0x28
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40013000 	.word	0x40013000
 8001980:	40021000 	.word	0x40021000

08001984 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a13      	ldr	r2, [pc, #76]	; (80019e0 <HAL_TIM_Base_MspInit+0x5c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d10c      	bne.n	80019b0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001996:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <HAL_TIM_Base_MspInit+0x60>)
 8001998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800199a:	4a12      	ldr	r2, [pc, #72]	; (80019e4 <HAL_TIM_Base_MspInit+0x60>)
 800199c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019a0:	6613      	str	r3, [r2, #96]	; 0x60
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <HAL_TIM_Base_MspInit+0x60>)
 80019a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019ae:	e010      	b.n	80019d2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019b8:	d10b      	bne.n	80019d2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019ba:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <HAL_TIM_Base_MspInit+0x60>)
 80019bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019be:	4a09      	ldr	r2, [pc, #36]	; (80019e4 <HAL_TIM_Base_MspInit+0x60>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	6593      	str	r3, [r2, #88]	; 0x58
 80019c6:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <HAL_TIM_Base_MspInit+0x60>)
 80019c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
}
 80019d2:	bf00      	nop
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40012c00 	.word	0x40012c00
 80019e4:	40021000 	.word	0x40021000

080019e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b088      	sub	sp, #32
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 030c 	add.w	r3, r7, #12
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a12      	ldr	r2, [pc, #72]	; (8001a50 <HAL_TIM_MspPostInit+0x68>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d11d      	bne.n	8001a46 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0a:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_TIM_MspPostInit+0x6c>)
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0e:	4a11      	ldr	r2, [pc, #68]	; (8001a54 <HAL_TIM_MspPostInit+0x6c>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a16:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <HAL_TIM_MspPostInit+0x6c>)
 8001a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a26:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001a34:	2306      	movs	r3, #6
 8001a36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a38:	f107 030c 	add.w	r3, r7, #12
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a42:	f002 fd89 	bl	8004558 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a46:	bf00      	nop
 8001a48:	3720      	adds	r7, #32
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40012c00 	.word	0x40012c00
 8001a54:	40021000 	.word	0x40021000

08001a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <NMI_Handler+0x4>

08001a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a62:	e7fe      	b.n	8001a62 <HardFault_Handler+0x4>

08001a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <MemManage_Handler+0x4>

08001a6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <BusFault_Handler+0x4>

08001a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <UsageFault_Handler+0x4>

08001a76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa4:	f000 f98c 	bl	8001dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	f002 feeb 	bl	800488c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001abe:	2002      	movs	r0, #2
 8001ac0:	f002 fee4 	bl	800488c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001acc:	4802      	ldr	r0, [pc, #8]	; (8001ad8 <DMA1_Channel1_IRQHandler+0x10>)
 8001ace:	f002 fbf4 	bl	80042ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20002b24 	.word	0x20002b24

08001adc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ae0:	4802      	ldr	r0, [pc, #8]	; (8001aec <DMA1_Channel2_IRQHandler+0x10>)
 8001ae2:	f002 fbea 	bl	80042ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20002ab0 	.word	0x20002ab0

08001af0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001af4:	4802      	ldr	r0, [pc, #8]	; (8001b00 <USB_LP_IRQHandler+0x10>)
 8001af6:	f002 fff3 	bl	8004ae0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	200046e0 	.word	0x200046e0

08001b04 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001b08:	4802      	ldr	r0, [pc, #8]	; (8001b14 <SPI1_IRQHandler+0x10>)
 8001b0a:	f005 ffb1 	bl	8007a70 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20002b84 	.word	0x20002b84

08001b18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
	return 1;
 8001b1c:	2301      	movs	r3, #1
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <_kill>:

int _kill(int pid, int sig)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b32:	f00c f975 	bl	800de20 <__errno>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2216      	movs	r2, #22
 8001b3a:	601a      	str	r2, [r3, #0]
	return -1;
 8001b3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <_exit>:

void _exit (int status)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f7ff ffe7 	bl	8001b28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b5a:	e7fe      	b.n	8001b5a <_exit+0x12>

08001b5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	e00a      	b.n	8001b84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b6e:	f3af 8000 	nop.w
 8001b72:	4601      	mov	r1, r0
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	1c5a      	adds	r2, r3, #1
 8001b78:	60ba      	str	r2, [r7, #8]
 8001b7a:	b2ca      	uxtb	r2, r1
 8001b7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	3301      	adds	r3, #1
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	dbf0      	blt.n	8001b6e <_read+0x12>
	}

return len;
 8001b8c:	687b      	ldr	r3, [r7, #4]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b086      	sub	sp, #24
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	60f8      	str	r0, [r7, #12]
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	e009      	b.n	8001bbc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	60ba      	str	r2, [r7, #8]
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	dbf1      	blt.n	8001ba8 <_write+0x12>
	}
	return len;
 8001bc4:	687b      	ldr	r3, [r7, #4]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <_close>:

int _close(int file)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
	return -1;
 8001bd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bf6:	605a      	str	r2, [r3, #4]
	return 0;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <_isatty>:

int _isatty(int file)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
	return 1;
 8001c0e:	2301      	movs	r3, #1
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
	return 0;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c40:	4a14      	ldr	r2, [pc, #80]	; (8001c94 <_sbrk+0x5c>)
 8001c42:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <_sbrk+0x60>)
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c4c:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <_sbrk+0x64>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d102      	bne.n	8001c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <_sbrk+0x64>)
 8001c56:	4a12      	ldr	r2, [pc, #72]	; (8001ca0 <_sbrk+0x68>)
 8001c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c5a:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <_sbrk+0x64>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d207      	bcs.n	8001c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c68:	f00c f8da 	bl	800de20 <__errno>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	220c      	movs	r2, #12
 8001c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c76:	e009      	b.n	8001c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <_sbrk+0x64>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c7e:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <_sbrk+0x64>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	4a05      	ldr	r2, [pc, #20]	; (8001c9c <_sbrk+0x64>)
 8001c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20020000 	.word	0x20020000
 8001c98:	00000400 	.word	0x00000400
 8001c9c:	20003200 	.word	0x20003200
 8001ca0:	20004c08 	.word	0x20004c08

08001ca4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <SystemInit+0x20>)
 8001caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cae:	4a05      	ldr	r2, [pc, #20]	; (8001cc4 <SystemInit+0x20>)
 8001cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cc8:	480d      	ldr	r0, [pc, #52]	; (8001d00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ccc:	480d      	ldr	r0, [pc, #52]	; (8001d04 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cce:	490e      	ldr	r1, [pc, #56]	; (8001d08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cd0:	4a0e      	ldr	r2, [pc, #56]	; (8001d0c <LoopForever+0xe>)
  movs r3, #0
 8001cd2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001cd4:	e002      	b.n	8001cdc <LoopCopyDataInit>

08001cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cda:	3304      	adds	r3, #4

08001cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce0:	d3f9      	bcc.n	8001cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ce2:	4a0b      	ldr	r2, [pc, #44]	; (8001d10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ce4:	4c0b      	ldr	r4, [pc, #44]	; (8001d14 <LoopForever+0x16>)
  movs r3, #0
 8001ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce8:	e001      	b.n	8001cee <LoopFillZerobss>

08001cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cec:	3204      	adds	r2, #4

08001cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf0:	d3fb      	bcc.n	8001cea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cf2:	f7ff ffd7 	bl	8001ca4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cf6:	f00c f899 	bl	800de2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cfa:	f7fe ffa7 	bl	8000c4c <main>

08001cfe <LoopForever>:

LoopForever:
    b LoopForever
 8001cfe:	e7fe      	b.n	8001cfe <LoopForever>
  ldr   r0, =_estack
 8001d00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d08:	20002a28 	.word	0x20002a28
  ldr r2, =_sidata
 8001d0c:	08010d64 	.word	0x08010d64
  ldr r2, =_sbss
 8001d10:	20002a28 	.word	0x20002a28
  ldr r4, =_ebss
 8001d14:	20004c04 	.word	0x20004c04

08001d18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d18:	e7fe      	b.n	8001d18 <ADC1_2_IRQHandler>

08001d1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d20:	2300      	movs	r3, #0
 8001d22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d24:	2003      	movs	r0, #3
 8001d26:	f001 fc81 	bl	800362c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d2a:	200f      	movs	r0, #15
 8001d2c:	f000 f80e 	bl	8001d4c <HAL_InitTick>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d002      	beq.n	8001d3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	71fb      	strb	r3, [r7, #7]
 8001d3a:	e001      	b.n	8001d40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d3c:	f7ff fcc4 	bl	80016c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d40:	79fb      	ldrb	r3, [r7, #7]

}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d58:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <HAL_InitTick+0x68>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d022      	beq.n	8001da6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d60:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <HAL_InitTick+0x6c>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <HAL_InitTick+0x68>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d74:	4618      	mov	r0, r3
 8001d76:	f001 fc8c 	bl	8003692 <HAL_SYSTICK_Config>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10f      	bne.n	8001da0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b0f      	cmp	r3, #15
 8001d84:	d809      	bhi.n	8001d9a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d86:	2200      	movs	r2, #0
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d8e:	f001 fc58 	bl	8003642 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d92:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <HAL_InitTick+0x70>)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	e007      	b.n	8001daa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	73fb      	strb	r3, [r7, #15]
 8001d9e:	e004      	b.n	8001daa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	73fb      	strb	r3, [r7, #15]
 8001da4:	e001      	b.n	8001daa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	200026dc 	.word	0x200026dc
 8001db8:	200026d4 	.word	0x200026d4
 8001dbc:	200026d8 	.word	0x200026d8

08001dc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <HAL_IncTick+0x1c>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <HAL_IncTick+0x20>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4413      	add	r3, r2
 8001dce:	4a03      	ldr	r2, [pc, #12]	; (8001ddc <HAL_IncTick+0x1c>)
 8001dd0:	6013      	str	r3, [r2, #0]
}
 8001dd2:	bf00      	nop
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	20003204 	.word	0x20003204
 8001de0:	200026dc 	.word	0x200026dc

08001de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return uwTick;
 8001de8:	4b03      	ldr	r3, [pc, #12]	; (8001df8 <HAL_GetTick+0x14>)
 8001dea:	681b      	ldr	r3, [r3, #0]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	20003204 	.word	0x20003204

08001dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e04:	f7ff ffee 	bl	8001de4 <HAL_GetTick>
 8001e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e14:	d004      	beq.n	8001e20 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e16:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <HAL_Delay+0x40>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e20:	bf00      	nop
 8001e22:	f7ff ffdf 	bl	8001de4 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d8f7      	bhi.n	8001e22 <HAL_Delay+0x26>
  {
  }
}
 8001e32:	bf00      	nop
 8001e34:	bf00      	nop
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	200026dc 	.word	0x200026dc

08001e40 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	431a      	orrs	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	609a      	str	r2, [r3, #8]
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b087      	sub	sp, #28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
 8001eb4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	3360      	adds	r3, #96	; 0x60
 8001eba:	461a      	mov	r2, r3
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <LL_ADC_SetOffset+0x44>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ee0:	bf00      	nop
 8001ee2:	371c      	adds	r7, #28
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	03fff000 	.word	0x03fff000

08001ef0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3360      	adds	r3, #96	; 0x60
 8001efe:	461a      	mov	r2, r3
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b087      	sub	sp, #28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	3360      	adds	r3, #96	; 0x60
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	431a      	orrs	r2, r3
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f46:	bf00      	nop
 8001f48:	371c      	adds	r7, #28
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b087      	sub	sp, #28
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	60f8      	str	r0, [r7, #12]
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	3360      	adds	r3, #96	; 0x60
 8001f62:	461a      	mov	r2, r3
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	431a      	orrs	r2, r3
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001f7c:	bf00      	nop
 8001f7e:	371c      	adds	r7, #28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b087      	sub	sp, #28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	3360      	adds	r3, #96	; 0x60
 8001f98:	461a      	mov	r2, r3
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	431a      	orrs	r2, r3
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001fb2:	bf00      	nop
 8001fb4:	371c      	adds	r7, #28
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	615a      	str	r2, [r3, #20]
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e000      	b.n	8001ffe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800200a:	b480      	push	{r7}
 800200c:	b087      	sub	sp, #28
 800200e:	af00      	add	r7, sp, #0
 8002010:	60f8      	str	r0, [r7, #12]
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	3330      	adds	r3, #48	; 0x30
 800201a:	461a      	mov	r2, r3
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	0a1b      	lsrs	r3, r3, #8
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	4413      	add	r3, r2
 8002028:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	f003 031f 	and.w	r3, r3, #31
 8002034:	211f      	movs	r1, #31
 8002036:	fa01 f303 	lsl.w	r3, r1, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	401a      	ands	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	0e9b      	lsrs	r3, r3, #26
 8002042:	f003 011f 	and.w	r1, r3, #31
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	f003 031f 	and.w	r3, r3, #31
 800204c:	fa01 f303 	lsl.w	r3, r1, r3
 8002050:	431a      	orrs	r2, r3
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002056:	bf00      	nop
 8002058:	371c      	adds	r7, #28
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002062:	b480      	push	{r7}
 8002064:	b087      	sub	sp, #28
 8002066:	af00      	add	r7, sp, #0
 8002068:	60f8      	str	r0, [r7, #12]
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	3314      	adds	r3, #20
 8002072:	461a      	mov	r2, r3
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	0e5b      	lsrs	r3, r3, #25
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	4413      	add	r3, r2
 8002080:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	0d1b      	lsrs	r3, r3, #20
 800208a:	f003 031f 	and.w	r3, r3, #31
 800208e:	2107      	movs	r1, #7
 8002090:	fa01 f303 	lsl.w	r3, r1, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	401a      	ands	r2, r3
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	0d1b      	lsrs	r3, r3, #20
 800209c:	f003 031f 	and.w	r3, r3, #31
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	fa01 f303 	lsl.w	r3, r1, r3
 80020a6:	431a      	orrs	r2, r3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80020ac:	bf00      	nop
 80020ae:	371c      	adds	r7, #28
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a0f      	ldr	r2, [pc, #60]	; (8002104 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d10a      	bne.n	80020e2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d8:	431a      	orrs	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80020e0:	e00a      	b.n	80020f8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ee:	43db      	mvns	r3, r3
 80020f0:	401a      	ands	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80020f8:	bf00      	nop
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	407f0000 	.word	0x407f0000

08002108 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 031f 	and.w	r3, r3, #31
}
 8002118:	4618      	mov	r0, r3
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002134:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6093      	str	r3, [r2, #8]
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800215c:	d101      	bne.n	8002162 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002180:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002184:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021ac:	d101      	bne.n	80021b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021d4:	f043 0201 	orr.w	r2, r3, #1
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d101      	bne.n	8002200 <LL_ADC_IsEnabled+0x18>
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <LL_ADC_IsEnabled+0x1a>
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800221e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002222:	f043 0204 	orr.w	r2, r3, #4
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	2b04      	cmp	r3, #4
 8002248:	d101      	bne.n	800224e <LL_ADC_REG_IsConversionOngoing+0x18>
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 0308 	and.w	r3, r3, #8
 800226c:	2b08      	cmp	r3, #8
 800226e:	d101      	bne.n	8002274 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002270:	2301      	movs	r3, #1
 8002272:	e000      	b.n	8002276 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
	...

08002284 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002284:	b590      	push	{r4, r7, lr}
 8002286:	b089      	sub	sp, #36	; 0x24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800228c:	2300      	movs	r3, #0
 800228e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002290:	2300      	movs	r3, #0
 8002292:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e1af      	b.n	80025fe <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d109      	bne.n	80022c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7ff fa2f 	bl	8001710 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ff3f 	bl	8002148 <LL_ADC_IsDeepPowerDownEnabled>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d004      	beq.n	80022da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff ff25 	bl	8002124 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff ff5a 	bl	8002198 <LL_ADC_IsInternalRegulatorEnabled>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d115      	bne.n	8002316 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff ff3e 	bl	8002170 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022f4:	4b9f      	ldr	r3, [pc, #636]	; (8002574 <HAL_ADC_Init+0x2f0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	099b      	lsrs	r3, r3, #6
 80022fa:	4a9f      	ldr	r2, [pc, #636]	; (8002578 <HAL_ADC_Init+0x2f4>)
 80022fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002300:	099b      	lsrs	r3, r3, #6
 8002302:	3301      	adds	r3, #1
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002308:	e002      	b.n	8002310 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	3b01      	subs	r3, #1
 800230e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f9      	bne.n	800230a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff ff3c 	bl	8002198 <LL_ADC_IsInternalRegulatorEnabled>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10d      	bne.n	8002342 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232a:	f043 0210 	orr.w	r2, r3, #16
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002336:	f043 0201 	orr.w	r2, r3, #1
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff ff75 	bl	8002236 <LL_ADC_REG_IsConversionOngoing>
 800234c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002352:	f003 0310 	and.w	r3, r3, #16
 8002356:	2b00      	cmp	r3, #0
 8002358:	f040 8148 	bne.w	80025ec <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	2b00      	cmp	r3, #0
 8002360:	f040 8144 	bne.w	80025ec <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002368:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800236c:	f043 0202 	orr.w	r2, r3, #2
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ff35 	bl	80021e8 <LL_ADC_IsEnabled>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d141      	bne.n	8002408 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800238c:	d004      	beq.n	8002398 <HAL_ADC_Init+0x114>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a7a      	ldr	r2, [pc, #488]	; (800257c <HAL_ADC_Init+0x2f8>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d10f      	bne.n	80023b8 <HAL_ADC_Init+0x134>
 8002398:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800239c:	f7ff ff24 	bl	80021e8 <LL_ADC_IsEnabled>
 80023a0:	4604      	mov	r4, r0
 80023a2:	4876      	ldr	r0, [pc, #472]	; (800257c <HAL_ADC_Init+0x2f8>)
 80023a4:	f7ff ff20 	bl	80021e8 <LL_ADC_IsEnabled>
 80023a8:	4603      	mov	r3, r0
 80023aa:	4323      	orrs	r3, r4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	bf0c      	ite	eq
 80023b0:	2301      	moveq	r3, #1
 80023b2:	2300      	movne	r3, #0
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	e012      	b.n	80023de <HAL_ADC_Init+0x15a>
 80023b8:	4871      	ldr	r0, [pc, #452]	; (8002580 <HAL_ADC_Init+0x2fc>)
 80023ba:	f7ff ff15 	bl	80021e8 <LL_ADC_IsEnabled>
 80023be:	4604      	mov	r4, r0
 80023c0:	4870      	ldr	r0, [pc, #448]	; (8002584 <HAL_ADC_Init+0x300>)
 80023c2:	f7ff ff11 	bl	80021e8 <LL_ADC_IsEnabled>
 80023c6:	4603      	mov	r3, r0
 80023c8:	431c      	orrs	r4, r3
 80023ca:	486f      	ldr	r0, [pc, #444]	; (8002588 <HAL_ADC_Init+0x304>)
 80023cc:	f7ff ff0c 	bl	80021e8 <LL_ADC_IsEnabled>
 80023d0:	4603      	mov	r3, r0
 80023d2:	4323      	orrs	r3, r4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	bf0c      	ite	eq
 80023d8:	2301      	moveq	r3, #1
 80023da:	2300      	movne	r3, #0
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d012      	beq.n	8002408 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023ea:	d004      	beq.n	80023f6 <HAL_ADC_Init+0x172>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a62      	ldr	r2, [pc, #392]	; (800257c <HAL_ADC_Init+0x2f8>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d101      	bne.n	80023fa <HAL_ADC_Init+0x176>
 80023f6:	4a65      	ldr	r2, [pc, #404]	; (800258c <HAL_ADC_Init+0x308>)
 80023f8:	e000      	b.n	80023fc <HAL_ADC_Init+0x178>
 80023fa:	4a65      	ldr	r2, [pc, #404]	; (8002590 <HAL_ADC_Init+0x30c>)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	4619      	mov	r1, r3
 8002402:	4610      	mov	r0, r2
 8002404:	f7ff fd1c 	bl	8001e40 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	7f5b      	ldrb	r3, [r3, #29]
 800240c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002412:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002418:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800241e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002426:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002432:	2b01      	cmp	r3, #1
 8002434:	d106      	bne.n	8002444 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243a:	3b01      	subs	r3, #1
 800243c:	045b      	lsls	r3, r3, #17
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002448:	2b00      	cmp	r3, #0
 800244a:	d009      	beq.n	8002460 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002458:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	4b4b      	ldr	r3, [pc, #300]	; (8002594 <HAL_ADC_Init+0x310>)
 8002468:	4013      	ands	r3, r2
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6812      	ldr	r2, [r2, #0]
 800246e:	69b9      	ldr	r1, [r7, #24]
 8002470:	430b      	orrs	r3, r1
 8002472:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fed1 	bl	8002236 <LL_ADC_REG_IsConversionOngoing>
 8002494:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fede 	bl	800225c <LL_ADC_INJ_IsConversionOngoing>
 80024a0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d17f      	bne.n	80025a8 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d17c      	bne.n	80025a8 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80024b2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024ba:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024ca:	f023 0302 	bic.w	r3, r3, #2
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6812      	ldr	r2, [r2, #0]
 80024d2:	69b9      	ldr	r1, [r7, #24]
 80024d4:	430b      	orrs	r3, r1
 80024d6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d017      	beq.n	8002510 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	691a      	ldr	r2, [r3, #16]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80024ee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80024f8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6911      	ldr	r1, [r2, #16]
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6812      	ldr	r2, [r2, #0]
 8002508:	430b      	orrs	r3, r1
 800250a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800250e:	e013      	b.n	8002538 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	691a      	ldr	r2, [r3, #16]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800251e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002530:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002534:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800253e:	2b01      	cmp	r3, #1
 8002540:	d12a      	bne.n	8002598 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800254c:	f023 0304 	bic.w	r3, r3, #4
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002558:	4311      	orrs	r1, r2
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800255e:	4311      	orrs	r1, r2
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002564:	430a      	orrs	r2, r1
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f042 0201 	orr.w	r2, r2, #1
 8002570:	611a      	str	r2, [r3, #16]
 8002572:	e019      	b.n	80025a8 <HAL_ADC_Init+0x324>
 8002574:	200026d4 	.word	0x200026d4
 8002578:	053e2d63 	.word	0x053e2d63
 800257c:	50000100 	.word	0x50000100
 8002580:	50000400 	.word	0x50000400
 8002584:	50000500 	.word	0x50000500
 8002588:	50000600 	.word	0x50000600
 800258c:	50000300 	.word	0x50000300
 8002590:	50000700 	.word	0x50000700
 8002594:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691a      	ldr	r2, [r3, #16]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0201 	bic.w	r2, r2, #1
 80025a6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d10c      	bne.n	80025ca <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	f023 010f 	bic.w	r1, r3, #15
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	1e5a      	subs	r2, r3, #1
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	631a      	str	r2, [r3, #48]	; 0x30
 80025c8:	e007      	b.n	80025da <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 020f 	bic.w	r2, r2, #15
 80025d8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025de:	f023 0303 	bic.w	r3, r3, #3
 80025e2:	f043 0201 	orr.w	r2, r3, #1
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80025ea:	e007      	b.n	80025fc <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f0:	f043 0210 	orr.w	r2, r3, #16
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80025fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3724      	adds	r7, #36	; 0x24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd90      	pop	{r4, r7, pc}
 8002606:	bf00      	nop

08002608 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800261c:	d004      	beq.n	8002628 <HAL_ADC_Start_DMA+0x20>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a5a      	ldr	r2, [pc, #360]	; (800278c <HAL_ADC_Start_DMA+0x184>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d101      	bne.n	800262c <HAL_ADC_Start_DMA+0x24>
 8002628:	4b59      	ldr	r3, [pc, #356]	; (8002790 <HAL_ADC_Start_DMA+0x188>)
 800262a:	e000      	b.n	800262e <HAL_ADC_Start_DMA+0x26>
 800262c:	4b59      	ldr	r3, [pc, #356]	; (8002794 <HAL_ADC_Start_DMA+0x18c>)
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff fd6a 	bl	8002108 <LL_ADC_GetMultimode>
 8002634:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fdfb 	bl	8002236 <LL_ADC_REG_IsConversionOngoing>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	f040 809b 	bne.w	800277e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800264e:	2b01      	cmp	r3, #1
 8002650:	d101      	bne.n	8002656 <HAL_ADC_Start_DMA+0x4e>
 8002652:	2302      	movs	r3, #2
 8002654:	e096      	b.n	8002784 <HAL_ADC_Start_DMA+0x17c>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a4d      	ldr	r2, [pc, #308]	; (8002798 <HAL_ADC_Start_DMA+0x190>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d008      	beq.n	800267a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d005      	beq.n	800267a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	2b05      	cmp	r3, #5
 8002672:	d002      	beq.n	800267a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	2b09      	cmp	r3, #9
 8002678:	d17a      	bne.n	8002770 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 fce2 	bl	8003044 <ADC_Enable>
 8002680:	4603      	mov	r3, r0
 8002682:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002684:	7dfb      	ldrb	r3, [r7, #23]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d16d      	bne.n	8002766 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002692:	f023 0301 	bic.w	r3, r3, #1
 8002696:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a3a      	ldr	r2, [pc, #232]	; (800278c <HAL_ADC_Start_DMA+0x184>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d009      	beq.n	80026bc <HAL_ADC_Start_DMA+0xb4>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a3b      	ldr	r2, [pc, #236]	; (800279c <HAL_ADC_Start_DMA+0x194>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d002      	beq.n	80026b8 <HAL_ADC_Start_DMA+0xb0>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	e003      	b.n	80026c0 <HAL_ADC_Start_DMA+0xb8>
 80026b8:	4b39      	ldr	r3, [pc, #228]	; (80027a0 <HAL_ADC_Start_DMA+0x198>)
 80026ba:	e001      	b.n	80026c0 <HAL_ADC_Start_DMA+0xb8>
 80026bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d002      	beq.n	80026ce <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d105      	bne.n	80026da <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d006      	beq.n	80026f4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ea:	f023 0206 	bic.w	r2, r3, #6
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	661a      	str	r2, [r3, #96]	; 0x60
 80026f2:	e002      	b.n	80026fa <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fe:	4a29      	ldr	r2, [pc, #164]	; (80027a4 <HAL_ADC_Start_DMA+0x19c>)
 8002700:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002706:	4a28      	ldr	r2, [pc, #160]	; (80027a8 <HAL_ADC_Start_DMA+0x1a0>)
 8002708:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270e:	4a27      	ldr	r2, [pc, #156]	; (80027ac <HAL_ADC_Start_DMA+0x1a4>)
 8002710:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	221c      	movs	r2, #28
 8002718:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 0210 	orr.w	r2, r2, #16
 8002730:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68da      	ldr	r2, [r3, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f042 0201 	orr.w	r2, r2, #1
 8002740:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	3340      	adds	r3, #64	; 0x40
 800274c:	4619      	mov	r1, r3
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f001 fc77 	bl	8004044 <HAL_DMA_Start_IT>
 8002756:	4603      	mov	r3, r0
 8002758:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fd55 	bl	800220e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002764:	e00d      	b.n	8002782 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800276e:	e008      	b.n	8002782 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800277c:	e001      	b.n	8002782 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800277e:	2302      	movs	r3, #2
 8002780:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002782:	7dfb      	ldrb	r3, [r7, #23]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	50000100 	.word	0x50000100
 8002790:	50000300 	.word	0x50000300
 8002794:	50000700 	.word	0x50000700
 8002798:	50000600 	.word	0x50000600
 800279c:	50000500 	.word	0x50000500
 80027a0:	50000400 	.word	0x50000400
 80027a4:	08003109 	.word	0x08003109
 80027a8:	080031e1 	.word	0x080031e1
 80027ac:	080031fd 	.word	0x080031fd

080027b0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b0b6      	sub	sp, #216	; 0xd8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d102      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x24>
 80027e2:	2302      	movs	r3, #2
 80027e4:	f000 bc13 	b.w	800300e <HAL_ADC_ConfigChannel+0x84a>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff fd1e 	bl	8002236 <LL_ADC_REG_IsConversionOngoing>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f040 83f3 	bne.w	8002fe8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	6859      	ldr	r1, [r3, #4]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	461a      	mov	r2, r3
 8002810:	f7ff fbfb 	bl	800200a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fd0c 	bl	8002236 <LL_ADC_REG_IsConversionOngoing>
 800281e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff fd18 	bl	800225c <LL_ADC_INJ_IsConversionOngoing>
 800282c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002830:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002834:	2b00      	cmp	r3, #0
 8002836:	f040 81d9 	bne.w	8002bec <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800283a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800283e:	2b00      	cmp	r3, #0
 8002840:	f040 81d4 	bne.w	8002bec <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800284c:	d10f      	bne.n	800286e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2200      	movs	r2, #0
 8002858:	4619      	mov	r1, r3
 800285a:	f7ff fc02 	bl	8002062 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff fba9 	bl	8001fbe <LL_ADC_SetSamplingTimeCommonConfig>
 800286c:	e00e      	b.n	800288c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6818      	ldr	r0, [r3, #0]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	6819      	ldr	r1, [r3, #0]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	461a      	mov	r2, r3
 800287c:	f7ff fbf1 	bl	8002062 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2100      	movs	r1, #0
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff fb99 	bl	8001fbe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	695a      	ldr	r2, [r3, #20]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	08db      	lsrs	r3, r3, #3
 8002898:	f003 0303 	and.w	r3, r3, #3
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	d022      	beq.n	80028f4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6818      	ldr	r0, [r3, #0]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	6919      	ldr	r1, [r3, #16]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028be:	f7ff faf3 	bl	8001ea8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6818      	ldr	r0, [r3, #0]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	6919      	ldr	r1, [r3, #16]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	461a      	mov	r2, r3
 80028d0:	f7ff fb3f 	bl	8001f52 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	6919      	ldr	r1, [r3, #16]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	7f1b      	ldrb	r3, [r3, #28]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d102      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x126>
 80028e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028e8:	e000      	b.n	80028ec <HAL_ADC_ConfigChannel+0x128>
 80028ea:	2300      	movs	r3, #0
 80028ec:	461a      	mov	r2, r3
 80028ee:	f7ff fb4b 	bl	8001f88 <LL_ADC_SetOffsetSaturation>
 80028f2:	e17b      	b.n	8002bec <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2100      	movs	r1, #0
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff faf8 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 8002900:	4603      	mov	r3, r0
 8002902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10a      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x15c>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2100      	movs	r1, #0
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff faed 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 8002916:	4603      	mov	r3, r0
 8002918:	0e9b      	lsrs	r3, r3, #26
 800291a:	f003 021f 	and.w	r2, r3, #31
 800291e:	e01e      	b.n	800295e <HAL_ADC_ConfigChannel+0x19a>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2100      	movs	r1, #0
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff fae2 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 800292c:	4603      	mov	r3, r0
 800292e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002932:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002936:	fa93 f3a3 	rbit	r3, r3
 800293a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800293e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002942:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002946:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800294e:	2320      	movs	r3, #32
 8002950:	e004      	b.n	800295c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002952:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002956:	fab3 f383 	clz	r3, r3
 800295a:	b2db      	uxtb	r3, r3
 800295c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002966:	2b00      	cmp	r3, #0
 8002968:	d105      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x1b2>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	0e9b      	lsrs	r3, r3, #26
 8002970:	f003 031f 	and.w	r3, r3, #31
 8002974:	e018      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x1e4>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002982:	fa93 f3a3 	rbit	r3, r3
 8002986:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800298a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800298e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002992:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800299a:	2320      	movs	r3, #32
 800299c:	e004      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800299e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029a2:	fab3 f383 	clz	r3, r3
 80029a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d106      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2200      	movs	r2, #0
 80029b2:	2100      	movs	r1, #0
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff fab1 	bl	8001f1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2101      	movs	r1, #1
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff fa95 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 80029c6:	4603      	mov	r3, r0
 80029c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10a      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x222>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2101      	movs	r1, #1
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff fa8a 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 80029dc:	4603      	mov	r3, r0
 80029de:	0e9b      	lsrs	r3, r3, #26
 80029e0:	f003 021f 	and.w	r2, r3, #31
 80029e4:	e01e      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x260>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2101      	movs	r1, #1
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff fa7f 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 80029f2:	4603      	mov	r3, r0
 80029f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80029fc:	fa93 f3a3 	rbit	r3, r3
 8002a00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002a04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002a0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002a14:	2320      	movs	r3, #32
 8002a16:	e004      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002a18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a1c:	fab3 f383 	clz	r3, r3
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d105      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x278>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	0e9b      	lsrs	r3, r3, #26
 8002a36:	f003 031f 	and.w	r3, r3, #31
 8002a3a:	e018      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x2aa>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a48:	fa93 f3a3 	rbit	r3, r3
 8002a4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002a50:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002a58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002a60:	2320      	movs	r3, #32
 8002a62:	e004      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002a64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a68:	fab3 f383 	clz	r3, r3
 8002a6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d106      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2200      	movs	r2, #0
 8002a78:	2101      	movs	r1, #1
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff fa4e 	bl	8001f1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2102      	movs	r1, #2
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff fa32 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10a      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x2e8>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2102      	movs	r1, #2
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff fa27 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	0e9b      	lsrs	r3, r3, #26
 8002aa6:	f003 021f 	and.w	r2, r3, #31
 8002aaa:	e01e      	b.n	8002aea <HAL_ADC_ConfigChannel+0x326>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2102      	movs	r1, #2
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fa1c 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ac2:	fa93 f3a3 	rbit	r3, r3
 8002ac6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002aca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ace:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002ad2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002ada:	2320      	movs	r3, #32
 8002adc:	e004      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002ade:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ae2:	fab3 f383 	clz	r3, r3
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d105      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x33e>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	0e9b      	lsrs	r3, r3, #26
 8002afc:	f003 031f 	and.w	r3, r3, #31
 8002b00:	e016      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x36c>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b0e:	fa93 f3a3 	rbit	r3, r3
 8002b12:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002b14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002b1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002b22:	2320      	movs	r3, #32
 8002b24:	e004      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002b26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b2a:	fab3 f383 	clz	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d106      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2102      	movs	r1, #2
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff f9ed 	bl	8001f1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2103      	movs	r1, #3
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff f9d1 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10a      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x3aa>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2103      	movs	r1, #3
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff f9c6 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 8002b64:	4603      	mov	r3, r0
 8002b66:	0e9b      	lsrs	r3, r3, #26
 8002b68:	f003 021f 	and.w	r2, r3, #31
 8002b6c:	e017      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x3da>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2103      	movs	r1, #3
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff f9bb 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b80:	fa93 f3a3 	rbit	r3, r3
 8002b84:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002b86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b88:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002b8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002b90:	2320      	movs	r3, #32
 8002b92:	e003      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002b94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b96:	fab3 f383 	clz	r3, r3
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d105      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x3f2>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	0e9b      	lsrs	r3, r3, #26
 8002bb0:	f003 031f 	and.w	r3, r3, #31
 8002bb4:	e011      	b.n	8002bda <HAL_ADC_ConfigChannel+0x416>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bbe:	fa93 f3a3 	rbit	r3, r3
 8002bc2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002bc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bc6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002bce:	2320      	movs	r3, #32
 8002bd0:	e003      	b.n	8002bda <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd4:	fab3 f383 	clz	r3, r3
 8002bd8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d106      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2200      	movs	r2, #0
 8002be4:	2103      	movs	r1, #3
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff f998 	bl	8001f1c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff faf9 	bl	80021e8 <LL_ADC_IsEnabled>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f040 813d 	bne.w	8002e78 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6818      	ldr	r0, [r3, #0]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	6819      	ldr	r1, [r3, #0]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	f7ff fa54 	bl	80020b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	4aa2      	ldr	r2, [pc, #648]	; (8002ea0 <HAL_ADC_ConfigChannel+0x6dc>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	f040 812e 	bne.w	8002e78 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10b      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x480>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	0e9b      	lsrs	r3, r3, #26
 8002c32:	3301      	adds	r3, #1
 8002c34:	f003 031f 	and.w	r3, r3, #31
 8002c38:	2b09      	cmp	r3, #9
 8002c3a:	bf94      	ite	ls
 8002c3c:	2301      	movls	r3, #1
 8002c3e:	2300      	movhi	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	e019      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x4b4>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c4c:	fa93 f3a3 	rbit	r3, r3
 8002c50:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002c52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c54:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002c56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002c5c:	2320      	movs	r3, #32
 8002c5e:	e003      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002c60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c62:	fab3 f383 	clz	r3, r3
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	3301      	adds	r3, #1
 8002c6a:	f003 031f 	and.w	r3, r3, #31
 8002c6e:	2b09      	cmp	r3, #9
 8002c70:	bf94      	ite	ls
 8002c72:	2301      	movls	r3, #1
 8002c74:	2300      	movhi	r3, #0
 8002c76:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d079      	beq.n	8002d70 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d107      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x4d4>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	0e9b      	lsrs	r3, r3, #26
 8002c8e:	3301      	adds	r3, #1
 8002c90:	069b      	lsls	r3, r3, #26
 8002c92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c96:	e015      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x500>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ca0:	fa93 f3a3 	rbit	r3, r3
 8002ca4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ca8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002caa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002cb0:	2320      	movs	r3, #32
 8002cb2:	e003      	b.n	8002cbc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002cb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cb6:	fab3 f383 	clz	r3, r3
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	069b      	lsls	r3, r3, #26
 8002cc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d109      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x520>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	0e9b      	lsrs	r3, r3, #26
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	f003 031f 	and.w	r3, r3, #31
 8002cdc:	2101      	movs	r1, #1
 8002cde:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce2:	e017      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x550>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cec:	fa93 f3a3 	rbit	r3, r3
 8002cf0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cf4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002cfc:	2320      	movs	r3, #32
 8002cfe:	e003      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d02:	fab3 f383 	clz	r3, r3
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	3301      	adds	r3, #1
 8002d0a:	f003 031f 	and.w	r3, r3, #31
 8002d0e:	2101      	movs	r1, #1
 8002d10:	fa01 f303 	lsl.w	r3, r1, r3
 8002d14:	ea42 0103 	orr.w	r1, r2, r3
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10a      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x576>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	0e9b      	lsrs	r3, r3, #26
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	f003 021f 	and.w	r2, r3, #31
 8002d30:	4613      	mov	r3, r2
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	4413      	add	r3, r2
 8002d36:	051b      	lsls	r3, r3, #20
 8002d38:	e018      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x5a8>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d42:	fa93 f3a3 	rbit	r3, r3
 8002d46:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002d52:	2320      	movs	r3, #32
 8002d54:	e003      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d58:	fab3 f383 	clz	r3, r3
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	3301      	adds	r3, #1
 8002d60:	f003 021f 	and.w	r2, r3, #31
 8002d64:	4613      	mov	r3, r2
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	4413      	add	r3, r2
 8002d6a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d6c:	430b      	orrs	r3, r1
 8002d6e:	e07e      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d107      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x5c8>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	0e9b      	lsrs	r3, r3, #26
 8002d82:	3301      	adds	r3, #1
 8002d84:	069b      	lsls	r3, r3, #26
 8002d86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d8a:	e015      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x5f4>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d94:	fa93 f3a3 	rbit	r3, r3
 8002d98:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002da4:	2320      	movs	r3, #32
 8002da6:	e003      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002daa:	fab3 f383 	clz	r3, r3
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	3301      	adds	r3, #1
 8002db2:	069b      	lsls	r3, r3, #26
 8002db4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d109      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x614>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	0e9b      	lsrs	r3, r3, #26
 8002dca:	3301      	adds	r3, #1
 8002dcc:	f003 031f 	and.w	r3, r3, #31
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd6:	e017      	b.n	8002e08 <HAL_ADC_ConfigChannel+0x644>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dde:	6a3b      	ldr	r3, [r7, #32]
 8002de0:	fa93 f3a3 	rbit	r3, r3
 8002de4:	61fb      	str	r3, [r7, #28]
  return result;
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002df0:	2320      	movs	r3, #32
 8002df2:	e003      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	fab3 f383 	clz	r3, r3
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	f003 031f 	and.w	r3, r3, #31
 8002e02:	2101      	movs	r1, #1
 8002e04:	fa01 f303 	lsl.w	r3, r1, r3
 8002e08:	ea42 0103 	orr.w	r1, r2, r3
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10d      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x670>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	0e9b      	lsrs	r3, r3, #26
 8002e1e:	3301      	adds	r3, #1
 8002e20:	f003 021f 	and.w	r2, r3, #31
 8002e24:	4613      	mov	r3, r2
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	4413      	add	r3, r2
 8002e2a:	3b1e      	subs	r3, #30
 8002e2c:	051b      	lsls	r3, r3, #20
 8002e2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e32:	e01b      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x6a8>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	fa93 f3a3 	rbit	r3, r3
 8002e40:	613b      	str	r3, [r7, #16]
  return result;
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002e4c:	2320      	movs	r3, #32
 8002e4e:	e003      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	fab3 f383 	clz	r3, r3
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	3301      	adds	r3, #1
 8002e5a:	f003 021f 	and.w	r2, r3, #31
 8002e5e:	4613      	mov	r3, r2
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	4413      	add	r3, r2
 8002e64:	3b1e      	subs	r3, #30
 8002e66:	051b      	lsls	r3, r3, #20
 8002e68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e6c:	430b      	orrs	r3, r1
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	6892      	ldr	r2, [r2, #8]
 8002e72:	4619      	mov	r1, r3
 8002e74:	f7ff f8f5 	bl	8002062 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <HAL_ADC_ConfigChannel+0x6e0>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 80be 	beq.w	8003002 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e8e:	d004      	beq.n	8002e9a <HAL_ADC_ConfigChannel+0x6d6>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a04      	ldr	r2, [pc, #16]	; (8002ea8 <HAL_ADC_ConfigChannel+0x6e4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d10a      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x6ec>
 8002e9a:	4b04      	ldr	r3, [pc, #16]	; (8002eac <HAL_ADC_ConfigChannel+0x6e8>)
 8002e9c:	e009      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x6ee>
 8002e9e:	bf00      	nop
 8002ea0:	407f0000 	.word	0x407f0000
 8002ea4:	80080000 	.word	0x80080000
 8002ea8:	50000100 	.word	0x50000100
 8002eac:	50000300 	.word	0x50000300
 8002eb0:	4b59      	ldr	r3, [pc, #356]	; (8003018 <HAL_ADC_ConfigChannel+0x854>)
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe ffea 	bl	8001e8c <LL_ADC_GetCommonPathInternalCh>
 8002eb8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a56      	ldr	r2, [pc, #344]	; (800301c <HAL_ADC_ConfigChannel+0x858>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d004      	beq.n	8002ed0 <HAL_ADC_ConfigChannel+0x70c>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a55      	ldr	r2, [pc, #340]	; (8003020 <HAL_ADC_ConfigChannel+0x85c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d13a      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ed0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ed4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d134      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ee4:	d005      	beq.n	8002ef2 <HAL_ADC_ConfigChannel+0x72e>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a4e      	ldr	r2, [pc, #312]	; (8003024 <HAL_ADC_ConfigChannel+0x860>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	f040 8085 	bne.w	8002ffc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002efa:	d004      	beq.n	8002f06 <HAL_ADC_ConfigChannel+0x742>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a49      	ldr	r2, [pc, #292]	; (8003028 <HAL_ADC_ConfigChannel+0x864>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d101      	bne.n	8002f0a <HAL_ADC_ConfigChannel+0x746>
 8002f06:	4a49      	ldr	r2, [pc, #292]	; (800302c <HAL_ADC_ConfigChannel+0x868>)
 8002f08:	e000      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x748>
 8002f0a:	4a43      	ldr	r2, [pc, #268]	; (8003018 <HAL_ADC_ConfigChannel+0x854>)
 8002f0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f14:	4619      	mov	r1, r3
 8002f16:	4610      	mov	r0, r2
 8002f18:	f7fe ffa5 	bl	8001e66 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f1c:	4b44      	ldr	r3, [pc, #272]	; (8003030 <HAL_ADC_ConfigChannel+0x86c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	099b      	lsrs	r3, r3, #6
 8002f22:	4a44      	ldr	r2, [pc, #272]	; (8003034 <HAL_ADC_ConfigChannel+0x870>)
 8002f24:	fba2 2303 	umull	r2, r3, r2, r3
 8002f28:	099b      	lsrs	r3, r3, #6
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	4413      	add	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f36:	e002      	b.n	8002f3e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1f9      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f44:	e05a      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a3b      	ldr	r2, [pc, #236]	; (8003038 <HAL_ADC_ConfigChannel+0x874>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d125      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x7d8>
 8002f50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d11f      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a31      	ldr	r2, [pc, #196]	; (8003028 <HAL_ADC_ConfigChannel+0x864>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d104      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x7ac>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a34      	ldr	r2, [pc, #208]	; (800303c <HAL_ADC_ConfigChannel+0x878>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d047      	beq.n	8003000 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f78:	d004      	beq.n	8002f84 <HAL_ADC_ConfigChannel+0x7c0>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a2a      	ldr	r2, [pc, #168]	; (8003028 <HAL_ADC_ConfigChannel+0x864>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d101      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x7c4>
 8002f84:	4a29      	ldr	r2, [pc, #164]	; (800302c <HAL_ADC_ConfigChannel+0x868>)
 8002f86:	e000      	b.n	8002f8a <HAL_ADC_ConfigChannel+0x7c6>
 8002f88:	4a23      	ldr	r2, [pc, #140]	; (8003018 <HAL_ADC_ConfigChannel+0x854>)
 8002f8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f92:	4619      	mov	r1, r3
 8002f94:	4610      	mov	r0, r2
 8002f96:	f7fe ff66 	bl	8001e66 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f9a:	e031      	b.n	8003000 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a27      	ldr	r2, [pc, #156]	; (8003040 <HAL_ADC_ConfigChannel+0x87c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d12d      	bne.n	8003002 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002fa6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d127      	bne.n	8003002 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a1c      	ldr	r2, [pc, #112]	; (8003028 <HAL_ADC_ConfigChannel+0x864>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d022      	beq.n	8003002 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fc4:	d004      	beq.n	8002fd0 <HAL_ADC_ConfigChannel+0x80c>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a17      	ldr	r2, [pc, #92]	; (8003028 <HAL_ADC_ConfigChannel+0x864>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d101      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x810>
 8002fd0:	4a16      	ldr	r2, [pc, #88]	; (800302c <HAL_ADC_ConfigChannel+0x868>)
 8002fd2:	e000      	b.n	8002fd6 <HAL_ADC_ConfigChannel+0x812>
 8002fd4:	4a10      	ldr	r2, [pc, #64]	; (8003018 <HAL_ADC_ConfigChannel+0x854>)
 8002fd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	f7fe ff40 	bl	8001e66 <LL_ADC_SetCommonPathInternalCh>
 8002fe6:	e00c      	b.n	8003002 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fec:	f043 0220 	orr.w	r2, r3, #32
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002ffa:	e002      	b.n	8003002 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ffc:	bf00      	nop
 8002ffe:	e000      	b.n	8003002 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003000:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800300a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800300e:	4618      	mov	r0, r3
 8003010:	37d8      	adds	r7, #216	; 0xd8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	50000700 	.word	0x50000700
 800301c:	c3210000 	.word	0xc3210000
 8003020:	90c00010 	.word	0x90c00010
 8003024:	50000600 	.word	0x50000600
 8003028:	50000100 	.word	0x50000100
 800302c:	50000300 	.word	0x50000300
 8003030:	200026d4 	.word	0x200026d4
 8003034:	053e2d63 	.word	0x053e2d63
 8003038:	c7520000 	.word	0xc7520000
 800303c:	50000500 	.word	0x50000500
 8003040:	cb840000 	.word	0xcb840000

08003044 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff f8c9 	bl	80021e8 <LL_ADC_IsEnabled>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d14d      	bne.n	80030f8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689a      	ldr	r2, [r3, #8]
 8003062:	4b28      	ldr	r3, [pc, #160]	; (8003104 <ADC_Enable+0xc0>)
 8003064:	4013      	ands	r3, r2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00d      	beq.n	8003086 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306e:	f043 0210 	orr.w	r2, r3, #16
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800307a:	f043 0201 	orr.w	r2, r3, #1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e039      	b.n	80030fa <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff f898 	bl	80021c0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003090:	f7fe fea8 	bl	8001de4 <HAL_GetTick>
 8003094:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003096:	e028      	b.n	80030ea <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff f8a3 	bl	80021e8 <LL_ADC_IsEnabled>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d104      	bne.n	80030b2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff f887 	bl	80021c0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030b2:	f7fe fe97 	bl	8001de4 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d914      	bls.n	80030ea <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d00d      	beq.n	80030ea <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d2:	f043 0210 	orr.w	r2, r3, #16
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030de:	f043 0201 	orr.w	r2, r3, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e007      	b.n	80030fa <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d1cf      	bne.n	8003098 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	8000003f 	.word	0x8000003f

08003108 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003114:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800311e:	2b00      	cmp	r3, #0
 8003120:	d14b      	bne.n	80031ba <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003126:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0308 	and.w	r3, r3, #8
 8003138:	2b00      	cmp	r3, #0
 800313a:	d021      	beq.n	8003180 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f7fe ff4f 	bl	8001fe4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d032      	beq.n	80031b2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d12b      	bne.n	80031b2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d11f      	bne.n	80031b2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003176:	f043 0201 	orr.w	r2, r3, #1
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	65da      	str	r2, [r3, #92]	; 0x5c
 800317e:	e018      	b.n	80031b2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d111      	bne.n	80031b2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003192:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d105      	bne.n	80031b2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031aa:	f043 0201 	orr.w	r2, r3, #1
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f7fe f96c 	bl	8001490 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031b8:	e00e      	b.n	80031d8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031be:	f003 0310 	and.w	r3, r3, #16
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f7ff faf2 	bl	80027b0 <HAL_ADC_ErrorCallback>
}
 80031cc:	e004      	b.n	80031d8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	4798      	blx	r3
}
 80031d8:	bf00      	nop
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ec:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f7fe f966 	bl	80014c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031f4:	bf00      	nop
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003208:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800321a:	f043 0204 	orr.w	r2, r3, #4
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f7ff fac4 	bl	80027b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003228:	bf00      	nop
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <LL_ADC_IsEnabled>:
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <LL_ADC_IsEnabled+0x18>
 8003244:	2301      	movs	r3, #1
 8003246:	e000      	b.n	800324a <LL_ADC_IsEnabled+0x1a>
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <LL_ADC_REG_IsConversionOngoing>:
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b04      	cmp	r3, #4
 8003268:	d101      	bne.n	800326e <LL_ADC_REG_IsConversionOngoing+0x18>
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800327c:	b590      	push	{r4, r7, lr}
 800327e:	b0a1      	sub	sp, #132	; 0x84
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003286:	2300      	movs	r3, #0
 8003288:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003292:	2b01      	cmp	r3, #1
 8003294:	d101      	bne.n	800329a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003296:	2302      	movs	r3, #2
 8003298:	e0e7      	b.n	800346a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80032a2:	2300      	movs	r3, #0
 80032a4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80032a6:	2300      	movs	r3, #0
 80032a8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032b2:	d102      	bne.n	80032ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80032b4:	4b6f      	ldr	r3, [pc, #444]	; (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032b6:	60bb      	str	r3, [r7, #8]
 80032b8:	e009      	b.n	80032ce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a6e      	ldr	r2, [pc, #440]	; (8003478 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d102      	bne.n	80032ca <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80032c4:	4b6d      	ldr	r3, [pc, #436]	; (800347c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80032c6:	60bb      	str	r3, [r7, #8]
 80032c8:	e001      	b.n	80032ce <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80032ca:	2300      	movs	r3, #0
 80032cc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10b      	bne.n	80032ec <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d8:	f043 0220 	orr.w	r2, r3, #32
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0be      	b.n	800346a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff ffb1 	bl	8003256 <LL_ADC_REG_IsConversionOngoing>
 80032f4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff ffab 	bl	8003256 <LL_ADC_REG_IsConversionOngoing>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	f040 80a0 	bne.w	8003448 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003308:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800330a:	2b00      	cmp	r3, #0
 800330c:	f040 809c 	bne.w	8003448 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003318:	d004      	beq.n	8003324 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a55      	ldr	r2, [pc, #340]	; (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d101      	bne.n	8003328 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003324:	4b56      	ldr	r3, [pc, #344]	; (8003480 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003326:	e000      	b.n	800332a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003328:	4b56      	ldr	r3, [pc, #344]	; (8003484 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800332a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d04b      	beq.n	80033cc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003334:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	6859      	ldr	r1, [r3, #4]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003346:	035b      	lsls	r3, r3, #13
 8003348:	430b      	orrs	r3, r1
 800334a:	431a      	orrs	r2, r3
 800334c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800334e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003358:	d004      	beq.n	8003364 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a45      	ldr	r2, [pc, #276]	; (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d10f      	bne.n	8003384 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003364:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003368:	f7ff ff62 	bl	8003230 <LL_ADC_IsEnabled>
 800336c:	4604      	mov	r4, r0
 800336e:	4841      	ldr	r0, [pc, #260]	; (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003370:	f7ff ff5e 	bl	8003230 <LL_ADC_IsEnabled>
 8003374:	4603      	mov	r3, r0
 8003376:	4323      	orrs	r3, r4
 8003378:	2b00      	cmp	r3, #0
 800337a:	bf0c      	ite	eq
 800337c:	2301      	moveq	r3, #1
 800337e:	2300      	movne	r3, #0
 8003380:	b2db      	uxtb	r3, r3
 8003382:	e012      	b.n	80033aa <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003384:	483c      	ldr	r0, [pc, #240]	; (8003478 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003386:	f7ff ff53 	bl	8003230 <LL_ADC_IsEnabled>
 800338a:	4604      	mov	r4, r0
 800338c:	483b      	ldr	r0, [pc, #236]	; (800347c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800338e:	f7ff ff4f 	bl	8003230 <LL_ADC_IsEnabled>
 8003392:	4603      	mov	r3, r0
 8003394:	431c      	orrs	r4, r3
 8003396:	483c      	ldr	r0, [pc, #240]	; (8003488 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003398:	f7ff ff4a 	bl	8003230 <LL_ADC_IsEnabled>
 800339c:	4603      	mov	r3, r0
 800339e:	4323      	orrs	r3, r4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	bf0c      	ite	eq
 80033a4:	2301      	moveq	r3, #1
 80033a6:	2300      	movne	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d056      	beq.n	800345c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80033ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80033b6:	f023 030f 	bic.w	r3, r3, #15
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	6811      	ldr	r1, [r2, #0]
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	6892      	ldr	r2, [r2, #8]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	431a      	orrs	r2, r3
 80033c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033c8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033ca:	e047      	b.n	800345c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80033cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033d6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033e0:	d004      	beq.n	80033ec <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a23      	ldr	r2, [pc, #140]	; (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d10f      	bne.n	800340c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80033ec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80033f0:	f7ff ff1e 	bl	8003230 <LL_ADC_IsEnabled>
 80033f4:	4604      	mov	r4, r0
 80033f6:	481f      	ldr	r0, [pc, #124]	; (8003474 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033f8:	f7ff ff1a 	bl	8003230 <LL_ADC_IsEnabled>
 80033fc:	4603      	mov	r3, r0
 80033fe:	4323      	orrs	r3, r4
 8003400:	2b00      	cmp	r3, #0
 8003402:	bf0c      	ite	eq
 8003404:	2301      	moveq	r3, #1
 8003406:	2300      	movne	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	e012      	b.n	8003432 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800340c:	481a      	ldr	r0, [pc, #104]	; (8003478 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800340e:	f7ff ff0f 	bl	8003230 <LL_ADC_IsEnabled>
 8003412:	4604      	mov	r4, r0
 8003414:	4819      	ldr	r0, [pc, #100]	; (800347c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003416:	f7ff ff0b 	bl	8003230 <LL_ADC_IsEnabled>
 800341a:	4603      	mov	r3, r0
 800341c:	431c      	orrs	r4, r3
 800341e:	481a      	ldr	r0, [pc, #104]	; (8003488 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003420:	f7ff ff06 	bl	8003230 <LL_ADC_IsEnabled>
 8003424:	4603      	mov	r3, r0
 8003426:	4323      	orrs	r3, r4
 8003428:	2b00      	cmp	r3, #0
 800342a:	bf0c      	ite	eq
 800342c:	2301      	moveq	r3, #1
 800342e:	2300      	movne	r3, #0
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d012      	beq.n	800345c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800343e:	f023 030f 	bic.w	r3, r3, #15
 8003442:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003444:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003446:	e009      	b.n	800345c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344c:	f043 0220 	orr.w	r2, r3, #32
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800345a:	e000      	b.n	800345e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800345c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003466:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800346a:	4618      	mov	r0, r3
 800346c:	3784      	adds	r7, #132	; 0x84
 800346e:	46bd      	mov	sp, r7
 8003470:	bd90      	pop	{r4, r7, pc}
 8003472:	bf00      	nop
 8003474:	50000100 	.word	0x50000100
 8003478:	50000400 	.word	0x50000400
 800347c:	50000500 	.word	0x50000500
 8003480:	50000300 	.word	0x50000300
 8003484:	50000700 	.word	0x50000700
 8003488:	50000600 	.word	0x50000600

0800348c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800349c:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <__NVIC_SetPriorityGrouping+0x44>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034a8:	4013      	ands	r3, r2
 80034aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034be:	4a04      	ldr	r2, [pc, #16]	; (80034d0 <__NVIC_SetPriorityGrouping+0x44>)
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	60d3      	str	r3, [r2, #12]
}
 80034c4:	bf00      	nop
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	e000ed00 	.word	0xe000ed00

080034d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034d8:	4b04      	ldr	r3, [pc, #16]	; (80034ec <__NVIC_GetPriorityGrouping+0x18>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	0a1b      	lsrs	r3, r3, #8
 80034de:	f003 0307 	and.w	r3, r3, #7
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	e000ed00 	.word	0xe000ed00

080034f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	db0b      	blt.n	800351a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003502:	79fb      	ldrb	r3, [r7, #7]
 8003504:	f003 021f 	and.w	r2, r3, #31
 8003508:	4907      	ldr	r1, [pc, #28]	; (8003528 <__NVIC_EnableIRQ+0x38>)
 800350a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350e:	095b      	lsrs	r3, r3, #5
 8003510:	2001      	movs	r0, #1
 8003512:	fa00 f202 	lsl.w	r2, r0, r2
 8003516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	e000e100 	.word	0xe000e100

0800352c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	6039      	str	r1, [r7, #0]
 8003536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353c:	2b00      	cmp	r3, #0
 800353e:	db0a      	blt.n	8003556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	b2da      	uxtb	r2, r3
 8003544:	490c      	ldr	r1, [pc, #48]	; (8003578 <__NVIC_SetPriority+0x4c>)
 8003546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354a:	0112      	lsls	r2, r2, #4
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	440b      	add	r3, r1
 8003550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003554:	e00a      	b.n	800356c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	b2da      	uxtb	r2, r3
 800355a:	4908      	ldr	r1, [pc, #32]	; (800357c <__NVIC_SetPriority+0x50>)
 800355c:	79fb      	ldrb	r3, [r7, #7]
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	3b04      	subs	r3, #4
 8003564:	0112      	lsls	r2, r2, #4
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	440b      	add	r3, r1
 800356a:	761a      	strb	r2, [r3, #24]
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	e000e100 	.word	0xe000e100
 800357c:	e000ed00 	.word	0xe000ed00

08003580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003580:	b480      	push	{r7}
 8003582:	b089      	sub	sp, #36	; 0x24
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	f1c3 0307 	rsb	r3, r3, #7
 800359a:	2b04      	cmp	r3, #4
 800359c:	bf28      	it	cs
 800359e:	2304      	movcs	r3, #4
 80035a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	3304      	adds	r3, #4
 80035a6:	2b06      	cmp	r3, #6
 80035a8:	d902      	bls.n	80035b0 <NVIC_EncodePriority+0x30>
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	3b03      	subs	r3, #3
 80035ae:	e000      	b.n	80035b2 <NVIC_EncodePriority+0x32>
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43da      	mvns	r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	401a      	ands	r2, r3
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	fa01 f303 	lsl.w	r3, r1, r3
 80035d2:	43d9      	mvns	r1, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d8:	4313      	orrs	r3, r2
         );
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3724      	adds	r7, #36	; 0x24
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
	...

080035e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3b01      	subs	r3, #1
 80035f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035f8:	d301      	bcc.n	80035fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035fa:	2301      	movs	r3, #1
 80035fc:	e00f      	b.n	800361e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035fe:	4a0a      	ldr	r2, [pc, #40]	; (8003628 <SysTick_Config+0x40>)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3b01      	subs	r3, #1
 8003604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003606:	210f      	movs	r1, #15
 8003608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800360c:	f7ff ff8e 	bl	800352c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003610:	4b05      	ldr	r3, [pc, #20]	; (8003628 <SysTick_Config+0x40>)
 8003612:	2200      	movs	r2, #0
 8003614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003616:	4b04      	ldr	r3, [pc, #16]	; (8003628 <SysTick_Config+0x40>)
 8003618:	2207      	movs	r2, #7
 800361a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	e000e010 	.word	0xe000e010

0800362c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7ff ff29 	bl	800348c <__NVIC_SetPriorityGrouping>
}
 800363a:	bf00      	nop
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b086      	sub	sp, #24
 8003646:	af00      	add	r7, sp, #0
 8003648:	4603      	mov	r3, r0
 800364a:	60b9      	str	r1, [r7, #8]
 800364c:	607a      	str	r2, [r7, #4]
 800364e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003650:	f7ff ff40 	bl	80034d4 <__NVIC_GetPriorityGrouping>
 8003654:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	68b9      	ldr	r1, [r7, #8]
 800365a:	6978      	ldr	r0, [r7, #20]
 800365c:	f7ff ff90 	bl	8003580 <NVIC_EncodePriority>
 8003660:	4602      	mov	r2, r0
 8003662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003666:	4611      	mov	r1, r2
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff ff5f 	bl	800352c <__NVIC_SetPriority>
}
 800366e:	bf00      	nop
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b082      	sub	sp, #8
 800367a:	af00      	add	r7, sp, #0
 800367c:	4603      	mov	r3, r0
 800367e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff ff33 	bl	80034f0 <__NVIC_EnableIRQ>
}
 800368a:	bf00      	nop
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7ff ffa4 	bl	80035e8 <SysTick_Config>
 80036a0:	4603      	mov	r3, r0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e014      	b.n	80036e6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	791b      	ldrb	r3, [r3, #4]
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d105      	bne.n	80036d2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7fe f8a1 	bl	8001814 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2202      	movs	r2, #2
 80036d6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b082      	sub	sp, #8
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
 80036f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	795b      	ldrb	r3, [r3, #5]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d101      	bne.n	8003704 <HAL_DAC_Start+0x16>
 8003700:	2302      	movs	r3, #2
 8003702:	e043      	b.n	800378c <HAL_DAC_Start+0x9e>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2202      	movs	r2, #2
 800370e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6819      	ldr	r1, [r3, #0]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	f003 0310 	and.w	r3, r3, #16
 800371c:	2201      	movs	r2, #1
 800371e:	409a      	lsls	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	430a      	orrs	r2, r1
 8003726:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8003728:	2001      	movs	r0, #1
 800372a:	f7fe fb67 	bl	8001dfc <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10f      	bne.n	8003754 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800373e:	2b02      	cmp	r3, #2
 8003740:	d11d      	bne.n	800377e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f042 0201 	orr.w	r2, r2, #1
 8003750:	605a      	str	r2, [r3, #4]
 8003752:	e014      	b.n	800377e <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	f003 0310 	and.w	r3, r3, #16
 8003764:	2102      	movs	r1, #2
 8003766:	fa01 f303 	lsl.w	r3, r1, r3
 800376a:	429a      	cmp	r2, r3
 800376c:	d107      	bne.n	800377e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f042 0202 	orr.w	r2, r2, #2
 800377c:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <HAL_DAC_Stop>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6819      	ldr	r1, [r3, #0]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	f003 0310 	and.w	r3, r3, #16
 80037aa:	2201      	movs	r2, #1
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	43da      	mvns	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	400a      	ands	r2, r1
 80037b8:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 80037ba:	2001      	movs	r0, #1
 80037bc:	f7fe fb1e 	bl	8001dfc <HAL_Delay>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
 80037dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80037de:	2300      	movs	r3, #0
 80037e0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	795b      	ldrb	r3, [r3, #5]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d101      	bne.n	80037ee <HAL_DAC_Start_DMA+0x1e>
 80037ea:	2302      	movs	r3, #2
 80037ec:	e0ae      	b.n	800394c <HAL_DAC_Start_DMA+0x17c>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2201      	movs	r2, #1
 80037f2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2202      	movs	r2, #2
 80037f8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d12f      	bne.n	8003860 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	4a53      	ldr	r2, [pc, #332]	; (8003954 <HAL_DAC_Start_DMA+0x184>)
 8003806:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	4a52      	ldr	r2, [pc, #328]	; (8003958 <HAL_DAC_Start_DMA+0x188>)
 800380e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	4a51      	ldr	r2, [pc, #324]	; (800395c <HAL_DAC_Start_DMA+0x18c>)
 8003816:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003826:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	2b08      	cmp	r3, #8
 800382c:	d013      	beq.n	8003856 <HAL_DAC_Start_DMA+0x86>
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	2b08      	cmp	r3, #8
 8003832:	d845      	bhi.n	80038c0 <HAL_DAC_Start_DMA+0xf0>
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_DAC_Start_DMA+0x72>
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	2b04      	cmp	r3, #4
 800383e:	d005      	beq.n	800384c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003840:	e03e      	b.n	80038c0 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	3308      	adds	r3, #8
 8003848:	613b      	str	r3, [r7, #16]
        break;
 800384a:	e03c      	b.n	80038c6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	330c      	adds	r3, #12
 8003852:	613b      	str	r3, [r7, #16]
        break;
 8003854:	e037      	b.n	80038c6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	3310      	adds	r3, #16
 800385c:	613b      	str	r3, [r7, #16]
        break;
 800385e:	e032      	b.n	80038c6 <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	4a3e      	ldr	r2, [pc, #248]	; (8003960 <HAL_DAC_Start_DMA+0x190>)
 8003866:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	4a3d      	ldr	r2, [pc, #244]	; (8003964 <HAL_DAC_Start_DMA+0x194>)
 800386e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	4a3c      	ldr	r2, [pc, #240]	; (8003968 <HAL_DAC_Start_DMA+0x198>)
 8003876:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003886:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	2b08      	cmp	r3, #8
 800388c:	d013      	beq.n	80038b6 <HAL_DAC_Start_DMA+0xe6>
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	2b08      	cmp	r3, #8
 8003892:	d817      	bhi.n	80038c4 <HAL_DAC_Start_DMA+0xf4>
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_DAC_Start_DMA+0xd2>
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	2b04      	cmp	r3, #4
 800389e:	d005      	beq.n	80038ac <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80038a0:	e010      	b.n	80038c4 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	3314      	adds	r3, #20
 80038a8:	613b      	str	r3, [r7, #16]
        break;
 80038aa:	e00c      	b.n	80038c6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	3318      	adds	r3, #24
 80038b2:	613b      	str	r3, [r7, #16]
        break;
 80038b4:	e007      	b.n	80038c6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	331c      	adds	r3, #28
 80038bc:	613b      	str	r3, [r7, #16]
        break;
 80038be:	e002      	b.n	80038c6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80038c0:	bf00      	nop
 80038c2:	e000      	b.n	80038c6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80038c4:	bf00      	nop
    }
  }


  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d111      	bne.n	80038f0 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038da:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6898      	ldr	r0, [r3, #8]
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	f000 fbad 	bl	8004044 <HAL_DMA_Start_IT>
 80038ea:	4603      	mov	r3, r0
 80038ec:	75fb      	strb	r3, [r7, #23]
 80038ee:	e010      	b.n	8003912 <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80038fe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	68d8      	ldr	r0, [r3, #12]
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	f000 fb9b 	bl	8004044 <HAL_DMA_Start_IT>
 800390e:	4603      	mov	r3, r0
 8003910:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003918:	7dfb      	ldrb	r3, [r7, #23]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10f      	bne.n	800393e <HAL_DAC_Start_DMA+0x16e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6819      	ldr	r1, [r3, #0]
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f003 0310 	and.w	r3, r3, #16
 800392a:	2201      	movs	r2, #1
 800392c:	409a      	lsls	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8003936:	2001      	movs	r0, #1
 8003938:	f7fe fa60 	bl	8001dfc <HAL_Delay>
 800393c:	e005      	b.n	800394a <HAL_DAC_Start_DMA+0x17a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	f043 0204 	orr.w	r2, r3, #4
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800394a:	7dfb      	ldrb	r3, [r7, #23]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	08003de1 	.word	0x08003de1
 8003958:	08003e03 	.word	0x08003e03
 800395c:	08003e1f 	.word	0x08003e1f
 8003960:	08003e89 	.word	0x08003e89
 8003964:	08003eab 	.word	0x08003eab
 8003968:	08003ec7 	.word	0x08003ec7

0800396c <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6819      	ldr	r1, [r3, #0]
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	f003 0310 	and.w	r3, r3, #16
 8003982:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	43da      	mvns	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	400a      	ands	r2, r1
 8003992:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6819      	ldr	r1, [r3, #0]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	f003 0310 	and.w	r3, r3, #16
 80039a0:	2201      	movs	r2, #1
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	43da      	mvns	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	400a      	ands	r2, r1
 80039ae:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 80039b0:	2001      	movs	r0, #1
 80039b2:	f7fe fa23 	bl	8001dfc <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10d      	bne.n	80039d8 <HAL_DAC_Stop_DMA+0x6c>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fbba 	bl	800413a <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	e00c      	b.n	80039f2 <HAL_DAC_Stop_DMA+0x86>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 fbac 	bl	800413a <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80039f0:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b087      	sub	sp, #28
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	60f8      	str	r0, [r7, #12]
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	607a      	str	r2, [r7, #4]
 8003a0e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d105      	bne.n	8003a32 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	3308      	adds	r3, #8
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	e004      	b.n	8003a3c <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4413      	add	r3, r2
 8003a38:	3314      	adds	r3, #20
 8003a3a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	371c      	adds	r7, #28
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
	...

08003a90 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b08a      	sub	sp, #40	; 0x28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	795b      	ldrb	r3, [r3, #5]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_DAC_ConfigChannel+0x18>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e192      	b.n	8003dce <HAL_DAC_ConfigChannel+0x33e>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d174      	bne.n	8003ba6 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003abc:	f7fe f992 	bl	8001de4 <HAL_GetTick>
 8003ac0:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d134      	bne.n	8003b32 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003ac8:	e011      	b.n	8003aee <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003aca:	f7fe f98b 	bl	8001de4 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d90a      	bls.n	8003aee <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	f043 0208 	orr.w	r2, r3, #8
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2203      	movs	r2, #3
 8003ae8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e16f      	b.n	8003dce <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1e6      	bne.n	8003aca <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8003afc:	2001      	movs	r0, #1
 8003afe:	f7fe f97d 	bl	8001dfc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b0a:	641a      	str	r2, [r3, #64]	; 0x40
 8003b0c:	e01e      	b.n	8003b4c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003b0e:	f7fe f969 	bl	8001de4 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d90a      	bls.n	8003b32 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	f043 0208 	orr.w	r2, r3, #8
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2203      	movs	r2, #3
 8003b2c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e14d      	b.n	8003dce <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	dbe8      	blt.n	8003b0e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003b3c:	2001      	movs	r0, #1
 8003b3e:	f7fe f95d 	bl	8001dfc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b4a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f003 0310 	and.w	r3, r3, #16
 8003b58:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b60:	43db      	mvns	r3, r3
 8003b62:	ea02 0103 	and.w	r1, r2, r3
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f003 0310 	and.w	r3, r3, #16
 8003b70:	409a      	lsls	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f003 0310 	and.w	r3, r3, #16
 8003b86:	21ff      	movs	r1, #255	; 0xff
 8003b88:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8c:	43db      	mvns	r3, r3
 8003b8e:	ea02 0103 	and.w	r1, r2, r3
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f003 0310 	and.w	r3, r3, #16
 8003b9c:	409a      	lsls	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d11d      	bne.n	8003bea <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f003 0310 	and.w	r3, r3, #16
 8003bbc:	221f      	movs	r2, #31
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f003 0310 	and.w	r3, r3, #16
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bde:	4313      	orrs	r3, r2
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f003 0310 	and.w	r3, r3, #16
 8003bf8:	2207      	movs	r2, #7
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	43db      	mvns	r3, r3
 8003c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c02:	4013      	ands	r3, r2
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d102      	bne.n	8003c14 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	623b      	str	r3, [r7, #32]
 8003c12:	e00f      	b.n	8003c34 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d102      	bne.n	8003c22 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	623b      	str	r3, [r7, #32]
 8003c20:	e008      	b.n	8003c34 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d102      	bne.n	8003c30 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	623b      	str	r3, [r7, #32]
 8003c2e:	e001      	b.n	8003c34 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003c30:	2300      	movs	r3, #0
 8003c32:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	6a3a      	ldr	r2, [r7, #32]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f003 0310 	and.w	r3, r3, #16
 8003c4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	43db      	mvns	r3, r3
 8003c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c56:	4013      	ands	r3, r2
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	791b      	ldrb	r3, [r3, #4]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d102      	bne.n	8003c68 <HAL_DAC_ConfigChannel+0x1d8>
 8003c62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c66:	e000      	b.n	8003c6a <HAL_DAC_ConfigChannel+0x1da>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f003 0310 	and.w	r3, r3, #16
 8003c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c82:	4013      	ands	r3, r2
 8003c84:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	795b      	ldrb	r3, [r3, #5]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d102      	bne.n	8003c94 <HAL_DAC_ConfigChannel+0x204>
 8003c8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c92:	e000      	b.n	8003c96 <HAL_DAC_ConfigChannel+0x206>
 8003c94:	2300      	movs	r3, #0
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d114      	bne.n	8003cd6 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003cac:	f003 f89c 	bl	8006de8 <HAL_RCC_GetHCLKFreq>
 8003cb0:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	4a48      	ldr	r2, [pc, #288]	; (8003dd8 <HAL_DAC_ConfigChannel+0x348>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d904      	bls.n	8003cc4 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc2:	e00f      	b.n	8003ce4 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	4a45      	ldr	r2, [pc, #276]	; (8003ddc <HAL_DAC_ConfigChannel+0x34c>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d90a      	bls.n	8003ce2 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd4:	e006      	b.n	8003ce4 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce0:	e000      	b.n	8003ce4 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003ce2:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f003 0310 	and.w	r3, r3, #16
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cfc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6819      	ldr	r1, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f003 0310 	and.w	r3, r3, #16
 8003d0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	43da      	mvns	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	400a      	ands	r2, r1
 8003d1a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f003 0310 	and.w	r3, r3, #16
 8003d2a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	43db      	mvns	r3, r3
 8003d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d36:	4013      	ands	r3, r2
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d58:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6819      	ldr	r1, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f003 0310 	and.w	r3, r3, #16
 8003d66:	22c0      	movs	r2, #192	; 0xc0
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	43da      	mvns	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	400a      	ands	r2, r1
 8003d74:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	089b      	lsrs	r3, r3, #2
 8003d7c:	f003 030f 	and.w	r3, r3, #15
 8003d80:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	089b      	lsrs	r3, r3, #2
 8003d88:	021b      	lsls	r3, r3, #8
 8003d8a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f003 0310 	and.w	r3, r3, #16
 8003da0:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003da4:	fa01 f303 	lsl.w	r3, r1, r3
 8003da8:	43db      	mvns	r3, r3
 8003daa:	ea02 0103 	and.w	r1, r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f003 0310 	and.w	r3, r3, #16
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	409a      	lsls	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3728      	adds	r7, #40	; 0x28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	09896800 	.word	0x09896800
 8003ddc:	04c4b400 	.word	0x04c4b400

08003de0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dec:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f7ff fe2f 	bl	8003a52 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2201      	movs	r2, #1
 8003df8:	711a      	strb	r2, [r3, #4]
}
 8003dfa:	bf00      	nop
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b084      	sub	sp, #16
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f7ff fe28 	bl	8003a66 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003e16:	bf00      	nop
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b084      	sub	sp, #16
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	f043 0204 	orr.w	r2, r3, #4
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f7ff fe1e 	bl	8003a7a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2201      	movs	r2, #1
 8003e42:	711a      	strb	r2, [r3, #4]
}
 8003e44:	bf00      	nop
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e94:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f7ff ffd8 	bl	8003e4c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	711a      	strb	r2, [r3, #4]
}
 8003ea2:	bf00      	nop
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b084      	sub	sp, #16
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f7ff ffd1 	bl	8003e60 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003ebe:	bf00      	nop
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	f043 0204 	orr.w	r2, r3, #4
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f7ff ffc7 	bl	8003e74 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	711a      	strb	r2, [r3, #4]
}
 8003eec:	bf00      	nop
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e08d      	b.n	8004022 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	4b47      	ldr	r3, [pc, #284]	; (800402c <HAL_DMA_Init+0x138>)
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d80f      	bhi.n	8003f32 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	461a      	mov	r2, r3
 8003f18:	4b45      	ldr	r3, [pc, #276]	; (8004030 <HAL_DMA_Init+0x13c>)
 8003f1a:	4413      	add	r3, r2
 8003f1c:	4a45      	ldr	r2, [pc, #276]	; (8004034 <HAL_DMA_Init+0x140>)
 8003f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f22:	091b      	lsrs	r3, r3, #4
 8003f24:	009a      	lsls	r2, r3, #2
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a42      	ldr	r2, [pc, #264]	; (8004038 <HAL_DMA_Init+0x144>)
 8003f2e:	641a      	str	r2, [r3, #64]	; 0x40
 8003f30:	e00e      	b.n	8003f50 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	461a      	mov	r2, r3
 8003f38:	4b40      	ldr	r3, [pc, #256]	; (800403c <HAL_DMA_Init+0x148>)
 8003f3a:	4413      	add	r3, r2
 8003f3c:	4a3d      	ldr	r2, [pc, #244]	; (8004034 <HAL_DMA_Init+0x140>)
 8003f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f42:	091b      	lsrs	r3, r3, #4
 8003f44:	009a      	lsls	r2, r3, #2
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a3c      	ldr	r2, [pc, #240]	; (8004040 <HAL_DMA_Init+0x14c>)
 8003f4e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2202      	movs	r2, #2
 8003f54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003f74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 fa76 	bl	8004494 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fb0:	d102      	bne.n	8003fb8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc0:	b2d2      	uxtb	r2, r2
 8003fc2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003fcc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d010      	beq.n	8003ff8 <HAL_DMA_Init+0x104>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d80c      	bhi.n	8003ff8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 fa96 	bl	8004510 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ff4:	605a      	str	r2, [r3, #4]
 8003ff6:	e008      	b.n	800400a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	40020407 	.word	0x40020407
 8004030:	bffdfff8 	.word	0xbffdfff8
 8004034:	cccccccd 	.word	0xcccccccd
 8004038:	40020000 	.word	0x40020000
 800403c:	bffdfbf8 	.word	0xbffdfbf8
 8004040:	40020400 	.word	0x40020400

08004044 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
 8004050:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_DMA_Start_IT+0x20>
 8004060:	2302      	movs	r3, #2
 8004062:	e066      	b.n	8004132 <HAL_DMA_Start_IT+0xee>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b01      	cmp	r3, #1
 8004076:	d155      	bne.n	8004124 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2202      	movs	r2, #2
 800407c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0201 	bic.w	r2, r2, #1
 8004094:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	68b9      	ldr	r1, [r7, #8]
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 f9bb 	bl	8004418 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d008      	beq.n	80040bc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f042 020e 	orr.w	r2, r2, #14
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	e00f      	b.n	80040dc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0204 	bic.w	r2, r2, #4
 80040ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 020a 	orr.w	r2, r2, #10
 80040da:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d007      	beq.n	80040fa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040f8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d007      	beq.n	8004112 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004110:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f042 0201 	orr.w	r2, r2, #1
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	e005      	b.n	8004130 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800412c:	2302      	movs	r3, #2
 800412e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004130:	7dfb      	ldrb	r3, [r7, #23]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800413a:	b480      	push	{r7}
 800413c:	b085      	sub	sp, #20
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d005      	beq.n	800415e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2204      	movs	r2, #4
 8004156:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	73fb      	strb	r3, [r7, #15]
 800415c:	e037      	b.n	80041ce <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 020e 	bic.w	r2, r2, #14
 800416c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004178:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800417c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0201 	bic.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004192:	f003 021f 	and.w	r2, r3, #31
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	2101      	movs	r1, #1
 800419c:	fa01 f202 	lsl.w	r2, r1, r2
 80041a0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041aa:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00c      	beq.n	80041ce <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041c2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80041cc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80041de:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041f4:	2300      	movs	r3, #0
 80041f6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d00d      	beq.n	8004220 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2204      	movs	r2, #4
 8004208:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	73fb      	strb	r3, [r7, #15]
 800421e:	e047      	b.n	80042b0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 020e 	bic.w	r2, r2, #14
 800422e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0201 	bic.w	r2, r2, #1
 800423e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800424a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800424e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004254:	f003 021f 	and.w	r2, r3, #31
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425c:	2101      	movs	r1, #1
 800425e:	fa01 f202 	lsl.w	r2, r1, r2
 8004262:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800426c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00c      	beq.n	8004290 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004280:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004284:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800428e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d003      	beq.n	80042b0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	4798      	blx	r3
    }
  }
  return status;
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b084      	sub	sp, #16
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d6:	f003 031f 	and.w	r3, r3, #31
 80042da:	2204      	movs	r2, #4
 80042dc:	409a      	lsls	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	4013      	ands	r3, r2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d026      	beq.n	8004334 <HAL_DMA_IRQHandler+0x7a>
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d021      	beq.n	8004334 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0320 	and.w	r3, r3, #32
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d107      	bne.n	800430e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0204 	bic.w	r2, r2, #4
 800430c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004312:	f003 021f 	and.w	r2, r3, #31
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	2104      	movs	r1, #4
 800431c:	fa01 f202 	lsl.w	r2, r1, r2
 8004320:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004326:	2b00      	cmp	r3, #0
 8004328:	d071      	beq.n	800440e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004332:	e06c      	b.n	800440e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004338:	f003 031f 	and.w	r3, r3, #31
 800433c:	2202      	movs	r2, #2
 800433e:	409a      	lsls	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4013      	ands	r3, r2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d02e      	beq.n	80043a6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d029      	beq.n	80043a6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0320 	and.w	r3, r3, #32
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10b      	bne.n	8004378 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 020a 	bic.w	r2, r2, #10
 800436e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437c:	f003 021f 	and.w	r2, r3, #31
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	2102      	movs	r1, #2
 8004386:	fa01 f202 	lsl.w	r2, r1, r2
 800438a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004398:	2b00      	cmp	r3, #0
 800439a:	d038      	beq.n	800440e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80043a4:	e033      	b.n	800440e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043aa:	f003 031f 	and.w	r3, r3, #31
 80043ae:	2208      	movs	r2, #8
 80043b0:	409a      	lsls	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4013      	ands	r3, r2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d02a      	beq.n	8004410 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	f003 0308 	and.w	r3, r3, #8
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d025      	beq.n	8004410 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 020e 	bic.w	r2, r2, #14
 80043d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d8:	f003 021f 	and.w	r2, r3, #31
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e0:	2101      	movs	r1, #1
 80043e2:	fa01 f202 	lsl.w	r2, r1, r2
 80043e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004402:	2b00      	cmp	r3, #0
 8004404:	d004      	beq.n	8004410 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800440e:	bf00      	nop
 8004410:	bf00      	nop
}
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
 8004424:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800442e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004434:	2b00      	cmp	r3, #0
 8004436:	d004      	beq.n	8004442 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004440:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004446:	f003 021f 	and.w	r2, r3, #31
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	2101      	movs	r1, #1
 8004450:	fa01 f202 	lsl.w	r2, r1, r2
 8004454:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2b10      	cmp	r3, #16
 8004464:	d108      	bne.n	8004478 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004476:	e007      	b.n	8004488 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	60da      	str	r2, [r3, #12]
}
 8004488:	bf00      	nop
 800448a:	3714      	adds	r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	461a      	mov	r2, r3
 80044a2:	4b16      	ldr	r3, [pc, #88]	; (80044fc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d802      	bhi.n	80044ae <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80044a8:	4b15      	ldr	r3, [pc, #84]	; (8004500 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80044aa:	617b      	str	r3, [r7, #20]
 80044ac:	e001      	b.n	80044b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80044ae:	4b15      	ldr	r3, [pc, #84]	; (8004504 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80044b0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	3b08      	subs	r3, #8
 80044be:	4a12      	ldr	r2, [pc, #72]	; (8004508 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80044c0:	fba2 2303 	umull	r2, r3, r2, r3
 80044c4:	091b      	lsrs	r3, r3, #4
 80044c6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044cc:	089b      	lsrs	r3, r3, #2
 80044ce:	009a      	lsls	r2, r3, #2
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	4413      	add	r3, r2
 80044d4:	461a      	mov	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a0b      	ldr	r2, [pc, #44]	; (800450c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80044de:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f003 031f 	and.w	r3, r3, #31
 80044e6:	2201      	movs	r2, #1
 80044e8:	409a      	lsls	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	651a      	str	r2, [r3, #80]	; 0x50
}
 80044ee:	bf00      	nop
 80044f0:	371c      	adds	r7, #28
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40020407 	.word	0x40020407
 8004500:	40020800 	.word	0x40020800
 8004504:	40020820 	.word	0x40020820
 8004508:	cccccccd 	.word	0xcccccccd
 800450c:	40020880 	.word	0x40020880

08004510 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	b2db      	uxtb	r3, r3
 800451e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	4b0b      	ldr	r3, [pc, #44]	; (8004550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004524:	4413      	add	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	461a      	mov	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a08      	ldr	r2, [pc, #32]	; (8004554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004532:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3b01      	subs	r3, #1
 8004538:	f003 031f 	and.w	r3, r3, #31
 800453c:	2201      	movs	r2, #1
 800453e:	409a      	lsls	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004544:	bf00      	nop
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	1000823f 	.word	0x1000823f
 8004554:	40020940 	.word	0x40020940

08004558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004562:	2300      	movs	r3, #0
 8004564:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004566:	e15a      	b.n	800481e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	2101      	movs	r1, #1
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	fa01 f303 	lsl.w	r3, r1, r3
 8004574:	4013      	ands	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 814c 	beq.w	8004818 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f003 0303 	and.w	r3, r3, #3
 8004588:	2b01      	cmp	r3, #1
 800458a:	d005      	beq.n	8004598 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004594:	2b02      	cmp	r3, #2
 8004596:	d130      	bne.n	80045fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	2203      	movs	r2, #3
 80045a4:	fa02 f303 	lsl.w	r3, r2, r3
 80045a8:	43db      	mvns	r3, r3
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	4013      	ands	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	68da      	ldr	r2, [r3, #12]
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	4313      	orrs	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045ce:	2201      	movs	r2, #1
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	fa02 f303 	lsl.w	r3, r2, r3
 80045d6:	43db      	mvns	r3, r3
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4013      	ands	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	091b      	lsrs	r3, r3, #4
 80045e4:	f003 0201 	and.w	r2, r3, #1
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	fa02 f303 	lsl.w	r3, r2, r3
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f003 0303 	and.w	r3, r3, #3
 8004602:	2b03      	cmp	r3, #3
 8004604:	d017      	beq.n	8004636 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	2203      	movs	r2, #3
 8004612:	fa02 f303 	lsl.w	r3, r2, r3
 8004616:	43db      	mvns	r3, r3
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	4013      	ands	r3, r2
 800461c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	689a      	ldr	r2, [r3, #8]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	fa02 f303 	lsl.w	r3, r2, r3
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	4313      	orrs	r3, r2
 800462e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f003 0303 	and.w	r3, r3, #3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d123      	bne.n	800468a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	08da      	lsrs	r2, r3, #3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	3208      	adds	r2, #8
 800464a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800464e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	220f      	movs	r2, #15
 800465a:	fa02 f303 	lsl.w	r3, r2, r3
 800465e:	43db      	mvns	r3, r3
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	4013      	ands	r3, r2
 8004664:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	691a      	ldr	r2, [r3, #16]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	4313      	orrs	r3, r2
 800467a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	08da      	lsrs	r2, r3, #3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3208      	adds	r2, #8
 8004684:	6939      	ldr	r1, [r7, #16]
 8004686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	2203      	movs	r2, #3
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	43db      	mvns	r3, r3
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	4013      	ands	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f003 0203 	and.w	r2, r3, #3
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	fa02 f303 	lsl.w	r3, r2, r3
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 80a6 	beq.w	8004818 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046cc:	4b5b      	ldr	r3, [pc, #364]	; (800483c <HAL_GPIO_Init+0x2e4>)
 80046ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046d0:	4a5a      	ldr	r2, [pc, #360]	; (800483c <HAL_GPIO_Init+0x2e4>)
 80046d2:	f043 0301 	orr.w	r3, r3, #1
 80046d6:	6613      	str	r3, [r2, #96]	; 0x60
 80046d8:	4b58      	ldr	r3, [pc, #352]	; (800483c <HAL_GPIO_Init+0x2e4>)
 80046da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	60bb      	str	r3, [r7, #8]
 80046e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046e4:	4a56      	ldr	r2, [pc, #344]	; (8004840 <HAL_GPIO_Init+0x2e8>)
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	089b      	lsrs	r3, r3, #2
 80046ea:	3302      	adds	r3, #2
 80046ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f003 0303 	and.w	r3, r3, #3
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	220f      	movs	r2, #15
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	43db      	mvns	r3, r3
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	4013      	ands	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800470e:	d01f      	beq.n	8004750 <HAL_GPIO_Init+0x1f8>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a4c      	ldr	r2, [pc, #304]	; (8004844 <HAL_GPIO_Init+0x2ec>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d019      	beq.n	800474c <HAL_GPIO_Init+0x1f4>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a4b      	ldr	r2, [pc, #300]	; (8004848 <HAL_GPIO_Init+0x2f0>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d013      	beq.n	8004748 <HAL_GPIO_Init+0x1f0>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a4a      	ldr	r2, [pc, #296]	; (800484c <HAL_GPIO_Init+0x2f4>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d00d      	beq.n	8004744 <HAL_GPIO_Init+0x1ec>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a49      	ldr	r2, [pc, #292]	; (8004850 <HAL_GPIO_Init+0x2f8>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d007      	beq.n	8004740 <HAL_GPIO_Init+0x1e8>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a48      	ldr	r2, [pc, #288]	; (8004854 <HAL_GPIO_Init+0x2fc>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d101      	bne.n	800473c <HAL_GPIO_Init+0x1e4>
 8004738:	2305      	movs	r3, #5
 800473a:	e00a      	b.n	8004752 <HAL_GPIO_Init+0x1fa>
 800473c:	2306      	movs	r3, #6
 800473e:	e008      	b.n	8004752 <HAL_GPIO_Init+0x1fa>
 8004740:	2304      	movs	r3, #4
 8004742:	e006      	b.n	8004752 <HAL_GPIO_Init+0x1fa>
 8004744:	2303      	movs	r3, #3
 8004746:	e004      	b.n	8004752 <HAL_GPIO_Init+0x1fa>
 8004748:	2302      	movs	r3, #2
 800474a:	e002      	b.n	8004752 <HAL_GPIO_Init+0x1fa>
 800474c:	2301      	movs	r3, #1
 800474e:	e000      	b.n	8004752 <HAL_GPIO_Init+0x1fa>
 8004750:	2300      	movs	r3, #0
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	f002 0203 	and.w	r2, r2, #3
 8004758:	0092      	lsls	r2, r2, #2
 800475a:	4093      	lsls	r3, r2
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004762:	4937      	ldr	r1, [pc, #220]	; (8004840 <HAL_GPIO_Init+0x2e8>)
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	089b      	lsrs	r3, r3, #2
 8004768:	3302      	adds	r3, #2
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004770:	4b39      	ldr	r3, [pc, #228]	; (8004858 <HAL_GPIO_Init+0x300>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	43db      	mvns	r3, r3
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	4013      	ands	r3, r2
 800477e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4313      	orrs	r3, r2
 8004792:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004794:	4a30      	ldr	r2, [pc, #192]	; (8004858 <HAL_GPIO_Init+0x300>)
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800479a:	4b2f      	ldr	r3, [pc, #188]	; (8004858 <HAL_GPIO_Init+0x300>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	43db      	mvns	r3, r3
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	4013      	ands	r3, r2
 80047a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047be:	4a26      	ldr	r2, [pc, #152]	; (8004858 <HAL_GPIO_Init+0x300>)
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80047c4:	4b24      	ldr	r3, [pc, #144]	; (8004858 <HAL_GPIO_Init+0x300>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	43db      	mvns	r3, r3
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	4013      	ands	r3, r2
 80047d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d003      	beq.n	80047e8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80047e8:	4a1b      	ldr	r2, [pc, #108]	; (8004858 <HAL_GPIO_Init+0x300>)
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80047ee:	4b1a      	ldr	r3, [pc, #104]	; (8004858 <HAL_GPIO_Init+0x300>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	43db      	mvns	r3, r3
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	4013      	ands	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4313      	orrs	r3, r2
 8004810:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004812:	4a11      	ldr	r2, [pc, #68]	; (8004858 <HAL_GPIO_Init+0x300>)
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	3301      	adds	r3, #1
 800481c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	fa22 f303 	lsr.w	r3, r2, r3
 8004828:	2b00      	cmp	r3, #0
 800482a:	f47f ae9d 	bne.w	8004568 <HAL_GPIO_Init+0x10>
  }
}
 800482e:	bf00      	nop
 8004830:	bf00      	nop
 8004832:	371c      	adds	r7, #28
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	40021000 	.word	0x40021000
 8004840:	40010000 	.word	0x40010000
 8004844:	48000400 	.word	0x48000400
 8004848:	48000800 	.word	0x48000800
 800484c:	48000c00 	.word	0x48000c00
 8004850:	48001000 	.word	0x48001000
 8004854:	48001400 	.word	0x48001400
 8004858:	40010400 	.word	0x40010400

0800485c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	460b      	mov	r3, r1
 8004866:	807b      	strh	r3, [r7, #2]
 8004868:	4613      	mov	r3, r2
 800486a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800486c:	787b      	ldrb	r3, [r7, #1]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004872:	887a      	ldrh	r2, [r7, #2]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004878:	e002      	b.n	8004880 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800487a:	887a      	ldrh	r2, [r7, #2]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	4603      	mov	r3, r0
 8004894:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004896:	4b08      	ldr	r3, [pc, #32]	; (80048b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004898:	695a      	ldr	r2, [r3, #20]
 800489a:	88fb      	ldrh	r3, [r7, #6]
 800489c:	4013      	ands	r3, r2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d006      	beq.n	80048b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048a2:	4a05      	ldr	r2, [pc, #20]	; (80048b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048a4:	88fb      	ldrh	r3, [r7, #6]
 80048a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048a8:	88fb      	ldrh	r3, [r7, #6]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 f806 	bl	80048bc <HAL_GPIO_EXTI_Callback>
  }
}
 80048b0:	bf00      	nop
 80048b2:	3708      	adds	r7, #8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40010400 	.word	0x40010400

080048bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	4603      	mov	r3, r0
 80048c4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80048d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048d4:	b08b      	sub	sp, #44	; 0x2c
 80048d6:	af06      	add	r7, sp, #24
 80048d8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e0d7      	b.n	8004a94 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d106      	bne.n	80048fe <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f008 ff8b 	bl	800d814 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2203      	movs	r2, #3
 8004902:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f004 fe61 	bl	80095d2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004910:	2300      	movs	r3, #0
 8004912:	73fb      	strb	r3, [r7, #15]
 8004914:	e04c      	b.n	80049b0 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004916:	7bfb      	ldrb	r3, [r7, #15]
 8004918:	6879      	ldr	r1, [r7, #4]
 800491a:	1c5a      	adds	r2, r3, #1
 800491c:	4613      	mov	r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4413      	add	r3, r2
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	440b      	add	r3, r1
 8004926:	3301      	adds	r3, #1
 8004928:	2201      	movs	r2, #1
 800492a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800492c:	7bfb      	ldrb	r3, [r7, #15]
 800492e:	6879      	ldr	r1, [r7, #4]
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	4613      	mov	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4413      	add	r3, r2
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	440b      	add	r3, r1
 800493c:	7bfa      	ldrb	r2, [r7, #15]
 800493e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004940:	7bfa      	ldrb	r2, [r7, #15]
 8004942:	7bfb      	ldrb	r3, [r7, #15]
 8004944:	b298      	uxth	r0, r3
 8004946:	6879      	ldr	r1, [r7, #4]
 8004948:	4613      	mov	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	440b      	add	r3, r1
 8004952:	3336      	adds	r3, #54	; 0x36
 8004954:	4602      	mov	r2, r0
 8004956:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004958:	7bfb      	ldrb	r3, [r7, #15]
 800495a:	6879      	ldr	r1, [r7, #4]
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	4613      	mov	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4413      	add	r3, r2
 8004964:	00db      	lsls	r3, r3, #3
 8004966:	440b      	add	r3, r1
 8004968:	3303      	adds	r3, #3
 800496a:	2200      	movs	r2, #0
 800496c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800496e:	7bfa      	ldrb	r2, [r7, #15]
 8004970:	6879      	ldr	r1, [r7, #4]
 8004972:	4613      	mov	r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	00db      	lsls	r3, r3, #3
 800497a:	440b      	add	r3, r1
 800497c:	3338      	adds	r3, #56	; 0x38
 800497e:	2200      	movs	r2, #0
 8004980:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004982:	7bfa      	ldrb	r2, [r7, #15]
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	4613      	mov	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	440b      	add	r3, r1
 8004990:	333c      	adds	r3, #60	; 0x3c
 8004992:	2200      	movs	r2, #0
 8004994:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004996:	7bfa      	ldrb	r2, [r7, #15]
 8004998:	6879      	ldr	r1, [r7, #4]
 800499a:	4613      	mov	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	00db      	lsls	r3, r3, #3
 80049a2:	440b      	add	r3, r1
 80049a4:	3340      	adds	r3, #64	; 0x40
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049aa:	7bfb      	ldrb	r3, [r7, #15]
 80049ac:	3301      	adds	r3, #1
 80049ae:	73fb      	strb	r3, [r7, #15]
 80049b0:	7bfa      	ldrb	r2, [r7, #15]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d3ad      	bcc.n	8004916 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049ba:	2300      	movs	r3, #0
 80049bc:	73fb      	strb	r3, [r7, #15]
 80049be:	e044      	b.n	8004a4a <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80049c0:	7bfa      	ldrb	r2, [r7, #15]
 80049c2:	6879      	ldr	r1, [r7, #4]
 80049c4:	4613      	mov	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	440b      	add	r3, r1
 80049ce:	f203 1369 	addw	r3, r3, #361	; 0x169
 80049d2:	2200      	movs	r2, #0
 80049d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80049d6:	7bfa      	ldrb	r2, [r7, #15]
 80049d8:	6879      	ldr	r1, [r7, #4]
 80049da:	4613      	mov	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	440b      	add	r3, r1
 80049e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80049e8:	7bfa      	ldrb	r2, [r7, #15]
 80049ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80049ec:	7bfa      	ldrb	r2, [r7, #15]
 80049ee:	6879      	ldr	r1, [r7, #4]
 80049f0:	4613      	mov	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	440b      	add	r3, r1
 80049fa:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80049fe:	2200      	movs	r2, #0
 8004a00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a02:	7bfa      	ldrb	r2, [r7, #15]
 8004a04:	6879      	ldr	r1, [r7, #4]
 8004a06:	4613      	mov	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	440b      	add	r3, r1
 8004a10:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004a14:	2200      	movs	r2, #0
 8004a16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a18:	7bfa      	ldrb	r2, [r7, #15]
 8004a1a:	6879      	ldr	r1, [r7, #4]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	00db      	lsls	r3, r3, #3
 8004a24:	440b      	add	r3, r1
 8004a26:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a2e:	7bfa      	ldrb	r2, [r7, #15]
 8004a30:	6879      	ldr	r1, [r7, #4]
 8004a32:	4613      	mov	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	440b      	add	r3, r1
 8004a3c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004a40:	2200      	movs	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a44:	7bfb      	ldrb	r3, [r7, #15]
 8004a46:	3301      	adds	r3, #1
 8004a48:	73fb      	strb	r3, [r7, #15]
 8004a4a:	7bfa      	ldrb	r2, [r7, #15]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d3b5      	bcc.n	80049c0 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	603b      	str	r3, [r7, #0]
 8004a5a:	687e      	ldr	r6, [r7, #4]
 8004a5c:	466d      	mov	r5, sp
 8004a5e:	f106 0410 	add.w	r4, r6, #16
 8004a62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	602b      	str	r3, [r5, #0]
 8004a6a:	1d33      	adds	r3, r6, #4
 8004a6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a6e:	6838      	ldr	r0, [r7, #0]
 8004a70:	f004 fdca 	bl	8009608 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	69db      	ldr	r3, [r3, #28]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d102      	bne.n	8004a92 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f001 fc29 	bl	80062e4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a9c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d101      	bne.n	8004ab2 <HAL_PCD_Start+0x16>
 8004aae:	2302      	movs	r3, #2
 8004ab0:	e012      	b.n	8004ad8 <HAL_PCD_Start+0x3c>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f004 fd70 	bl	80095a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f006 ff89 	bl	800b9e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f006 ff8e 	bl	800ba0e <USB_ReadInterrupts>
 8004af2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fb26 	bl	8005150 <PCD_EP_ISR_Handler>

    return;
 8004b04:	e110      	b.n	8004d28 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d013      	beq.n	8004b38 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b22:	b292      	uxth	r2, r2
 8004b24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f008 ff04 	bl	800d936 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004b2e:	2100      	movs	r1, #0
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 f8fc 	bl	8004d2e <HAL_PCD_SetAddress>

    return;
 8004b36:	e0f7      	b.n	8004d28 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00c      	beq.n	8004b5c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b54:	b292      	uxth	r2, r2
 8004b56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004b5a:	e0e5      	b.n	8004d28 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00c      	beq.n	8004b80 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b78:	b292      	uxth	r2, r2
 8004b7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004b7e:	e0d3      	b.n	8004d28 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d034      	beq.n	8004bf4 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0204 	bic.w	r2, r2, #4
 8004b9c:	b292      	uxth	r2, r2
 8004b9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0208 	bic.w	r2, r2, #8
 8004bb4:	b292      	uxth	r2, r2
 8004bb6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d107      	bne.n	8004bd4 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004bcc:	2100      	movs	r1, #0
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f009 f8a6 	bl	800dd20 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f008 fee7 	bl	800d9a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004bec:	b292      	uxth	r2, r2
 8004bee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004bf2:	e099      	b.n	8004d28 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d027      	beq.n	8004c4e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f042 0208 	orr.w	r2, r2, #8
 8004c10:	b292      	uxth	r2, r2
 8004c12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c28:	b292      	uxth	r2, r2
 8004c2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f042 0204 	orr.w	r2, r2, #4
 8004c40:	b292      	uxth	r2, r2
 8004c42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f008 fe94 	bl	800d974 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004c4c:	e06c      	b.n	8004d28 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d040      	beq.n	8004cda <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c6a:	b292      	uxth	r2, r2
 8004c6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d12b      	bne.n	8004cd2 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f042 0204 	orr.w	r2, r2, #4
 8004c8c:	b292      	uxth	r2, r2
 8004c8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f042 0208 	orr.w	r2, r2, #8
 8004ca4:	b292      	uxth	r2, r2
 8004ca6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	089b      	lsrs	r3, r3, #2
 8004cbe:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004cc8:	2101      	movs	r1, #1
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f009 f828 	bl	800dd20 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004cd0:	e02a      	b.n	8004d28 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f008 fe4e 	bl	800d974 <HAL_PCD_SuspendCallback>
    return;
 8004cd8:	e026      	b.n	8004d28 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00f      	beq.n	8004d04 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004cf6:	b292      	uxth	r2, r2
 8004cf8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f008 fe0c 	bl	800d91a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004d02:	e011      	b.n	8004d28 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00c      	beq.n	8004d28 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d20:	b292      	uxth	r2, r2
 8004d22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004d26:	bf00      	nop
  }
}
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b082      	sub	sp, #8
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	460b      	mov	r3, r1
 8004d38:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d101      	bne.n	8004d48 <HAL_PCD_SetAddress+0x1a>
 8004d44:	2302      	movs	r3, #2
 8004d46:	e013      	b.n	8004d70 <HAL_PCD_SetAddress+0x42>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	78fa      	ldrb	r2, [r7, #3]
 8004d54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	78fa      	ldrb	r2, [r7, #3]
 8004d5e:	4611      	mov	r1, r2
 8004d60:	4618      	mov	r0, r3
 8004d62:	f006 fe29 	bl	800b9b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	4608      	mov	r0, r1
 8004d82:	4611      	mov	r1, r2
 8004d84:	461a      	mov	r2, r3
 8004d86:	4603      	mov	r3, r0
 8004d88:	70fb      	strb	r3, [r7, #3]
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	803b      	strh	r3, [r7, #0]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	da0e      	bge.n	8004dbc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d9e:	78fb      	ldrb	r3, [r7, #3]
 8004da0:	f003 0307 	and.w	r3, r3, #7
 8004da4:	1c5a      	adds	r2, r3, #1
 8004da6:	4613      	mov	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	4413      	add	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2201      	movs	r2, #1
 8004db8:	705a      	strb	r2, [r3, #1]
 8004dba:	e00e      	b.n	8004dda <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dbc:	78fb      	ldrb	r3, [r7, #3]
 8004dbe:	f003 0207 	and.w	r2, r3, #7
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4413      	add	r3, r2
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004dda:	78fb      	ldrb	r3, [r7, #3]
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004de6:	883a      	ldrh	r2, [r7, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	78ba      	ldrb	r2, [r7, #2]
 8004df0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	785b      	ldrb	r3, [r3, #1]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d004      	beq.n	8004e04 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004e04:	78bb      	ldrb	r3, [r7, #2]
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d102      	bne.n	8004e10 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <HAL_PCD_EP_Open+0xa6>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	e00e      	b.n	8004e3c <HAL_PCD_EP_Open+0xc4>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68f9      	ldr	r1, [r7, #12]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f004 fc0d 	bl	800964c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004e3a:	7afb      	ldrb	r3, [r7, #11]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	da0e      	bge.n	8004e76 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e58:	78fb      	ldrb	r3, [r7, #3]
 8004e5a:	f003 0307 	and.w	r3, r3, #7
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	4613      	mov	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2201      	movs	r2, #1
 8004e72:	705a      	strb	r2, [r3, #1]
 8004e74:	e00e      	b.n	8004e94 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e76:	78fb      	ldrb	r3, [r7, #3]
 8004e78:	f003 0207 	and.w	r2, r3, #7
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004e94:	78fb      	ldrb	r3, [r7, #3]
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	b2da      	uxtb	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d101      	bne.n	8004eae <HAL_PCD_EP_Close+0x6a>
 8004eaa:	2302      	movs	r3, #2
 8004eac:	e00e      	b.n	8004ecc <HAL_PCD_EP_Close+0x88>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68f9      	ldr	r1, [r7, #12]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f004 ff59 	bl	8009d74 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	607a      	str	r2, [r7, #4]
 8004ede:	603b      	str	r3, [r7, #0]
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ee4:	7afb      	ldrb	r3, [r7, #11]
 8004ee6:	f003 0207 	and.w	r2, r3, #7
 8004eea:	4613      	mov	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4413      	add	r3, r2
 8004ef0:	00db      	lsls	r3, r3, #3
 8004ef2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	4413      	add	r3, r2
 8004efa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	2200      	movs	r2, #0
 8004f12:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f14:	7afb      	ldrb	r3, [r7, #11]
 8004f16:	f003 0307 	and.w	r3, r3, #7
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f20:	7afb      	ldrb	r3, [r7, #11]
 8004f22:	f003 0307 	and.w	r3, r3, #7
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d106      	bne.n	8004f38 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6979      	ldr	r1, [r7, #20]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f005 f90c 	bl	800a14e <USB_EPStartXfer>
 8004f36:	e005      	b.n	8004f44 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6979      	ldr	r1, [r7, #20]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f005 f905 	bl	800a14e <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	460b      	mov	r3, r1
 8004f58:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004f5a:	78fb      	ldrb	r3, [r7, #3]
 8004f5c:	f003 0207 	and.w	r2, r3, #7
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	4613      	mov	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	00db      	lsls	r3, r3, #3
 8004f6a:	440b      	add	r3, r1
 8004f6c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004f70:	681b      	ldr	r3, [r3, #0]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b086      	sub	sp, #24
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	60f8      	str	r0, [r7, #12]
 8004f86:	607a      	str	r2, [r7, #4]
 8004f88:	603b      	str	r3, [r7, #0]
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f8e:	7afb      	ldrb	r3, [r7, #11]
 8004f90:	f003 0307 	and.w	r3, r3, #7
 8004f94:	1c5a      	adds	r2, r3, #1
 8004f96:	4613      	mov	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	00db      	lsls	r3, r3, #3
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fca:	7afb      	ldrb	r3, [r7, #11]
 8004fcc:	f003 0307 	and.w	r3, r3, #7
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004fd6:	7afb      	ldrb	r3, [r7, #11]
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d106      	bne.n	8004fee <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6979      	ldr	r1, [r7, #20]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f005 f8b1 	bl	800a14e <USB_EPStartXfer>
 8004fec:	e005      	b.n	8004ffa <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6979      	ldr	r1, [r7, #20]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f005 f8aa 	bl	800a14e <USB_EPStartXfer>
  }

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	460b      	mov	r3, r1
 800500e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005010:	78fb      	ldrb	r3, [r7, #3]
 8005012:	f003 0207 	and.w	r2, r3, #7
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	429a      	cmp	r2, r3
 800501c:	d901      	bls.n	8005022 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e03e      	b.n	80050a0 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005022:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005026:	2b00      	cmp	r3, #0
 8005028:	da0e      	bge.n	8005048 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800502a:	78fb      	ldrb	r3, [r7, #3]
 800502c:	f003 0307 	and.w	r3, r3, #7
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	4613      	mov	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	00db      	lsls	r3, r3, #3
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	4413      	add	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2201      	movs	r2, #1
 8005044:	705a      	strb	r2, [r3, #1]
 8005046:	e00c      	b.n	8005062 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005048:	78fa      	ldrb	r2, [r7, #3]
 800504a:	4613      	mov	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	4413      	add	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2201      	movs	r2, #1
 8005066:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005068:	78fb      	ldrb	r3, [r7, #3]
 800506a:	f003 0307 	and.w	r3, r3, #7
 800506e:	b2da      	uxtb	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800507a:	2b01      	cmp	r3, #1
 800507c:	d101      	bne.n	8005082 <HAL_PCD_EP_SetStall+0x7e>
 800507e:	2302      	movs	r3, #2
 8005080:	e00e      	b.n	80050a0 <HAL_PCD_EP_SetStall+0x9c>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68f9      	ldr	r1, [r7, #12]
 8005090:	4618      	mov	r0, r3
 8005092:	f006 fb92 	bl	800b7ba <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	460b      	mov	r3, r1
 80050b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80050b4:	78fb      	ldrb	r3, [r7, #3]
 80050b6:	f003 020f 	and.w	r2, r3, #15
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d901      	bls.n	80050c6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e040      	b.n	8005148 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80050c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	da0e      	bge.n	80050ec <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050ce:	78fb      	ldrb	r3, [r7, #3]
 80050d0:	f003 0307 	and.w	r3, r3, #7
 80050d4:	1c5a      	adds	r2, r3, #1
 80050d6:	4613      	mov	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4413      	add	r3, r2
 80050dc:	00db      	lsls	r3, r3, #3
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	4413      	add	r3, r2
 80050e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2201      	movs	r2, #1
 80050e8:	705a      	strb	r2, [r3, #1]
 80050ea:	e00e      	b.n	800510a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050ec:	78fb      	ldrb	r3, [r7, #3]
 80050ee:	f003 0207 	and.w	r2, r3, #7
 80050f2:	4613      	mov	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	4413      	add	r3, r2
 8005102:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005110:	78fb      	ldrb	r3, [r7, #3]
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	b2da      	uxtb	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005122:	2b01      	cmp	r3, #1
 8005124:	d101      	bne.n	800512a <HAL_PCD_EP_ClrStall+0x82>
 8005126:	2302      	movs	r3, #2
 8005128:	e00e      	b.n	8005148 <HAL_PCD_EP_ClrStall+0xa0>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68f9      	ldr	r1, [r7, #12]
 8005138:	4618      	mov	r0, r3
 800513a:	f006 fb8f 	bl	800b85c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b096      	sub	sp, #88	; 0x58
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005158:	e39c      	b.n	8005894 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005162:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005166:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800516a:	b2db      	uxtb	r3, r3
 800516c:	f003 030f 	and.w	r3, r3, #15
 8005170:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8005174:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005178:	2b00      	cmp	r3, #0
 800517a:	f040 815e 	bne.w	800543a <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800517e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005182:	f003 0310 	and.w	r3, r3, #16
 8005186:	2b00      	cmp	r3, #0
 8005188:	d150      	bne.n	800522c <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	881b      	ldrh	r3, [r3, #0]
 8005190:	b29b      	uxth	r3, r3
 8005192:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519a:	81fb      	strh	r3, [r7, #14]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	89fb      	ldrh	r3, [r7, #14]
 80051a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	3328      	adds	r3, #40	; 0x28
 80051b2:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051bc:	b29b      	uxth	r3, r3
 80051be:	461a      	mov	r2, r3
 80051c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	4413      	add	r3, r2
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	6812      	ldr	r2, [r2, #0]
 80051cc:	4413      	add	r3, r2
 80051ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80051d2:	881b      	ldrh	r3, [r3, #0]
 80051d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80051d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051da:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80051dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051de:	695a      	ldr	r2, [r3, #20]
 80051e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051e2:	69db      	ldr	r3, [r3, #28]
 80051e4:	441a      	add	r2, r3
 80051e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051e8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80051ea:	2100      	movs	r1, #0
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f008 fb7a 	bl	800d8e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f000 834a 	beq.w	8005894 <PCD_EP_ISR_Handler+0x744>
 8005200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	2b00      	cmp	r3, #0
 8005206:	f040 8345 	bne.w	8005894 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005210:	b2db      	uxtb	r3, r3
 8005212:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005216:	b2da      	uxtb	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	b292      	uxth	r2, r2
 800521e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800522a:	e333      	b.n	8005894 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005232:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800523e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005246:	2b00      	cmp	r3, #0
 8005248:	d032      	beq.n	80052b0 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005252:	b29b      	uxth	r3, r3
 8005254:	461a      	mov	r2, r3
 8005256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	4413      	add	r3, r2
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	6812      	ldr	r2, [r2, #0]
 8005262:	4413      	add	r3, r2
 8005264:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800526e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005270:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6818      	ldr	r0, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800527c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800527e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005282:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005284:	b29b      	uxth	r3, r3
 8005286:	f006 fc14 	bl	800bab2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	881b      	ldrh	r3, [r3, #0]
 8005290:	b29a      	uxth	r2, r3
 8005292:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005296:	4013      	ands	r3, r2
 8005298:	823b      	strh	r3, [r7, #16]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	8a3a      	ldrh	r2, [r7, #16]
 80052a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052a4:	b292      	uxth	r2, r2
 80052a6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f008 faef 	bl	800d88c <HAL_PCD_SetupStageCallback>
 80052ae:	e2f1      	b.n	8005894 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80052b0:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f280 82ed 	bge.w	8005894 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80052c6:	4013      	ands	r3, r2
 80052c8:	83fb      	strh	r3, [r7, #30]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	8bfa      	ldrh	r2, [r7, #30]
 80052d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052d4:	b292      	uxth	r2, r2
 80052d6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	461a      	mov	r2, r3
 80052e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	00db      	lsls	r3, r3, #3
 80052ea:	4413      	add	r3, r2
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	6812      	ldr	r2, [r2, #0]
 80052f0:	4413      	add	r3, r2
 80052f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80052f6:	881b      	ldrh	r3, [r3, #0]
 80052f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80052fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052fe:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005302:	69db      	ldr	r3, [r3, #28]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d019      	beq.n	800533c <PCD_EP_ISR_Handler+0x1ec>
 8005308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d015      	beq.n	800533c <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6818      	ldr	r0, [r3, #0]
 8005314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005316:	6959      	ldr	r1, [r3, #20]
 8005318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800531a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800531c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800531e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005320:	b29b      	uxth	r3, r3
 8005322:	f006 fbc6 	bl	800bab2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005328:	695a      	ldr	r2, [r3, #20]
 800532a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	441a      	add	r2, r3
 8005330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005332:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005334:	2100      	movs	r1, #0
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f008 faba 	bl	800d8b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	b29b      	uxth	r3, r3
 8005344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005348:	2b00      	cmp	r3, #0
 800534a:	f040 82a3 	bne.w	8005894 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	61bb      	str	r3, [r7, #24]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800535c:	b29b      	uxth	r3, r3
 800535e:	461a      	mov	r2, r3
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	4413      	add	r3, r2
 8005364:	61bb      	str	r3, [r7, #24]
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800536c:	617b      	str	r3, [r7, #20]
 800536e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	2b3e      	cmp	r3, #62	; 0x3e
 8005374:	d918      	bls.n	80053a8 <PCD_EP_ISR_Handler+0x258>
 8005376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	095b      	lsrs	r3, r3, #5
 800537c:	647b      	str	r3, [r7, #68]	; 0x44
 800537e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	f003 031f 	and.w	r3, r3, #31
 8005386:	2b00      	cmp	r3, #0
 8005388:	d102      	bne.n	8005390 <PCD_EP_ISR_Handler+0x240>
 800538a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800538c:	3b01      	subs	r3, #1
 800538e:	647b      	str	r3, [r7, #68]	; 0x44
 8005390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005392:	b29b      	uxth	r3, r3
 8005394:	029b      	lsls	r3, r3, #10
 8005396:	b29b      	uxth	r3, r3
 8005398:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800539c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	801a      	strh	r2, [r3, #0]
 80053a6:	e029      	b.n	80053fc <PCD_EP_ISR_Handler+0x2ac>
 80053a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d112      	bne.n	80053d6 <PCD_EP_ISR_Handler+0x286>
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	801a      	strh	r2, [r3, #0]
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	801a      	strh	r2, [r3, #0]
 80053d4:	e012      	b.n	80053fc <PCD_EP_ISR_Handler+0x2ac>
 80053d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	085b      	lsrs	r3, r3, #1
 80053dc:	647b      	str	r3, [r7, #68]	; 0x44
 80053de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <PCD_EP_ISR_Handler+0x2a0>
 80053ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ec:	3301      	adds	r3, #1
 80053ee:	647b      	str	r3, [r7, #68]	; 0x44
 80053f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	029b      	lsls	r3, r3, #10
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	881b      	ldrh	r3, [r3, #0]
 8005402:	b29b      	uxth	r3, r3
 8005404:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540c:	827b      	strh	r3, [r7, #18]
 800540e:	8a7b      	ldrh	r3, [r7, #18]
 8005410:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005414:	827b      	strh	r3, [r7, #18]
 8005416:	8a7b      	ldrh	r3, [r7, #18]
 8005418:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800541c:	827b      	strh	r3, [r7, #18]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	8a7b      	ldrh	r3, [r7, #18]
 8005424:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005428:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800542c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005434:	b29b      	uxth	r3, r3
 8005436:	8013      	strh	r3, [r2, #0]
 8005438:	e22c      	b.n	8005894 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800544e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8005452:	2b00      	cmp	r3, #0
 8005454:	f280 80f6 	bge.w	8005644 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	461a      	mov	r2, r3
 800545e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	881b      	ldrh	r3, [r3, #0]
 8005468:	b29a      	uxth	r2, r3
 800546a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800546e:	4013      	ands	r3, r2
 8005470:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	461a      	mov	r2, r3
 800547a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8005486:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800548a:	b292      	uxth	r2, r2
 800548c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800548e:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8005492:	4613      	mov	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	4413      	add	r3, r2
 80054a2:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80054a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054a6:	7b1b      	ldrb	r3, [r3, #12]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d123      	bne.n	80054f4 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	461a      	mov	r2, r3
 80054b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	00db      	lsls	r3, r3, #3
 80054be:	4413      	add	r3, r2
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	6812      	ldr	r2, [r2, #0]
 80054c4:	4413      	add	r3, r2
 80054c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80054ca:	881b      	ldrh	r3, [r3, #0]
 80054cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054d0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80054d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 808e 	beq.w	80055fa <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6818      	ldr	r0, [r3, #0]
 80054e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054e4:	6959      	ldr	r1, [r3, #20]
 80054e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054e8:	88da      	ldrh	r2, [r3, #6]
 80054ea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80054ee:	f006 fae0 	bl	800bab2 <USB_ReadPMA>
 80054f2:	e082      	b.n	80055fa <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80054f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f6:	78db      	ldrb	r3, [r3, #3]
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d10a      	bne.n	8005512 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80054fc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005500:	461a      	mov	r2, r3
 8005502:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f9d3 	bl	80058b0 <HAL_PCD_EP_DB_Receive>
 800550a:	4603      	mov	r3, r0
 800550c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005510:	e073      	b.n	80055fa <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	461a      	mov	r2, r3
 8005518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4413      	add	r3, r2
 8005520:	881b      	ldrh	r3, [r3, #0]
 8005522:	b29b      	uxth	r3, r3
 8005524:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	461a      	mov	r2, r3
 8005536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	441a      	add	r2, r3
 800553e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005542:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005546:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800554a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800554e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005552:	b29b      	uxth	r3, r3
 8005554:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	461a      	mov	r2, r3
 800555c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4413      	add	r3, r2
 8005564:	881b      	ldrh	r3, [r3, #0]
 8005566:	b29b      	uxth	r3, r3
 8005568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d022      	beq.n	80055b6 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005578:	b29b      	uxth	r3, r3
 800557a:	461a      	mov	r2, r3
 800557c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	00db      	lsls	r3, r3, #3
 8005582:	4413      	add	r3, r2
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	6812      	ldr	r2, [r2, #0]
 8005588:	4413      	add	r3, r2
 800558a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800558e:	881b      	ldrh	r3, [r3, #0]
 8005590:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005594:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8005598:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800559c:	2b00      	cmp	r3, #0
 800559e:	d02c      	beq.n	80055fa <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6818      	ldr	r0, [r3, #0]
 80055a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055a6:	6959      	ldr	r1, [r3, #20]
 80055a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055aa:	891a      	ldrh	r2, [r3, #8]
 80055ac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80055b0:	f006 fa7f 	bl	800bab2 <USB_ReadPMA>
 80055b4:	e021      	b.n	80055fa <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055be:	b29b      	uxth	r3, r3
 80055c0:	461a      	mov	r2, r3
 80055c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	4413      	add	r3, r2
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	6812      	ldr	r2, [r2, #0]
 80055ce:	4413      	add	r3, r2
 80055d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055da:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80055de:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d009      	beq.n	80055fa <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6818      	ldr	r0, [r3, #0]
 80055ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ec:	6959      	ldr	r1, [r3, #20]
 80055ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055f0:	895a      	ldrh	r2, [r3, #10]
 80055f2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80055f6:	f006 fa5c 	bl	800bab2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80055fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055fc:	69da      	ldr	r2, [r3, #28]
 80055fe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005602:	441a      	add	r2, r3
 8005604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005606:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800560a:	695a      	ldr	r2, [r3, #20]
 800560c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005610:	441a      	add	r2, r3
 8005612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005614:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d005      	beq.n	800562a <PCD_EP_ISR_Handler+0x4da>
 800561e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	429a      	cmp	r2, r3
 8005628:	d206      	bcs.n	8005638 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800562a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	4619      	mov	r1, r3
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f008 f93d 	bl	800d8b0 <HAL_PCD_DataOutStageCallback>
 8005636:	e005      	b.n	8005644 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800563e:	4618      	mov	r0, r3
 8005640:	f004 fd85 	bl	800a14e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005644:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800564c:	2b00      	cmp	r3, #0
 800564e:	f000 8121 	beq.w	8005894 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8005652:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005656:	1c5a      	adds	r2, r3, #1
 8005658:	4613      	mov	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	00db      	lsls	r3, r3, #3
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	4413      	add	r3, r2
 8005664:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	461a      	mov	r2, r3
 800566c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	b29b      	uxth	r3, r3
 8005678:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800567c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005680:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	461a      	mov	r2, r3
 800568a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	441a      	add	r2, r3
 8005692:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005696:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800569a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800569e:	b29b      	uxth	r3, r3
 80056a0:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80056a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056a4:	78db      	ldrb	r3, [r3, #3]
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	f000 80a2 	beq.w	80057f0 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 80056ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ae:	2200      	movs	r2, #0
 80056b0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80056b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056b4:	7b1b      	ldrb	r3, [r3, #12]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f000 8093 	beq.w	80057e2 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80056bc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80056c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d046      	beq.n	8005756 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80056c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ca:	785b      	ldrb	r3, [r3, #1]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d126      	bne.n	800571e <PCD_EP_ISR_Handler+0x5ce>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	627b      	str	r3, [r7, #36]	; 0x24
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056de:	b29b      	uxth	r3, r3
 80056e0:	461a      	mov	r2, r3
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	4413      	add	r3, r2
 80056e6:	627b      	str	r3, [r7, #36]	; 0x24
 80056e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	00da      	lsls	r2, r3, #3
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	4413      	add	r3, r2
 80056f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80056f6:	623b      	str	r3, [r7, #32]
 80056f8:	6a3b      	ldr	r3, [r7, #32]
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005702:	b29a      	uxth	r2, r3
 8005704:	6a3b      	ldr	r3, [r7, #32]
 8005706:	801a      	strh	r2, [r3, #0]
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	b29b      	uxth	r3, r3
 800570e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005712:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005716:	b29a      	uxth	r2, r3
 8005718:	6a3b      	ldr	r3, [r7, #32]
 800571a:	801a      	strh	r2, [r3, #0]
 800571c:	e061      	b.n	80057e2 <PCD_EP_ISR_Handler+0x692>
 800571e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005720:	785b      	ldrb	r3, [r3, #1]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d15d      	bne.n	80057e2 <PCD_EP_ISR_Handler+0x692>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005734:	b29b      	uxth	r3, r3
 8005736:	461a      	mov	r2, r3
 8005738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573a:	4413      	add	r3, r2
 800573c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800573e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	00da      	lsls	r2, r3, #3
 8005744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005746:	4413      	add	r3, r2
 8005748:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800574c:	62bb      	str	r3, [r7, #40]	; 0x28
 800574e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005750:	2200      	movs	r2, #0
 8005752:	801a      	strh	r2, [r3, #0]
 8005754:	e045      	b.n	80057e2 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800575c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800575e:	785b      	ldrb	r3, [r3, #1]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d126      	bne.n	80057b2 <PCD_EP_ISR_Handler+0x662>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	637b      	str	r3, [r7, #52]	; 0x34
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005772:	b29b      	uxth	r3, r3
 8005774:	461a      	mov	r2, r3
 8005776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005778:	4413      	add	r3, r2
 800577a:	637b      	str	r3, [r7, #52]	; 0x34
 800577c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	00da      	lsls	r2, r3, #3
 8005782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005784:	4413      	add	r3, r2
 8005786:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800578a:	633b      	str	r3, [r7, #48]	; 0x30
 800578c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	b29b      	uxth	r3, r3
 8005792:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005796:	b29a      	uxth	r2, r3
 8005798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579a:	801a      	strh	r2, [r3, #0]
 800579c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579e:	881b      	ldrh	r3, [r3, #0]
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ae:	801a      	strh	r2, [r3, #0]
 80057b0:	e017      	b.n	80057e2 <PCD_EP_ISR_Handler+0x692>
 80057b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b4:	785b      	ldrb	r3, [r3, #1]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d113      	bne.n	80057e2 <PCD_EP_ISR_Handler+0x692>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	461a      	mov	r2, r3
 80057c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c8:	4413      	add	r3, r2
 80057ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	00da      	lsls	r2, r3, #3
 80057d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d4:	4413      	add	r3, r2
 80057d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057da:	63bb      	str	r3, [r7, #56]	; 0x38
 80057dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057de:	2200      	movs	r2, #0
 80057e0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80057e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	4619      	mov	r1, r3
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f008 f87c 	bl	800d8e6 <HAL_PCD_DataInStageCallback>
 80057ee:	e051      	b.n	8005894 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80057f0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80057f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d144      	bne.n	8005886 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005804:	b29b      	uxth	r3, r3
 8005806:	461a      	mov	r2, r3
 8005808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	00db      	lsls	r3, r3, #3
 800580e:	4413      	add	r3, r2
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	6812      	ldr	r2, [r2, #0]
 8005814:	4413      	add	r3, r2
 8005816:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005820:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8005824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005826:	699a      	ldr	r2, [r3, #24]
 8005828:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800582c:	429a      	cmp	r2, r3
 800582e:	d907      	bls.n	8005840 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8005830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005832:	699a      	ldr	r2, [r3, #24]
 8005834:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005838:	1ad2      	subs	r2, r2, r3
 800583a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800583c:	619a      	str	r2, [r3, #24]
 800583e:	e002      	b.n	8005846 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8005840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005842:	2200      	movs	r2, #0
 8005844:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d106      	bne.n	800585c <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800584e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	4619      	mov	r1, r3
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f008 f846 	bl	800d8e6 <HAL_PCD_DataInStageCallback>
 800585a:	e01b      	b.n	8005894 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800585c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800585e:	695a      	ldr	r2, [r3, #20]
 8005860:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005864:	441a      	add	r2, r3
 8005866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005868:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800586a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800586c:	69da      	ldr	r2, [r3, #28]
 800586e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005872:	441a      	add	r2, r3
 8005874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005876:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800587e:	4618      	mov	r0, r3
 8005880:	f004 fc65 	bl	800a14e <USB_EPStartXfer>
 8005884:	e006      	b.n	8005894 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005886:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800588a:	461a      	mov	r2, r3
 800588c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f917 	bl	8005ac2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800589c:	b29b      	uxth	r3, r3
 800589e:	b21b      	sxth	r3, r3
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f6ff ac5a 	blt.w	800515a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3758      	adds	r7, #88	; 0x58
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b088      	sub	sp, #32
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	4613      	mov	r3, r2
 80058bc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80058be:	88fb      	ldrh	r3, [r7, #6]
 80058c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d07c      	beq.n	80059c2 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	461a      	mov	r2, r3
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	00db      	lsls	r3, r3, #3
 80058da:	4413      	add	r3, r2
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	6812      	ldr	r2, [r2, #0]
 80058e0:	4413      	add	r3, r2
 80058e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80058e6:	881b      	ldrh	r3, [r3, #0]
 80058e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058ec:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	699a      	ldr	r2, [r3, #24]
 80058f2:	8b7b      	ldrh	r3, [r7, #26]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d306      	bcc.n	8005906 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	699a      	ldr	r2, [r3, #24]
 80058fc:	8b7b      	ldrh	r3, [r7, #26]
 80058fe:	1ad2      	subs	r2, r2, r3
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	619a      	str	r2, [r3, #24]
 8005904:	e002      	b.n	800590c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2200      	movs	r2, #0
 800590a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d123      	bne.n	800595c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	461a      	mov	r2, r3
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	4413      	add	r3, r2
 8005922:	881b      	ldrh	r3, [r3, #0]
 8005924:	b29b      	uxth	r3, r3
 8005926:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800592a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800592e:	833b      	strh	r3, [r7, #24]
 8005930:	8b3b      	ldrh	r3, [r7, #24]
 8005932:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005936:	833b      	strh	r3, [r7, #24]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	461a      	mov	r2, r3
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	441a      	add	r2, r3
 8005946:	8b3b      	ldrh	r3, [r7, #24]
 8005948:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800594c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005958:	b29b      	uxth	r3, r3
 800595a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800595c:	88fb      	ldrh	r3, [r7, #6]
 800595e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005962:	2b00      	cmp	r3, #0
 8005964:	d01f      	beq.n	80059a6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	461a      	mov	r2, r3
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	b29b      	uxth	r3, r3
 8005978:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800597c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005980:	82fb      	strh	r3, [r7, #22]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	461a      	mov	r2, r3
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	441a      	add	r2, r3
 8005990:	8afb      	ldrh	r3, [r7, #22]
 8005992:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005996:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800599a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800599e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80059a6:	8b7b      	ldrh	r3, [r7, #26]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 8085 	beq.w	8005ab8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6818      	ldr	r0, [r3, #0]
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	6959      	ldr	r1, [r3, #20]
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	891a      	ldrh	r2, [r3, #8]
 80059ba:	8b7b      	ldrh	r3, [r7, #26]
 80059bc:	f006 f879 	bl	800bab2 <USB_ReadPMA>
 80059c0:	e07a      	b.n	8005ab8 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	461a      	mov	r2, r3
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	4413      	add	r3, r2
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	6812      	ldr	r2, [r2, #0]
 80059da:	4413      	add	r3, r2
 80059dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059e6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	699a      	ldr	r2, [r3, #24]
 80059ec:	8b7b      	ldrh	r3, [r7, #26]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d306      	bcc.n	8005a00 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	699a      	ldr	r2, [r3, #24]
 80059f6:	8b7b      	ldrh	r3, [r7, #26]
 80059f8:	1ad2      	subs	r2, r2, r3
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	619a      	str	r2, [r3, #24]
 80059fe:	e002      	b.n	8005a06 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2200      	movs	r2, #0
 8005a04:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d123      	bne.n	8005a56 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	461a      	mov	r2, r3
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a28:	83fb      	strh	r3, [r7, #30]
 8005a2a:	8bfb      	ldrh	r3, [r7, #30]
 8005a2c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a30:	83fb      	strh	r3, [r7, #30]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	461a      	mov	r2, r3
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	441a      	add	r2, r3
 8005a40:	8bfb      	ldrh	r3, [r7, #30]
 8005a42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005a56:	88fb      	ldrh	r3, [r7, #6]
 8005a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d11f      	bne.n	8005aa0 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	461a      	mov	r2, r3
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	881b      	ldrh	r3, [r3, #0]
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7a:	83bb      	strh	r3, [r7, #28]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	461a      	mov	r2, r3
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	441a      	add	r2, r3
 8005a8a:	8bbb      	ldrh	r3, [r7, #28]
 8005a8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005aa0:	8b7b      	ldrh	r3, [r7, #26]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d008      	beq.n	8005ab8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6818      	ldr	r0, [r3, #0]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	6959      	ldr	r1, [r3, #20]
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	895a      	ldrh	r2, [r3, #10]
 8005ab2:	8b7b      	ldrh	r3, [r7, #26]
 8005ab4:	f005 fffd 	bl	800bab2 <USB_ReadPMA>
    }
  }

  return count;
 8005ab8:	8b7b      	ldrh	r3, [r7, #26]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3720      	adds	r7, #32
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b0a2      	sub	sp, #136	; 0x88
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	60f8      	str	r0, [r7, #12]
 8005aca:	60b9      	str	r1, [r7, #8]
 8005acc:	4613      	mov	r3, r2
 8005ace:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005ad0:	88fb      	ldrh	r3, [r7, #6]
 8005ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f000 81c5 	beq.w	8005e66 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	4413      	add	r3, r2
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	6812      	ldr	r2, [r2, #0]
 8005af4:	4413      	add	r3, r2
 8005af6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b00:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	699a      	ldr	r2, [r3, #24]
 8005b08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d907      	bls.n	8005b20 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	699a      	ldr	r2, [r3, #24]
 8005b14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b18:	1ad2      	subs	r2, r2, r3
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	619a      	str	r2, [r3, #24]
 8005b1e:	e002      	b.n	8005b26 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2200      	movs	r2, #0
 8005b24:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f040 80b9 	bne.w	8005ca2 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	785b      	ldrb	r3, [r3, #1]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d126      	bne.n	8005b86 <HAL_PCD_EP_DB_Transmit+0xc4>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	461a      	mov	r2, r3
 8005b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4c:	4413      	add	r3, r2
 8005b4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	00da      	lsls	r2, r3, #3
 8005b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b58:	4413      	add	r3, r2
 8005b5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	801a      	strh	r2, [r3, #0]
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	881b      	ldrh	r3, [r3, #0]
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b82:	801a      	strh	r2, [r3, #0]
 8005b84:	e01a      	b.n	8005bbc <HAL_PCD_EP_DB_Transmit+0xfa>
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	785b      	ldrb	r3, [r3, #1]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d116      	bne.n	8005bbc <HAL_PCD_EP_DB_Transmit+0xfa>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	633b      	str	r3, [r7, #48]	; 0x30
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba2:	4413      	add	r3, r2
 8005ba4:	633b      	str	r3, [r7, #48]	; 0x30
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	00da      	lsls	r2, r3, #3
 8005bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bae:	4413      	add	r3, r2
 8005bb0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb8:	2200      	movs	r2, #0
 8005bba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	623b      	str	r3, [r7, #32]
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	785b      	ldrb	r3, [r3, #1]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d126      	bne.n	8005c18 <HAL_PCD_EP_DB_Transmit+0x156>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	61bb      	str	r3, [r7, #24]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	461a      	mov	r2, r3
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	4413      	add	r3, r2
 8005be0:	61bb      	str	r3, [r7, #24]
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	00da      	lsls	r2, r3, #3
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	4413      	add	r3, r2
 8005bec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005bf0:	617b      	str	r3, [r7, #20]
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	881b      	ldrh	r3, [r3, #0]
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	801a      	strh	r2, [r3, #0]
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	801a      	strh	r2, [r3, #0]
 8005c16:	e017      	b.n	8005c48 <HAL_PCD_EP_DB_Transmit+0x186>
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	785b      	ldrb	r3, [r3, #1]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d113      	bne.n	8005c48 <HAL_PCD_EP_DB_Transmit+0x186>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	4413      	add	r3, r2
 8005c30:	623b      	str	r3, [r7, #32]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	00da      	lsls	r2, r3, #3
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c40:	61fb      	str	r3, [r7, #28]
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	2200      	movs	r2, #0
 8005c46:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f007 fe49 	bl	800d8e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005c54:	88fb      	ldrh	r3, [r7, #6]
 8005c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f000 82d2 	beq.w	8006204 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	461a      	mov	r2, r3
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	881b      	ldrh	r3, [r3, #0]
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c7a:	827b      	strh	r3, [r7, #18]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	461a      	mov	r2, r3
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	441a      	add	r2, r3
 8005c8a:	8a7b      	ldrh	r3, [r7, #18]
 8005c8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	8013      	strh	r3, [r2, #0]
 8005ca0:	e2b0      	b.n	8006204 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005ca2:	88fb      	ldrh	r3, [r7, #6]
 8005ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d021      	beq.n	8005cf0 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	461a      	mov	r2, r3
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	441a      	add	r2, r3
 8005cd8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005cdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ce0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ce4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	f040 8284 	bne.w	8006204 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	695a      	ldr	r2, [r3, #20]
 8005d00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d04:	441a      	add	r2, r3
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	69da      	ldr	r2, [r3, #28]
 8005d0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d12:	441a      	add	r2, r3
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	6a1a      	ldr	r2, [r3, #32]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d309      	bcc.n	8005d38 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	6a1a      	ldr	r2, [r3, #32]
 8005d2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d30:	1ad2      	subs	r2, r2, r3
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	621a      	str	r2, [r3, #32]
 8005d36:	e015      	b.n	8005d64 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d107      	bne.n	8005d50 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8005d40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d44:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005d4e:	e009      	b.n	8005d64 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	2200      	movs	r2, #0
 8005d62:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	785b      	ldrb	r3, [r3, #1]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d155      	bne.n	8005e18 <HAL_PCD_EP_DB_Transmit+0x356>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d80:	4413      	add	r3, r2
 8005d82:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	00da      	lsls	r2, r3, #3
 8005d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d92:	637b      	str	r3, [r7, #52]	; 0x34
 8005d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d96:	2b3e      	cmp	r3, #62	; 0x3e
 8005d98:	d916      	bls.n	8005dc8 <HAL_PCD_EP_DB_Transmit+0x306>
 8005d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d9c:	095b      	lsrs	r3, r3, #5
 8005d9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005da0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005da2:	f003 031f 	and.w	r3, r3, #31
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d102      	bne.n	8005db0 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8005daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dac:	3b01      	subs	r3, #1
 8005dae:	64bb      	str	r3, [r7, #72]	; 0x48
 8005db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	029b      	lsls	r3, r3, #10
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc4:	801a      	strh	r2, [r3, #0]
 8005dc6:	e043      	b.n	8005e50 <HAL_PCD_EP_DB_Transmit+0x38e>
 8005dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d112      	bne.n	8005df4 <HAL_PCD_EP_DB_Transmit+0x332>
 8005dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd0:	881b      	ldrh	r3, [r3, #0]
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ddc:	801a      	strh	r2, [r3, #0]
 8005dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de0:	881b      	ldrh	r3, [r3, #0]
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005de8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df0:	801a      	strh	r2, [r3, #0]
 8005df2:	e02d      	b.n	8005e50 <HAL_PCD_EP_DB_Transmit+0x38e>
 8005df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005df6:	085b      	lsrs	r3, r3, #1
 8005df8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <HAL_PCD_EP_DB_Transmit+0x348>
 8005e04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e06:	3301      	adds	r3, #1
 8005e08:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	029b      	lsls	r3, r3, #10
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e14:	801a      	strh	r2, [r3, #0]
 8005e16:	e01b      	b.n	8005e50 <HAL_PCD_EP_DB_Transmit+0x38e>
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	785b      	ldrb	r3, [r3, #1]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d117      	bne.n	8005e50 <HAL_PCD_EP_DB_Transmit+0x38e>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	643b      	str	r3, [r7, #64]	; 0x40
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	461a      	mov	r2, r3
 8005e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e34:	4413      	add	r3, r2
 8005e36:	643b      	str	r3, [r7, #64]	; 0x40
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	00da      	lsls	r2, r3, #3
 8005e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e40:	4413      	add	r3, r2
 8005e42:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e4e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6818      	ldr	r0, [r3, #0]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	6959      	ldr	r1, [r3, #20]
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	891a      	ldrh	r2, [r3, #8]
 8005e5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	f005 fde5 	bl	800ba2e <USB_WritePMA>
 8005e64:	e1ce      	b.n	8006204 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	461a      	mov	r2, r3
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	00db      	lsls	r3, r3, #3
 8005e78:	4413      	add	r3, r2
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	6812      	ldr	r2, [r2, #0]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e8a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	699a      	ldr	r2, [r3, #24]
 8005e92:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d307      	bcc.n	8005eaa <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	699a      	ldr	r2, [r3, #24]
 8005e9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ea2:	1ad2      	subs	r2, r2, r3
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	619a      	str	r2, [r3, #24]
 8005ea8:	e002      	b.n	8005eb0 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	2200      	movs	r2, #0
 8005eae:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f040 80c4 	bne.w	8006042 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	785b      	ldrb	r3, [r3, #1]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d126      	bne.n	8005f10 <HAL_PCD_EP_DB_Transmit+0x44e>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ed6:	4413      	add	r3, r2
 8005ed8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	00da      	lsls	r2, r3, #3
 8005ee0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ee8:	667b      	str	r3, [r7, #100]	; 0x64
 8005eea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005eec:	881b      	ldrh	r3, [r3, #0]
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ef8:	801a      	strh	r2, [r3, #0]
 8005efa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f0c:	801a      	strh	r2, [r3, #0]
 8005f0e:	e01a      	b.n	8005f46 <HAL_PCD_EP_DB_Transmit+0x484>
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	785b      	ldrb	r3, [r3, #1]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d116      	bne.n	8005f46 <HAL_PCD_EP_DB_Transmit+0x484>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	673b      	str	r3, [r7, #112]	; 0x70
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	461a      	mov	r2, r3
 8005f2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f2c:	4413      	add	r3, r2
 8005f2e:	673b      	str	r3, [r7, #112]	; 0x70
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	00da      	lsls	r2, r3, #3
 8005f36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f38:	4413      	add	r3, r2
 8005f3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f42:	2200      	movs	r2, #0
 8005f44:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	785b      	ldrb	r3, [r3, #1]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d12f      	bne.n	8005fb4 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	461a      	mov	r2, r3
 8005f68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	00da      	lsls	r2, r3, #3
 8005f78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f98:	801a      	strh	r2, [r3, #0]
 8005f9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f9e:	881b      	ldrh	r3, [r3, #0]
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fb0:	801a      	strh	r2, [r3, #0]
 8005fb2:	e017      	b.n	8005fe4 <HAL_PCD_EP_DB_Transmit+0x522>
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	785b      	ldrb	r3, [r3, #1]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d113      	bne.n	8005fe4 <HAL_PCD_EP_DB_Transmit+0x522>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fca:	4413      	add	r3, r2
 8005fcc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	00da      	lsls	r2, r3, #3
 8005fd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005fdc:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	4619      	mov	r1, r3
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f007 fc7b 	bl	800d8e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005ff0:	88fb      	ldrh	r3, [r7, #6]
 8005ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f040 8104 	bne.w	8006204 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	461a      	mov	r2, r3
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	881b      	ldrh	r3, [r3, #0]
 800600c:	b29b      	uxth	r3, r3
 800600e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006016:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	461a      	mov	r2, r3
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	441a      	add	r2, r3
 8006028:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800602c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006030:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006034:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800603c:	b29b      	uxth	r3, r3
 800603e:	8013      	strh	r3, [r2, #0]
 8006040:	e0e0      	b.n	8006204 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006042:	88fb      	ldrh	r3, [r7, #6]
 8006044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d121      	bne.n	8006090 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	461a      	mov	r2, r3
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	b29b      	uxth	r3, r3
 800605e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006066:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	461a      	mov	r2, r3
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	441a      	add	r2, r3
 8006078:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800607c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006080:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006084:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800608c:	b29b      	uxth	r3, r3
 800608e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006096:	2b01      	cmp	r3, #1
 8006098:	f040 80b4 	bne.w	8006204 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	695a      	ldr	r2, [r3, #20]
 80060a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80060a4:	441a      	add	r2, r3
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	69da      	ldr	r2, [r3, #28]
 80060ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80060b2:	441a      	add	r2, r3
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	6a1a      	ldr	r2, [r3, #32]
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d309      	bcc.n	80060d8 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	6a1a      	ldr	r2, [r3, #32]
 80060ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060d0:	1ad2      	subs	r2, r2, r3
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	621a      	str	r2, [r3, #32]
 80060d6:	e015      	b.n	8006104 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d107      	bne.n	80060f0 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80060e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80060e4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80060ee:	e009      	b.n	8006104 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	6a1b      	ldr	r3, [r3, #32]
 80060f4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	2200      	movs	r2, #0
 80060fa:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	663b      	str	r3, [r7, #96]	; 0x60
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	785b      	ldrb	r3, [r3, #1]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d155      	bne.n	80061be <HAL_PCD_EP_DB_Transmit+0x6fc>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	65bb      	str	r3, [r7, #88]	; 0x58
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006120:	b29b      	uxth	r3, r3
 8006122:	461a      	mov	r2, r3
 8006124:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006126:	4413      	add	r3, r2
 8006128:	65bb      	str	r3, [r7, #88]	; 0x58
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	00da      	lsls	r2, r3, #3
 8006130:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006132:	4413      	add	r3, r2
 8006134:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006138:	657b      	str	r3, [r7, #84]	; 0x54
 800613a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800613c:	2b3e      	cmp	r3, #62	; 0x3e
 800613e:	d916      	bls.n	800616e <HAL_PCD_EP_DB_Transmit+0x6ac>
 8006140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006142:	095b      	lsrs	r3, r3, #5
 8006144:	677b      	str	r3, [r7, #116]	; 0x74
 8006146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006148:	f003 031f 	and.w	r3, r3, #31
 800614c:	2b00      	cmp	r3, #0
 800614e:	d102      	bne.n	8006156 <HAL_PCD_EP_DB_Transmit+0x694>
 8006150:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006152:	3b01      	subs	r3, #1
 8006154:	677b      	str	r3, [r7, #116]	; 0x74
 8006156:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006158:	b29b      	uxth	r3, r3
 800615a:	029b      	lsls	r3, r3, #10
 800615c:	b29b      	uxth	r3, r3
 800615e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006162:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006166:	b29a      	uxth	r2, r3
 8006168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800616a:	801a      	strh	r2, [r3, #0]
 800616c:	e040      	b.n	80061f0 <HAL_PCD_EP_DB_Transmit+0x72e>
 800616e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006170:	2b00      	cmp	r3, #0
 8006172:	d112      	bne.n	800619a <HAL_PCD_EP_DB_Transmit+0x6d8>
 8006174:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006176:	881b      	ldrh	r3, [r3, #0]
 8006178:	b29b      	uxth	r3, r3
 800617a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800617e:	b29a      	uxth	r2, r3
 8006180:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006182:	801a      	strh	r2, [r3, #0]
 8006184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	b29b      	uxth	r3, r3
 800618a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800618e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006192:	b29a      	uxth	r2, r3
 8006194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006196:	801a      	strh	r2, [r3, #0]
 8006198:	e02a      	b.n	80061f0 <HAL_PCD_EP_DB_Transmit+0x72e>
 800619a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800619c:	085b      	lsrs	r3, r3, #1
 800619e:	677b      	str	r3, [r7, #116]	; 0x74
 80061a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d002      	beq.n	80061b0 <HAL_PCD_EP_DB_Transmit+0x6ee>
 80061aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061ac:	3301      	adds	r3, #1
 80061ae:	677b      	str	r3, [r7, #116]	; 0x74
 80061b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	029b      	lsls	r3, r3, #10
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061ba:	801a      	strh	r2, [r3, #0]
 80061bc:	e018      	b.n	80061f0 <HAL_PCD_EP_DB_Transmit+0x72e>
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	785b      	ldrb	r3, [r3, #1]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d114      	bne.n	80061f0 <HAL_PCD_EP_DB_Transmit+0x72e>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	461a      	mov	r2, r3
 80061d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061d4:	4413      	add	r3, r2
 80061d6:	663b      	str	r3, [r7, #96]	; 0x60
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	00da      	lsls	r2, r3, #3
 80061de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061e0:	4413      	add	r3, r2
 80061e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80061e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061ee:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6818      	ldr	r0, [r3, #0]
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	6959      	ldr	r1, [r3, #20]
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	895a      	ldrh	r2, [r3, #10]
 80061fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061fe:	b29b      	uxth	r3, r3
 8006200:	f005 fc15 	bl	800ba2e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	461a      	mov	r2, r3
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4413      	add	r3, r2
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	b29b      	uxth	r3, r3
 8006216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800621a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800621e:	823b      	strh	r3, [r7, #16]
 8006220:	8a3b      	ldrh	r3, [r7, #16]
 8006222:	f083 0310 	eor.w	r3, r3, #16
 8006226:	823b      	strh	r3, [r7, #16]
 8006228:	8a3b      	ldrh	r3, [r7, #16]
 800622a:	f083 0320 	eor.w	r3, r3, #32
 800622e:	823b      	strh	r3, [r7, #16]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	461a      	mov	r2, r3
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	441a      	add	r2, r3
 800623e:	8a3b      	ldrh	r3, [r7, #16]
 8006240:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006244:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006248:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800624c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006250:	b29b      	uxth	r3, r3
 8006252:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3788      	adds	r7, #136	; 0x88
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800625e:	b480      	push	{r7}
 8006260:	b087      	sub	sp, #28
 8006262:	af00      	add	r7, sp, #0
 8006264:	60f8      	str	r0, [r7, #12]
 8006266:	607b      	str	r3, [r7, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	817b      	strh	r3, [r7, #10]
 800626c:	4613      	mov	r3, r2
 800626e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006270:	897b      	ldrh	r3, [r7, #10]
 8006272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006276:	b29b      	uxth	r3, r3
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00b      	beq.n	8006294 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800627c:	897b      	ldrh	r3, [r7, #10]
 800627e:	f003 0307 	and.w	r3, r3, #7
 8006282:	1c5a      	adds	r2, r3, #1
 8006284:	4613      	mov	r3, r2
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	4413      	add	r3, r2
 800628a:	00db      	lsls	r3, r3, #3
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	4413      	add	r3, r2
 8006290:	617b      	str	r3, [r7, #20]
 8006292:	e009      	b.n	80062a8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006294:	897a      	ldrh	r2, [r7, #10]
 8006296:	4613      	mov	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	00db      	lsls	r3, r3, #3
 800629e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	4413      	add	r3, r2
 80062a6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80062a8:	893b      	ldrh	r3, [r7, #8]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d107      	bne.n	80062be <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	2200      	movs	r2, #0
 80062b2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	80da      	strh	r2, [r3, #6]
 80062bc:	e00b      	b.n	80062d6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	2201      	movs	r2, #1
 80062c2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	0c1b      	lsrs	r3, r3, #16
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	371c      	adds	r7, #28
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006308:	b29b      	uxth	r3, r3
 800630a:	f043 0301 	orr.w	r3, r3, #1
 800630e:	b29a      	uxth	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800631c:	b29b      	uxth	r3, r3
 800631e:	f043 0302 	orr.w	r3, r3, #2
 8006322:	b29a      	uxth	r2, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3714      	adds	r7, #20
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d141      	bne.n	80063ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006346:	4b4b      	ldr	r3, [pc, #300]	; (8006474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800634e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006352:	d131      	bne.n	80063b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006354:	4b47      	ldr	r3, [pc, #284]	; (8006474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006356:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800635a:	4a46      	ldr	r2, [pc, #280]	; (8006474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800635c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006360:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006364:	4b43      	ldr	r3, [pc, #268]	; (8006474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800636c:	4a41      	ldr	r2, [pc, #260]	; (8006474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800636e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006372:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006374:	4b40      	ldr	r3, [pc, #256]	; (8006478 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2232      	movs	r2, #50	; 0x32
 800637a:	fb02 f303 	mul.w	r3, r2, r3
 800637e:	4a3f      	ldr	r2, [pc, #252]	; (800647c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006380:	fba2 2303 	umull	r2, r3, r2, r3
 8006384:	0c9b      	lsrs	r3, r3, #18
 8006386:	3301      	adds	r3, #1
 8006388:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800638a:	e002      	b.n	8006392 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	3b01      	subs	r3, #1
 8006390:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006392:	4b38      	ldr	r3, [pc, #224]	; (8006474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800639a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800639e:	d102      	bne.n	80063a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1f2      	bne.n	800638c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80063a6:	4b33      	ldr	r3, [pc, #204]	; (8006474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063b2:	d158      	bne.n	8006466 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e057      	b.n	8006468 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80063b8:	4b2e      	ldr	r3, [pc, #184]	; (8006474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063be:	4a2d      	ldr	r2, [pc, #180]	; (8006474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80063c8:	e04d      	b.n	8006466 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063d0:	d141      	bne.n	8006456 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80063d2:	4b28      	ldr	r3, [pc, #160]	; (8006474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80063da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063de:	d131      	bne.n	8006444 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80063e0:	4b24      	ldr	r3, [pc, #144]	; (8006474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063e6:	4a23      	ldr	r2, [pc, #140]	; (8006474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80063f0:	4b20      	ldr	r3, [pc, #128]	; (8006474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80063f8:	4a1e      	ldr	r2, [pc, #120]	; (8006474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006400:	4b1d      	ldr	r3, [pc, #116]	; (8006478 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2232      	movs	r2, #50	; 0x32
 8006406:	fb02 f303 	mul.w	r3, r2, r3
 800640a:	4a1c      	ldr	r2, [pc, #112]	; (800647c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800640c:	fba2 2303 	umull	r2, r3, r2, r3
 8006410:	0c9b      	lsrs	r3, r3, #18
 8006412:	3301      	adds	r3, #1
 8006414:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006416:	e002      	b.n	800641e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	3b01      	subs	r3, #1
 800641c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800641e:	4b15      	ldr	r3, [pc, #84]	; (8006474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800642a:	d102      	bne.n	8006432 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1f2      	bne.n	8006418 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006432:	4b10      	ldr	r3, [pc, #64]	; (8006474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800643a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800643e:	d112      	bne.n	8006466 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e011      	b.n	8006468 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006444:	4b0b      	ldr	r3, [pc, #44]	; (8006474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006446:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800644a:	4a0a      	ldr	r2, [pc, #40]	; (8006474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800644c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006450:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006454:	e007      	b.n	8006466 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006456:	4b07      	ldr	r3, [pc, #28]	; (8006474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800645e:	4a05      	ldr	r2, [pc, #20]	; (8006474 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006460:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006464:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3714      	adds	r7, #20
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr
 8006474:	40007000 	.word	0x40007000
 8006478:	200026d4 	.word	0x200026d4
 800647c:	431bde83 	.word	0x431bde83

08006480 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b088      	sub	sp, #32
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d101      	bne.n	8006492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e306      	b.n	8006aa0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b00      	cmp	r3, #0
 800649c:	d075      	beq.n	800658a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800649e:	4b97      	ldr	r3, [pc, #604]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f003 030c 	and.w	r3, r3, #12
 80064a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064a8:	4b94      	ldr	r3, [pc, #592]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	f003 0303 	and.w	r3, r3, #3
 80064b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	2b0c      	cmp	r3, #12
 80064b6:	d102      	bne.n	80064be <HAL_RCC_OscConfig+0x3e>
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	2b03      	cmp	r3, #3
 80064bc:	d002      	beq.n	80064c4 <HAL_RCC_OscConfig+0x44>
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	2b08      	cmp	r3, #8
 80064c2:	d10b      	bne.n	80064dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064c4:	4b8d      	ldr	r3, [pc, #564]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d05b      	beq.n	8006588 <HAL_RCC_OscConfig+0x108>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d157      	bne.n	8006588 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e2e1      	b.n	8006aa0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064e4:	d106      	bne.n	80064f4 <HAL_RCC_OscConfig+0x74>
 80064e6:	4b85      	ldr	r3, [pc, #532]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a84      	ldr	r2, [pc, #528]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 80064ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064f0:	6013      	str	r3, [r2, #0]
 80064f2:	e01d      	b.n	8006530 <HAL_RCC_OscConfig+0xb0>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064fc:	d10c      	bne.n	8006518 <HAL_RCC_OscConfig+0x98>
 80064fe:	4b7f      	ldr	r3, [pc, #508]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a7e      	ldr	r2, [pc, #504]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 8006504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006508:	6013      	str	r3, [r2, #0]
 800650a:	4b7c      	ldr	r3, [pc, #496]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a7b      	ldr	r2, [pc, #492]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 8006510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006514:	6013      	str	r3, [r2, #0]
 8006516:	e00b      	b.n	8006530 <HAL_RCC_OscConfig+0xb0>
 8006518:	4b78      	ldr	r3, [pc, #480]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a77      	ldr	r2, [pc, #476]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 800651e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006522:	6013      	str	r3, [r2, #0]
 8006524:	4b75      	ldr	r3, [pc, #468]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a74      	ldr	r2, [pc, #464]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 800652a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800652e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d013      	beq.n	8006560 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006538:	f7fb fc54 	bl	8001de4 <HAL_GetTick>
 800653c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800653e:	e008      	b.n	8006552 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006540:	f7fb fc50 	bl	8001de4 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	2b64      	cmp	r3, #100	; 0x64
 800654c:	d901      	bls.n	8006552 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e2a6      	b.n	8006aa0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006552:	4b6a      	ldr	r3, [pc, #424]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d0f0      	beq.n	8006540 <HAL_RCC_OscConfig+0xc0>
 800655e:	e014      	b.n	800658a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006560:	f7fb fc40 	bl	8001de4 <HAL_GetTick>
 8006564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006566:	e008      	b.n	800657a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006568:	f7fb fc3c 	bl	8001de4 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	2b64      	cmp	r3, #100	; 0x64
 8006574:	d901      	bls.n	800657a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e292      	b.n	8006aa0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800657a:	4b60      	ldr	r3, [pc, #384]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1f0      	bne.n	8006568 <HAL_RCC_OscConfig+0xe8>
 8006586:	e000      	b.n	800658a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0302 	and.w	r3, r3, #2
 8006592:	2b00      	cmp	r3, #0
 8006594:	d075      	beq.n	8006682 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006596:	4b59      	ldr	r3, [pc, #356]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f003 030c 	and.w	r3, r3, #12
 800659e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065a0:	4b56      	ldr	r3, [pc, #344]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	f003 0303 	and.w	r3, r3, #3
 80065a8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	2b0c      	cmp	r3, #12
 80065ae:	d102      	bne.n	80065b6 <HAL_RCC_OscConfig+0x136>
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d002      	beq.n	80065bc <HAL_RCC_OscConfig+0x13c>
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	2b04      	cmp	r3, #4
 80065ba:	d11f      	bne.n	80065fc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065bc:	4b4f      	ldr	r3, [pc, #316]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d005      	beq.n	80065d4 <HAL_RCC_OscConfig+0x154>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e265      	b.n	8006aa0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065d4:	4b49      	ldr	r3, [pc, #292]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	061b      	lsls	r3, r3, #24
 80065e2:	4946      	ldr	r1, [pc, #280]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 80065e4:	4313      	orrs	r3, r2
 80065e6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80065e8:	4b45      	ldr	r3, [pc, #276]	; (8006700 <HAL_RCC_OscConfig+0x280>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7fb fbad 	bl	8001d4c <HAL_InitTick>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d043      	beq.n	8006680 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e251      	b.n	8006aa0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d023      	beq.n	800664c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006604:	4b3d      	ldr	r3, [pc, #244]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a3c      	ldr	r2, [pc, #240]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 800660a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800660e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006610:	f7fb fbe8 	bl	8001de4 <HAL_GetTick>
 8006614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006616:	e008      	b.n	800662a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006618:	f7fb fbe4 	bl	8001de4 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	2b02      	cmp	r3, #2
 8006624:	d901      	bls.n	800662a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e23a      	b.n	8006aa0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800662a:	4b34      	ldr	r3, [pc, #208]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006632:	2b00      	cmp	r3, #0
 8006634:	d0f0      	beq.n	8006618 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006636:	4b31      	ldr	r3, [pc, #196]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	061b      	lsls	r3, r3, #24
 8006644:	492d      	ldr	r1, [pc, #180]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 8006646:	4313      	orrs	r3, r2
 8006648:	604b      	str	r3, [r1, #4]
 800664a:	e01a      	b.n	8006682 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800664c:	4b2b      	ldr	r3, [pc, #172]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a2a      	ldr	r2, [pc, #168]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 8006652:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006658:	f7fb fbc4 	bl	8001de4 <HAL_GetTick>
 800665c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800665e:	e008      	b.n	8006672 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006660:	f7fb fbc0 	bl	8001de4 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	2b02      	cmp	r3, #2
 800666c:	d901      	bls.n	8006672 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e216      	b.n	8006aa0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006672:	4b22      	ldr	r3, [pc, #136]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1f0      	bne.n	8006660 <HAL_RCC_OscConfig+0x1e0>
 800667e:	e000      	b.n	8006682 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006680:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0308 	and.w	r3, r3, #8
 800668a:	2b00      	cmp	r3, #0
 800668c:	d041      	beq.n	8006712 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d01c      	beq.n	80066d0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006696:	4b19      	ldr	r3, [pc, #100]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 8006698:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800669c:	4a17      	ldr	r2, [pc, #92]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 800669e:	f043 0301 	orr.w	r3, r3, #1
 80066a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066a6:	f7fb fb9d 	bl	8001de4 <HAL_GetTick>
 80066aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066ac:	e008      	b.n	80066c0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066ae:	f7fb fb99 	bl	8001de4 <HAL_GetTick>
 80066b2:	4602      	mov	r2, r0
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d901      	bls.n	80066c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e1ef      	b.n	8006aa0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066c0:	4b0e      	ldr	r3, [pc, #56]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 80066c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066c6:	f003 0302 	and.w	r3, r3, #2
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d0ef      	beq.n	80066ae <HAL_RCC_OscConfig+0x22e>
 80066ce:	e020      	b.n	8006712 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066d0:	4b0a      	ldr	r3, [pc, #40]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 80066d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066d6:	4a09      	ldr	r2, [pc, #36]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 80066d8:	f023 0301 	bic.w	r3, r3, #1
 80066dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066e0:	f7fb fb80 	bl	8001de4 <HAL_GetTick>
 80066e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80066e6:	e00d      	b.n	8006704 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066e8:	f7fb fb7c 	bl	8001de4 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d906      	bls.n	8006704 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e1d2      	b.n	8006aa0 <HAL_RCC_OscConfig+0x620>
 80066fa:	bf00      	nop
 80066fc:	40021000 	.word	0x40021000
 8006700:	200026d8 	.word	0x200026d8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006704:	4b8c      	ldr	r3, [pc, #560]	; (8006938 <HAL_RCC_OscConfig+0x4b8>)
 8006706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800670a:	f003 0302 	and.w	r3, r3, #2
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1ea      	bne.n	80066e8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0304 	and.w	r3, r3, #4
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 80a6 	beq.w	800686c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006720:	2300      	movs	r3, #0
 8006722:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006724:	4b84      	ldr	r3, [pc, #528]	; (8006938 <HAL_RCC_OscConfig+0x4b8>)
 8006726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d101      	bne.n	8006734 <HAL_RCC_OscConfig+0x2b4>
 8006730:	2301      	movs	r3, #1
 8006732:	e000      	b.n	8006736 <HAL_RCC_OscConfig+0x2b6>
 8006734:	2300      	movs	r3, #0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00d      	beq.n	8006756 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800673a:	4b7f      	ldr	r3, [pc, #508]	; (8006938 <HAL_RCC_OscConfig+0x4b8>)
 800673c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800673e:	4a7e      	ldr	r2, [pc, #504]	; (8006938 <HAL_RCC_OscConfig+0x4b8>)
 8006740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006744:	6593      	str	r3, [r2, #88]	; 0x58
 8006746:	4b7c      	ldr	r3, [pc, #496]	; (8006938 <HAL_RCC_OscConfig+0x4b8>)
 8006748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800674a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800674e:	60fb      	str	r3, [r7, #12]
 8006750:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006752:	2301      	movs	r3, #1
 8006754:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006756:	4b79      	ldr	r3, [pc, #484]	; (800693c <HAL_RCC_OscConfig+0x4bc>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800675e:	2b00      	cmp	r3, #0
 8006760:	d118      	bne.n	8006794 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006762:	4b76      	ldr	r3, [pc, #472]	; (800693c <HAL_RCC_OscConfig+0x4bc>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a75      	ldr	r2, [pc, #468]	; (800693c <HAL_RCC_OscConfig+0x4bc>)
 8006768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800676c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800676e:	f7fb fb39 	bl	8001de4 <HAL_GetTick>
 8006772:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006774:	e008      	b.n	8006788 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006776:	f7fb fb35 	bl	8001de4 <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	2b02      	cmp	r3, #2
 8006782:	d901      	bls.n	8006788 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e18b      	b.n	8006aa0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006788:	4b6c      	ldr	r3, [pc, #432]	; (800693c <HAL_RCC_OscConfig+0x4bc>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006790:	2b00      	cmp	r3, #0
 8006792:	d0f0      	beq.n	8006776 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	2b01      	cmp	r3, #1
 800679a:	d108      	bne.n	80067ae <HAL_RCC_OscConfig+0x32e>
 800679c:	4b66      	ldr	r3, [pc, #408]	; (8006938 <HAL_RCC_OscConfig+0x4b8>)
 800679e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a2:	4a65      	ldr	r2, [pc, #404]	; (8006938 <HAL_RCC_OscConfig+0x4b8>)
 80067a4:	f043 0301 	orr.w	r3, r3, #1
 80067a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80067ac:	e024      	b.n	80067f8 <HAL_RCC_OscConfig+0x378>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	2b05      	cmp	r3, #5
 80067b4:	d110      	bne.n	80067d8 <HAL_RCC_OscConfig+0x358>
 80067b6:	4b60      	ldr	r3, [pc, #384]	; (8006938 <HAL_RCC_OscConfig+0x4b8>)
 80067b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067bc:	4a5e      	ldr	r2, [pc, #376]	; (8006938 <HAL_RCC_OscConfig+0x4b8>)
 80067be:	f043 0304 	orr.w	r3, r3, #4
 80067c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80067c6:	4b5c      	ldr	r3, [pc, #368]	; (8006938 <HAL_RCC_OscConfig+0x4b8>)
 80067c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067cc:	4a5a      	ldr	r2, [pc, #360]	; (8006938 <HAL_RCC_OscConfig+0x4b8>)
 80067ce:	f043 0301 	orr.w	r3, r3, #1
 80067d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80067d6:	e00f      	b.n	80067f8 <HAL_RCC_OscConfig+0x378>
 80067d8:	4b57      	ldr	r3, [pc, #348]	; (8006938 <HAL_RCC_OscConfig+0x4b8>)
 80067da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067de:	4a56      	ldr	r2, [pc, #344]	; (8006938 <HAL_RCC_OscConfig+0x4b8>)
 80067e0:	f023 0301 	bic.w	r3, r3, #1
 80067e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80067e8:	4b53      	ldr	r3, [pc, #332]	; (8006938 <HAL_RCC_OscConfig+0x4b8>)
 80067ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ee:	4a52      	ldr	r2, [pc, #328]	; (8006938 <HAL_RCC_OscConfig+0x4b8>)
 80067f0:	f023 0304 	bic.w	r3, r3, #4
 80067f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d016      	beq.n	800682e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006800:	f7fb faf0 	bl	8001de4 <HAL_GetTick>
 8006804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006806:	e00a      	b.n	800681e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006808:	f7fb faec 	bl	8001de4 <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	f241 3288 	movw	r2, #5000	; 0x1388
 8006816:	4293      	cmp	r3, r2
 8006818:	d901      	bls.n	800681e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e140      	b.n	8006aa0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800681e:	4b46      	ldr	r3, [pc, #280]	; (8006938 <HAL_RCC_OscConfig+0x4b8>)
 8006820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006824:	f003 0302 	and.w	r3, r3, #2
 8006828:	2b00      	cmp	r3, #0
 800682a:	d0ed      	beq.n	8006808 <HAL_RCC_OscConfig+0x388>
 800682c:	e015      	b.n	800685a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800682e:	f7fb fad9 	bl	8001de4 <HAL_GetTick>
 8006832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006834:	e00a      	b.n	800684c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006836:	f7fb fad5 	bl	8001de4 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	f241 3288 	movw	r2, #5000	; 0x1388
 8006844:	4293      	cmp	r3, r2
 8006846:	d901      	bls.n	800684c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e129      	b.n	8006aa0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800684c:	4b3a      	ldr	r3, [pc, #232]	; (8006938 <HAL_RCC_OscConfig+0x4b8>)
 800684e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006852:	f003 0302 	and.w	r3, r3, #2
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1ed      	bne.n	8006836 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800685a:	7ffb      	ldrb	r3, [r7, #31]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d105      	bne.n	800686c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006860:	4b35      	ldr	r3, [pc, #212]	; (8006938 <HAL_RCC_OscConfig+0x4b8>)
 8006862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006864:	4a34      	ldr	r2, [pc, #208]	; (8006938 <HAL_RCC_OscConfig+0x4b8>)
 8006866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800686a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0320 	and.w	r3, r3, #32
 8006874:	2b00      	cmp	r3, #0
 8006876:	d03c      	beq.n	80068f2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d01c      	beq.n	80068ba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006880:	4b2d      	ldr	r3, [pc, #180]	; (8006938 <HAL_RCC_OscConfig+0x4b8>)
 8006882:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006886:	4a2c      	ldr	r2, [pc, #176]	; (8006938 <HAL_RCC_OscConfig+0x4b8>)
 8006888:	f043 0301 	orr.w	r3, r3, #1
 800688c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006890:	f7fb faa8 	bl	8001de4 <HAL_GetTick>
 8006894:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006896:	e008      	b.n	80068aa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006898:	f7fb faa4 	bl	8001de4 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d901      	bls.n	80068aa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e0fa      	b.n	8006aa0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068aa:	4b23      	ldr	r3, [pc, #140]	; (8006938 <HAL_RCC_OscConfig+0x4b8>)
 80068ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068b0:	f003 0302 	and.w	r3, r3, #2
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d0ef      	beq.n	8006898 <HAL_RCC_OscConfig+0x418>
 80068b8:	e01b      	b.n	80068f2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80068ba:	4b1f      	ldr	r3, [pc, #124]	; (8006938 <HAL_RCC_OscConfig+0x4b8>)
 80068bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068c0:	4a1d      	ldr	r2, [pc, #116]	; (8006938 <HAL_RCC_OscConfig+0x4b8>)
 80068c2:	f023 0301 	bic.w	r3, r3, #1
 80068c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068ca:	f7fb fa8b 	bl	8001de4 <HAL_GetTick>
 80068ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80068d0:	e008      	b.n	80068e4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068d2:	f7fb fa87 	bl	8001de4 <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d901      	bls.n	80068e4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e0dd      	b.n	8006aa0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80068e4:	4b14      	ldr	r3, [pc, #80]	; (8006938 <HAL_RCC_OscConfig+0x4b8>)
 80068e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068ea:	f003 0302 	and.w	r3, r3, #2
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1ef      	bne.n	80068d2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f000 80d1 	beq.w	8006a9e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068fc:	4b0e      	ldr	r3, [pc, #56]	; (8006938 <HAL_RCC_OscConfig+0x4b8>)
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	f003 030c 	and.w	r3, r3, #12
 8006904:	2b0c      	cmp	r3, #12
 8006906:	f000 808b 	beq.w	8006a20 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	2b02      	cmp	r3, #2
 8006910:	d15e      	bne.n	80069d0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006912:	4b09      	ldr	r3, [pc, #36]	; (8006938 <HAL_RCC_OscConfig+0x4b8>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a08      	ldr	r2, [pc, #32]	; (8006938 <HAL_RCC_OscConfig+0x4b8>)
 8006918:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800691c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800691e:	f7fb fa61 	bl	8001de4 <HAL_GetTick>
 8006922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006924:	e00c      	b.n	8006940 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006926:	f7fb fa5d 	bl	8001de4 <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	2b02      	cmp	r3, #2
 8006932:	d905      	bls.n	8006940 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006934:	2303      	movs	r3, #3
 8006936:	e0b3      	b.n	8006aa0 <HAL_RCC_OscConfig+0x620>
 8006938:	40021000 	.word	0x40021000
 800693c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006940:	4b59      	ldr	r3, [pc, #356]	; (8006aa8 <HAL_RCC_OscConfig+0x628>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1ec      	bne.n	8006926 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800694c:	4b56      	ldr	r3, [pc, #344]	; (8006aa8 <HAL_RCC_OscConfig+0x628>)
 800694e:	68da      	ldr	r2, [r3, #12]
 8006950:	4b56      	ldr	r3, [pc, #344]	; (8006aac <HAL_RCC_OscConfig+0x62c>)
 8006952:	4013      	ands	r3, r2
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	6a11      	ldr	r1, [r2, #32]
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800695c:	3a01      	subs	r2, #1
 800695e:	0112      	lsls	r2, r2, #4
 8006960:	4311      	orrs	r1, r2
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006966:	0212      	lsls	r2, r2, #8
 8006968:	4311      	orrs	r1, r2
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800696e:	0852      	lsrs	r2, r2, #1
 8006970:	3a01      	subs	r2, #1
 8006972:	0552      	lsls	r2, r2, #21
 8006974:	4311      	orrs	r1, r2
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800697a:	0852      	lsrs	r2, r2, #1
 800697c:	3a01      	subs	r2, #1
 800697e:	0652      	lsls	r2, r2, #25
 8006980:	4311      	orrs	r1, r2
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006986:	06d2      	lsls	r2, r2, #27
 8006988:	430a      	orrs	r2, r1
 800698a:	4947      	ldr	r1, [pc, #284]	; (8006aa8 <HAL_RCC_OscConfig+0x628>)
 800698c:	4313      	orrs	r3, r2
 800698e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006990:	4b45      	ldr	r3, [pc, #276]	; (8006aa8 <HAL_RCC_OscConfig+0x628>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a44      	ldr	r2, [pc, #272]	; (8006aa8 <HAL_RCC_OscConfig+0x628>)
 8006996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800699a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800699c:	4b42      	ldr	r3, [pc, #264]	; (8006aa8 <HAL_RCC_OscConfig+0x628>)
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	4a41      	ldr	r2, [pc, #260]	; (8006aa8 <HAL_RCC_OscConfig+0x628>)
 80069a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069a8:	f7fb fa1c 	bl	8001de4 <HAL_GetTick>
 80069ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069ae:	e008      	b.n	80069c2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069b0:	f7fb fa18 	bl	8001de4 <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d901      	bls.n	80069c2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e06e      	b.n	8006aa0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069c2:	4b39      	ldr	r3, [pc, #228]	; (8006aa8 <HAL_RCC_OscConfig+0x628>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d0f0      	beq.n	80069b0 <HAL_RCC_OscConfig+0x530>
 80069ce:	e066      	b.n	8006a9e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069d0:	4b35      	ldr	r3, [pc, #212]	; (8006aa8 <HAL_RCC_OscConfig+0x628>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a34      	ldr	r2, [pc, #208]	; (8006aa8 <HAL_RCC_OscConfig+0x628>)
 80069d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069da:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80069dc:	4b32      	ldr	r3, [pc, #200]	; (8006aa8 <HAL_RCC_OscConfig+0x628>)
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	4a31      	ldr	r2, [pc, #196]	; (8006aa8 <HAL_RCC_OscConfig+0x628>)
 80069e2:	f023 0303 	bic.w	r3, r3, #3
 80069e6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80069e8:	4b2f      	ldr	r3, [pc, #188]	; (8006aa8 <HAL_RCC_OscConfig+0x628>)
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	4a2e      	ldr	r2, [pc, #184]	; (8006aa8 <HAL_RCC_OscConfig+0x628>)
 80069ee:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80069f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069f8:	f7fb f9f4 	bl	8001de4 <HAL_GetTick>
 80069fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069fe:	e008      	b.n	8006a12 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a00:	f7fb f9f0 	bl	8001de4 <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d901      	bls.n	8006a12 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e046      	b.n	8006aa0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a12:	4b25      	ldr	r3, [pc, #148]	; (8006aa8 <HAL_RCC_OscConfig+0x628>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1f0      	bne.n	8006a00 <HAL_RCC_OscConfig+0x580>
 8006a1e:	e03e      	b.n	8006a9e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	69db      	ldr	r3, [r3, #28]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d101      	bne.n	8006a2c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e039      	b.n	8006aa0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006a2c:	4b1e      	ldr	r3, [pc, #120]	; (8006aa8 <HAL_RCC_OscConfig+0x628>)
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	f003 0203 	and.w	r2, r3, #3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a1b      	ldr	r3, [r3, #32]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d12c      	bne.n	8006a9a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d123      	bne.n	8006a9a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d11b      	bne.n	8006a9a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d113      	bne.n	8006a9a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7c:	085b      	lsrs	r3, r3, #1
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d109      	bne.n	8006a9a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a90:	085b      	lsrs	r3, r3, #1
 8006a92:	3b01      	subs	r3, #1
 8006a94:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d001      	beq.n	8006a9e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e000      	b.n	8006aa0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3720      	adds	r7, #32
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	40021000 	.word	0x40021000
 8006aac:	019f800c 	.word	0x019f800c

08006ab0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006aba:	2300      	movs	r3, #0
 8006abc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d101      	bne.n	8006ac8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e11e      	b.n	8006d06 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ac8:	4b91      	ldr	r3, [pc, #580]	; (8006d10 <HAL_RCC_ClockConfig+0x260>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 030f 	and.w	r3, r3, #15
 8006ad0:	683a      	ldr	r2, [r7, #0]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d910      	bls.n	8006af8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ad6:	4b8e      	ldr	r3, [pc, #568]	; (8006d10 <HAL_RCC_ClockConfig+0x260>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f023 020f 	bic.w	r2, r3, #15
 8006ade:	498c      	ldr	r1, [pc, #560]	; (8006d10 <HAL_RCC_ClockConfig+0x260>)
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ae6:	4b8a      	ldr	r3, [pc, #552]	; (8006d10 <HAL_RCC_ClockConfig+0x260>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 030f 	and.w	r3, r3, #15
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d001      	beq.n	8006af8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e106      	b.n	8006d06 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0301 	and.w	r3, r3, #1
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d073      	beq.n	8006bec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	2b03      	cmp	r3, #3
 8006b0a:	d129      	bne.n	8006b60 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b0c:	4b81      	ldr	r3, [pc, #516]	; (8006d14 <HAL_RCC_ClockConfig+0x264>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e0f4      	b.n	8006d06 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006b1c:	f000 f970 	bl	8006e00 <RCC_GetSysClockFreqFromPLLSource>
 8006b20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	4a7c      	ldr	r2, [pc, #496]	; (8006d18 <HAL_RCC_ClockConfig+0x268>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d93f      	bls.n	8006baa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006b2a:	4b7a      	ldr	r3, [pc, #488]	; (8006d14 <HAL_RCC_ClockConfig+0x264>)
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d009      	beq.n	8006b4a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d033      	beq.n	8006baa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d12f      	bne.n	8006baa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006b4a:	4b72      	ldr	r3, [pc, #456]	; (8006d14 <HAL_RCC_ClockConfig+0x264>)
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b52:	4a70      	ldr	r2, [pc, #448]	; (8006d14 <HAL_RCC_ClockConfig+0x264>)
 8006b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006b5a:	2380      	movs	r3, #128	; 0x80
 8006b5c:	617b      	str	r3, [r7, #20]
 8006b5e:	e024      	b.n	8006baa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d107      	bne.n	8006b78 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b68:	4b6a      	ldr	r3, [pc, #424]	; (8006d14 <HAL_RCC_ClockConfig+0x264>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d109      	bne.n	8006b88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e0c6      	b.n	8006d06 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b78:	4b66      	ldr	r3, [pc, #408]	; (8006d14 <HAL_RCC_ClockConfig+0x264>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d101      	bne.n	8006b88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e0be      	b.n	8006d06 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006b88:	f000 f8ce 	bl	8006d28 <HAL_RCC_GetSysClockFreq>
 8006b8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	4a61      	ldr	r2, [pc, #388]	; (8006d18 <HAL_RCC_ClockConfig+0x268>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d909      	bls.n	8006baa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006b96:	4b5f      	ldr	r3, [pc, #380]	; (8006d14 <HAL_RCC_ClockConfig+0x264>)
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b9e:	4a5d      	ldr	r2, [pc, #372]	; (8006d14 <HAL_RCC_ClockConfig+0x264>)
 8006ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ba4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006ba6:	2380      	movs	r3, #128	; 0x80
 8006ba8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006baa:	4b5a      	ldr	r3, [pc, #360]	; (8006d14 <HAL_RCC_ClockConfig+0x264>)
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f023 0203 	bic.w	r2, r3, #3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	4957      	ldr	r1, [pc, #348]	; (8006d14 <HAL_RCC_ClockConfig+0x264>)
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bbc:	f7fb f912 	bl	8001de4 <HAL_GetTick>
 8006bc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bc2:	e00a      	b.n	8006bda <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bc4:	f7fb f90e 	bl	8001de4 <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d901      	bls.n	8006bda <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e095      	b.n	8006d06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bda:	4b4e      	ldr	r3, [pc, #312]	; (8006d14 <HAL_RCC_ClockConfig+0x264>)
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f003 020c 	and.w	r2, r3, #12
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d1eb      	bne.n	8006bc4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0302 	and.w	r3, r3, #2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d023      	beq.n	8006c40 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0304 	and.w	r3, r3, #4
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d005      	beq.n	8006c10 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c04:	4b43      	ldr	r3, [pc, #268]	; (8006d14 <HAL_RCC_ClockConfig+0x264>)
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	4a42      	ldr	r2, [pc, #264]	; (8006d14 <HAL_RCC_ClockConfig+0x264>)
 8006c0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006c0e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0308 	and.w	r3, r3, #8
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d007      	beq.n	8006c2c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006c1c:	4b3d      	ldr	r3, [pc, #244]	; (8006d14 <HAL_RCC_ClockConfig+0x264>)
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006c24:	4a3b      	ldr	r2, [pc, #236]	; (8006d14 <HAL_RCC_ClockConfig+0x264>)
 8006c26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006c2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c2c:	4b39      	ldr	r3, [pc, #228]	; (8006d14 <HAL_RCC_ClockConfig+0x264>)
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	4936      	ldr	r1, [pc, #216]	; (8006d14 <HAL_RCC_ClockConfig+0x264>)
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	608b      	str	r3, [r1, #8]
 8006c3e:	e008      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	2b80      	cmp	r3, #128	; 0x80
 8006c44:	d105      	bne.n	8006c52 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006c46:	4b33      	ldr	r3, [pc, #204]	; (8006d14 <HAL_RCC_ClockConfig+0x264>)
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	4a32      	ldr	r2, [pc, #200]	; (8006d14 <HAL_RCC_ClockConfig+0x264>)
 8006c4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c50:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c52:	4b2f      	ldr	r3, [pc, #188]	; (8006d10 <HAL_RCC_ClockConfig+0x260>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 030f 	and.w	r3, r3, #15
 8006c5a:	683a      	ldr	r2, [r7, #0]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d21d      	bcs.n	8006c9c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c60:	4b2b      	ldr	r3, [pc, #172]	; (8006d10 <HAL_RCC_ClockConfig+0x260>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f023 020f 	bic.w	r2, r3, #15
 8006c68:	4929      	ldr	r1, [pc, #164]	; (8006d10 <HAL_RCC_ClockConfig+0x260>)
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006c70:	f7fb f8b8 	bl	8001de4 <HAL_GetTick>
 8006c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c76:	e00a      	b.n	8006c8e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c78:	f7fb f8b4 	bl	8001de4 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d901      	bls.n	8006c8e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e03b      	b.n	8006d06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c8e:	4b20      	ldr	r3, [pc, #128]	; (8006d10 <HAL_RCC_ClockConfig+0x260>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 030f 	and.w	r3, r3, #15
 8006c96:	683a      	ldr	r2, [r7, #0]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d1ed      	bne.n	8006c78 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0304 	and.w	r3, r3, #4
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d008      	beq.n	8006cba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ca8:	4b1a      	ldr	r3, [pc, #104]	; (8006d14 <HAL_RCC_ClockConfig+0x264>)
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	4917      	ldr	r1, [pc, #92]	; (8006d14 <HAL_RCC_ClockConfig+0x264>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0308 	and.w	r3, r3, #8
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d009      	beq.n	8006cda <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cc6:	4b13      	ldr	r3, [pc, #76]	; (8006d14 <HAL_RCC_ClockConfig+0x264>)
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	00db      	lsls	r3, r3, #3
 8006cd4:	490f      	ldr	r1, [pc, #60]	; (8006d14 <HAL_RCC_ClockConfig+0x264>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006cda:	f000 f825 	bl	8006d28 <HAL_RCC_GetSysClockFreq>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	4b0c      	ldr	r3, [pc, #48]	; (8006d14 <HAL_RCC_ClockConfig+0x264>)
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	091b      	lsrs	r3, r3, #4
 8006ce6:	f003 030f 	and.w	r3, r3, #15
 8006cea:	490c      	ldr	r1, [pc, #48]	; (8006d1c <HAL_RCC_ClockConfig+0x26c>)
 8006cec:	5ccb      	ldrb	r3, [r1, r3]
 8006cee:	f003 031f 	and.w	r3, r3, #31
 8006cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8006cf6:	4a0a      	ldr	r2, [pc, #40]	; (8006d20 <HAL_RCC_ClockConfig+0x270>)
 8006cf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006cfa:	4b0a      	ldr	r3, [pc, #40]	; (8006d24 <HAL_RCC_ClockConfig+0x274>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7fb f824 	bl	8001d4c <HAL_InitTick>
 8006d04:	4603      	mov	r3, r0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3718      	adds	r7, #24
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	40022000 	.word	0x40022000
 8006d14:	40021000 	.word	0x40021000
 8006d18:	04c4b400 	.word	0x04c4b400
 8006d1c:	08010974 	.word	0x08010974
 8006d20:	200026d4 	.word	0x200026d4
 8006d24:	200026d8 	.word	0x200026d8

08006d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b087      	sub	sp, #28
 8006d2c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006d2e:	4b2c      	ldr	r3, [pc, #176]	; (8006de0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	f003 030c 	and.w	r3, r3, #12
 8006d36:	2b04      	cmp	r3, #4
 8006d38:	d102      	bne.n	8006d40 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006d3a:	4b2a      	ldr	r3, [pc, #168]	; (8006de4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d3c:	613b      	str	r3, [r7, #16]
 8006d3e:	e047      	b.n	8006dd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006d40:	4b27      	ldr	r3, [pc, #156]	; (8006de0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f003 030c 	and.w	r3, r3, #12
 8006d48:	2b08      	cmp	r3, #8
 8006d4a:	d102      	bne.n	8006d52 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d4c:	4b25      	ldr	r3, [pc, #148]	; (8006de4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d4e:	613b      	str	r3, [r7, #16]
 8006d50:	e03e      	b.n	8006dd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006d52:	4b23      	ldr	r3, [pc, #140]	; (8006de0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f003 030c 	and.w	r3, r3, #12
 8006d5a:	2b0c      	cmp	r3, #12
 8006d5c:	d136      	bne.n	8006dcc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d5e:	4b20      	ldr	r3, [pc, #128]	; (8006de0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	f003 0303 	and.w	r3, r3, #3
 8006d66:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d68:	4b1d      	ldr	r3, [pc, #116]	; (8006de0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	091b      	lsrs	r3, r3, #4
 8006d6e:	f003 030f 	and.w	r3, r3, #15
 8006d72:	3301      	adds	r3, #1
 8006d74:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2b03      	cmp	r3, #3
 8006d7a:	d10c      	bne.n	8006d96 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d7c:	4a19      	ldr	r2, [pc, #100]	; (8006de4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d84:	4a16      	ldr	r2, [pc, #88]	; (8006de0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d86:	68d2      	ldr	r2, [r2, #12]
 8006d88:	0a12      	lsrs	r2, r2, #8
 8006d8a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006d8e:	fb02 f303 	mul.w	r3, r2, r3
 8006d92:	617b      	str	r3, [r7, #20]
      break;
 8006d94:	e00c      	b.n	8006db0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d96:	4a13      	ldr	r2, [pc, #76]	; (8006de4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d9e:	4a10      	ldr	r2, [pc, #64]	; (8006de0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006da0:	68d2      	ldr	r2, [r2, #12]
 8006da2:	0a12      	lsrs	r2, r2, #8
 8006da4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006da8:	fb02 f303 	mul.w	r3, r2, r3
 8006dac:	617b      	str	r3, [r7, #20]
      break;
 8006dae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006db0:	4b0b      	ldr	r3, [pc, #44]	; (8006de0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	0e5b      	lsrs	r3, r3, #25
 8006db6:	f003 0303 	and.w	r3, r3, #3
 8006dba:	3301      	adds	r3, #1
 8006dbc:	005b      	lsls	r3, r3, #1
 8006dbe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006dc0:	697a      	ldr	r2, [r7, #20]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dc8:	613b      	str	r3, [r7, #16]
 8006dca:	e001      	b.n	8006dd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006dd0:	693b      	ldr	r3, [r7, #16]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	371c      	adds	r7, #28
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	40021000 	.word	0x40021000
 8006de4:	00f42400 	.word	0x00f42400

08006de8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006de8:	b480      	push	{r7}
 8006dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006dec:	4b03      	ldr	r3, [pc, #12]	; (8006dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8006dee:	681b      	ldr	r3, [r3, #0]
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	200026d4 	.word	0x200026d4

08006e00 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b087      	sub	sp, #28
 8006e04:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006e06:	4b1e      	ldr	r3, [pc, #120]	; (8006e80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	f003 0303 	and.w	r3, r3, #3
 8006e0e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006e10:	4b1b      	ldr	r3, [pc, #108]	; (8006e80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	091b      	lsrs	r3, r3, #4
 8006e16:	f003 030f 	and.w	r3, r3, #15
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	2b03      	cmp	r3, #3
 8006e22:	d10c      	bne.n	8006e3e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e24:	4a17      	ldr	r2, [pc, #92]	; (8006e84 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e2c:	4a14      	ldr	r2, [pc, #80]	; (8006e80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e2e:	68d2      	ldr	r2, [r2, #12]
 8006e30:	0a12      	lsrs	r2, r2, #8
 8006e32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006e36:	fb02 f303 	mul.w	r3, r2, r3
 8006e3a:	617b      	str	r3, [r7, #20]
    break;
 8006e3c:	e00c      	b.n	8006e58 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e3e:	4a11      	ldr	r2, [pc, #68]	; (8006e84 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e46:	4a0e      	ldr	r2, [pc, #56]	; (8006e80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e48:	68d2      	ldr	r2, [r2, #12]
 8006e4a:	0a12      	lsrs	r2, r2, #8
 8006e4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006e50:	fb02 f303 	mul.w	r3, r2, r3
 8006e54:	617b      	str	r3, [r7, #20]
    break;
 8006e56:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006e58:	4b09      	ldr	r3, [pc, #36]	; (8006e80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	0e5b      	lsrs	r3, r3, #25
 8006e5e:	f003 0303 	and.w	r3, r3, #3
 8006e62:	3301      	adds	r3, #1
 8006e64:	005b      	lsls	r3, r3, #1
 8006e66:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006e68:	697a      	ldr	r2, [r7, #20]
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e70:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006e72:	687b      	ldr	r3, [r7, #4]
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	371c      	adds	r7, #28
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr
 8006e80:	40021000 	.word	0x40021000
 8006e84:	00f42400 	.word	0x00f42400

08006e88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e90:	2300      	movs	r3, #0
 8006e92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e94:	2300      	movs	r3, #0
 8006e96:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 8098 	beq.w	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006eaa:	4b43      	ldr	r3, [pc, #268]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d10d      	bne.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006eb6:	4b40      	ldr	r3, [pc, #256]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eba:	4a3f      	ldr	r2, [pc, #252]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ec0:	6593      	str	r3, [r2, #88]	; 0x58
 8006ec2:	4b3d      	ldr	r3, [pc, #244]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eca:	60bb      	str	r3, [r7, #8]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ed2:	4b3a      	ldr	r3, [pc, #232]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a39      	ldr	r2, [pc, #228]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006edc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ede:	f7fa ff81 	bl	8001de4 <HAL_GetTick>
 8006ee2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ee4:	e009      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ee6:	f7fa ff7d 	bl	8001de4 <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d902      	bls.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	74fb      	strb	r3, [r7, #19]
        break;
 8006ef8:	e005      	b.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006efa:	4b30      	ldr	r3, [pc, #192]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d0ef      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006f06:	7cfb      	ldrb	r3, [r7, #19]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d159      	bne.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006f0c:	4b2a      	ldr	r3, [pc, #168]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f16:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d01e      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f22:	697a      	ldr	r2, [r7, #20]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d019      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006f28:	4b23      	ldr	r3, [pc, #140]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f34:	4b20      	ldr	r3, [pc, #128]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f3a:	4a1f      	ldr	r2, [pc, #124]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f44:	4b1c      	ldr	r3, [pc, #112]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f4a:	4a1b      	ldr	r2, [pc, #108]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006f54:	4a18      	ldr	r2, [pc, #96]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d016      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f66:	f7fa ff3d 	bl	8001de4 <HAL_GetTick>
 8006f6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f6c:	e00b      	b.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f6e:	f7fa ff39 	bl	8001de4 <HAL_GetTick>
 8006f72:	4602      	mov	r2, r0
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d902      	bls.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006f80:	2303      	movs	r3, #3
 8006f82:	74fb      	strb	r3, [r7, #19]
            break;
 8006f84:	e006      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f86:	4b0c      	ldr	r3, [pc, #48]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f8c:	f003 0302 	and.w	r3, r3, #2
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d0ec      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006f94:	7cfb      	ldrb	r3, [r7, #19]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10b      	bne.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f9a:	4b07      	ldr	r3, [pc, #28]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fa8:	4903      	ldr	r1, [pc, #12]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006fb0:	e008      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006fb2:	7cfb      	ldrb	r3, [r7, #19]
 8006fb4:	74bb      	strb	r3, [r7, #18]
 8006fb6:	e005      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006fb8:	40021000 	.word	0x40021000
 8006fbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc0:	7cfb      	ldrb	r3, [r7, #19]
 8006fc2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006fc4:	7c7b      	ldrb	r3, [r7, #17]
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d105      	bne.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fca:	4ba7      	ldr	r3, [pc, #668]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fce:	4aa6      	ldr	r2, [pc, #664]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fd4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00a      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006fe2:	4ba1      	ldr	r3, [pc, #644]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fe8:	f023 0203 	bic.w	r2, r3, #3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	499d      	ldr	r1, [pc, #628]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0302 	and.w	r3, r3, #2
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00a      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007004:	4b98      	ldr	r3, [pc, #608]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800700a:	f023 020c 	bic.w	r2, r3, #12
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	4995      	ldr	r1, [pc, #596]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007014:	4313      	orrs	r3, r2
 8007016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0304 	and.w	r3, r3, #4
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00a      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007026:	4b90      	ldr	r3, [pc, #576]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800702c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	498c      	ldr	r1, [pc, #560]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007036:	4313      	orrs	r3, r2
 8007038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0308 	and.w	r3, r3, #8
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00a      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007048:	4b87      	ldr	r3, [pc, #540]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800704a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800704e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	4984      	ldr	r1, [pc, #528]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007058:	4313      	orrs	r3, r2
 800705a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0310 	and.w	r3, r3, #16
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00a      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800706a:	4b7f      	ldr	r3, [pc, #508]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800706c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007070:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	695b      	ldr	r3, [r3, #20]
 8007078:	497b      	ldr	r1, [pc, #492]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800707a:	4313      	orrs	r3, r2
 800707c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0320 	and.w	r3, r3, #32
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00a      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800708c:	4b76      	ldr	r3, [pc, #472]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800708e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007092:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	4973      	ldr	r1, [pc, #460]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800709c:	4313      	orrs	r3, r2
 800709e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00a      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80070ae:	4b6e      	ldr	r3, [pc, #440]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	69db      	ldr	r3, [r3, #28]
 80070bc:	496a      	ldr	r1, [pc, #424]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070be:	4313      	orrs	r3, r2
 80070c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d00a      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80070d0:	4b65      	ldr	r3, [pc, #404]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a1b      	ldr	r3, [r3, #32]
 80070de:	4962      	ldr	r1, [pc, #392]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070e0:	4313      	orrs	r3, r2
 80070e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00a      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80070f2:	4b5d      	ldr	r3, [pc, #372]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007100:	4959      	ldr	r1, [pc, #356]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007102:	4313      	orrs	r3, r2
 8007104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00a      	beq.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007114:	4b54      	ldr	r3, [pc, #336]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007116:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800711a:	f023 0203 	bic.w	r2, r3, #3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007122:	4951      	ldr	r1, [pc, #324]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007124:	4313      	orrs	r3, r2
 8007126:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00a      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007136:	4b4c      	ldr	r3, [pc, #304]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800713c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007144:	4948      	ldr	r1, [pc, #288]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007146:	4313      	orrs	r3, r2
 8007148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007154:	2b00      	cmp	r3, #0
 8007156:	d015      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007158:	4b43      	ldr	r3, [pc, #268]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800715a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800715e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007166:	4940      	ldr	r1, [pc, #256]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007168:	4313      	orrs	r3, r2
 800716a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007176:	d105      	bne.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007178:	4b3b      	ldr	r3, [pc, #236]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	4a3a      	ldr	r2, [pc, #232]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800717e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007182:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800718c:	2b00      	cmp	r3, #0
 800718e:	d015      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007190:	4b35      	ldr	r3, [pc, #212]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007196:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800719e:	4932      	ldr	r1, [pc, #200]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071a0:	4313      	orrs	r3, r2
 80071a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071ae:	d105      	bne.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071b0:	4b2d      	ldr	r3, [pc, #180]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	4a2c      	ldr	r2, [pc, #176]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071ba:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d015      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80071c8:	4b27      	ldr	r3, [pc, #156]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d6:	4924      	ldr	r1, [pc, #144]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071d8:	4313      	orrs	r3, r2
 80071da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80071e6:	d105      	bne.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071e8:	4b1f      	ldr	r3, [pc, #124]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	4a1e      	ldr	r2, [pc, #120]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071f2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d015      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007200:	4b19      	ldr	r3, [pc, #100]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007206:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800720e:	4916      	ldr	r1, [pc, #88]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007210:	4313      	orrs	r3, r2
 8007212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800721a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800721e:	d105      	bne.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007220:	4b11      	ldr	r3, [pc, #68]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	4a10      	ldr	r2, [pc, #64]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007226:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800722a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007234:	2b00      	cmp	r3, #0
 8007236:	d019      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007238:	4b0b      	ldr	r3, [pc, #44]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800723a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800723e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007246:	4908      	ldr	r1, [pc, #32]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007248:	4313      	orrs	r3, r2
 800724a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007252:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007256:	d109      	bne.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007258:	4b03      	ldr	r3, [pc, #12]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	4a02      	ldr	r2, [pc, #8]	; (8007268 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800725e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007262:	60d3      	str	r3, [r2, #12]
 8007264:	e002      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007266:	bf00      	nop
 8007268:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007274:	2b00      	cmp	r3, #0
 8007276:	d015      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007278:	4b29      	ldr	r3, [pc, #164]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800727a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800727e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007286:	4926      	ldr	r1, [pc, #152]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007288:	4313      	orrs	r3, r2
 800728a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007292:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007296:	d105      	bne.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007298:	4b21      	ldr	r3, [pc, #132]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	4a20      	ldr	r2, [pc, #128]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800729e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072a2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d015      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80072b0:	4b1b      	ldr	r3, [pc, #108]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072b6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072be:	4918      	ldr	r1, [pc, #96]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072c0:	4313      	orrs	r3, r2
 80072c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072ce:	d105      	bne.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80072d0:	4b13      	ldr	r3, [pc, #76]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	4a12      	ldr	r2, [pc, #72]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072da:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d015      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80072e8:	4b0d      	ldr	r3, [pc, #52]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072f6:	490a      	ldr	r1, [pc, #40]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072f8:	4313      	orrs	r3, r2
 80072fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007302:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007306:	d105      	bne.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007308:	4b05      	ldr	r3, [pc, #20]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	4a04      	ldr	r2, [pc, #16]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800730e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007312:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007314:	7cbb      	ldrb	r3, [r7, #18]
}
 8007316:	4618      	mov	r0, r3
 8007318:	3718      	adds	r7, #24
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	40021000 	.word	0x40021000

08007324 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e09d      	b.n	8007472 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733a:	2b00      	cmp	r3, #0
 800733c:	d108      	bne.n	8007350 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007346:	d009      	beq.n	800735c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	61da      	str	r2, [r3, #28]
 800734e:	e005      	b.n	800735c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b00      	cmp	r3, #0
 800736c:	d106      	bne.n	800737c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f7fa faba 	bl	80018f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2202      	movs	r2, #2
 8007380:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007392:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800739c:	d902      	bls.n	80073a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800739e:	2300      	movs	r3, #0
 80073a0:	60fb      	str	r3, [r7, #12]
 80073a2:	e002      	b.n	80073aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80073a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80073b2:	d007      	beq.n	80073c4 <HAL_SPI_Init+0xa0>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073bc:	d002      	beq.n	80073c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80073d4:	431a      	orrs	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	f003 0302 	and.w	r3, r3, #2
 80073de:	431a      	orrs	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	695b      	ldr	r3, [r3, #20]
 80073e4:	f003 0301 	and.w	r3, r3, #1
 80073e8:	431a      	orrs	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073f2:	431a      	orrs	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	69db      	ldr	r3, [r3, #28]
 80073f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073fc:	431a      	orrs	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007406:	ea42 0103 	orr.w	r1, r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800740e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	430a      	orrs	r2, r1
 8007418:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	0c1b      	lsrs	r3, r3, #16
 8007420:	f003 0204 	and.w	r2, r3, #4
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007428:	f003 0310 	and.w	r3, r3, #16
 800742c:	431a      	orrs	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007432:	f003 0308 	and.w	r3, r3, #8
 8007436:	431a      	orrs	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007440:	ea42 0103 	orr.w	r1, r2, r3
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	430a      	orrs	r2, r1
 8007450:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	69da      	ldr	r2, [r3, #28]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007460:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b088      	sub	sp, #32
 800747e:	af00      	add	r7, sp, #0
 8007480:	60f8      	str	r0, [r7, #12]
 8007482:	60b9      	str	r1, [r7, #8]
 8007484:	603b      	str	r3, [r7, #0]
 8007486:	4613      	mov	r3, r2
 8007488:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800748a:	2300      	movs	r3, #0
 800748c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007494:	2b01      	cmp	r3, #1
 8007496:	d101      	bne.n	800749c <HAL_SPI_Transmit+0x22>
 8007498:	2302      	movs	r3, #2
 800749a:	e158      	b.n	800774e <HAL_SPI_Transmit+0x2d4>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074a4:	f7fa fc9e 	bl	8001de4 <HAL_GetTick>
 80074a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80074aa:	88fb      	ldrh	r3, [r7, #6]
 80074ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d002      	beq.n	80074c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80074ba:	2302      	movs	r3, #2
 80074bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074be:	e13d      	b.n	800773c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d002      	beq.n	80074cc <HAL_SPI_Transmit+0x52>
 80074c6:	88fb      	ldrh	r3, [r7, #6]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d102      	bne.n	80074d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074d0:	e134      	b.n	800773c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2203      	movs	r2, #3
 80074d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	88fa      	ldrh	r2, [r7, #6]
 80074ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	88fa      	ldrh	r2, [r7, #6]
 80074f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800751c:	d10f      	bne.n	800753e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800752c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800753c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007548:	2b40      	cmp	r3, #64	; 0x40
 800754a:	d007      	beq.n	800755c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800755a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007564:	d94b      	bls.n	80075fe <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d002      	beq.n	8007574 <HAL_SPI_Transmit+0xfa>
 800756e:	8afb      	ldrh	r3, [r7, #22]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d13e      	bne.n	80075f2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007578:	881a      	ldrh	r2, [r3, #0]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007584:	1c9a      	adds	r2, r3, #2
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800758e:	b29b      	uxth	r3, r3
 8007590:	3b01      	subs	r3, #1
 8007592:	b29a      	uxth	r2, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007598:	e02b      	b.n	80075f2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f003 0302 	and.w	r3, r3, #2
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d112      	bne.n	80075ce <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ac:	881a      	ldrh	r2, [r3, #0]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b8:	1c9a      	adds	r2, r3, #2
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	3b01      	subs	r3, #1
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80075cc:	e011      	b.n	80075f2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075ce:	f7fa fc09 	bl	8001de4 <HAL_GetTick>
 80075d2:	4602      	mov	r2, r0
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	1ad3      	subs	r3, r2, r3
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d803      	bhi.n	80075e6 <HAL_SPI_Transmit+0x16c>
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075e4:	d102      	bne.n	80075ec <HAL_SPI_Transmit+0x172>
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d102      	bne.n	80075f2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80075ec:	2303      	movs	r3, #3
 80075ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80075f0:	e0a4      	b.n	800773c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1ce      	bne.n	800759a <HAL_SPI_Transmit+0x120>
 80075fc:	e07c      	b.n	80076f8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d002      	beq.n	800760c <HAL_SPI_Transmit+0x192>
 8007606:	8afb      	ldrh	r3, [r7, #22]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d170      	bne.n	80076ee <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007610:	b29b      	uxth	r3, r3
 8007612:	2b01      	cmp	r3, #1
 8007614:	d912      	bls.n	800763c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761a:	881a      	ldrh	r2, [r3, #0]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007626:	1c9a      	adds	r2, r3, #2
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007630:	b29b      	uxth	r3, r3
 8007632:	3b02      	subs	r3, #2
 8007634:	b29a      	uxth	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	87da      	strh	r2, [r3, #62]	; 0x3e
 800763a:	e058      	b.n	80076ee <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	330c      	adds	r3, #12
 8007646:	7812      	ldrb	r2, [r2, #0]
 8007648:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764e:	1c5a      	adds	r2, r3, #1
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007658:	b29b      	uxth	r3, r3
 800765a:	3b01      	subs	r3, #1
 800765c:	b29a      	uxth	r2, r3
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007662:	e044      	b.n	80076ee <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f003 0302 	and.w	r3, r3, #2
 800766e:	2b02      	cmp	r3, #2
 8007670:	d12b      	bne.n	80076ca <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007676:	b29b      	uxth	r3, r3
 8007678:	2b01      	cmp	r3, #1
 800767a:	d912      	bls.n	80076a2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007680:	881a      	ldrh	r2, [r3, #0]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768c:	1c9a      	adds	r2, r3, #2
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007696:	b29b      	uxth	r3, r3
 8007698:	3b02      	subs	r3, #2
 800769a:	b29a      	uxth	r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80076a0:	e025      	b.n	80076ee <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	330c      	adds	r3, #12
 80076ac:	7812      	ldrb	r2, [r2, #0]
 80076ae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b4:	1c5a      	adds	r2, r3, #1
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076be:	b29b      	uxth	r3, r3
 80076c0:	3b01      	subs	r3, #1
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80076c8:	e011      	b.n	80076ee <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076ca:	f7fa fb8b 	bl	8001de4 <HAL_GetTick>
 80076ce:	4602      	mov	r2, r0
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	1ad3      	subs	r3, r2, r3
 80076d4:	683a      	ldr	r2, [r7, #0]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d803      	bhi.n	80076e2 <HAL_SPI_Transmit+0x268>
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076e0:	d102      	bne.n	80076e8 <HAL_SPI_Transmit+0x26e>
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d102      	bne.n	80076ee <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80076e8:	2303      	movs	r3, #3
 80076ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80076ec:	e026      	b.n	800773c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1b5      	bne.n	8007664 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076f8:	69ba      	ldr	r2, [r7, #24]
 80076fa:	6839      	ldr	r1, [r7, #0]
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 fd47 	bl	8008190 <SPI_EndRxTxTransaction>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d002      	beq.n	800770e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2220      	movs	r2, #32
 800770c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10a      	bne.n	800772c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007716:	2300      	movs	r3, #0
 8007718:	613b      	str	r3, [r7, #16]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	613b      	str	r3, [r7, #16]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	613b      	str	r3, [r7, #16]
 800772a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007730:	2b00      	cmp	r3, #0
 8007732:	d002      	beq.n	800773a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	77fb      	strb	r3, [r7, #31]
 8007738:	e000      	b.n	800773c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800773a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800774c:	7ffb      	ldrb	r3, [r7, #31]
}
 800774e:	4618      	mov	r0, r3
 8007750:	3720      	adds	r7, #32
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
	...

08007758 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
 8007764:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007766:	2300      	movs	r3, #0
 8007768:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007770:	2b01      	cmp	r3, #1
 8007772:	d101      	bne.n	8007778 <HAL_SPI_TransmitReceive_DMA+0x20>
 8007774:	2302      	movs	r3, #2
 8007776:	e16c      	b.n	8007a52 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007786:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800778e:	7dbb      	ldrb	r3, [r7, #22]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d00d      	beq.n	80077b0 <HAL_SPI_TransmitReceive_DMA+0x58>
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800779a:	d106      	bne.n	80077aa <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d102      	bne.n	80077aa <HAL_SPI_TransmitReceive_DMA+0x52>
 80077a4:	7dbb      	ldrb	r3, [r7, #22]
 80077a6:	2b04      	cmp	r3, #4
 80077a8:	d002      	beq.n	80077b0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80077aa:	2302      	movs	r3, #2
 80077ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80077ae:	e14b      	b.n	8007a48 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d005      	beq.n	80077c2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d002      	beq.n	80077c2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80077bc:	887b      	ldrh	r3, [r7, #2]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d102      	bne.n	80077c8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80077c6:	e13f      	b.n	8007a48 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b04      	cmp	r3, #4
 80077d2:	d003      	beq.n	80077dc <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2205      	movs	r2, #5
 80077d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	887a      	ldrh	r2, [r7, #2]
 80077ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	887a      	ldrh	r2, [r7, #2]
 80077f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	887a      	ldrh	r2, [r7, #2]
 80077fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	887a      	ldrh	r2, [r7, #2]
 8007806:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8007824:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800782e:	d908      	bls.n	8007842 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800783e:	605a      	str	r2, [r3, #4]
 8007840:	e06f      	b.n	8007922 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	685a      	ldr	r2, [r3, #4]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007850:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007856:	699b      	ldr	r3, [r3, #24]
 8007858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800785c:	d126      	bne.n	80078ac <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10f      	bne.n	800788a <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	685a      	ldr	r2, [r3, #4]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007878:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800787e:	b29b      	uxth	r3, r3
 8007880:	085b      	lsrs	r3, r3, #1
 8007882:	b29a      	uxth	r2, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007888:	e010      	b.n	80078ac <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	685a      	ldr	r2, [r3, #4]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007898:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800789e:	b29b      	uxth	r3, r3
 80078a0:	085b      	lsrs	r3, r3, #1
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	3301      	adds	r3, #1
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078b0:	699b      	ldr	r3, [r3, #24]
 80078b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078b6:	d134      	bne.n	8007922 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	685a      	ldr	r2, [r3, #4]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80078c6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d111      	bne.n	80078fc <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	685a      	ldr	r2, [r3, #4]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078e6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	085b      	lsrs	r3, r3, #1
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80078fa:	e012      	b.n	8007922 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	685a      	ldr	r2, [r3, #4]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800790a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007912:	b29b      	uxth	r3, r3
 8007914:	085b      	lsrs	r3, r3, #1
 8007916:	b29b      	uxth	r3, r3
 8007918:	3301      	adds	r3, #1
 800791a:	b29a      	uxth	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b04      	cmp	r3, #4
 800792c:	d108      	bne.n	8007940 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007932:	4a4a      	ldr	r2, [pc, #296]	; (8007a5c <HAL_SPI_TransmitReceive_DMA+0x304>)
 8007934:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800793a:	4a49      	ldr	r2, [pc, #292]	; (8007a60 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800793c:	62da      	str	r2, [r3, #44]	; 0x2c
 800793e:	e007      	b.n	8007950 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007944:	4a47      	ldr	r2, [pc, #284]	; (8007a64 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8007946:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800794c:	4a46      	ldr	r2, [pc, #280]	; (8007a68 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800794e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007954:	4a45      	ldr	r2, [pc, #276]	; (8007a6c <HAL_SPI_TransmitReceive_DMA+0x314>)
 8007956:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800795c:	2200      	movs	r2, #0
 800795e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	330c      	adds	r3, #12
 800796a:	4619      	mov	r1, r3
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007970:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007978:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800797a:	f7fc fb63 	bl	8004044 <HAL_DMA_Start_IT>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00c      	beq.n	800799e <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007988:	f043 0210 	orr.w	r2, r3, #16
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800799c:	e054      	b.n	8007a48 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	685a      	ldr	r2, [r3, #4]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f042 0201 	orr.w	r2, r2, #1
 80079ac:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b2:	2200      	movs	r2, #0
 80079b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ba:	2200      	movs	r2, #0
 80079bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079c2:	2200      	movs	r2, #0
 80079c4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ca:	2200      	movs	r2, #0
 80079cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d6:	4619      	mov	r1, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	330c      	adds	r3, #12
 80079de:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079e4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80079e6:	f7fc fb2d 	bl	8004044 <HAL_DMA_Start_IT>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00c      	beq.n	8007a0a <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079f4:	f043 0210 	orr.w	r2, r3, #16
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8007a08:	e01e      	b.n	8007a48 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a14:	2b40      	cmp	r3, #64	; 0x40
 8007a16:	d007      	beq.n	8007a28 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a26:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	685a      	ldr	r2, [r3, #4]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f042 0220 	orr.w	r2, r2, #32
 8007a36:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	685a      	ldr	r2, [r3, #4]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f042 0202 	orr.w	r2, r2, #2
 8007a46:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3718      	adds	r7, #24
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	08007e01 	.word	0x08007e01
 8007a60:	08007cc9 	.word	0x08007cc9
 8007a64:	08007e1d 	.word	0x08007e1d
 8007a68:	08007d71 	.word	0x08007d71
 8007a6c:	08007e39 	.word	0x08007e39

08007a70 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b088      	sub	sp, #32
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	099b      	lsrs	r3, r3, #6
 8007a8c:	f003 0301 	and.w	r3, r3, #1
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10f      	bne.n	8007ab4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00a      	beq.n	8007ab4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	099b      	lsrs	r3, r3, #6
 8007aa2:	f003 0301 	and.w	r3, r3, #1
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d004      	beq.n	8007ab4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	4798      	blx	r3
    return;
 8007ab2:	e0d7      	b.n	8007c64 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	085b      	lsrs	r3, r3, #1
 8007ab8:	f003 0301 	and.w	r3, r3, #1
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00a      	beq.n	8007ad6 <HAL_SPI_IRQHandler+0x66>
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	09db      	lsrs	r3, r3, #7
 8007ac4:	f003 0301 	and.w	r3, r3, #1
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d004      	beq.n	8007ad6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	4798      	blx	r3
    return;
 8007ad4:	e0c6      	b.n	8007c64 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	095b      	lsrs	r3, r3, #5
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10c      	bne.n	8007afc <HAL_SPI_IRQHandler+0x8c>
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	099b      	lsrs	r3, r3, #6
 8007ae6:	f003 0301 	and.w	r3, r3, #1
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d106      	bne.n	8007afc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	0a1b      	lsrs	r3, r3, #8
 8007af2:	f003 0301 	and.w	r3, r3, #1
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f000 80b4 	beq.w	8007c64 <HAL_SPI_IRQHandler+0x1f4>
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	095b      	lsrs	r3, r3, #5
 8007b00:	f003 0301 	and.w	r3, r3, #1
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f000 80ad 	beq.w	8007c64 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	099b      	lsrs	r3, r3, #6
 8007b0e:	f003 0301 	and.w	r3, r3, #1
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d023      	beq.n	8007b5e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	2b03      	cmp	r3, #3
 8007b20:	d011      	beq.n	8007b46 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b26:	f043 0204 	orr.w	r2, r3, #4
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b2e:	2300      	movs	r3, #0
 8007b30:	617b      	str	r3, [r7, #20]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	617b      	str	r3, [r7, #20]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	617b      	str	r3, [r7, #20]
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	e00b      	b.n	8007b5e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b46:	2300      	movs	r3, #0
 8007b48:	613b      	str	r3, [r7, #16]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	613b      	str	r3, [r7, #16]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	613b      	str	r3, [r7, #16]
 8007b5a:	693b      	ldr	r3, [r7, #16]
        return;
 8007b5c:	e082      	b.n	8007c64 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	095b      	lsrs	r3, r3, #5
 8007b62:	f003 0301 	and.w	r3, r3, #1
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d014      	beq.n	8007b94 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b6e:	f043 0201 	orr.w	r2, r3, #1
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007b76:	2300      	movs	r3, #0
 8007b78:	60fb      	str	r3, [r7, #12]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	60fb      	str	r3, [r7, #12]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b90:	601a      	str	r2, [r3, #0]
 8007b92:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	0a1b      	lsrs	r3, r3, #8
 8007b98:	f003 0301 	and.w	r3, r3, #1
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00c      	beq.n	8007bba <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ba4:	f043 0208 	orr.w	r2, r3, #8
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007bac:	2300      	movs	r3, #0
 8007bae:	60bb      	str	r3, [r7, #8]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	60bb      	str	r3, [r7, #8]
 8007bb8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d04f      	beq.n	8007c62 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	685a      	ldr	r2, [r3, #4]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007bd0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	f003 0302 	and.w	r3, r3, #2
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d104      	bne.n	8007bee <HAL_SPI_IRQHandler+0x17e>
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	f003 0301 	and.w	r3, r3, #1
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d034      	beq.n	8007c58 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685a      	ldr	r2, [r3, #4]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f022 0203 	bic.w	r2, r2, #3
 8007bfc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d011      	beq.n	8007c2a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c0a:	4a18      	ldr	r2, [pc, #96]	; (8007c6c <HAL_SPI_IRQHandler+0x1fc>)
 8007c0c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7fc faea 	bl	80041ec <HAL_DMA_Abort_IT>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d005      	beq.n	8007c2a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d016      	beq.n	8007c60 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c36:	4a0d      	ldr	r2, [pc, #52]	; (8007c6c <HAL_SPI_IRQHandler+0x1fc>)
 8007c38:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7fc fad4 	bl	80041ec <HAL_DMA_Abort_IT>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00a      	beq.n	8007c60 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007c56:	e003      	b.n	8007c60 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 f81d 	bl	8007c98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007c5e:	e000      	b.n	8007c62 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007c60:	bf00      	nop
    return;
 8007c62:	bf00      	nop
  }
}
 8007c64:	3720      	adds	r7, #32
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	08007e79 	.word	0x08007e79

08007c70 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007ca0:	bf00      	nop
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007cba:	b2db      	uxtb	r3, r3
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd4:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cd6:	f7fa f885 	bl	8001de4 <HAL_GetTick>
 8007cda:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 0320 	and.w	r3, r3, #32
 8007ce6:	2b20      	cmp	r3, #32
 8007ce8:	d03c      	beq.n	8007d64 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	685a      	ldr	r2, [r3, #4]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f022 0220 	bic.w	r2, r2, #32
 8007cf8:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10d      	bne.n	8007d1e <SPI_DMAReceiveCplt+0x56>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d0a:	d108      	bne.n	8007d1e <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	685a      	ldr	r2, [r3, #4]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f022 0203 	bic.w	r2, r2, #3
 8007d1a:	605a      	str	r2, [r3, #4]
 8007d1c:	e007      	b.n	8007d2e <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	685a      	ldr	r2, [r3, #4]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f022 0201 	bic.w	r2, r2, #1
 8007d2c:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	2164      	movs	r1, #100	; 0x64
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f000 f9d4 	bl	80080e0 <SPI_EndRxTransaction>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d002      	beq.n	8007d44 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2220      	movs	r2, #32
 8007d42:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d003      	beq.n	8007d64 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f7ff ff9b 	bl	8007c98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007d62:	e002      	b.n	8007d6a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f7f9 fb73 	bl	8001450 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d7c:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d7e:	f7fa f831 	bl	8001de4 <HAL_GetTick>
 8007d82:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 0320 	and.w	r3, r3, #32
 8007d8e:	2b20      	cmp	r3, #32
 8007d90:	d030      	beq.n	8007df4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	685a      	ldr	r2, [r3, #4]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f022 0220 	bic.w	r2, r2, #32
 8007da0:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	2164      	movs	r1, #100	; 0x64
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f000 f9f2 	bl	8008190 <SPI_EndRxTxTransaction>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d005      	beq.n	8007dbe <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007db6:	f043 0220 	orr.w	r2, r3, #32
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	685a      	ldr	r2, [r3, #4]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f022 0203 	bic.w	r2, r2, #3
 8007dcc:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d003      	beq.n	8007df4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f7ff ff53 	bl	8007c98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007df2:	e002      	b.n	8007dfa <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f7f9 fb3b 	bl	8001470 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f7ff ff2e 	bl	8007c70 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e14:	bf00      	nop
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e28:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	f7ff ff2a 	bl	8007c84 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e30:	bf00      	nop
 8007e32:	3710      	adds	r7, #16
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e44:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	685a      	ldr	r2, [r3, #4]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f022 0203 	bic.w	r2, r2, #3
 8007e54:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e5a:	f043 0210 	orr.w	r2, r3, #16
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	f7ff ff14 	bl	8007c98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e70:	bf00      	nop
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e84:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2200      	movs	r2, #0
 8007e92:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f7ff feff 	bl	8007c98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e9a:	bf00      	nop
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
	...

08007ea4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b088      	sub	sp, #32
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	603b      	str	r3, [r7, #0]
 8007eb0:	4613      	mov	r3, r2
 8007eb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007eb4:	f7f9 ff96 	bl	8001de4 <HAL_GetTick>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ebc:	1a9b      	subs	r3, r3, r2
 8007ebe:	683a      	ldr	r2, [r7, #0]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007ec4:	f7f9 ff8e 	bl	8001de4 <HAL_GetTick>
 8007ec8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007eca:	4b39      	ldr	r3, [pc, #228]	; (8007fb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	015b      	lsls	r3, r3, #5
 8007ed0:	0d1b      	lsrs	r3, r3, #20
 8007ed2:	69fa      	ldr	r2, [r7, #28]
 8007ed4:	fb02 f303 	mul.w	r3, r2, r3
 8007ed8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007eda:	e054      	b.n	8007f86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ee2:	d050      	beq.n	8007f86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ee4:	f7f9 ff7e 	bl	8001de4 <HAL_GetTick>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	69fa      	ldr	r2, [r7, #28]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d902      	bls.n	8007efa <SPI_WaitFlagStateUntilTimeout+0x56>
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d13d      	bne.n	8007f76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	685a      	ldr	r2, [r3, #4]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f12:	d111      	bne.n	8007f38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f1c:	d004      	beq.n	8007f28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f26:	d107      	bne.n	8007f38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f40:	d10f      	bne.n	8007f62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f50:	601a      	str	r2, [r3, #0]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2201      	movs	r2, #1
 8007f66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007f72:	2303      	movs	r3, #3
 8007f74:	e017      	b.n	8007fa6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d101      	bne.n	8007f80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	3b01      	subs	r3, #1
 8007f84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	689a      	ldr	r2, [r3, #8]
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	4013      	ands	r3, r2
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	bf0c      	ite	eq
 8007f96:	2301      	moveq	r3, #1
 8007f98:	2300      	movne	r3, #0
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	79fb      	ldrb	r3, [r7, #7]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d19b      	bne.n	8007edc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3720      	adds	r7, #32
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	200026d4 	.word	0x200026d4

08007fb4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b08a      	sub	sp, #40	; 0x28
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
 8007fc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007fc6:	f7f9 ff0d 	bl	8001de4 <HAL_GetTick>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fce:	1a9b      	subs	r3, r3, r2
 8007fd0:	683a      	ldr	r2, [r7, #0]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007fd6:	f7f9 ff05 	bl	8001de4 <HAL_GetTick>
 8007fda:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	330c      	adds	r3, #12
 8007fe2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007fe4:	4b3d      	ldr	r3, [pc, #244]	; (80080dc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	4613      	mov	r3, r2
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	4413      	add	r3, r2
 8007fee:	00da      	lsls	r2, r3, #3
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	0d1b      	lsrs	r3, r3, #20
 8007ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ff6:	fb02 f303 	mul.w	r3, r2, r3
 8007ffa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007ffc:	e060      	b.n	80080c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008004:	d107      	bne.n	8008016 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d104      	bne.n	8008016 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	b2db      	uxtb	r3, r3
 8008012:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008014:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800801c:	d050      	beq.n	80080c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800801e:	f7f9 fee1 	bl	8001de4 <HAL_GetTick>
 8008022:	4602      	mov	r2, r0
 8008024:	6a3b      	ldr	r3, [r7, #32]
 8008026:	1ad3      	subs	r3, r2, r3
 8008028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800802a:	429a      	cmp	r2, r3
 800802c:	d902      	bls.n	8008034 <SPI_WaitFifoStateUntilTimeout+0x80>
 800802e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008030:	2b00      	cmp	r3, #0
 8008032:	d13d      	bne.n	80080b0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	685a      	ldr	r2, [r3, #4]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008042:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800804c:	d111      	bne.n	8008072 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008056:	d004      	beq.n	8008062 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008060:	d107      	bne.n	8008072 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008070:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800807a:	d10f      	bne.n	800809c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800808a:	601a      	str	r2, [r3, #0]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800809a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e010      	b.n	80080d2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d101      	bne.n	80080ba <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80080b6:	2300      	movs	r3, #0
 80080b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	3b01      	subs	r3, #1
 80080be:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	689a      	ldr	r2, [r3, #8]
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	4013      	ands	r3, r2
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d196      	bne.n	8007ffe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3728      	adds	r7, #40	; 0x28
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	200026d4 	.word	0x200026d4

080080e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af02      	add	r7, sp, #8
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080f4:	d111      	bne.n	800811a <SPI_EndRxTransaction+0x3a>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080fe:	d004      	beq.n	800810a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008108:	d107      	bne.n	800811a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008118:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	9300      	str	r3, [sp, #0]
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	2200      	movs	r2, #0
 8008122:	2180      	movs	r1, #128	; 0x80
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f7ff febd 	bl	8007ea4 <SPI_WaitFlagStateUntilTimeout>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d007      	beq.n	8008140 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008134:	f043 0220 	orr.w	r2, r3, #32
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800813c:	2303      	movs	r3, #3
 800813e:	e023      	b.n	8008188 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008148:	d11d      	bne.n	8008186 <SPI_EndRxTransaction+0xa6>
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008152:	d004      	beq.n	800815e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800815c:	d113      	bne.n	8008186 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	2200      	movs	r2, #0
 8008166:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f7ff ff22 	bl	8007fb4 <SPI_WaitFifoStateUntilTimeout>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d007      	beq.n	8008186 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800817a:	f043 0220 	orr.w	r2, r3, #32
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008182:	2303      	movs	r3, #3
 8008184:	e000      	b.n	8008188 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008186:	2300      	movs	r3, #0
}
 8008188:	4618      	mov	r0, r3
 800818a:	3710      	adds	r7, #16
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b086      	sub	sp, #24
 8008194:	af02      	add	r7, sp, #8
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f7ff ff03 	bl	8007fb4 <SPI_WaitFifoStateUntilTimeout>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d007      	beq.n	80081c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081b8:	f043 0220 	orr.w	r2, r3, #32
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80081c0:	2303      	movs	r3, #3
 80081c2:	e027      	b.n	8008214 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	2200      	movs	r2, #0
 80081cc:	2180      	movs	r1, #128	; 0x80
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f7ff fe68 	bl	8007ea4 <SPI_WaitFlagStateUntilTimeout>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d007      	beq.n	80081ea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081de:	f043 0220 	orr.w	r2, r3, #32
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80081e6:	2303      	movs	r3, #3
 80081e8:	e014      	b.n	8008214 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	9300      	str	r3, [sp, #0]
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80081f6:	68f8      	ldr	r0, [r7, #12]
 80081f8:	f7ff fedc 	bl	8007fb4 <SPI_WaitFifoStateUntilTimeout>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d007      	beq.n	8008212 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008206:	f043 0220 	orr.w	r2, r3, #32
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	e000      	b.n	8008214 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d101      	bne.n	800822e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	e049      	b.n	80082c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d106      	bne.n	8008248 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f7f9 fb9e 	bl	8001984 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2202      	movs	r2, #2
 800824c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	3304      	adds	r3, #4
 8008258:	4619      	mov	r1, r3
 800825a:	4610      	mov	r0, r2
 800825c:	f000 fbc6 	bl	80089ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
	...

080082cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b085      	sub	sp, #20
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d001      	beq.n	80082e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	e04c      	b.n	800837e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2202      	movs	r2, #2
 80082e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a26      	ldr	r2, [pc, #152]	; (800838c <HAL_TIM_Base_Start+0xc0>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d022      	beq.n	800833c <HAL_TIM_Base_Start+0x70>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082fe:	d01d      	beq.n	800833c <HAL_TIM_Base_Start+0x70>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a22      	ldr	r2, [pc, #136]	; (8008390 <HAL_TIM_Base_Start+0xc4>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d018      	beq.n	800833c <HAL_TIM_Base_Start+0x70>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a21      	ldr	r2, [pc, #132]	; (8008394 <HAL_TIM_Base_Start+0xc8>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d013      	beq.n	800833c <HAL_TIM_Base_Start+0x70>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a1f      	ldr	r2, [pc, #124]	; (8008398 <HAL_TIM_Base_Start+0xcc>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d00e      	beq.n	800833c <HAL_TIM_Base_Start+0x70>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a1e      	ldr	r2, [pc, #120]	; (800839c <HAL_TIM_Base_Start+0xd0>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d009      	beq.n	800833c <HAL_TIM_Base_Start+0x70>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a1c      	ldr	r2, [pc, #112]	; (80083a0 <HAL_TIM_Base_Start+0xd4>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d004      	beq.n	800833c <HAL_TIM_Base_Start+0x70>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a1b      	ldr	r2, [pc, #108]	; (80083a4 <HAL_TIM_Base_Start+0xd8>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d115      	bne.n	8008368 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	689a      	ldr	r2, [r3, #8]
 8008342:	4b19      	ldr	r3, [pc, #100]	; (80083a8 <HAL_TIM_Base_Start+0xdc>)
 8008344:	4013      	ands	r3, r2
 8008346:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2b06      	cmp	r3, #6
 800834c:	d015      	beq.n	800837a <HAL_TIM_Base_Start+0xae>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008354:	d011      	beq.n	800837a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f042 0201 	orr.w	r2, r2, #1
 8008364:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008366:	e008      	b.n	800837a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f042 0201 	orr.w	r2, r2, #1
 8008376:	601a      	str	r2, [r3, #0]
 8008378:	e000      	b.n	800837c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800837a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3714      	adds	r7, #20
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	40012c00 	.word	0x40012c00
 8008390:	40000400 	.word	0x40000400
 8008394:	40000800 	.word	0x40000800
 8008398:	40000c00 	.word	0x40000c00
 800839c:	40013400 	.word	0x40013400
 80083a0:	40014000 	.word	0x40014000
 80083a4:	40015000 	.word	0x40015000
 80083a8:	00010007 	.word	0x00010007

080083ac <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	6a1a      	ldr	r2, [r3, #32]
 80083ba:	f241 1311 	movw	r3, #4369	; 0x1111
 80083be:	4013      	ands	r3, r2
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d10f      	bne.n	80083e4 <HAL_TIM_Base_Stop+0x38>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	6a1a      	ldr	r2, [r3, #32]
 80083ca:	f244 4344 	movw	r3, #17476	; 0x4444
 80083ce:	4013      	ands	r3, r2
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d107      	bne.n	80083e4 <HAL_TIM_Base_Stop+0x38>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f022 0201 	bic.w	r2, r2, #1
 80083e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	370c      	adds	r7, #12
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr

080083fa <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b082      	sub	sp, #8
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d101      	bne.n	800840c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	e049      	b.n	80084a0 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008412:	b2db      	uxtb	r3, r3
 8008414:	2b00      	cmp	r3, #0
 8008416:	d106      	bne.n	8008426 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 f841 	bl	80084a8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2202      	movs	r2, #2
 800842a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	3304      	adds	r3, #4
 8008436:	4619      	mov	r1, r3
 8008438:	4610      	mov	r0, r2
 800843a:	f000 fad7 	bl	80089ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2201      	movs	r2, #1
 8008442:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2201      	movs	r2, #1
 800844a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2201      	movs	r2, #1
 8008452:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2201      	movs	r2, #1
 800845a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2201      	movs	r2, #1
 8008462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2201      	movs	r2, #1
 800846a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2201      	movs	r2, #1
 8008482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2201      	movs	r2, #1
 8008492:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2201      	movs	r2, #1
 800849a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800849e:	2300      	movs	r3, #0
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3708      	adds	r7, #8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80084b0:	bf00      	nop
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d109      	bne.n	80084e0 <HAL_TIM_OC_Start+0x24>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	bf14      	ite	ne
 80084d8:	2301      	movne	r3, #1
 80084da:	2300      	moveq	r3, #0
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	e03c      	b.n	800855a <HAL_TIM_OC_Start+0x9e>
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	2b04      	cmp	r3, #4
 80084e4:	d109      	bne.n	80084fa <HAL_TIM_OC_Start+0x3e>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	bf14      	ite	ne
 80084f2:	2301      	movne	r3, #1
 80084f4:	2300      	moveq	r3, #0
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	e02f      	b.n	800855a <HAL_TIM_OC_Start+0x9e>
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	2b08      	cmp	r3, #8
 80084fe:	d109      	bne.n	8008514 <HAL_TIM_OC_Start+0x58>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008506:	b2db      	uxtb	r3, r3
 8008508:	2b01      	cmp	r3, #1
 800850a:	bf14      	ite	ne
 800850c:	2301      	movne	r3, #1
 800850e:	2300      	moveq	r3, #0
 8008510:	b2db      	uxtb	r3, r3
 8008512:	e022      	b.n	800855a <HAL_TIM_OC_Start+0x9e>
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	2b0c      	cmp	r3, #12
 8008518:	d109      	bne.n	800852e <HAL_TIM_OC_Start+0x72>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2b01      	cmp	r3, #1
 8008524:	bf14      	ite	ne
 8008526:	2301      	movne	r3, #1
 8008528:	2300      	moveq	r3, #0
 800852a:	b2db      	uxtb	r3, r3
 800852c:	e015      	b.n	800855a <HAL_TIM_OC_Start+0x9e>
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	2b10      	cmp	r3, #16
 8008532:	d109      	bne.n	8008548 <HAL_TIM_OC_Start+0x8c>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800853a:	b2db      	uxtb	r3, r3
 800853c:	2b01      	cmp	r3, #1
 800853e:	bf14      	ite	ne
 8008540:	2301      	movne	r3, #1
 8008542:	2300      	moveq	r3, #0
 8008544:	b2db      	uxtb	r3, r3
 8008546:	e008      	b.n	800855a <HAL_TIM_OC_Start+0x9e>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800854e:	b2db      	uxtb	r3, r3
 8008550:	2b01      	cmp	r3, #1
 8008552:	bf14      	ite	ne
 8008554:	2301      	movne	r3, #1
 8008556:	2300      	moveq	r3, #0
 8008558:	b2db      	uxtb	r3, r3
 800855a:	2b00      	cmp	r3, #0
 800855c:	d001      	beq.n	8008562 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 800855e:	2301      	movs	r3, #1
 8008560:	e0a6      	b.n	80086b0 <HAL_TIM_OC_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d104      	bne.n	8008572 <HAL_TIM_OC_Start+0xb6>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2202      	movs	r2, #2
 800856c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008570:	e023      	b.n	80085ba <HAL_TIM_OC_Start+0xfe>
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	2b04      	cmp	r3, #4
 8008576:	d104      	bne.n	8008582 <HAL_TIM_OC_Start+0xc6>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2202      	movs	r2, #2
 800857c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008580:	e01b      	b.n	80085ba <HAL_TIM_OC_Start+0xfe>
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	2b08      	cmp	r3, #8
 8008586:	d104      	bne.n	8008592 <HAL_TIM_OC_Start+0xd6>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2202      	movs	r2, #2
 800858c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008590:	e013      	b.n	80085ba <HAL_TIM_OC_Start+0xfe>
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	2b0c      	cmp	r3, #12
 8008596:	d104      	bne.n	80085a2 <HAL_TIM_OC_Start+0xe6>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2202      	movs	r2, #2
 800859c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085a0:	e00b      	b.n	80085ba <HAL_TIM_OC_Start+0xfe>
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	2b10      	cmp	r3, #16
 80085a6:	d104      	bne.n	80085b2 <HAL_TIM_OC_Start+0xf6>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2202      	movs	r2, #2
 80085ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085b0:	e003      	b.n	80085ba <HAL_TIM_OC_Start+0xfe>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2202      	movs	r2, #2
 80085b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2201      	movs	r2, #1
 80085c0:	6839      	ldr	r1, [r7, #0]
 80085c2:	4618      	mov	r0, r3
 80085c4:	f000 fe80 	bl	80092c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a3a      	ldr	r2, [pc, #232]	; (80086b8 <HAL_TIM_OC_Start+0x1fc>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d018      	beq.n	8008604 <HAL_TIM_OC_Start+0x148>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a39      	ldr	r2, [pc, #228]	; (80086bc <HAL_TIM_OC_Start+0x200>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d013      	beq.n	8008604 <HAL_TIM_OC_Start+0x148>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a37      	ldr	r2, [pc, #220]	; (80086c0 <HAL_TIM_OC_Start+0x204>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d00e      	beq.n	8008604 <HAL_TIM_OC_Start+0x148>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a36      	ldr	r2, [pc, #216]	; (80086c4 <HAL_TIM_OC_Start+0x208>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d009      	beq.n	8008604 <HAL_TIM_OC_Start+0x148>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a34      	ldr	r2, [pc, #208]	; (80086c8 <HAL_TIM_OC_Start+0x20c>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d004      	beq.n	8008604 <HAL_TIM_OC_Start+0x148>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a33      	ldr	r2, [pc, #204]	; (80086cc <HAL_TIM_OC_Start+0x210>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d101      	bne.n	8008608 <HAL_TIM_OC_Start+0x14c>
 8008604:	2301      	movs	r3, #1
 8008606:	e000      	b.n	800860a <HAL_TIM_OC_Start+0x14e>
 8008608:	2300      	movs	r3, #0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d007      	beq.n	800861e <HAL_TIM_OC_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800861c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a25      	ldr	r2, [pc, #148]	; (80086b8 <HAL_TIM_OC_Start+0x1fc>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d022      	beq.n	800866e <HAL_TIM_OC_Start+0x1b2>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008630:	d01d      	beq.n	800866e <HAL_TIM_OC_Start+0x1b2>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a26      	ldr	r2, [pc, #152]	; (80086d0 <HAL_TIM_OC_Start+0x214>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d018      	beq.n	800866e <HAL_TIM_OC_Start+0x1b2>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a24      	ldr	r2, [pc, #144]	; (80086d4 <HAL_TIM_OC_Start+0x218>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d013      	beq.n	800866e <HAL_TIM_OC_Start+0x1b2>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a23      	ldr	r2, [pc, #140]	; (80086d8 <HAL_TIM_OC_Start+0x21c>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d00e      	beq.n	800866e <HAL_TIM_OC_Start+0x1b2>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a19      	ldr	r2, [pc, #100]	; (80086bc <HAL_TIM_OC_Start+0x200>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d009      	beq.n	800866e <HAL_TIM_OC_Start+0x1b2>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a18      	ldr	r2, [pc, #96]	; (80086c0 <HAL_TIM_OC_Start+0x204>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d004      	beq.n	800866e <HAL_TIM_OC_Start+0x1b2>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a18      	ldr	r2, [pc, #96]	; (80086cc <HAL_TIM_OC_Start+0x210>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d115      	bne.n	800869a <HAL_TIM_OC_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	689a      	ldr	r2, [r3, #8]
 8008674:	4b19      	ldr	r3, [pc, #100]	; (80086dc <HAL_TIM_OC_Start+0x220>)
 8008676:	4013      	ands	r3, r2
 8008678:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2b06      	cmp	r3, #6
 800867e:	d015      	beq.n	80086ac <HAL_TIM_OC_Start+0x1f0>
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008686:	d011      	beq.n	80086ac <HAL_TIM_OC_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f042 0201 	orr.w	r2, r2, #1
 8008696:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008698:	e008      	b.n	80086ac <HAL_TIM_OC_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f042 0201 	orr.w	r2, r2, #1
 80086a8:	601a      	str	r2, [r3, #0]
 80086aa:	e000      	b.n	80086ae <HAL_TIM_OC_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80086ae:	2300      	movs	r3, #0
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3710      	adds	r7, #16
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	40012c00 	.word	0x40012c00
 80086bc:	40013400 	.word	0x40013400
 80086c0:	40014000 	.word	0x40014000
 80086c4:	40014400 	.word	0x40014400
 80086c8:	40014800 	.word	0x40014800
 80086cc:	40015000 	.word	0x40015000
 80086d0:	40000400 	.word	0x40000400
 80086d4:	40000800 	.word	0x40000800
 80086d8:	40000c00 	.word	0x40000c00
 80086dc:	00010007 	.word	0x00010007

080086e0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b086      	sub	sp, #24
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d101      	bne.n	80086fe <HAL_TIM_OC_ConfigChannel+0x1e>
 80086fa:	2302      	movs	r3, #2
 80086fc:	e066      	b.n	80087cc <HAL_TIM_OC_ConfigChannel+0xec>
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2201      	movs	r2, #1
 8008702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2b14      	cmp	r3, #20
 800870a:	d857      	bhi.n	80087bc <HAL_TIM_OC_ConfigChannel+0xdc>
 800870c:	a201      	add	r2, pc, #4	; (adr r2, 8008714 <HAL_TIM_OC_ConfigChannel+0x34>)
 800870e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008712:	bf00      	nop
 8008714:	08008769 	.word	0x08008769
 8008718:	080087bd 	.word	0x080087bd
 800871c:	080087bd 	.word	0x080087bd
 8008720:	080087bd 	.word	0x080087bd
 8008724:	08008777 	.word	0x08008777
 8008728:	080087bd 	.word	0x080087bd
 800872c:	080087bd 	.word	0x080087bd
 8008730:	080087bd 	.word	0x080087bd
 8008734:	08008785 	.word	0x08008785
 8008738:	080087bd 	.word	0x080087bd
 800873c:	080087bd 	.word	0x080087bd
 8008740:	080087bd 	.word	0x080087bd
 8008744:	08008793 	.word	0x08008793
 8008748:	080087bd 	.word	0x080087bd
 800874c:	080087bd 	.word	0x080087bd
 8008750:	080087bd 	.word	0x080087bd
 8008754:	080087a1 	.word	0x080087a1
 8008758:	080087bd 	.word	0x080087bd
 800875c:	080087bd 	.word	0x080087bd
 8008760:	080087bd 	.word	0x080087bd
 8008764:	080087af 	.word	0x080087af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	68b9      	ldr	r1, [r7, #8]
 800876e:	4618      	mov	r0, r3
 8008770:	f000 f9e4 	bl	8008b3c <TIM_OC1_SetConfig>
      break;
 8008774:	e025      	b.n	80087c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68b9      	ldr	r1, [r7, #8]
 800877c:	4618      	mov	r0, r3
 800877e:	f000 fa77 	bl	8008c70 <TIM_OC2_SetConfig>
      break;
 8008782:	e01e      	b.n	80087c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68b9      	ldr	r1, [r7, #8]
 800878a:	4618      	mov	r0, r3
 800878c:	f000 fb04 	bl	8008d98 <TIM_OC3_SetConfig>
      break;
 8008790:	e017      	b.n	80087c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	68b9      	ldr	r1, [r7, #8]
 8008798:	4618      	mov	r0, r3
 800879a:	f000 fb8f 	bl	8008ebc <TIM_OC4_SetConfig>
      break;
 800879e:	e010      	b.n	80087c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	68b9      	ldr	r1, [r7, #8]
 80087a6:	4618      	mov	r0, r3
 80087a8:	f000 fc1c 	bl	8008fe4 <TIM_OC5_SetConfig>
      break;
 80087ac:	e009      	b.n	80087c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68b9      	ldr	r1, [r7, #8]
 80087b4:	4618      	mov	r0, r3
 80087b6:	f000 fc7f 	bl	80090b8 <TIM_OC6_SetConfig>
      break;
 80087ba:	e002      	b.n	80087c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	75fb      	strb	r3, [r7, #23]
      break;
 80087c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3718      	adds	r7, #24
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087de:	2300      	movs	r3, #0
 80087e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d101      	bne.n	80087f0 <HAL_TIM_ConfigClockSource+0x1c>
 80087ec:	2302      	movs	r3, #2
 80087ee:	e0ee      	b.n	80089ce <HAL_TIM_ConfigClockSource+0x1fa>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2202      	movs	r2, #2
 80087fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800880e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008812:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800881a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	68ba      	ldr	r2, [r7, #8]
 8008822:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a6b      	ldr	r2, [pc, #428]	; (80089d8 <HAL_TIM_ConfigClockSource+0x204>)
 800882a:	4293      	cmp	r3, r2
 800882c:	f000 80b9 	beq.w	80089a2 <HAL_TIM_ConfigClockSource+0x1ce>
 8008830:	4a69      	ldr	r2, [pc, #420]	; (80089d8 <HAL_TIM_ConfigClockSource+0x204>)
 8008832:	4293      	cmp	r3, r2
 8008834:	f200 80be 	bhi.w	80089b4 <HAL_TIM_ConfigClockSource+0x1e0>
 8008838:	4a68      	ldr	r2, [pc, #416]	; (80089dc <HAL_TIM_ConfigClockSource+0x208>)
 800883a:	4293      	cmp	r3, r2
 800883c:	f000 80b1 	beq.w	80089a2 <HAL_TIM_ConfigClockSource+0x1ce>
 8008840:	4a66      	ldr	r2, [pc, #408]	; (80089dc <HAL_TIM_ConfigClockSource+0x208>)
 8008842:	4293      	cmp	r3, r2
 8008844:	f200 80b6 	bhi.w	80089b4 <HAL_TIM_ConfigClockSource+0x1e0>
 8008848:	4a65      	ldr	r2, [pc, #404]	; (80089e0 <HAL_TIM_ConfigClockSource+0x20c>)
 800884a:	4293      	cmp	r3, r2
 800884c:	f000 80a9 	beq.w	80089a2 <HAL_TIM_ConfigClockSource+0x1ce>
 8008850:	4a63      	ldr	r2, [pc, #396]	; (80089e0 <HAL_TIM_ConfigClockSource+0x20c>)
 8008852:	4293      	cmp	r3, r2
 8008854:	f200 80ae 	bhi.w	80089b4 <HAL_TIM_ConfigClockSource+0x1e0>
 8008858:	4a62      	ldr	r2, [pc, #392]	; (80089e4 <HAL_TIM_ConfigClockSource+0x210>)
 800885a:	4293      	cmp	r3, r2
 800885c:	f000 80a1 	beq.w	80089a2 <HAL_TIM_ConfigClockSource+0x1ce>
 8008860:	4a60      	ldr	r2, [pc, #384]	; (80089e4 <HAL_TIM_ConfigClockSource+0x210>)
 8008862:	4293      	cmp	r3, r2
 8008864:	f200 80a6 	bhi.w	80089b4 <HAL_TIM_ConfigClockSource+0x1e0>
 8008868:	4a5f      	ldr	r2, [pc, #380]	; (80089e8 <HAL_TIM_ConfigClockSource+0x214>)
 800886a:	4293      	cmp	r3, r2
 800886c:	f000 8099 	beq.w	80089a2 <HAL_TIM_ConfigClockSource+0x1ce>
 8008870:	4a5d      	ldr	r2, [pc, #372]	; (80089e8 <HAL_TIM_ConfigClockSource+0x214>)
 8008872:	4293      	cmp	r3, r2
 8008874:	f200 809e 	bhi.w	80089b4 <HAL_TIM_ConfigClockSource+0x1e0>
 8008878:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800887c:	f000 8091 	beq.w	80089a2 <HAL_TIM_ConfigClockSource+0x1ce>
 8008880:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008884:	f200 8096 	bhi.w	80089b4 <HAL_TIM_ConfigClockSource+0x1e0>
 8008888:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800888c:	f000 8089 	beq.w	80089a2 <HAL_TIM_ConfigClockSource+0x1ce>
 8008890:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008894:	f200 808e 	bhi.w	80089b4 <HAL_TIM_ConfigClockSource+0x1e0>
 8008898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800889c:	d03e      	beq.n	800891c <HAL_TIM_ConfigClockSource+0x148>
 800889e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088a2:	f200 8087 	bhi.w	80089b4 <HAL_TIM_ConfigClockSource+0x1e0>
 80088a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088aa:	f000 8086 	beq.w	80089ba <HAL_TIM_ConfigClockSource+0x1e6>
 80088ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088b2:	d87f      	bhi.n	80089b4 <HAL_TIM_ConfigClockSource+0x1e0>
 80088b4:	2b70      	cmp	r3, #112	; 0x70
 80088b6:	d01a      	beq.n	80088ee <HAL_TIM_ConfigClockSource+0x11a>
 80088b8:	2b70      	cmp	r3, #112	; 0x70
 80088ba:	d87b      	bhi.n	80089b4 <HAL_TIM_ConfigClockSource+0x1e0>
 80088bc:	2b60      	cmp	r3, #96	; 0x60
 80088be:	d050      	beq.n	8008962 <HAL_TIM_ConfigClockSource+0x18e>
 80088c0:	2b60      	cmp	r3, #96	; 0x60
 80088c2:	d877      	bhi.n	80089b4 <HAL_TIM_ConfigClockSource+0x1e0>
 80088c4:	2b50      	cmp	r3, #80	; 0x50
 80088c6:	d03c      	beq.n	8008942 <HAL_TIM_ConfigClockSource+0x16e>
 80088c8:	2b50      	cmp	r3, #80	; 0x50
 80088ca:	d873      	bhi.n	80089b4 <HAL_TIM_ConfigClockSource+0x1e0>
 80088cc:	2b40      	cmp	r3, #64	; 0x40
 80088ce:	d058      	beq.n	8008982 <HAL_TIM_ConfigClockSource+0x1ae>
 80088d0:	2b40      	cmp	r3, #64	; 0x40
 80088d2:	d86f      	bhi.n	80089b4 <HAL_TIM_ConfigClockSource+0x1e0>
 80088d4:	2b30      	cmp	r3, #48	; 0x30
 80088d6:	d064      	beq.n	80089a2 <HAL_TIM_ConfigClockSource+0x1ce>
 80088d8:	2b30      	cmp	r3, #48	; 0x30
 80088da:	d86b      	bhi.n	80089b4 <HAL_TIM_ConfigClockSource+0x1e0>
 80088dc:	2b20      	cmp	r3, #32
 80088de:	d060      	beq.n	80089a2 <HAL_TIM_ConfigClockSource+0x1ce>
 80088e0:	2b20      	cmp	r3, #32
 80088e2:	d867      	bhi.n	80089b4 <HAL_TIM_ConfigClockSource+0x1e0>
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d05c      	beq.n	80089a2 <HAL_TIM_ConfigClockSource+0x1ce>
 80088e8:	2b10      	cmp	r3, #16
 80088ea:	d05a      	beq.n	80089a2 <HAL_TIM_ConfigClockSource+0x1ce>
 80088ec:	e062      	b.n	80089b4 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6818      	ldr	r0, [r3, #0]
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	6899      	ldr	r1, [r3, #8]
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	685a      	ldr	r2, [r3, #4]
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	f000 fcc3 	bl	8009288 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008910:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	68ba      	ldr	r2, [r7, #8]
 8008918:	609a      	str	r2, [r3, #8]
      break;
 800891a:	e04f      	b.n	80089bc <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6818      	ldr	r0, [r3, #0]
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	6899      	ldr	r1, [r3, #8]
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	685a      	ldr	r2, [r3, #4]
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	f000 fcac 	bl	8009288 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	689a      	ldr	r2, [r3, #8]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800893e:	609a      	str	r2, [r3, #8]
      break;
 8008940:	e03c      	b.n	80089bc <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6818      	ldr	r0, [r3, #0]
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	6859      	ldr	r1, [r3, #4]
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	461a      	mov	r2, r3
 8008950:	f000 fc1e 	bl	8009190 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2150      	movs	r1, #80	; 0x50
 800895a:	4618      	mov	r0, r3
 800895c:	f000 fc77 	bl	800924e <TIM_ITRx_SetConfig>
      break;
 8008960:	e02c      	b.n	80089bc <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6818      	ldr	r0, [r3, #0]
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	6859      	ldr	r1, [r3, #4]
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	461a      	mov	r2, r3
 8008970:	f000 fc3d 	bl	80091ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2160      	movs	r1, #96	; 0x60
 800897a:	4618      	mov	r0, r3
 800897c:	f000 fc67 	bl	800924e <TIM_ITRx_SetConfig>
      break;
 8008980:	e01c      	b.n	80089bc <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6818      	ldr	r0, [r3, #0]
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	6859      	ldr	r1, [r3, #4]
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	461a      	mov	r2, r3
 8008990:	f000 fbfe 	bl	8009190 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2140      	movs	r1, #64	; 0x40
 800899a:	4618      	mov	r0, r3
 800899c:	f000 fc57 	bl	800924e <TIM_ITRx_SetConfig>
      break;
 80089a0:	e00c      	b.n	80089bc <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4619      	mov	r1, r3
 80089ac:	4610      	mov	r0, r2
 80089ae:	f000 fc4e 	bl	800924e <TIM_ITRx_SetConfig>
      break;
 80089b2:	e003      	b.n	80089bc <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	73fb      	strb	r3, [r7, #15]
      break;
 80089b8:	e000      	b.n	80089bc <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 80089ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80089cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	00100070 	.word	0x00100070
 80089dc:	00100050 	.word	0x00100050
 80089e0:	00100040 	.word	0x00100040
 80089e4:	00100030 	.word	0x00100030
 80089e8:	00100020 	.word	0x00100020

080089ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4a46      	ldr	r2, [pc, #280]	; (8008b18 <TIM_Base_SetConfig+0x12c>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d017      	beq.n	8008a34 <TIM_Base_SetConfig+0x48>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a0a:	d013      	beq.n	8008a34 <TIM_Base_SetConfig+0x48>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a43      	ldr	r2, [pc, #268]	; (8008b1c <TIM_Base_SetConfig+0x130>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d00f      	beq.n	8008a34 <TIM_Base_SetConfig+0x48>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a42      	ldr	r2, [pc, #264]	; (8008b20 <TIM_Base_SetConfig+0x134>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d00b      	beq.n	8008a34 <TIM_Base_SetConfig+0x48>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a41      	ldr	r2, [pc, #260]	; (8008b24 <TIM_Base_SetConfig+0x138>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d007      	beq.n	8008a34 <TIM_Base_SetConfig+0x48>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4a40      	ldr	r2, [pc, #256]	; (8008b28 <TIM_Base_SetConfig+0x13c>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d003      	beq.n	8008a34 <TIM_Base_SetConfig+0x48>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a3f      	ldr	r2, [pc, #252]	; (8008b2c <TIM_Base_SetConfig+0x140>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d108      	bne.n	8008a46 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a33      	ldr	r2, [pc, #204]	; (8008b18 <TIM_Base_SetConfig+0x12c>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d023      	beq.n	8008a96 <TIM_Base_SetConfig+0xaa>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a54:	d01f      	beq.n	8008a96 <TIM_Base_SetConfig+0xaa>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4a30      	ldr	r2, [pc, #192]	; (8008b1c <TIM_Base_SetConfig+0x130>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d01b      	beq.n	8008a96 <TIM_Base_SetConfig+0xaa>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a2f      	ldr	r2, [pc, #188]	; (8008b20 <TIM_Base_SetConfig+0x134>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d017      	beq.n	8008a96 <TIM_Base_SetConfig+0xaa>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4a2e      	ldr	r2, [pc, #184]	; (8008b24 <TIM_Base_SetConfig+0x138>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d013      	beq.n	8008a96 <TIM_Base_SetConfig+0xaa>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4a2d      	ldr	r2, [pc, #180]	; (8008b28 <TIM_Base_SetConfig+0x13c>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d00f      	beq.n	8008a96 <TIM_Base_SetConfig+0xaa>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4a2d      	ldr	r2, [pc, #180]	; (8008b30 <TIM_Base_SetConfig+0x144>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d00b      	beq.n	8008a96 <TIM_Base_SetConfig+0xaa>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4a2c      	ldr	r2, [pc, #176]	; (8008b34 <TIM_Base_SetConfig+0x148>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d007      	beq.n	8008a96 <TIM_Base_SetConfig+0xaa>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a2b      	ldr	r2, [pc, #172]	; (8008b38 <TIM_Base_SetConfig+0x14c>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d003      	beq.n	8008a96 <TIM_Base_SetConfig+0xaa>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4a26      	ldr	r2, [pc, #152]	; (8008b2c <TIM_Base_SetConfig+0x140>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d108      	bne.n	8008aa8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	695b      	ldr	r3, [r3, #20]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	689a      	ldr	r2, [r3, #8]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4a12      	ldr	r2, [pc, #72]	; (8008b18 <TIM_Base_SetConfig+0x12c>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d013      	beq.n	8008afc <TIM_Base_SetConfig+0x110>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4a14      	ldr	r2, [pc, #80]	; (8008b28 <TIM_Base_SetConfig+0x13c>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d00f      	beq.n	8008afc <TIM_Base_SetConfig+0x110>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4a14      	ldr	r2, [pc, #80]	; (8008b30 <TIM_Base_SetConfig+0x144>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d00b      	beq.n	8008afc <TIM_Base_SetConfig+0x110>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a13      	ldr	r2, [pc, #76]	; (8008b34 <TIM_Base_SetConfig+0x148>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d007      	beq.n	8008afc <TIM_Base_SetConfig+0x110>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a12      	ldr	r2, [pc, #72]	; (8008b38 <TIM_Base_SetConfig+0x14c>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d003      	beq.n	8008afc <TIM_Base_SetConfig+0x110>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4a0d      	ldr	r2, [pc, #52]	; (8008b2c <TIM_Base_SetConfig+0x140>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d103      	bne.n	8008b04 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	691a      	ldr	r2, [r3, #16]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2201      	movs	r2, #1
 8008b08:	615a      	str	r2, [r3, #20]
}
 8008b0a:	bf00      	nop
 8008b0c:	3714      	adds	r7, #20
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	40012c00 	.word	0x40012c00
 8008b1c:	40000400 	.word	0x40000400
 8008b20:	40000800 	.word	0x40000800
 8008b24:	40000c00 	.word	0x40000c00
 8008b28:	40013400 	.word	0x40013400
 8008b2c:	40015000 	.word	0x40015000
 8008b30:	40014000 	.word	0x40014000
 8008b34:	40014400 	.word	0x40014400
 8008b38:	40014800 	.word	0x40014800

08008b3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b087      	sub	sp, #28
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6a1b      	ldr	r3, [r3, #32]
 8008b4a:	f023 0201 	bic.w	r2, r3, #1
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a1b      	ldr	r3, [r3, #32]
 8008b56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f023 0303 	bic.w	r3, r3, #3
 8008b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	f023 0302 	bic.w	r3, r3, #2
 8008b88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	697a      	ldr	r2, [r7, #20]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4a30      	ldr	r2, [pc, #192]	; (8008c58 <TIM_OC1_SetConfig+0x11c>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d013      	beq.n	8008bc4 <TIM_OC1_SetConfig+0x88>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a2f      	ldr	r2, [pc, #188]	; (8008c5c <TIM_OC1_SetConfig+0x120>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d00f      	beq.n	8008bc4 <TIM_OC1_SetConfig+0x88>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a2e      	ldr	r2, [pc, #184]	; (8008c60 <TIM_OC1_SetConfig+0x124>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d00b      	beq.n	8008bc4 <TIM_OC1_SetConfig+0x88>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4a2d      	ldr	r2, [pc, #180]	; (8008c64 <TIM_OC1_SetConfig+0x128>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d007      	beq.n	8008bc4 <TIM_OC1_SetConfig+0x88>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4a2c      	ldr	r2, [pc, #176]	; (8008c68 <TIM_OC1_SetConfig+0x12c>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d003      	beq.n	8008bc4 <TIM_OC1_SetConfig+0x88>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	4a2b      	ldr	r2, [pc, #172]	; (8008c6c <TIM_OC1_SetConfig+0x130>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d10c      	bne.n	8008bde <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	f023 0308 	bic.w	r3, r3, #8
 8008bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	697a      	ldr	r2, [r7, #20]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	f023 0304 	bic.w	r3, r3, #4
 8008bdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4a1d      	ldr	r2, [pc, #116]	; (8008c58 <TIM_OC1_SetConfig+0x11c>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d013      	beq.n	8008c0e <TIM_OC1_SetConfig+0xd2>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4a1c      	ldr	r2, [pc, #112]	; (8008c5c <TIM_OC1_SetConfig+0x120>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d00f      	beq.n	8008c0e <TIM_OC1_SetConfig+0xd2>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a1b      	ldr	r2, [pc, #108]	; (8008c60 <TIM_OC1_SetConfig+0x124>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d00b      	beq.n	8008c0e <TIM_OC1_SetConfig+0xd2>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4a1a      	ldr	r2, [pc, #104]	; (8008c64 <TIM_OC1_SetConfig+0x128>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d007      	beq.n	8008c0e <TIM_OC1_SetConfig+0xd2>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4a19      	ldr	r2, [pc, #100]	; (8008c68 <TIM_OC1_SetConfig+0x12c>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d003      	beq.n	8008c0e <TIM_OC1_SetConfig+0xd2>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a18      	ldr	r2, [pc, #96]	; (8008c6c <TIM_OC1_SetConfig+0x130>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d111      	bne.n	8008c32 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	695b      	ldr	r3, [r3, #20]
 8008c22:	693a      	ldr	r2, [r7, #16]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	699b      	ldr	r3, [r3, #24]
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	693a      	ldr	r2, [r7, #16]
 8008c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	685a      	ldr	r2, [r3, #4]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	697a      	ldr	r2, [r7, #20]
 8008c4a:	621a      	str	r2, [r3, #32]
}
 8008c4c:	bf00      	nop
 8008c4e:	371c      	adds	r7, #28
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr
 8008c58:	40012c00 	.word	0x40012c00
 8008c5c:	40013400 	.word	0x40013400
 8008c60:	40014000 	.word	0x40014000
 8008c64:	40014400 	.word	0x40014400
 8008c68:	40014800 	.word	0x40014800
 8008c6c:	40015000 	.word	0x40015000

08008c70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b087      	sub	sp, #28
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a1b      	ldr	r3, [r3, #32]
 8008c7e:	f023 0210 	bic.w	r2, r3, #16
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6a1b      	ldr	r3, [r3, #32]
 8008c8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	699b      	ldr	r3, [r3, #24]
 8008c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008caa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	021b      	lsls	r3, r3, #8
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	f023 0320 	bic.w	r3, r3, #32
 8008cbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	011b      	lsls	r3, r3, #4
 8008cc6:	697a      	ldr	r2, [r7, #20]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4a2c      	ldr	r2, [pc, #176]	; (8008d80 <TIM_OC2_SetConfig+0x110>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d007      	beq.n	8008ce4 <TIM_OC2_SetConfig+0x74>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	4a2b      	ldr	r2, [pc, #172]	; (8008d84 <TIM_OC2_SetConfig+0x114>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d003      	beq.n	8008ce4 <TIM_OC2_SetConfig+0x74>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a2a      	ldr	r2, [pc, #168]	; (8008d88 <TIM_OC2_SetConfig+0x118>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d10d      	bne.n	8008d00 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	011b      	lsls	r3, r3, #4
 8008cf2:	697a      	ldr	r2, [r7, #20]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cfe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4a1f      	ldr	r2, [pc, #124]	; (8008d80 <TIM_OC2_SetConfig+0x110>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d013      	beq.n	8008d30 <TIM_OC2_SetConfig+0xc0>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4a1e      	ldr	r2, [pc, #120]	; (8008d84 <TIM_OC2_SetConfig+0x114>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d00f      	beq.n	8008d30 <TIM_OC2_SetConfig+0xc0>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	4a1e      	ldr	r2, [pc, #120]	; (8008d8c <TIM_OC2_SetConfig+0x11c>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d00b      	beq.n	8008d30 <TIM_OC2_SetConfig+0xc0>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4a1d      	ldr	r2, [pc, #116]	; (8008d90 <TIM_OC2_SetConfig+0x120>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d007      	beq.n	8008d30 <TIM_OC2_SetConfig+0xc0>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4a1c      	ldr	r2, [pc, #112]	; (8008d94 <TIM_OC2_SetConfig+0x124>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d003      	beq.n	8008d30 <TIM_OC2_SetConfig+0xc0>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4a17      	ldr	r2, [pc, #92]	; (8008d88 <TIM_OC2_SetConfig+0x118>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d113      	bne.n	8008d58 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	695b      	ldr	r3, [r3, #20]
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	693a      	ldr	r2, [r7, #16]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	693a      	ldr	r2, [r7, #16]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	693a      	ldr	r2, [r7, #16]
 8008d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	685a      	ldr	r2, [r3, #4]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	697a      	ldr	r2, [r7, #20]
 8008d70:	621a      	str	r2, [r3, #32]
}
 8008d72:	bf00      	nop
 8008d74:	371c      	adds	r7, #28
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	40012c00 	.word	0x40012c00
 8008d84:	40013400 	.word	0x40013400
 8008d88:	40015000 	.word	0x40015000
 8008d8c:	40014000 	.word	0x40014000
 8008d90:	40014400 	.word	0x40014400
 8008d94:	40014800 	.word	0x40014800

08008d98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b087      	sub	sp, #28
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a1b      	ldr	r3, [r3, #32]
 8008da6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a1b      	ldr	r3, [r3, #32]
 8008db2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	69db      	ldr	r3, [r3, #28]
 8008dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f023 0303 	bic.w	r3, r3, #3
 8008dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008de4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	021b      	lsls	r3, r3, #8
 8008dec:	697a      	ldr	r2, [r7, #20]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a2b      	ldr	r2, [pc, #172]	; (8008ea4 <TIM_OC3_SetConfig+0x10c>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d007      	beq.n	8008e0a <TIM_OC3_SetConfig+0x72>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a2a      	ldr	r2, [pc, #168]	; (8008ea8 <TIM_OC3_SetConfig+0x110>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d003      	beq.n	8008e0a <TIM_OC3_SetConfig+0x72>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a29      	ldr	r2, [pc, #164]	; (8008eac <TIM_OC3_SetConfig+0x114>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d10d      	bne.n	8008e26 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	021b      	lsls	r3, r3, #8
 8008e18:	697a      	ldr	r2, [r7, #20]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4a1e      	ldr	r2, [pc, #120]	; (8008ea4 <TIM_OC3_SetConfig+0x10c>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d013      	beq.n	8008e56 <TIM_OC3_SetConfig+0xbe>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4a1d      	ldr	r2, [pc, #116]	; (8008ea8 <TIM_OC3_SetConfig+0x110>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d00f      	beq.n	8008e56 <TIM_OC3_SetConfig+0xbe>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4a1d      	ldr	r2, [pc, #116]	; (8008eb0 <TIM_OC3_SetConfig+0x118>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d00b      	beq.n	8008e56 <TIM_OC3_SetConfig+0xbe>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a1c      	ldr	r2, [pc, #112]	; (8008eb4 <TIM_OC3_SetConfig+0x11c>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d007      	beq.n	8008e56 <TIM_OC3_SetConfig+0xbe>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4a1b      	ldr	r2, [pc, #108]	; (8008eb8 <TIM_OC3_SetConfig+0x120>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d003      	beq.n	8008e56 <TIM_OC3_SetConfig+0xbe>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4a16      	ldr	r2, [pc, #88]	; (8008eac <TIM_OC3_SetConfig+0x114>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d113      	bne.n	8008e7e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	695b      	ldr	r3, [r3, #20]
 8008e6a:	011b      	lsls	r3, r3, #4
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	699b      	ldr	r3, [r3, #24]
 8008e76:	011b      	lsls	r3, r3, #4
 8008e78:	693a      	ldr	r2, [r7, #16]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	693a      	ldr	r2, [r7, #16]
 8008e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	68fa      	ldr	r2, [r7, #12]
 8008e88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	685a      	ldr	r2, [r3, #4]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	697a      	ldr	r2, [r7, #20]
 8008e96:	621a      	str	r2, [r3, #32]
}
 8008e98:	bf00      	nop
 8008e9a:	371c      	adds	r7, #28
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr
 8008ea4:	40012c00 	.word	0x40012c00
 8008ea8:	40013400 	.word	0x40013400
 8008eac:	40015000 	.word	0x40015000
 8008eb0:	40014000 	.word	0x40014000
 8008eb4:	40014400 	.word	0x40014400
 8008eb8:	40014800 	.word	0x40014800

08008ebc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b087      	sub	sp, #28
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a1b      	ldr	r3, [r3, #32]
 8008eca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a1b      	ldr	r3, [r3, #32]
 8008ed6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	69db      	ldr	r3, [r3, #28]
 8008ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	021b      	lsls	r3, r3, #8
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	4313      	orrs	r3, r2
 8008f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	031b      	lsls	r3, r3, #12
 8008f12:	697a      	ldr	r2, [r7, #20]
 8008f14:	4313      	orrs	r3, r2
 8008f16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4a2c      	ldr	r2, [pc, #176]	; (8008fcc <TIM_OC4_SetConfig+0x110>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d007      	beq.n	8008f30 <TIM_OC4_SetConfig+0x74>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	4a2b      	ldr	r2, [pc, #172]	; (8008fd0 <TIM_OC4_SetConfig+0x114>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d003      	beq.n	8008f30 <TIM_OC4_SetConfig+0x74>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4a2a      	ldr	r2, [pc, #168]	; (8008fd4 <TIM_OC4_SetConfig+0x118>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d10d      	bne.n	8008f4c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	031b      	lsls	r3, r3, #12
 8008f3e:	697a      	ldr	r2, [r7, #20]
 8008f40:	4313      	orrs	r3, r2
 8008f42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a1f      	ldr	r2, [pc, #124]	; (8008fcc <TIM_OC4_SetConfig+0x110>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d013      	beq.n	8008f7c <TIM_OC4_SetConfig+0xc0>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a1e      	ldr	r2, [pc, #120]	; (8008fd0 <TIM_OC4_SetConfig+0x114>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d00f      	beq.n	8008f7c <TIM_OC4_SetConfig+0xc0>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a1e      	ldr	r2, [pc, #120]	; (8008fd8 <TIM_OC4_SetConfig+0x11c>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d00b      	beq.n	8008f7c <TIM_OC4_SetConfig+0xc0>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a1d      	ldr	r2, [pc, #116]	; (8008fdc <TIM_OC4_SetConfig+0x120>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d007      	beq.n	8008f7c <TIM_OC4_SetConfig+0xc0>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a1c      	ldr	r2, [pc, #112]	; (8008fe0 <TIM_OC4_SetConfig+0x124>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d003      	beq.n	8008f7c <TIM_OC4_SetConfig+0xc0>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a17      	ldr	r2, [pc, #92]	; (8008fd4 <TIM_OC4_SetConfig+0x118>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d113      	bne.n	8008fa4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f82:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f8a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	695b      	ldr	r3, [r3, #20]
 8008f90:	019b      	lsls	r3, r3, #6
 8008f92:	693a      	ldr	r2, [r7, #16]
 8008f94:	4313      	orrs	r3, r2
 8008f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	019b      	lsls	r3, r3, #6
 8008f9e:	693a      	ldr	r2, [r7, #16]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	693a      	ldr	r2, [r7, #16]
 8008fa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	685a      	ldr	r2, [r3, #4]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	697a      	ldr	r2, [r7, #20]
 8008fbc:	621a      	str	r2, [r3, #32]
}
 8008fbe:	bf00      	nop
 8008fc0:	371c      	adds	r7, #28
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	40012c00 	.word	0x40012c00
 8008fd0:	40013400 	.word	0x40013400
 8008fd4:	40015000 	.word	0x40015000
 8008fd8:	40014000 	.word	0x40014000
 8008fdc:	40014400 	.word	0x40014400
 8008fe0:	40014800 	.word	0x40014800

08008fe4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b087      	sub	sp, #28
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a1b      	ldr	r3, [r3, #32]
 8008ff2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a1b      	ldr	r3, [r3, #32]
 8008ffe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800900a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	68fa      	ldr	r2, [r7, #12]
 800901e:	4313      	orrs	r3, r2
 8009020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009028:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	041b      	lsls	r3, r3, #16
 8009030:	693a      	ldr	r2, [r7, #16]
 8009032:	4313      	orrs	r3, r2
 8009034:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	4a19      	ldr	r2, [pc, #100]	; (80090a0 <TIM_OC5_SetConfig+0xbc>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d013      	beq.n	8009066 <TIM_OC5_SetConfig+0x82>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	4a18      	ldr	r2, [pc, #96]	; (80090a4 <TIM_OC5_SetConfig+0xc0>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d00f      	beq.n	8009066 <TIM_OC5_SetConfig+0x82>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	4a17      	ldr	r2, [pc, #92]	; (80090a8 <TIM_OC5_SetConfig+0xc4>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d00b      	beq.n	8009066 <TIM_OC5_SetConfig+0x82>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4a16      	ldr	r2, [pc, #88]	; (80090ac <TIM_OC5_SetConfig+0xc8>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d007      	beq.n	8009066 <TIM_OC5_SetConfig+0x82>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	4a15      	ldr	r2, [pc, #84]	; (80090b0 <TIM_OC5_SetConfig+0xcc>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d003      	beq.n	8009066 <TIM_OC5_SetConfig+0x82>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4a14      	ldr	r2, [pc, #80]	; (80090b4 <TIM_OC5_SetConfig+0xd0>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d109      	bne.n	800907a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800906c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	695b      	ldr	r3, [r3, #20]
 8009072:	021b      	lsls	r3, r3, #8
 8009074:	697a      	ldr	r2, [r7, #20]
 8009076:	4313      	orrs	r3, r2
 8009078:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	697a      	ldr	r2, [r7, #20]
 800907e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	685a      	ldr	r2, [r3, #4]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	693a      	ldr	r2, [r7, #16]
 8009092:	621a      	str	r2, [r3, #32]
}
 8009094:	bf00      	nop
 8009096:	371c      	adds	r7, #28
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr
 80090a0:	40012c00 	.word	0x40012c00
 80090a4:	40013400 	.word	0x40013400
 80090a8:	40014000 	.word	0x40014000
 80090ac:	40014400 	.word	0x40014400
 80090b0:	40014800 	.word	0x40014800
 80090b4:	40015000 	.word	0x40015000

080090b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b087      	sub	sp, #28
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a1b      	ldr	r3, [r3, #32]
 80090c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a1b      	ldr	r3, [r3, #32]
 80090d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80090e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	021b      	lsls	r3, r3, #8
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	4313      	orrs	r3, r2
 80090f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80090fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	051b      	lsls	r3, r3, #20
 8009106:	693a      	ldr	r2, [r7, #16]
 8009108:	4313      	orrs	r3, r2
 800910a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4a1a      	ldr	r2, [pc, #104]	; (8009178 <TIM_OC6_SetConfig+0xc0>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d013      	beq.n	800913c <TIM_OC6_SetConfig+0x84>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4a19      	ldr	r2, [pc, #100]	; (800917c <TIM_OC6_SetConfig+0xc4>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d00f      	beq.n	800913c <TIM_OC6_SetConfig+0x84>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4a18      	ldr	r2, [pc, #96]	; (8009180 <TIM_OC6_SetConfig+0xc8>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d00b      	beq.n	800913c <TIM_OC6_SetConfig+0x84>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a17      	ldr	r2, [pc, #92]	; (8009184 <TIM_OC6_SetConfig+0xcc>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d007      	beq.n	800913c <TIM_OC6_SetConfig+0x84>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a16      	ldr	r2, [pc, #88]	; (8009188 <TIM_OC6_SetConfig+0xd0>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d003      	beq.n	800913c <TIM_OC6_SetConfig+0x84>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4a15      	ldr	r2, [pc, #84]	; (800918c <TIM_OC6_SetConfig+0xd4>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d109      	bne.n	8009150 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009142:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	695b      	ldr	r3, [r3, #20]
 8009148:	029b      	lsls	r3, r3, #10
 800914a:	697a      	ldr	r2, [r7, #20]
 800914c:	4313      	orrs	r3, r2
 800914e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	697a      	ldr	r2, [r7, #20]
 8009154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	685a      	ldr	r2, [r3, #4]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	693a      	ldr	r2, [r7, #16]
 8009168:	621a      	str	r2, [r3, #32]
}
 800916a:	bf00      	nop
 800916c:	371c      	adds	r7, #28
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr
 8009176:	bf00      	nop
 8009178:	40012c00 	.word	0x40012c00
 800917c:	40013400 	.word	0x40013400
 8009180:	40014000 	.word	0x40014000
 8009184:	40014400 	.word	0x40014400
 8009188:	40014800 	.word	0x40014800
 800918c:	40015000 	.word	0x40015000

08009190 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009190:	b480      	push	{r7}
 8009192:	b087      	sub	sp, #28
 8009194:	af00      	add	r7, sp, #0
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6a1b      	ldr	r3, [r3, #32]
 80091a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	6a1b      	ldr	r3, [r3, #32]
 80091a6:	f023 0201 	bic.w	r2, r3, #1
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	699b      	ldr	r3, [r3, #24]
 80091b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	011b      	lsls	r3, r3, #4
 80091c0:	693a      	ldr	r2, [r7, #16]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	f023 030a 	bic.w	r3, r3, #10
 80091cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80091ce:	697a      	ldr	r2, [r7, #20]
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	4313      	orrs	r3, r2
 80091d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	693a      	ldr	r2, [r7, #16]
 80091da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	697a      	ldr	r2, [r7, #20]
 80091e0:	621a      	str	r2, [r3, #32]
}
 80091e2:	bf00      	nop
 80091e4:	371c      	adds	r7, #28
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091ee:	b480      	push	{r7}
 80091f0:	b087      	sub	sp, #28
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	60f8      	str	r0, [r7, #12]
 80091f6:	60b9      	str	r1, [r7, #8]
 80091f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	6a1b      	ldr	r3, [r3, #32]
 80091fe:	f023 0210 	bic.w	r2, r3, #16
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	699b      	ldr	r3, [r3, #24]
 800920a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6a1b      	ldr	r3, [r3, #32]
 8009210:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009218:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	031b      	lsls	r3, r3, #12
 800921e:	697a      	ldr	r2, [r7, #20]
 8009220:	4313      	orrs	r3, r2
 8009222:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800922a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	011b      	lsls	r3, r3, #4
 8009230:	693a      	ldr	r2, [r7, #16]
 8009232:	4313      	orrs	r3, r2
 8009234:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	697a      	ldr	r2, [r7, #20]
 800923a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	621a      	str	r2, [r3, #32]
}
 8009242:	bf00      	nop
 8009244:	371c      	adds	r7, #28
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr

0800924e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800924e:	b480      	push	{r7}
 8009250:	b085      	sub	sp, #20
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
 8009256:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009268:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800926a:	683a      	ldr	r2, [r7, #0]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	4313      	orrs	r3, r2
 8009270:	f043 0307 	orr.w	r3, r3, #7
 8009274:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	609a      	str	r2, [r3, #8]
}
 800927c:	bf00      	nop
 800927e:	3714      	adds	r7, #20
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009288:	b480      	push	{r7}
 800928a:	b087      	sub	sp, #28
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	607a      	str	r2, [r7, #4]
 8009294:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	021a      	lsls	r2, r3, #8
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	431a      	orrs	r2, r3
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	697a      	ldr	r2, [r7, #20]
 80092b2:	4313      	orrs	r3, r2
 80092b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	697a      	ldr	r2, [r7, #20]
 80092ba:	609a      	str	r2, [r3, #8]
}
 80092bc:	bf00      	nop
 80092be:	371c      	adds	r7, #28
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b087      	sub	sp, #28
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	60b9      	str	r1, [r7, #8]
 80092d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	f003 031f 	and.w	r3, r3, #31
 80092da:	2201      	movs	r2, #1
 80092dc:	fa02 f303 	lsl.w	r3, r2, r3
 80092e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6a1a      	ldr	r2, [r3, #32]
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	43db      	mvns	r3, r3
 80092ea:	401a      	ands	r2, r3
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6a1a      	ldr	r2, [r3, #32]
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	f003 031f 	and.w	r3, r3, #31
 80092fa:	6879      	ldr	r1, [r7, #4]
 80092fc:	fa01 f303 	lsl.w	r3, r1, r3
 8009300:	431a      	orrs	r2, r3
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	621a      	str	r2, [r3, #32]
}
 8009306:	bf00      	nop
 8009308:	371c      	adds	r7, #28
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr
	...

08009314 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009314:	b480      	push	{r7}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009324:	2b01      	cmp	r3, #1
 8009326:	d101      	bne.n	800932c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009328:	2302      	movs	r3, #2
 800932a:	e074      	b.n	8009416 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2201      	movs	r2, #1
 8009330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2202      	movs	r2, #2
 8009338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a34      	ldr	r2, [pc, #208]	; (8009424 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d009      	beq.n	800936a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a33      	ldr	r2, [pc, #204]	; (8009428 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d004      	beq.n	800936a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a31      	ldr	r2, [pc, #196]	; (800942c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d108      	bne.n	800937c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009370:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	68fa      	ldr	r2, [r7, #12]
 8009378:	4313      	orrs	r3, r2
 800937a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009386:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	68fa      	ldr	r2, [r7, #12]
 800938e:	4313      	orrs	r3, r2
 8009390:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68fa      	ldr	r2, [r7, #12]
 8009398:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a21      	ldr	r2, [pc, #132]	; (8009424 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d022      	beq.n	80093ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093ac:	d01d      	beq.n	80093ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a1f      	ldr	r2, [pc, #124]	; (8009430 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d018      	beq.n	80093ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a1d      	ldr	r2, [pc, #116]	; (8009434 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d013      	beq.n	80093ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a1c      	ldr	r2, [pc, #112]	; (8009438 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d00e      	beq.n	80093ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a15      	ldr	r2, [pc, #84]	; (8009428 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d009      	beq.n	80093ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a18      	ldr	r2, [pc, #96]	; (800943c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d004      	beq.n	80093ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a11      	ldr	r2, [pc, #68]	; (800942c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d10c      	bne.n	8009404 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	68ba      	ldr	r2, [r7, #8]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68ba      	ldr	r2, [r7, #8]
 8009402:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2201      	movs	r2, #1
 8009408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009414:	2300      	movs	r3, #0
}
 8009416:	4618      	mov	r0, r3
 8009418:	3714      	adds	r7, #20
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop
 8009424:	40012c00 	.word	0x40012c00
 8009428:	40013400 	.word	0x40013400
 800942c:	40015000 	.word	0x40015000
 8009430:	40000400 	.word	0x40000400
 8009434:	40000800 	.word	0x40000800
 8009438:	40000c00 	.word	0x40000c00
 800943c:	40014000 	.word	0x40014000

08009440 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009440:	b480      	push	{r7}
 8009442:	b085      	sub	sp, #20
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800944a:	2300      	movs	r3, #0
 800944c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009454:	2b01      	cmp	r3, #1
 8009456:	d101      	bne.n	800945c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009458:	2302      	movs	r3, #2
 800945a:	e096      	b.n	800958a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2201      	movs	r2, #1
 8009460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	4313      	orrs	r3, r2
 8009470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	4313      	orrs	r3, r2
 800947e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	4313      	orrs	r3, r2
 800948c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4313      	orrs	r3, r2
 800949a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	691b      	ldr	r3, [r3, #16]
 80094a6:	4313      	orrs	r3, r2
 80094a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	695b      	ldr	r3, [r3, #20]
 80094b4:	4313      	orrs	r3, r2
 80094b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c2:	4313      	orrs	r3, r2
 80094c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	699b      	ldr	r3, [r3, #24]
 80094d0:	041b      	lsls	r3, r3, #16
 80094d2:	4313      	orrs	r3, r2
 80094d4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a2f      	ldr	r2, [pc, #188]	; (8009598 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d009      	beq.n	80094f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a2d      	ldr	r2, [pc, #180]	; (800959c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d004      	beq.n	80094f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a2c      	ldr	r2, [pc, #176]	; (80095a0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d106      	bne.n	8009502 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	69db      	ldr	r3, [r3, #28]
 80094fe:	4313      	orrs	r3, r2
 8009500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a24      	ldr	r2, [pc, #144]	; (8009598 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d009      	beq.n	8009520 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a22      	ldr	r2, [pc, #136]	; (800959c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d004      	beq.n	8009520 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a21      	ldr	r2, [pc, #132]	; (80095a0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d12b      	bne.n	8009578 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800952a:	051b      	lsls	r3, r3, #20
 800952c:	4313      	orrs	r3, r2
 800952e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	6a1b      	ldr	r3, [r3, #32]
 800953a:	4313      	orrs	r3, r2
 800953c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009548:	4313      	orrs	r3, r2
 800954a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a11      	ldr	r2, [pc, #68]	; (8009598 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d009      	beq.n	800956a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a10      	ldr	r2, [pc, #64]	; (800959c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d004      	beq.n	800956a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a0e      	ldr	r2, [pc, #56]	; (80095a0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d106      	bne.n	8009578 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009574:	4313      	orrs	r3, r2
 8009576:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	68fa      	ldr	r2, [r7, #12]
 800957e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009588:	2300      	movs	r3, #0
}
 800958a:	4618      	mov	r0, r3
 800958c:	3714      	adds	r7, #20
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr
 8009596:	bf00      	nop
 8009598:	40012c00 	.word	0x40012c00
 800959c:	40013400 	.word	0x40013400
 80095a0:	40015000 	.word	0x40015000

080095a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b085      	sub	sp, #20
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80095b4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80095b8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	b29a      	uxth	r2, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3714      	adds	r7, #20
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr

080095d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80095d2:	b480      	push	{r7}
 80095d4:	b085      	sub	sp, #20
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80095da:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80095de:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	43db      	mvns	r3, r3
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	4013      	ands	r3, r2
 80095f2:	b29a      	uxth	r2, r3
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80095fa:	2300      	movs	r3, #0
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3714      	adds	r7, #20
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009608:	b084      	sub	sp, #16
 800960a:	b480      	push	{r7}
 800960c:	b083      	sub	sp, #12
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
 8009612:	f107 0014 	add.w	r0, r7, #20
 8009616:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2201      	movs	r2, #1
 800961e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2200      	movs	r2, #0
 8009636:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800963a:	2300      	movs	r3, #0
}
 800963c:	4618      	mov	r0, r3
 800963e:	370c      	adds	r7, #12
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	b004      	add	sp, #16
 8009648:	4770      	bx	lr
	...

0800964c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800964c:	b480      	push	{r7}
 800964e:	b09d      	sub	sp, #116	; 0x74
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009656:	2300      	movs	r3, #0
 8009658:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	4413      	add	r3, r2
 8009666:	881b      	ldrh	r3, [r3, #0]
 8009668:	b29b      	uxth	r3, r3
 800966a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800966e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009672:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	78db      	ldrb	r3, [r3, #3]
 800967a:	2b03      	cmp	r3, #3
 800967c:	d81f      	bhi.n	80096be <USB_ActivateEndpoint+0x72>
 800967e:	a201      	add	r2, pc, #4	; (adr r2, 8009684 <USB_ActivateEndpoint+0x38>)
 8009680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009684:	08009695 	.word	0x08009695
 8009688:	080096b1 	.word	0x080096b1
 800968c:	080096c7 	.word	0x080096c7
 8009690:	080096a3 	.word	0x080096a3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009694:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009698:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800969c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80096a0:	e012      	b.n	80096c8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80096a2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80096a6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80096aa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80096ae:	e00b      	b.n	80096c8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80096b0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80096b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80096b8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80096bc:	e004      	b.n	80096c8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80096be:	2301      	movs	r3, #1
 80096c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80096c4:	e000      	b.n	80096c8 <USB_ActivateEndpoint+0x7c>
      break;
 80096c6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	441a      	add	r2, r3
 80096d2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80096d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	4413      	add	r3, r2
 80096f4:	881b      	ldrh	r3, [r3, #0]
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	b21b      	sxth	r3, r3
 80096fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009702:	b21a      	sxth	r2, r3
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	b21b      	sxth	r3, r3
 800970a:	4313      	orrs	r3, r2
 800970c:	b21b      	sxth	r3, r3
 800970e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	441a      	add	r2, r3
 800971c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009720:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009724:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800972c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009730:	b29b      	uxth	r3, r3
 8009732:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	7b1b      	ldrb	r3, [r3, #12]
 8009738:	2b00      	cmp	r3, #0
 800973a:	f040 8149 	bne.w	80099d0 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	785b      	ldrb	r3, [r3, #1]
 8009742:	2b00      	cmp	r3, #0
 8009744:	f000 8084 	beq.w	8009850 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	61bb      	str	r3, [r7, #24]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009752:	b29b      	uxth	r3, r3
 8009754:	461a      	mov	r2, r3
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	4413      	add	r3, r2
 800975a:	61bb      	str	r3, [r7, #24]
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	00da      	lsls	r2, r3, #3
 8009762:	69bb      	ldr	r3, [r7, #24]
 8009764:	4413      	add	r3, r2
 8009766:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800976a:	617b      	str	r3, [r7, #20]
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	88db      	ldrh	r3, [r3, #6]
 8009770:	085b      	lsrs	r3, r3, #1
 8009772:	b29b      	uxth	r3, r3
 8009774:	005b      	lsls	r3, r3, #1
 8009776:	b29a      	uxth	r2, r3
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	4413      	add	r3, r2
 8009786:	881b      	ldrh	r3, [r3, #0]
 8009788:	827b      	strh	r3, [r7, #18]
 800978a:	8a7b      	ldrh	r3, [r7, #18]
 800978c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009790:	2b00      	cmp	r3, #0
 8009792:	d01b      	beq.n	80097cc <USB_ActivateEndpoint+0x180>
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	4413      	add	r3, r2
 800979e:	881b      	ldrh	r3, [r3, #0]
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097aa:	823b      	strh	r3, [r7, #16]
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	441a      	add	r2, r3
 80097b6:	8a3b      	ldrh	r3, [r7, #16]
 80097b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	78db      	ldrb	r3, [r3, #3]
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d020      	beq.n	8009816 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	4413      	add	r3, r2
 80097de:	881b      	ldrh	r3, [r3, #0]
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097ea:	81bb      	strh	r3, [r7, #12]
 80097ec:	89bb      	ldrh	r3, [r7, #12]
 80097ee:	f083 0320 	eor.w	r3, r3, #32
 80097f2:	81bb      	strh	r3, [r7, #12]
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	441a      	add	r2, r3
 80097fe:	89bb      	ldrh	r3, [r7, #12]
 8009800:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009804:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800980c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009810:	b29b      	uxth	r3, r3
 8009812:	8013      	strh	r3, [r2, #0]
 8009814:	e2a6      	b.n	8009d64 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	4413      	add	r3, r2
 8009820:	881b      	ldrh	r3, [r3, #0]
 8009822:	b29b      	uxth	r3, r3
 8009824:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800982c:	81fb      	strh	r3, [r7, #14]
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	441a      	add	r2, r3
 8009838:	89fb      	ldrh	r3, [r7, #14]
 800983a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800983e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800984a:	b29b      	uxth	r3, r3
 800984c:	8013      	strh	r3, [r2, #0]
 800984e:	e289      	b.n	8009d64 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	633b      	str	r3, [r7, #48]	; 0x30
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800985a:	b29b      	uxth	r3, r3
 800985c:	461a      	mov	r2, r3
 800985e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009860:	4413      	add	r3, r2
 8009862:	633b      	str	r3, [r7, #48]	; 0x30
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	00da      	lsls	r2, r3, #3
 800986a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800986c:	4413      	add	r3, r2
 800986e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009872:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	88db      	ldrh	r3, [r3, #6]
 8009878:	085b      	lsrs	r3, r3, #1
 800987a:	b29b      	uxth	r3, r3
 800987c:	005b      	lsls	r3, r3, #1
 800987e:	b29a      	uxth	r2, r3
 8009880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009882:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	62bb      	str	r3, [r7, #40]	; 0x28
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800988e:	b29b      	uxth	r3, r3
 8009890:	461a      	mov	r2, r3
 8009892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009894:	4413      	add	r3, r2
 8009896:	62bb      	str	r3, [r7, #40]	; 0x28
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	00da      	lsls	r2, r3, #3
 800989e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a0:	4413      	add	r3, r2
 80098a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80098a6:	627b      	str	r3, [r7, #36]	; 0x24
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	691b      	ldr	r3, [r3, #16]
 80098ac:	2b3e      	cmp	r3, #62	; 0x3e
 80098ae:	d918      	bls.n	80098e2 <USB_ActivateEndpoint+0x296>
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	691b      	ldr	r3, [r3, #16]
 80098b4:	095b      	lsrs	r3, r3, #5
 80098b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	691b      	ldr	r3, [r3, #16]
 80098bc:	f003 031f 	and.w	r3, r3, #31
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d102      	bne.n	80098ca <USB_ActivateEndpoint+0x27e>
 80098c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098c6:	3b01      	subs	r3, #1
 80098c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80098ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	029b      	lsls	r3, r3, #10
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098da:	b29a      	uxth	r2, r3
 80098dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098de:	801a      	strh	r2, [r3, #0]
 80098e0:	e029      	b.n	8009936 <USB_ActivateEndpoint+0x2ea>
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	691b      	ldr	r3, [r3, #16]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d112      	bne.n	8009910 <USB_ActivateEndpoint+0x2c4>
 80098ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ec:	881b      	ldrh	r3, [r3, #0]
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80098f4:	b29a      	uxth	r2, r3
 80098f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f8:	801a      	strh	r2, [r3, #0]
 80098fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fc:	881b      	ldrh	r3, [r3, #0]
 80098fe:	b29b      	uxth	r3, r3
 8009900:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009904:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009908:	b29a      	uxth	r2, r3
 800990a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990c:	801a      	strh	r2, [r3, #0]
 800990e:	e012      	b.n	8009936 <USB_ActivateEndpoint+0x2ea>
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	691b      	ldr	r3, [r3, #16]
 8009914:	085b      	lsrs	r3, r3, #1
 8009916:	66bb      	str	r3, [r7, #104]	; 0x68
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	691b      	ldr	r3, [r3, #16]
 800991c:	f003 0301 	and.w	r3, r3, #1
 8009920:	2b00      	cmp	r3, #0
 8009922:	d002      	beq.n	800992a <USB_ActivateEndpoint+0x2de>
 8009924:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009926:	3301      	adds	r3, #1
 8009928:	66bb      	str	r3, [r7, #104]	; 0x68
 800992a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800992c:	b29b      	uxth	r3, r3
 800992e:	029b      	lsls	r3, r3, #10
 8009930:	b29a      	uxth	r2, r3
 8009932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009934:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	4413      	add	r3, r2
 8009940:	881b      	ldrh	r3, [r3, #0]
 8009942:	847b      	strh	r3, [r7, #34]	; 0x22
 8009944:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800994a:	2b00      	cmp	r3, #0
 800994c:	d01b      	beq.n	8009986 <USB_ActivateEndpoint+0x33a>
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	4413      	add	r3, r2
 8009958:	881b      	ldrh	r3, [r3, #0]
 800995a:	b29b      	uxth	r3, r3
 800995c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009964:	843b      	strh	r3, [r7, #32]
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	441a      	add	r2, r3
 8009970:	8c3b      	ldrh	r3, [r7, #32]
 8009972:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009976:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800997a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800997e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009982:	b29b      	uxth	r3, r3
 8009984:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	4413      	add	r3, r2
 8009990:	881b      	ldrh	r3, [r3, #0]
 8009992:	b29b      	uxth	r3, r3
 8009994:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800999c:	83fb      	strh	r3, [r7, #30]
 800999e:	8bfb      	ldrh	r3, [r7, #30]
 80099a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80099a4:	83fb      	strh	r3, [r7, #30]
 80099a6:	8bfb      	ldrh	r3, [r7, #30]
 80099a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80099ac:	83fb      	strh	r3, [r7, #30]
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	441a      	add	r2, r3
 80099b8:	8bfb      	ldrh	r3, [r7, #30]
 80099ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	8013      	strh	r3, [r2, #0]
 80099ce:	e1c9      	b.n	8009d64 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	78db      	ldrb	r3, [r3, #3]
 80099d4:	2b02      	cmp	r3, #2
 80099d6:	d11e      	bne.n	8009a16 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	4413      	add	r3, r2
 80099e2:	881b      	ldrh	r3, [r3, #0]
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099ee:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	441a      	add	r2, r3
 80099fc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009a00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a08:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	8013      	strh	r3, [r2, #0]
 8009a14:	e01d      	b.n	8009a52 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	4413      	add	r3, r2
 8009a20:	881b      	ldrh	r3, [r3, #0]
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a2c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	441a      	add	r2, r3
 8009a3a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	461a      	mov	r2, r3
 8009a60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a62:	4413      	add	r3, r2
 8009a64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	00da      	lsls	r2, r3, #3
 8009a6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a6e:	4413      	add	r3, r2
 8009a70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a74:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	891b      	ldrh	r3, [r3, #8]
 8009a7a:	085b      	lsrs	r3, r3, #1
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	005b      	lsls	r3, r3, #1
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a84:	801a      	strh	r2, [r3, #0]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	657b      	str	r3, [r7, #84]	; 0x54
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	461a      	mov	r2, r3
 8009a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a96:	4413      	add	r3, r2
 8009a98:	657b      	str	r3, [r7, #84]	; 0x54
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	00da      	lsls	r2, r3, #3
 8009aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009aa2:	4413      	add	r3, r2
 8009aa4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009aa8:	653b      	str	r3, [r7, #80]	; 0x50
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	895b      	ldrh	r3, [r3, #10]
 8009aae:	085b      	lsrs	r3, r3, #1
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	005b      	lsls	r3, r3, #1
 8009ab4:	b29a      	uxth	r2, r3
 8009ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ab8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	785b      	ldrb	r3, [r3, #1]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	f040 8093 	bne.w	8009bea <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	4413      	add	r3, r2
 8009ace:	881b      	ldrh	r3, [r3, #0]
 8009ad0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009ad4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009ad8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d01b      	beq.n	8009b18 <USB_ActivateEndpoint+0x4cc>
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	4413      	add	r3, r2
 8009aea:	881b      	ldrh	r3, [r3, #0]
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009af6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	441a      	add	r2, r3
 8009b02:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009b04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	4413      	add	r3, r2
 8009b22:	881b      	ldrh	r3, [r3, #0]
 8009b24:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009b26:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d01b      	beq.n	8009b68 <USB_ActivateEndpoint+0x51c>
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	4413      	add	r3, r2
 8009b3a:	881b      	ldrh	r3, [r3, #0]
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b46:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	441a      	add	r2, r3
 8009b52:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009b54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	4413      	add	r3, r2
 8009b72:	881b      	ldrh	r3, [r3, #0]
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b7e:	873b      	strh	r3, [r7, #56]	; 0x38
 8009b80:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009b82:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009b86:	873b      	strh	r3, [r7, #56]	; 0x38
 8009b88:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009b8a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009b8e:	873b      	strh	r3, [r7, #56]	; 0x38
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	441a      	add	r2, r3
 8009b9a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009b9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ba0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ba4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	4413      	add	r3, r2
 8009bba:	881b      	ldrh	r3, [r3, #0]
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bc6:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	441a      	add	r2, r3
 8009bd2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009bd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	8013      	strh	r3, [r2, #0]
 8009be8:	e0bc      	b.n	8009d64 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	4413      	add	r3, r2
 8009bf4:	881b      	ldrh	r3, [r3, #0]
 8009bf6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009bfa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d01d      	beq.n	8009c42 <USB_ActivateEndpoint+0x5f6>
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	4413      	add	r3, r2
 8009c10:	881b      	ldrh	r3, [r3, #0]
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c1c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	441a      	add	r2, r3
 8009c2a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009c2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	009b      	lsls	r3, r3, #2
 8009c4a:	4413      	add	r3, r2
 8009c4c:	881b      	ldrh	r3, [r3, #0]
 8009c4e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009c52:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d01d      	beq.n	8009c9a <USB_ActivateEndpoint+0x64e>
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	4413      	add	r3, r2
 8009c68:	881b      	ldrh	r3, [r3, #0]
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c74:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	441a      	add	r2, r3
 8009c82:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009c86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	78db      	ldrb	r3, [r3, #3]
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d024      	beq.n	8009cec <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	4413      	add	r3, r2
 8009cac:	881b      	ldrh	r3, [r3, #0]
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cb8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009cbc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009cc0:	f083 0320 	eor.w	r3, r3, #32
 8009cc4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	441a      	add	r2, r3
 8009cd2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009cd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	8013      	strh	r3, [r2, #0]
 8009cea:	e01d      	b.n	8009d28 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	4413      	add	r3, r2
 8009cf6:	881b      	ldrh	r3, [r3, #0]
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d02:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	441a      	add	r2, r3
 8009d10:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009d14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	4413      	add	r3, r2
 8009d32:	881b      	ldrh	r3, [r3, #0]
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d3e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	441a      	add	r2, r3
 8009d4c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009d50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009d64:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3774      	adds	r7, #116	; 0x74
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b08d      	sub	sp, #52	; 0x34
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	7b1b      	ldrb	r3, [r3, #12]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	f040 808e 	bne.w	8009ea4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	785b      	ldrb	r3, [r3, #1]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d044      	beq.n	8009e1a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	4413      	add	r3, r2
 8009d9a:	881b      	ldrh	r3, [r3, #0]
 8009d9c:	81bb      	strh	r3, [r7, #12]
 8009d9e:	89bb      	ldrh	r3, [r7, #12]
 8009da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d01b      	beq.n	8009de0 <USB_DeactivateEndpoint+0x6c>
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	4413      	add	r3, r2
 8009db2:	881b      	ldrh	r3, [r3, #0]
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dbe:	817b      	strh	r3, [r7, #10]
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	441a      	add	r2, r3
 8009dca:	897b      	ldrh	r3, [r7, #10]
 8009dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	4413      	add	r3, r2
 8009dea:	881b      	ldrh	r3, [r3, #0]
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009df2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009df6:	813b      	strh	r3, [r7, #8]
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	441a      	add	r2, r3
 8009e02:	893b      	ldrh	r3, [r7, #8]
 8009e04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	8013      	strh	r3, [r2, #0]
 8009e18:	e192      	b.n	800a140 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	4413      	add	r3, r2
 8009e24:	881b      	ldrh	r3, [r3, #0]
 8009e26:	827b      	strh	r3, [r7, #18]
 8009e28:	8a7b      	ldrh	r3, [r7, #18]
 8009e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d01b      	beq.n	8009e6a <USB_DeactivateEndpoint+0xf6>
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	4413      	add	r3, r2
 8009e3c:	881b      	ldrh	r3, [r3, #0]
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e48:	823b      	strh	r3, [r7, #16]
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	441a      	add	r2, r3
 8009e54:	8a3b      	ldrh	r3, [r7, #16]
 8009e56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	4413      	add	r3, r2
 8009e74:	881b      	ldrh	r3, [r3, #0]
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e80:	81fb      	strh	r3, [r7, #14]
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	441a      	add	r2, r3
 8009e8c:	89fb      	ldrh	r3, [r7, #14]
 8009e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	8013      	strh	r3, [r2, #0]
 8009ea2:	e14d      	b.n	800a140 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	785b      	ldrb	r3, [r3, #1]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	f040 80a5 	bne.w	8009ff8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	009b      	lsls	r3, r3, #2
 8009eb6:	4413      	add	r3, r2
 8009eb8:	881b      	ldrh	r3, [r3, #0]
 8009eba:	843b      	strh	r3, [r7, #32]
 8009ebc:	8c3b      	ldrh	r3, [r7, #32]
 8009ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d01b      	beq.n	8009efe <USB_DeactivateEndpoint+0x18a>
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	009b      	lsls	r3, r3, #2
 8009ece:	4413      	add	r3, r2
 8009ed0:	881b      	ldrh	r3, [r3, #0]
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009edc:	83fb      	strh	r3, [r7, #30]
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	441a      	add	r2, r3
 8009ee8:	8bfb      	ldrh	r3, [r7, #30]
 8009eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ef2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	4413      	add	r3, r2
 8009f08:	881b      	ldrh	r3, [r3, #0]
 8009f0a:	83bb      	strh	r3, [r7, #28]
 8009f0c:	8bbb      	ldrh	r3, [r7, #28]
 8009f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d01b      	beq.n	8009f4e <USB_DeactivateEndpoint+0x1da>
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	4413      	add	r3, r2
 8009f20:	881b      	ldrh	r3, [r3, #0]
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f2c:	837b      	strh	r3, [r7, #26]
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	781b      	ldrb	r3, [r3, #0]
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	441a      	add	r2, r3
 8009f38:	8b7b      	ldrh	r3, [r7, #26]
 8009f3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	4413      	add	r3, r2
 8009f58:	881b      	ldrh	r3, [r3, #0]
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f64:	833b      	strh	r3, [r7, #24]
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	441a      	add	r2, r3
 8009f70:	8b3b      	ldrh	r3, [r7, #24]
 8009f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	4413      	add	r3, r2
 8009f90:	881b      	ldrh	r3, [r3, #0]
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f9c:	82fb      	strh	r3, [r7, #22]
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	441a      	add	r2, r3
 8009fa8:	8afb      	ldrh	r3, [r7, #22]
 8009faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	4413      	add	r3, r2
 8009fc8:	881b      	ldrh	r3, [r3, #0]
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fd4:	82bb      	strh	r3, [r7, #20]
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	441a      	add	r2, r3
 8009fe0:	8abb      	ldrh	r3, [r7, #20]
 8009fe2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fe6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	8013      	strh	r3, [r2, #0]
 8009ff6:	e0a3      	b.n	800a140 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	4413      	add	r3, r2
 800a002:	881b      	ldrh	r3, [r3, #0]
 800a004:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a006:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a008:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d01b      	beq.n	800a048 <USB_DeactivateEndpoint+0x2d4>
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	4413      	add	r3, r2
 800a01a:	881b      	ldrh	r3, [r3, #0]
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a026:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a028:	687a      	ldr	r2, [r7, #4]
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	441a      	add	r2, r3
 800a032:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a03c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a044:	b29b      	uxth	r3, r3
 800a046:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a048:	687a      	ldr	r2, [r7, #4]
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	4413      	add	r3, r2
 800a052:	881b      	ldrh	r3, [r3, #0]
 800a054:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a056:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d01b      	beq.n	800a098 <USB_DeactivateEndpoint+0x324>
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	4413      	add	r3, r2
 800a06a:	881b      	ldrh	r3, [r3, #0]
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a076:	853b      	strh	r3, [r7, #40]	; 0x28
 800a078:	687a      	ldr	r2, [r7, #4]
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	441a      	add	r2, r3
 800a082:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a08c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a090:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a094:	b29b      	uxth	r3, r3
 800a096:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	4413      	add	r3, r2
 800a0a2:	881b      	ldrh	r3, [r3, #0]
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0ae:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	009b      	lsls	r3, r3, #2
 800a0b8:	441a      	add	r2, r3
 800a0ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a0bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a0c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	4413      	add	r3, r2
 800a0da:	881b      	ldrh	r3, [r3, #0]
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0e6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	441a      	add	r2, r3
 800a0f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a104:	b29b      	uxth	r3, r3
 800a106:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	4413      	add	r3, r2
 800a112:	881b      	ldrh	r3, [r3, #0]
 800a114:	b29b      	uxth	r3, r3
 800a116:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a11a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a11e:	847b      	strh	r3, [r7, #34]	; 0x22
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	441a      	add	r2, r3
 800a12a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a12c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a134:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a140:	2300      	movs	r3, #0
}
 800a142:	4618      	mov	r0, r3
 800a144:	3734      	adds	r7, #52	; 0x34
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr

0800a14e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b0c2      	sub	sp, #264	; 0x108
 800a152:	af00      	add	r7, sp, #0
 800a154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a158:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a15c:	6018      	str	r0, [r3, #0]
 800a15e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a166:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a16c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	785b      	ldrb	r3, [r3, #1]
 800a174:	2b01      	cmp	r3, #1
 800a176:	f040 867b 	bne.w	800ae70 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a17a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a17e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	699a      	ldr	r2, [r3, #24]
 800a186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a18a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	691b      	ldr	r3, [r3, #16]
 800a192:	429a      	cmp	r2, r3
 800a194:	d908      	bls.n	800a1a8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a19a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	691b      	ldr	r3, [r3, #16]
 800a1a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a1a6:	e007      	b.n	800a1b8 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a1a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	699b      	ldr	r3, [r3, #24]
 800a1b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a1b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	7b1b      	ldrb	r3, [r3, #12]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d13a      	bne.n	800a23e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a1c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	6959      	ldr	r1, [r3, #20]
 800a1d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	88da      	ldrh	r2, [r3, #6]
 800a1e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a1ea:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a1ee:	6800      	ldr	r0, [r0, #0]
 800a1f0:	f001 fc1d 	bl	800ba2e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a1f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	613b      	str	r3, [r7, #16]
 800a200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a204:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a20e:	b29b      	uxth	r3, r3
 800a210:	461a      	mov	r2, r3
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	4413      	add	r3, r2
 800a216:	613b      	str	r3, [r7, #16]
 800a218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a21c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	781b      	ldrb	r3, [r3, #0]
 800a224:	00da      	lsls	r2, r3, #3
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	4413      	add	r3, r2
 800a22a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a22e:	60fb      	str	r3, [r7, #12]
 800a230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a234:	b29a      	uxth	r2, r3
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	801a      	strh	r2, [r3, #0]
 800a23a:	f000 bde3 	b.w	800ae04 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a23e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a242:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	78db      	ldrb	r3, [r3, #3]
 800a24a:	2b02      	cmp	r3, #2
 800a24c:	f040 843a 	bne.w	800aac4 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a254:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	6a1a      	ldr	r2, [r3, #32]
 800a25c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	691b      	ldr	r3, [r3, #16]
 800a268:	429a      	cmp	r2, r3
 800a26a:	f240 83b7 	bls.w	800a9dc <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a26e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a272:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a27c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	009b      	lsls	r3, r3, #2
 800a286:	4413      	add	r3, r2
 800a288:	881b      	ldrh	r3, [r3, #0]
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a294:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a29c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	441a      	add	r2, r3
 800a2b2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a2b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2be:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a2c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a2ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	6a1a      	ldr	r2, [r3, #32]
 800a2d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2da:	1ad2      	subs	r2, r2, r3
 800a2dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a2e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	009b      	lsls	r3, r3, #2
 800a300:	4413      	add	r3, r2
 800a302:	881b      	ldrh	r3, [r3, #0]
 800a304:	b29b      	uxth	r3, r3
 800a306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	f000 81b3 	beq.w	800a676 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a314:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	633b      	str	r3, [r7, #48]	; 0x30
 800a31c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a320:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	785b      	ldrb	r3, [r3, #1]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d16d      	bne.n	800a408 <USB_EPStartXfer+0x2ba>
 800a32c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a330:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	62bb      	str	r3, [r7, #40]	; 0x28
 800a338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a33c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a346:	b29b      	uxth	r3, r3
 800a348:	461a      	mov	r2, r3
 800a34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a34c:	4413      	add	r3, r2
 800a34e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	00da      	lsls	r2, r3, #3
 800a35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a360:	4413      	add	r3, r2
 800a362:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a366:	627b      	str	r3, [r7, #36]	; 0x24
 800a368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a36c:	2b3e      	cmp	r3, #62	; 0x3e
 800a36e:	d91c      	bls.n	800a3aa <USB_EPStartXfer+0x25c>
 800a370:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a374:	095b      	lsrs	r3, r3, #5
 800a376:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a37a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a37e:	f003 031f 	and.w	r3, r3, #31
 800a382:	2b00      	cmp	r3, #0
 800a384:	d104      	bne.n	800a390 <USB_EPStartXfer+0x242>
 800a386:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a38a:	3b01      	subs	r3, #1
 800a38c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a390:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a394:	b29b      	uxth	r3, r3
 800a396:	029b      	lsls	r3, r3, #10
 800a398:	b29b      	uxth	r3, r3
 800a39a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a39e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3a2:	b29a      	uxth	r2, r3
 800a3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a6:	801a      	strh	r2, [r3, #0]
 800a3a8:	e053      	b.n	800a452 <USB_EPStartXfer+0x304>
 800a3aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d112      	bne.n	800a3d8 <USB_EPStartXfer+0x28a>
 800a3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b4:	881b      	ldrh	r3, [r3, #0]
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a3bc:	b29a      	uxth	r2, r3
 800a3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c0:	801a      	strh	r2, [r3, #0]
 800a3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c4:	881b      	ldrh	r3, [r3, #0]
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3d0:	b29a      	uxth	r2, r3
 800a3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d4:	801a      	strh	r2, [r3, #0]
 800a3d6:	e03c      	b.n	800a452 <USB_EPStartXfer+0x304>
 800a3d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3dc:	085b      	lsrs	r3, r3, #1
 800a3de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a3e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3e6:	f003 0301 	and.w	r3, r3, #1
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d004      	beq.n	800a3f8 <USB_EPStartXfer+0x2aa>
 800a3ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a3f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a3fc:	b29b      	uxth	r3, r3
 800a3fe:	029b      	lsls	r3, r3, #10
 800a400:	b29a      	uxth	r2, r3
 800a402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a404:	801a      	strh	r2, [r3, #0]
 800a406:	e024      	b.n	800a452 <USB_EPStartXfer+0x304>
 800a408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a40c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	785b      	ldrb	r3, [r3, #1]
 800a414:	2b01      	cmp	r3, #1
 800a416:	d11c      	bne.n	800a452 <USB_EPStartXfer+0x304>
 800a418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a41c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a426:	b29b      	uxth	r3, r3
 800a428:	461a      	mov	r2, r3
 800a42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42c:	4413      	add	r3, r2
 800a42e:	633b      	str	r3, [r7, #48]	; 0x30
 800a430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	00da      	lsls	r2, r3, #3
 800a43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a440:	4413      	add	r3, r2
 800a442:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a446:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a44c:	b29a      	uxth	r2, r3
 800a44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a450:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	895b      	ldrh	r3, [r3, #10]
 800a45e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	6959      	ldr	r1, [r3, #20]
 800a46e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a472:	b29b      	uxth	r3, r3
 800a474:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a478:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a47c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a480:	6800      	ldr	r0, [r0, #0]
 800a482:	f001 fad4 	bl	800ba2e <USB_WritePMA>
            ep->xfer_buff += len;
 800a486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a48a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	695a      	ldr	r2, [r3, #20]
 800a492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a496:	441a      	add	r2, r3
 800a498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a49c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a4a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	6a1a      	ldr	r2, [r3, #32]
 800a4b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	691b      	ldr	r3, [r3, #16]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d90f      	bls.n	800a4e0 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800a4c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	6a1a      	ldr	r2, [r3, #32]
 800a4cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4d0:	1ad2      	subs	r2, r2, r3
 800a4d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	621a      	str	r2, [r3, #32]
 800a4de:	e00e      	b.n	800a4fe <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800a4e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	6a1b      	ldr	r3, [r3, #32]
 800a4ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a4f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a4fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a502:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	785b      	ldrb	r3, [r3, #1]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d16d      	bne.n	800a5ea <USB_EPStartXfer+0x49c>
 800a50e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a512:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	61bb      	str	r3, [r7, #24]
 800a51a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a51e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a528:	b29b      	uxth	r3, r3
 800a52a:	461a      	mov	r2, r3
 800a52c:	69bb      	ldr	r3, [r7, #24]
 800a52e:	4413      	add	r3, r2
 800a530:	61bb      	str	r3, [r7, #24]
 800a532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a536:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	00da      	lsls	r2, r3, #3
 800a540:	69bb      	ldr	r3, [r7, #24]
 800a542:	4413      	add	r3, r2
 800a544:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a548:	617b      	str	r3, [r7, #20]
 800a54a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a54e:	2b3e      	cmp	r3, #62	; 0x3e
 800a550:	d91c      	bls.n	800a58c <USB_EPStartXfer+0x43e>
 800a552:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a556:	095b      	lsrs	r3, r3, #5
 800a558:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a55c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a560:	f003 031f 	and.w	r3, r3, #31
 800a564:	2b00      	cmp	r3, #0
 800a566:	d104      	bne.n	800a572 <USB_EPStartXfer+0x424>
 800a568:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a56c:	3b01      	subs	r3, #1
 800a56e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a576:	b29b      	uxth	r3, r3
 800a578:	029b      	lsls	r3, r3, #10
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a584:	b29a      	uxth	r2, r3
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	801a      	strh	r2, [r3, #0]
 800a58a:	e059      	b.n	800a640 <USB_EPStartXfer+0x4f2>
 800a58c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a590:	2b00      	cmp	r3, #0
 800a592:	d112      	bne.n	800a5ba <USB_EPStartXfer+0x46c>
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	881b      	ldrh	r3, [r3, #0]
 800a598:	b29b      	uxth	r3, r3
 800a59a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	801a      	strh	r2, [r3, #0]
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	881b      	ldrh	r3, [r3, #0]
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5b2:	b29a      	uxth	r2, r3
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	801a      	strh	r2, [r3, #0]
 800a5b8:	e042      	b.n	800a640 <USB_EPStartXfer+0x4f2>
 800a5ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5be:	085b      	lsrs	r3, r3, #1
 800a5c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a5c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5c8:	f003 0301 	and.w	r3, r3, #1
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d004      	beq.n	800a5da <USB_EPStartXfer+0x48c>
 800a5d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a5da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	029b      	lsls	r3, r3, #10
 800a5e2:	b29a      	uxth	r2, r3
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	801a      	strh	r2, [r3, #0]
 800a5e8:	e02a      	b.n	800a640 <USB_EPStartXfer+0x4f2>
 800a5ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	785b      	ldrb	r3, [r3, #1]
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d122      	bne.n	800a640 <USB_EPStartXfer+0x4f2>
 800a5fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	623b      	str	r3, [r7, #32]
 800a606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a60a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a614:	b29b      	uxth	r3, r3
 800a616:	461a      	mov	r2, r3
 800a618:	6a3b      	ldr	r3, [r7, #32]
 800a61a:	4413      	add	r3, r2
 800a61c:	623b      	str	r3, [r7, #32]
 800a61e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	00da      	lsls	r2, r3, #3
 800a62c:	6a3b      	ldr	r3, [r7, #32]
 800a62e:	4413      	add	r3, r2
 800a630:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a634:	61fb      	str	r3, [r7, #28]
 800a636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a63a:	b29a      	uxth	r2, r3
 800a63c:	69fb      	ldr	r3, [r7, #28]
 800a63e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a644:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	891b      	ldrh	r3, [r3, #8]
 800a64c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a654:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	6959      	ldr	r1, [r3, #20]
 800a65c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a660:	b29b      	uxth	r3, r3
 800a662:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a666:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a66a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a66e:	6800      	ldr	r0, [r0, #0]
 800a670:	f001 f9dd 	bl	800ba2e <USB_WritePMA>
 800a674:	e3c6      	b.n	800ae04 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a67a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	785b      	ldrb	r3, [r3, #1]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d16d      	bne.n	800a762 <USB_EPStartXfer+0x614>
 800a686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a68a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	64bb      	str	r3, [r7, #72]	; 0x48
 800a692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a696:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6a0:	b29b      	uxth	r3, r3
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6a6:	4413      	add	r3, r2
 800a6a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	00da      	lsls	r2, r3, #3
 800a6b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6ba:	4413      	add	r3, r2
 800a6bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a6c0:	647b      	str	r3, [r7, #68]	; 0x44
 800a6c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6c6:	2b3e      	cmp	r3, #62	; 0x3e
 800a6c8:	d91c      	bls.n	800a704 <USB_EPStartXfer+0x5b6>
 800a6ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6ce:	095b      	lsrs	r3, r3, #5
 800a6d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a6d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6d8:	f003 031f 	and.w	r3, r3, #31
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d104      	bne.n	800a6ea <USB_EPStartXfer+0x59c>
 800a6e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a6ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	029b      	lsls	r3, r3, #10
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6fc:	b29a      	uxth	r2, r3
 800a6fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a700:	801a      	strh	r2, [r3, #0]
 800a702:	e059      	b.n	800a7b8 <USB_EPStartXfer+0x66a>
 800a704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d112      	bne.n	800a732 <USB_EPStartXfer+0x5e4>
 800a70c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a70e:	881b      	ldrh	r3, [r3, #0]
 800a710:	b29b      	uxth	r3, r3
 800a712:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a716:	b29a      	uxth	r2, r3
 800a718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a71a:	801a      	strh	r2, [r3, #0]
 800a71c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a71e:	881b      	ldrh	r3, [r3, #0]
 800a720:	b29b      	uxth	r3, r3
 800a722:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a726:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a72e:	801a      	strh	r2, [r3, #0]
 800a730:	e042      	b.n	800a7b8 <USB_EPStartXfer+0x66a>
 800a732:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a736:	085b      	lsrs	r3, r3, #1
 800a738:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a73c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a740:	f003 0301 	and.w	r3, r3, #1
 800a744:	2b00      	cmp	r3, #0
 800a746:	d004      	beq.n	800a752 <USB_EPStartXfer+0x604>
 800a748:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a74c:	3301      	adds	r3, #1
 800a74e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a752:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a756:	b29b      	uxth	r3, r3
 800a758:	029b      	lsls	r3, r3, #10
 800a75a:	b29a      	uxth	r2, r3
 800a75c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a75e:	801a      	strh	r2, [r3, #0]
 800a760:	e02a      	b.n	800a7b8 <USB_EPStartXfer+0x66a>
 800a762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	785b      	ldrb	r3, [r3, #1]
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d122      	bne.n	800a7b8 <USB_EPStartXfer+0x66a>
 800a772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a776:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	653b      	str	r3, [r7, #80]	; 0x50
 800a77e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a782:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	461a      	mov	r2, r3
 800a790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a792:	4413      	add	r3, r2
 800a794:	653b      	str	r3, [r7, #80]	; 0x50
 800a796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a79a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	00da      	lsls	r2, r3, #3
 800a7a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7a6:	4413      	add	r3, r2
 800a7a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a7ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7b2:	b29a      	uxth	r2, r3
 800a7b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a7b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	891b      	ldrh	r3, [r3, #8]
 800a7c4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a7c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	6959      	ldr	r1, [r3, #20]
 800a7d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a7de:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a7e2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a7e6:	6800      	ldr	r0, [r0, #0]
 800a7e8:	f001 f921 	bl	800ba2e <USB_WritePMA>
            ep->xfer_buff += len;
 800a7ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	695a      	ldr	r2, [r3, #20]
 800a7f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7fc:	441a      	add	r2, r3
 800a7fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a80a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a80e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	6a1a      	ldr	r2, [r3, #32]
 800a816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a81a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	691b      	ldr	r3, [r3, #16]
 800a822:	429a      	cmp	r2, r3
 800a824:	d90f      	bls.n	800a846 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800a826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a82a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	6a1a      	ldr	r2, [r3, #32]
 800a832:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a836:	1ad2      	subs	r2, r2, r3
 800a838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a83c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	621a      	str	r2, [r3, #32]
 800a844:	e00e      	b.n	800a864 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800a846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a84a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	6a1b      	ldr	r3, [r3, #32]
 800a852:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a85a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2200      	movs	r2, #0
 800a862:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a868:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	643b      	str	r3, [r7, #64]	; 0x40
 800a870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	785b      	ldrb	r3, [r3, #1]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d16d      	bne.n	800a95c <USB_EPStartXfer+0x80e>
 800a880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a884:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a88c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a890:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	461a      	mov	r2, r3
 800a89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a0:	4413      	add	r3, r2
 800a8a2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	00da      	lsls	r2, r3, #3
 800a8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b4:	4413      	add	r3, r2
 800a8b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a8ba:	637b      	str	r3, [r7, #52]	; 0x34
 800a8bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8c0:	2b3e      	cmp	r3, #62	; 0x3e
 800a8c2:	d91c      	bls.n	800a8fe <USB_EPStartXfer+0x7b0>
 800a8c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8c8:	095b      	lsrs	r3, r3, #5
 800a8ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a8ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8d2:	f003 031f 	and.w	r3, r3, #31
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d104      	bne.n	800a8e4 <USB_EPStartXfer+0x796>
 800a8da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8de:	3b01      	subs	r3, #1
 800a8e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a8e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	029b      	lsls	r3, r3, #10
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8f6:	b29a      	uxth	r2, r3
 800a8f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8fa:	801a      	strh	r2, [r3, #0]
 800a8fc:	e053      	b.n	800a9a6 <USB_EPStartXfer+0x858>
 800a8fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a902:	2b00      	cmp	r3, #0
 800a904:	d112      	bne.n	800a92c <USB_EPStartXfer+0x7de>
 800a906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a908:	881b      	ldrh	r3, [r3, #0]
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a910:	b29a      	uxth	r2, r3
 800a912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a914:	801a      	strh	r2, [r3, #0]
 800a916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a918:	881b      	ldrh	r3, [r3, #0]
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a920:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a924:	b29a      	uxth	r2, r3
 800a926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a928:	801a      	strh	r2, [r3, #0]
 800a92a:	e03c      	b.n	800a9a6 <USB_EPStartXfer+0x858>
 800a92c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a930:	085b      	lsrs	r3, r3, #1
 800a932:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a936:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a93a:	f003 0301 	and.w	r3, r3, #1
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d004      	beq.n	800a94c <USB_EPStartXfer+0x7fe>
 800a942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a946:	3301      	adds	r3, #1
 800a948:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a94c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a950:	b29b      	uxth	r3, r3
 800a952:	029b      	lsls	r3, r3, #10
 800a954:	b29a      	uxth	r2, r3
 800a956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a958:	801a      	strh	r2, [r3, #0]
 800a95a:	e024      	b.n	800a9a6 <USB_EPStartXfer+0x858>
 800a95c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	785b      	ldrb	r3, [r3, #1]
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d11c      	bne.n	800a9a6 <USB_EPStartXfer+0x858>
 800a96c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a970:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	461a      	mov	r2, r3
 800a97e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a980:	4413      	add	r3, r2
 800a982:	643b      	str	r3, [r7, #64]	; 0x40
 800a984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	00da      	lsls	r2, r3, #3
 800a992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a994:	4413      	add	r3, r2
 800a996:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a99a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a99c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9a0:	b29a      	uxth	r2, r3
 800a9a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a9a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	895b      	ldrh	r3, [r3, #10]
 800a9b2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a9b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	6959      	ldr	r1, [r3, #20]
 800a9c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a9cc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a9d0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a9d4:	6800      	ldr	r0, [r0, #0]
 800a9d6:	f001 f82a 	bl	800ba2e <USB_WritePMA>
 800a9da:	e213      	b.n	800ae04 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a9dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	6a1b      	ldr	r3, [r3, #32]
 800a9e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a9ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9f4:	681a      	ldr	r2, [r3, #0]
 800a9f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	4413      	add	r3, r2
 800aa06:	881b      	ldrh	r3, [r3, #0]
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800aa0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa12:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800aa16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	009b      	lsls	r3, r3, #2
 800aa2e:	441a      	add	r2, r3
 800aa30:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800aa34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800aa48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	461a      	mov	r2, r3
 800aa66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa68:	4413      	add	r3, r2
 800aa6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	00da      	lsls	r2, r3, #3
 800aa7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa7c:	4413      	add	r3, r2
 800aa7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa82:	65bb      	str	r3, [r7, #88]	; 0x58
 800aa84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa88:	b29a      	uxth	r2, r3
 800aa8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa8c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800aa8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	891b      	ldrh	r3, [r3, #8]
 800aa9a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	6959      	ldr	r1, [r3, #20]
 800aaaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aab4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800aab8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800aabc:	6800      	ldr	r0, [r0, #0]
 800aabe:	f000 ffb6 	bl	800ba2e <USB_WritePMA>
 800aac2:	e19f      	b.n	800ae04 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800aac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aac8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	6a1a      	ldr	r2, [r3, #32]
 800aad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aad4:	1ad2      	subs	r2, r2, r3
 800aad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800aae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aae6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	009b      	lsls	r3, r3, #2
 800aafa:	4413      	add	r3, r2
 800aafc:	881b      	ldrh	r3, [r3, #0]
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	f000 80bc 	beq.w	800ac82 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ab0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	673b      	str	r3, [r7, #112]	; 0x70
 800ab16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	785b      	ldrb	r3, [r3, #1]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d16d      	bne.n	800ac02 <USB_EPStartXfer+0xab4>
 800ab26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	461a      	mov	r2, r3
 800ab44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab46:	4413      	add	r3, r2
 800ab48:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	00da      	lsls	r2, r3, #3
 800ab58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab5a:	4413      	add	r3, r2
 800ab5c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ab60:	667b      	str	r3, [r7, #100]	; 0x64
 800ab62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab66:	2b3e      	cmp	r3, #62	; 0x3e
 800ab68:	d91c      	bls.n	800aba4 <USB_EPStartXfer+0xa56>
 800ab6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab6e:	095b      	lsrs	r3, r3, #5
 800ab70:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ab74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab78:	f003 031f 	and.w	r3, r3, #31
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d104      	bne.n	800ab8a <USB_EPStartXfer+0xa3c>
 800ab80:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ab84:	3b01      	subs	r3, #1
 800ab86:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ab8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	029b      	lsls	r3, r3, #10
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab9c:	b29a      	uxth	r2, r3
 800ab9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aba0:	801a      	strh	r2, [r3, #0]
 800aba2:	e053      	b.n	800ac4c <USB_EPStartXfer+0xafe>
 800aba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d112      	bne.n	800abd2 <USB_EPStartXfer+0xa84>
 800abac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abae:	881b      	ldrh	r3, [r3, #0]
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800abb6:	b29a      	uxth	r2, r3
 800abb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abba:	801a      	strh	r2, [r3, #0]
 800abbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abbe:	881b      	ldrh	r3, [r3, #0]
 800abc0:	b29b      	uxth	r3, r3
 800abc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abca:	b29a      	uxth	r2, r3
 800abcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abce:	801a      	strh	r2, [r3, #0]
 800abd0:	e03c      	b.n	800ac4c <USB_EPStartXfer+0xafe>
 800abd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abd6:	085b      	lsrs	r3, r3, #1
 800abd8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800abdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abe0:	f003 0301 	and.w	r3, r3, #1
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d004      	beq.n	800abf2 <USB_EPStartXfer+0xaa4>
 800abe8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800abec:	3301      	adds	r3, #1
 800abee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800abf2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	029b      	lsls	r3, r3, #10
 800abfa:	b29a      	uxth	r2, r3
 800abfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abfe:	801a      	strh	r2, [r3, #0]
 800ac00:	e024      	b.n	800ac4c <USB_EPStartXfer+0xafe>
 800ac02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	785b      	ldrb	r3, [r3, #1]
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	d11c      	bne.n	800ac4c <USB_EPStartXfer+0xafe>
 800ac12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	461a      	mov	r2, r3
 800ac24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac26:	4413      	add	r3, r2
 800ac28:	673b      	str	r3, [r7, #112]	; 0x70
 800ac2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	00da      	lsls	r2, r3, #3
 800ac38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac3a:	4413      	add	r3, r2
 800ac3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ac40:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac46:	b29a      	uxth	r2, r3
 800ac48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac4a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ac4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	895b      	ldrh	r3, [r3, #10]
 800ac58:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ac5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	6959      	ldr	r1, [r3, #20]
 800ac68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ac72:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ac76:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ac7a:	6800      	ldr	r0, [r0, #0]
 800ac7c:	f000 fed7 	bl	800ba2e <USB_WritePMA>
 800ac80:	e0c0      	b.n	800ae04 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ac82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	785b      	ldrb	r3, [r3, #1]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d16d      	bne.n	800ad6e <USB_EPStartXfer+0xc20>
 800ac92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ac9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aca2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acac:	b29b      	uxth	r3, r3
 800acae:	461a      	mov	r2, r3
 800acb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800acb2:	4413      	add	r3, r2
 800acb4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800acb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	781b      	ldrb	r3, [r3, #0]
 800acc2:	00da      	lsls	r2, r3, #3
 800acc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800acc6:	4413      	add	r3, r2
 800acc8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800accc:	67bb      	str	r3, [r7, #120]	; 0x78
 800acce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acd2:	2b3e      	cmp	r3, #62	; 0x3e
 800acd4:	d91c      	bls.n	800ad10 <USB_EPStartXfer+0xbc2>
 800acd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acda:	095b      	lsrs	r3, r3, #5
 800acdc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ace0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ace4:	f003 031f 	and.w	r3, r3, #31
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d104      	bne.n	800acf6 <USB_EPStartXfer+0xba8>
 800acec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800acf0:	3b01      	subs	r3, #1
 800acf2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800acf6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	029b      	lsls	r3, r3, #10
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad08:	b29a      	uxth	r2, r3
 800ad0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad0c:	801a      	strh	r2, [r3, #0]
 800ad0e:	e05f      	b.n	800add0 <USB_EPStartXfer+0xc82>
 800ad10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d112      	bne.n	800ad3e <USB_EPStartXfer+0xbf0>
 800ad18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad1a:	881b      	ldrh	r3, [r3, #0]
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ad22:	b29a      	uxth	r2, r3
 800ad24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad26:	801a      	strh	r2, [r3, #0]
 800ad28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad2a:	881b      	ldrh	r3, [r3, #0]
 800ad2c:	b29b      	uxth	r3, r3
 800ad2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad36:	b29a      	uxth	r2, r3
 800ad38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad3a:	801a      	strh	r2, [r3, #0]
 800ad3c:	e048      	b.n	800add0 <USB_EPStartXfer+0xc82>
 800ad3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad42:	085b      	lsrs	r3, r3, #1
 800ad44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ad48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad4c:	f003 0301 	and.w	r3, r3, #1
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d004      	beq.n	800ad5e <USB_EPStartXfer+0xc10>
 800ad54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ad58:	3301      	adds	r3, #1
 800ad5a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ad5e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ad62:	b29b      	uxth	r3, r3
 800ad64:	029b      	lsls	r3, r3, #10
 800ad66:	b29a      	uxth	r2, r3
 800ad68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad6a:	801a      	strh	r2, [r3, #0]
 800ad6c:	e030      	b.n	800add0 <USB_EPStartXfer+0xc82>
 800ad6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	785b      	ldrb	r3, [r3, #1]
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d128      	bne.n	800add0 <USB_EPStartXfer+0xc82>
 800ad7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ad8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ada2:	4413      	add	r3, r2
 800ada4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ada8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	00da      	lsls	r2, r3, #3
 800adb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800adba:	4413      	add	r3, r2
 800adbc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800adc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800adc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adc8:	b29a      	uxth	r2, r3
 800adca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800adce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800add0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800add4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	891b      	ldrh	r3, [r3, #8]
 800addc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ade0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ade4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	6959      	ldr	r1, [r3, #20]
 800adec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800adf6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800adfa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800adfe:	6800      	ldr	r0, [r0, #0]
 800ae00:	f000 fe15 	bl	800ba2e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ae04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae0c:	681a      	ldr	r2, [r3, #0]
 800ae0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	4413      	add	r3, r2
 800ae1e:	881b      	ldrh	r3, [r3, #0]
 800ae20:	b29b      	uxth	r3, r3
 800ae22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae2a:	817b      	strh	r3, [r7, #10]
 800ae2c:	897b      	ldrh	r3, [r7, #10]
 800ae2e:	f083 0310 	eor.w	r3, r3, #16
 800ae32:	817b      	strh	r3, [r7, #10]
 800ae34:	897b      	ldrh	r3, [r7, #10]
 800ae36:	f083 0320 	eor.w	r3, r3, #32
 800ae3a:	817b      	strh	r3, [r7, #10]
 800ae3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae44:	681a      	ldr	r2, [r3, #0]
 800ae46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	009b      	lsls	r3, r3, #2
 800ae54:	441a      	add	r2, r3
 800ae56:	897b      	ldrh	r3, [r7, #10]
 800ae58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae68:	b29b      	uxth	r3, r3
 800ae6a:	8013      	strh	r3, [r2, #0]
 800ae6c:	f000 bc9f 	b.w	800b7ae <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ae70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	7b1b      	ldrb	r3, [r3, #12]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	f040 80ae 	bne.w	800afde <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ae82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	699a      	ldr	r2, [r3, #24]
 800ae8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	691b      	ldr	r3, [r3, #16]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d917      	bls.n	800aece <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800ae9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aea2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	691b      	ldr	r3, [r3, #16]
 800aeaa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800aeae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	699a      	ldr	r2, [r3, #24]
 800aeba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aebe:	1ad2      	subs	r2, r2, r3
 800aec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aec4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	619a      	str	r2, [r3, #24]
 800aecc:	e00e      	b.n	800aeec <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800aece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	699b      	ldr	r3, [r3, #24]
 800aeda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800aede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2200      	movs	r2, #0
 800aeea:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800aeec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aef0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aefa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aefe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af08:	b29b      	uxth	r3, r3
 800af0a:	461a      	mov	r2, r3
 800af0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800af10:	4413      	add	r3, r2
 800af12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800af16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	00da      	lsls	r2, r3, #3
 800af24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800af28:	4413      	add	r3, r2
 800af2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800af32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af36:	2b3e      	cmp	r3, #62	; 0x3e
 800af38:	d91d      	bls.n	800af76 <USB_EPStartXfer+0xe28>
 800af3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af3e:	095b      	lsrs	r3, r3, #5
 800af40:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800af44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af48:	f003 031f 	and.w	r3, r3, #31
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d104      	bne.n	800af5a <USB_EPStartXfer+0xe0c>
 800af50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800af54:	3b01      	subs	r3, #1
 800af56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800af5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800af5e:	b29b      	uxth	r3, r3
 800af60:	029b      	lsls	r3, r3, #10
 800af62:	b29b      	uxth	r3, r3
 800af64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af6c:	b29a      	uxth	r2, r3
 800af6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af72:	801a      	strh	r2, [r3, #0]
 800af74:	e3e1      	b.n	800b73a <USB_EPStartXfer+0x15ec>
 800af76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d116      	bne.n	800afac <USB_EPStartXfer+0xe5e>
 800af7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af82:	881b      	ldrh	r3, [r3, #0]
 800af84:	b29b      	uxth	r3, r3
 800af86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800af8a:	b29a      	uxth	r2, r3
 800af8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af90:	801a      	strh	r2, [r3, #0]
 800af92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af96:	881b      	ldrh	r3, [r3, #0]
 800af98:	b29b      	uxth	r3, r3
 800af9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afa2:	b29a      	uxth	r2, r3
 800afa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afa8:	801a      	strh	r2, [r3, #0]
 800afaa:	e3c6      	b.n	800b73a <USB_EPStartXfer+0x15ec>
 800afac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afb0:	085b      	lsrs	r3, r3, #1
 800afb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800afb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afba:	f003 0301 	and.w	r3, r3, #1
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d004      	beq.n	800afcc <USB_EPStartXfer+0xe7e>
 800afc2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800afc6:	3301      	adds	r3, #1
 800afc8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800afcc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	029b      	lsls	r3, r3, #10
 800afd4:	b29a      	uxth	r2, r3
 800afd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afda:	801a      	strh	r2, [r3, #0]
 800afdc:	e3ad      	b.n	800b73a <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800afde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	78db      	ldrb	r3, [r3, #3]
 800afea:	2b02      	cmp	r3, #2
 800afec:	f040 8200 	bne.w	800b3f0 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800aff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	785b      	ldrb	r3, [r3, #1]
 800affc:	2b00      	cmp	r3, #0
 800affe:	f040 8091 	bne.w	800b124 <USB_EPStartXfer+0xfd6>
 800b002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b006:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b014:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b01e:	b29b      	uxth	r3, r3
 800b020:	461a      	mov	r2, r3
 800b022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b026:	4413      	add	r3, r2
 800b028:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b02c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b030:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	00da      	lsls	r2, r3, #3
 800b03a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b03e:	4413      	add	r3, r2
 800b040:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b044:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b048:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b04c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	691b      	ldr	r3, [r3, #16]
 800b054:	2b3e      	cmp	r3, #62	; 0x3e
 800b056:	d925      	bls.n	800b0a4 <USB_EPStartXfer+0xf56>
 800b058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b05c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	691b      	ldr	r3, [r3, #16]
 800b064:	095b      	lsrs	r3, r3, #5
 800b066:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b06a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b06e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	691b      	ldr	r3, [r3, #16]
 800b076:	f003 031f 	and.w	r3, r3, #31
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d104      	bne.n	800b088 <USB_EPStartXfer+0xf3a>
 800b07e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b082:	3b01      	subs	r3, #1
 800b084:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b08c:	b29b      	uxth	r3, r3
 800b08e:	029b      	lsls	r3, r3, #10
 800b090:	b29b      	uxth	r3, r3
 800b092:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b096:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b09a:	b29a      	uxth	r2, r3
 800b09c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0a0:	801a      	strh	r2, [r3, #0]
 800b0a2:	e074      	b.n	800b18e <USB_EPStartXfer+0x1040>
 800b0a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	691b      	ldr	r3, [r3, #16]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d116      	bne.n	800b0e2 <USB_EPStartXfer+0xf94>
 800b0b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0b8:	881b      	ldrh	r3, [r3, #0]
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b0c0:	b29a      	uxth	r2, r3
 800b0c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0c6:	801a      	strh	r2, [r3, #0]
 800b0c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0cc:	881b      	ldrh	r3, [r3, #0]
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0d8:	b29a      	uxth	r2, r3
 800b0da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0de:	801a      	strh	r2, [r3, #0]
 800b0e0:	e055      	b.n	800b18e <USB_EPStartXfer+0x1040>
 800b0e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	691b      	ldr	r3, [r3, #16]
 800b0ee:	085b      	lsrs	r3, r3, #1
 800b0f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b0f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	691b      	ldr	r3, [r3, #16]
 800b100:	f003 0301 	and.w	r3, r3, #1
 800b104:	2b00      	cmp	r3, #0
 800b106:	d004      	beq.n	800b112 <USB_EPStartXfer+0xfc4>
 800b108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b10c:	3301      	adds	r3, #1
 800b10e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b116:	b29b      	uxth	r3, r3
 800b118:	029b      	lsls	r3, r3, #10
 800b11a:	b29a      	uxth	r2, r3
 800b11c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b120:	801a      	strh	r2, [r3, #0]
 800b122:	e034      	b.n	800b18e <USB_EPStartXfer+0x1040>
 800b124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	785b      	ldrb	r3, [r3, #1]
 800b130:	2b01      	cmp	r3, #1
 800b132:	d12c      	bne.n	800b18e <USB_EPStartXfer+0x1040>
 800b134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b138:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b146:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b150:	b29b      	uxth	r3, r3
 800b152:	461a      	mov	r2, r3
 800b154:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b158:	4413      	add	r3, r2
 800b15a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b15e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	00da      	lsls	r2, r3, #3
 800b16c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b170:	4413      	add	r3, r2
 800b172:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b176:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b17a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b17e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	691b      	ldr	r3, [r3, #16]
 800b186:	b29a      	uxth	r2, r3
 800b188:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b18c:	801a      	strh	r2, [r3, #0]
 800b18e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b192:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b19c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	785b      	ldrb	r3, [r3, #1]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	f040 8091 	bne.w	800b2d0 <USB_EPStartXfer+0x1182>
 800b1ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b1bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1ca:	b29b      	uxth	r3, r3
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b1d2:	4413      	add	r3, r2
 800b1d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b1d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	781b      	ldrb	r3, [r3, #0]
 800b1e4:	00da      	lsls	r2, r3, #3
 800b1e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b1ea:	4413      	add	r3, r2
 800b1ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b1f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b1f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	691b      	ldr	r3, [r3, #16]
 800b200:	2b3e      	cmp	r3, #62	; 0x3e
 800b202:	d925      	bls.n	800b250 <USB_EPStartXfer+0x1102>
 800b204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	691b      	ldr	r3, [r3, #16]
 800b210:	095b      	lsrs	r3, r3, #5
 800b212:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b21a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	691b      	ldr	r3, [r3, #16]
 800b222:	f003 031f 	and.w	r3, r3, #31
 800b226:	2b00      	cmp	r3, #0
 800b228:	d104      	bne.n	800b234 <USB_EPStartXfer+0x10e6>
 800b22a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b22e:	3b01      	subs	r3, #1
 800b230:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b238:	b29b      	uxth	r3, r3
 800b23a:	029b      	lsls	r3, r3, #10
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b242:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b246:	b29a      	uxth	r2, r3
 800b248:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b24c:	801a      	strh	r2, [r3, #0]
 800b24e:	e06d      	b.n	800b32c <USB_EPStartXfer+0x11de>
 800b250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b254:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	691b      	ldr	r3, [r3, #16]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d116      	bne.n	800b28e <USB_EPStartXfer+0x1140>
 800b260:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b264:	881b      	ldrh	r3, [r3, #0]
 800b266:	b29b      	uxth	r3, r3
 800b268:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b26c:	b29a      	uxth	r2, r3
 800b26e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b272:	801a      	strh	r2, [r3, #0]
 800b274:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b278:	881b      	ldrh	r3, [r3, #0]
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b280:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b284:	b29a      	uxth	r2, r3
 800b286:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b28a:	801a      	strh	r2, [r3, #0]
 800b28c:	e04e      	b.n	800b32c <USB_EPStartXfer+0x11de>
 800b28e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	691b      	ldr	r3, [r3, #16]
 800b29a:	085b      	lsrs	r3, r3, #1
 800b29c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b2a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	691b      	ldr	r3, [r3, #16]
 800b2ac:	f003 0301 	and.w	r3, r3, #1
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d004      	beq.n	800b2be <USB_EPStartXfer+0x1170>
 800b2b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b2be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	029b      	lsls	r3, r3, #10
 800b2c6:	b29a      	uxth	r2, r3
 800b2c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b2cc:	801a      	strh	r2, [r3, #0]
 800b2ce:	e02d      	b.n	800b32c <USB_EPStartXfer+0x11de>
 800b2d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	785b      	ldrb	r3, [r3, #1]
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d125      	bne.n	800b32c <USB_EPStartXfer+0x11de>
 800b2e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2ee:	b29b      	uxth	r3, r3
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b2f6:	4413      	add	r3, r2
 800b2f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b2fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b300:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	00da      	lsls	r2, r3, #3
 800b30a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b30e:	4413      	add	r3, r2
 800b310:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b314:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b31c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	691b      	ldr	r3, [r3, #16]
 800b324:	b29a      	uxth	r2, r3
 800b326:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b32a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b32c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b330:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	69db      	ldr	r3, [r3, #28]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	f000 81fe 	beq.w	800b73a <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b33e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b342:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b34c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	781b      	ldrb	r3, [r3, #0]
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	4413      	add	r3, r2
 800b358:	881b      	ldrh	r3, [r3, #0]
 800b35a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b35e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b366:	2b00      	cmp	r3, #0
 800b368:	d005      	beq.n	800b376 <USB_EPStartXfer+0x1228>
 800b36a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b36e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b372:	2b00      	cmp	r3, #0
 800b374:	d10d      	bne.n	800b392 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b376:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b37a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b37e:	2b00      	cmp	r3, #0
 800b380:	f040 81db 	bne.w	800b73a <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b384:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	f040 81d4 	bne.w	800b73a <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b396:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	4413      	add	r3, r2
 800b3ac:	881b      	ldrh	r3, [r3, #0]
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3b8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800b3bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	009b      	lsls	r3, r3, #2
 800b3d4:	441a      	add	r2, r3
 800b3d6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b3da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	8013      	strh	r3, [r2, #0]
 800b3ee:	e1a4      	b.n	800b73a <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b3f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	78db      	ldrb	r3, [r3, #3]
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	f040 819a 	bne.w	800b736 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b406:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	699a      	ldr	r2, [r3, #24]
 800b40e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b412:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	691b      	ldr	r3, [r3, #16]
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d917      	bls.n	800b44e <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800b41e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	691b      	ldr	r3, [r3, #16]
 800b42a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800b42e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	699a      	ldr	r2, [r3, #24]
 800b43a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b43e:	1ad2      	subs	r2, r2, r3
 800b440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	619a      	str	r2, [r3, #24]
 800b44c:	e00e      	b.n	800b46c <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800b44e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b452:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	699b      	ldr	r3, [r3, #24]
 800b45a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800b45e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	2200      	movs	r2, #0
 800b46a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b46c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	785b      	ldrb	r3, [r3, #1]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d178      	bne.n	800b56e <USB_EPStartXfer+0x1420>
 800b47c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b480:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b48a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b48e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b498:	b29b      	uxth	r3, r3
 800b49a:	461a      	mov	r2, r3
 800b49c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b4a0:	4413      	add	r3, r2
 800b4a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b4a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	00da      	lsls	r2, r3, #3
 800b4b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b4b8:	4413      	add	r3, r2
 800b4ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b4be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b4c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4c6:	2b3e      	cmp	r3, #62	; 0x3e
 800b4c8:	d91d      	bls.n	800b506 <USB_EPStartXfer+0x13b8>
 800b4ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ce:	095b      	lsrs	r3, r3, #5
 800b4d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b4d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4d8:	f003 031f 	and.w	r3, r3, #31
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d104      	bne.n	800b4ea <USB_EPStartXfer+0x139c>
 800b4e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b4e4:	3b01      	subs	r3, #1
 800b4e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b4ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b4ee:	b29b      	uxth	r3, r3
 800b4f0:	029b      	lsls	r3, r3, #10
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4fc:	b29a      	uxth	r2, r3
 800b4fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b502:	801a      	strh	r2, [r3, #0]
 800b504:	e064      	b.n	800b5d0 <USB_EPStartXfer+0x1482>
 800b506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d116      	bne.n	800b53c <USB_EPStartXfer+0x13ee>
 800b50e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b512:	881b      	ldrh	r3, [r3, #0]
 800b514:	b29b      	uxth	r3, r3
 800b516:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b51a:	b29a      	uxth	r2, r3
 800b51c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b520:	801a      	strh	r2, [r3, #0]
 800b522:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b526:	881b      	ldrh	r3, [r3, #0]
 800b528:	b29b      	uxth	r3, r3
 800b52a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b52e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b532:	b29a      	uxth	r2, r3
 800b534:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b538:	801a      	strh	r2, [r3, #0]
 800b53a:	e049      	b.n	800b5d0 <USB_EPStartXfer+0x1482>
 800b53c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b540:	085b      	lsrs	r3, r3, #1
 800b542:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b54a:	f003 0301 	and.w	r3, r3, #1
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d004      	beq.n	800b55c <USB_EPStartXfer+0x140e>
 800b552:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b556:	3301      	adds	r3, #1
 800b558:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b55c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b560:	b29b      	uxth	r3, r3
 800b562:	029b      	lsls	r3, r3, #10
 800b564:	b29a      	uxth	r2, r3
 800b566:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b56a:	801a      	strh	r2, [r3, #0]
 800b56c:	e030      	b.n	800b5d0 <USB_EPStartXfer+0x1482>
 800b56e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	785b      	ldrb	r3, [r3, #1]
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	d128      	bne.n	800b5d0 <USB_EPStartXfer+0x1482>
 800b57e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b582:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b58c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b590:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b59a:	b29b      	uxth	r3, r3
 800b59c:	461a      	mov	r2, r3
 800b59e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b5a2:	4413      	add	r3, r2
 800b5a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b5a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	00da      	lsls	r2, r3, #3
 800b5b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b5ba:	4413      	add	r3, r2
 800b5bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b5c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b5c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5c8:	b29a      	uxth	r2, r3
 800b5ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b5ce:	801a      	strh	r2, [r3, #0]
 800b5d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b5de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	785b      	ldrb	r3, [r3, #1]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d178      	bne.n	800b6e0 <USB_EPStartXfer+0x1592>
 800b5ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b5fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b600:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b60a:	b29b      	uxth	r3, r3
 800b60c:	461a      	mov	r2, r3
 800b60e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b612:	4413      	add	r3, r2
 800b614:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b61c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	00da      	lsls	r2, r3, #3
 800b626:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b62a:	4413      	add	r3, r2
 800b62c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b630:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b638:	2b3e      	cmp	r3, #62	; 0x3e
 800b63a:	d91d      	bls.n	800b678 <USB_EPStartXfer+0x152a>
 800b63c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b640:	095b      	lsrs	r3, r3, #5
 800b642:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b64a:	f003 031f 	and.w	r3, r3, #31
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d104      	bne.n	800b65c <USB_EPStartXfer+0x150e>
 800b652:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b656:	3b01      	subs	r3, #1
 800b658:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b65c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b660:	b29b      	uxth	r3, r3
 800b662:	029b      	lsls	r3, r3, #10
 800b664:	b29b      	uxth	r3, r3
 800b666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b66a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b66e:	b29a      	uxth	r2, r3
 800b670:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b674:	801a      	strh	r2, [r3, #0]
 800b676:	e060      	b.n	800b73a <USB_EPStartXfer+0x15ec>
 800b678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d116      	bne.n	800b6ae <USB_EPStartXfer+0x1560>
 800b680:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b684:	881b      	ldrh	r3, [r3, #0]
 800b686:	b29b      	uxth	r3, r3
 800b688:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b68c:	b29a      	uxth	r2, r3
 800b68e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b692:	801a      	strh	r2, [r3, #0]
 800b694:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b698:	881b      	ldrh	r3, [r3, #0]
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6a4:	b29a      	uxth	r2, r3
 800b6a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b6aa:	801a      	strh	r2, [r3, #0]
 800b6ac:	e045      	b.n	800b73a <USB_EPStartXfer+0x15ec>
 800b6ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6b2:	085b      	lsrs	r3, r3, #1
 800b6b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b6b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6bc:	f003 0301 	and.w	r3, r3, #1
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d004      	beq.n	800b6ce <USB_EPStartXfer+0x1580>
 800b6c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b6ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6d2:	b29b      	uxth	r3, r3
 800b6d4:	029b      	lsls	r3, r3, #10
 800b6d6:	b29a      	uxth	r2, r3
 800b6d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b6dc:	801a      	strh	r2, [r3, #0]
 800b6de:	e02c      	b.n	800b73a <USB_EPStartXfer+0x15ec>
 800b6e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	785b      	ldrb	r3, [r3, #1]
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	d124      	bne.n	800b73a <USB_EPStartXfer+0x15ec>
 800b6f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6fe:	b29b      	uxth	r3, r3
 800b700:	461a      	mov	r2, r3
 800b702:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b706:	4413      	add	r3, r2
 800b708:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b70c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	781b      	ldrb	r3, [r3, #0]
 800b718:	00da      	lsls	r2, r3, #3
 800b71a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b71e:	4413      	add	r3, r2
 800b720:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b724:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b72c:	b29a      	uxth	r2, r3
 800b72e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b732:	801a      	strh	r2, [r3, #0]
 800b734:	e001      	b.n	800b73a <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800b736:	2301      	movs	r3, #1
 800b738:	e03a      	b.n	800b7b0 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b73a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b73e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b742:	681a      	ldr	r2, [r3, #0]
 800b744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b748:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	781b      	ldrb	r3, [r3, #0]
 800b750:	009b      	lsls	r3, r3, #2
 800b752:	4413      	add	r3, r2
 800b754:	881b      	ldrh	r3, [r3, #0]
 800b756:	b29b      	uxth	r3, r3
 800b758:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b75c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b760:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b764:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b768:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b76c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b770:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b774:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b778:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b77c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b780:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b784:	681a      	ldr	r2, [r3, #0]
 800b786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b78a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	009b      	lsls	r3, r3, #2
 800b794:	441a      	add	r2, r3
 800b796:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b79a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b79e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7aa:	b29b      	uxth	r3, r3
 800b7ac:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b7ae:	2300      	movs	r3, #0
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}

0800b7ba <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b7ba:	b480      	push	{r7}
 800b7bc:	b085      	sub	sp, #20
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	6078      	str	r0, [r7, #4]
 800b7c2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	785b      	ldrb	r3, [r3, #1]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d020      	beq.n	800b80e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b7cc:	687a      	ldr	r2, [r7, #4]
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	009b      	lsls	r3, r3, #2
 800b7d4:	4413      	add	r3, r2
 800b7d6:	881b      	ldrh	r3, [r3, #0]
 800b7d8:	b29b      	uxth	r3, r3
 800b7da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7e2:	81bb      	strh	r3, [r7, #12]
 800b7e4:	89bb      	ldrh	r3, [r7, #12]
 800b7e6:	f083 0310 	eor.w	r3, r3, #16
 800b7ea:	81bb      	strh	r3, [r7, #12]
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	009b      	lsls	r3, r3, #2
 800b7f4:	441a      	add	r2, r3
 800b7f6:	89bb      	ldrh	r3, [r7, #12]
 800b7f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b800:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b808:	b29b      	uxth	r3, r3
 800b80a:	8013      	strh	r3, [r2, #0]
 800b80c:	e01f      	b.n	800b84e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b80e:	687a      	ldr	r2, [r7, #4]
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	781b      	ldrb	r3, [r3, #0]
 800b814:	009b      	lsls	r3, r3, #2
 800b816:	4413      	add	r3, r2
 800b818:	881b      	ldrh	r3, [r3, #0]
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b824:	81fb      	strh	r3, [r7, #14]
 800b826:	89fb      	ldrh	r3, [r7, #14]
 800b828:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b82c:	81fb      	strh	r3, [r7, #14]
 800b82e:	687a      	ldr	r2, [r7, #4]
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	009b      	lsls	r3, r3, #2
 800b836:	441a      	add	r2, r3
 800b838:	89fb      	ldrh	r3, [r7, #14]
 800b83a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b83e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b84e:	2300      	movs	r3, #0
}
 800b850:	4618      	mov	r0, r3
 800b852:	3714      	adds	r7, #20
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b087      	sub	sp, #28
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	7b1b      	ldrb	r3, [r3, #12]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	f040 809d 	bne.w	800b9aa <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	785b      	ldrb	r3, [r3, #1]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d04c      	beq.n	800b912 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b878:	687a      	ldr	r2, [r7, #4]
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	4413      	add	r3, r2
 800b882:	881b      	ldrh	r3, [r3, #0]
 800b884:	823b      	strh	r3, [r7, #16]
 800b886:	8a3b      	ldrh	r3, [r7, #16]
 800b888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d01b      	beq.n	800b8c8 <USB_EPClearStall+0x6c>
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	009b      	lsls	r3, r3, #2
 800b898:	4413      	add	r3, r2
 800b89a:	881b      	ldrh	r3, [r3, #0]
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8a6:	81fb      	strh	r3, [r7, #14]
 800b8a8:	687a      	ldr	r2, [r7, #4]
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	009b      	lsls	r3, r3, #2
 800b8b0:	441a      	add	r2, r3
 800b8b2:	89fb      	ldrh	r3, [r7, #14]
 800b8b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b8b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b8bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b8c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b8c4:	b29b      	uxth	r3, r3
 800b8c6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	78db      	ldrb	r3, [r3, #3]
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d06c      	beq.n	800b9aa <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b8d0:	687a      	ldr	r2, [r7, #4]
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	009b      	lsls	r3, r3, #2
 800b8d8:	4413      	add	r3, r2
 800b8da:	881b      	ldrh	r3, [r3, #0]
 800b8dc:	b29b      	uxth	r3, r3
 800b8de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8e6:	81bb      	strh	r3, [r7, #12]
 800b8e8:	89bb      	ldrh	r3, [r7, #12]
 800b8ea:	f083 0320 	eor.w	r3, r3, #32
 800b8ee:	81bb      	strh	r3, [r7, #12]
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	009b      	lsls	r3, r3, #2
 800b8f8:	441a      	add	r2, r3
 800b8fa:	89bb      	ldrh	r3, [r7, #12]
 800b8fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b90c:	b29b      	uxth	r3, r3
 800b90e:	8013      	strh	r3, [r2, #0]
 800b910:	e04b      	b.n	800b9aa <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	781b      	ldrb	r3, [r3, #0]
 800b918:	009b      	lsls	r3, r3, #2
 800b91a:	4413      	add	r3, r2
 800b91c:	881b      	ldrh	r3, [r3, #0]
 800b91e:	82fb      	strh	r3, [r7, #22]
 800b920:	8afb      	ldrh	r3, [r7, #22]
 800b922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b926:	2b00      	cmp	r3, #0
 800b928:	d01b      	beq.n	800b962 <USB_EPClearStall+0x106>
 800b92a:	687a      	ldr	r2, [r7, #4]
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	009b      	lsls	r3, r3, #2
 800b932:	4413      	add	r3, r2
 800b934:	881b      	ldrh	r3, [r3, #0]
 800b936:	b29b      	uxth	r3, r3
 800b938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b93c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b940:	82bb      	strh	r3, [r7, #20]
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	781b      	ldrb	r3, [r3, #0]
 800b948:	009b      	lsls	r3, r3, #2
 800b94a:	441a      	add	r2, r3
 800b94c:	8abb      	ldrh	r3, [r7, #20]
 800b94e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b956:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b95a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b95e:	b29b      	uxth	r3, r3
 800b960:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b962:	687a      	ldr	r2, [r7, #4]
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	781b      	ldrb	r3, [r3, #0]
 800b968:	009b      	lsls	r3, r3, #2
 800b96a:	4413      	add	r3, r2
 800b96c:	881b      	ldrh	r3, [r3, #0]
 800b96e:	b29b      	uxth	r3, r3
 800b970:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b978:	827b      	strh	r3, [r7, #18]
 800b97a:	8a7b      	ldrh	r3, [r7, #18]
 800b97c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b980:	827b      	strh	r3, [r7, #18]
 800b982:	8a7b      	ldrh	r3, [r7, #18]
 800b984:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b988:	827b      	strh	r3, [r7, #18]
 800b98a:	687a      	ldr	r2, [r7, #4]
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	781b      	ldrb	r3, [r3, #0]
 800b990:	009b      	lsls	r3, r3, #2
 800b992:	441a      	add	r2, r3
 800b994:	8a7b      	ldrh	r3, [r7, #18]
 800b996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b99a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b99e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b9aa:	2300      	movs	r3, #0
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	371c      	adds	r7, #28
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr

0800b9b8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b083      	sub	sp, #12
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	460b      	mov	r3, r1
 800b9c2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b9c4:	78fb      	ldrb	r3, [r7, #3]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d103      	bne.n	800b9d2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2280      	movs	r2, #128	; 0x80
 800b9ce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b9d2:	2300      	movs	r3, #0
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	370c      	adds	r7, #12
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr

0800b9e0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b083      	sub	sp, #12
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b9ee:	b29b      	uxth	r3, r3
 800b9f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9f8:	b29a      	uxth	r2, r3
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800ba00:	2300      	movs	r3, #0
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	370c      	adds	r7, #12
 800ba06:	46bd      	mov	sp, r7
 800ba08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0c:	4770      	bx	lr

0800ba0e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800ba0e:	b480      	push	{r7}
 800ba10:	b085      	sub	sp, #20
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ba1c:	b29b      	uxth	r3, r3
 800ba1e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ba20:	68fb      	ldr	r3, [r7, #12]
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3714      	adds	r7, #20
 800ba26:	46bd      	mov	sp, r7
 800ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2c:	4770      	bx	lr

0800ba2e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ba2e:	b480      	push	{r7}
 800ba30:	b08d      	sub	sp, #52	; 0x34
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	60f8      	str	r0, [r7, #12]
 800ba36:	60b9      	str	r1, [r7, #8]
 800ba38:	4611      	mov	r1, r2
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	80fb      	strh	r3, [r7, #6]
 800ba40:	4613      	mov	r3, r2
 800ba42:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ba44:	88bb      	ldrh	r3, [r7, #4]
 800ba46:	3301      	adds	r3, #1
 800ba48:	085b      	lsrs	r3, r3, #1
 800ba4a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ba54:	88fa      	ldrh	r2, [r7, #6]
 800ba56:	69fb      	ldr	r3, [r7, #28]
 800ba58:	4413      	add	r3, r2
 800ba5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba5e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800ba60:	6a3b      	ldr	r3, [r7, #32]
 800ba62:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba64:	e01b      	b.n	800ba9e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800ba66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800ba6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6e:	3301      	adds	r3, #1
 800ba70:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800ba72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	b29b      	uxth	r3, r3
 800ba78:	021b      	lsls	r3, r3, #8
 800ba7a:	b29b      	uxth	r3, r3
 800ba7c:	461a      	mov	r2, r3
 800ba7e:	69bb      	ldr	r3, [r7, #24]
 800ba80:	4313      	orrs	r3, r2
 800ba82:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	b29a      	uxth	r2, r3
 800ba88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ba8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8e:	3302      	adds	r3, #2
 800ba90:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800ba92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba94:	3301      	adds	r3, #1
 800ba96:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800ba98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba9a:	3b01      	subs	r3, #1
 800ba9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d1e0      	bne.n	800ba66 <USB_WritePMA+0x38>
  }
}
 800baa4:	bf00      	nop
 800baa6:	bf00      	nop
 800baa8:	3734      	adds	r7, #52	; 0x34
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr

0800bab2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bab2:	b480      	push	{r7}
 800bab4:	b08b      	sub	sp, #44	; 0x2c
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	60f8      	str	r0, [r7, #12]
 800baba:	60b9      	str	r1, [r7, #8]
 800babc:	4611      	mov	r1, r2
 800babe:	461a      	mov	r2, r3
 800bac0:	460b      	mov	r3, r1
 800bac2:	80fb      	strh	r3, [r7, #6]
 800bac4:	4613      	mov	r3, r2
 800bac6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bac8:	88bb      	ldrh	r3, [r7, #4]
 800baca:	085b      	lsrs	r3, r3, #1
 800bacc:	b29b      	uxth	r3, r3
 800bace:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bad8:	88fa      	ldrh	r2, [r7, #6]
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	4413      	add	r3, r2
 800bade:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bae2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800bae4:	69bb      	ldr	r3, [r7, #24]
 800bae6:	627b      	str	r3, [r7, #36]	; 0x24
 800bae8:	e018      	b.n	800bb1c <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800baea:	6a3b      	ldr	r3, [r7, #32]
 800baec:	881b      	ldrh	r3, [r3, #0]
 800baee:	b29b      	uxth	r3, r3
 800baf0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800baf2:	6a3b      	ldr	r3, [r7, #32]
 800baf4:	3302      	adds	r3, #2
 800baf6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	b2da      	uxtb	r2, r3
 800bafc:	69fb      	ldr	r3, [r7, #28]
 800bafe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bb00:	69fb      	ldr	r3, [r7, #28]
 800bb02:	3301      	adds	r3, #1
 800bb04:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	0a1b      	lsrs	r3, r3, #8
 800bb0a:	b2da      	uxtb	r2, r3
 800bb0c:	69fb      	ldr	r3, [r7, #28]
 800bb0e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bb10:	69fb      	ldr	r3, [r7, #28]
 800bb12:	3301      	adds	r3, #1
 800bb14:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800bb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb18:	3b01      	subs	r3, #1
 800bb1a:	627b      	str	r3, [r7, #36]	; 0x24
 800bb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d1e3      	bne.n	800baea <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800bb22:	88bb      	ldrh	r3, [r7, #4]
 800bb24:	f003 0301 	and.w	r3, r3, #1
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d007      	beq.n	800bb3e <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800bb2e:	6a3b      	ldr	r3, [r7, #32]
 800bb30:	881b      	ldrh	r3, [r3, #0]
 800bb32:	b29b      	uxth	r3, r3
 800bb34:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	b2da      	uxtb	r2, r3
 800bb3a:	69fb      	ldr	r3, [r7, #28]
 800bb3c:	701a      	strb	r2, [r3, #0]
  }
}
 800bb3e:	bf00      	nop
 800bb40:	372c      	adds	r7, #44	; 0x2c
 800bb42:	46bd      	mov	sp, r7
 800bb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb48:	4770      	bx	lr

0800bb4a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb4a:	b580      	push	{r7, lr}
 800bb4c:	b084      	sub	sp, #16
 800bb4e:	af00      	add	r7, sp, #0
 800bb50:	6078      	str	r0, [r7, #4]
 800bb52:	460b      	mov	r3, r1
 800bb54:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bb56:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bb5a:	f002 f917 	bl	800dd8c <USBD_static_malloc>
 800bb5e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d105      	bne.n	800bb72 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800bb6e:	2302      	movs	r3, #2
 800bb70:	e066      	b.n	800bc40 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	68fa      	ldr	r2, [r7, #12]
 800bb76:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	7c1b      	ldrb	r3, [r3, #16]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d119      	bne.n	800bbb6 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bb82:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb86:	2202      	movs	r2, #2
 800bb88:	2181      	movs	r1, #129	; 0x81
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f001 ffa3 	bl	800dad6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2201      	movs	r2, #1
 800bb94:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bb96:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb9a:	2202      	movs	r2, #2
 800bb9c:	2101      	movs	r1, #1
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f001 ff99 	bl	800dad6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2201      	movs	r2, #1
 800bba8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2210      	movs	r2, #16
 800bbb0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800bbb4:	e016      	b.n	800bbe4 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bbb6:	2340      	movs	r3, #64	; 0x40
 800bbb8:	2202      	movs	r2, #2
 800bbba:	2181      	movs	r1, #129	; 0x81
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f001 ff8a 	bl	800dad6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2201      	movs	r2, #1
 800bbc6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bbc8:	2340      	movs	r3, #64	; 0x40
 800bbca:	2202      	movs	r2, #2
 800bbcc:	2101      	movs	r1, #1
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f001 ff81 	bl	800dad6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2210      	movs	r2, #16
 800bbe0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bbe4:	2308      	movs	r3, #8
 800bbe6:	2203      	movs	r2, #3
 800bbe8:	2182      	movs	r1, #130	; 0x82
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f001 ff73 	bl	800dad6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2200      	movs	r2, #0
 800bc06:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	7c1b      	ldrb	r3, [r3, #16]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d109      	bne.n	800bc2e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc20:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc24:	2101      	movs	r1, #1
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f002 f845 	bl	800dcb6 <USBD_LL_PrepareReceive>
 800bc2c:	e007      	b.n	800bc3e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc34:	2340      	movs	r3, #64	; 0x40
 800bc36:	2101      	movs	r1, #1
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f002 f83c 	bl	800dcb6 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bc3e:	2300      	movs	r3, #0
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3710      	adds	r7, #16
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b082      	sub	sp, #8
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	460b      	mov	r3, r1
 800bc52:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bc54:	2181      	movs	r1, #129	; 0x81
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f001 ff63 	bl	800db22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bc62:	2101      	movs	r1, #1
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f001 ff5c 	bl	800db22 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bc72:	2182      	movs	r1, #130	; 0x82
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f001 ff54 	bl	800db22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2200      	movs	r2, #0
 800bc86:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d00e      	beq.n	800bcb2 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc9a:	685b      	ldr	r3, [r3, #4]
 800bc9c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bca4:	4618      	mov	r0, r3
 800bca6:	f002 f87f 	bl	800dda8 <USBD_static_free>
    pdev->pClassData = NULL;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2200      	movs	r2, #0
 800bcae:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bcb2:	2300      	movs	r3, #0
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3708      	adds	r7, #8
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b086      	sub	sp, #24
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bccc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d101      	bne.n	800bce4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800bce0:	2303      	movs	r3, #3
 800bce2:	e0af      	b.n	800be44 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d03f      	beq.n	800bd70 <USBD_CDC_Setup+0xb4>
 800bcf0:	2b20      	cmp	r3, #32
 800bcf2:	f040 809f 	bne.w	800be34 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	88db      	ldrh	r3, [r3, #6]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d02e      	beq.n	800bd5c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	781b      	ldrb	r3, [r3, #0]
 800bd02:	b25b      	sxtb	r3, r3
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	da16      	bge.n	800bd36 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	683a      	ldr	r2, [r7, #0]
 800bd12:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800bd14:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd16:	683a      	ldr	r2, [r7, #0]
 800bd18:	88d2      	ldrh	r2, [r2, #6]
 800bd1a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	88db      	ldrh	r3, [r3, #6]
 800bd20:	2b07      	cmp	r3, #7
 800bd22:	bf28      	it	cs
 800bd24:	2307      	movcs	r3, #7
 800bd26:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	89fa      	ldrh	r2, [r7, #14]
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f001 facf 	bl	800d2d2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800bd34:	e085      	b.n	800be42 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	785a      	ldrb	r2, [r3, #1]
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	88db      	ldrh	r3, [r3, #6]
 800bd44:	b2da      	uxtb	r2, r3
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800bd4c:	6939      	ldr	r1, [r7, #16]
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	88db      	ldrh	r3, [r3, #6]
 800bd52:	461a      	mov	r2, r3
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f001 fae8 	bl	800d32a <USBD_CtlPrepareRx>
      break;
 800bd5a:	e072      	b.n	800be42 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd62:	689b      	ldr	r3, [r3, #8]
 800bd64:	683a      	ldr	r2, [r7, #0]
 800bd66:	7850      	ldrb	r0, [r2, #1]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	6839      	ldr	r1, [r7, #0]
 800bd6c:	4798      	blx	r3
      break;
 800bd6e:	e068      	b.n	800be42 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	785b      	ldrb	r3, [r3, #1]
 800bd74:	2b0b      	cmp	r3, #11
 800bd76:	d852      	bhi.n	800be1e <USBD_CDC_Setup+0x162>
 800bd78:	a201      	add	r2, pc, #4	; (adr r2, 800bd80 <USBD_CDC_Setup+0xc4>)
 800bd7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd7e:	bf00      	nop
 800bd80:	0800bdb1 	.word	0x0800bdb1
 800bd84:	0800be2d 	.word	0x0800be2d
 800bd88:	0800be1f 	.word	0x0800be1f
 800bd8c:	0800be1f 	.word	0x0800be1f
 800bd90:	0800be1f 	.word	0x0800be1f
 800bd94:	0800be1f 	.word	0x0800be1f
 800bd98:	0800be1f 	.word	0x0800be1f
 800bd9c:	0800be1f 	.word	0x0800be1f
 800bda0:	0800be1f 	.word	0x0800be1f
 800bda4:	0800be1f 	.word	0x0800be1f
 800bda8:	0800bddb 	.word	0x0800bddb
 800bdac:	0800be05 	.word	0x0800be05
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdb6:	b2db      	uxtb	r3, r3
 800bdb8:	2b03      	cmp	r3, #3
 800bdba:	d107      	bne.n	800bdcc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bdbc:	f107 030a 	add.w	r3, r7, #10
 800bdc0:	2202      	movs	r2, #2
 800bdc2:	4619      	mov	r1, r3
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f001 fa84 	bl	800d2d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bdca:	e032      	b.n	800be32 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bdcc:	6839      	ldr	r1, [r7, #0]
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f001 fa0e 	bl	800d1f0 <USBD_CtlError>
            ret = USBD_FAIL;
 800bdd4:	2303      	movs	r3, #3
 800bdd6:	75fb      	strb	r3, [r7, #23]
          break;
 800bdd8:	e02b      	b.n	800be32 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bde0:	b2db      	uxtb	r3, r3
 800bde2:	2b03      	cmp	r3, #3
 800bde4:	d107      	bne.n	800bdf6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bde6:	f107 030d 	add.w	r3, r7, #13
 800bdea:	2201      	movs	r2, #1
 800bdec:	4619      	mov	r1, r3
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f001 fa6f 	bl	800d2d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bdf4:	e01d      	b.n	800be32 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bdf6:	6839      	ldr	r1, [r7, #0]
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f001 f9f9 	bl	800d1f0 <USBD_CtlError>
            ret = USBD_FAIL;
 800bdfe:	2303      	movs	r3, #3
 800be00:	75fb      	strb	r3, [r7, #23]
          break;
 800be02:	e016      	b.n	800be32 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be0a:	b2db      	uxtb	r3, r3
 800be0c:	2b03      	cmp	r3, #3
 800be0e:	d00f      	beq.n	800be30 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800be10:	6839      	ldr	r1, [r7, #0]
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f001 f9ec 	bl	800d1f0 <USBD_CtlError>
            ret = USBD_FAIL;
 800be18:	2303      	movs	r3, #3
 800be1a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800be1c:	e008      	b.n	800be30 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800be1e:	6839      	ldr	r1, [r7, #0]
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f001 f9e5 	bl	800d1f0 <USBD_CtlError>
          ret = USBD_FAIL;
 800be26:	2303      	movs	r3, #3
 800be28:	75fb      	strb	r3, [r7, #23]
          break;
 800be2a:	e002      	b.n	800be32 <USBD_CDC_Setup+0x176>
          break;
 800be2c:	bf00      	nop
 800be2e:	e008      	b.n	800be42 <USBD_CDC_Setup+0x186>
          break;
 800be30:	bf00      	nop
      }
      break;
 800be32:	e006      	b.n	800be42 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800be34:	6839      	ldr	r1, [r7, #0]
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f001 f9da 	bl	800d1f0 <USBD_CtlError>
      ret = USBD_FAIL;
 800be3c:	2303      	movs	r3, #3
 800be3e:	75fb      	strb	r3, [r7, #23]
      break;
 800be40:	bf00      	nop
  }

  return (uint8_t)ret;
 800be42:	7dfb      	ldrb	r3, [r7, #23]
}
 800be44:	4618      	mov	r0, r3
 800be46:	3718      	adds	r7, #24
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	460b      	mov	r3, r1
 800be56:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800be5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be66:	2b00      	cmp	r3, #0
 800be68:	d101      	bne.n	800be6e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800be6a:	2303      	movs	r3, #3
 800be6c:	e04f      	b.n	800bf0e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be74:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800be76:	78fa      	ldrb	r2, [r7, #3]
 800be78:	6879      	ldr	r1, [r7, #4]
 800be7a:	4613      	mov	r3, r2
 800be7c:	009b      	lsls	r3, r3, #2
 800be7e:	4413      	add	r3, r2
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	440b      	add	r3, r1
 800be84:	3318      	adds	r3, #24
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d029      	beq.n	800bee0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800be8c:	78fa      	ldrb	r2, [r7, #3]
 800be8e:	6879      	ldr	r1, [r7, #4]
 800be90:	4613      	mov	r3, r2
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	4413      	add	r3, r2
 800be96:	009b      	lsls	r3, r3, #2
 800be98:	440b      	add	r3, r1
 800be9a:	3318      	adds	r3, #24
 800be9c:	681a      	ldr	r2, [r3, #0]
 800be9e:	78f9      	ldrb	r1, [r7, #3]
 800bea0:	68f8      	ldr	r0, [r7, #12]
 800bea2:	460b      	mov	r3, r1
 800bea4:	009b      	lsls	r3, r3, #2
 800bea6:	440b      	add	r3, r1
 800bea8:	00db      	lsls	r3, r3, #3
 800beaa:	4403      	add	r3, r0
 800beac:	3338      	adds	r3, #56	; 0x38
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	fbb2 f1f3 	udiv	r1, r2, r3
 800beb4:	fb01 f303 	mul.w	r3, r1, r3
 800beb8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d110      	bne.n	800bee0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800bebe:	78fa      	ldrb	r2, [r7, #3]
 800bec0:	6879      	ldr	r1, [r7, #4]
 800bec2:	4613      	mov	r3, r2
 800bec4:	009b      	lsls	r3, r3, #2
 800bec6:	4413      	add	r3, r2
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	440b      	add	r3, r1
 800becc:	3318      	adds	r3, #24
 800bece:	2200      	movs	r2, #0
 800bed0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bed2:	78f9      	ldrb	r1, [r7, #3]
 800bed4:	2300      	movs	r3, #0
 800bed6:	2200      	movs	r2, #0
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f001 fecb 	bl	800dc74 <USBD_LL_Transmit>
 800bede:	e015      	b.n	800bf0c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	2200      	movs	r2, #0
 800bee4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800beee:	691b      	ldr	r3, [r3, #16]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d00b      	beq.n	800bf0c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800befa:	691b      	ldr	r3, [r3, #16]
 800befc:	68ba      	ldr	r2, [r7, #8]
 800befe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bf02:	68ba      	ldr	r2, [r7, #8]
 800bf04:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bf08:	78fa      	ldrb	r2, [r7, #3]
 800bf0a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bf0c:	2300      	movs	r3, #0
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3710      	adds	r7, #16
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}

0800bf16 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bf16:	b580      	push	{r7, lr}
 800bf18:	b084      	sub	sp, #16
 800bf1a:	af00      	add	r7, sp, #0
 800bf1c:	6078      	str	r0, [r7, #4]
 800bf1e:	460b      	mov	r3, r1
 800bf20:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf28:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d101      	bne.n	800bf38 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bf34:	2303      	movs	r3, #3
 800bf36:	e015      	b.n	800bf64 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bf38:	78fb      	ldrb	r3, [r7, #3]
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f001 fedb 	bl	800dcf8 <USBD_LL_GetRxDataSize>
 800bf42:	4602      	mov	r2, r0
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf50:	68db      	ldr	r3, [r3, #12]
 800bf52:	68fa      	ldr	r2, [r7, #12]
 800bf54:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bf58:	68fa      	ldr	r2, [r7, #12]
 800bf5a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bf5e:	4611      	mov	r1, r2
 800bf60:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bf62:	2300      	movs	r3, #0
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3710      	adds	r7, #16
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b084      	sub	sp, #16
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf7a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d101      	bne.n	800bf86 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800bf82:	2303      	movs	r3, #3
 800bf84:	e01b      	b.n	800bfbe <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d015      	beq.n	800bfbc <USBD_CDC_EP0_RxReady+0x50>
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bf96:	2bff      	cmp	r3, #255	; 0xff
 800bf98:	d010      	beq.n	800bfbc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bfa0:	689b      	ldr	r3, [r3, #8]
 800bfa2:	68fa      	ldr	r2, [r7, #12]
 800bfa4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800bfa8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bfaa:	68fa      	ldr	r2, [r7, #12]
 800bfac:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bfb0:	b292      	uxth	r2, r2
 800bfb2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	22ff      	movs	r2, #255	; 0xff
 800bfb8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800bfbc:	2300      	movs	r3, #0
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3710      	adds	r7, #16
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
	...

0800bfc8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b083      	sub	sp, #12
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2243      	movs	r2, #67	; 0x43
 800bfd4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800bfd6:	4b03      	ldr	r3, [pc, #12]	; (800bfe4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	370c      	adds	r7, #12
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe2:	4770      	bx	lr
 800bfe4:	20002768 	.word	0x20002768

0800bfe8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b083      	sub	sp, #12
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2243      	movs	r2, #67	; 0x43
 800bff4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800bff6:	4b03      	ldr	r3, [pc, #12]	; (800c004 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	370c      	adds	r7, #12
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	4770      	bx	lr
 800c004:	20002724 	.word	0x20002724

0800c008 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c008:	b480      	push	{r7}
 800c00a:	b083      	sub	sp, #12
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2243      	movs	r2, #67	; 0x43
 800c014:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c016:	4b03      	ldr	r3, [pc, #12]	; (800c024 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c018:	4618      	mov	r0, r3
 800c01a:	370c      	adds	r7, #12
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr
 800c024:	200027ac 	.word	0x200027ac

0800c028 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c028:	b480      	push	{r7}
 800c02a:	b083      	sub	sp, #12
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	220a      	movs	r2, #10
 800c034:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c036:	4b03      	ldr	r3, [pc, #12]	; (800c044 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c038:	4618      	mov	r0, r3
 800c03a:	370c      	adds	r7, #12
 800c03c:	46bd      	mov	sp, r7
 800c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c042:	4770      	bx	lr
 800c044:	200026e0 	.word	0x200026e0

0800c048 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c048:	b480      	push	{r7}
 800c04a:	b083      	sub	sp, #12
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d101      	bne.n	800c05c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c058:	2303      	movs	r3, #3
 800c05a:	e004      	b.n	800c066 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	683a      	ldr	r2, [r7, #0]
 800c060:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c064:	2300      	movs	r3, #0
}
 800c066:	4618      	mov	r0, r3
 800c068:	370c      	adds	r7, #12
 800c06a:	46bd      	mov	sp, r7
 800c06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c070:	4770      	bx	lr

0800c072 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c072:	b480      	push	{r7}
 800c074:	b087      	sub	sp, #28
 800c076:	af00      	add	r7, sp, #0
 800c078:	60f8      	str	r0, [r7, #12]
 800c07a:	60b9      	str	r1, [r7, #8]
 800c07c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c084:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d101      	bne.n	800c090 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c08c:	2303      	movs	r3, #3
 800c08e:	e008      	b.n	800c0a2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	68ba      	ldr	r2, [r7, #8]
 800c094:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	687a      	ldr	r2, [r7, #4]
 800c09c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c0a0:	2300      	movs	r3, #0
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	371c      	adds	r7, #28
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr

0800c0ae <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c0ae:	b480      	push	{r7}
 800c0b0:	b085      	sub	sp, #20
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
 800c0b6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0be:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d101      	bne.n	800c0ca <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c0c6:	2303      	movs	r3, #3
 800c0c8:	e004      	b.n	800c0d4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	683a      	ldr	r2, [r7, #0]
 800c0ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c0d2:	2300      	movs	r3, #0
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3714      	adds	r7, #20
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0de:	4770      	bx	lr

0800c0e0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b084      	sub	sp, #16
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0ee:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d101      	bne.n	800c102 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c0fe:	2303      	movs	r3, #3
 800c100:	e01a      	b.n	800c138 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d114      	bne.n	800c136 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	2201      	movs	r2, #1
 800c110:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c12a:	2181      	movs	r1, #129	; 0x81
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f001 fda1 	bl	800dc74 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c132:	2300      	movs	r3, #0
 800c134:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c136:	7bfb      	ldrb	r3, [r7, #15]
}
 800c138:	4618      	mov	r0, r3
 800c13a:	3710      	adds	r7, #16
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b084      	sub	sp, #16
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c14e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c156:	2b00      	cmp	r3, #0
 800c158:	d101      	bne.n	800c15e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c15a:	2303      	movs	r3, #3
 800c15c:	e016      	b.n	800c18c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	7c1b      	ldrb	r3, [r3, #16]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d109      	bne.n	800c17a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c16c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c170:	2101      	movs	r1, #1
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f001 fd9f 	bl	800dcb6 <USBD_LL_PrepareReceive>
 800c178:	e007      	b.n	800c18a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c180:	2340      	movs	r3, #64	; 0x40
 800c182:	2101      	movs	r1, #1
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f001 fd96 	bl	800dcb6 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c18a:	2300      	movs	r3, #0
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3710      	adds	r7, #16
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b086      	sub	sp, #24
 800c198:	af00      	add	r7, sp, #0
 800c19a:	60f8      	str	r0, [r7, #12]
 800c19c:	60b9      	str	r1, [r7, #8]
 800c19e:	4613      	mov	r3, r2
 800c1a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d101      	bne.n	800c1ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c1a8:	2303      	movs	r3, #3
 800c1aa:	e01f      	b.n	800c1ec <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d003      	beq.n	800c1d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	68ba      	ldr	r2, [r7, #8]
 800c1ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	2201      	movs	r2, #1
 800c1d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	79fa      	ldrb	r2, [r7, #7]
 800c1de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c1e0:	68f8      	ldr	r0, [r7, #12]
 800c1e2:	f001 fbfd 	bl	800d9e0 <USBD_LL_Init>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c1ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3718      	adds	r7, #24
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}

0800c1f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b084      	sub	sp, #16
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c1fe:	2300      	movs	r3, #0
 800c200:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d101      	bne.n	800c20c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c208:	2303      	movs	r3, #3
 800c20a:	e016      	b.n	800c23a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	683a      	ldr	r2, [r7, #0]
 800c210:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c21a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d00b      	beq.n	800c238 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c228:	f107 020e 	add.w	r2, r7, #14
 800c22c:	4610      	mov	r0, r2
 800c22e:	4798      	blx	r3
 800c230:	4602      	mov	r2, r0
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c238:	2300      	movs	r3, #0
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3710      	adds	r7, #16
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}

0800c242 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c242:	b580      	push	{r7, lr}
 800c244:	b082      	sub	sp, #8
 800c246:	af00      	add	r7, sp, #0
 800c248:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f001 fc28 	bl	800daa0 <USBD_LL_Start>
 800c250:	4603      	mov	r3, r0
}
 800c252:	4618      	mov	r0, r3
 800c254:	3708      	adds	r7, #8
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}

0800c25a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c25a:	b480      	push	{r7}
 800c25c:	b083      	sub	sp, #12
 800c25e:	af00      	add	r7, sp, #0
 800c260:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c262:	2300      	movs	r3, #0
}
 800c264:	4618      	mov	r0, r3
 800c266:	370c      	adds	r7, #12
 800c268:	46bd      	mov	sp, r7
 800c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26e:	4770      	bx	lr

0800c270 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b084      	sub	sp, #16
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	460b      	mov	r3, r1
 800c27a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c27c:	2303      	movs	r3, #3
 800c27e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c286:	2b00      	cmp	r3, #0
 800c288:	d009      	beq.n	800c29e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	78fa      	ldrb	r2, [r7, #3]
 800c294:	4611      	mov	r1, r2
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	4798      	blx	r3
 800c29a:	4603      	mov	r3, r0
 800c29c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c29e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3710      	adds	r7, #16
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b082      	sub	sp, #8
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	460b      	mov	r3, r1
 800c2b2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d007      	beq.n	800c2ce <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	78fa      	ldrb	r2, [r7, #3]
 800c2c8:	4611      	mov	r1, r2
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	4798      	blx	r3
  }

  return USBD_OK;
 800c2ce:	2300      	movs	r3, #0
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3708      	adds	r7, #8
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}

0800c2d8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b084      	sub	sp, #16
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
 800c2e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c2e8:	6839      	ldr	r1, [r7, #0]
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f000 ff46 	bl	800d17c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2201      	movs	r2, #1
 800c2f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c2fe:	461a      	mov	r2, r3
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c30c:	f003 031f 	and.w	r3, r3, #31
 800c310:	2b02      	cmp	r3, #2
 800c312:	d01a      	beq.n	800c34a <USBD_LL_SetupStage+0x72>
 800c314:	2b02      	cmp	r3, #2
 800c316:	d822      	bhi.n	800c35e <USBD_LL_SetupStage+0x86>
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d002      	beq.n	800c322 <USBD_LL_SetupStage+0x4a>
 800c31c:	2b01      	cmp	r3, #1
 800c31e:	d00a      	beq.n	800c336 <USBD_LL_SetupStage+0x5e>
 800c320:	e01d      	b.n	800c35e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c328:	4619      	mov	r1, r3
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 f9ee 	bl	800c70c <USBD_StdDevReq>
 800c330:	4603      	mov	r3, r0
 800c332:	73fb      	strb	r3, [r7, #15]
      break;
 800c334:	e020      	b.n	800c378 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c33c:	4619      	mov	r1, r3
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f000 fa52 	bl	800c7e8 <USBD_StdItfReq>
 800c344:	4603      	mov	r3, r0
 800c346:	73fb      	strb	r3, [r7, #15]
      break;
 800c348:	e016      	b.n	800c378 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c350:	4619      	mov	r1, r3
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f000 fa91 	bl	800c87a <USBD_StdEPReq>
 800c358:	4603      	mov	r3, r0
 800c35a:	73fb      	strb	r3, [r7, #15]
      break;
 800c35c:	e00c      	b.n	800c378 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c364:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c368:	b2db      	uxtb	r3, r3
 800c36a:	4619      	mov	r1, r3
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f001 fbf7 	bl	800db60 <USBD_LL_StallEP>
 800c372:	4603      	mov	r3, r0
 800c374:	73fb      	strb	r3, [r7, #15]
      break;
 800c376:	bf00      	nop
  }

  return ret;
 800c378:	7bfb      	ldrb	r3, [r7, #15]
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3710      	adds	r7, #16
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}

0800c382 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c382:	b580      	push	{r7, lr}
 800c384:	b086      	sub	sp, #24
 800c386:	af00      	add	r7, sp, #0
 800c388:	60f8      	str	r0, [r7, #12]
 800c38a:	460b      	mov	r3, r1
 800c38c:	607a      	str	r2, [r7, #4]
 800c38e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c390:	7afb      	ldrb	r3, [r7, #11]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d138      	bne.n	800c408 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c39c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c3a4:	2b03      	cmp	r3, #3
 800c3a6:	d14a      	bne.n	800c43e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	689a      	ldr	r2, [r3, #8]
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	68db      	ldr	r3, [r3, #12]
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	d913      	bls.n	800c3dc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	689a      	ldr	r2, [r3, #8]
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	68db      	ldr	r3, [r3, #12]
 800c3bc:	1ad2      	subs	r2, r2, r3
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	68da      	ldr	r2, [r3, #12]
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	689b      	ldr	r3, [r3, #8]
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	bf28      	it	cs
 800c3ce:	4613      	movcs	r3, r2
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	6879      	ldr	r1, [r7, #4]
 800c3d4:	68f8      	ldr	r0, [r7, #12]
 800c3d6:	f000 ffc5 	bl	800d364 <USBD_CtlContinueRx>
 800c3da:	e030      	b.n	800c43e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3e2:	b2db      	uxtb	r3, r3
 800c3e4:	2b03      	cmp	r3, #3
 800c3e6:	d10b      	bne.n	800c400 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3ee:	691b      	ldr	r3, [r3, #16]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d005      	beq.n	800c400 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3fa:	691b      	ldr	r3, [r3, #16]
 800c3fc:	68f8      	ldr	r0, [r7, #12]
 800c3fe:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c400:	68f8      	ldr	r0, [r7, #12]
 800c402:	f000 ffc0 	bl	800d386 <USBD_CtlSendStatus>
 800c406:	e01a      	b.n	800c43e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c40e:	b2db      	uxtb	r3, r3
 800c410:	2b03      	cmp	r3, #3
 800c412:	d114      	bne.n	800c43e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c41a:	699b      	ldr	r3, [r3, #24]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d00e      	beq.n	800c43e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c426:	699b      	ldr	r3, [r3, #24]
 800c428:	7afa      	ldrb	r2, [r7, #11]
 800c42a:	4611      	mov	r1, r2
 800c42c:	68f8      	ldr	r0, [r7, #12]
 800c42e:	4798      	blx	r3
 800c430:	4603      	mov	r3, r0
 800c432:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c434:	7dfb      	ldrb	r3, [r7, #23]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d001      	beq.n	800c43e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c43a:	7dfb      	ldrb	r3, [r7, #23]
 800c43c:	e000      	b.n	800c440 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c43e:	2300      	movs	r3, #0
}
 800c440:	4618      	mov	r0, r3
 800c442:	3718      	adds	r7, #24
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b086      	sub	sp, #24
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	60f8      	str	r0, [r7, #12]
 800c450:	460b      	mov	r3, r1
 800c452:	607a      	str	r2, [r7, #4]
 800c454:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c456:	7afb      	ldrb	r3, [r7, #11]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d16b      	bne.n	800c534 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	3314      	adds	r3, #20
 800c460:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c468:	2b02      	cmp	r3, #2
 800c46a:	d156      	bne.n	800c51a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	689a      	ldr	r2, [r3, #8]
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	68db      	ldr	r3, [r3, #12]
 800c474:	429a      	cmp	r2, r3
 800c476:	d914      	bls.n	800c4a2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	689a      	ldr	r2, [r3, #8]
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	68db      	ldr	r3, [r3, #12]
 800c480:	1ad2      	subs	r2, r2, r3
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	689b      	ldr	r3, [r3, #8]
 800c48a:	461a      	mov	r2, r3
 800c48c:	6879      	ldr	r1, [r7, #4]
 800c48e:	68f8      	ldr	r0, [r7, #12]
 800c490:	f000 ff3a 	bl	800d308 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c494:	2300      	movs	r3, #0
 800c496:	2200      	movs	r2, #0
 800c498:	2100      	movs	r1, #0
 800c49a:	68f8      	ldr	r0, [r7, #12]
 800c49c:	f001 fc0b 	bl	800dcb6 <USBD_LL_PrepareReceive>
 800c4a0:	e03b      	b.n	800c51a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	68da      	ldr	r2, [r3, #12]
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	689b      	ldr	r3, [r3, #8]
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d11c      	bne.n	800c4e8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	685a      	ldr	r2, [r3, #4]
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	d316      	bcc.n	800c4e8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	685a      	ldr	r2, [r3, #4]
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d20f      	bcs.n	800c4e8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	2100      	movs	r1, #0
 800c4cc:	68f8      	ldr	r0, [r7, #12]
 800c4ce:	f000 ff1b 	bl	800d308 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c4da:	2300      	movs	r3, #0
 800c4dc:	2200      	movs	r2, #0
 800c4de:	2100      	movs	r1, #0
 800c4e0:	68f8      	ldr	r0, [r7, #12]
 800c4e2:	f001 fbe8 	bl	800dcb6 <USBD_LL_PrepareReceive>
 800c4e6:	e018      	b.n	800c51a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4ee:	b2db      	uxtb	r3, r3
 800c4f0:	2b03      	cmp	r3, #3
 800c4f2:	d10b      	bne.n	800c50c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4fa:	68db      	ldr	r3, [r3, #12]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d005      	beq.n	800c50c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c506:	68db      	ldr	r3, [r3, #12]
 800c508:	68f8      	ldr	r0, [r7, #12]
 800c50a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c50c:	2180      	movs	r1, #128	; 0x80
 800c50e:	68f8      	ldr	r0, [r7, #12]
 800c510:	f001 fb26 	bl	800db60 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c514:	68f8      	ldr	r0, [r7, #12]
 800c516:	f000 ff49 	bl	800d3ac <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c520:	2b01      	cmp	r3, #1
 800c522:	d122      	bne.n	800c56a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c524:	68f8      	ldr	r0, [r7, #12]
 800c526:	f7ff fe98 	bl	800c25a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	2200      	movs	r2, #0
 800c52e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c532:	e01a      	b.n	800c56a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	2b03      	cmp	r3, #3
 800c53e:	d114      	bne.n	800c56a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c546:	695b      	ldr	r3, [r3, #20]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d00e      	beq.n	800c56a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c552:	695b      	ldr	r3, [r3, #20]
 800c554:	7afa      	ldrb	r2, [r7, #11]
 800c556:	4611      	mov	r1, r2
 800c558:	68f8      	ldr	r0, [r7, #12]
 800c55a:	4798      	blx	r3
 800c55c:	4603      	mov	r3, r0
 800c55e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c560:	7dfb      	ldrb	r3, [r7, #23]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d001      	beq.n	800c56a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c566:	7dfb      	ldrb	r3, [r7, #23]
 800c568:	e000      	b.n	800c56c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c56a:	2300      	movs	r3, #0
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3718      	adds	r7, #24
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}

0800c574 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b082      	sub	sp, #8
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2201      	movs	r2, #1
 800c580:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2200      	movs	r2, #0
 800c588:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2200      	movs	r2, #0
 800c590:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2200      	movs	r2, #0
 800c596:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d101      	bne.n	800c5a8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c5a4:	2303      	movs	r3, #3
 800c5a6:	e02f      	b.n	800c608 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d00f      	beq.n	800c5d2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5b8:	685b      	ldr	r3, [r3, #4]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d009      	beq.n	800c5d2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	6852      	ldr	r2, [r2, #4]
 800c5ca:	b2d2      	uxtb	r2, r2
 800c5cc:	4611      	mov	r1, r2
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c5d2:	2340      	movs	r3, #64	; 0x40
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	2100      	movs	r1, #0
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f001 fa7c 	bl	800dad6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2201      	movs	r2, #1
 800c5e2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2240      	movs	r2, #64	; 0x40
 800c5ea:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c5ee:	2340      	movs	r3, #64	; 0x40
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	2180      	movs	r1, #128	; 0x80
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f001 fa6e 	bl	800dad6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2201      	movs	r2, #1
 800c5fe:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2240      	movs	r2, #64	; 0x40
 800c604:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c606:	2300      	movs	r3, #0
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3708      	adds	r7, #8
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c610:	b480      	push	{r7}
 800c612:	b083      	sub	sp, #12
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	460b      	mov	r3, r1
 800c61a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	78fa      	ldrb	r2, [r7, #3]
 800c620:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c622:	2300      	movs	r3, #0
}
 800c624:	4618      	mov	r0, r3
 800c626:	370c      	adds	r7, #12
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr

0800c630 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c630:	b480      	push	{r7}
 800c632:	b083      	sub	sp, #12
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c63e:	b2da      	uxtb	r2, r3
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2204      	movs	r2, #4
 800c64a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c64e:	2300      	movs	r3, #0
}
 800c650:	4618      	mov	r0, r3
 800c652:	370c      	adds	r7, #12
 800c654:	46bd      	mov	sp, r7
 800c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65a:	4770      	bx	lr

0800c65c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c65c:	b480      	push	{r7}
 800c65e:	b083      	sub	sp, #12
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c66a:	b2db      	uxtb	r3, r3
 800c66c:	2b04      	cmp	r3, #4
 800c66e:	d106      	bne.n	800c67e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c676:	b2da      	uxtb	r2, r3
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c67e:	2300      	movs	r3, #0
}
 800c680:	4618      	mov	r0, r3
 800c682:	370c      	adds	r7, #12
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr

0800c68c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d101      	bne.n	800c6a2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c69e:	2303      	movs	r3, #3
 800c6a0:	e012      	b.n	800c6c8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	2b03      	cmp	r3, #3
 800c6ac:	d10b      	bne.n	800c6c6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6b4:	69db      	ldr	r3, [r3, #28]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d005      	beq.n	800c6c6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6c0:	69db      	ldr	r3, [r3, #28]
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c6c6:	2300      	movs	r3, #0
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3708      	adds	r7, #8
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}

0800c6d0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c6d0:	b480      	push	{r7}
 800c6d2:	b087      	sub	sp, #28
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	781b      	ldrb	r3, [r3, #0]
 800c6e0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	3301      	adds	r3, #1
 800c6e6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	781b      	ldrb	r3, [r3, #0]
 800c6ec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c6ee:	8a3b      	ldrh	r3, [r7, #16]
 800c6f0:	021b      	lsls	r3, r3, #8
 800c6f2:	b21a      	sxth	r2, r3
 800c6f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c6f8:	4313      	orrs	r3, r2
 800c6fa:	b21b      	sxth	r3, r3
 800c6fc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c6fe:	89fb      	ldrh	r3, [r7, #14]
}
 800c700:	4618      	mov	r0, r3
 800c702:	371c      	adds	r7, #28
 800c704:	46bd      	mov	sp, r7
 800c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70a:	4770      	bx	lr

0800c70c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b084      	sub	sp, #16
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c716:	2300      	movs	r3, #0
 800c718:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	781b      	ldrb	r3, [r3, #0]
 800c71e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c722:	2b40      	cmp	r3, #64	; 0x40
 800c724:	d005      	beq.n	800c732 <USBD_StdDevReq+0x26>
 800c726:	2b40      	cmp	r3, #64	; 0x40
 800c728:	d853      	bhi.n	800c7d2 <USBD_StdDevReq+0xc6>
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d00b      	beq.n	800c746 <USBD_StdDevReq+0x3a>
 800c72e:	2b20      	cmp	r3, #32
 800c730:	d14f      	bne.n	800c7d2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c738:	689b      	ldr	r3, [r3, #8]
 800c73a:	6839      	ldr	r1, [r7, #0]
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	4798      	blx	r3
 800c740:	4603      	mov	r3, r0
 800c742:	73fb      	strb	r3, [r7, #15]
      break;
 800c744:	e04a      	b.n	800c7dc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	785b      	ldrb	r3, [r3, #1]
 800c74a:	2b09      	cmp	r3, #9
 800c74c:	d83b      	bhi.n	800c7c6 <USBD_StdDevReq+0xba>
 800c74e:	a201      	add	r2, pc, #4	; (adr r2, 800c754 <USBD_StdDevReq+0x48>)
 800c750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c754:	0800c7a9 	.word	0x0800c7a9
 800c758:	0800c7bd 	.word	0x0800c7bd
 800c75c:	0800c7c7 	.word	0x0800c7c7
 800c760:	0800c7b3 	.word	0x0800c7b3
 800c764:	0800c7c7 	.word	0x0800c7c7
 800c768:	0800c787 	.word	0x0800c787
 800c76c:	0800c77d 	.word	0x0800c77d
 800c770:	0800c7c7 	.word	0x0800c7c7
 800c774:	0800c79f 	.word	0x0800c79f
 800c778:	0800c791 	.word	0x0800c791
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c77c:	6839      	ldr	r1, [r7, #0]
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f000 f9de 	bl	800cb40 <USBD_GetDescriptor>
          break;
 800c784:	e024      	b.n	800c7d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c786:	6839      	ldr	r1, [r7, #0]
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f000 fb6d 	bl	800ce68 <USBD_SetAddress>
          break;
 800c78e:	e01f      	b.n	800c7d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c790:	6839      	ldr	r1, [r7, #0]
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f000 fbac 	bl	800cef0 <USBD_SetConfig>
 800c798:	4603      	mov	r3, r0
 800c79a:	73fb      	strb	r3, [r7, #15]
          break;
 800c79c:	e018      	b.n	800c7d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c79e:	6839      	ldr	r1, [r7, #0]
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f000 fc4b 	bl	800d03c <USBD_GetConfig>
          break;
 800c7a6:	e013      	b.n	800c7d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c7a8:	6839      	ldr	r1, [r7, #0]
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 fc7c 	bl	800d0a8 <USBD_GetStatus>
          break;
 800c7b0:	e00e      	b.n	800c7d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c7b2:	6839      	ldr	r1, [r7, #0]
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f000 fcab 	bl	800d110 <USBD_SetFeature>
          break;
 800c7ba:	e009      	b.n	800c7d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c7bc:	6839      	ldr	r1, [r7, #0]
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f000 fcba 	bl	800d138 <USBD_ClrFeature>
          break;
 800c7c4:	e004      	b.n	800c7d0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c7c6:	6839      	ldr	r1, [r7, #0]
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f000 fd11 	bl	800d1f0 <USBD_CtlError>
          break;
 800c7ce:	bf00      	nop
      }
      break;
 800c7d0:	e004      	b.n	800c7dc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c7d2:	6839      	ldr	r1, [r7, #0]
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f000 fd0b 	bl	800d1f0 <USBD_CtlError>
      break;
 800c7da:	bf00      	nop
  }

  return ret;
 800c7dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3710      	adds	r7, #16
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	bf00      	nop

0800c7e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b084      	sub	sp, #16
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c7fe:	2b40      	cmp	r3, #64	; 0x40
 800c800:	d005      	beq.n	800c80e <USBD_StdItfReq+0x26>
 800c802:	2b40      	cmp	r3, #64	; 0x40
 800c804:	d82f      	bhi.n	800c866 <USBD_StdItfReq+0x7e>
 800c806:	2b00      	cmp	r3, #0
 800c808:	d001      	beq.n	800c80e <USBD_StdItfReq+0x26>
 800c80a:	2b20      	cmp	r3, #32
 800c80c:	d12b      	bne.n	800c866 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c814:	b2db      	uxtb	r3, r3
 800c816:	3b01      	subs	r3, #1
 800c818:	2b02      	cmp	r3, #2
 800c81a:	d81d      	bhi.n	800c858 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	889b      	ldrh	r3, [r3, #4]
 800c820:	b2db      	uxtb	r3, r3
 800c822:	2b01      	cmp	r3, #1
 800c824:	d813      	bhi.n	800c84e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c82c:	689b      	ldr	r3, [r3, #8]
 800c82e:	6839      	ldr	r1, [r7, #0]
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	4798      	blx	r3
 800c834:	4603      	mov	r3, r0
 800c836:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	88db      	ldrh	r3, [r3, #6]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d110      	bne.n	800c862 <USBD_StdItfReq+0x7a>
 800c840:	7bfb      	ldrb	r3, [r7, #15]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d10d      	bne.n	800c862 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f000 fd9d 	bl	800d386 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c84c:	e009      	b.n	800c862 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c84e:	6839      	ldr	r1, [r7, #0]
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f000 fccd 	bl	800d1f0 <USBD_CtlError>
          break;
 800c856:	e004      	b.n	800c862 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c858:	6839      	ldr	r1, [r7, #0]
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f000 fcc8 	bl	800d1f0 <USBD_CtlError>
          break;
 800c860:	e000      	b.n	800c864 <USBD_StdItfReq+0x7c>
          break;
 800c862:	bf00      	nop
      }
      break;
 800c864:	e004      	b.n	800c870 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c866:	6839      	ldr	r1, [r7, #0]
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f000 fcc1 	bl	800d1f0 <USBD_CtlError>
      break;
 800c86e:	bf00      	nop
  }

  return ret;
 800c870:	7bfb      	ldrb	r3, [r7, #15]
}
 800c872:	4618      	mov	r0, r3
 800c874:	3710      	adds	r7, #16
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}

0800c87a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c87a:	b580      	push	{r7, lr}
 800c87c:	b084      	sub	sp, #16
 800c87e:	af00      	add	r7, sp, #0
 800c880:	6078      	str	r0, [r7, #4]
 800c882:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c884:	2300      	movs	r3, #0
 800c886:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	889b      	ldrh	r3, [r3, #4]
 800c88c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c896:	2b40      	cmp	r3, #64	; 0x40
 800c898:	d007      	beq.n	800c8aa <USBD_StdEPReq+0x30>
 800c89a:	2b40      	cmp	r3, #64	; 0x40
 800c89c:	f200 8145 	bhi.w	800cb2a <USBD_StdEPReq+0x2b0>
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d00c      	beq.n	800c8be <USBD_StdEPReq+0x44>
 800c8a4:	2b20      	cmp	r3, #32
 800c8a6:	f040 8140 	bne.w	800cb2a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8b0:	689b      	ldr	r3, [r3, #8]
 800c8b2:	6839      	ldr	r1, [r7, #0]
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	4798      	blx	r3
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	73fb      	strb	r3, [r7, #15]
      break;
 800c8bc:	e13a      	b.n	800cb34 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	785b      	ldrb	r3, [r3, #1]
 800c8c2:	2b03      	cmp	r3, #3
 800c8c4:	d007      	beq.n	800c8d6 <USBD_StdEPReq+0x5c>
 800c8c6:	2b03      	cmp	r3, #3
 800c8c8:	f300 8129 	bgt.w	800cb1e <USBD_StdEPReq+0x2a4>
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d07f      	beq.n	800c9d0 <USBD_StdEPReq+0x156>
 800c8d0:	2b01      	cmp	r3, #1
 800c8d2:	d03c      	beq.n	800c94e <USBD_StdEPReq+0xd4>
 800c8d4:	e123      	b.n	800cb1e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8dc:	b2db      	uxtb	r3, r3
 800c8de:	2b02      	cmp	r3, #2
 800c8e0:	d002      	beq.n	800c8e8 <USBD_StdEPReq+0x6e>
 800c8e2:	2b03      	cmp	r3, #3
 800c8e4:	d016      	beq.n	800c914 <USBD_StdEPReq+0x9a>
 800c8e6:	e02c      	b.n	800c942 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c8e8:	7bbb      	ldrb	r3, [r7, #14]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d00d      	beq.n	800c90a <USBD_StdEPReq+0x90>
 800c8ee:	7bbb      	ldrb	r3, [r7, #14]
 800c8f0:	2b80      	cmp	r3, #128	; 0x80
 800c8f2:	d00a      	beq.n	800c90a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c8f4:	7bbb      	ldrb	r3, [r7, #14]
 800c8f6:	4619      	mov	r1, r3
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f001 f931 	bl	800db60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c8fe:	2180      	movs	r1, #128	; 0x80
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f001 f92d 	bl	800db60 <USBD_LL_StallEP>
 800c906:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c908:	e020      	b.n	800c94c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c90a:	6839      	ldr	r1, [r7, #0]
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f000 fc6f 	bl	800d1f0 <USBD_CtlError>
              break;
 800c912:	e01b      	b.n	800c94c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	885b      	ldrh	r3, [r3, #2]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d10e      	bne.n	800c93a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c91c:	7bbb      	ldrb	r3, [r7, #14]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d00b      	beq.n	800c93a <USBD_StdEPReq+0xc0>
 800c922:	7bbb      	ldrb	r3, [r7, #14]
 800c924:	2b80      	cmp	r3, #128	; 0x80
 800c926:	d008      	beq.n	800c93a <USBD_StdEPReq+0xc0>
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	88db      	ldrh	r3, [r3, #6]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d104      	bne.n	800c93a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c930:	7bbb      	ldrb	r3, [r7, #14]
 800c932:	4619      	mov	r1, r3
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f001 f913 	bl	800db60 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f000 fd23 	bl	800d386 <USBD_CtlSendStatus>

              break;
 800c940:	e004      	b.n	800c94c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c942:	6839      	ldr	r1, [r7, #0]
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f000 fc53 	bl	800d1f0 <USBD_CtlError>
              break;
 800c94a:	bf00      	nop
          }
          break;
 800c94c:	e0ec      	b.n	800cb28 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c954:	b2db      	uxtb	r3, r3
 800c956:	2b02      	cmp	r3, #2
 800c958:	d002      	beq.n	800c960 <USBD_StdEPReq+0xe6>
 800c95a:	2b03      	cmp	r3, #3
 800c95c:	d016      	beq.n	800c98c <USBD_StdEPReq+0x112>
 800c95e:	e030      	b.n	800c9c2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c960:	7bbb      	ldrb	r3, [r7, #14]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d00d      	beq.n	800c982 <USBD_StdEPReq+0x108>
 800c966:	7bbb      	ldrb	r3, [r7, #14]
 800c968:	2b80      	cmp	r3, #128	; 0x80
 800c96a:	d00a      	beq.n	800c982 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c96c:	7bbb      	ldrb	r3, [r7, #14]
 800c96e:	4619      	mov	r1, r3
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f001 f8f5 	bl	800db60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c976:	2180      	movs	r1, #128	; 0x80
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f001 f8f1 	bl	800db60 <USBD_LL_StallEP>
 800c97e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c980:	e025      	b.n	800c9ce <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c982:	6839      	ldr	r1, [r7, #0]
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f000 fc33 	bl	800d1f0 <USBD_CtlError>
              break;
 800c98a:	e020      	b.n	800c9ce <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	885b      	ldrh	r3, [r3, #2]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d11b      	bne.n	800c9cc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c994:	7bbb      	ldrb	r3, [r7, #14]
 800c996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d004      	beq.n	800c9a8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c99e:	7bbb      	ldrb	r3, [r7, #14]
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f001 f8fb 	bl	800db9e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 fcec 	bl	800d386 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9b4:	689b      	ldr	r3, [r3, #8]
 800c9b6:	6839      	ldr	r1, [r7, #0]
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	4798      	blx	r3
 800c9bc:	4603      	mov	r3, r0
 800c9be:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c9c0:	e004      	b.n	800c9cc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c9c2:	6839      	ldr	r1, [r7, #0]
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f000 fc13 	bl	800d1f0 <USBD_CtlError>
              break;
 800c9ca:	e000      	b.n	800c9ce <USBD_StdEPReq+0x154>
              break;
 800c9cc:	bf00      	nop
          }
          break;
 800c9ce:	e0ab      	b.n	800cb28 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9d6:	b2db      	uxtb	r3, r3
 800c9d8:	2b02      	cmp	r3, #2
 800c9da:	d002      	beq.n	800c9e2 <USBD_StdEPReq+0x168>
 800c9dc:	2b03      	cmp	r3, #3
 800c9de:	d032      	beq.n	800ca46 <USBD_StdEPReq+0x1cc>
 800c9e0:	e097      	b.n	800cb12 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c9e2:	7bbb      	ldrb	r3, [r7, #14]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d007      	beq.n	800c9f8 <USBD_StdEPReq+0x17e>
 800c9e8:	7bbb      	ldrb	r3, [r7, #14]
 800c9ea:	2b80      	cmp	r3, #128	; 0x80
 800c9ec:	d004      	beq.n	800c9f8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c9ee:	6839      	ldr	r1, [r7, #0]
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f000 fbfd 	bl	800d1f0 <USBD_CtlError>
                break;
 800c9f6:	e091      	b.n	800cb1c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c9f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	da0b      	bge.n	800ca18 <USBD_StdEPReq+0x19e>
 800ca00:	7bbb      	ldrb	r3, [r7, #14]
 800ca02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ca06:	4613      	mov	r3, r2
 800ca08:	009b      	lsls	r3, r3, #2
 800ca0a:	4413      	add	r3, r2
 800ca0c:	009b      	lsls	r3, r3, #2
 800ca0e:	3310      	adds	r3, #16
 800ca10:	687a      	ldr	r2, [r7, #4]
 800ca12:	4413      	add	r3, r2
 800ca14:	3304      	adds	r3, #4
 800ca16:	e00b      	b.n	800ca30 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ca18:	7bbb      	ldrb	r3, [r7, #14]
 800ca1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca1e:	4613      	mov	r3, r2
 800ca20:	009b      	lsls	r3, r3, #2
 800ca22:	4413      	add	r3, r2
 800ca24:	009b      	lsls	r3, r3, #2
 800ca26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ca2a:	687a      	ldr	r2, [r7, #4]
 800ca2c:	4413      	add	r3, r2
 800ca2e:	3304      	adds	r3, #4
 800ca30:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	2200      	movs	r2, #0
 800ca36:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	2202      	movs	r2, #2
 800ca3c:	4619      	mov	r1, r3
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f000 fc47 	bl	800d2d2 <USBD_CtlSendData>
              break;
 800ca44:	e06a      	b.n	800cb1c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ca46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	da11      	bge.n	800ca72 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ca4e:	7bbb      	ldrb	r3, [r7, #14]
 800ca50:	f003 020f 	and.w	r2, r3, #15
 800ca54:	6879      	ldr	r1, [r7, #4]
 800ca56:	4613      	mov	r3, r2
 800ca58:	009b      	lsls	r3, r3, #2
 800ca5a:	4413      	add	r3, r2
 800ca5c:	009b      	lsls	r3, r3, #2
 800ca5e:	440b      	add	r3, r1
 800ca60:	3324      	adds	r3, #36	; 0x24
 800ca62:	881b      	ldrh	r3, [r3, #0]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d117      	bne.n	800ca98 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ca68:	6839      	ldr	r1, [r7, #0]
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f000 fbc0 	bl	800d1f0 <USBD_CtlError>
                  break;
 800ca70:	e054      	b.n	800cb1c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ca72:	7bbb      	ldrb	r3, [r7, #14]
 800ca74:	f003 020f 	and.w	r2, r3, #15
 800ca78:	6879      	ldr	r1, [r7, #4]
 800ca7a:	4613      	mov	r3, r2
 800ca7c:	009b      	lsls	r3, r3, #2
 800ca7e:	4413      	add	r3, r2
 800ca80:	009b      	lsls	r3, r3, #2
 800ca82:	440b      	add	r3, r1
 800ca84:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ca88:	881b      	ldrh	r3, [r3, #0]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d104      	bne.n	800ca98 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ca8e:	6839      	ldr	r1, [r7, #0]
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f000 fbad 	bl	800d1f0 <USBD_CtlError>
                  break;
 800ca96:	e041      	b.n	800cb1c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	da0b      	bge.n	800cab8 <USBD_StdEPReq+0x23e>
 800caa0:	7bbb      	ldrb	r3, [r7, #14]
 800caa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800caa6:	4613      	mov	r3, r2
 800caa8:	009b      	lsls	r3, r3, #2
 800caaa:	4413      	add	r3, r2
 800caac:	009b      	lsls	r3, r3, #2
 800caae:	3310      	adds	r3, #16
 800cab0:	687a      	ldr	r2, [r7, #4]
 800cab2:	4413      	add	r3, r2
 800cab4:	3304      	adds	r3, #4
 800cab6:	e00b      	b.n	800cad0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cab8:	7bbb      	ldrb	r3, [r7, #14]
 800caba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cabe:	4613      	mov	r3, r2
 800cac0:	009b      	lsls	r3, r3, #2
 800cac2:	4413      	add	r3, r2
 800cac4:	009b      	lsls	r3, r3, #2
 800cac6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800caca:	687a      	ldr	r2, [r7, #4]
 800cacc:	4413      	add	r3, r2
 800cace:	3304      	adds	r3, #4
 800cad0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cad2:	7bbb      	ldrb	r3, [r7, #14]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d002      	beq.n	800cade <USBD_StdEPReq+0x264>
 800cad8:	7bbb      	ldrb	r3, [r7, #14]
 800cada:	2b80      	cmp	r3, #128	; 0x80
 800cadc:	d103      	bne.n	800cae6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	2200      	movs	r2, #0
 800cae2:	601a      	str	r2, [r3, #0]
 800cae4:	e00e      	b.n	800cb04 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cae6:	7bbb      	ldrb	r3, [r7, #14]
 800cae8:	4619      	mov	r1, r3
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f001 f876 	bl	800dbdc <USBD_LL_IsStallEP>
 800caf0:	4603      	mov	r3, r0
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d003      	beq.n	800cafe <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	2201      	movs	r2, #1
 800cafa:	601a      	str	r2, [r3, #0]
 800cafc:	e002      	b.n	800cb04 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	2200      	movs	r2, #0
 800cb02:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	2202      	movs	r2, #2
 800cb08:	4619      	mov	r1, r3
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f000 fbe1 	bl	800d2d2 <USBD_CtlSendData>
              break;
 800cb10:	e004      	b.n	800cb1c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800cb12:	6839      	ldr	r1, [r7, #0]
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f000 fb6b 	bl	800d1f0 <USBD_CtlError>
              break;
 800cb1a:	bf00      	nop
          }
          break;
 800cb1c:	e004      	b.n	800cb28 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800cb1e:	6839      	ldr	r1, [r7, #0]
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f000 fb65 	bl	800d1f0 <USBD_CtlError>
          break;
 800cb26:	bf00      	nop
      }
      break;
 800cb28:	e004      	b.n	800cb34 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800cb2a:	6839      	ldr	r1, [r7, #0]
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f000 fb5f 	bl	800d1f0 <USBD_CtlError>
      break;
 800cb32:	bf00      	nop
  }

  return ret;
 800cb34:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3710      	adds	r7, #16
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
	...

0800cb40 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b084      	sub	sp, #16
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
 800cb48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cb52:	2300      	movs	r3, #0
 800cb54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	885b      	ldrh	r3, [r3, #2]
 800cb5a:	0a1b      	lsrs	r3, r3, #8
 800cb5c:	b29b      	uxth	r3, r3
 800cb5e:	3b01      	subs	r3, #1
 800cb60:	2b0e      	cmp	r3, #14
 800cb62:	f200 8152 	bhi.w	800ce0a <USBD_GetDescriptor+0x2ca>
 800cb66:	a201      	add	r2, pc, #4	; (adr r2, 800cb6c <USBD_GetDescriptor+0x2c>)
 800cb68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb6c:	0800cbdd 	.word	0x0800cbdd
 800cb70:	0800cbf5 	.word	0x0800cbf5
 800cb74:	0800cc35 	.word	0x0800cc35
 800cb78:	0800ce0b 	.word	0x0800ce0b
 800cb7c:	0800ce0b 	.word	0x0800ce0b
 800cb80:	0800cdab 	.word	0x0800cdab
 800cb84:	0800cdd7 	.word	0x0800cdd7
 800cb88:	0800ce0b 	.word	0x0800ce0b
 800cb8c:	0800ce0b 	.word	0x0800ce0b
 800cb90:	0800ce0b 	.word	0x0800ce0b
 800cb94:	0800ce0b 	.word	0x0800ce0b
 800cb98:	0800ce0b 	.word	0x0800ce0b
 800cb9c:	0800ce0b 	.word	0x0800ce0b
 800cba0:	0800ce0b 	.word	0x0800ce0b
 800cba4:	0800cba9 	.word	0x0800cba9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbae:	69db      	ldr	r3, [r3, #28]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d00b      	beq.n	800cbcc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbba:	69db      	ldr	r3, [r3, #28]
 800cbbc:	687a      	ldr	r2, [r7, #4]
 800cbbe:	7c12      	ldrb	r2, [r2, #16]
 800cbc0:	f107 0108 	add.w	r1, r7, #8
 800cbc4:	4610      	mov	r0, r2
 800cbc6:	4798      	blx	r3
 800cbc8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cbca:	e126      	b.n	800ce1a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cbcc:	6839      	ldr	r1, [r7, #0]
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f000 fb0e 	bl	800d1f0 <USBD_CtlError>
        err++;
 800cbd4:	7afb      	ldrb	r3, [r7, #11]
 800cbd6:	3301      	adds	r3, #1
 800cbd8:	72fb      	strb	r3, [r7, #11]
      break;
 800cbda:	e11e      	b.n	800ce1a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	687a      	ldr	r2, [r7, #4]
 800cbe6:	7c12      	ldrb	r2, [r2, #16]
 800cbe8:	f107 0108 	add.w	r1, r7, #8
 800cbec:	4610      	mov	r0, r2
 800cbee:	4798      	blx	r3
 800cbf0:	60f8      	str	r0, [r7, #12]
      break;
 800cbf2:	e112      	b.n	800ce1a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	7c1b      	ldrb	r3, [r3, #16]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d10d      	bne.n	800cc18 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc04:	f107 0208 	add.w	r2, r7, #8
 800cc08:	4610      	mov	r0, r2
 800cc0a:	4798      	blx	r3
 800cc0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	3301      	adds	r3, #1
 800cc12:	2202      	movs	r2, #2
 800cc14:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cc16:	e100      	b.n	800ce1a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc20:	f107 0208 	add.w	r2, r7, #8
 800cc24:	4610      	mov	r0, r2
 800cc26:	4798      	blx	r3
 800cc28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	2202      	movs	r2, #2
 800cc30:	701a      	strb	r2, [r3, #0]
      break;
 800cc32:	e0f2      	b.n	800ce1a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	885b      	ldrh	r3, [r3, #2]
 800cc38:	b2db      	uxtb	r3, r3
 800cc3a:	2b05      	cmp	r3, #5
 800cc3c:	f200 80ac 	bhi.w	800cd98 <USBD_GetDescriptor+0x258>
 800cc40:	a201      	add	r2, pc, #4	; (adr r2, 800cc48 <USBD_GetDescriptor+0x108>)
 800cc42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc46:	bf00      	nop
 800cc48:	0800cc61 	.word	0x0800cc61
 800cc4c:	0800cc95 	.word	0x0800cc95
 800cc50:	0800ccc9 	.word	0x0800ccc9
 800cc54:	0800ccfd 	.word	0x0800ccfd
 800cc58:	0800cd31 	.word	0x0800cd31
 800cc5c:	0800cd65 	.word	0x0800cd65
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc66:	685b      	ldr	r3, [r3, #4]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d00b      	beq.n	800cc84 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc72:	685b      	ldr	r3, [r3, #4]
 800cc74:	687a      	ldr	r2, [r7, #4]
 800cc76:	7c12      	ldrb	r2, [r2, #16]
 800cc78:	f107 0108 	add.w	r1, r7, #8
 800cc7c:	4610      	mov	r0, r2
 800cc7e:	4798      	blx	r3
 800cc80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc82:	e091      	b.n	800cda8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cc84:	6839      	ldr	r1, [r7, #0]
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f000 fab2 	bl	800d1f0 <USBD_CtlError>
            err++;
 800cc8c:	7afb      	ldrb	r3, [r7, #11]
 800cc8e:	3301      	adds	r3, #1
 800cc90:	72fb      	strb	r3, [r7, #11]
          break;
 800cc92:	e089      	b.n	800cda8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc9a:	689b      	ldr	r3, [r3, #8]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d00b      	beq.n	800ccb8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cca6:	689b      	ldr	r3, [r3, #8]
 800cca8:	687a      	ldr	r2, [r7, #4]
 800ccaa:	7c12      	ldrb	r2, [r2, #16]
 800ccac:	f107 0108 	add.w	r1, r7, #8
 800ccb0:	4610      	mov	r0, r2
 800ccb2:	4798      	blx	r3
 800ccb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ccb6:	e077      	b.n	800cda8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ccb8:	6839      	ldr	r1, [r7, #0]
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f000 fa98 	bl	800d1f0 <USBD_CtlError>
            err++;
 800ccc0:	7afb      	ldrb	r3, [r7, #11]
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	72fb      	strb	r3, [r7, #11]
          break;
 800ccc6:	e06f      	b.n	800cda8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccce:	68db      	ldr	r3, [r3, #12]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d00b      	beq.n	800ccec <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccda:	68db      	ldr	r3, [r3, #12]
 800ccdc:	687a      	ldr	r2, [r7, #4]
 800ccde:	7c12      	ldrb	r2, [r2, #16]
 800cce0:	f107 0108 	add.w	r1, r7, #8
 800cce4:	4610      	mov	r0, r2
 800cce6:	4798      	blx	r3
 800cce8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ccea:	e05d      	b.n	800cda8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ccec:	6839      	ldr	r1, [r7, #0]
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f000 fa7e 	bl	800d1f0 <USBD_CtlError>
            err++;
 800ccf4:	7afb      	ldrb	r3, [r7, #11]
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	72fb      	strb	r3, [r7, #11]
          break;
 800ccfa:	e055      	b.n	800cda8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd02:	691b      	ldr	r3, [r3, #16]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d00b      	beq.n	800cd20 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd0e:	691b      	ldr	r3, [r3, #16]
 800cd10:	687a      	ldr	r2, [r7, #4]
 800cd12:	7c12      	ldrb	r2, [r2, #16]
 800cd14:	f107 0108 	add.w	r1, r7, #8
 800cd18:	4610      	mov	r0, r2
 800cd1a:	4798      	blx	r3
 800cd1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd1e:	e043      	b.n	800cda8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cd20:	6839      	ldr	r1, [r7, #0]
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f000 fa64 	bl	800d1f0 <USBD_CtlError>
            err++;
 800cd28:	7afb      	ldrb	r3, [r7, #11]
 800cd2a:	3301      	adds	r3, #1
 800cd2c:	72fb      	strb	r3, [r7, #11]
          break;
 800cd2e:	e03b      	b.n	800cda8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd36:	695b      	ldr	r3, [r3, #20]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d00b      	beq.n	800cd54 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd42:	695b      	ldr	r3, [r3, #20]
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	7c12      	ldrb	r2, [r2, #16]
 800cd48:	f107 0108 	add.w	r1, r7, #8
 800cd4c:	4610      	mov	r0, r2
 800cd4e:	4798      	blx	r3
 800cd50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd52:	e029      	b.n	800cda8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cd54:	6839      	ldr	r1, [r7, #0]
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f000 fa4a 	bl	800d1f0 <USBD_CtlError>
            err++;
 800cd5c:	7afb      	ldrb	r3, [r7, #11]
 800cd5e:	3301      	adds	r3, #1
 800cd60:	72fb      	strb	r3, [r7, #11]
          break;
 800cd62:	e021      	b.n	800cda8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd6a:	699b      	ldr	r3, [r3, #24]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d00b      	beq.n	800cd88 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd76:	699b      	ldr	r3, [r3, #24]
 800cd78:	687a      	ldr	r2, [r7, #4]
 800cd7a:	7c12      	ldrb	r2, [r2, #16]
 800cd7c:	f107 0108 	add.w	r1, r7, #8
 800cd80:	4610      	mov	r0, r2
 800cd82:	4798      	blx	r3
 800cd84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd86:	e00f      	b.n	800cda8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cd88:	6839      	ldr	r1, [r7, #0]
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f000 fa30 	bl	800d1f0 <USBD_CtlError>
            err++;
 800cd90:	7afb      	ldrb	r3, [r7, #11]
 800cd92:	3301      	adds	r3, #1
 800cd94:	72fb      	strb	r3, [r7, #11]
          break;
 800cd96:	e007      	b.n	800cda8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cd98:	6839      	ldr	r1, [r7, #0]
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f000 fa28 	bl	800d1f0 <USBD_CtlError>
          err++;
 800cda0:	7afb      	ldrb	r3, [r7, #11]
 800cda2:	3301      	adds	r3, #1
 800cda4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800cda6:	bf00      	nop
      }
      break;
 800cda8:	e037      	b.n	800ce1a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	7c1b      	ldrb	r3, [r3, #16]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d109      	bne.n	800cdc6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdba:	f107 0208 	add.w	r2, r7, #8
 800cdbe:	4610      	mov	r0, r2
 800cdc0:	4798      	blx	r3
 800cdc2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cdc4:	e029      	b.n	800ce1a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cdc6:	6839      	ldr	r1, [r7, #0]
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	f000 fa11 	bl	800d1f0 <USBD_CtlError>
        err++;
 800cdce:	7afb      	ldrb	r3, [r7, #11]
 800cdd0:	3301      	adds	r3, #1
 800cdd2:	72fb      	strb	r3, [r7, #11]
      break;
 800cdd4:	e021      	b.n	800ce1a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	7c1b      	ldrb	r3, [r3, #16]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d10d      	bne.n	800cdfa <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cde4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cde6:	f107 0208 	add.w	r2, r7, #8
 800cdea:	4610      	mov	r0, r2
 800cdec:	4798      	blx	r3
 800cdee:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	2207      	movs	r2, #7
 800cdf6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cdf8:	e00f      	b.n	800ce1a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cdfa:	6839      	ldr	r1, [r7, #0]
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f000 f9f7 	bl	800d1f0 <USBD_CtlError>
        err++;
 800ce02:	7afb      	ldrb	r3, [r7, #11]
 800ce04:	3301      	adds	r3, #1
 800ce06:	72fb      	strb	r3, [r7, #11]
      break;
 800ce08:	e007      	b.n	800ce1a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ce0a:	6839      	ldr	r1, [r7, #0]
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f000 f9ef 	bl	800d1f0 <USBD_CtlError>
      err++;
 800ce12:	7afb      	ldrb	r3, [r7, #11]
 800ce14:	3301      	adds	r3, #1
 800ce16:	72fb      	strb	r3, [r7, #11]
      break;
 800ce18:	bf00      	nop
  }

  if (err != 0U)
 800ce1a:	7afb      	ldrb	r3, [r7, #11]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d11e      	bne.n	800ce5e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	88db      	ldrh	r3, [r3, #6]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d016      	beq.n	800ce56 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ce28:	893b      	ldrh	r3, [r7, #8]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d00e      	beq.n	800ce4c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	88da      	ldrh	r2, [r3, #6]
 800ce32:	893b      	ldrh	r3, [r7, #8]
 800ce34:	4293      	cmp	r3, r2
 800ce36:	bf28      	it	cs
 800ce38:	4613      	movcs	r3, r2
 800ce3a:	b29b      	uxth	r3, r3
 800ce3c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ce3e:	893b      	ldrh	r3, [r7, #8]
 800ce40:	461a      	mov	r2, r3
 800ce42:	68f9      	ldr	r1, [r7, #12]
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f000 fa44 	bl	800d2d2 <USBD_CtlSendData>
 800ce4a:	e009      	b.n	800ce60 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ce4c:	6839      	ldr	r1, [r7, #0]
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f000 f9ce 	bl	800d1f0 <USBD_CtlError>
 800ce54:	e004      	b.n	800ce60 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ce56:	6878      	ldr	r0, [r7, #4]
 800ce58:	f000 fa95 	bl	800d386 <USBD_CtlSendStatus>
 800ce5c:	e000      	b.n	800ce60 <USBD_GetDescriptor+0x320>
    return;
 800ce5e:	bf00      	nop
  }
}
 800ce60:	3710      	adds	r7, #16
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
 800ce66:	bf00      	nop

0800ce68 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b084      	sub	sp, #16
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	889b      	ldrh	r3, [r3, #4]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d131      	bne.n	800cede <USBD_SetAddress+0x76>
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	88db      	ldrh	r3, [r3, #6]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d12d      	bne.n	800cede <USBD_SetAddress+0x76>
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	885b      	ldrh	r3, [r3, #2]
 800ce86:	2b7f      	cmp	r3, #127	; 0x7f
 800ce88:	d829      	bhi.n	800cede <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	885b      	ldrh	r3, [r3, #2]
 800ce8e:	b2db      	uxtb	r3, r3
 800ce90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce94:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce9c:	b2db      	uxtb	r3, r3
 800ce9e:	2b03      	cmp	r3, #3
 800cea0:	d104      	bne.n	800ceac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cea2:	6839      	ldr	r1, [r7, #0]
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f000 f9a3 	bl	800d1f0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ceaa:	e01d      	b.n	800cee8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	7bfa      	ldrb	r2, [r7, #15]
 800ceb0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ceb4:	7bfb      	ldrb	r3, [r7, #15]
 800ceb6:	4619      	mov	r1, r3
 800ceb8:	6878      	ldr	r0, [r7, #4]
 800ceba:	f000 febc 	bl	800dc36 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f000 fa61 	bl	800d386 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cec4:	7bfb      	ldrb	r3, [r7, #15]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d004      	beq.n	800ced4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2202      	movs	r2, #2
 800cece:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ced2:	e009      	b.n	800cee8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2201      	movs	r2, #1
 800ced8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cedc:	e004      	b.n	800cee8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cede:	6839      	ldr	r1, [r7, #0]
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f000 f985 	bl	800d1f0 <USBD_CtlError>
  }
}
 800cee6:	bf00      	nop
 800cee8:	bf00      	nop
 800ceea:	3710      	adds	r7, #16
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}

0800cef0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b084      	sub	sp, #16
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cefa:	2300      	movs	r3, #0
 800cefc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	885b      	ldrh	r3, [r3, #2]
 800cf02:	b2da      	uxtb	r2, r3
 800cf04:	4b4c      	ldr	r3, [pc, #304]	; (800d038 <USBD_SetConfig+0x148>)
 800cf06:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cf08:	4b4b      	ldr	r3, [pc, #300]	; (800d038 <USBD_SetConfig+0x148>)
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	2b01      	cmp	r3, #1
 800cf0e:	d905      	bls.n	800cf1c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cf10:	6839      	ldr	r1, [r7, #0]
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f000 f96c 	bl	800d1f0 <USBD_CtlError>
    return USBD_FAIL;
 800cf18:	2303      	movs	r3, #3
 800cf1a:	e088      	b.n	800d02e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf22:	b2db      	uxtb	r3, r3
 800cf24:	2b02      	cmp	r3, #2
 800cf26:	d002      	beq.n	800cf2e <USBD_SetConfig+0x3e>
 800cf28:	2b03      	cmp	r3, #3
 800cf2a:	d025      	beq.n	800cf78 <USBD_SetConfig+0x88>
 800cf2c:	e071      	b.n	800d012 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cf2e:	4b42      	ldr	r3, [pc, #264]	; (800d038 <USBD_SetConfig+0x148>)
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d01c      	beq.n	800cf70 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800cf36:	4b40      	ldr	r3, [pc, #256]	; (800d038 <USBD_SetConfig+0x148>)
 800cf38:	781b      	ldrb	r3, [r3, #0]
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cf40:	4b3d      	ldr	r3, [pc, #244]	; (800d038 <USBD_SetConfig+0x148>)
 800cf42:	781b      	ldrb	r3, [r3, #0]
 800cf44:	4619      	mov	r1, r3
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f7ff f992 	bl	800c270 <USBD_SetClassConfig>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cf50:	7bfb      	ldrb	r3, [r7, #15]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d004      	beq.n	800cf60 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800cf56:	6839      	ldr	r1, [r7, #0]
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f000 f949 	bl	800d1f0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cf5e:	e065      	b.n	800d02c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f000 fa10 	bl	800d386 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2203      	movs	r2, #3
 800cf6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cf6e:	e05d      	b.n	800d02c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f000 fa08 	bl	800d386 <USBD_CtlSendStatus>
      break;
 800cf76:	e059      	b.n	800d02c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cf78:	4b2f      	ldr	r3, [pc, #188]	; (800d038 <USBD_SetConfig+0x148>)
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d112      	bne.n	800cfa6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2202      	movs	r2, #2
 800cf84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cf88:	4b2b      	ldr	r3, [pc, #172]	; (800d038 <USBD_SetConfig+0x148>)
 800cf8a:	781b      	ldrb	r3, [r3, #0]
 800cf8c:	461a      	mov	r2, r3
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cf92:	4b29      	ldr	r3, [pc, #164]	; (800d038 <USBD_SetConfig+0x148>)
 800cf94:	781b      	ldrb	r3, [r3, #0]
 800cf96:	4619      	mov	r1, r3
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f7ff f985 	bl	800c2a8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f000 f9f1 	bl	800d386 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cfa4:	e042      	b.n	800d02c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800cfa6:	4b24      	ldr	r3, [pc, #144]	; (800d038 <USBD_SetConfig+0x148>)
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	461a      	mov	r2, r3
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	685b      	ldr	r3, [r3, #4]
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d02a      	beq.n	800d00a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	685b      	ldr	r3, [r3, #4]
 800cfb8:	b2db      	uxtb	r3, r3
 800cfba:	4619      	mov	r1, r3
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f7ff f973 	bl	800c2a8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cfc2:	4b1d      	ldr	r3, [pc, #116]	; (800d038 <USBD_SetConfig+0x148>)
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	461a      	mov	r2, r3
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cfcc:	4b1a      	ldr	r3, [pc, #104]	; (800d038 <USBD_SetConfig+0x148>)
 800cfce:	781b      	ldrb	r3, [r3, #0]
 800cfd0:	4619      	mov	r1, r3
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f7ff f94c 	bl	800c270 <USBD_SetClassConfig>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cfdc:	7bfb      	ldrb	r3, [r7, #15]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d00f      	beq.n	800d002 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800cfe2:	6839      	ldr	r1, [r7, #0]
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f000 f903 	bl	800d1f0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	685b      	ldr	r3, [r3, #4]
 800cfee:	b2db      	uxtb	r3, r3
 800cff0:	4619      	mov	r1, r3
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f7ff f958 	bl	800c2a8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2202      	movs	r2, #2
 800cffc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d000:	e014      	b.n	800d02c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f000 f9bf 	bl	800d386 <USBD_CtlSendStatus>
      break;
 800d008:	e010      	b.n	800d02c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f000 f9bb 	bl	800d386 <USBD_CtlSendStatus>
      break;
 800d010:	e00c      	b.n	800d02c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d012:	6839      	ldr	r1, [r7, #0]
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f000 f8eb 	bl	800d1f0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d01a:	4b07      	ldr	r3, [pc, #28]	; (800d038 <USBD_SetConfig+0x148>)
 800d01c:	781b      	ldrb	r3, [r3, #0]
 800d01e:	4619      	mov	r1, r3
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f7ff f941 	bl	800c2a8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d026:	2303      	movs	r3, #3
 800d028:	73fb      	strb	r3, [r7, #15]
      break;
 800d02a:	bf00      	nop
  }

  return ret;
 800d02c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3710      	adds	r7, #16
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
 800d036:	bf00      	nop
 800d038:	20003208 	.word	0x20003208

0800d03c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b082      	sub	sp, #8
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
 800d044:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	88db      	ldrh	r3, [r3, #6]
 800d04a:	2b01      	cmp	r3, #1
 800d04c:	d004      	beq.n	800d058 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d04e:	6839      	ldr	r1, [r7, #0]
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f000 f8cd 	bl	800d1f0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d056:	e023      	b.n	800d0a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d05e:	b2db      	uxtb	r3, r3
 800d060:	2b02      	cmp	r3, #2
 800d062:	dc02      	bgt.n	800d06a <USBD_GetConfig+0x2e>
 800d064:	2b00      	cmp	r3, #0
 800d066:	dc03      	bgt.n	800d070 <USBD_GetConfig+0x34>
 800d068:	e015      	b.n	800d096 <USBD_GetConfig+0x5a>
 800d06a:	2b03      	cmp	r3, #3
 800d06c:	d00b      	beq.n	800d086 <USBD_GetConfig+0x4a>
 800d06e:	e012      	b.n	800d096 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2200      	movs	r2, #0
 800d074:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	3308      	adds	r3, #8
 800d07a:	2201      	movs	r2, #1
 800d07c:	4619      	mov	r1, r3
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f000 f927 	bl	800d2d2 <USBD_CtlSendData>
        break;
 800d084:	e00c      	b.n	800d0a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	3304      	adds	r3, #4
 800d08a:	2201      	movs	r2, #1
 800d08c:	4619      	mov	r1, r3
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f000 f91f 	bl	800d2d2 <USBD_CtlSendData>
        break;
 800d094:	e004      	b.n	800d0a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d096:	6839      	ldr	r1, [r7, #0]
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f000 f8a9 	bl	800d1f0 <USBD_CtlError>
        break;
 800d09e:	bf00      	nop
}
 800d0a0:	bf00      	nop
 800d0a2:	3708      	adds	r7, #8
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}

0800d0a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b082      	sub	sp, #8
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
 800d0b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0b8:	b2db      	uxtb	r3, r3
 800d0ba:	3b01      	subs	r3, #1
 800d0bc:	2b02      	cmp	r3, #2
 800d0be:	d81e      	bhi.n	800d0fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	88db      	ldrh	r3, [r3, #6]
 800d0c4:	2b02      	cmp	r3, #2
 800d0c6:	d004      	beq.n	800d0d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d0c8:	6839      	ldr	r1, [r7, #0]
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f000 f890 	bl	800d1f0 <USBD_CtlError>
        break;
 800d0d0:	e01a      	b.n	800d108 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2201      	movs	r2, #1
 800d0d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d005      	beq.n	800d0ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	68db      	ldr	r3, [r3, #12]
 800d0e6:	f043 0202 	orr.w	r2, r3, #2
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	330c      	adds	r3, #12
 800d0f2:	2202      	movs	r2, #2
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f000 f8eb 	bl	800d2d2 <USBD_CtlSendData>
      break;
 800d0fc:	e004      	b.n	800d108 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d0fe:	6839      	ldr	r1, [r7, #0]
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f000 f875 	bl	800d1f0 <USBD_CtlError>
      break;
 800d106:	bf00      	nop
  }
}
 800d108:	bf00      	nop
 800d10a:	3708      	adds	r7, #8
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}

0800d110 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b082      	sub	sp, #8
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
 800d118:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	885b      	ldrh	r3, [r3, #2]
 800d11e:	2b01      	cmp	r3, #1
 800d120:	d106      	bne.n	800d130 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2201      	movs	r2, #1
 800d126:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	f000 f92b 	bl	800d386 <USBD_CtlSendStatus>
  }
}
 800d130:	bf00      	nop
 800d132:	3708      	adds	r7, #8
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}

0800d138 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b082      	sub	sp, #8
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d148:	b2db      	uxtb	r3, r3
 800d14a:	3b01      	subs	r3, #1
 800d14c:	2b02      	cmp	r3, #2
 800d14e:	d80b      	bhi.n	800d168 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	885b      	ldrh	r3, [r3, #2]
 800d154:	2b01      	cmp	r3, #1
 800d156:	d10c      	bne.n	800d172 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2200      	movs	r2, #0
 800d15c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f000 f910 	bl	800d386 <USBD_CtlSendStatus>
      }
      break;
 800d166:	e004      	b.n	800d172 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d168:	6839      	ldr	r1, [r7, #0]
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f000 f840 	bl	800d1f0 <USBD_CtlError>
      break;
 800d170:	e000      	b.n	800d174 <USBD_ClrFeature+0x3c>
      break;
 800d172:	bf00      	nop
  }
}
 800d174:	bf00      	nop
 800d176:	3708      	adds	r7, #8
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}

0800d17c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b084      	sub	sp, #16
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
 800d184:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	781a      	ldrb	r2, [r3, #0]
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	3301      	adds	r3, #1
 800d196:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	781a      	ldrb	r2, [r3, #0]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	3301      	adds	r3, #1
 800d1a4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d1a6:	68f8      	ldr	r0, [r7, #12]
 800d1a8:	f7ff fa92 	bl	800c6d0 <SWAPBYTE>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	461a      	mov	r2, r3
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	3301      	adds	r3, #1
 800d1b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	3301      	adds	r3, #1
 800d1be:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d1c0:	68f8      	ldr	r0, [r7, #12]
 800d1c2:	f7ff fa85 	bl	800c6d0 <SWAPBYTE>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	461a      	mov	r2, r3
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	3301      	adds	r3, #1
 800d1d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	3301      	adds	r3, #1
 800d1d8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d1da:	68f8      	ldr	r0, [r7, #12]
 800d1dc:	f7ff fa78 	bl	800c6d0 <SWAPBYTE>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	80da      	strh	r2, [r3, #6]
}
 800d1e8:	bf00      	nop
 800d1ea:	3710      	adds	r7, #16
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b082      	sub	sp, #8
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
 800d1f8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d1fa:	2180      	movs	r1, #128	; 0x80
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f000 fcaf 	bl	800db60 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d202:	2100      	movs	r1, #0
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f000 fcab 	bl	800db60 <USBD_LL_StallEP>
}
 800d20a:	bf00      	nop
 800d20c:	3708      	adds	r7, #8
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}

0800d212 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d212:	b580      	push	{r7, lr}
 800d214:	b086      	sub	sp, #24
 800d216:	af00      	add	r7, sp, #0
 800d218:	60f8      	str	r0, [r7, #12]
 800d21a:	60b9      	str	r1, [r7, #8]
 800d21c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d21e:	2300      	movs	r3, #0
 800d220:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d036      	beq.n	800d296 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d22c:	6938      	ldr	r0, [r7, #16]
 800d22e:	f000 f836 	bl	800d29e <USBD_GetLen>
 800d232:	4603      	mov	r3, r0
 800d234:	3301      	adds	r3, #1
 800d236:	b29b      	uxth	r3, r3
 800d238:	005b      	lsls	r3, r3, #1
 800d23a:	b29a      	uxth	r2, r3
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d240:	7dfb      	ldrb	r3, [r7, #23]
 800d242:	68ba      	ldr	r2, [r7, #8]
 800d244:	4413      	add	r3, r2
 800d246:	687a      	ldr	r2, [r7, #4]
 800d248:	7812      	ldrb	r2, [r2, #0]
 800d24a:	701a      	strb	r2, [r3, #0]
  idx++;
 800d24c:	7dfb      	ldrb	r3, [r7, #23]
 800d24e:	3301      	adds	r3, #1
 800d250:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d252:	7dfb      	ldrb	r3, [r7, #23]
 800d254:	68ba      	ldr	r2, [r7, #8]
 800d256:	4413      	add	r3, r2
 800d258:	2203      	movs	r2, #3
 800d25a:	701a      	strb	r2, [r3, #0]
  idx++;
 800d25c:	7dfb      	ldrb	r3, [r7, #23]
 800d25e:	3301      	adds	r3, #1
 800d260:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d262:	e013      	b.n	800d28c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d264:	7dfb      	ldrb	r3, [r7, #23]
 800d266:	68ba      	ldr	r2, [r7, #8]
 800d268:	4413      	add	r3, r2
 800d26a:	693a      	ldr	r2, [r7, #16]
 800d26c:	7812      	ldrb	r2, [r2, #0]
 800d26e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d270:	693b      	ldr	r3, [r7, #16]
 800d272:	3301      	adds	r3, #1
 800d274:	613b      	str	r3, [r7, #16]
    idx++;
 800d276:	7dfb      	ldrb	r3, [r7, #23]
 800d278:	3301      	adds	r3, #1
 800d27a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d27c:	7dfb      	ldrb	r3, [r7, #23]
 800d27e:	68ba      	ldr	r2, [r7, #8]
 800d280:	4413      	add	r3, r2
 800d282:	2200      	movs	r2, #0
 800d284:	701a      	strb	r2, [r3, #0]
    idx++;
 800d286:	7dfb      	ldrb	r3, [r7, #23]
 800d288:	3301      	adds	r3, #1
 800d28a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	781b      	ldrb	r3, [r3, #0]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d1e7      	bne.n	800d264 <USBD_GetString+0x52>
 800d294:	e000      	b.n	800d298 <USBD_GetString+0x86>
    return;
 800d296:	bf00      	nop
  }
}
 800d298:	3718      	adds	r7, #24
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}

0800d29e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d29e:	b480      	push	{r7}
 800d2a0:	b085      	sub	sp, #20
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d2ae:	e005      	b.n	800d2bc <USBD_GetLen+0x1e>
  {
    len++;
 800d2b0:	7bfb      	ldrb	r3, [r7, #15]
 800d2b2:	3301      	adds	r3, #1
 800d2b4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	3301      	adds	r3, #1
 800d2ba:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d1f5      	bne.n	800d2b0 <USBD_GetLen+0x12>
  }

  return len;
 800d2c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	3714      	adds	r7, #20
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d0:	4770      	bx	lr

0800d2d2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d2d2:	b580      	push	{r7, lr}
 800d2d4:	b084      	sub	sp, #16
 800d2d6:	af00      	add	r7, sp, #0
 800d2d8:	60f8      	str	r0, [r7, #12]
 800d2da:	60b9      	str	r1, [r7, #8]
 800d2dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	2202      	movs	r2, #2
 800d2e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	687a      	ldr	r2, [r7, #4]
 800d2ea:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	687a      	ldr	r2, [r7, #4]
 800d2f0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	68ba      	ldr	r2, [r7, #8]
 800d2f6:	2100      	movs	r1, #0
 800d2f8:	68f8      	ldr	r0, [r7, #12]
 800d2fa:	f000 fcbb 	bl	800dc74 <USBD_LL_Transmit>

  return USBD_OK;
 800d2fe:	2300      	movs	r3, #0
}
 800d300:	4618      	mov	r0, r3
 800d302:	3710      	adds	r7, #16
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b084      	sub	sp, #16
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	60f8      	str	r0, [r7, #12]
 800d310:	60b9      	str	r1, [r7, #8]
 800d312:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	68ba      	ldr	r2, [r7, #8]
 800d318:	2100      	movs	r1, #0
 800d31a:	68f8      	ldr	r0, [r7, #12]
 800d31c:	f000 fcaa 	bl	800dc74 <USBD_LL_Transmit>

  return USBD_OK;
 800d320:	2300      	movs	r3, #0
}
 800d322:	4618      	mov	r0, r3
 800d324:	3710      	adds	r7, #16
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}

0800d32a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d32a:	b580      	push	{r7, lr}
 800d32c:	b084      	sub	sp, #16
 800d32e:	af00      	add	r7, sp, #0
 800d330:	60f8      	str	r0, [r7, #12]
 800d332:	60b9      	str	r1, [r7, #8]
 800d334:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	2203      	movs	r2, #3
 800d33a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	687a      	ldr	r2, [r7, #4]
 800d342:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	687a      	ldr	r2, [r7, #4]
 800d34a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	68ba      	ldr	r2, [r7, #8]
 800d352:	2100      	movs	r1, #0
 800d354:	68f8      	ldr	r0, [r7, #12]
 800d356:	f000 fcae 	bl	800dcb6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d35a:	2300      	movs	r3, #0
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3710      	adds	r7, #16
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}

0800d364 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b084      	sub	sp, #16
 800d368:	af00      	add	r7, sp, #0
 800d36a:	60f8      	str	r0, [r7, #12]
 800d36c:	60b9      	str	r1, [r7, #8]
 800d36e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	68ba      	ldr	r2, [r7, #8]
 800d374:	2100      	movs	r1, #0
 800d376:	68f8      	ldr	r0, [r7, #12]
 800d378:	f000 fc9d 	bl	800dcb6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d37c:	2300      	movs	r3, #0
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3710      	adds	r7, #16
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}

0800d386 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d386:	b580      	push	{r7, lr}
 800d388:	b082      	sub	sp, #8
 800d38a:	af00      	add	r7, sp, #0
 800d38c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	2204      	movs	r2, #4
 800d392:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d396:	2300      	movs	r3, #0
 800d398:	2200      	movs	r2, #0
 800d39a:	2100      	movs	r1, #0
 800d39c:	6878      	ldr	r0, [r7, #4]
 800d39e:	f000 fc69 	bl	800dc74 <USBD_LL_Transmit>

  return USBD_OK;
 800d3a2:	2300      	movs	r3, #0
}
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	3708      	adds	r7, #8
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}

0800d3ac <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b082      	sub	sp, #8
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2205      	movs	r2, #5
 800d3b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d3bc:	2300      	movs	r3, #0
 800d3be:	2200      	movs	r2, #0
 800d3c0:	2100      	movs	r1, #0
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f000 fc77 	bl	800dcb6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d3c8:	2300      	movs	r3, #0
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3708      	adds	r7, #8
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}
	...

0800d3d4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800d3d8:	2200      	movs	r2, #0
 800d3da:	4912      	ldr	r1, [pc, #72]	; (800d424 <MX_USB_Device_Init+0x50>)
 800d3dc:	4812      	ldr	r0, [pc, #72]	; (800d428 <MX_USB_Device_Init+0x54>)
 800d3de:	f7fe fed9 	bl	800c194 <USBD_Init>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d001      	beq.n	800d3ec <MX_USB_Device_Init+0x18>
    Error_Handler();
 800d3e8:	f7f4 f968 	bl	80016bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800d3ec:	490f      	ldr	r1, [pc, #60]	; (800d42c <MX_USB_Device_Init+0x58>)
 800d3ee:	480e      	ldr	r0, [pc, #56]	; (800d428 <MX_USB_Device_Init+0x54>)
 800d3f0:	f7fe ff00 	bl	800c1f4 <USBD_RegisterClass>
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d001      	beq.n	800d3fe <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800d3fa:	f7f4 f95f 	bl	80016bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800d3fe:	490c      	ldr	r1, [pc, #48]	; (800d430 <MX_USB_Device_Init+0x5c>)
 800d400:	4809      	ldr	r0, [pc, #36]	; (800d428 <MX_USB_Device_Init+0x54>)
 800d402:	f7fe fe21 	bl	800c048 <USBD_CDC_RegisterInterface>
 800d406:	4603      	mov	r3, r0
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d001      	beq.n	800d410 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800d40c:	f7f4 f956 	bl	80016bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800d410:	4805      	ldr	r0, [pc, #20]	; (800d428 <MX_USB_Device_Init+0x54>)
 800d412:	f7fe ff16 	bl	800c242 <USBD_Start>
 800d416:	4603      	mov	r3, r0
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d001      	beq.n	800d420 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800d41c:	f7f4 f94e 	bl	80016bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800d420:	bf00      	nop
 800d422:	bd80      	pop	{r7, pc}
 800d424:	20002804 	.word	0x20002804
 800d428:	2000320c 	.word	0x2000320c
 800d42c:	200026ec 	.word	0x200026ec
 800d430:	200027f0 	.word	0x200027f0

0800d434 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d438:	2200      	movs	r2, #0
 800d43a:	4905      	ldr	r1, [pc, #20]	; (800d450 <CDC_Init_FS+0x1c>)
 800d43c:	4805      	ldr	r0, [pc, #20]	; (800d454 <CDC_Init_FS+0x20>)
 800d43e:	f7fe fe18 	bl	800c072 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d442:	4905      	ldr	r1, [pc, #20]	; (800d458 <CDC_Init_FS+0x24>)
 800d444:	4803      	ldr	r0, [pc, #12]	; (800d454 <CDC_Init_FS+0x20>)
 800d446:	f7fe fe32 	bl	800c0ae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d44a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	bd80      	pop	{r7, pc}
 800d450:	20003cdc 	.word	0x20003cdc
 800d454:	2000320c 	.word	0x2000320c
 800d458:	200034dc 	.word	0x200034dc

0800d45c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d45c:	b480      	push	{r7}
 800d45e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d460:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d462:	4618      	mov	r0, r3
 800d464:	46bd      	mov	sp, r7
 800d466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46a:	4770      	bx	lr

0800d46c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d46c:	b480      	push	{r7}
 800d46e:	b083      	sub	sp, #12
 800d470:	af00      	add	r7, sp, #0
 800d472:	4603      	mov	r3, r0
 800d474:	6039      	str	r1, [r7, #0]
 800d476:	71fb      	strb	r3, [r7, #7]
 800d478:	4613      	mov	r3, r2
 800d47a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d47c:	79fb      	ldrb	r3, [r7, #7]
 800d47e:	2b23      	cmp	r3, #35	; 0x23
 800d480:	d84a      	bhi.n	800d518 <CDC_Control_FS+0xac>
 800d482:	a201      	add	r2, pc, #4	; (adr r2, 800d488 <CDC_Control_FS+0x1c>)
 800d484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d488:	0800d519 	.word	0x0800d519
 800d48c:	0800d519 	.word	0x0800d519
 800d490:	0800d519 	.word	0x0800d519
 800d494:	0800d519 	.word	0x0800d519
 800d498:	0800d519 	.word	0x0800d519
 800d49c:	0800d519 	.word	0x0800d519
 800d4a0:	0800d519 	.word	0x0800d519
 800d4a4:	0800d519 	.word	0x0800d519
 800d4a8:	0800d519 	.word	0x0800d519
 800d4ac:	0800d519 	.word	0x0800d519
 800d4b0:	0800d519 	.word	0x0800d519
 800d4b4:	0800d519 	.word	0x0800d519
 800d4b8:	0800d519 	.word	0x0800d519
 800d4bc:	0800d519 	.word	0x0800d519
 800d4c0:	0800d519 	.word	0x0800d519
 800d4c4:	0800d519 	.word	0x0800d519
 800d4c8:	0800d519 	.word	0x0800d519
 800d4cc:	0800d519 	.word	0x0800d519
 800d4d0:	0800d519 	.word	0x0800d519
 800d4d4:	0800d519 	.word	0x0800d519
 800d4d8:	0800d519 	.word	0x0800d519
 800d4dc:	0800d519 	.word	0x0800d519
 800d4e0:	0800d519 	.word	0x0800d519
 800d4e4:	0800d519 	.word	0x0800d519
 800d4e8:	0800d519 	.word	0x0800d519
 800d4ec:	0800d519 	.word	0x0800d519
 800d4f0:	0800d519 	.word	0x0800d519
 800d4f4:	0800d519 	.word	0x0800d519
 800d4f8:	0800d519 	.word	0x0800d519
 800d4fc:	0800d519 	.word	0x0800d519
 800d500:	0800d519 	.word	0x0800d519
 800d504:	0800d519 	.word	0x0800d519
 800d508:	0800d519 	.word	0x0800d519
 800d50c:	0800d519 	.word	0x0800d519
 800d510:	0800d519 	.word	0x0800d519
 800d514:	0800d519 	.word	0x0800d519
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d518:	bf00      	nop
  }

  return (USBD_OK);
 800d51a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	370c      	adds	r7, #12
 800d520:	46bd      	mov	sp, r7
 800d522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d526:	4770      	bx	lr

0800d528 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b084      	sub	sp, #16
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  input_received_flag = 1;
 800d532:	4b11      	ldr	r3, [pc, #68]	; (800d578 <CDC_Receive_FS+0x50>)
 800d534:	2201      	movs	r2, #1
 800d536:	701a      	strb	r2, [r3, #0]
  memset (UserRxBufferFS, '\0', APP_RX_DATA_SIZE);  // clear the buffer
 800d538:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d53c:	2100      	movs	r1, #0
 800d53e:	480f      	ldr	r0, [pc, #60]	; (800d57c <CDC_Receive_FS+0x54>)
 800d540:	f000 fca6 	bl	800de90 <memset>
  uint8_t len = (uint8_t) Len;
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	73fb      	strb	r3, [r7, #15]
  memcpy(UserRxBufferFS, Buf, len);  // copy the data to the buffer
 800d548:	7bfb      	ldrb	r3, [r7, #15]
 800d54a:	461a      	mov	r2, r3
 800d54c:	6879      	ldr	r1, [r7, #4]
 800d54e:	480b      	ldr	r0, [pc, #44]	; (800d57c <CDC_Receive_FS+0x54>)
 800d550:	f000 fc90 	bl	800de74 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 800d554:	7bfb      	ldrb	r3, [r7, #15]
 800d556:	461a      	mov	r2, r3
 800d558:	2100      	movs	r1, #0
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f000 fc98 	bl	800de90 <memset>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d560:	6879      	ldr	r1, [r7, #4]
 800d562:	4807      	ldr	r0, [pc, #28]	; (800d580 <CDC_Receive_FS+0x58>)
 800d564:	f7fe fda3 	bl	800c0ae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d568:	4805      	ldr	r0, [pc, #20]	; (800d580 <CDC_Receive_FS+0x58>)
 800d56a:	f7fe fde9 	bl	800c140 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d56e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d570:	4618      	mov	r0, r3
 800d572:	3710      	adds	r7, #16
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}
 800d578:	200044dc 	.word	0x200044dc
 800d57c:	200034dc 	.word	0x200034dc
 800d580:	2000320c 	.word	0x2000320c

0800d584 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b084      	sub	sp, #16
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	460b      	mov	r3, r1
 800d58e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d590:	2300      	movs	r3, #0
 800d592:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d594:	4b0d      	ldr	r3, [pc, #52]	; (800d5cc <CDC_Transmit_FS+0x48>)
 800d596:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d59a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d001      	beq.n	800d5aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	e00b      	b.n	800d5c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d5aa:	887b      	ldrh	r3, [r7, #2]
 800d5ac:	461a      	mov	r2, r3
 800d5ae:	6879      	ldr	r1, [r7, #4]
 800d5b0:	4806      	ldr	r0, [pc, #24]	; (800d5cc <CDC_Transmit_FS+0x48>)
 800d5b2:	f7fe fd5e 	bl	800c072 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d5b6:	4805      	ldr	r0, [pc, #20]	; (800d5cc <CDC_Transmit_FS+0x48>)
 800d5b8:	f7fe fd92 	bl	800c0e0 <USBD_CDC_TransmitPacket>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3710      	adds	r7, #16
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}
 800d5ca:	bf00      	nop
 800d5cc:	2000320c 	.word	0x2000320c

0800d5d0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b087      	sub	sp, #28
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	60f8      	str	r0, [r7, #12]
 800d5d8:	60b9      	str	r1, [r7, #8]
 800d5da:	4613      	mov	r3, r2
 800d5dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d5de:	2300      	movs	r3, #0
 800d5e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d5e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	371c      	adds	r7, #28
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f0:	4770      	bx	lr
	...

0800d5f4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5f4:	b480      	push	{r7}
 800d5f6:	b083      	sub	sp, #12
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	6039      	str	r1, [r7, #0]
 800d5fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	2212      	movs	r2, #18
 800d604:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800d606:	4b03      	ldr	r3, [pc, #12]	; (800d614 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800d608:	4618      	mov	r0, r3
 800d60a:	370c      	adds	r7, #12
 800d60c:	46bd      	mov	sp, r7
 800d60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d612:	4770      	bx	lr
 800d614:	20002824 	.word	0x20002824

0800d618 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d618:	b480      	push	{r7}
 800d61a:	b083      	sub	sp, #12
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	4603      	mov	r3, r0
 800d620:	6039      	str	r1, [r7, #0]
 800d622:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	2204      	movs	r2, #4
 800d628:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d62a:	4b03      	ldr	r3, [pc, #12]	; (800d638 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	370c      	adds	r7, #12
 800d630:	46bd      	mov	sp, r7
 800d632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d636:	4770      	bx	lr
 800d638:	20002838 	.word	0x20002838

0800d63c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b082      	sub	sp, #8
 800d640:	af00      	add	r7, sp, #0
 800d642:	4603      	mov	r3, r0
 800d644:	6039      	str	r1, [r7, #0]
 800d646:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d648:	79fb      	ldrb	r3, [r7, #7]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d105      	bne.n	800d65a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d64e:	683a      	ldr	r2, [r7, #0]
 800d650:	4907      	ldr	r1, [pc, #28]	; (800d670 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d652:	4808      	ldr	r0, [pc, #32]	; (800d674 <USBD_CDC_ProductStrDescriptor+0x38>)
 800d654:	f7ff fddd 	bl	800d212 <USBD_GetString>
 800d658:	e004      	b.n	800d664 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d65a:	683a      	ldr	r2, [r7, #0]
 800d65c:	4904      	ldr	r1, [pc, #16]	; (800d670 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d65e:	4805      	ldr	r0, [pc, #20]	; (800d674 <USBD_CDC_ProductStrDescriptor+0x38>)
 800d660:	f7ff fdd7 	bl	800d212 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d664:	4b02      	ldr	r3, [pc, #8]	; (800d670 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800d666:	4618      	mov	r0, r3
 800d668:	3708      	adds	r7, #8
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}
 800d66e:	bf00      	nop
 800d670:	200044e0 	.word	0x200044e0
 800d674:	0801092c 	.word	0x0801092c

0800d678 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b082      	sub	sp, #8
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	4603      	mov	r3, r0
 800d680:	6039      	str	r1, [r7, #0]
 800d682:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d684:	683a      	ldr	r2, [r7, #0]
 800d686:	4904      	ldr	r1, [pc, #16]	; (800d698 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800d688:	4804      	ldr	r0, [pc, #16]	; (800d69c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800d68a:	f7ff fdc2 	bl	800d212 <USBD_GetString>
  return USBD_StrDesc;
 800d68e:	4b02      	ldr	r3, [pc, #8]	; (800d698 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800d690:	4618      	mov	r0, r3
 800d692:	3708      	adds	r7, #8
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}
 800d698:	200044e0 	.word	0x200044e0
 800d69c:	08010944 	.word	0x08010944

0800d6a0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b082      	sub	sp, #8
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	6039      	str	r1, [r7, #0]
 800d6aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	221a      	movs	r2, #26
 800d6b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d6b2:	f000 f843 	bl	800d73c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800d6b6:	4b02      	ldr	r3, [pc, #8]	; (800d6c0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3708      	adds	r7, #8
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}
 800d6c0:	2000283c 	.word	0x2000283c

0800d6c4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b082      	sub	sp, #8
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	6039      	str	r1, [r7, #0]
 800d6ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d6d0:	79fb      	ldrb	r3, [r7, #7]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d105      	bne.n	800d6e2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d6d6:	683a      	ldr	r2, [r7, #0]
 800d6d8:	4907      	ldr	r1, [pc, #28]	; (800d6f8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d6da:	4808      	ldr	r0, [pc, #32]	; (800d6fc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d6dc:	f7ff fd99 	bl	800d212 <USBD_GetString>
 800d6e0:	e004      	b.n	800d6ec <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d6e2:	683a      	ldr	r2, [r7, #0]
 800d6e4:	4904      	ldr	r1, [pc, #16]	; (800d6f8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d6e6:	4805      	ldr	r0, [pc, #20]	; (800d6fc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d6e8:	f7ff fd93 	bl	800d212 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d6ec:	4b02      	ldr	r3, [pc, #8]	; (800d6f8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	3708      	adds	r7, #8
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}
 800d6f6:	bf00      	nop
 800d6f8:	200044e0 	.word	0x200044e0
 800d6fc:	08010958 	.word	0x08010958

0800d700 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b082      	sub	sp, #8
 800d704:	af00      	add	r7, sp, #0
 800d706:	4603      	mov	r3, r0
 800d708:	6039      	str	r1, [r7, #0]
 800d70a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d70c:	79fb      	ldrb	r3, [r7, #7]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d105      	bne.n	800d71e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d712:	683a      	ldr	r2, [r7, #0]
 800d714:	4907      	ldr	r1, [pc, #28]	; (800d734 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d716:	4808      	ldr	r0, [pc, #32]	; (800d738 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d718:	f7ff fd7b 	bl	800d212 <USBD_GetString>
 800d71c:	e004      	b.n	800d728 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d71e:	683a      	ldr	r2, [r7, #0]
 800d720:	4904      	ldr	r1, [pc, #16]	; (800d734 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d722:	4805      	ldr	r0, [pc, #20]	; (800d738 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d724:	f7ff fd75 	bl	800d212 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d728:	4b02      	ldr	r3, [pc, #8]	; (800d734 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	3708      	adds	r7, #8
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}
 800d732:	bf00      	nop
 800d734:	200044e0 	.word	0x200044e0
 800d738:	08010964 	.word	0x08010964

0800d73c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b084      	sub	sp, #16
 800d740:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d742:	4b0f      	ldr	r3, [pc, #60]	; (800d780 <Get_SerialNum+0x44>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d748:	4b0e      	ldr	r3, [pc, #56]	; (800d784 <Get_SerialNum+0x48>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d74e:	4b0e      	ldr	r3, [pc, #56]	; (800d788 <Get_SerialNum+0x4c>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d754:	68fa      	ldr	r2, [r7, #12]
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	4413      	add	r3, r2
 800d75a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d009      	beq.n	800d776 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d762:	2208      	movs	r2, #8
 800d764:	4909      	ldr	r1, [pc, #36]	; (800d78c <Get_SerialNum+0x50>)
 800d766:	68f8      	ldr	r0, [r7, #12]
 800d768:	f000 f814 	bl	800d794 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d76c:	2204      	movs	r2, #4
 800d76e:	4908      	ldr	r1, [pc, #32]	; (800d790 <Get_SerialNum+0x54>)
 800d770:	68b8      	ldr	r0, [r7, #8]
 800d772:	f000 f80f 	bl	800d794 <IntToUnicode>
  }
}
 800d776:	bf00      	nop
 800d778:	3710      	adds	r7, #16
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}
 800d77e:	bf00      	nop
 800d780:	1fff7590 	.word	0x1fff7590
 800d784:	1fff7594 	.word	0x1fff7594
 800d788:	1fff7598 	.word	0x1fff7598
 800d78c:	2000283e 	.word	0x2000283e
 800d790:	2000284e 	.word	0x2000284e

0800d794 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d794:	b480      	push	{r7}
 800d796:	b087      	sub	sp, #28
 800d798:	af00      	add	r7, sp, #0
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	60b9      	str	r1, [r7, #8]
 800d79e:	4613      	mov	r3, r2
 800d7a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	75fb      	strb	r3, [r7, #23]
 800d7aa:	e027      	b.n	800d7fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	0f1b      	lsrs	r3, r3, #28
 800d7b0:	2b09      	cmp	r3, #9
 800d7b2:	d80b      	bhi.n	800d7cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	0f1b      	lsrs	r3, r3, #28
 800d7b8:	b2da      	uxtb	r2, r3
 800d7ba:	7dfb      	ldrb	r3, [r7, #23]
 800d7bc:	005b      	lsls	r3, r3, #1
 800d7be:	4619      	mov	r1, r3
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	440b      	add	r3, r1
 800d7c4:	3230      	adds	r2, #48	; 0x30
 800d7c6:	b2d2      	uxtb	r2, r2
 800d7c8:	701a      	strb	r2, [r3, #0]
 800d7ca:	e00a      	b.n	800d7e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	0f1b      	lsrs	r3, r3, #28
 800d7d0:	b2da      	uxtb	r2, r3
 800d7d2:	7dfb      	ldrb	r3, [r7, #23]
 800d7d4:	005b      	lsls	r3, r3, #1
 800d7d6:	4619      	mov	r1, r3
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	440b      	add	r3, r1
 800d7dc:	3237      	adds	r2, #55	; 0x37
 800d7de:	b2d2      	uxtb	r2, r2
 800d7e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	011b      	lsls	r3, r3, #4
 800d7e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d7e8:	7dfb      	ldrb	r3, [r7, #23]
 800d7ea:	005b      	lsls	r3, r3, #1
 800d7ec:	3301      	adds	r3, #1
 800d7ee:	68ba      	ldr	r2, [r7, #8]
 800d7f0:	4413      	add	r3, r2
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d7f6:	7dfb      	ldrb	r3, [r7, #23]
 800d7f8:	3301      	adds	r3, #1
 800d7fa:	75fb      	strb	r3, [r7, #23]
 800d7fc:	7dfa      	ldrb	r2, [r7, #23]
 800d7fe:	79fb      	ldrb	r3, [r7, #7]
 800d800:	429a      	cmp	r2, r3
 800d802:	d3d3      	bcc.n	800d7ac <IntToUnicode+0x18>
  }
}
 800d804:	bf00      	nop
 800d806:	bf00      	nop
 800d808:	371c      	adds	r7, #28
 800d80a:	46bd      	mov	sp, r7
 800d80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d810:	4770      	bx	lr
	...

0800d814 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b098      	sub	sp, #96	; 0x60
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d81c:	f107 030c 	add.w	r3, r7, #12
 800d820:	2254      	movs	r2, #84	; 0x54
 800d822:	2100      	movs	r1, #0
 800d824:	4618      	mov	r0, r3
 800d826:	f000 fb33 	bl	800de90 <memset>
  if(pcdHandle->Instance==USB)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	4a15      	ldr	r2, [pc, #84]	; (800d884 <HAL_PCD_MspInit+0x70>)
 800d830:	4293      	cmp	r3, r2
 800d832:	d122      	bne.n	800d87a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d834:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d838:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d83a:	2300      	movs	r3, #0
 800d83c:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d83e:	f107 030c 	add.w	r3, r7, #12
 800d842:	4618      	mov	r0, r3
 800d844:	f7f9 fb20 	bl	8006e88 <HAL_RCCEx_PeriphCLKConfig>
 800d848:	4603      	mov	r3, r0
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d001      	beq.n	800d852 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800d84e:	f7f3 ff35 	bl	80016bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d852:	4b0d      	ldr	r3, [pc, #52]	; (800d888 <HAL_PCD_MspInit+0x74>)
 800d854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d856:	4a0c      	ldr	r2, [pc, #48]	; (800d888 <HAL_PCD_MspInit+0x74>)
 800d858:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d85c:	6593      	str	r3, [r2, #88]	; 0x58
 800d85e:	4b0a      	ldr	r3, [pc, #40]	; (800d888 <HAL_PCD_MspInit+0x74>)
 800d860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d862:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d866:	60bb      	str	r3, [r7, #8]
 800d868:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800d86a:	2200      	movs	r2, #0
 800d86c:	2100      	movs	r1, #0
 800d86e:	2014      	movs	r0, #20
 800d870:	f7f5 fee7 	bl	8003642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800d874:	2014      	movs	r0, #20
 800d876:	f7f5 fefe 	bl	8003676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d87a:	bf00      	nop
 800d87c:	3760      	adds	r7, #96	; 0x60
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
 800d882:	bf00      	nop
 800d884:	40005c00 	.word	0x40005c00
 800d888:	40021000 	.word	0x40021000

0800d88c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b082      	sub	sp, #8
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d8a0:	4619      	mov	r1, r3
 800d8a2:	4610      	mov	r0, r2
 800d8a4:	f7fe fd18 	bl	800c2d8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800d8a8:	bf00      	nop
 800d8aa:	3708      	adds	r7, #8
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b082      	sub	sp, #8
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	460b      	mov	r3, r1
 800d8ba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800d8c2:	78fa      	ldrb	r2, [r7, #3]
 800d8c4:	6879      	ldr	r1, [r7, #4]
 800d8c6:	4613      	mov	r3, r2
 800d8c8:	009b      	lsls	r3, r3, #2
 800d8ca:	4413      	add	r3, r2
 800d8cc:	00db      	lsls	r3, r3, #3
 800d8ce:	440b      	add	r3, r1
 800d8d0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d8d4:	681a      	ldr	r2, [r3, #0]
 800d8d6:	78fb      	ldrb	r3, [r7, #3]
 800d8d8:	4619      	mov	r1, r3
 800d8da:	f7fe fd52 	bl	800c382 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800d8de:	bf00      	nop
 800d8e0:	3708      	adds	r7, #8
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}

0800d8e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8e6:	b580      	push	{r7, lr}
 800d8e8:	b082      	sub	sp, #8
 800d8ea:	af00      	add	r7, sp, #0
 800d8ec:	6078      	str	r0, [r7, #4]
 800d8ee:	460b      	mov	r3, r1
 800d8f0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800d8f8:	78fa      	ldrb	r2, [r7, #3]
 800d8fa:	6879      	ldr	r1, [r7, #4]
 800d8fc:	4613      	mov	r3, r2
 800d8fe:	009b      	lsls	r3, r3, #2
 800d900:	4413      	add	r3, r2
 800d902:	00db      	lsls	r3, r3, #3
 800d904:	440b      	add	r3, r1
 800d906:	333c      	adds	r3, #60	; 0x3c
 800d908:	681a      	ldr	r2, [r3, #0]
 800d90a:	78fb      	ldrb	r3, [r7, #3]
 800d90c:	4619      	mov	r1, r3
 800d90e:	f7fe fd9b 	bl	800c448 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800d912:	bf00      	nop
 800d914:	3708      	adds	r7, #8
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}

0800d91a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d91a:	b580      	push	{r7, lr}
 800d91c:	b082      	sub	sp, #8
 800d91e:	af00      	add	r7, sp, #0
 800d920:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d928:	4618      	mov	r0, r3
 800d92a:	f7fe feaf 	bl	800c68c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800d92e:	bf00      	nop
 800d930:	3708      	adds	r7, #8
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}

0800d936 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d936:	b580      	push	{r7, lr}
 800d938:	b084      	sub	sp, #16
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d93e:	2301      	movs	r3, #1
 800d940:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	689b      	ldr	r3, [r3, #8]
 800d946:	2b02      	cmp	r3, #2
 800d948:	d001      	beq.n	800d94e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d94a:	f7f3 feb7 	bl	80016bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d954:	7bfa      	ldrb	r2, [r7, #15]
 800d956:	4611      	mov	r1, r2
 800d958:	4618      	mov	r0, r3
 800d95a:	f7fe fe59 	bl	800c610 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d964:	4618      	mov	r0, r3
 800d966:	f7fe fe05 	bl	800c574 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800d96a:	bf00      	nop
 800d96c:	3710      	adds	r7, #16
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}
	...

0800d974 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b082      	sub	sp, #8
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d982:	4618      	mov	r0, r3
 800d984:	f7fe fe54 	bl	800c630 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	699b      	ldr	r3, [r3, #24]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d005      	beq.n	800d99c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d990:	4b04      	ldr	r3, [pc, #16]	; (800d9a4 <HAL_PCD_SuspendCallback+0x30>)
 800d992:	691b      	ldr	r3, [r3, #16]
 800d994:	4a03      	ldr	r2, [pc, #12]	; (800d9a4 <HAL_PCD_SuspendCallback+0x30>)
 800d996:	f043 0306 	orr.w	r3, r3, #6
 800d99a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800d99c:	bf00      	nop
 800d99e:	3708      	adds	r7, #8
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}
 800d9a4:	e000ed00 	.word	0xe000ed00

0800d9a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b082      	sub	sp, #8
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	699b      	ldr	r3, [r3, #24]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d007      	beq.n	800d9c8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d9b8:	4b08      	ldr	r3, [pc, #32]	; (800d9dc <HAL_PCD_ResumeCallback+0x34>)
 800d9ba:	691b      	ldr	r3, [r3, #16]
 800d9bc:	4a07      	ldr	r2, [pc, #28]	; (800d9dc <HAL_PCD_ResumeCallback+0x34>)
 800d9be:	f023 0306 	bic.w	r3, r3, #6
 800d9c2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d9c4:	f000 f9fa 	bl	800ddbc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f7fe fe44 	bl	800c65c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800d9d4:	bf00      	nop
 800d9d6:	3708      	adds	r7, #8
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}
 800d9dc:	e000ed00 	.word	0xe000ed00

0800d9e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b082      	sub	sp, #8
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800d9e8:	4a2b      	ldr	r2, [pc, #172]	; (800da98 <USBD_LL_Init+0xb8>)
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	4a29      	ldr	r2, [pc, #164]	; (800da98 <USBD_LL_Init+0xb8>)
 800d9f4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800d9f8:	4b27      	ldr	r3, [pc, #156]	; (800da98 <USBD_LL_Init+0xb8>)
 800d9fa:	4a28      	ldr	r2, [pc, #160]	; (800da9c <USBD_LL_Init+0xbc>)
 800d9fc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d9fe:	4b26      	ldr	r3, [pc, #152]	; (800da98 <USBD_LL_Init+0xb8>)
 800da00:	2208      	movs	r2, #8
 800da02:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800da04:	4b24      	ldr	r3, [pc, #144]	; (800da98 <USBD_LL_Init+0xb8>)
 800da06:	2202      	movs	r2, #2
 800da08:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800da0a:	4b23      	ldr	r3, [pc, #140]	; (800da98 <USBD_LL_Init+0xb8>)
 800da0c:	2202      	movs	r2, #2
 800da0e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800da10:	4b21      	ldr	r3, [pc, #132]	; (800da98 <USBD_LL_Init+0xb8>)
 800da12:	2200      	movs	r2, #0
 800da14:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800da16:	4b20      	ldr	r3, [pc, #128]	; (800da98 <USBD_LL_Init+0xb8>)
 800da18:	2200      	movs	r2, #0
 800da1a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800da1c:	4b1e      	ldr	r3, [pc, #120]	; (800da98 <USBD_LL_Init+0xb8>)
 800da1e:	2200      	movs	r2, #0
 800da20:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800da22:	4b1d      	ldr	r3, [pc, #116]	; (800da98 <USBD_LL_Init+0xb8>)
 800da24:	2200      	movs	r2, #0
 800da26:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800da28:	481b      	ldr	r0, [pc, #108]	; (800da98 <USBD_LL_Init+0xb8>)
 800da2a:	f7f6 ff52 	bl	80048d2 <HAL_PCD_Init>
 800da2e:	4603      	mov	r3, r0
 800da30:	2b00      	cmp	r3, #0
 800da32:	d001      	beq.n	800da38 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800da34:	f7f3 fe42 	bl	80016bc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800da3e:	2318      	movs	r3, #24
 800da40:	2200      	movs	r2, #0
 800da42:	2100      	movs	r1, #0
 800da44:	f7f8 fc0b 	bl	800625e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800da4e:	2358      	movs	r3, #88	; 0x58
 800da50:	2200      	movs	r2, #0
 800da52:	2180      	movs	r1, #128	; 0x80
 800da54:	f7f8 fc03 	bl	800625e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800da5e:	23c0      	movs	r3, #192	; 0xc0
 800da60:	2200      	movs	r2, #0
 800da62:	2181      	movs	r1, #129	; 0x81
 800da64:	f7f8 fbfb 	bl	800625e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800da6e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800da72:	2200      	movs	r2, #0
 800da74:	2101      	movs	r1, #1
 800da76:	f7f8 fbf2 	bl	800625e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800da80:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da84:	2200      	movs	r2, #0
 800da86:	2182      	movs	r1, #130	; 0x82
 800da88:	f7f8 fbe9 	bl	800625e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800da8c:	2300      	movs	r3, #0
}
 800da8e:	4618      	mov	r0, r3
 800da90:	3708      	adds	r7, #8
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}
 800da96:	bf00      	nop
 800da98:	200046e0 	.word	0x200046e0
 800da9c:	40005c00 	.word	0x40005c00

0800daa0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b084      	sub	sp, #16
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800daa8:	2300      	movs	r3, #0
 800daaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800daac:	2300      	movs	r3, #0
 800daae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dab6:	4618      	mov	r0, r3
 800dab8:	f7f6 fff0 	bl	8004a9c <HAL_PCD_Start>
 800dabc:	4603      	mov	r3, r0
 800dabe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dac0:	7bfb      	ldrb	r3, [r7, #15]
 800dac2:	4618      	mov	r0, r3
 800dac4:	f000 f980 	bl	800ddc8 <USBD_Get_USB_Status>
 800dac8:	4603      	mov	r3, r0
 800daca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dacc:	7bbb      	ldrb	r3, [r7, #14]
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3710      	adds	r7, #16
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}

0800dad6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dad6:	b580      	push	{r7, lr}
 800dad8:	b084      	sub	sp, #16
 800dada:	af00      	add	r7, sp, #0
 800dadc:	6078      	str	r0, [r7, #4]
 800dade:	4608      	mov	r0, r1
 800dae0:	4611      	mov	r1, r2
 800dae2:	461a      	mov	r2, r3
 800dae4:	4603      	mov	r3, r0
 800dae6:	70fb      	strb	r3, [r7, #3]
 800dae8:	460b      	mov	r3, r1
 800daea:	70bb      	strb	r3, [r7, #2]
 800daec:	4613      	mov	r3, r2
 800daee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800daf0:	2300      	movs	r3, #0
 800daf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800daf4:	2300      	movs	r3, #0
 800daf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dafe:	78bb      	ldrb	r3, [r7, #2]
 800db00:	883a      	ldrh	r2, [r7, #0]
 800db02:	78f9      	ldrb	r1, [r7, #3]
 800db04:	f7f7 f938 	bl	8004d78 <HAL_PCD_EP_Open>
 800db08:	4603      	mov	r3, r0
 800db0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db0c:	7bfb      	ldrb	r3, [r7, #15]
 800db0e:	4618      	mov	r0, r3
 800db10:	f000 f95a 	bl	800ddc8 <USBD_Get_USB_Status>
 800db14:	4603      	mov	r3, r0
 800db16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db18:	7bbb      	ldrb	r3, [r7, #14]
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3710      	adds	r7, #16
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}

0800db22 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db22:	b580      	push	{r7, lr}
 800db24:	b084      	sub	sp, #16
 800db26:	af00      	add	r7, sp, #0
 800db28:	6078      	str	r0, [r7, #4]
 800db2a:	460b      	mov	r3, r1
 800db2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db2e:	2300      	movs	r3, #0
 800db30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db32:	2300      	movs	r3, #0
 800db34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800db3c:	78fa      	ldrb	r2, [r7, #3]
 800db3e:	4611      	mov	r1, r2
 800db40:	4618      	mov	r0, r3
 800db42:	f7f7 f97f 	bl	8004e44 <HAL_PCD_EP_Close>
 800db46:	4603      	mov	r3, r0
 800db48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db4a:	7bfb      	ldrb	r3, [r7, #15]
 800db4c:	4618      	mov	r0, r3
 800db4e:	f000 f93b 	bl	800ddc8 <USBD_Get_USB_Status>
 800db52:	4603      	mov	r3, r0
 800db54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db56:	7bbb      	ldrb	r3, [r7, #14]
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3710      	adds	r7, #16
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}

0800db60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b084      	sub	sp, #16
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	460b      	mov	r3, r1
 800db6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db6c:	2300      	movs	r3, #0
 800db6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db70:	2300      	movs	r3, #0
 800db72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800db7a:	78fa      	ldrb	r2, [r7, #3]
 800db7c:	4611      	mov	r1, r2
 800db7e:	4618      	mov	r0, r3
 800db80:	f7f7 fa40 	bl	8005004 <HAL_PCD_EP_SetStall>
 800db84:	4603      	mov	r3, r0
 800db86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db88:	7bfb      	ldrb	r3, [r7, #15]
 800db8a:	4618      	mov	r0, r3
 800db8c:	f000 f91c 	bl	800ddc8 <USBD_Get_USB_Status>
 800db90:	4603      	mov	r3, r0
 800db92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db94:	7bbb      	ldrb	r3, [r7, #14]
}
 800db96:	4618      	mov	r0, r3
 800db98:	3710      	adds	r7, #16
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}

0800db9e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db9e:	b580      	push	{r7, lr}
 800dba0:	b084      	sub	sp, #16
 800dba2:	af00      	add	r7, sp, #0
 800dba4:	6078      	str	r0, [r7, #4]
 800dba6:	460b      	mov	r3, r1
 800dba8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dbb8:	78fa      	ldrb	r2, [r7, #3]
 800dbba:	4611      	mov	r1, r2
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f7f7 fa73 	bl	80050a8 <HAL_PCD_EP_ClrStall>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbc6:	7bfb      	ldrb	r3, [r7, #15]
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f000 f8fd 	bl	800ddc8 <USBD_Get_USB_Status>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbd2:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3710      	adds	r7, #16
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}

0800dbdc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dbdc:	b480      	push	{r7}
 800dbde:	b085      	sub	sp, #20
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
 800dbe4:	460b      	mov	r3, r1
 800dbe6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dbee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dbf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	da0c      	bge.n	800dc12 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dbf8:	78fb      	ldrb	r3, [r7, #3]
 800dbfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbfe:	68f9      	ldr	r1, [r7, #12]
 800dc00:	1c5a      	adds	r2, r3, #1
 800dc02:	4613      	mov	r3, r2
 800dc04:	009b      	lsls	r3, r3, #2
 800dc06:	4413      	add	r3, r2
 800dc08:	00db      	lsls	r3, r3, #3
 800dc0a:	440b      	add	r3, r1
 800dc0c:	3302      	adds	r3, #2
 800dc0e:	781b      	ldrb	r3, [r3, #0]
 800dc10:	e00b      	b.n	800dc2a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dc12:	78fb      	ldrb	r3, [r7, #3]
 800dc14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dc18:	68f9      	ldr	r1, [r7, #12]
 800dc1a:	4613      	mov	r3, r2
 800dc1c:	009b      	lsls	r3, r3, #2
 800dc1e:	4413      	add	r3, r2
 800dc20:	00db      	lsls	r3, r3, #3
 800dc22:	440b      	add	r3, r1
 800dc24:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800dc28:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3714      	adds	r7, #20
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc34:	4770      	bx	lr

0800dc36 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dc36:	b580      	push	{r7, lr}
 800dc38:	b084      	sub	sp, #16
 800dc3a:	af00      	add	r7, sp, #0
 800dc3c:	6078      	str	r0, [r7, #4]
 800dc3e:	460b      	mov	r3, r1
 800dc40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc42:	2300      	movs	r3, #0
 800dc44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc46:	2300      	movs	r3, #0
 800dc48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dc50:	78fa      	ldrb	r2, [r7, #3]
 800dc52:	4611      	mov	r1, r2
 800dc54:	4618      	mov	r0, r3
 800dc56:	f7f7 f86a 	bl	8004d2e <HAL_PCD_SetAddress>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc5e:	7bfb      	ldrb	r3, [r7, #15]
 800dc60:	4618      	mov	r0, r3
 800dc62:	f000 f8b1 	bl	800ddc8 <USBD_Get_USB_Status>
 800dc66:	4603      	mov	r3, r0
 800dc68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc6a:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3710      	adds	r7, #16
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}

0800dc74 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b086      	sub	sp, #24
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	60f8      	str	r0, [r7, #12]
 800dc7c:	607a      	str	r2, [r7, #4]
 800dc7e:	603b      	str	r3, [r7, #0]
 800dc80:	460b      	mov	r3, r1
 800dc82:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc84:	2300      	movs	r3, #0
 800dc86:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc88:	2300      	movs	r3, #0
 800dc8a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dc92:	7af9      	ldrb	r1, [r7, #11]
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	687a      	ldr	r2, [r7, #4]
 800dc98:	f7f7 f971 	bl	8004f7e <HAL_PCD_EP_Transmit>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dca0:	7dfb      	ldrb	r3, [r7, #23]
 800dca2:	4618      	mov	r0, r3
 800dca4:	f000 f890 	bl	800ddc8 <USBD_Get_USB_Status>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dcac:	7dbb      	ldrb	r3, [r7, #22]
}
 800dcae:	4618      	mov	r0, r3
 800dcb0:	3718      	adds	r7, #24
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}

0800dcb6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dcb6:	b580      	push	{r7, lr}
 800dcb8:	b086      	sub	sp, #24
 800dcba:	af00      	add	r7, sp, #0
 800dcbc:	60f8      	str	r0, [r7, #12]
 800dcbe:	607a      	str	r2, [r7, #4]
 800dcc0:	603b      	str	r3, [r7, #0]
 800dcc2:	460b      	mov	r3, r1
 800dcc4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcca:	2300      	movs	r3, #0
 800dccc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dcd4:	7af9      	ldrb	r1, [r7, #11]
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	687a      	ldr	r2, [r7, #4]
 800dcda:	f7f7 f8fb 	bl	8004ed4 <HAL_PCD_EP_Receive>
 800dcde:	4603      	mov	r3, r0
 800dce0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dce2:	7dfb      	ldrb	r3, [r7, #23]
 800dce4:	4618      	mov	r0, r3
 800dce6:	f000 f86f 	bl	800ddc8 <USBD_Get_USB_Status>
 800dcea:	4603      	mov	r3, r0
 800dcec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dcee:	7dbb      	ldrb	r3, [r7, #22]
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3718      	adds	r7, #24
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}

0800dcf8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b082      	sub	sp, #8
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	460b      	mov	r3, r1
 800dd02:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dd0a:	78fa      	ldrb	r2, [r7, #3]
 800dd0c:	4611      	mov	r1, r2
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f7f7 f91d 	bl	8004f4e <HAL_PCD_EP_GetRxCount>
 800dd14:	4603      	mov	r3, r0
}
 800dd16:	4618      	mov	r0, r3
 800dd18:	3708      	adds	r7, #8
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}
	...

0800dd20 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b082      	sub	sp, #8
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
 800dd28:	460b      	mov	r3, r1
 800dd2a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800dd2c:	78fb      	ldrb	r3, [r7, #3]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d002      	beq.n	800dd38 <HAL_PCDEx_LPM_Callback+0x18>
 800dd32:	2b01      	cmp	r3, #1
 800dd34:	d013      	beq.n	800dd5e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800dd36:	e023      	b.n	800dd80 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	699b      	ldr	r3, [r3, #24]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d007      	beq.n	800dd50 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800dd40:	f000 f83c 	bl	800ddbc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dd44:	4b10      	ldr	r3, [pc, #64]	; (800dd88 <HAL_PCDEx_LPM_Callback+0x68>)
 800dd46:	691b      	ldr	r3, [r3, #16]
 800dd48:	4a0f      	ldr	r2, [pc, #60]	; (800dd88 <HAL_PCDEx_LPM_Callback+0x68>)
 800dd4a:	f023 0306 	bic.w	r3, r3, #6
 800dd4e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800dd56:	4618      	mov	r0, r3
 800dd58:	f7fe fc80 	bl	800c65c <USBD_LL_Resume>
    break;
 800dd5c:	e010      	b.n	800dd80 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800dd64:	4618      	mov	r0, r3
 800dd66:	f7fe fc63 	bl	800c630 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	699b      	ldr	r3, [r3, #24]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d005      	beq.n	800dd7e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dd72:	4b05      	ldr	r3, [pc, #20]	; (800dd88 <HAL_PCDEx_LPM_Callback+0x68>)
 800dd74:	691b      	ldr	r3, [r3, #16]
 800dd76:	4a04      	ldr	r2, [pc, #16]	; (800dd88 <HAL_PCDEx_LPM_Callback+0x68>)
 800dd78:	f043 0306 	orr.w	r3, r3, #6
 800dd7c:	6113      	str	r3, [r2, #16]
    break;
 800dd7e:	bf00      	nop
}
 800dd80:	bf00      	nop
 800dd82:	3708      	adds	r7, #8
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}
 800dd88:	e000ed00 	.word	0xe000ed00

0800dd8c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dd8c:	b480      	push	{r7}
 800dd8e:	b083      	sub	sp, #12
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dd94:	4b03      	ldr	r3, [pc, #12]	; (800dda4 <USBD_static_malloc+0x18>)
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	370c      	adds	r7, #12
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda0:	4770      	bx	lr
 800dda2:	bf00      	nop
 800dda4:	200049d4 	.word	0x200049d4

0800dda8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dda8:	b480      	push	{r7}
 800ddaa:	b083      	sub	sp, #12
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]

}
 800ddb0:	bf00      	nop
 800ddb2:	370c      	adds	r7, #12
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddba:	4770      	bx	lr

0800ddbc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ddc0:	f7f2 ffca 	bl	8000d58 <SystemClock_Config>
}
 800ddc4:	bf00      	nop
 800ddc6:	bd80      	pop	{r7, pc}

0800ddc8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b085      	sub	sp, #20
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	4603      	mov	r3, r0
 800ddd0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ddd6:	79fb      	ldrb	r3, [r7, #7]
 800ddd8:	2b03      	cmp	r3, #3
 800ddda:	d817      	bhi.n	800de0c <USBD_Get_USB_Status+0x44>
 800dddc:	a201      	add	r2, pc, #4	; (adr r2, 800dde4 <USBD_Get_USB_Status+0x1c>)
 800ddde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dde2:	bf00      	nop
 800dde4:	0800ddf5 	.word	0x0800ddf5
 800dde8:	0800ddfb 	.word	0x0800ddfb
 800ddec:	0800de01 	.word	0x0800de01
 800ddf0:	0800de07 	.word	0x0800de07
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	73fb      	strb	r3, [r7, #15]
    break;
 800ddf8:	e00b      	b.n	800de12 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ddfa:	2303      	movs	r3, #3
 800ddfc:	73fb      	strb	r3, [r7, #15]
    break;
 800ddfe:	e008      	b.n	800de12 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800de00:	2301      	movs	r3, #1
 800de02:	73fb      	strb	r3, [r7, #15]
    break;
 800de04:	e005      	b.n	800de12 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800de06:	2303      	movs	r3, #3
 800de08:	73fb      	strb	r3, [r7, #15]
    break;
 800de0a:	e002      	b.n	800de12 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800de0c:	2303      	movs	r3, #3
 800de0e:	73fb      	strb	r3, [r7, #15]
    break;
 800de10:	bf00      	nop
  }
  return usb_status;
 800de12:	7bfb      	ldrb	r3, [r7, #15]
}
 800de14:	4618      	mov	r0, r3
 800de16:	3714      	adds	r7, #20
 800de18:	46bd      	mov	sp, r7
 800de1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1e:	4770      	bx	lr

0800de20 <__errno>:
 800de20:	4b01      	ldr	r3, [pc, #4]	; (800de28 <__errno+0x8>)
 800de22:	6818      	ldr	r0, [r3, #0]
 800de24:	4770      	bx	lr
 800de26:	bf00      	nop
 800de28:	20002858 	.word	0x20002858

0800de2c <__libc_init_array>:
 800de2c:	b570      	push	{r4, r5, r6, lr}
 800de2e:	4d0d      	ldr	r5, [pc, #52]	; (800de64 <__libc_init_array+0x38>)
 800de30:	4c0d      	ldr	r4, [pc, #52]	; (800de68 <__libc_init_array+0x3c>)
 800de32:	1b64      	subs	r4, r4, r5
 800de34:	10a4      	asrs	r4, r4, #2
 800de36:	2600      	movs	r6, #0
 800de38:	42a6      	cmp	r6, r4
 800de3a:	d109      	bne.n	800de50 <__libc_init_array+0x24>
 800de3c:	4d0b      	ldr	r5, [pc, #44]	; (800de6c <__libc_init_array+0x40>)
 800de3e:	4c0c      	ldr	r4, [pc, #48]	; (800de70 <__libc_init_array+0x44>)
 800de40:	f002 fd38 	bl	80108b4 <_init>
 800de44:	1b64      	subs	r4, r4, r5
 800de46:	10a4      	asrs	r4, r4, #2
 800de48:	2600      	movs	r6, #0
 800de4a:	42a6      	cmp	r6, r4
 800de4c:	d105      	bne.n	800de5a <__libc_init_array+0x2e>
 800de4e:	bd70      	pop	{r4, r5, r6, pc}
 800de50:	f855 3b04 	ldr.w	r3, [r5], #4
 800de54:	4798      	blx	r3
 800de56:	3601      	adds	r6, #1
 800de58:	e7ee      	b.n	800de38 <__libc_init_array+0xc>
 800de5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800de5e:	4798      	blx	r3
 800de60:	3601      	adds	r6, #1
 800de62:	e7f2      	b.n	800de4a <__libc_init_array+0x1e>
 800de64:	08010d5c 	.word	0x08010d5c
 800de68:	08010d5c 	.word	0x08010d5c
 800de6c:	08010d5c 	.word	0x08010d5c
 800de70:	08010d60 	.word	0x08010d60

0800de74 <memcpy>:
 800de74:	440a      	add	r2, r1
 800de76:	4291      	cmp	r1, r2
 800de78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800de7c:	d100      	bne.n	800de80 <memcpy+0xc>
 800de7e:	4770      	bx	lr
 800de80:	b510      	push	{r4, lr}
 800de82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de86:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de8a:	4291      	cmp	r1, r2
 800de8c:	d1f9      	bne.n	800de82 <memcpy+0xe>
 800de8e:	bd10      	pop	{r4, pc}

0800de90 <memset>:
 800de90:	4402      	add	r2, r0
 800de92:	4603      	mov	r3, r0
 800de94:	4293      	cmp	r3, r2
 800de96:	d100      	bne.n	800de9a <memset+0xa>
 800de98:	4770      	bx	lr
 800de9a:	f803 1b01 	strb.w	r1, [r3], #1
 800de9e:	e7f9      	b.n	800de94 <memset+0x4>

0800dea0 <__cvt>:
 800dea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dea4:	ec55 4b10 	vmov	r4, r5, d0
 800dea8:	2d00      	cmp	r5, #0
 800deaa:	460e      	mov	r6, r1
 800deac:	4619      	mov	r1, r3
 800deae:	462b      	mov	r3, r5
 800deb0:	bfbb      	ittet	lt
 800deb2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800deb6:	461d      	movlt	r5, r3
 800deb8:	2300      	movge	r3, #0
 800deba:	232d      	movlt	r3, #45	; 0x2d
 800debc:	700b      	strb	r3, [r1, #0]
 800debe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dec0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800dec4:	4691      	mov	r9, r2
 800dec6:	f023 0820 	bic.w	r8, r3, #32
 800deca:	bfbc      	itt	lt
 800decc:	4622      	movlt	r2, r4
 800dece:	4614      	movlt	r4, r2
 800ded0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ded4:	d005      	beq.n	800dee2 <__cvt+0x42>
 800ded6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800deda:	d100      	bne.n	800dede <__cvt+0x3e>
 800dedc:	3601      	adds	r6, #1
 800dede:	2102      	movs	r1, #2
 800dee0:	e000      	b.n	800dee4 <__cvt+0x44>
 800dee2:	2103      	movs	r1, #3
 800dee4:	ab03      	add	r3, sp, #12
 800dee6:	9301      	str	r3, [sp, #4]
 800dee8:	ab02      	add	r3, sp, #8
 800deea:	9300      	str	r3, [sp, #0]
 800deec:	ec45 4b10 	vmov	d0, r4, r5
 800def0:	4653      	mov	r3, sl
 800def2:	4632      	mov	r2, r6
 800def4:	f000 fccc 	bl	800e890 <_dtoa_r>
 800def8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800defc:	4607      	mov	r7, r0
 800defe:	d102      	bne.n	800df06 <__cvt+0x66>
 800df00:	f019 0f01 	tst.w	r9, #1
 800df04:	d022      	beq.n	800df4c <__cvt+0xac>
 800df06:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800df0a:	eb07 0906 	add.w	r9, r7, r6
 800df0e:	d110      	bne.n	800df32 <__cvt+0x92>
 800df10:	783b      	ldrb	r3, [r7, #0]
 800df12:	2b30      	cmp	r3, #48	; 0x30
 800df14:	d10a      	bne.n	800df2c <__cvt+0x8c>
 800df16:	2200      	movs	r2, #0
 800df18:	2300      	movs	r3, #0
 800df1a:	4620      	mov	r0, r4
 800df1c:	4629      	mov	r1, r5
 800df1e:	f7f2 fdfb 	bl	8000b18 <__aeabi_dcmpeq>
 800df22:	b918      	cbnz	r0, 800df2c <__cvt+0x8c>
 800df24:	f1c6 0601 	rsb	r6, r6, #1
 800df28:	f8ca 6000 	str.w	r6, [sl]
 800df2c:	f8da 3000 	ldr.w	r3, [sl]
 800df30:	4499      	add	r9, r3
 800df32:	2200      	movs	r2, #0
 800df34:	2300      	movs	r3, #0
 800df36:	4620      	mov	r0, r4
 800df38:	4629      	mov	r1, r5
 800df3a:	f7f2 fded 	bl	8000b18 <__aeabi_dcmpeq>
 800df3e:	b108      	cbz	r0, 800df44 <__cvt+0xa4>
 800df40:	f8cd 900c 	str.w	r9, [sp, #12]
 800df44:	2230      	movs	r2, #48	; 0x30
 800df46:	9b03      	ldr	r3, [sp, #12]
 800df48:	454b      	cmp	r3, r9
 800df4a:	d307      	bcc.n	800df5c <__cvt+0xbc>
 800df4c:	9b03      	ldr	r3, [sp, #12]
 800df4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df50:	1bdb      	subs	r3, r3, r7
 800df52:	4638      	mov	r0, r7
 800df54:	6013      	str	r3, [r2, #0]
 800df56:	b004      	add	sp, #16
 800df58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df5c:	1c59      	adds	r1, r3, #1
 800df5e:	9103      	str	r1, [sp, #12]
 800df60:	701a      	strb	r2, [r3, #0]
 800df62:	e7f0      	b.n	800df46 <__cvt+0xa6>

0800df64 <__exponent>:
 800df64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df66:	4603      	mov	r3, r0
 800df68:	2900      	cmp	r1, #0
 800df6a:	bfb8      	it	lt
 800df6c:	4249      	neglt	r1, r1
 800df6e:	f803 2b02 	strb.w	r2, [r3], #2
 800df72:	bfb4      	ite	lt
 800df74:	222d      	movlt	r2, #45	; 0x2d
 800df76:	222b      	movge	r2, #43	; 0x2b
 800df78:	2909      	cmp	r1, #9
 800df7a:	7042      	strb	r2, [r0, #1]
 800df7c:	dd2a      	ble.n	800dfd4 <__exponent+0x70>
 800df7e:	f10d 0407 	add.w	r4, sp, #7
 800df82:	46a4      	mov	ip, r4
 800df84:	270a      	movs	r7, #10
 800df86:	46a6      	mov	lr, r4
 800df88:	460a      	mov	r2, r1
 800df8a:	fb91 f6f7 	sdiv	r6, r1, r7
 800df8e:	fb07 1516 	mls	r5, r7, r6, r1
 800df92:	3530      	adds	r5, #48	; 0x30
 800df94:	2a63      	cmp	r2, #99	; 0x63
 800df96:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800df9a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800df9e:	4631      	mov	r1, r6
 800dfa0:	dcf1      	bgt.n	800df86 <__exponent+0x22>
 800dfa2:	3130      	adds	r1, #48	; 0x30
 800dfa4:	f1ae 0502 	sub.w	r5, lr, #2
 800dfa8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800dfac:	1c44      	adds	r4, r0, #1
 800dfae:	4629      	mov	r1, r5
 800dfb0:	4561      	cmp	r1, ip
 800dfb2:	d30a      	bcc.n	800dfca <__exponent+0x66>
 800dfb4:	f10d 0209 	add.w	r2, sp, #9
 800dfb8:	eba2 020e 	sub.w	r2, r2, lr
 800dfbc:	4565      	cmp	r5, ip
 800dfbe:	bf88      	it	hi
 800dfc0:	2200      	movhi	r2, #0
 800dfc2:	4413      	add	r3, r2
 800dfc4:	1a18      	subs	r0, r3, r0
 800dfc6:	b003      	add	sp, #12
 800dfc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dfce:	f804 2f01 	strb.w	r2, [r4, #1]!
 800dfd2:	e7ed      	b.n	800dfb0 <__exponent+0x4c>
 800dfd4:	2330      	movs	r3, #48	; 0x30
 800dfd6:	3130      	adds	r1, #48	; 0x30
 800dfd8:	7083      	strb	r3, [r0, #2]
 800dfda:	70c1      	strb	r1, [r0, #3]
 800dfdc:	1d03      	adds	r3, r0, #4
 800dfde:	e7f1      	b.n	800dfc4 <__exponent+0x60>

0800dfe0 <_printf_float>:
 800dfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfe4:	ed2d 8b02 	vpush	{d8}
 800dfe8:	b08d      	sub	sp, #52	; 0x34
 800dfea:	460c      	mov	r4, r1
 800dfec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800dff0:	4616      	mov	r6, r2
 800dff2:	461f      	mov	r7, r3
 800dff4:	4605      	mov	r5, r0
 800dff6:	f001 fa39 	bl	800f46c <_localeconv_r>
 800dffa:	f8d0 a000 	ldr.w	sl, [r0]
 800dffe:	4650      	mov	r0, sl
 800e000:	f7f2 f90e 	bl	8000220 <strlen>
 800e004:	2300      	movs	r3, #0
 800e006:	930a      	str	r3, [sp, #40]	; 0x28
 800e008:	6823      	ldr	r3, [r4, #0]
 800e00a:	9305      	str	r3, [sp, #20]
 800e00c:	f8d8 3000 	ldr.w	r3, [r8]
 800e010:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e014:	3307      	adds	r3, #7
 800e016:	f023 0307 	bic.w	r3, r3, #7
 800e01a:	f103 0208 	add.w	r2, r3, #8
 800e01e:	f8c8 2000 	str.w	r2, [r8]
 800e022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e026:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e02a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e02e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e032:	9307      	str	r3, [sp, #28]
 800e034:	f8cd 8018 	str.w	r8, [sp, #24]
 800e038:	ee08 0a10 	vmov	s16, r0
 800e03c:	4b9f      	ldr	r3, [pc, #636]	; (800e2bc <_printf_float+0x2dc>)
 800e03e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e042:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e046:	f7f2 fd99 	bl	8000b7c <__aeabi_dcmpun>
 800e04a:	bb88      	cbnz	r0, 800e0b0 <_printf_float+0xd0>
 800e04c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e050:	4b9a      	ldr	r3, [pc, #616]	; (800e2bc <_printf_float+0x2dc>)
 800e052:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e056:	f7f2 fd73 	bl	8000b40 <__aeabi_dcmple>
 800e05a:	bb48      	cbnz	r0, 800e0b0 <_printf_float+0xd0>
 800e05c:	2200      	movs	r2, #0
 800e05e:	2300      	movs	r3, #0
 800e060:	4640      	mov	r0, r8
 800e062:	4649      	mov	r1, r9
 800e064:	f7f2 fd62 	bl	8000b2c <__aeabi_dcmplt>
 800e068:	b110      	cbz	r0, 800e070 <_printf_float+0x90>
 800e06a:	232d      	movs	r3, #45	; 0x2d
 800e06c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e070:	4b93      	ldr	r3, [pc, #588]	; (800e2c0 <_printf_float+0x2e0>)
 800e072:	4894      	ldr	r0, [pc, #592]	; (800e2c4 <_printf_float+0x2e4>)
 800e074:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e078:	bf94      	ite	ls
 800e07a:	4698      	movls	r8, r3
 800e07c:	4680      	movhi	r8, r0
 800e07e:	2303      	movs	r3, #3
 800e080:	6123      	str	r3, [r4, #16]
 800e082:	9b05      	ldr	r3, [sp, #20]
 800e084:	f023 0204 	bic.w	r2, r3, #4
 800e088:	6022      	str	r2, [r4, #0]
 800e08a:	f04f 0900 	mov.w	r9, #0
 800e08e:	9700      	str	r7, [sp, #0]
 800e090:	4633      	mov	r3, r6
 800e092:	aa0b      	add	r2, sp, #44	; 0x2c
 800e094:	4621      	mov	r1, r4
 800e096:	4628      	mov	r0, r5
 800e098:	f000 f9d8 	bl	800e44c <_printf_common>
 800e09c:	3001      	adds	r0, #1
 800e09e:	f040 8090 	bne.w	800e1c2 <_printf_float+0x1e2>
 800e0a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e0a6:	b00d      	add	sp, #52	; 0x34
 800e0a8:	ecbd 8b02 	vpop	{d8}
 800e0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0b0:	4642      	mov	r2, r8
 800e0b2:	464b      	mov	r3, r9
 800e0b4:	4640      	mov	r0, r8
 800e0b6:	4649      	mov	r1, r9
 800e0b8:	f7f2 fd60 	bl	8000b7c <__aeabi_dcmpun>
 800e0bc:	b140      	cbz	r0, 800e0d0 <_printf_float+0xf0>
 800e0be:	464b      	mov	r3, r9
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	bfbc      	itt	lt
 800e0c4:	232d      	movlt	r3, #45	; 0x2d
 800e0c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e0ca:	487f      	ldr	r0, [pc, #508]	; (800e2c8 <_printf_float+0x2e8>)
 800e0cc:	4b7f      	ldr	r3, [pc, #508]	; (800e2cc <_printf_float+0x2ec>)
 800e0ce:	e7d1      	b.n	800e074 <_printf_float+0x94>
 800e0d0:	6863      	ldr	r3, [r4, #4]
 800e0d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e0d6:	9206      	str	r2, [sp, #24]
 800e0d8:	1c5a      	adds	r2, r3, #1
 800e0da:	d13f      	bne.n	800e15c <_printf_float+0x17c>
 800e0dc:	2306      	movs	r3, #6
 800e0de:	6063      	str	r3, [r4, #4]
 800e0e0:	9b05      	ldr	r3, [sp, #20]
 800e0e2:	6861      	ldr	r1, [r4, #4]
 800e0e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	9303      	str	r3, [sp, #12]
 800e0ec:	ab0a      	add	r3, sp, #40	; 0x28
 800e0ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e0f2:	ab09      	add	r3, sp, #36	; 0x24
 800e0f4:	ec49 8b10 	vmov	d0, r8, r9
 800e0f8:	9300      	str	r3, [sp, #0]
 800e0fa:	6022      	str	r2, [r4, #0]
 800e0fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e100:	4628      	mov	r0, r5
 800e102:	f7ff fecd 	bl	800dea0 <__cvt>
 800e106:	9b06      	ldr	r3, [sp, #24]
 800e108:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e10a:	2b47      	cmp	r3, #71	; 0x47
 800e10c:	4680      	mov	r8, r0
 800e10e:	d108      	bne.n	800e122 <_printf_float+0x142>
 800e110:	1cc8      	adds	r0, r1, #3
 800e112:	db02      	blt.n	800e11a <_printf_float+0x13a>
 800e114:	6863      	ldr	r3, [r4, #4]
 800e116:	4299      	cmp	r1, r3
 800e118:	dd41      	ble.n	800e19e <_printf_float+0x1be>
 800e11a:	f1ab 0b02 	sub.w	fp, fp, #2
 800e11e:	fa5f fb8b 	uxtb.w	fp, fp
 800e122:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e126:	d820      	bhi.n	800e16a <_printf_float+0x18a>
 800e128:	3901      	subs	r1, #1
 800e12a:	465a      	mov	r2, fp
 800e12c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e130:	9109      	str	r1, [sp, #36]	; 0x24
 800e132:	f7ff ff17 	bl	800df64 <__exponent>
 800e136:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e138:	1813      	adds	r3, r2, r0
 800e13a:	2a01      	cmp	r2, #1
 800e13c:	4681      	mov	r9, r0
 800e13e:	6123      	str	r3, [r4, #16]
 800e140:	dc02      	bgt.n	800e148 <_printf_float+0x168>
 800e142:	6822      	ldr	r2, [r4, #0]
 800e144:	07d2      	lsls	r2, r2, #31
 800e146:	d501      	bpl.n	800e14c <_printf_float+0x16c>
 800e148:	3301      	adds	r3, #1
 800e14a:	6123      	str	r3, [r4, #16]
 800e14c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e150:	2b00      	cmp	r3, #0
 800e152:	d09c      	beq.n	800e08e <_printf_float+0xae>
 800e154:	232d      	movs	r3, #45	; 0x2d
 800e156:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e15a:	e798      	b.n	800e08e <_printf_float+0xae>
 800e15c:	9a06      	ldr	r2, [sp, #24]
 800e15e:	2a47      	cmp	r2, #71	; 0x47
 800e160:	d1be      	bne.n	800e0e0 <_printf_float+0x100>
 800e162:	2b00      	cmp	r3, #0
 800e164:	d1bc      	bne.n	800e0e0 <_printf_float+0x100>
 800e166:	2301      	movs	r3, #1
 800e168:	e7b9      	b.n	800e0de <_printf_float+0xfe>
 800e16a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e16e:	d118      	bne.n	800e1a2 <_printf_float+0x1c2>
 800e170:	2900      	cmp	r1, #0
 800e172:	6863      	ldr	r3, [r4, #4]
 800e174:	dd0b      	ble.n	800e18e <_printf_float+0x1ae>
 800e176:	6121      	str	r1, [r4, #16]
 800e178:	b913      	cbnz	r3, 800e180 <_printf_float+0x1a0>
 800e17a:	6822      	ldr	r2, [r4, #0]
 800e17c:	07d0      	lsls	r0, r2, #31
 800e17e:	d502      	bpl.n	800e186 <_printf_float+0x1a6>
 800e180:	3301      	adds	r3, #1
 800e182:	440b      	add	r3, r1
 800e184:	6123      	str	r3, [r4, #16]
 800e186:	65a1      	str	r1, [r4, #88]	; 0x58
 800e188:	f04f 0900 	mov.w	r9, #0
 800e18c:	e7de      	b.n	800e14c <_printf_float+0x16c>
 800e18e:	b913      	cbnz	r3, 800e196 <_printf_float+0x1b6>
 800e190:	6822      	ldr	r2, [r4, #0]
 800e192:	07d2      	lsls	r2, r2, #31
 800e194:	d501      	bpl.n	800e19a <_printf_float+0x1ba>
 800e196:	3302      	adds	r3, #2
 800e198:	e7f4      	b.n	800e184 <_printf_float+0x1a4>
 800e19a:	2301      	movs	r3, #1
 800e19c:	e7f2      	b.n	800e184 <_printf_float+0x1a4>
 800e19e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e1a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1a4:	4299      	cmp	r1, r3
 800e1a6:	db05      	blt.n	800e1b4 <_printf_float+0x1d4>
 800e1a8:	6823      	ldr	r3, [r4, #0]
 800e1aa:	6121      	str	r1, [r4, #16]
 800e1ac:	07d8      	lsls	r0, r3, #31
 800e1ae:	d5ea      	bpl.n	800e186 <_printf_float+0x1a6>
 800e1b0:	1c4b      	adds	r3, r1, #1
 800e1b2:	e7e7      	b.n	800e184 <_printf_float+0x1a4>
 800e1b4:	2900      	cmp	r1, #0
 800e1b6:	bfd4      	ite	le
 800e1b8:	f1c1 0202 	rsble	r2, r1, #2
 800e1bc:	2201      	movgt	r2, #1
 800e1be:	4413      	add	r3, r2
 800e1c0:	e7e0      	b.n	800e184 <_printf_float+0x1a4>
 800e1c2:	6823      	ldr	r3, [r4, #0]
 800e1c4:	055a      	lsls	r2, r3, #21
 800e1c6:	d407      	bmi.n	800e1d8 <_printf_float+0x1f8>
 800e1c8:	6923      	ldr	r3, [r4, #16]
 800e1ca:	4642      	mov	r2, r8
 800e1cc:	4631      	mov	r1, r6
 800e1ce:	4628      	mov	r0, r5
 800e1d0:	47b8      	blx	r7
 800e1d2:	3001      	adds	r0, #1
 800e1d4:	d12c      	bne.n	800e230 <_printf_float+0x250>
 800e1d6:	e764      	b.n	800e0a2 <_printf_float+0xc2>
 800e1d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e1dc:	f240 80e0 	bls.w	800e3a0 <_printf_float+0x3c0>
 800e1e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	f7f2 fc96 	bl	8000b18 <__aeabi_dcmpeq>
 800e1ec:	2800      	cmp	r0, #0
 800e1ee:	d034      	beq.n	800e25a <_printf_float+0x27a>
 800e1f0:	4a37      	ldr	r2, [pc, #220]	; (800e2d0 <_printf_float+0x2f0>)
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	4631      	mov	r1, r6
 800e1f6:	4628      	mov	r0, r5
 800e1f8:	47b8      	blx	r7
 800e1fa:	3001      	adds	r0, #1
 800e1fc:	f43f af51 	beq.w	800e0a2 <_printf_float+0xc2>
 800e200:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e204:	429a      	cmp	r2, r3
 800e206:	db02      	blt.n	800e20e <_printf_float+0x22e>
 800e208:	6823      	ldr	r3, [r4, #0]
 800e20a:	07d8      	lsls	r0, r3, #31
 800e20c:	d510      	bpl.n	800e230 <_printf_float+0x250>
 800e20e:	ee18 3a10 	vmov	r3, s16
 800e212:	4652      	mov	r2, sl
 800e214:	4631      	mov	r1, r6
 800e216:	4628      	mov	r0, r5
 800e218:	47b8      	blx	r7
 800e21a:	3001      	adds	r0, #1
 800e21c:	f43f af41 	beq.w	800e0a2 <_printf_float+0xc2>
 800e220:	f04f 0800 	mov.w	r8, #0
 800e224:	f104 091a 	add.w	r9, r4, #26
 800e228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e22a:	3b01      	subs	r3, #1
 800e22c:	4543      	cmp	r3, r8
 800e22e:	dc09      	bgt.n	800e244 <_printf_float+0x264>
 800e230:	6823      	ldr	r3, [r4, #0]
 800e232:	079b      	lsls	r3, r3, #30
 800e234:	f100 8105 	bmi.w	800e442 <_printf_float+0x462>
 800e238:	68e0      	ldr	r0, [r4, #12]
 800e23a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e23c:	4298      	cmp	r0, r3
 800e23e:	bfb8      	it	lt
 800e240:	4618      	movlt	r0, r3
 800e242:	e730      	b.n	800e0a6 <_printf_float+0xc6>
 800e244:	2301      	movs	r3, #1
 800e246:	464a      	mov	r2, r9
 800e248:	4631      	mov	r1, r6
 800e24a:	4628      	mov	r0, r5
 800e24c:	47b8      	blx	r7
 800e24e:	3001      	adds	r0, #1
 800e250:	f43f af27 	beq.w	800e0a2 <_printf_float+0xc2>
 800e254:	f108 0801 	add.w	r8, r8, #1
 800e258:	e7e6      	b.n	800e228 <_printf_float+0x248>
 800e25a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	dc39      	bgt.n	800e2d4 <_printf_float+0x2f4>
 800e260:	4a1b      	ldr	r2, [pc, #108]	; (800e2d0 <_printf_float+0x2f0>)
 800e262:	2301      	movs	r3, #1
 800e264:	4631      	mov	r1, r6
 800e266:	4628      	mov	r0, r5
 800e268:	47b8      	blx	r7
 800e26a:	3001      	adds	r0, #1
 800e26c:	f43f af19 	beq.w	800e0a2 <_printf_float+0xc2>
 800e270:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e274:	4313      	orrs	r3, r2
 800e276:	d102      	bne.n	800e27e <_printf_float+0x29e>
 800e278:	6823      	ldr	r3, [r4, #0]
 800e27a:	07d9      	lsls	r1, r3, #31
 800e27c:	d5d8      	bpl.n	800e230 <_printf_float+0x250>
 800e27e:	ee18 3a10 	vmov	r3, s16
 800e282:	4652      	mov	r2, sl
 800e284:	4631      	mov	r1, r6
 800e286:	4628      	mov	r0, r5
 800e288:	47b8      	blx	r7
 800e28a:	3001      	adds	r0, #1
 800e28c:	f43f af09 	beq.w	800e0a2 <_printf_float+0xc2>
 800e290:	f04f 0900 	mov.w	r9, #0
 800e294:	f104 0a1a 	add.w	sl, r4, #26
 800e298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e29a:	425b      	negs	r3, r3
 800e29c:	454b      	cmp	r3, r9
 800e29e:	dc01      	bgt.n	800e2a4 <_printf_float+0x2c4>
 800e2a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2a2:	e792      	b.n	800e1ca <_printf_float+0x1ea>
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	4652      	mov	r2, sl
 800e2a8:	4631      	mov	r1, r6
 800e2aa:	4628      	mov	r0, r5
 800e2ac:	47b8      	blx	r7
 800e2ae:	3001      	adds	r0, #1
 800e2b0:	f43f aef7 	beq.w	800e0a2 <_printf_float+0xc2>
 800e2b4:	f109 0901 	add.w	r9, r9, #1
 800e2b8:	e7ee      	b.n	800e298 <_printf_float+0x2b8>
 800e2ba:	bf00      	nop
 800e2bc:	7fefffff 	.word	0x7fefffff
 800e2c0:	08010988 	.word	0x08010988
 800e2c4:	0801098c 	.word	0x0801098c
 800e2c8:	08010994 	.word	0x08010994
 800e2cc:	08010990 	.word	0x08010990
 800e2d0:	08010998 	.word	0x08010998
 800e2d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e2d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	bfa8      	it	ge
 800e2dc:	461a      	movge	r2, r3
 800e2de:	2a00      	cmp	r2, #0
 800e2e0:	4691      	mov	r9, r2
 800e2e2:	dc37      	bgt.n	800e354 <_printf_float+0x374>
 800e2e4:	f04f 0b00 	mov.w	fp, #0
 800e2e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e2ec:	f104 021a 	add.w	r2, r4, #26
 800e2f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e2f2:	9305      	str	r3, [sp, #20]
 800e2f4:	eba3 0309 	sub.w	r3, r3, r9
 800e2f8:	455b      	cmp	r3, fp
 800e2fa:	dc33      	bgt.n	800e364 <_printf_float+0x384>
 800e2fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e300:	429a      	cmp	r2, r3
 800e302:	db3b      	blt.n	800e37c <_printf_float+0x39c>
 800e304:	6823      	ldr	r3, [r4, #0]
 800e306:	07da      	lsls	r2, r3, #31
 800e308:	d438      	bmi.n	800e37c <_printf_float+0x39c>
 800e30a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e30c:	9a05      	ldr	r2, [sp, #20]
 800e30e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e310:	1a9a      	subs	r2, r3, r2
 800e312:	eba3 0901 	sub.w	r9, r3, r1
 800e316:	4591      	cmp	r9, r2
 800e318:	bfa8      	it	ge
 800e31a:	4691      	movge	r9, r2
 800e31c:	f1b9 0f00 	cmp.w	r9, #0
 800e320:	dc35      	bgt.n	800e38e <_printf_float+0x3ae>
 800e322:	f04f 0800 	mov.w	r8, #0
 800e326:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e32a:	f104 0a1a 	add.w	sl, r4, #26
 800e32e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e332:	1a9b      	subs	r3, r3, r2
 800e334:	eba3 0309 	sub.w	r3, r3, r9
 800e338:	4543      	cmp	r3, r8
 800e33a:	f77f af79 	ble.w	800e230 <_printf_float+0x250>
 800e33e:	2301      	movs	r3, #1
 800e340:	4652      	mov	r2, sl
 800e342:	4631      	mov	r1, r6
 800e344:	4628      	mov	r0, r5
 800e346:	47b8      	blx	r7
 800e348:	3001      	adds	r0, #1
 800e34a:	f43f aeaa 	beq.w	800e0a2 <_printf_float+0xc2>
 800e34e:	f108 0801 	add.w	r8, r8, #1
 800e352:	e7ec      	b.n	800e32e <_printf_float+0x34e>
 800e354:	4613      	mov	r3, r2
 800e356:	4631      	mov	r1, r6
 800e358:	4642      	mov	r2, r8
 800e35a:	4628      	mov	r0, r5
 800e35c:	47b8      	blx	r7
 800e35e:	3001      	adds	r0, #1
 800e360:	d1c0      	bne.n	800e2e4 <_printf_float+0x304>
 800e362:	e69e      	b.n	800e0a2 <_printf_float+0xc2>
 800e364:	2301      	movs	r3, #1
 800e366:	4631      	mov	r1, r6
 800e368:	4628      	mov	r0, r5
 800e36a:	9205      	str	r2, [sp, #20]
 800e36c:	47b8      	blx	r7
 800e36e:	3001      	adds	r0, #1
 800e370:	f43f ae97 	beq.w	800e0a2 <_printf_float+0xc2>
 800e374:	9a05      	ldr	r2, [sp, #20]
 800e376:	f10b 0b01 	add.w	fp, fp, #1
 800e37a:	e7b9      	b.n	800e2f0 <_printf_float+0x310>
 800e37c:	ee18 3a10 	vmov	r3, s16
 800e380:	4652      	mov	r2, sl
 800e382:	4631      	mov	r1, r6
 800e384:	4628      	mov	r0, r5
 800e386:	47b8      	blx	r7
 800e388:	3001      	adds	r0, #1
 800e38a:	d1be      	bne.n	800e30a <_printf_float+0x32a>
 800e38c:	e689      	b.n	800e0a2 <_printf_float+0xc2>
 800e38e:	9a05      	ldr	r2, [sp, #20]
 800e390:	464b      	mov	r3, r9
 800e392:	4442      	add	r2, r8
 800e394:	4631      	mov	r1, r6
 800e396:	4628      	mov	r0, r5
 800e398:	47b8      	blx	r7
 800e39a:	3001      	adds	r0, #1
 800e39c:	d1c1      	bne.n	800e322 <_printf_float+0x342>
 800e39e:	e680      	b.n	800e0a2 <_printf_float+0xc2>
 800e3a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e3a2:	2a01      	cmp	r2, #1
 800e3a4:	dc01      	bgt.n	800e3aa <_printf_float+0x3ca>
 800e3a6:	07db      	lsls	r3, r3, #31
 800e3a8:	d538      	bpl.n	800e41c <_printf_float+0x43c>
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	4642      	mov	r2, r8
 800e3ae:	4631      	mov	r1, r6
 800e3b0:	4628      	mov	r0, r5
 800e3b2:	47b8      	blx	r7
 800e3b4:	3001      	adds	r0, #1
 800e3b6:	f43f ae74 	beq.w	800e0a2 <_printf_float+0xc2>
 800e3ba:	ee18 3a10 	vmov	r3, s16
 800e3be:	4652      	mov	r2, sl
 800e3c0:	4631      	mov	r1, r6
 800e3c2:	4628      	mov	r0, r5
 800e3c4:	47b8      	blx	r7
 800e3c6:	3001      	adds	r0, #1
 800e3c8:	f43f ae6b 	beq.w	800e0a2 <_printf_float+0xc2>
 800e3cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	f7f2 fba0 	bl	8000b18 <__aeabi_dcmpeq>
 800e3d8:	b9d8      	cbnz	r0, 800e412 <_printf_float+0x432>
 800e3da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3dc:	f108 0201 	add.w	r2, r8, #1
 800e3e0:	3b01      	subs	r3, #1
 800e3e2:	4631      	mov	r1, r6
 800e3e4:	4628      	mov	r0, r5
 800e3e6:	47b8      	blx	r7
 800e3e8:	3001      	adds	r0, #1
 800e3ea:	d10e      	bne.n	800e40a <_printf_float+0x42a>
 800e3ec:	e659      	b.n	800e0a2 <_printf_float+0xc2>
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	4652      	mov	r2, sl
 800e3f2:	4631      	mov	r1, r6
 800e3f4:	4628      	mov	r0, r5
 800e3f6:	47b8      	blx	r7
 800e3f8:	3001      	adds	r0, #1
 800e3fa:	f43f ae52 	beq.w	800e0a2 <_printf_float+0xc2>
 800e3fe:	f108 0801 	add.w	r8, r8, #1
 800e402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e404:	3b01      	subs	r3, #1
 800e406:	4543      	cmp	r3, r8
 800e408:	dcf1      	bgt.n	800e3ee <_printf_float+0x40e>
 800e40a:	464b      	mov	r3, r9
 800e40c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e410:	e6dc      	b.n	800e1cc <_printf_float+0x1ec>
 800e412:	f04f 0800 	mov.w	r8, #0
 800e416:	f104 0a1a 	add.w	sl, r4, #26
 800e41a:	e7f2      	b.n	800e402 <_printf_float+0x422>
 800e41c:	2301      	movs	r3, #1
 800e41e:	4642      	mov	r2, r8
 800e420:	e7df      	b.n	800e3e2 <_printf_float+0x402>
 800e422:	2301      	movs	r3, #1
 800e424:	464a      	mov	r2, r9
 800e426:	4631      	mov	r1, r6
 800e428:	4628      	mov	r0, r5
 800e42a:	47b8      	blx	r7
 800e42c:	3001      	adds	r0, #1
 800e42e:	f43f ae38 	beq.w	800e0a2 <_printf_float+0xc2>
 800e432:	f108 0801 	add.w	r8, r8, #1
 800e436:	68e3      	ldr	r3, [r4, #12]
 800e438:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e43a:	1a5b      	subs	r3, r3, r1
 800e43c:	4543      	cmp	r3, r8
 800e43e:	dcf0      	bgt.n	800e422 <_printf_float+0x442>
 800e440:	e6fa      	b.n	800e238 <_printf_float+0x258>
 800e442:	f04f 0800 	mov.w	r8, #0
 800e446:	f104 0919 	add.w	r9, r4, #25
 800e44a:	e7f4      	b.n	800e436 <_printf_float+0x456>

0800e44c <_printf_common>:
 800e44c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e450:	4616      	mov	r6, r2
 800e452:	4699      	mov	r9, r3
 800e454:	688a      	ldr	r2, [r1, #8]
 800e456:	690b      	ldr	r3, [r1, #16]
 800e458:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e45c:	4293      	cmp	r3, r2
 800e45e:	bfb8      	it	lt
 800e460:	4613      	movlt	r3, r2
 800e462:	6033      	str	r3, [r6, #0]
 800e464:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e468:	4607      	mov	r7, r0
 800e46a:	460c      	mov	r4, r1
 800e46c:	b10a      	cbz	r2, 800e472 <_printf_common+0x26>
 800e46e:	3301      	adds	r3, #1
 800e470:	6033      	str	r3, [r6, #0]
 800e472:	6823      	ldr	r3, [r4, #0]
 800e474:	0699      	lsls	r1, r3, #26
 800e476:	bf42      	ittt	mi
 800e478:	6833      	ldrmi	r3, [r6, #0]
 800e47a:	3302      	addmi	r3, #2
 800e47c:	6033      	strmi	r3, [r6, #0]
 800e47e:	6825      	ldr	r5, [r4, #0]
 800e480:	f015 0506 	ands.w	r5, r5, #6
 800e484:	d106      	bne.n	800e494 <_printf_common+0x48>
 800e486:	f104 0a19 	add.w	sl, r4, #25
 800e48a:	68e3      	ldr	r3, [r4, #12]
 800e48c:	6832      	ldr	r2, [r6, #0]
 800e48e:	1a9b      	subs	r3, r3, r2
 800e490:	42ab      	cmp	r3, r5
 800e492:	dc26      	bgt.n	800e4e2 <_printf_common+0x96>
 800e494:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e498:	1e13      	subs	r3, r2, #0
 800e49a:	6822      	ldr	r2, [r4, #0]
 800e49c:	bf18      	it	ne
 800e49e:	2301      	movne	r3, #1
 800e4a0:	0692      	lsls	r2, r2, #26
 800e4a2:	d42b      	bmi.n	800e4fc <_printf_common+0xb0>
 800e4a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e4a8:	4649      	mov	r1, r9
 800e4aa:	4638      	mov	r0, r7
 800e4ac:	47c0      	blx	r8
 800e4ae:	3001      	adds	r0, #1
 800e4b0:	d01e      	beq.n	800e4f0 <_printf_common+0xa4>
 800e4b2:	6823      	ldr	r3, [r4, #0]
 800e4b4:	68e5      	ldr	r5, [r4, #12]
 800e4b6:	6832      	ldr	r2, [r6, #0]
 800e4b8:	f003 0306 	and.w	r3, r3, #6
 800e4bc:	2b04      	cmp	r3, #4
 800e4be:	bf08      	it	eq
 800e4c0:	1aad      	subeq	r5, r5, r2
 800e4c2:	68a3      	ldr	r3, [r4, #8]
 800e4c4:	6922      	ldr	r2, [r4, #16]
 800e4c6:	bf0c      	ite	eq
 800e4c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e4cc:	2500      	movne	r5, #0
 800e4ce:	4293      	cmp	r3, r2
 800e4d0:	bfc4      	itt	gt
 800e4d2:	1a9b      	subgt	r3, r3, r2
 800e4d4:	18ed      	addgt	r5, r5, r3
 800e4d6:	2600      	movs	r6, #0
 800e4d8:	341a      	adds	r4, #26
 800e4da:	42b5      	cmp	r5, r6
 800e4dc:	d11a      	bne.n	800e514 <_printf_common+0xc8>
 800e4de:	2000      	movs	r0, #0
 800e4e0:	e008      	b.n	800e4f4 <_printf_common+0xa8>
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	4652      	mov	r2, sl
 800e4e6:	4649      	mov	r1, r9
 800e4e8:	4638      	mov	r0, r7
 800e4ea:	47c0      	blx	r8
 800e4ec:	3001      	adds	r0, #1
 800e4ee:	d103      	bne.n	800e4f8 <_printf_common+0xac>
 800e4f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4f8:	3501      	adds	r5, #1
 800e4fa:	e7c6      	b.n	800e48a <_printf_common+0x3e>
 800e4fc:	18e1      	adds	r1, r4, r3
 800e4fe:	1c5a      	adds	r2, r3, #1
 800e500:	2030      	movs	r0, #48	; 0x30
 800e502:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e506:	4422      	add	r2, r4
 800e508:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e50c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e510:	3302      	adds	r3, #2
 800e512:	e7c7      	b.n	800e4a4 <_printf_common+0x58>
 800e514:	2301      	movs	r3, #1
 800e516:	4622      	mov	r2, r4
 800e518:	4649      	mov	r1, r9
 800e51a:	4638      	mov	r0, r7
 800e51c:	47c0      	blx	r8
 800e51e:	3001      	adds	r0, #1
 800e520:	d0e6      	beq.n	800e4f0 <_printf_common+0xa4>
 800e522:	3601      	adds	r6, #1
 800e524:	e7d9      	b.n	800e4da <_printf_common+0x8e>
	...

0800e528 <_printf_i>:
 800e528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e52c:	7e0f      	ldrb	r7, [r1, #24]
 800e52e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e530:	2f78      	cmp	r7, #120	; 0x78
 800e532:	4691      	mov	r9, r2
 800e534:	4680      	mov	r8, r0
 800e536:	460c      	mov	r4, r1
 800e538:	469a      	mov	sl, r3
 800e53a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e53e:	d807      	bhi.n	800e550 <_printf_i+0x28>
 800e540:	2f62      	cmp	r7, #98	; 0x62
 800e542:	d80a      	bhi.n	800e55a <_printf_i+0x32>
 800e544:	2f00      	cmp	r7, #0
 800e546:	f000 80d8 	beq.w	800e6fa <_printf_i+0x1d2>
 800e54a:	2f58      	cmp	r7, #88	; 0x58
 800e54c:	f000 80a3 	beq.w	800e696 <_printf_i+0x16e>
 800e550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e554:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e558:	e03a      	b.n	800e5d0 <_printf_i+0xa8>
 800e55a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e55e:	2b15      	cmp	r3, #21
 800e560:	d8f6      	bhi.n	800e550 <_printf_i+0x28>
 800e562:	a101      	add	r1, pc, #4	; (adr r1, 800e568 <_printf_i+0x40>)
 800e564:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e568:	0800e5c1 	.word	0x0800e5c1
 800e56c:	0800e5d5 	.word	0x0800e5d5
 800e570:	0800e551 	.word	0x0800e551
 800e574:	0800e551 	.word	0x0800e551
 800e578:	0800e551 	.word	0x0800e551
 800e57c:	0800e551 	.word	0x0800e551
 800e580:	0800e5d5 	.word	0x0800e5d5
 800e584:	0800e551 	.word	0x0800e551
 800e588:	0800e551 	.word	0x0800e551
 800e58c:	0800e551 	.word	0x0800e551
 800e590:	0800e551 	.word	0x0800e551
 800e594:	0800e6e1 	.word	0x0800e6e1
 800e598:	0800e605 	.word	0x0800e605
 800e59c:	0800e6c3 	.word	0x0800e6c3
 800e5a0:	0800e551 	.word	0x0800e551
 800e5a4:	0800e551 	.word	0x0800e551
 800e5a8:	0800e703 	.word	0x0800e703
 800e5ac:	0800e551 	.word	0x0800e551
 800e5b0:	0800e605 	.word	0x0800e605
 800e5b4:	0800e551 	.word	0x0800e551
 800e5b8:	0800e551 	.word	0x0800e551
 800e5bc:	0800e6cb 	.word	0x0800e6cb
 800e5c0:	682b      	ldr	r3, [r5, #0]
 800e5c2:	1d1a      	adds	r2, r3, #4
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	602a      	str	r2, [r5, #0]
 800e5c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e5cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	e0a3      	b.n	800e71c <_printf_i+0x1f4>
 800e5d4:	6820      	ldr	r0, [r4, #0]
 800e5d6:	6829      	ldr	r1, [r5, #0]
 800e5d8:	0606      	lsls	r6, r0, #24
 800e5da:	f101 0304 	add.w	r3, r1, #4
 800e5de:	d50a      	bpl.n	800e5f6 <_printf_i+0xce>
 800e5e0:	680e      	ldr	r6, [r1, #0]
 800e5e2:	602b      	str	r3, [r5, #0]
 800e5e4:	2e00      	cmp	r6, #0
 800e5e6:	da03      	bge.n	800e5f0 <_printf_i+0xc8>
 800e5e8:	232d      	movs	r3, #45	; 0x2d
 800e5ea:	4276      	negs	r6, r6
 800e5ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e5f0:	485e      	ldr	r0, [pc, #376]	; (800e76c <_printf_i+0x244>)
 800e5f2:	230a      	movs	r3, #10
 800e5f4:	e019      	b.n	800e62a <_printf_i+0x102>
 800e5f6:	680e      	ldr	r6, [r1, #0]
 800e5f8:	602b      	str	r3, [r5, #0]
 800e5fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e5fe:	bf18      	it	ne
 800e600:	b236      	sxthne	r6, r6
 800e602:	e7ef      	b.n	800e5e4 <_printf_i+0xbc>
 800e604:	682b      	ldr	r3, [r5, #0]
 800e606:	6820      	ldr	r0, [r4, #0]
 800e608:	1d19      	adds	r1, r3, #4
 800e60a:	6029      	str	r1, [r5, #0]
 800e60c:	0601      	lsls	r1, r0, #24
 800e60e:	d501      	bpl.n	800e614 <_printf_i+0xec>
 800e610:	681e      	ldr	r6, [r3, #0]
 800e612:	e002      	b.n	800e61a <_printf_i+0xf2>
 800e614:	0646      	lsls	r6, r0, #25
 800e616:	d5fb      	bpl.n	800e610 <_printf_i+0xe8>
 800e618:	881e      	ldrh	r6, [r3, #0]
 800e61a:	4854      	ldr	r0, [pc, #336]	; (800e76c <_printf_i+0x244>)
 800e61c:	2f6f      	cmp	r7, #111	; 0x6f
 800e61e:	bf0c      	ite	eq
 800e620:	2308      	moveq	r3, #8
 800e622:	230a      	movne	r3, #10
 800e624:	2100      	movs	r1, #0
 800e626:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e62a:	6865      	ldr	r5, [r4, #4]
 800e62c:	60a5      	str	r5, [r4, #8]
 800e62e:	2d00      	cmp	r5, #0
 800e630:	bfa2      	ittt	ge
 800e632:	6821      	ldrge	r1, [r4, #0]
 800e634:	f021 0104 	bicge.w	r1, r1, #4
 800e638:	6021      	strge	r1, [r4, #0]
 800e63a:	b90e      	cbnz	r6, 800e640 <_printf_i+0x118>
 800e63c:	2d00      	cmp	r5, #0
 800e63e:	d04d      	beq.n	800e6dc <_printf_i+0x1b4>
 800e640:	4615      	mov	r5, r2
 800e642:	fbb6 f1f3 	udiv	r1, r6, r3
 800e646:	fb03 6711 	mls	r7, r3, r1, r6
 800e64a:	5dc7      	ldrb	r7, [r0, r7]
 800e64c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e650:	4637      	mov	r7, r6
 800e652:	42bb      	cmp	r3, r7
 800e654:	460e      	mov	r6, r1
 800e656:	d9f4      	bls.n	800e642 <_printf_i+0x11a>
 800e658:	2b08      	cmp	r3, #8
 800e65a:	d10b      	bne.n	800e674 <_printf_i+0x14c>
 800e65c:	6823      	ldr	r3, [r4, #0]
 800e65e:	07de      	lsls	r6, r3, #31
 800e660:	d508      	bpl.n	800e674 <_printf_i+0x14c>
 800e662:	6923      	ldr	r3, [r4, #16]
 800e664:	6861      	ldr	r1, [r4, #4]
 800e666:	4299      	cmp	r1, r3
 800e668:	bfde      	ittt	le
 800e66a:	2330      	movle	r3, #48	; 0x30
 800e66c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e670:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e674:	1b52      	subs	r2, r2, r5
 800e676:	6122      	str	r2, [r4, #16]
 800e678:	f8cd a000 	str.w	sl, [sp]
 800e67c:	464b      	mov	r3, r9
 800e67e:	aa03      	add	r2, sp, #12
 800e680:	4621      	mov	r1, r4
 800e682:	4640      	mov	r0, r8
 800e684:	f7ff fee2 	bl	800e44c <_printf_common>
 800e688:	3001      	adds	r0, #1
 800e68a:	d14c      	bne.n	800e726 <_printf_i+0x1fe>
 800e68c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e690:	b004      	add	sp, #16
 800e692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e696:	4835      	ldr	r0, [pc, #212]	; (800e76c <_printf_i+0x244>)
 800e698:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e69c:	6829      	ldr	r1, [r5, #0]
 800e69e:	6823      	ldr	r3, [r4, #0]
 800e6a0:	f851 6b04 	ldr.w	r6, [r1], #4
 800e6a4:	6029      	str	r1, [r5, #0]
 800e6a6:	061d      	lsls	r5, r3, #24
 800e6a8:	d514      	bpl.n	800e6d4 <_printf_i+0x1ac>
 800e6aa:	07df      	lsls	r7, r3, #31
 800e6ac:	bf44      	itt	mi
 800e6ae:	f043 0320 	orrmi.w	r3, r3, #32
 800e6b2:	6023      	strmi	r3, [r4, #0]
 800e6b4:	b91e      	cbnz	r6, 800e6be <_printf_i+0x196>
 800e6b6:	6823      	ldr	r3, [r4, #0]
 800e6b8:	f023 0320 	bic.w	r3, r3, #32
 800e6bc:	6023      	str	r3, [r4, #0]
 800e6be:	2310      	movs	r3, #16
 800e6c0:	e7b0      	b.n	800e624 <_printf_i+0xfc>
 800e6c2:	6823      	ldr	r3, [r4, #0]
 800e6c4:	f043 0320 	orr.w	r3, r3, #32
 800e6c8:	6023      	str	r3, [r4, #0]
 800e6ca:	2378      	movs	r3, #120	; 0x78
 800e6cc:	4828      	ldr	r0, [pc, #160]	; (800e770 <_printf_i+0x248>)
 800e6ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e6d2:	e7e3      	b.n	800e69c <_printf_i+0x174>
 800e6d4:	0659      	lsls	r1, r3, #25
 800e6d6:	bf48      	it	mi
 800e6d8:	b2b6      	uxthmi	r6, r6
 800e6da:	e7e6      	b.n	800e6aa <_printf_i+0x182>
 800e6dc:	4615      	mov	r5, r2
 800e6de:	e7bb      	b.n	800e658 <_printf_i+0x130>
 800e6e0:	682b      	ldr	r3, [r5, #0]
 800e6e2:	6826      	ldr	r6, [r4, #0]
 800e6e4:	6961      	ldr	r1, [r4, #20]
 800e6e6:	1d18      	adds	r0, r3, #4
 800e6e8:	6028      	str	r0, [r5, #0]
 800e6ea:	0635      	lsls	r5, r6, #24
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	d501      	bpl.n	800e6f4 <_printf_i+0x1cc>
 800e6f0:	6019      	str	r1, [r3, #0]
 800e6f2:	e002      	b.n	800e6fa <_printf_i+0x1d2>
 800e6f4:	0670      	lsls	r0, r6, #25
 800e6f6:	d5fb      	bpl.n	800e6f0 <_printf_i+0x1c8>
 800e6f8:	8019      	strh	r1, [r3, #0]
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	6123      	str	r3, [r4, #16]
 800e6fe:	4615      	mov	r5, r2
 800e700:	e7ba      	b.n	800e678 <_printf_i+0x150>
 800e702:	682b      	ldr	r3, [r5, #0]
 800e704:	1d1a      	adds	r2, r3, #4
 800e706:	602a      	str	r2, [r5, #0]
 800e708:	681d      	ldr	r5, [r3, #0]
 800e70a:	6862      	ldr	r2, [r4, #4]
 800e70c:	2100      	movs	r1, #0
 800e70e:	4628      	mov	r0, r5
 800e710:	f7f1 fd8e 	bl	8000230 <memchr>
 800e714:	b108      	cbz	r0, 800e71a <_printf_i+0x1f2>
 800e716:	1b40      	subs	r0, r0, r5
 800e718:	6060      	str	r0, [r4, #4]
 800e71a:	6863      	ldr	r3, [r4, #4]
 800e71c:	6123      	str	r3, [r4, #16]
 800e71e:	2300      	movs	r3, #0
 800e720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e724:	e7a8      	b.n	800e678 <_printf_i+0x150>
 800e726:	6923      	ldr	r3, [r4, #16]
 800e728:	462a      	mov	r2, r5
 800e72a:	4649      	mov	r1, r9
 800e72c:	4640      	mov	r0, r8
 800e72e:	47d0      	blx	sl
 800e730:	3001      	adds	r0, #1
 800e732:	d0ab      	beq.n	800e68c <_printf_i+0x164>
 800e734:	6823      	ldr	r3, [r4, #0]
 800e736:	079b      	lsls	r3, r3, #30
 800e738:	d413      	bmi.n	800e762 <_printf_i+0x23a>
 800e73a:	68e0      	ldr	r0, [r4, #12]
 800e73c:	9b03      	ldr	r3, [sp, #12]
 800e73e:	4298      	cmp	r0, r3
 800e740:	bfb8      	it	lt
 800e742:	4618      	movlt	r0, r3
 800e744:	e7a4      	b.n	800e690 <_printf_i+0x168>
 800e746:	2301      	movs	r3, #1
 800e748:	4632      	mov	r2, r6
 800e74a:	4649      	mov	r1, r9
 800e74c:	4640      	mov	r0, r8
 800e74e:	47d0      	blx	sl
 800e750:	3001      	adds	r0, #1
 800e752:	d09b      	beq.n	800e68c <_printf_i+0x164>
 800e754:	3501      	adds	r5, #1
 800e756:	68e3      	ldr	r3, [r4, #12]
 800e758:	9903      	ldr	r1, [sp, #12]
 800e75a:	1a5b      	subs	r3, r3, r1
 800e75c:	42ab      	cmp	r3, r5
 800e75e:	dcf2      	bgt.n	800e746 <_printf_i+0x21e>
 800e760:	e7eb      	b.n	800e73a <_printf_i+0x212>
 800e762:	2500      	movs	r5, #0
 800e764:	f104 0619 	add.w	r6, r4, #25
 800e768:	e7f5      	b.n	800e756 <_printf_i+0x22e>
 800e76a:	bf00      	nop
 800e76c:	0801099a 	.word	0x0801099a
 800e770:	080109ab 	.word	0x080109ab

0800e774 <quorem>:
 800e774:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e778:	6903      	ldr	r3, [r0, #16]
 800e77a:	690c      	ldr	r4, [r1, #16]
 800e77c:	42a3      	cmp	r3, r4
 800e77e:	4607      	mov	r7, r0
 800e780:	f2c0 8081 	blt.w	800e886 <quorem+0x112>
 800e784:	3c01      	subs	r4, #1
 800e786:	f101 0814 	add.w	r8, r1, #20
 800e78a:	f100 0514 	add.w	r5, r0, #20
 800e78e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e792:	9301      	str	r3, [sp, #4]
 800e794:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e798:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e79c:	3301      	adds	r3, #1
 800e79e:	429a      	cmp	r2, r3
 800e7a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e7a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e7a8:	fbb2 f6f3 	udiv	r6, r2, r3
 800e7ac:	d331      	bcc.n	800e812 <quorem+0x9e>
 800e7ae:	f04f 0e00 	mov.w	lr, #0
 800e7b2:	4640      	mov	r0, r8
 800e7b4:	46ac      	mov	ip, r5
 800e7b6:	46f2      	mov	sl, lr
 800e7b8:	f850 2b04 	ldr.w	r2, [r0], #4
 800e7bc:	b293      	uxth	r3, r2
 800e7be:	fb06 e303 	mla	r3, r6, r3, lr
 800e7c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e7c6:	b29b      	uxth	r3, r3
 800e7c8:	ebaa 0303 	sub.w	r3, sl, r3
 800e7cc:	f8dc a000 	ldr.w	sl, [ip]
 800e7d0:	0c12      	lsrs	r2, r2, #16
 800e7d2:	fa13 f38a 	uxtah	r3, r3, sl
 800e7d6:	fb06 e202 	mla	r2, r6, r2, lr
 800e7da:	9300      	str	r3, [sp, #0]
 800e7dc:	9b00      	ldr	r3, [sp, #0]
 800e7de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e7e2:	b292      	uxth	r2, r2
 800e7e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e7e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e7ec:	f8bd 3000 	ldrh.w	r3, [sp]
 800e7f0:	4581      	cmp	r9, r0
 800e7f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e7f6:	f84c 3b04 	str.w	r3, [ip], #4
 800e7fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e7fe:	d2db      	bcs.n	800e7b8 <quorem+0x44>
 800e800:	f855 300b 	ldr.w	r3, [r5, fp]
 800e804:	b92b      	cbnz	r3, 800e812 <quorem+0x9e>
 800e806:	9b01      	ldr	r3, [sp, #4]
 800e808:	3b04      	subs	r3, #4
 800e80a:	429d      	cmp	r5, r3
 800e80c:	461a      	mov	r2, r3
 800e80e:	d32e      	bcc.n	800e86e <quorem+0xfa>
 800e810:	613c      	str	r4, [r7, #16]
 800e812:	4638      	mov	r0, r7
 800e814:	f001 f8b8 	bl	800f988 <__mcmp>
 800e818:	2800      	cmp	r0, #0
 800e81a:	db24      	blt.n	800e866 <quorem+0xf2>
 800e81c:	3601      	adds	r6, #1
 800e81e:	4628      	mov	r0, r5
 800e820:	f04f 0c00 	mov.w	ip, #0
 800e824:	f858 2b04 	ldr.w	r2, [r8], #4
 800e828:	f8d0 e000 	ldr.w	lr, [r0]
 800e82c:	b293      	uxth	r3, r2
 800e82e:	ebac 0303 	sub.w	r3, ip, r3
 800e832:	0c12      	lsrs	r2, r2, #16
 800e834:	fa13 f38e 	uxtah	r3, r3, lr
 800e838:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e83c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e840:	b29b      	uxth	r3, r3
 800e842:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e846:	45c1      	cmp	r9, r8
 800e848:	f840 3b04 	str.w	r3, [r0], #4
 800e84c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e850:	d2e8      	bcs.n	800e824 <quorem+0xb0>
 800e852:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e856:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e85a:	b922      	cbnz	r2, 800e866 <quorem+0xf2>
 800e85c:	3b04      	subs	r3, #4
 800e85e:	429d      	cmp	r5, r3
 800e860:	461a      	mov	r2, r3
 800e862:	d30a      	bcc.n	800e87a <quorem+0x106>
 800e864:	613c      	str	r4, [r7, #16]
 800e866:	4630      	mov	r0, r6
 800e868:	b003      	add	sp, #12
 800e86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e86e:	6812      	ldr	r2, [r2, #0]
 800e870:	3b04      	subs	r3, #4
 800e872:	2a00      	cmp	r2, #0
 800e874:	d1cc      	bne.n	800e810 <quorem+0x9c>
 800e876:	3c01      	subs	r4, #1
 800e878:	e7c7      	b.n	800e80a <quorem+0x96>
 800e87a:	6812      	ldr	r2, [r2, #0]
 800e87c:	3b04      	subs	r3, #4
 800e87e:	2a00      	cmp	r2, #0
 800e880:	d1f0      	bne.n	800e864 <quorem+0xf0>
 800e882:	3c01      	subs	r4, #1
 800e884:	e7eb      	b.n	800e85e <quorem+0xea>
 800e886:	2000      	movs	r0, #0
 800e888:	e7ee      	b.n	800e868 <quorem+0xf4>
 800e88a:	0000      	movs	r0, r0
 800e88c:	0000      	movs	r0, r0
	...

0800e890 <_dtoa_r>:
 800e890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e894:	ed2d 8b04 	vpush	{d8-d9}
 800e898:	ec57 6b10 	vmov	r6, r7, d0
 800e89c:	b093      	sub	sp, #76	; 0x4c
 800e89e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e8a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e8a4:	9106      	str	r1, [sp, #24]
 800e8a6:	ee10 aa10 	vmov	sl, s0
 800e8aa:	4604      	mov	r4, r0
 800e8ac:	9209      	str	r2, [sp, #36]	; 0x24
 800e8ae:	930c      	str	r3, [sp, #48]	; 0x30
 800e8b0:	46bb      	mov	fp, r7
 800e8b2:	b975      	cbnz	r5, 800e8d2 <_dtoa_r+0x42>
 800e8b4:	2010      	movs	r0, #16
 800e8b6:	f000 fddd 	bl	800f474 <malloc>
 800e8ba:	4602      	mov	r2, r0
 800e8bc:	6260      	str	r0, [r4, #36]	; 0x24
 800e8be:	b920      	cbnz	r0, 800e8ca <_dtoa_r+0x3a>
 800e8c0:	4ba7      	ldr	r3, [pc, #668]	; (800eb60 <_dtoa_r+0x2d0>)
 800e8c2:	21ea      	movs	r1, #234	; 0xea
 800e8c4:	48a7      	ldr	r0, [pc, #668]	; (800eb64 <_dtoa_r+0x2d4>)
 800e8c6:	f001 fa67 	bl	800fd98 <__assert_func>
 800e8ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e8ce:	6005      	str	r5, [r0, #0]
 800e8d0:	60c5      	str	r5, [r0, #12]
 800e8d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8d4:	6819      	ldr	r1, [r3, #0]
 800e8d6:	b151      	cbz	r1, 800e8ee <_dtoa_r+0x5e>
 800e8d8:	685a      	ldr	r2, [r3, #4]
 800e8da:	604a      	str	r2, [r1, #4]
 800e8dc:	2301      	movs	r3, #1
 800e8de:	4093      	lsls	r3, r2
 800e8e0:	608b      	str	r3, [r1, #8]
 800e8e2:	4620      	mov	r0, r4
 800e8e4:	f000 fe0e 	bl	800f504 <_Bfree>
 800e8e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	601a      	str	r2, [r3, #0]
 800e8ee:	1e3b      	subs	r3, r7, #0
 800e8f0:	bfaa      	itet	ge
 800e8f2:	2300      	movge	r3, #0
 800e8f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e8f8:	f8c8 3000 	strge.w	r3, [r8]
 800e8fc:	4b9a      	ldr	r3, [pc, #616]	; (800eb68 <_dtoa_r+0x2d8>)
 800e8fe:	bfbc      	itt	lt
 800e900:	2201      	movlt	r2, #1
 800e902:	f8c8 2000 	strlt.w	r2, [r8]
 800e906:	ea33 030b 	bics.w	r3, r3, fp
 800e90a:	d11b      	bne.n	800e944 <_dtoa_r+0xb4>
 800e90c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e90e:	f242 730f 	movw	r3, #9999	; 0x270f
 800e912:	6013      	str	r3, [r2, #0]
 800e914:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e918:	4333      	orrs	r3, r6
 800e91a:	f000 8592 	beq.w	800f442 <_dtoa_r+0xbb2>
 800e91e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e920:	b963      	cbnz	r3, 800e93c <_dtoa_r+0xac>
 800e922:	4b92      	ldr	r3, [pc, #584]	; (800eb6c <_dtoa_r+0x2dc>)
 800e924:	e022      	b.n	800e96c <_dtoa_r+0xdc>
 800e926:	4b92      	ldr	r3, [pc, #584]	; (800eb70 <_dtoa_r+0x2e0>)
 800e928:	9301      	str	r3, [sp, #4]
 800e92a:	3308      	adds	r3, #8
 800e92c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e92e:	6013      	str	r3, [r2, #0]
 800e930:	9801      	ldr	r0, [sp, #4]
 800e932:	b013      	add	sp, #76	; 0x4c
 800e934:	ecbd 8b04 	vpop	{d8-d9}
 800e938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e93c:	4b8b      	ldr	r3, [pc, #556]	; (800eb6c <_dtoa_r+0x2dc>)
 800e93e:	9301      	str	r3, [sp, #4]
 800e940:	3303      	adds	r3, #3
 800e942:	e7f3      	b.n	800e92c <_dtoa_r+0x9c>
 800e944:	2200      	movs	r2, #0
 800e946:	2300      	movs	r3, #0
 800e948:	4650      	mov	r0, sl
 800e94a:	4659      	mov	r1, fp
 800e94c:	f7f2 f8e4 	bl	8000b18 <__aeabi_dcmpeq>
 800e950:	ec4b ab19 	vmov	d9, sl, fp
 800e954:	4680      	mov	r8, r0
 800e956:	b158      	cbz	r0, 800e970 <_dtoa_r+0xe0>
 800e958:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e95a:	2301      	movs	r3, #1
 800e95c:	6013      	str	r3, [r2, #0]
 800e95e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e960:	2b00      	cmp	r3, #0
 800e962:	f000 856b 	beq.w	800f43c <_dtoa_r+0xbac>
 800e966:	4883      	ldr	r0, [pc, #524]	; (800eb74 <_dtoa_r+0x2e4>)
 800e968:	6018      	str	r0, [r3, #0]
 800e96a:	1e43      	subs	r3, r0, #1
 800e96c:	9301      	str	r3, [sp, #4]
 800e96e:	e7df      	b.n	800e930 <_dtoa_r+0xa0>
 800e970:	ec4b ab10 	vmov	d0, sl, fp
 800e974:	aa10      	add	r2, sp, #64	; 0x40
 800e976:	a911      	add	r1, sp, #68	; 0x44
 800e978:	4620      	mov	r0, r4
 800e97a:	f001 f8ab 	bl	800fad4 <__d2b>
 800e97e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e982:	ee08 0a10 	vmov	s16, r0
 800e986:	2d00      	cmp	r5, #0
 800e988:	f000 8084 	beq.w	800ea94 <_dtoa_r+0x204>
 800e98c:	ee19 3a90 	vmov	r3, s19
 800e990:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e994:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e998:	4656      	mov	r6, sl
 800e99a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e99e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e9a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e9a6:	4b74      	ldr	r3, [pc, #464]	; (800eb78 <_dtoa_r+0x2e8>)
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	4630      	mov	r0, r6
 800e9ac:	4639      	mov	r1, r7
 800e9ae:	f7f1 fc93 	bl	80002d8 <__aeabi_dsub>
 800e9b2:	a365      	add	r3, pc, #404	; (adr r3, 800eb48 <_dtoa_r+0x2b8>)
 800e9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b8:	f7f1 fe46 	bl	8000648 <__aeabi_dmul>
 800e9bc:	a364      	add	r3, pc, #400	; (adr r3, 800eb50 <_dtoa_r+0x2c0>)
 800e9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c2:	f7f1 fc8b 	bl	80002dc <__adddf3>
 800e9c6:	4606      	mov	r6, r0
 800e9c8:	4628      	mov	r0, r5
 800e9ca:	460f      	mov	r7, r1
 800e9cc:	f7f1 fdd2 	bl	8000574 <__aeabi_i2d>
 800e9d0:	a361      	add	r3, pc, #388	; (adr r3, 800eb58 <_dtoa_r+0x2c8>)
 800e9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d6:	f7f1 fe37 	bl	8000648 <__aeabi_dmul>
 800e9da:	4602      	mov	r2, r0
 800e9dc:	460b      	mov	r3, r1
 800e9de:	4630      	mov	r0, r6
 800e9e0:	4639      	mov	r1, r7
 800e9e2:	f7f1 fc7b 	bl	80002dc <__adddf3>
 800e9e6:	4606      	mov	r6, r0
 800e9e8:	460f      	mov	r7, r1
 800e9ea:	f7f2 f8dd 	bl	8000ba8 <__aeabi_d2iz>
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	9000      	str	r0, [sp, #0]
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	4630      	mov	r0, r6
 800e9f6:	4639      	mov	r1, r7
 800e9f8:	f7f2 f898 	bl	8000b2c <__aeabi_dcmplt>
 800e9fc:	b150      	cbz	r0, 800ea14 <_dtoa_r+0x184>
 800e9fe:	9800      	ldr	r0, [sp, #0]
 800ea00:	f7f1 fdb8 	bl	8000574 <__aeabi_i2d>
 800ea04:	4632      	mov	r2, r6
 800ea06:	463b      	mov	r3, r7
 800ea08:	f7f2 f886 	bl	8000b18 <__aeabi_dcmpeq>
 800ea0c:	b910      	cbnz	r0, 800ea14 <_dtoa_r+0x184>
 800ea0e:	9b00      	ldr	r3, [sp, #0]
 800ea10:	3b01      	subs	r3, #1
 800ea12:	9300      	str	r3, [sp, #0]
 800ea14:	9b00      	ldr	r3, [sp, #0]
 800ea16:	2b16      	cmp	r3, #22
 800ea18:	d85a      	bhi.n	800ead0 <_dtoa_r+0x240>
 800ea1a:	9a00      	ldr	r2, [sp, #0]
 800ea1c:	4b57      	ldr	r3, [pc, #348]	; (800eb7c <_dtoa_r+0x2ec>)
 800ea1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea26:	ec51 0b19 	vmov	r0, r1, d9
 800ea2a:	f7f2 f87f 	bl	8000b2c <__aeabi_dcmplt>
 800ea2e:	2800      	cmp	r0, #0
 800ea30:	d050      	beq.n	800ead4 <_dtoa_r+0x244>
 800ea32:	9b00      	ldr	r3, [sp, #0]
 800ea34:	3b01      	subs	r3, #1
 800ea36:	9300      	str	r3, [sp, #0]
 800ea38:	2300      	movs	r3, #0
 800ea3a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ea3e:	1b5d      	subs	r5, r3, r5
 800ea40:	1e6b      	subs	r3, r5, #1
 800ea42:	9305      	str	r3, [sp, #20]
 800ea44:	bf45      	ittet	mi
 800ea46:	f1c5 0301 	rsbmi	r3, r5, #1
 800ea4a:	9304      	strmi	r3, [sp, #16]
 800ea4c:	2300      	movpl	r3, #0
 800ea4e:	2300      	movmi	r3, #0
 800ea50:	bf4c      	ite	mi
 800ea52:	9305      	strmi	r3, [sp, #20]
 800ea54:	9304      	strpl	r3, [sp, #16]
 800ea56:	9b00      	ldr	r3, [sp, #0]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	db3d      	blt.n	800ead8 <_dtoa_r+0x248>
 800ea5c:	9b05      	ldr	r3, [sp, #20]
 800ea5e:	9a00      	ldr	r2, [sp, #0]
 800ea60:	920a      	str	r2, [sp, #40]	; 0x28
 800ea62:	4413      	add	r3, r2
 800ea64:	9305      	str	r3, [sp, #20]
 800ea66:	2300      	movs	r3, #0
 800ea68:	9307      	str	r3, [sp, #28]
 800ea6a:	9b06      	ldr	r3, [sp, #24]
 800ea6c:	2b09      	cmp	r3, #9
 800ea6e:	f200 8089 	bhi.w	800eb84 <_dtoa_r+0x2f4>
 800ea72:	2b05      	cmp	r3, #5
 800ea74:	bfc4      	itt	gt
 800ea76:	3b04      	subgt	r3, #4
 800ea78:	9306      	strgt	r3, [sp, #24]
 800ea7a:	9b06      	ldr	r3, [sp, #24]
 800ea7c:	f1a3 0302 	sub.w	r3, r3, #2
 800ea80:	bfcc      	ite	gt
 800ea82:	2500      	movgt	r5, #0
 800ea84:	2501      	movle	r5, #1
 800ea86:	2b03      	cmp	r3, #3
 800ea88:	f200 8087 	bhi.w	800eb9a <_dtoa_r+0x30a>
 800ea8c:	e8df f003 	tbb	[pc, r3]
 800ea90:	59383a2d 	.word	0x59383a2d
 800ea94:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ea98:	441d      	add	r5, r3
 800ea9a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ea9e:	2b20      	cmp	r3, #32
 800eaa0:	bfc1      	itttt	gt
 800eaa2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800eaa6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800eaaa:	fa0b f303 	lslgt.w	r3, fp, r3
 800eaae:	fa26 f000 	lsrgt.w	r0, r6, r0
 800eab2:	bfda      	itte	le
 800eab4:	f1c3 0320 	rsble	r3, r3, #32
 800eab8:	fa06 f003 	lslle.w	r0, r6, r3
 800eabc:	4318      	orrgt	r0, r3
 800eabe:	f7f1 fd49 	bl	8000554 <__aeabi_ui2d>
 800eac2:	2301      	movs	r3, #1
 800eac4:	4606      	mov	r6, r0
 800eac6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800eaca:	3d01      	subs	r5, #1
 800eacc:	930e      	str	r3, [sp, #56]	; 0x38
 800eace:	e76a      	b.n	800e9a6 <_dtoa_r+0x116>
 800ead0:	2301      	movs	r3, #1
 800ead2:	e7b2      	b.n	800ea3a <_dtoa_r+0x1aa>
 800ead4:	900b      	str	r0, [sp, #44]	; 0x2c
 800ead6:	e7b1      	b.n	800ea3c <_dtoa_r+0x1ac>
 800ead8:	9b04      	ldr	r3, [sp, #16]
 800eada:	9a00      	ldr	r2, [sp, #0]
 800eadc:	1a9b      	subs	r3, r3, r2
 800eade:	9304      	str	r3, [sp, #16]
 800eae0:	4253      	negs	r3, r2
 800eae2:	9307      	str	r3, [sp, #28]
 800eae4:	2300      	movs	r3, #0
 800eae6:	930a      	str	r3, [sp, #40]	; 0x28
 800eae8:	e7bf      	b.n	800ea6a <_dtoa_r+0x1da>
 800eaea:	2300      	movs	r3, #0
 800eaec:	9308      	str	r3, [sp, #32]
 800eaee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	dc55      	bgt.n	800eba0 <_dtoa_r+0x310>
 800eaf4:	2301      	movs	r3, #1
 800eaf6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800eafa:	461a      	mov	r2, r3
 800eafc:	9209      	str	r2, [sp, #36]	; 0x24
 800eafe:	e00c      	b.n	800eb1a <_dtoa_r+0x28a>
 800eb00:	2301      	movs	r3, #1
 800eb02:	e7f3      	b.n	800eaec <_dtoa_r+0x25c>
 800eb04:	2300      	movs	r3, #0
 800eb06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb08:	9308      	str	r3, [sp, #32]
 800eb0a:	9b00      	ldr	r3, [sp, #0]
 800eb0c:	4413      	add	r3, r2
 800eb0e:	9302      	str	r3, [sp, #8]
 800eb10:	3301      	adds	r3, #1
 800eb12:	2b01      	cmp	r3, #1
 800eb14:	9303      	str	r3, [sp, #12]
 800eb16:	bfb8      	it	lt
 800eb18:	2301      	movlt	r3, #1
 800eb1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	6042      	str	r2, [r0, #4]
 800eb20:	2204      	movs	r2, #4
 800eb22:	f102 0614 	add.w	r6, r2, #20
 800eb26:	429e      	cmp	r6, r3
 800eb28:	6841      	ldr	r1, [r0, #4]
 800eb2a:	d93d      	bls.n	800eba8 <_dtoa_r+0x318>
 800eb2c:	4620      	mov	r0, r4
 800eb2e:	f000 fca9 	bl	800f484 <_Balloc>
 800eb32:	9001      	str	r0, [sp, #4]
 800eb34:	2800      	cmp	r0, #0
 800eb36:	d13b      	bne.n	800ebb0 <_dtoa_r+0x320>
 800eb38:	4b11      	ldr	r3, [pc, #68]	; (800eb80 <_dtoa_r+0x2f0>)
 800eb3a:	4602      	mov	r2, r0
 800eb3c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800eb40:	e6c0      	b.n	800e8c4 <_dtoa_r+0x34>
 800eb42:	2301      	movs	r3, #1
 800eb44:	e7df      	b.n	800eb06 <_dtoa_r+0x276>
 800eb46:	bf00      	nop
 800eb48:	636f4361 	.word	0x636f4361
 800eb4c:	3fd287a7 	.word	0x3fd287a7
 800eb50:	8b60c8b3 	.word	0x8b60c8b3
 800eb54:	3fc68a28 	.word	0x3fc68a28
 800eb58:	509f79fb 	.word	0x509f79fb
 800eb5c:	3fd34413 	.word	0x3fd34413
 800eb60:	080109c9 	.word	0x080109c9
 800eb64:	080109e0 	.word	0x080109e0
 800eb68:	7ff00000 	.word	0x7ff00000
 800eb6c:	080109c5 	.word	0x080109c5
 800eb70:	080109bc 	.word	0x080109bc
 800eb74:	08010999 	.word	0x08010999
 800eb78:	3ff80000 	.word	0x3ff80000
 800eb7c:	08010ad0 	.word	0x08010ad0
 800eb80:	08010a3b 	.word	0x08010a3b
 800eb84:	2501      	movs	r5, #1
 800eb86:	2300      	movs	r3, #0
 800eb88:	9306      	str	r3, [sp, #24]
 800eb8a:	9508      	str	r5, [sp, #32]
 800eb8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eb90:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800eb94:	2200      	movs	r2, #0
 800eb96:	2312      	movs	r3, #18
 800eb98:	e7b0      	b.n	800eafc <_dtoa_r+0x26c>
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	9308      	str	r3, [sp, #32]
 800eb9e:	e7f5      	b.n	800eb8c <_dtoa_r+0x2fc>
 800eba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eba2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800eba6:	e7b8      	b.n	800eb1a <_dtoa_r+0x28a>
 800eba8:	3101      	adds	r1, #1
 800ebaa:	6041      	str	r1, [r0, #4]
 800ebac:	0052      	lsls	r2, r2, #1
 800ebae:	e7b8      	b.n	800eb22 <_dtoa_r+0x292>
 800ebb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ebb2:	9a01      	ldr	r2, [sp, #4]
 800ebb4:	601a      	str	r2, [r3, #0]
 800ebb6:	9b03      	ldr	r3, [sp, #12]
 800ebb8:	2b0e      	cmp	r3, #14
 800ebba:	f200 809d 	bhi.w	800ecf8 <_dtoa_r+0x468>
 800ebbe:	2d00      	cmp	r5, #0
 800ebc0:	f000 809a 	beq.w	800ecf8 <_dtoa_r+0x468>
 800ebc4:	9b00      	ldr	r3, [sp, #0]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	dd32      	ble.n	800ec30 <_dtoa_r+0x3a0>
 800ebca:	4ab7      	ldr	r2, [pc, #732]	; (800eea8 <_dtoa_r+0x618>)
 800ebcc:	f003 030f 	and.w	r3, r3, #15
 800ebd0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ebd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ebd8:	9b00      	ldr	r3, [sp, #0]
 800ebda:	05d8      	lsls	r0, r3, #23
 800ebdc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ebe0:	d516      	bpl.n	800ec10 <_dtoa_r+0x380>
 800ebe2:	4bb2      	ldr	r3, [pc, #712]	; (800eeac <_dtoa_r+0x61c>)
 800ebe4:	ec51 0b19 	vmov	r0, r1, d9
 800ebe8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ebec:	f7f1 fe56 	bl	800089c <__aeabi_ddiv>
 800ebf0:	f007 070f 	and.w	r7, r7, #15
 800ebf4:	4682      	mov	sl, r0
 800ebf6:	468b      	mov	fp, r1
 800ebf8:	2503      	movs	r5, #3
 800ebfa:	4eac      	ldr	r6, [pc, #688]	; (800eeac <_dtoa_r+0x61c>)
 800ebfc:	b957      	cbnz	r7, 800ec14 <_dtoa_r+0x384>
 800ebfe:	4642      	mov	r2, r8
 800ec00:	464b      	mov	r3, r9
 800ec02:	4650      	mov	r0, sl
 800ec04:	4659      	mov	r1, fp
 800ec06:	f7f1 fe49 	bl	800089c <__aeabi_ddiv>
 800ec0a:	4682      	mov	sl, r0
 800ec0c:	468b      	mov	fp, r1
 800ec0e:	e028      	b.n	800ec62 <_dtoa_r+0x3d2>
 800ec10:	2502      	movs	r5, #2
 800ec12:	e7f2      	b.n	800ebfa <_dtoa_r+0x36a>
 800ec14:	07f9      	lsls	r1, r7, #31
 800ec16:	d508      	bpl.n	800ec2a <_dtoa_r+0x39a>
 800ec18:	4640      	mov	r0, r8
 800ec1a:	4649      	mov	r1, r9
 800ec1c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ec20:	f7f1 fd12 	bl	8000648 <__aeabi_dmul>
 800ec24:	3501      	adds	r5, #1
 800ec26:	4680      	mov	r8, r0
 800ec28:	4689      	mov	r9, r1
 800ec2a:	107f      	asrs	r7, r7, #1
 800ec2c:	3608      	adds	r6, #8
 800ec2e:	e7e5      	b.n	800ebfc <_dtoa_r+0x36c>
 800ec30:	f000 809b 	beq.w	800ed6a <_dtoa_r+0x4da>
 800ec34:	9b00      	ldr	r3, [sp, #0]
 800ec36:	4f9d      	ldr	r7, [pc, #628]	; (800eeac <_dtoa_r+0x61c>)
 800ec38:	425e      	negs	r6, r3
 800ec3a:	4b9b      	ldr	r3, [pc, #620]	; (800eea8 <_dtoa_r+0x618>)
 800ec3c:	f006 020f 	and.w	r2, r6, #15
 800ec40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ec44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec48:	ec51 0b19 	vmov	r0, r1, d9
 800ec4c:	f7f1 fcfc 	bl	8000648 <__aeabi_dmul>
 800ec50:	1136      	asrs	r6, r6, #4
 800ec52:	4682      	mov	sl, r0
 800ec54:	468b      	mov	fp, r1
 800ec56:	2300      	movs	r3, #0
 800ec58:	2502      	movs	r5, #2
 800ec5a:	2e00      	cmp	r6, #0
 800ec5c:	d17a      	bne.n	800ed54 <_dtoa_r+0x4c4>
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d1d3      	bne.n	800ec0a <_dtoa_r+0x37a>
 800ec62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	f000 8082 	beq.w	800ed6e <_dtoa_r+0x4de>
 800ec6a:	4b91      	ldr	r3, [pc, #580]	; (800eeb0 <_dtoa_r+0x620>)
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	4650      	mov	r0, sl
 800ec70:	4659      	mov	r1, fp
 800ec72:	f7f1 ff5b 	bl	8000b2c <__aeabi_dcmplt>
 800ec76:	2800      	cmp	r0, #0
 800ec78:	d079      	beq.n	800ed6e <_dtoa_r+0x4de>
 800ec7a:	9b03      	ldr	r3, [sp, #12]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d076      	beq.n	800ed6e <_dtoa_r+0x4de>
 800ec80:	9b02      	ldr	r3, [sp, #8]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	dd36      	ble.n	800ecf4 <_dtoa_r+0x464>
 800ec86:	9b00      	ldr	r3, [sp, #0]
 800ec88:	4650      	mov	r0, sl
 800ec8a:	4659      	mov	r1, fp
 800ec8c:	1e5f      	subs	r7, r3, #1
 800ec8e:	2200      	movs	r2, #0
 800ec90:	4b88      	ldr	r3, [pc, #544]	; (800eeb4 <_dtoa_r+0x624>)
 800ec92:	f7f1 fcd9 	bl	8000648 <__aeabi_dmul>
 800ec96:	9e02      	ldr	r6, [sp, #8]
 800ec98:	4682      	mov	sl, r0
 800ec9a:	468b      	mov	fp, r1
 800ec9c:	3501      	adds	r5, #1
 800ec9e:	4628      	mov	r0, r5
 800eca0:	f7f1 fc68 	bl	8000574 <__aeabi_i2d>
 800eca4:	4652      	mov	r2, sl
 800eca6:	465b      	mov	r3, fp
 800eca8:	f7f1 fcce 	bl	8000648 <__aeabi_dmul>
 800ecac:	4b82      	ldr	r3, [pc, #520]	; (800eeb8 <_dtoa_r+0x628>)
 800ecae:	2200      	movs	r2, #0
 800ecb0:	f7f1 fb14 	bl	80002dc <__adddf3>
 800ecb4:	46d0      	mov	r8, sl
 800ecb6:	46d9      	mov	r9, fp
 800ecb8:	4682      	mov	sl, r0
 800ecba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ecbe:	2e00      	cmp	r6, #0
 800ecc0:	d158      	bne.n	800ed74 <_dtoa_r+0x4e4>
 800ecc2:	4b7e      	ldr	r3, [pc, #504]	; (800eebc <_dtoa_r+0x62c>)
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	4640      	mov	r0, r8
 800ecc8:	4649      	mov	r1, r9
 800ecca:	f7f1 fb05 	bl	80002d8 <__aeabi_dsub>
 800ecce:	4652      	mov	r2, sl
 800ecd0:	465b      	mov	r3, fp
 800ecd2:	4680      	mov	r8, r0
 800ecd4:	4689      	mov	r9, r1
 800ecd6:	f7f1 ff47 	bl	8000b68 <__aeabi_dcmpgt>
 800ecda:	2800      	cmp	r0, #0
 800ecdc:	f040 8295 	bne.w	800f20a <_dtoa_r+0x97a>
 800ece0:	4652      	mov	r2, sl
 800ece2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ece6:	4640      	mov	r0, r8
 800ece8:	4649      	mov	r1, r9
 800ecea:	f7f1 ff1f 	bl	8000b2c <__aeabi_dcmplt>
 800ecee:	2800      	cmp	r0, #0
 800ecf0:	f040 8289 	bne.w	800f206 <_dtoa_r+0x976>
 800ecf4:	ec5b ab19 	vmov	sl, fp, d9
 800ecf8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	f2c0 8148 	blt.w	800ef90 <_dtoa_r+0x700>
 800ed00:	9a00      	ldr	r2, [sp, #0]
 800ed02:	2a0e      	cmp	r2, #14
 800ed04:	f300 8144 	bgt.w	800ef90 <_dtoa_r+0x700>
 800ed08:	4b67      	ldr	r3, [pc, #412]	; (800eea8 <_dtoa_r+0x618>)
 800ed0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ed0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ed12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	f280 80d5 	bge.w	800eec4 <_dtoa_r+0x634>
 800ed1a:	9b03      	ldr	r3, [sp, #12]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	f300 80d1 	bgt.w	800eec4 <_dtoa_r+0x634>
 800ed22:	f040 826f 	bne.w	800f204 <_dtoa_r+0x974>
 800ed26:	4b65      	ldr	r3, [pc, #404]	; (800eebc <_dtoa_r+0x62c>)
 800ed28:	2200      	movs	r2, #0
 800ed2a:	4640      	mov	r0, r8
 800ed2c:	4649      	mov	r1, r9
 800ed2e:	f7f1 fc8b 	bl	8000648 <__aeabi_dmul>
 800ed32:	4652      	mov	r2, sl
 800ed34:	465b      	mov	r3, fp
 800ed36:	f7f1 ff0d 	bl	8000b54 <__aeabi_dcmpge>
 800ed3a:	9e03      	ldr	r6, [sp, #12]
 800ed3c:	4637      	mov	r7, r6
 800ed3e:	2800      	cmp	r0, #0
 800ed40:	f040 8245 	bne.w	800f1ce <_dtoa_r+0x93e>
 800ed44:	9d01      	ldr	r5, [sp, #4]
 800ed46:	2331      	movs	r3, #49	; 0x31
 800ed48:	f805 3b01 	strb.w	r3, [r5], #1
 800ed4c:	9b00      	ldr	r3, [sp, #0]
 800ed4e:	3301      	adds	r3, #1
 800ed50:	9300      	str	r3, [sp, #0]
 800ed52:	e240      	b.n	800f1d6 <_dtoa_r+0x946>
 800ed54:	07f2      	lsls	r2, r6, #31
 800ed56:	d505      	bpl.n	800ed64 <_dtoa_r+0x4d4>
 800ed58:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed5c:	f7f1 fc74 	bl	8000648 <__aeabi_dmul>
 800ed60:	3501      	adds	r5, #1
 800ed62:	2301      	movs	r3, #1
 800ed64:	1076      	asrs	r6, r6, #1
 800ed66:	3708      	adds	r7, #8
 800ed68:	e777      	b.n	800ec5a <_dtoa_r+0x3ca>
 800ed6a:	2502      	movs	r5, #2
 800ed6c:	e779      	b.n	800ec62 <_dtoa_r+0x3d2>
 800ed6e:	9f00      	ldr	r7, [sp, #0]
 800ed70:	9e03      	ldr	r6, [sp, #12]
 800ed72:	e794      	b.n	800ec9e <_dtoa_r+0x40e>
 800ed74:	9901      	ldr	r1, [sp, #4]
 800ed76:	4b4c      	ldr	r3, [pc, #304]	; (800eea8 <_dtoa_r+0x618>)
 800ed78:	4431      	add	r1, r6
 800ed7a:	910d      	str	r1, [sp, #52]	; 0x34
 800ed7c:	9908      	ldr	r1, [sp, #32]
 800ed7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ed82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ed86:	2900      	cmp	r1, #0
 800ed88:	d043      	beq.n	800ee12 <_dtoa_r+0x582>
 800ed8a:	494d      	ldr	r1, [pc, #308]	; (800eec0 <_dtoa_r+0x630>)
 800ed8c:	2000      	movs	r0, #0
 800ed8e:	f7f1 fd85 	bl	800089c <__aeabi_ddiv>
 800ed92:	4652      	mov	r2, sl
 800ed94:	465b      	mov	r3, fp
 800ed96:	f7f1 fa9f 	bl	80002d8 <__aeabi_dsub>
 800ed9a:	9d01      	ldr	r5, [sp, #4]
 800ed9c:	4682      	mov	sl, r0
 800ed9e:	468b      	mov	fp, r1
 800eda0:	4649      	mov	r1, r9
 800eda2:	4640      	mov	r0, r8
 800eda4:	f7f1 ff00 	bl	8000ba8 <__aeabi_d2iz>
 800eda8:	4606      	mov	r6, r0
 800edaa:	f7f1 fbe3 	bl	8000574 <__aeabi_i2d>
 800edae:	4602      	mov	r2, r0
 800edb0:	460b      	mov	r3, r1
 800edb2:	4640      	mov	r0, r8
 800edb4:	4649      	mov	r1, r9
 800edb6:	f7f1 fa8f 	bl	80002d8 <__aeabi_dsub>
 800edba:	3630      	adds	r6, #48	; 0x30
 800edbc:	f805 6b01 	strb.w	r6, [r5], #1
 800edc0:	4652      	mov	r2, sl
 800edc2:	465b      	mov	r3, fp
 800edc4:	4680      	mov	r8, r0
 800edc6:	4689      	mov	r9, r1
 800edc8:	f7f1 feb0 	bl	8000b2c <__aeabi_dcmplt>
 800edcc:	2800      	cmp	r0, #0
 800edce:	d163      	bne.n	800ee98 <_dtoa_r+0x608>
 800edd0:	4642      	mov	r2, r8
 800edd2:	464b      	mov	r3, r9
 800edd4:	4936      	ldr	r1, [pc, #216]	; (800eeb0 <_dtoa_r+0x620>)
 800edd6:	2000      	movs	r0, #0
 800edd8:	f7f1 fa7e 	bl	80002d8 <__aeabi_dsub>
 800eddc:	4652      	mov	r2, sl
 800edde:	465b      	mov	r3, fp
 800ede0:	f7f1 fea4 	bl	8000b2c <__aeabi_dcmplt>
 800ede4:	2800      	cmp	r0, #0
 800ede6:	f040 80b5 	bne.w	800ef54 <_dtoa_r+0x6c4>
 800edea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800edec:	429d      	cmp	r5, r3
 800edee:	d081      	beq.n	800ecf4 <_dtoa_r+0x464>
 800edf0:	4b30      	ldr	r3, [pc, #192]	; (800eeb4 <_dtoa_r+0x624>)
 800edf2:	2200      	movs	r2, #0
 800edf4:	4650      	mov	r0, sl
 800edf6:	4659      	mov	r1, fp
 800edf8:	f7f1 fc26 	bl	8000648 <__aeabi_dmul>
 800edfc:	4b2d      	ldr	r3, [pc, #180]	; (800eeb4 <_dtoa_r+0x624>)
 800edfe:	4682      	mov	sl, r0
 800ee00:	468b      	mov	fp, r1
 800ee02:	4640      	mov	r0, r8
 800ee04:	4649      	mov	r1, r9
 800ee06:	2200      	movs	r2, #0
 800ee08:	f7f1 fc1e 	bl	8000648 <__aeabi_dmul>
 800ee0c:	4680      	mov	r8, r0
 800ee0e:	4689      	mov	r9, r1
 800ee10:	e7c6      	b.n	800eda0 <_dtoa_r+0x510>
 800ee12:	4650      	mov	r0, sl
 800ee14:	4659      	mov	r1, fp
 800ee16:	f7f1 fc17 	bl	8000648 <__aeabi_dmul>
 800ee1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee1c:	9d01      	ldr	r5, [sp, #4]
 800ee1e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee20:	4682      	mov	sl, r0
 800ee22:	468b      	mov	fp, r1
 800ee24:	4649      	mov	r1, r9
 800ee26:	4640      	mov	r0, r8
 800ee28:	f7f1 febe 	bl	8000ba8 <__aeabi_d2iz>
 800ee2c:	4606      	mov	r6, r0
 800ee2e:	f7f1 fba1 	bl	8000574 <__aeabi_i2d>
 800ee32:	3630      	adds	r6, #48	; 0x30
 800ee34:	4602      	mov	r2, r0
 800ee36:	460b      	mov	r3, r1
 800ee38:	4640      	mov	r0, r8
 800ee3a:	4649      	mov	r1, r9
 800ee3c:	f7f1 fa4c 	bl	80002d8 <__aeabi_dsub>
 800ee40:	f805 6b01 	strb.w	r6, [r5], #1
 800ee44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee46:	429d      	cmp	r5, r3
 800ee48:	4680      	mov	r8, r0
 800ee4a:	4689      	mov	r9, r1
 800ee4c:	f04f 0200 	mov.w	r2, #0
 800ee50:	d124      	bne.n	800ee9c <_dtoa_r+0x60c>
 800ee52:	4b1b      	ldr	r3, [pc, #108]	; (800eec0 <_dtoa_r+0x630>)
 800ee54:	4650      	mov	r0, sl
 800ee56:	4659      	mov	r1, fp
 800ee58:	f7f1 fa40 	bl	80002dc <__adddf3>
 800ee5c:	4602      	mov	r2, r0
 800ee5e:	460b      	mov	r3, r1
 800ee60:	4640      	mov	r0, r8
 800ee62:	4649      	mov	r1, r9
 800ee64:	f7f1 fe80 	bl	8000b68 <__aeabi_dcmpgt>
 800ee68:	2800      	cmp	r0, #0
 800ee6a:	d173      	bne.n	800ef54 <_dtoa_r+0x6c4>
 800ee6c:	4652      	mov	r2, sl
 800ee6e:	465b      	mov	r3, fp
 800ee70:	4913      	ldr	r1, [pc, #76]	; (800eec0 <_dtoa_r+0x630>)
 800ee72:	2000      	movs	r0, #0
 800ee74:	f7f1 fa30 	bl	80002d8 <__aeabi_dsub>
 800ee78:	4602      	mov	r2, r0
 800ee7a:	460b      	mov	r3, r1
 800ee7c:	4640      	mov	r0, r8
 800ee7e:	4649      	mov	r1, r9
 800ee80:	f7f1 fe54 	bl	8000b2c <__aeabi_dcmplt>
 800ee84:	2800      	cmp	r0, #0
 800ee86:	f43f af35 	beq.w	800ecf4 <_dtoa_r+0x464>
 800ee8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ee8c:	1e6b      	subs	r3, r5, #1
 800ee8e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee90:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ee94:	2b30      	cmp	r3, #48	; 0x30
 800ee96:	d0f8      	beq.n	800ee8a <_dtoa_r+0x5fa>
 800ee98:	9700      	str	r7, [sp, #0]
 800ee9a:	e049      	b.n	800ef30 <_dtoa_r+0x6a0>
 800ee9c:	4b05      	ldr	r3, [pc, #20]	; (800eeb4 <_dtoa_r+0x624>)
 800ee9e:	f7f1 fbd3 	bl	8000648 <__aeabi_dmul>
 800eea2:	4680      	mov	r8, r0
 800eea4:	4689      	mov	r9, r1
 800eea6:	e7bd      	b.n	800ee24 <_dtoa_r+0x594>
 800eea8:	08010ad0 	.word	0x08010ad0
 800eeac:	08010aa8 	.word	0x08010aa8
 800eeb0:	3ff00000 	.word	0x3ff00000
 800eeb4:	40240000 	.word	0x40240000
 800eeb8:	401c0000 	.word	0x401c0000
 800eebc:	40140000 	.word	0x40140000
 800eec0:	3fe00000 	.word	0x3fe00000
 800eec4:	9d01      	ldr	r5, [sp, #4]
 800eec6:	4656      	mov	r6, sl
 800eec8:	465f      	mov	r7, fp
 800eeca:	4642      	mov	r2, r8
 800eecc:	464b      	mov	r3, r9
 800eece:	4630      	mov	r0, r6
 800eed0:	4639      	mov	r1, r7
 800eed2:	f7f1 fce3 	bl	800089c <__aeabi_ddiv>
 800eed6:	f7f1 fe67 	bl	8000ba8 <__aeabi_d2iz>
 800eeda:	4682      	mov	sl, r0
 800eedc:	f7f1 fb4a 	bl	8000574 <__aeabi_i2d>
 800eee0:	4642      	mov	r2, r8
 800eee2:	464b      	mov	r3, r9
 800eee4:	f7f1 fbb0 	bl	8000648 <__aeabi_dmul>
 800eee8:	4602      	mov	r2, r0
 800eeea:	460b      	mov	r3, r1
 800eeec:	4630      	mov	r0, r6
 800eeee:	4639      	mov	r1, r7
 800eef0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800eef4:	f7f1 f9f0 	bl	80002d8 <__aeabi_dsub>
 800eef8:	f805 6b01 	strb.w	r6, [r5], #1
 800eefc:	9e01      	ldr	r6, [sp, #4]
 800eefe:	9f03      	ldr	r7, [sp, #12]
 800ef00:	1bae      	subs	r6, r5, r6
 800ef02:	42b7      	cmp	r7, r6
 800ef04:	4602      	mov	r2, r0
 800ef06:	460b      	mov	r3, r1
 800ef08:	d135      	bne.n	800ef76 <_dtoa_r+0x6e6>
 800ef0a:	f7f1 f9e7 	bl	80002dc <__adddf3>
 800ef0e:	4642      	mov	r2, r8
 800ef10:	464b      	mov	r3, r9
 800ef12:	4606      	mov	r6, r0
 800ef14:	460f      	mov	r7, r1
 800ef16:	f7f1 fe27 	bl	8000b68 <__aeabi_dcmpgt>
 800ef1a:	b9d0      	cbnz	r0, 800ef52 <_dtoa_r+0x6c2>
 800ef1c:	4642      	mov	r2, r8
 800ef1e:	464b      	mov	r3, r9
 800ef20:	4630      	mov	r0, r6
 800ef22:	4639      	mov	r1, r7
 800ef24:	f7f1 fdf8 	bl	8000b18 <__aeabi_dcmpeq>
 800ef28:	b110      	cbz	r0, 800ef30 <_dtoa_r+0x6a0>
 800ef2a:	f01a 0f01 	tst.w	sl, #1
 800ef2e:	d110      	bne.n	800ef52 <_dtoa_r+0x6c2>
 800ef30:	4620      	mov	r0, r4
 800ef32:	ee18 1a10 	vmov	r1, s16
 800ef36:	f000 fae5 	bl	800f504 <_Bfree>
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	9800      	ldr	r0, [sp, #0]
 800ef3e:	702b      	strb	r3, [r5, #0]
 800ef40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef42:	3001      	adds	r0, #1
 800ef44:	6018      	str	r0, [r3, #0]
 800ef46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	f43f acf1 	beq.w	800e930 <_dtoa_r+0xa0>
 800ef4e:	601d      	str	r5, [r3, #0]
 800ef50:	e4ee      	b.n	800e930 <_dtoa_r+0xa0>
 800ef52:	9f00      	ldr	r7, [sp, #0]
 800ef54:	462b      	mov	r3, r5
 800ef56:	461d      	mov	r5, r3
 800ef58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ef5c:	2a39      	cmp	r2, #57	; 0x39
 800ef5e:	d106      	bne.n	800ef6e <_dtoa_r+0x6de>
 800ef60:	9a01      	ldr	r2, [sp, #4]
 800ef62:	429a      	cmp	r2, r3
 800ef64:	d1f7      	bne.n	800ef56 <_dtoa_r+0x6c6>
 800ef66:	9901      	ldr	r1, [sp, #4]
 800ef68:	2230      	movs	r2, #48	; 0x30
 800ef6a:	3701      	adds	r7, #1
 800ef6c:	700a      	strb	r2, [r1, #0]
 800ef6e:	781a      	ldrb	r2, [r3, #0]
 800ef70:	3201      	adds	r2, #1
 800ef72:	701a      	strb	r2, [r3, #0]
 800ef74:	e790      	b.n	800ee98 <_dtoa_r+0x608>
 800ef76:	4ba6      	ldr	r3, [pc, #664]	; (800f210 <_dtoa_r+0x980>)
 800ef78:	2200      	movs	r2, #0
 800ef7a:	f7f1 fb65 	bl	8000648 <__aeabi_dmul>
 800ef7e:	2200      	movs	r2, #0
 800ef80:	2300      	movs	r3, #0
 800ef82:	4606      	mov	r6, r0
 800ef84:	460f      	mov	r7, r1
 800ef86:	f7f1 fdc7 	bl	8000b18 <__aeabi_dcmpeq>
 800ef8a:	2800      	cmp	r0, #0
 800ef8c:	d09d      	beq.n	800eeca <_dtoa_r+0x63a>
 800ef8e:	e7cf      	b.n	800ef30 <_dtoa_r+0x6a0>
 800ef90:	9a08      	ldr	r2, [sp, #32]
 800ef92:	2a00      	cmp	r2, #0
 800ef94:	f000 80d7 	beq.w	800f146 <_dtoa_r+0x8b6>
 800ef98:	9a06      	ldr	r2, [sp, #24]
 800ef9a:	2a01      	cmp	r2, #1
 800ef9c:	f300 80ba 	bgt.w	800f114 <_dtoa_r+0x884>
 800efa0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800efa2:	2a00      	cmp	r2, #0
 800efa4:	f000 80b2 	beq.w	800f10c <_dtoa_r+0x87c>
 800efa8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800efac:	9e07      	ldr	r6, [sp, #28]
 800efae:	9d04      	ldr	r5, [sp, #16]
 800efb0:	9a04      	ldr	r2, [sp, #16]
 800efb2:	441a      	add	r2, r3
 800efb4:	9204      	str	r2, [sp, #16]
 800efb6:	9a05      	ldr	r2, [sp, #20]
 800efb8:	2101      	movs	r1, #1
 800efba:	441a      	add	r2, r3
 800efbc:	4620      	mov	r0, r4
 800efbe:	9205      	str	r2, [sp, #20]
 800efc0:	f000 fb58 	bl	800f674 <__i2b>
 800efc4:	4607      	mov	r7, r0
 800efc6:	2d00      	cmp	r5, #0
 800efc8:	dd0c      	ble.n	800efe4 <_dtoa_r+0x754>
 800efca:	9b05      	ldr	r3, [sp, #20]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	dd09      	ble.n	800efe4 <_dtoa_r+0x754>
 800efd0:	42ab      	cmp	r3, r5
 800efd2:	9a04      	ldr	r2, [sp, #16]
 800efd4:	bfa8      	it	ge
 800efd6:	462b      	movge	r3, r5
 800efd8:	1ad2      	subs	r2, r2, r3
 800efda:	9204      	str	r2, [sp, #16]
 800efdc:	9a05      	ldr	r2, [sp, #20]
 800efde:	1aed      	subs	r5, r5, r3
 800efe0:	1ad3      	subs	r3, r2, r3
 800efe2:	9305      	str	r3, [sp, #20]
 800efe4:	9b07      	ldr	r3, [sp, #28]
 800efe6:	b31b      	cbz	r3, 800f030 <_dtoa_r+0x7a0>
 800efe8:	9b08      	ldr	r3, [sp, #32]
 800efea:	2b00      	cmp	r3, #0
 800efec:	f000 80af 	beq.w	800f14e <_dtoa_r+0x8be>
 800eff0:	2e00      	cmp	r6, #0
 800eff2:	dd13      	ble.n	800f01c <_dtoa_r+0x78c>
 800eff4:	4639      	mov	r1, r7
 800eff6:	4632      	mov	r2, r6
 800eff8:	4620      	mov	r0, r4
 800effa:	f000 fbfb 	bl	800f7f4 <__pow5mult>
 800effe:	ee18 2a10 	vmov	r2, s16
 800f002:	4601      	mov	r1, r0
 800f004:	4607      	mov	r7, r0
 800f006:	4620      	mov	r0, r4
 800f008:	f000 fb4a 	bl	800f6a0 <__multiply>
 800f00c:	ee18 1a10 	vmov	r1, s16
 800f010:	4680      	mov	r8, r0
 800f012:	4620      	mov	r0, r4
 800f014:	f000 fa76 	bl	800f504 <_Bfree>
 800f018:	ee08 8a10 	vmov	s16, r8
 800f01c:	9b07      	ldr	r3, [sp, #28]
 800f01e:	1b9a      	subs	r2, r3, r6
 800f020:	d006      	beq.n	800f030 <_dtoa_r+0x7a0>
 800f022:	ee18 1a10 	vmov	r1, s16
 800f026:	4620      	mov	r0, r4
 800f028:	f000 fbe4 	bl	800f7f4 <__pow5mult>
 800f02c:	ee08 0a10 	vmov	s16, r0
 800f030:	2101      	movs	r1, #1
 800f032:	4620      	mov	r0, r4
 800f034:	f000 fb1e 	bl	800f674 <__i2b>
 800f038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	4606      	mov	r6, r0
 800f03e:	f340 8088 	ble.w	800f152 <_dtoa_r+0x8c2>
 800f042:	461a      	mov	r2, r3
 800f044:	4601      	mov	r1, r0
 800f046:	4620      	mov	r0, r4
 800f048:	f000 fbd4 	bl	800f7f4 <__pow5mult>
 800f04c:	9b06      	ldr	r3, [sp, #24]
 800f04e:	2b01      	cmp	r3, #1
 800f050:	4606      	mov	r6, r0
 800f052:	f340 8081 	ble.w	800f158 <_dtoa_r+0x8c8>
 800f056:	f04f 0800 	mov.w	r8, #0
 800f05a:	6933      	ldr	r3, [r6, #16]
 800f05c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f060:	6918      	ldr	r0, [r3, #16]
 800f062:	f000 fab7 	bl	800f5d4 <__hi0bits>
 800f066:	f1c0 0020 	rsb	r0, r0, #32
 800f06a:	9b05      	ldr	r3, [sp, #20]
 800f06c:	4418      	add	r0, r3
 800f06e:	f010 001f 	ands.w	r0, r0, #31
 800f072:	f000 8092 	beq.w	800f19a <_dtoa_r+0x90a>
 800f076:	f1c0 0320 	rsb	r3, r0, #32
 800f07a:	2b04      	cmp	r3, #4
 800f07c:	f340 808a 	ble.w	800f194 <_dtoa_r+0x904>
 800f080:	f1c0 001c 	rsb	r0, r0, #28
 800f084:	9b04      	ldr	r3, [sp, #16]
 800f086:	4403      	add	r3, r0
 800f088:	9304      	str	r3, [sp, #16]
 800f08a:	9b05      	ldr	r3, [sp, #20]
 800f08c:	4403      	add	r3, r0
 800f08e:	4405      	add	r5, r0
 800f090:	9305      	str	r3, [sp, #20]
 800f092:	9b04      	ldr	r3, [sp, #16]
 800f094:	2b00      	cmp	r3, #0
 800f096:	dd07      	ble.n	800f0a8 <_dtoa_r+0x818>
 800f098:	ee18 1a10 	vmov	r1, s16
 800f09c:	461a      	mov	r2, r3
 800f09e:	4620      	mov	r0, r4
 800f0a0:	f000 fc02 	bl	800f8a8 <__lshift>
 800f0a4:	ee08 0a10 	vmov	s16, r0
 800f0a8:	9b05      	ldr	r3, [sp, #20]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	dd05      	ble.n	800f0ba <_dtoa_r+0x82a>
 800f0ae:	4631      	mov	r1, r6
 800f0b0:	461a      	mov	r2, r3
 800f0b2:	4620      	mov	r0, r4
 800f0b4:	f000 fbf8 	bl	800f8a8 <__lshift>
 800f0b8:	4606      	mov	r6, r0
 800f0ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d06e      	beq.n	800f19e <_dtoa_r+0x90e>
 800f0c0:	ee18 0a10 	vmov	r0, s16
 800f0c4:	4631      	mov	r1, r6
 800f0c6:	f000 fc5f 	bl	800f988 <__mcmp>
 800f0ca:	2800      	cmp	r0, #0
 800f0cc:	da67      	bge.n	800f19e <_dtoa_r+0x90e>
 800f0ce:	9b00      	ldr	r3, [sp, #0]
 800f0d0:	3b01      	subs	r3, #1
 800f0d2:	ee18 1a10 	vmov	r1, s16
 800f0d6:	9300      	str	r3, [sp, #0]
 800f0d8:	220a      	movs	r2, #10
 800f0da:	2300      	movs	r3, #0
 800f0dc:	4620      	mov	r0, r4
 800f0de:	f000 fa33 	bl	800f548 <__multadd>
 800f0e2:	9b08      	ldr	r3, [sp, #32]
 800f0e4:	ee08 0a10 	vmov	s16, r0
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	f000 81b1 	beq.w	800f450 <_dtoa_r+0xbc0>
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	4639      	mov	r1, r7
 800f0f2:	220a      	movs	r2, #10
 800f0f4:	4620      	mov	r0, r4
 800f0f6:	f000 fa27 	bl	800f548 <__multadd>
 800f0fa:	9b02      	ldr	r3, [sp, #8]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	4607      	mov	r7, r0
 800f100:	f300 808e 	bgt.w	800f220 <_dtoa_r+0x990>
 800f104:	9b06      	ldr	r3, [sp, #24]
 800f106:	2b02      	cmp	r3, #2
 800f108:	dc51      	bgt.n	800f1ae <_dtoa_r+0x91e>
 800f10a:	e089      	b.n	800f220 <_dtoa_r+0x990>
 800f10c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f10e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f112:	e74b      	b.n	800efac <_dtoa_r+0x71c>
 800f114:	9b03      	ldr	r3, [sp, #12]
 800f116:	1e5e      	subs	r6, r3, #1
 800f118:	9b07      	ldr	r3, [sp, #28]
 800f11a:	42b3      	cmp	r3, r6
 800f11c:	bfbf      	itttt	lt
 800f11e:	9b07      	ldrlt	r3, [sp, #28]
 800f120:	9607      	strlt	r6, [sp, #28]
 800f122:	1af2      	sublt	r2, r6, r3
 800f124:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f126:	bfb6      	itet	lt
 800f128:	189b      	addlt	r3, r3, r2
 800f12a:	1b9e      	subge	r6, r3, r6
 800f12c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f12e:	9b03      	ldr	r3, [sp, #12]
 800f130:	bfb8      	it	lt
 800f132:	2600      	movlt	r6, #0
 800f134:	2b00      	cmp	r3, #0
 800f136:	bfb7      	itett	lt
 800f138:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f13c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f140:	1a9d      	sublt	r5, r3, r2
 800f142:	2300      	movlt	r3, #0
 800f144:	e734      	b.n	800efb0 <_dtoa_r+0x720>
 800f146:	9e07      	ldr	r6, [sp, #28]
 800f148:	9d04      	ldr	r5, [sp, #16]
 800f14a:	9f08      	ldr	r7, [sp, #32]
 800f14c:	e73b      	b.n	800efc6 <_dtoa_r+0x736>
 800f14e:	9a07      	ldr	r2, [sp, #28]
 800f150:	e767      	b.n	800f022 <_dtoa_r+0x792>
 800f152:	9b06      	ldr	r3, [sp, #24]
 800f154:	2b01      	cmp	r3, #1
 800f156:	dc18      	bgt.n	800f18a <_dtoa_r+0x8fa>
 800f158:	f1ba 0f00 	cmp.w	sl, #0
 800f15c:	d115      	bne.n	800f18a <_dtoa_r+0x8fa>
 800f15e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f162:	b993      	cbnz	r3, 800f18a <_dtoa_r+0x8fa>
 800f164:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f168:	0d1b      	lsrs	r3, r3, #20
 800f16a:	051b      	lsls	r3, r3, #20
 800f16c:	b183      	cbz	r3, 800f190 <_dtoa_r+0x900>
 800f16e:	9b04      	ldr	r3, [sp, #16]
 800f170:	3301      	adds	r3, #1
 800f172:	9304      	str	r3, [sp, #16]
 800f174:	9b05      	ldr	r3, [sp, #20]
 800f176:	3301      	adds	r3, #1
 800f178:	9305      	str	r3, [sp, #20]
 800f17a:	f04f 0801 	mov.w	r8, #1
 800f17e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f180:	2b00      	cmp	r3, #0
 800f182:	f47f af6a 	bne.w	800f05a <_dtoa_r+0x7ca>
 800f186:	2001      	movs	r0, #1
 800f188:	e76f      	b.n	800f06a <_dtoa_r+0x7da>
 800f18a:	f04f 0800 	mov.w	r8, #0
 800f18e:	e7f6      	b.n	800f17e <_dtoa_r+0x8ee>
 800f190:	4698      	mov	r8, r3
 800f192:	e7f4      	b.n	800f17e <_dtoa_r+0x8ee>
 800f194:	f43f af7d 	beq.w	800f092 <_dtoa_r+0x802>
 800f198:	4618      	mov	r0, r3
 800f19a:	301c      	adds	r0, #28
 800f19c:	e772      	b.n	800f084 <_dtoa_r+0x7f4>
 800f19e:	9b03      	ldr	r3, [sp, #12]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	dc37      	bgt.n	800f214 <_dtoa_r+0x984>
 800f1a4:	9b06      	ldr	r3, [sp, #24]
 800f1a6:	2b02      	cmp	r3, #2
 800f1a8:	dd34      	ble.n	800f214 <_dtoa_r+0x984>
 800f1aa:	9b03      	ldr	r3, [sp, #12]
 800f1ac:	9302      	str	r3, [sp, #8]
 800f1ae:	9b02      	ldr	r3, [sp, #8]
 800f1b0:	b96b      	cbnz	r3, 800f1ce <_dtoa_r+0x93e>
 800f1b2:	4631      	mov	r1, r6
 800f1b4:	2205      	movs	r2, #5
 800f1b6:	4620      	mov	r0, r4
 800f1b8:	f000 f9c6 	bl	800f548 <__multadd>
 800f1bc:	4601      	mov	r1, r0
 800f1be:	4606      	mov	r6, r0
 800f1c0:	ee18 0a10 	vmov	r0, s16
 800f1c4:	f000 fbe0 	bl	800f988 <__mcmp>
 800f1c8:	2800      	cmp	r0, #0
 800f1ca:	f73f adbb 	bgt.w	800ed44 <_dtoa_r+0x4b4>
 800f1ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1d0:	9d01      	ldr	r5, [sp, #4]
 800f1d2:	43db      	mvns	r3, r3
 800f1d4:	9300      	str	r3, [sp, #0]
 800f1d6:	f04f 0800 	mov.w	r8, #0
 800f1da:	4631      	mov	r1, r6
 800f1dc:	4620      	mov	r0, r4
 800f1de:	f000 f991 	bl	800f504 <_Bfree>
 800f1e2:	2f00      	cmp	r7, #0
 800f1e4:	f43f aea4 	beq.w	800ef30 <_dtoa_r+0x6a0>
 800f1e8:	f1b8 0f00 	cmp.w	r8, #0
 800f1ec:	d005      	beq.n	800f1fa <_dtoa_r+0x96a>
 800f1ee:	45b8      	cmp	r8, r7
 800f1f0:	d003      	beq.n	800f1fa <_dtoa_r+0x96a>
 800f1f2:	4641      	mov	r1, r8
 800f1f4:	4620      	mov	r0, r4
 800f1f6:	f000 f985 	bl	800f504 <_Bfree>
 800f1fa:	4639      	mov	r1, r7
 800f1fc:	4620      	mov	r0, r4
 800f1fe:	f000 f981 	bl	800f504 <_Bfree>
 800f202:	e695      	b.n	800ef30 <_dtoa_r+0x6a0>
 800f204:	2600      	movs	r6, #0
 800f206:	4637      	mov	r7, r6
 800f208:	e7e1      	b.n	800f1ce <_dtoa_r+0x93e>
 800f20a:	9700      	str	r7, [sp, #0]
 800f20c:	4637      	mov	r7, r6
 800f20e:	e599      	b.n	800ed44 <_dtoa_r+0x4b4>
 800f210:	40240000 	.word	0x40240000
 800f214:	9b08      	ldr	r3, [sp, #32]
 800f216:	2b00      	cmp	r3, #0
 800f218:	f000 80ca 	beq.w	800f3b0 <_dtoa_r+0xb20>
 800f21c:	9b03      	ldr	r3, [sp, #12]
 800f21e:	9302      	str	r3, [sp, #8]
 800f220:	2d00      	cmp	r5, #0
 800f222:	dd05      	ble.n	800f230 <_dtoa_r+0x9a0>
 800f224:	4639      	mov	r1, r7
 800f226:	462a      	mov	r2, r5
 800f228:	4620      	mov	r0, r4
 800f22a:	f000 fb3d 	bl	800f8a8 <__lshift>
 800f22e:	4607      	mov	r7, r0
 800f230:	f1b8 0f00 	cmp.w	r8, #0
 800f234:	d05b      	beq.n	800f2ee <_dtoa_r+0xa5e>
 800f236:	6879      	ldr	r1, [r7, #4]
 800f238:	4620      	mov	r0, r4
 800f23a:	f000 f923 	bl	800f484 <_Balloc>
 800f23e:	4605      	mov	r5, r0
 800f240:	b928      	cbnz	r0, 800f24e <_dtoa_r+0x9be>
 800f242:	4b87      	ldr	r3, [pc, #540]	; (800f460 <_dtoa_r+0xbd0>)
 800f244:	4602      	mov	r2, r0
 800f246:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f24a:	f7ff bb3b 	b.w	800e8c4 <_dtoa_r+0x34>
 800f24e:	693a      	ldr	r2, [r7, #16]
 800f250:	3202      	adds	r2, #2
 800f252:	0092      	lsls	r2, r2, #2
 800f254:	f107 010c 	add.w	r1, r7, #12
 800f258:	300c      	adds	r0, #12
 800f25a:	f7fe fe0b 	bl	800de74 <memcpy>
 800f25e:	2201      	movs	r2, #1
 800f260:	4629      	mov	r1, r5
 800f262:	4620      	mov	r0, r4
 800f264:	f000 fb20 	bl	800f8a8 <__lshift>
 800f268:	9b01      	ldr	r3, [sp, #4]
 800f26a:	f103 0901 	add.w	r9, r3, #1
 800f26e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f272:	4413      	add	r3, r2
 800f274:	9305      	str	r3, [sp, #20]
 800f276:	f00a 0301 	and.w	r3, sl, #1
 800f27a:	46b8      	mov	r8, r7
 800f27c:	9304      	str	r3, [sp, #16]
 800f27e:	4607      	mov	r7, r0
 800f280:	4631      	mov	r1, r6
 800f282:	ee18 0a10 	vmov	r0, s16
 800f286:	f7ff fa75 	bl	800e774 <quorem>
 800f28a:	4641      	mov	r1, r8
 800f28c:	9002      	str	r0, [sp, #8]
 800f28e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f292:	ee18 0a10 	vmov	r0, s16
 800f296:	f000 fb77 	bl	800f988 <__mcmp>
 800f29a:	463a      	mov	r2, r7
 800f29c:	9003      	str	r0, [sp, #12]
 800f29e:	4631      	mov	r1, r6
 800f2a0:	4620      	mov	r0, r4
 800f2a2:	f000 fb8d 	bl	800f9c0 <__mdiff>
 800f2a6:	68c2      	ldr	r2, [r0, #12]
 800f2a8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800f2ac:	4605      	mov	r5, r0
 800f2ae:	bb02      	cbnz	r2, 800f2f2 <_dtoa_r+0xa62>
 800f2b0:	4601      	mov	r1, r0
 800f2b2:	ee18 0a10 	vmov	r0, s16
 800f2b6:	f000 fb67 	bl	800f988 <__mcmp>
 800f2ba:	4602      	mov	r2, r0
 800f2bc:	4629      	mov	r1, r5
 800f2be:	4620      	mov	r0, r4
 800f2c0:	9207      	str	r2, [sp, #28]
 800f2c2:	f000 f91f 	bl	800f504 <_Bfree>
 800f2c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f2ca:	ea43 0102 	orr.w	r1, r3, r2
 800f2ce:	9b04      	ldr	r3, [sp, #16]
 800f2d0:	430b      	orrs	r3, r1
 800f2d2:	464d      	mov	r5, r9
 800f2d4:	d10f      	bne.n	800f2f6 <_dtoa_r+0xa66>
 800f2d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f2da:	d02a      	beq.n	800f332 <_dtoa_r+0xaa2>
 800f2dc:	9b03      	ldr	r3, [sp, #12]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	dd02      	ble.n	800f2e8 <_dtoa_r+0xa58>
 800f2e2:	9b02      	ldr	r3, [sp, #8]
 800f2e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f2e8:	f88b a000 	strb.w	sl, [fp]
 800f2ec:	e775      	b.n	800f1da <_dtoa_r+0x94a>
 800f2ee:	4638      	mov	r0, r7
 800f2f0:	e7ba      	b.n	800f268 <_dtoa_r+0x9d8>
 800f2f2:	2201      	movs	r2, #1
 800f2f4:	e7e2      	b.n	800f2bc <_dtoa_r+0xa2c>
 800f2f6:	9b03      	ldr	r3, [sp, #12]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	db04      	blt.n	800f306 <_dtoa_r+0xa76>
 800f2fc:	9906      	ldr	r1, [sp, #24]
 800f2fe:	430b      	orrs	r3, r1
 800f300:	9904      	ldr	r1, [sp, #16]
 800f302:	430b      	orrs	r3, r1
 800f304:	d122      	bne.n	800f34c <_dtoa_r+0xabc>
 800f306:	2a00      	cmp	r2, #0
 800f308:	ddee      	ble.n	800f2e8 <_dtoa_r+0xa58>
 800f30a:	ee18 1a10 	vmov	r1, s16
 800f30e:	2201      	movs	r2, #1
 800f310:	4620      	mov	r0, r4
 800f312:	f000 fac9 	bl	800f8a8 <__lshift>
 800f316:	4631      	mov	r1, r6
 800f318:	ee08 0a10 	vmov	s16, r0
 800f31c:	f000 fb34 	bl	800f988 <__mcmp>
 800f320:	2800      	cmp	r0, #0
 800f322:	dc03      	bgt.n	800f32c <_dtoa_r+0xa9c>
 800f324:	d1e0      	bne.n	800f2e8 <_dtoa_r+0xa58>
 800f326:	f01a 0f01 	tst.w	sl, #1
 800f32a:	d0dd      	beq.n	800f2e8 <_dtoa_r+0xa58>
 800f32c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f330:	d1d7      	bne.n	800f2e2 <_dtoa_r+0xa52>
 800f332:	2339      	movs	r3, #57	; 0x39
 800f334:	f88b 3000 	strb.w	r3, [fp]
 800f338:	462b      	mov	r3, r5
 800f33a:	461d      	mov	r5, r3
 800f33c:	3b01      	subs	r3, #1
 800f33e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f342:	2a39      	cmp	r2, #57	; 0x39
 800f344:	d071      	beq.n	800f42a <_dtoa_r+0xb9a>
 800f346:	3201      	adds	r2, #1
 800f348:	701a      	strb	r2, [r3, #0]
 800f34a:	e746      	b.n	800f1da <_dtoa_r+0x94a>
 800f34c:	2a00      	cmp	r2, #0
 800f34e:	dd07      	ble.n	800f360 <_dtoa_r+0xad0>
 800f350:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f354:	d0ed      	beq.n	800f332 <_dtoa_r+0xaa2>
 800f356:	f10a 0301 	add.w	r3, sl, #1
 800f35a:	f88b 3000 	strb.w	r3, [fp]
 800f35e:	e73c      	b.n	800f1da <_dtoa_r+0x94a>
 800f360:	9b05      	ldr	r3, [sp, #20]
 800f362:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f366:	4599      	cmp	r9, r3
 800f368:	d047      	beq.n	800f3fa <_dtoa_r+0xb6a>
 800f36a:	ee18 1a10 	vmov	r1, s16
 800f36e:	2300      	movs	r3, #0
 800f370:	220a      	movs	r2, #10
 800f372:	4620      	mov	r0, r4
 800f374:	f000 f8e8 	bl	800f548 <__multadd>
 800f378:	45b8      	cmp	r8, r7
 800f37a:	ee08 0a10 	vmov	s16, r0
 800f37e:	f04f 0300 	mov.w	r3, #0
 800f382:	f04f 020a 	mov.w	r2, #10
 800f386:	4641      	mov	r1, r8
 800f388:	4620      	mov	r0, r4
 800f38a:	d106      	bne.n	800f39a <_dtoa_r+0xb0a>
 800f38c:	f000 f8dc 	bl	800f548 <__multadd>
 800f390:	4680      	mov	r8, r0
 800f392:	4607      	mov	r7, r0
 800f394:	f109 0901 	add.w	r9, r9, #1
 800f398:	e772      	b.n	800f280 <_dtoa_r+0x9f0>
 800f39a:	f000 f8d5 	bl	800f548 <__multadd>
 800f39e:	4639      	mov	r1, r7
 800f3a0:	4680      	mov	r8, r0
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	220a      	movs	r2, #10
 800f3a6:	4620      	mov	r0, r4
 800f3a8:	f000 f8ce 	bl	800f548 <__multadd>
 800f3ac:	4607      	mov	r7, r0
 800f3ae:	e7f1      	b.n	800f394 <_dtoa_r+0xb04>
 800f3b0:	9b03      	ldr	r3, [sp, #12]
 800f3b2:	9302      	str	r3, [sp, #8]
 800f3b4:	9d01      	ldr	r5, [sp, #4]
 800f3b6:	ee18 0a10 	vmov	r0, s16
 800f3ba:	4631      	mov	r1, r6
 800f3bc:	f7ff f9da 	bl	800e774 <quorem>
 800f3c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f3c4:	9b01      	ldr	r3, [sp, #4]
 800f3c6:	f805 ab01 	strb.w	sl, [r5], #1
 800f3ca:	1aea      	subs	r2, r5, r3
 800f3cc:	9b02      	ldr	r3, [sp, #8]
 800f3ce:	4293      	cmp	r3, r2
 800f3d0:	dd09      	ble.n	800f3e6 <_dtoa_r+0xb56>
 800f3d2:	ee18 1a10 	vmov	r1, s16
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	220a      	movs	r2, #10
 800f3da:	4620      	mov	r0, r4
 800f3dc:	f000 f8b4 	bl	800f548 <__multadd>
 800f3e0:	ee08 0a10 	vmov	s16, r0
 800f3e4:	e7e7      	b.n	800f3b6 <_dtoa_r+0xb26>
 800f3e6:	9b02      	ldr	r3, [sp, #8]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	bfc8      	it	gt
 800f3ec:	461d      	movgt	r5, r3
 800f3ee:	9b01      	ldr	r3, [sp, #4]
 800f3f0:	bfd8      	it	le
 800f3f2:	2501      	movle	r5, #1
 800f3f4:	441d      	add	r5, r3
 800f3f6:	f04f 0800 	mov.w	r8, #0
 800f3fa:	ee18 1a10 	vmov	r1, s16
 800f3fe:	2201      	movs	r2, #1
 800f400:	4620      	mov	r0, r4
 800f402:	f000 fa51 	bl	800f8a8 <__lshift>
 800f406:	4631      	mov	r1, r6
 800f408:	ee08 0a10 	vmov	s16, r0
 800f40c:	f000 fabc 	bl	800f988 <__mcmp>
 800f410:	2800      	cmp	r0, #0
 800f412:	dc91      	bgt.n	800f338 <_dtoa_r+0xaa8>
 800f414:	d102      	bne.n	800f41c <_dtoa_r+0xb8c>
 800f416:	f01a 0f01 	tst.w	sl, #1
 800f41a:	d18d      	bne.n	800f338 <_dtoa_r+0xaa8>
 800f41c:	462b      	mov	r3, r5
 800f41e:	461d      	mov	r5, r3
 800f420:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f424:	2a30      	cmp	r2, #48	; 0x30
 800f426:	d0fa      	beq.n	800f41e <_dtoa_r+0xb8e>
 800f428:	e6d7      	b.n	800f1da <_dtoa_r+0x94a>
 800f42a:	9a01      	ldr	r2, [sp, #4]
 800f42c:	429a      	cmp	r2, r3
 800f42e:	d184      	bne.n	800f33a <_dtoa_r+0xaaa>
 800f430:	9b00      	ldr	r3, [sp, #0]
 800f432:	3301      	adds	r3, #1
 800f434:	9300      	str	r3, [sp, #0]
 800f436:	2331      	movs	r3, #49	; 0x31
 800f438:	7013      	strb	r3, [r2, #0]
 800f43a:	e6ce      	b.n	800f1da <_dtoa_r+0x94a>
 800f43c:	4b09      	ldr	r3, [pc, #36]	; (800f464 <_dtoa_r+0xbd4>)
 800f43e:	f7ff ba95 	b.w	800e96c <_dtoa_r+0xdc>
 800f442:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f444:	2b00      	cmp	r3, #0
 800f446:	f47f aa6e 	bne.w	800e926 <_dtoa_r+0x96>
 800f44a:	4b07      	ldr	r3, [pc, #28]	; (800f468 <_dtoa_r+0xbd8>)
 800f44c:	f7ff ba8e 	b.w	800e96c <_dtoa_r+0xdc>
 800f450:	9b02      	ldr	r3, [sp, #8]
 800f452:	2b00      	cmp	r3, #0
 800f454:	dcae      	bgt.n	800f3b4 <_dtoa_r+0xb24>
 800f456:	9b06      	ldr	r3, [sp, #24]
 800f458:	2b02      	cmp	r3, #2
 800f45a:	f73f aea8 	bgt.w	800f1ae <_dtoa_r+0x91e>
 800f45e:	e7a9      	b.n	800f3b4 <_dtoa_r+0xb24>
 800f460:	08010a3b 	.word	0x08010a3b
 800f464:	08010998 	.word	0x08010998
 800f468:	080109bc 	.word	0x080109bc

0800f46c <_localeconv_r>:
 800f46c:	4800      	ldr	r0, [pc, #0]	; (800f470 <_localeconv_r+0x4>)
 800f46e:	4770      	bx	lr
 800f470:	200029ac 	.word	0x200029ac

0800f474 <malloc>:
 800f474:	4b02      	ldr	r3, [pc, #8]	; (800f480 <malloc+0xc>)
 800f476:	4601      	mov	r1, r0
 800f478:	6818      	ldr	r0, [r3, #0]
 800f47a:	f000 bc09 	b.w	800fc90 <_malloc_r>
 800f47e:	bf00      	nop
 800f480:	20002858 	.word	0x20002858

0800f484 <_Balloc>:
 800f484:	b570      	push	{r4, r5, r6, lr}
 800f486:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f488:	4604      	mov	r4, r0
 800f48a:	460d      	mov	r5, r1
 800f48c:	b976      	cbnz	r6, 800f4ac <_Balloc+0x28>
 800f48e:	2010      	movs	r0, #16
 800f490:	f7ff fff0 	bl	800f474 <malloc>
 800f494:	4602      	mov	r2, r0
 800f496:	6260      	str	r0, [r4, #36]	; 0x24
 800f498:	b920      	cbnz	r0, 800f4a4 <_Balloc+0x20>
 800f49a:	4b18      	ldr	r3, [pc, #96]	; (800f4fc <_Balloc+0x78>)
 800f49c:	4818      	ldr	r0, [pc, #96]	; (800f500 <_Balloc+0x7c>)
 800f49e:	2166      	movs	r1, #102	; 0x66
 800f4a0:	f000 fc7a 	bl	800fd98 <__assert_func>
 800f4a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f4a8:	6006      	str	r6, [r0, #0]
 800f4aa:	60c6      	str	r6, [r0, #12]
 800f4ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f4ae:	68f3      	ldr	r3, [r6, #12]
 800f4b0:	b183      	cbz	r3, 800f4d4 <_Balloc+0x50>
 800f4b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4b4:	68db      	ldr	r3, [r3, #12]
 800f4b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f4ba:	b9b8      	cbnz	r0, 800f4ec <_Balloc+0x68>
 800f4bc:	2101      	movs	r1, #1
 800f4be:	fa01 f605 	lsl.w	r6, r1, r5
 800f4c2:	1d72      	adds	r2, r6, #5
 800f4c4:	0092      	lsls	r2, r2, #2
 800f4c6:	4620      	mov	r0, r4
 800f4c8:	f000 fb60 	bl	800fb8c <_calloc_r>
 800f4cc:	b160      	cbz	r0, 800f4e8 <_Balloc+0x64>
 800f4ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f4d2:	e00e      	b.n	800f4f2 <_Balloc+0x6e>
 800f4d4:	2221      	movs	r2, #33	; 0x21
 800f4d6:	2104      	movs	r1, #4
 800f4d8:	4620      	mov	r0, r4
 800f4da:	f000 fb57 	bl	800fb8c <_calloc_r>
 800f4de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4e0:	60f0      	str	r0, [r6, #12]
 800f4e2:	68db      	ldr	r3, [r3, #12]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d1e4      	bne.n	800f4b2 <_Balloc+0x2e>
 800f4e8:	2000      	movs	r0, #0
 800f4ea:	bd70      	pop	{r4, r5, r6, pc}
 800f4ec:	6802      	ldr	r2, [r0, #0]
 800f4ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f4f8:	e7f7      	b.n	800f4ea <_Balloc+0x66>
 800f4fa:	bf00      	nop
 800f4fc:	080109c9 	.word	0x080109c9
 800f500:	08010a4c 	.word	0x08010a4c

0800f504 <_Bfree>:
 800f504:	b570      	push	{r4, r5, r6, lr}
 800f506:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f508:	4605      	mov	r5, r0
 800f50a:	460c      	mov	r4, r1
 800f50c:	b976      	cbnz	r6, 800f52c <_Bfree+0x28>
 800f50e:	2010      	movs	r0, #16
 800f510:	f7ff ffb0 	bl	800f474 <malloc>
 800f514:	4602      	mov	r2, r0
 800f516:	6268      	str	r0, [r5, #36]	; 0x24
 800f518:	b920      	cbnz	r0, 800f524 <_Bfree+0x20>
 800f51a:	4b09      	ldr	r3, [pc, #36]	; (800f540 <_Bfree+0x3c>)
 800f51c:	4809      	ldr	r0, [pc, #36]	; (800f544 <_Bfree+0x40>)
 800f51e:	218a      	movs	r1, #138	; 0x8a
 800f520:	f000 fc3a 	bl	800fd98 <__assert_func>
 800f524:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f528:	6006      	str	r6, [r0, #0]
 800f52a:	60c6      	str	r6, [r0, #12]
 800f52c:	b13c      	cbz	r4, 800f53e <_Bfree+0x3a>
 800f52e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f530:	6862      	ldr	r2, [r4, #4]
 800f532:	68db      	ldr	r3, [r3, #12]
 800f534:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f538:	6021      	str	r1, [r4, #0]
 800f53a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f53e:	bd70      	pop	{r4, r5, r6, pc}
 800f540:	080109c9 	.word	0x080109c9
 800f544:	08010a4c 	.word	0x08010a4c

0800f548 <__multadd>:
 800f548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f54c:	690d      	ldr	r5, [r1, #16]
 800f54e:	4607      	mov	r7, r0
 800f550:	460c      	mov	r4, r1
 800f552:	461e      	mov	r6, r3
 800f554:	f101 0c14 	add.w	ip, r1, #20
 800f558:	2000      	movs	r0, #0
 800f55a:	f8dc 3000 	ldr.w	r3, [ip]
 800f55e:	b299      	uxth	r1, r3
 800f560:	fb02 6101 	mla	r1, r2, r1, r6
 800f564:	0c1e      	lsrs	r6, r3, #16
 800f566:	0c0b      	lsrs	r3, r1, #16
 800f568:	fb02 3306 	mla	r3, r2, r6, r3
 800f56c:	b289      	uxth	r1, r1
 800f56e:	3001      	adds	r0, #1
 800f570:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f574:	4285      	cmp	r5, r0
 800f576:	f84c 1b04 	str.w	r1, [ip], #4
 800f57a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f57e:	dcec      	bgt.n	800f55a <__multadd+0x12>
 800f580:	b30e      	cbz	r6, 800f5c6 <__multadd+0x7e>
 800f582:	68a3      	ldr	r3, [r4, #8]
 800f584:	42ab      	cmp	r3, r5
 800f586:	dc19      	bgt.n	800f5bc <__multadd+0x74>
 800f588:	6861      	ldr	r1, [r4, #4]
 800f58a:	4638      	mov	r0, r7
 800f58c:	3101      	adds	r1, #1
 800f58e:	f7ff ff79 	bl	800f484 <_Balloc>
 800f592:	4680      	mov	r8, r0
 800f594:	b928      	cbnz	r0, 800f5a2 <__multadd+0x5a>
 800f596:	4602      	mov	r2, r0
 800f598:	4b0c      	ldr	r3, [pc, #48]	; (800f5cc <__multadd+0x84>)
 800f59a:	480d      	ldr	r0, [pc, #52]	; (800f5d0 <__multadd+0x88>)
 800f59c:	21b5      	movs	r1, #181	; 0xb5
 800f59e:	f000 fbfb 	bl	800fd98 <__assert_func>
 800f5a2:	6922      	ldr	r2, [r4, #16]
 800f5a4:	3202      	adds	r2, #2
 800f5a6:	f104 010c 	add.w	r1, r4, #12
 800f5aa:	0092      	lsls	r2, r2, #2
 800f5ac:	300c      	adds	r0, #12
 800f5ae:	f7fe fc61 	bl	800de74 <memcpy>
 800f5b2:	4621      	mov	r1, r4
 800f5b4:	4638      	mov	r0, r7
 800f5b6:	f7ff ffa5 	bl	800f504 <_Bfree>
 800f5ba:	4644      	mov	r4, r8
 800f5bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f5c0:	3501      	adds	r5, #1
 800f5c2:	615e      	str	r6, [r3, #20]
 800f5c4:	6125      	str	r5, [r4, #16]
 800f5c6:	4620      	mov	r0, r4
 800f5c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5cc:	08010a3b 	.word	0x08010a3b
 800f5d0:	08010a4c 	.word	0x08010a4c

0800f5d4 <__hi0bits>:
 800f5d4:	0c03      	lsrs	r3, r0, #16
 800f5d6:	041b      	lsls	r3, r3, #16
 800f5d8:	b9d3      	cbnz	r3, 800f610 <__hi0bits+0x3c>
 800f5da:	0400      	lsls	r0, r0, #16
 800f5dc:	2310      	movs	r3, #16
 800f5de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f5e2:	bf04      	itt	eq
 800f5e4:	0200      	lsleq	r0, r0, #8
 800f5e6:	3308      	addeq	r3, #8
 800f5e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f5ec:	bf04      	itt	eq
 800f5ee:	0100      	lsleq	r0, r0, #4
 800f5f0:	3304      	addeq	r3, #4
 800f5f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f5f6:	bf04      	itt	eq
 800f5f8:	0080      	lsleq	r0, r0, #2
 800f5fa:	3302      	addeq	r3, #2
 800f5fc:	2800      	cmp	r0, #0
 800f5fe:	db05      	blt.n	800f60c <__hi0bits+0x38>
 800f600:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f604:	f103 0301 	add.w	r3, r3, #1
 800f608:	bf08      	it	eq
 800f60a:	2320      	moveq	r3, #32
 800f60c:	4618      	mov	r0, r3
 800f60e:	4770      	bx	lr
 800f610:	2300      	movs	r3, #0
 800f612:	e7e4      	b.n	800f5de <__hi0bits+0xa>

0800f614 <__lo0bits>:
 800f614:	6803      	ldr	r3, [r0, #0]
 800f616:	f013 0207 	ands.w	r2, r3, #7
 800f61a:	4601      	mov	r1, r0
 800f61c:	d00b      	beq.n	800f636 <__lo0bits+0x22>
 800f61e:	07da      	lsls	r2, r3, #31
 800f620:	d423      	bmi.n	800f66a <__lo0bits+0x56>
 800f622:	0798      	lsls	r0, r3, #30
 800f624:	bf49      	itett	mi
 800f626:	085b      	lsrmi	r3, r3, #1
 800f628:	089b      	lsrpl	r3, r3, #2
 800f62a:	2001      	movmi	r0, #1
 800f62c:	600b      	strmi	r3, [r1, #0]
 800f62e:	bf5c      	itt	pl
 800f630:	600b      	strpl	r3, [r1, #0]
 800f632:	2002      	movpl	r0, #2
 800f634:	4770      	bx	lr
 800f636:	b298      	uxth	r0, r3
 800f638:	b9a8      	cbnz	r0, 800f666 <__lo0bits+0x52>
 800f63a:	0c1b      	lsrs	r3, r3, #16
 800f63c:	2010      	movs	r0, #16
 800f63e:	b2da      	uxtb	r2, r3
 800f640:	b90a      	cbnz	r2, 800f646 <__lo0bits+0x32>
 800f642:	3008      	adds	r0, #8
 800f644:	0a1b      	lsrs	r3, r3, #8
 800f646:	071a      	lsls	r2, r3, #28
 800f648:	bf04      	itt	eq
 800f64a:	091b      	lsreq	r3, r3, #4
 800f64c:	3004      	addeq	r0, #4
 800f64e:	079a      	lsls	r2, r3, #30
 800f650:	bf04      	itt	eq
 800f652:	089b      	lsreq	r3, r3, #2
 800f654:	3002      	addeq	r0, #2
 800f656:	07da      	lsls	r2, r3, #31
 800f658:	d403      	bmi.n	800f662 <__lo0bits+0x4e>
 800f65a:	085b      	lsrs	r3, r3, #1
 800f65c:	f100 0001 	add.w	r0, r0, #1
 800f660:	d005      	beq.n	800f66e <__lo0bits+0x5a>
 800f662:	600b      	str	r3, [r1, #0]
 800f664:	4770      	bx	lr
 800f666:	4610      	mov	r0, r2
 800f668:	e7e9      	b.n	800f63e <__lo0bits+0x2a>
 800f66a:	2000      	movs	r0, #0
 800f66c:	4770      	bx	lr
 800f66e:	2020      	movs	r0, #32
 800f670:	4770      	bx	lr
	...

0800f674 <__i2b>:
 800f674:	b510      	push	{r4, lr}
 800f676:	460c      	mov	r4, r1
 800f678:	2101      	movs	r1, #1
 800f67a:	f7ff ff03 	bl	800f484 <_Balloc>
 800f67e:	4602      	mov	r2, r0
 800f680:	b928      	cbnz	r0, 800f68e <__i2b+0x1a>
 800f682:	4b05      	ldr	r3, [pc, #20]	; (800f698 <__i2b+0x24>)
 800f684:	4805      	ldr	r0, [pc, #20]	; (800f69c <__i2b+0x28>)
 800f686:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f68a:	f000 fb85 	bl	800fd98 <__assert_func>
 800f68e:	2301      	movs	r3, #1
 800f690:	6144      	str	r4, [r0, #20]
 800f692:	6103      	str	r3, [r0, #16]
 800f694:	bd10      	pop	{r4, pc}
 800f696:	bf00      	nop
 800f698:	08010a3b 	.word	0x08010a3b
 800f69c:	08010a4c 	.word	0x08010a4c

0800f6a0 <__multiply>:
 800f6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6a4:	4691      	mov	r9, r2
 800f6a6:	690a      	ldr	r2, [r1, #16]
 800f6a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f6ac:	429a      	cmp	r2, r3
 800f6ae:	bfb8      	it	lt
 800f6b0:	460b      	movlt	r3, r1
 800f6b2:	460c      	mov	r4, r1
 800f6b4:	bfbc      	itt	lt
 800f6b6:	464c      	movlt	r4, r9
 800f6b8:	4699      	movlt	r9, r3
 800f6ba:	6927      	ldr	r7, [r4, #16]
 800f6bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f6c0:	68a3      	ldr	r3, [r4, #8]
 800f6c2:	6861      	ldr	r1, [r4, #4]
 800f6c4:	eb07 060a 	add.w	r6, r7, sl
 800f6c8:	42b3      	cmp	r3, r6
 800f6ca:	b085      	sub	sp, #20
 800f6cc:	bfb8      	it	lt
 800f6ce:	3101      	addlt	r1, #1
 800f6d0:	f7ff fed8 	bl	800f484 <_Balloc>
 800f6d4:	b930      	cbnz	r0, 800f6e4 <__multiply+0x44>
 800f6d6:	4602      	mov	r2, r0
 800f6d8:	4b44      	ldr	r3, [pc, #272]	; (800f7ec <__multiply+0x14c>)
 800f6da:	4845      	ldr	r0, [pc, #276]	; (800f7f0 <__multiply+0x150>)
 800f6dc:	f240 115d 	movw	r1, #349	; 0x15d
 800f6e0:	f000 fb5a 	bl	800fd98 <__assert_func>
 800f6e4:	f100 0514 	add.w	r5, r0, #20
 800f6e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f6ec:	462b      	mov	r3, r5
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	4543      	cmp	r3, r8
 800f6f2:	d321      	bcc.n	800f738 <__multiply+0x98>
 800f6f4:	f104 0314 	add.w	r3, r4, #20
 800f6f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f6fc:	f109 0314 	add.w	r3, r9, #20
 800f700:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f704:	9202      	str	r2, [sp, #8]
 800f706:	1b3a      	subs	r2, r7, r4
 800f708:	3a15      	subs	r2, #21
 800f70a:	f022 0203 	bic.w	r2, r2, #3
 800f70e:	3204      	adds	r2, #4
 800f710:	f104 0115 	add.w	r1, r4, #21
 800f714:	428f      	cmp	r7, r1
 800f716:	bf38      	it	cc
 800f718:	2204      	movcc	r2, #4
 800f71a:	9201      	str	r2, [sp, #4]
 800f71c:	9a02      	ldr	r2, [sp, #8]
 800f71e:	9303      	str	r3, [sp, #12]
 800f720:	429a      	cmp	r2, r3
 800f722:	d80c      	bhi.n	800f73e <__multiply+0x9e>
 800f724:	2e00      	cmp	r6, #0
 800f726:	dd03      	ble.n	800f730 <__multiply+0x90>
 800f728:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d05a      	beq.n	800f7e6 <__multiply+0x146>
 800f730:	6106      	str	r6, [r0, #16]
 800f732:	b005      	add	sp, #20
 800f734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f738:	f843 2b04 	str.w	r2, [r3], #4
 800f73c:	e7d8      	b.n	800f6f0 <__multiply+0x50>
 800f73e:	f8b3 a000 	ldrh.w	sl, [r3]
 800f742:	f1ba 0f00 	cmp.w	sl, #0
 800f746:	d024      	beq.n	800f792 <__multiply+0xf2>
 800f748:	f104 0e14 	add.w	lr, r4, #20
 800f74c:	46a9      	mov	r9, r5
 800f74e:	f04f 0c00 	mov.w	ip, #0
 800f752:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f756:	f8d9 1000 	ldr.w	r1, [r9]
 800f75a:	fa1f fb82 	uxth.w	fp, r2
 800f75e:	b289      	uxth	r1, r1
 800f760:	fb0a 110b 	mla	r1, sl, fp, r1
 800f764:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f768:	f8d9 2000 	ldr.w	r2, [r9]
 800f76c:	4461      	add	r1, ip
 800f76e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f772:	fb0a c20b 	mla	r2, sl, fp, ip
 800f776:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f77a:	b289      	uxth	r1, r1
 800f77c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f780:	4577      	cmp	r7, lr
 800f782:	f849 1b04 	str.w	r1, [r9], #4
 800f786:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f78a:	d8e2      	bhi.n	800f752 <__multiply+0xb2>
 800f78c:	9a01      	ldr	r2, [sp, #4]
 800f78e:	f845 c002 	str.w	ip, [r5, r2]
 800f792:	9a03      	ldr	r2, [sp, #12]
 800f794:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f798:	3304      	adds	r3, #4
 800f79a:	f1b9 0f00 	cmp.w	r9, #0
 800f79e:	d020      	beq.n	800f7e2 <__multiply+0x142>
 800f7a0:	6829      	ldr	r1, [r5, #0]
 800f7a2:	f104 0c14 	add.w	ip, r4, #20
 800f7a6:	46ae      	mov	lr, r5
 800f7a8:	f04f 0a00 	mov.w	sl, #0
 800f7ac:	f8bc b000 	ldrh.w	fp, [ip]
 800f7b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f7b4:	fb09 220b 	mla	r2, r9, fp, r2
 800f7b8:	4492      	add	sl, r2
 800f7ba:	b289      	uxth	r1, r1
 800f7bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f7c0:	f84e 1b04 	str.w	r1, [lr], #4
 800f7c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f7c8:	f8be 1000 	ldrh.w	r1, [lr]
 800f7cc:	0c12      	lsrs	r2, r2, #16
 800f7ce:	fb09 1102 	mla	r1, r9, r2, r1
 800f7d2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f7d6:	4567      	cmp	r7, ip
 800f7d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f7dc:	d8e6      	bhi.n	800f7ac <__multiply+0x10c>
 800f7de:	9a01      	ldr	r2, [sp, #4]
 800f7e0:	50a9      	str	r1, [r5, r2]
 800f7e2:	3504      	adds	r5, #4
 800f7e4:	e79a      	b.n	800f71c <__multiply+0x7c>
 800f7e6:	3e01      	subs	r6, #1
 800f7e8:	e79c      	b.n	800f724 <__multiply+0x84>
 800f7ea:	bf00      	nop
 800f7ec:	08010a3b 	.word	0x08010a3b
 800f7f0:	08010a4c 	.word	0x08010a4c

0800f7f4 <__pow5mult>:
 800f7f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7f8:	4615      	mov	r5, r2
 800f7fa:	f012 0203 	ands.w	r2, r2, #3
 800f7fe:	4606      	mov	r6, r0
 800f800:	460f      	mov	r7, r1
 800f802:	d007      	beq.n	800f814 <__pow5mult+0x20>
 800f804:	4c25      	ldr	r4, [pc, #148]	; (800f89c <__pow5mult+0xa8>)
 800f806:	3a01      	subs	r2, #1
 800f808:	2300      	movs	r3, #0
 800f80a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f80e:	f7ff fe9b 	bl	800f548 <__multadd>
 800f812:	4607      	mov	r7, r0
 800f814:	10ad      	asrs	r5, r5, #2
 800f816:	d03d      	beq.n	800f894 <__pow5mult+0xa0>
 800f818:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f81a:	b97c      	cbnz	r4, 800f83c <__pow5mult+0x48>
 800f81c:	2010      	movs	r0, #16
 800f81e:	f7ff fe29 	bl	800f474 <malloc>
 800f822:	4602      	mov	r2, r0
 800f824:	6270      	str	r0, [r6, #36]	; 0x24
 800f826:	b928      	cbnz	r0, 800f834 <__pow5mult+0x40>
 800f828:	4b1d      	ldr	r3, [pc, #116]	; (800f8a0 <__pow5mult+0xac>)
 800f82a:	481e      	ldr	r0, [pc, #120]	; (800f8a4 <__pow5mult+0xb0>)
 800f82c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f830:	f000 fab2 	bl	800fd98 <__assert_func>
 800f834:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f838:	6004      	str	r4, [r0, #0]
 800f83a:	60c4      	str	r4, [r0, #12]
 800f83c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f840:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f844:	b94c      	cbnz	r4, 800f85a <__pow5mult+0x66>
 800f846:	f240 2171 	movw	r1, #625	; 0x271
 800f84a:	4630      	mov	r0, r6
 800f84c:	f7ff ff12 	bl	800f674 <__i2b>
 800f850:	2300      	movs	r3, #0
 800f852:	f8c8 0008 	str.w	r0, [r8, #8]
 800f856:	4604      	mov	r4, r0
 800f858:	6003      	str	r3, [r0, #0]
 800f85a:	f04f 0900 	mov.w	r9, #0
 800f85e:	07eb      	lsls	r3, r5, #31
 800f860:	d50a      	bpl.n	800f878 <__pow5mult+0x84>
 800f862:	4639      	mov	r1, r7
 800f864:	4622      	mov	r2, r4
 800f866:	4630      	mov	r0, r6
 800f868:	f7ff ff1a 	bl	800f6a0 <__multiply>
 800f86c:	4639      	mov	r1, r7
 800f86e:	4680      	mov	r8, r0
 800f870:	4630      	mov	r0, r6
 800f872:	f7ff fe47 	bl	800f504 <_Bfree>
 800f876:	4647      	mov	r7, r8
 800f878:	106d      	asrs	r5, r5, #1
 800f87a:	d00b      	beq.n	800f894 <__pow5mult+0xa0>
 800f87c:	6820      	ldr	r0, [r4, #0]
 800f87e:	b938      	cbnz	r0, 800f890 <__pow5mult+0x9c>
 800f880:	4622      	mov	r2, r4
 800f882:	4621      	mov	r1, r4
 800f884:	4630      	mov	r0, r6
 800f886:	f7ff ff0b 	bl	800f6a0 <__multiply>
 800f88a:	6020      	str	r0, [r4, #0]
 800f88c:	f8c0 9000 	str.w	r9, [r0]
 800f890:	4604      	mov	r4, r0
 800f892:	e7e4      	b.n	800f85e <__pow5mult+0x6a>
 800f894:	4638      	mov	r0, r7
 800f896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f89a:	bf00      	nop
 800f89c:	08010b98 	.word	0x08010b98
 800f8a0:	080109c9 	.word	0x080109c9
 800f8a4:	08010a4c 	.word	0x08010a4c

0800f8a8 <__lshift>:
 800f8a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8ac:	460c      	mov	r4, r1
 800f8ae:	6849      	ldr	r1, [r1, #4]
 800f8b0:	6923      	ldr	r3, [r4, #16]
 800f8b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f8b6:	68a3      	ldr	r3, [r4, #8]
 800f8b8:	4607      	mov	r7, r0
 800f8ba:	4691      	mov	r9, r2
 800f8bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f8c0:	f108 0601 	add.w	r6, r8, #1
 800f8c4:	42b3      	cmp	r3, r6
 800f8c6:	db0b      	blt.n	800f8e0 <__lshift+0x38>
 800f8c8:	4638      	mov	r0, r7
 800f8ca:	f7ff fddb 	bl	800f484 <_Balloc>
 800f8ce:	4605      	mov	r5, r0
 800f8d0:	b948      	cbnz	r0, 800f8e6 <__lshift+0x3e>
 800f8d2:	4602      	mov	r2, r0
 800f8d4:	4b2a      	ldr	r3, [pc, #168]	; (800f980 <__lshift+0xd8>)
 800f8d6:	482b      	ldr	r0, [pc, #172]	; (800f984 <__lshift+0xdc>)
 800f8d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f8dc:	f000 fa5c 	bl	800fd98 <__assert_func>
 800f8e0:	3101      	adds	r1, #1
 800f8e2:	005b      	lsls	r3, r3, #1
 800f8e4:	e7ee      	b.n	800f8c4 <__lshift+0x1c>
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	f100 0114 	add.w	r1, r0, #20
 800f8ec:	f100 0210 	add.w	r2, r0, #16
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	4553      	cmp	r3, sl
 800f8f4:	db37      	blt.n	800f966 <__lshift+0xbe>
 800f8f6:	6920      	ldr	r0, [r4, #16]
 800f8f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f8fc:	f104 0314 	add.w	r3, r4, #20
 800f900:	f019 091f 	ands.w	r9, r9, #31
 800f904:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f908:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f90c:	d02f      	beq.n	800f96e <__lshift+0xc6>
 800f90e:	f1c9 0e20 	rsb	lr, r9, #32
 800f912:	468a      	mov	sl, r1
 800f914:	f04f 0c00 	mov.w	ip, #0
 800f918:	681a      	ldr	r2, [r3, #0]
 800f91a:	fa02 f209 	lsl.w	r2, r2, r9
 800f91e:	ea42 020c 	orr.w	r2, r2, ip
 800f922:	f84a 2b04 	str.w	r2, [sl], #4
 800f926:	f853 2b04 	ldr.w	r2, [r3], #4
 800f92a:	4298      	cmp	r0, r3
 800f92c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f930:	d8f2      	bhi.n	800f918 <__lshift+0x70>
 800f932:	1b03      	subs	r3, r0, r4
 800f934:	3b15      	subs	r3, #21
 800f936:	f023 0303 	bic.w	r3, r3, #3
 800f93a:	3304      	adds	r3, #4
 800f93c:	f104 0215 	add.w	r2, r4, #21
 800f940:	4290      	cmp	r0, r2
 800f942:	bf38      	it	cc
 800f944:	2304      	movcc	r3, #4
 800f946:	f841 c003 	str.w	ip, [r1, r3]
 800f94a:	f1bc 0f00 	cmp.w	ip, #0
 800f94e:	d001      	beq.n	800f954 <__lshift+0xac>
 800f950:	f108 0602 	add.w	r6, r8, #2
 800f954:	3e01      	subs	r6, #1
 800f956:	4638      	mov	r0, r7
 800f958:	612e      	str	r6, [r5, #16]
 800f95a:	4621      	mov	r1, r4
 800f95c:	f7ff fdd2 	bl	800f504 <_Bfree>
 800f960:	4628      	mov	r0, r5
 800f962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f966:	f842 0f04 	str.w	r0, [r2, #4]!
 800f96a:	3301      	adds	r3, #1
 800f96c:	e7c1      	b.n	800f8f2 <__lshift+0x4a>
 800f96e:	3904      	subs	r1, #4
 800f970:	f853 2b04 	ldr.w	r2, [r3], #4
 800f974:	f841 2f04 	str.w	r2, [r1, #4]!
 800f978:	4298      	cmp	r0, r3
 800f97a:	d8f9      	bhi.n	800f970 <__lshift+0xc8>
 800f97c:	e7ea      	b.n	800f954 <__lshift+0xac>
 800f97e:	bf00      	nop
 800f980:	08010a3b 	.word	0x08010a3b
 800f984:	08010a4c 	.word	0x08010a4c

0800f988 <__mcmp>:
 800f988:	b530      	push	{r4, r5, lr}
 800f98a:	6902      	ldr	r2, [r0, #16]
 800f98c:	690c      	ldr	r4, [r1, #16]
 800f98e:	1b12      	subs	r2, r2, r4
 800f990:	d10e      	bne.n	800f9b0 <__mcmp+0x28>
 800f992:	f100 0314 	add.w	r3, r0, #20
 800f996:	3114      	adds	r1, #20
 800f998:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f99c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f9a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f9a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f9a8:	42a5      	cmp	r5, r4
 800f9aa:	d003      	beq.n	800f9b4 <__mcmp+0x2c>
 800f9ac:	d305      	bcc.n	800f9ba <__mcmp+0x32>
 800f9ae:	2201      	movs	r2, #1
 800f9b0:	4610      	mov	r0, r2
 800f9b2:	bd30      	pop	{r4, r5, pc}
 800f9b4:	4283      	cmp	r3, r0
 800f9b6:	d3f3      	bcc.n	800f9a0 <__mcmp+0x18>
 800f9b8:	e7fa      	b.n	800f9b0 <__mcmp+0x28>
 800f9ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f9be:	e7f7      	b.n	800f9b0 <__mcmp+0x28>

0800f9c0 <__mdiff>:
 800f9c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9c4:	460c      	mov	r4, r1
 800f9c6:	4606      	mov	r6, r0
 800f9c8:	4611      	mov	r1, r2
 800f9ca:	4620      	mov	r0, r4
 800f9cc:	4690      	mov	r8, r2
 800f9ce:	f7ff ffdb 	bl	800f988 <__mcmp>
 800f9d2:	1e05      	subs	r5, r0, #0
 800f9d4:	d110      	bne.n	800f9f8 <__mdiff+0x38>
 800f9d6:	4629      	mov	r1, r5
 800f9d8:	4630      	mov	r0, r6
 800f9da:	f7ff fd53 	bl	800f484 <_Balloc>
 800f9de:	b930      	cbnz	r0, 800f9ee <__mdiff+0x2e>
 800f9e0:	4b3a      	ldr	r3, [pc, #232]	; (800facc <__mdiff+0x10c>)
 800f9e2:	4602      	mov	r2, r0
 800f9e4:	f240 2132 	movw	r1, #562	; 0x232
 800f9e8:	4839      	ldr	r0, [pc, #228]	; (800fad0 <__mdiff+0x110>)
 800f9ea:	f000 f9d5 	bl	800fd98 <__assert_func>
 800f9ee:	2301      	movs	r3, #1
 800f9f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f9f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9f8:	bfa4      	itt	ge
 800f9fa:	4643      	movge	r3, r8
 800f9fc:	46a0      	movge	r8, r4
 800f9fe:	4630      	mov	r0, r6
 800fa00:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fa04:	bfa6      	itte	ge
 800fa06:	461c      	movge	r4, r3
 800fa08:	2500      	movge	r5, #0
 800fa0a:	2501      	movlt	r5, #1
 800fa0c:	f7ff fd3a 	bl	800f484 <_Balloc>
 800fa10:	b920      	cbnz	r0, 800fa1c <__mdiff+0x5c>
 800fa12:	4b2e      	ldr	r3, [pc, #184]	; (800facc <__mdiff+0x10c>)
 800fa14:	4602      	mov	r2, r0
 800fa16:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fa1a:	e7e5      	b.n	800f9e8 <__mdiff+0x28>
 800fa1c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fa20:	6926      	ldr	r6, [r4, #16]
 800fa22:	60c5      	str	r5, [r0, #12]
 800fa24:	f104 0914 	add.w	r9, r4, #20
 800fa28:	f108 0514 	add.w	r5, r8, #20
 800fa2c:	f100 0e14 	add.w	lr, r0, #20
 800fa30:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fa34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fa38:	f108 0210 	add.w	r2, r8, #16
 800fa3c:	46f2      	mov	sl, lr
 800fa3e:	2100      	movs	r1, #0
 800fa40:	f859 3b04 	ldr.w	r3, [r9], #4
 800fa44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fa48:	fa1f f883 	uxth.w	r8, r3
 800fa4c:	fa11 f18b 	uxtah	r1, r1, fp
 800fa50:	0c1b      	lsrs	r3, r3, #16
 800fa52:	eba1 0808 	sub.w	r8, r1, r8
 800fa56:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fa5a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fa5e:	fa1f f888 	uxth.w	r8, r8
 800fa62:	1419      	asrs	r1, r3, #16
 800fa64:	454e      	cmp	r6, r9
 800fa66:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fa6a:	f84a 3b04 	str.w	r3, [sl], #4
 800fa6e:	d8e7      	bhi.n	800fa40 <__mdiff+0x80>
 800fa70:	1b33      	subs	r3, r6, r4
 800fa72:	3b15      	subs	r3, #21
 800fa74:	f023 0303 	bic.w	r3, r3, #3
 800fa78:	3304      	adds	r3, #4
 800fa7a:	3415      	adds	r4, #21
 800fa7c:	42a6      	cmp	r6, r4
 800fa7e:	bf38      	it	cc
 800fa80:	2304      	movcc	r3, #4
 800fa82:	441d      	add	r5, r3
 800fa84:	4473      	add	r3, lr
 800fa86:	469e      	mov	lr, r3
 800fa88:	462e      	mov	r6, r5
 800fa8a:	4566      	cmp	r6, ip
 800fa8c:	d30e      	bcc.n	800faac <__mdiff+0xec>
 800fa8e:	f10c 0203 	add.w	r2, ip, #3
 800fa92:	1b52      	subs	r2, r2, r5
 800fa94:	f022 0203 	bic.w	r2, r2, #3
 800fa98:	3d03      	subs	r5, #3
 800fa9a:	45ac      	cmp	ip, r5
 800fa9c:	bf38      	it	cc
 800fa9e:	2200      	movcc	r2, #0
 800faa0:	441a      	add	r2, r3
 800faa2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800faa6:	b17b      	cbz	r3, 800fac8 <__mdiff+0x108>
 800faa8:	6107      	str	r7, [r0, #16]
 800faaa:	e7a3      	b.n	800f9f4 <__mdiff+0x34>
 800faac:	f856 8b04 	ldr.w	r8, [r6], #4
 800fab0:	fa11 f288 	uxtah	r2, r1, r8
 800fab4:	1414      	asrs	r4, r2, #16
 800fab6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800faba:	b292      	uxth	r2, r2
 800fabc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fac0:	f84e 2b04 	str.w	r2, [lr], #4
 800fac4:	1421      	asrs	r1, r4, #16
 800fac6:	e7e0      	b.n	800fa8a <__mdiff+0xca>
 800fac8:	3f01      	subs	r7, #1
 800faca:	e7ea      	b.n	800faa2 <__mdiff+0xe2>
 800facc:	08010a3b 	.word	0x08010a3b
 800fad0:	08010a4c 	.word	0x08010a4c

0800fad4 <__d2b>:
 800fad4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fad8:	4689      	mov	r9, r1
 800fada:	2101      	movs	r1, #1
 800fadc:	ec57 6b10 	vmov	r6, r7, d0
 800fae0:	4690      	mov	r8, r2
 800fae2:	f7ff fccf 	bl	800f484 <_Balloc>
 800fae6:	4604      	mov	r4, r0
 800fae8:	b930      	cbnz	r0, 800faf8 <__d2b+0x24>
 800faea:	4602      	mov	r2, r0
 800faec:	4b25      	ldr	r3, [pc, #148]	; (800fb84 <__d2b+0xb0>)
 800faee:	4826      	ldr	r0, [pc, #152]	; (800fb88 <__d2b+0xb4>)
 800faf0:	f240 310a 	movw	r1, #778	; 0x30a
 800faf4:	f000 f950 	bl	800fd98 <__assert_func>
 800faf8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fafc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fb00:	bb35      	cbnz	r5, 800fb50 <__d2b+0x7c>
 800fb02:	2e00      	cmp	r6, #0
 800fb04:	9301      	str	r3, [sp, #4]
 800fb06:	d028      	beq.n	800fb5a <__d2b+0x86>
 800fb08:	4668      	mov	r0, sp
 800fb0a:	9600      	str	r6, [sp, #0]
 800fb0c:	f7ff fd82 	bl	800f614 <__lo0bits>
 800fb10:	9900      	ldr	r1, [sp, #0]
 800fb12:	b300      	cbz	r0, 800fb56 <__d2b+0x82>
 800fb14:	9a01      	ldr	r2, [sp, #4]
 800fb16:	f1c0 0320 	rsb	r3, r0, #32
 800fb1a:	fa02 f303 	lsl.w	r3, r2, r3
 800fb1e:	430b      	orrs	r3, r1
 800fb20:	40c2      	lsrs	r2, r0
 800fb22:	6163      	str	r3, [r4, #20]
 800fb24:	9201      	str	r2, [sp, #4]
 800fb26:	9b01      	ldr	r3, [sp, #4]
 800fb28:	61a3      	str	r3, [r4, #24]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	bf14      	ite	ne
 800fb2e:	2202      	movne	r2, #2
 800fb30:	2201      	moveq	r2, #1
 800fb32:	6122      	str	r2, [r4, #16]
 800fb34:	b1d5      	cbz	r5, 800fb6c <__d2b+0x98>
 800fb36:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fb3a:	4405      	add	r5, r0
 800fb3c:	f8c9 5000 	str.w	r5, [r9]
 800fb40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fb44:	f8c8 0000 	str.w	r0, [r8]
 800fb48:	4620      	mov	r0, r4
 800fb4a:	b003      	add	sp, #12
 800fb4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fb54:	e7d5      	b.n	800fb02 <__d2b+0x2e>
 800fb56:	6161      	str	r1, [r4, #20]
 800fb58:	e7e5      	b.n	800fb26 <__d2b+0x52>
 800fb5a:	a801      	add	r0, sp, #4
 800fb5c:	f7ff fd5a 	bl	800f614 <__lo0bits>
 800fb60:	9b01      	ldr	r3, [sp, #4]
 800fb62:	6163      	str	r3, [r4, #20]
 800fb64:	2201      	movs	r2, #1
 800fb66:	6122      	str	r2, [r4, #16]
 800fb68:	3020      	adds	r0, #32
 800fb6a:	e7e3      	b.n	800fb34 <__d2b+0x60>
 800fb6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fb70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fb74:	f8c9 0000 	str.w	r0, [r9]
 800fb78:	6918      	ldr	r0, [r3, #16]
 800fb7a:	f7ff fd2b 	bl	800f5d4 <__hi0bits>
 800fb7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fb82:	e7df      	b.n	800fb44 <__d2b+0x70>
 800fb84:	08010a3b 	.word	0x08010a3b
 800fb88:	08010a4c 	.word	0x08010a4c

0800fb8c <_calloc_r>:
 800fb8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb8e:	fba1 2402 	umull	r2, r4, r1, r2
 800fb92:	b94c      	cbnz	r4, 800fba8 <_calloc_r+0x1c>
 800fb94:	4611      	mov	r1, r2
 800fb96:	9201      	str	r2, [sp, #4]
 800fb98:	f000 f87a 	bl	800fc90 <_malloc_r>
 800fb9c:	9a01      	ldr	r2, [sp, #4]
 800fb9e:	4605      	mov	r5, r0
 800fba0:	b930      	cbnz	r0, 800fbb0 <_calloc_r+0x24>
 800fba2:	4628      	mov	r0, r5
 800fba4:	b003      	add	sp, #12
 800fba6:	bd30      	pop	{r4, r5, pc}
 800fba8:	220c      	movs	r2, #12
 800fbaa:	6002      	str	r2, [r0, #0]
 800fbac:	2500      	movs	r5, #0
 800fbae:	e7f8      	b.n	800fba2 <_calloc_r+0x16>
 800fbb0:	4621      	mov	r1, r4
 800fbb2:	f7fe f96d 	bl	800de90 <memset>
 800fbb6:	e7f4      	b.n	800fba2 <_calloc_r+0x16>

0800fbb8 <_free_r>:
 800fbb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fbba:	2900      	cmp	r1, #0
 800fbbc:	d044      	beq.n	800fc48 <_free_r+0x90>
 800fbbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fbc2:	9001      	str	r0, [sp, #4]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	f1a1 0404 	sub.w	r4, r1, #4
 800fbca:	bfb8      	it	lt
 800fbcc:	18e4      	addlt	r4, r4, r3
 800fbce:	f000 f925 	bl	800fe1c <__malloc_lock>
 800fbd2:	4a1e      	ldr	r2, [pc, #120]	; (800fc4c <_free_r+0x94>)
 800fbd4:	9801      	ldr	r0, [sp, #4]
 800fbd6:	6813      	ldr	r3, [r2, #0]
 800fbd8:	b933      	cbnz	r3, 800fbe8 <_free_r+0x30>
 800fbda:	6063      	str	r3, [r4, #4]
 800fbdc:	6014      	str	r4, [r2, #0]
 800fbde:	b003      	add	sp, #12
 800fbe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fbe4:	f000 b920 	b.w	800fe28 <__malloc_unlock>
 800fbe8:	42a3      	cmp	r3, r4
 800fbea:	d908      	bls.n	800fbfe <_free_r+0x46>
 800fbec:	6825      	ldr	r5, [r4, #0]
 800fbee:	1961      	adds	r1, r4, r5
 800fbf0:	428b      	cmp	r3, r1
 800fbf2:	bf01      	itttt	eq
 800fbf4:	6819      	ldreq	r1, [r3, #0]
 800fbf6:	685b      	ldreq	r3, [r3, #4]
 800fbf8:	1949      	addeq	r1, r1, r5
 800fbfa:	6021      	streq	r1, [r4, #0]
 800fbfc:	e7ed      	b.n	800fbda <_free_r+0x22>
 800fbfe:	461a      	mov	r2, r3
 800fc00:	685b      	ldr	r3, [r3, #4]
 800fc02:	b10b      	cbz	r3, 800fc08 <_free_r+0x50>
 800fc04:	42a3      	cmp	r3, r4
 800fc06:	d9fa      	bls.n	800fbfe <_free_r+0x46>
 800fc08:	6811      	ldr	r1, [r2, #0]
 800fc0a:	1855      	adds	r5, r2, r1
 800fc0c:	42a5      	cmp	r5, r4
 800fc0e:	d10b      	bne.n	800fc28 <_free_r+0x70>
 800fc10:	6824      	ldr	r4, [r4, #0]
 800fc12:	4421      	add	r1, r4
 800fc14:	1854      	adds	r4, r2, r1
 800fc16:	42a3      	cmp	r3, r4
 800fc18:	6011      	str	r1, [r2, #0]
 800fc1a:	d1e0      	bne.n	800fbde <_free_r+0x26>
 800fc1c:	681c      	ldr	r4, [r3, #0]
 800fc1e:	685b      	ldr	r3, [r3, #4]
 800fc20:	6053      	str	r3, [r2, #4]
 800fc22:	4421      	add	r1, r4
 800fc24:	6011      	str	r1, [r2, #0]
 800fc26:	e7da      	b.n	800fbde <_free_r+0x26>
 800fc28:	d902      	bls.n	800fc30 <_free_r+0x78>
 800fc2a:	230c      	movs	r3, #12
 800fc2c:	6003      	str	r3, [r0, #0]
 800fc2e:	e7d6      	b.n	800fbde <_free_r+0x26>
 800fc30:	6825      	ldr	r5, [r4, #0]
 800fc32:	1961      	adds	r1, r4, r5
 800fc34:	428b      	cmp	r3, r1
 800fc36:	bf04      	itt	eq
 800fc38:	6819      	ldreq	r1, [r3, #0]
 800fc3a:	685b      	ldreq	r3, [r3, #4]
 800fc3c:	6063      	str	r3, [r4, #4]
 800fc3e:	bf04      	itt	eq
 800fc40:	1949      	addeq	r1, r1, r5
 800fc42:	6021      	streq	r1, [r4, #0]
 800fc44:	6054      	str	r4, [r2, #4]
 800fc46:	e7ca      	b.n	800fbde <_free_r+0x26>
 800fc48:	b003      	add	sp, #12
 800fc4a:	bd30      	pop	{r4, r5, pc}
 800fc4c:	20004bf4 	.word	0x20004bf4

0800fc50 <sbrk_aligned>:
 800fc50:	b570      	push	{r4, r5, r6, lr}
 800fc52:	4e0e      	ldr	r6, [pc, #56]	; (800fc8c <sbrk_aligned+0x3c>)
 800fc54:	460c      	mov	r4, r1
 800fc56:	6831      	ldr	r1, [r6, #0]
 800fc58:	4605      	mov	r5, r0
 800fc5a:	b911      	cbnz	r1, 800fc62 <sbrk_aligned+0x12>
 800fc5c:	f000 f88c 	bl	800fd78 <_sbrk_r>
 800fc60:	6030      	str	r0, [r6, #0]
 800fc62:	4621      	mov	r1, r4
 800fc64:	4628      	mov	r0, r5
 800fc66:	f000 f887 	bl	800fd78 <_sbrk_r>
 800fc6a:	1c43      	adds	r3, r0, #1
 800fc6c:	d00a      	beq.n	800fc84 <sbrk_aligned+0x34>
 800fc6e:	1cc4      	adds	r4, r0, #3
 800fc70:	f024 0403 	bic.w	r4, r4, #3
 800fc74:	42a0      	cmp	r0, r4
 800fc76:	d007      	beq.n	800fc88 <sbrk_aligned+0x38>
 800fc78:	1a21      	subs	r1, r4, r0
 800fc7a:	4628      	mov	r0, r5
 800fc7c:	f000 f87c 	bl	800fd78 <_sbrk_r>
 800fc80:	3001      	adds	r0, #1
 800fc82:	d101      	bne.n	800fc88 <sbrk_aligned+0x38>
 800fc84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fc88:	4620      	mov	r0, r4
 800fc8a:	bd70      	pop	{r4, r5, r6, pc}
 800fc8c:	20004bf8 	.word	0x20004bf8

0800fc90 <_malloc_r>:
 800fc90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc94:	1ccd      	adds	r5, r1, #3
 800fc96:	f025 0503 	bic.w	r5, r5, #3
 800fc9a:	3508      	adds	r5, #8
 800fc9c:	2d0c      	cmp	r5, #12
 800fc9e:	bf38      	it	cc
 800fca0:	250c      	movcc	r5, #12
 800fca2:	2d00      	cmp	r5, #0
 800fca4:	4607      	mov	r7, r0
 800fca6:	db01      	blt.n	800fcac <_malloc_r+0x1c>
 800fca8:	42a9      	cmp	r1, r5
 800fcaa:	d905      	bls.n	800fcb8 <_malloc_r+0x28>
 800fcac:	230c      	movs	r3, #12
 800fcae:	603b      	str	r3, [r7, #0]
 800fcb0:	2600      	movs	r6, #0
 800fcb2:	4630      	mov	r0, r6
 800fcb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcb8:	4e2e      	ldr	r6, [pc, #184]	; (800fd74 <_malloc_r+0xe4>)
 800fcba:	f000 f8af 	bl	800fe1c <__malloc_lock>
 800fcbe:	6833      	ldr	r3, [r6, #0]
 800fcc0:	461c      	mov	r4, r3
 800fcc2:	bb34      	cbnz	r4, 800fd12 <_malloc_r+0x82>
 800fcc4:	4629      	mov	r1, r5
 800fcc6:	4638      	mov	r0, r7
 800fcc8:	f7ff ffc2 	bl	800fc50 <sbrk_aligned>
 800fccc:	1c43      	adds	r3, r0, #1
 800fcce:	4604      	mov	r4, r0
 800fcd0:	d14d      	bne.n	800fd6e <_malloc_r+0xde>
 800fcd2:	6834      	ldr	r4, [r6, #0]
 800fcd4:	4626      	mov	r6, r4
 800fcd6:	2e00      	cmp	r6, #0
 800fcd8:	d140      	bne.n	800fd5c <_malloc_r+0xcc>
 800fcda:	6823      	ldr	r3, [r4, #0]
 800fcdc:	4631      	mov	r1, r6
 800fcde:	4638      	mov	r0, r7
 800fce0:	eb04 0803 	add.w	r8, r4, r3
 800fce4:	f000 f848 	bl	800fd78 <_sbrk_r>
 800fce8:	4580      	cmp	r8, r0
 800fcea:	d13a      	bne.n	800fd62 <_malloc_r+0xd2>
 800fcec:	6821      	ldr	r1, [r4, #0]
 800fcee:	3503      	adds	r5, #3
 800fcf0:	1a6d      	subs	r5, r5, r1
 800fcf2:	f025 0503 	bic.w	r5, r5, #3
 800fcf6:	3508      	adds	r5, #8
 800fcf8:	2d0c      	cmp	r5, #12
 800fcfa:	bf38      	it	cc
 800fcfc:	250c      	movcc	r5, #12
 800fcfe:	4629      	mov	r1, r5
 800fd00:	4638      	mov	r0, r7
 800fd02:	f7ff ffa5 	bl	800fc50 <sbrk_aligned>
 800fd06:	3001      	adds	r0, #1
 800fd08:	d02b      	beq.n	800fd62 <_malloc_r+0xd2>
 800fd0a:	6823      	ldr	r3, [r4, #0]
 800fd0c:	442b      	add	r3, r5
 800fd0e:	6023      	str	r3, [r4, #0]
 800fd10:	e00e      	b.n	800fd30 <_malloc_r+0xa0>
 800fd12:	6822      	ldr	r2, [r4, #0]
 800fd14:	1b52      	subs	r2, r2, r5
 800fd16:	d41e      	bmi.n	800fd56 <_malloc_r+0xc6>
 800fd18:	2a0b      	cmp	r2, #11
 800fd1a:	d916      	bls.n	800fd4a <_malloc_r+0xba>
 800fd1c:	1961      	adds	r1, r4, r5
 800fd1e:	42a3      	cmp	r3, r4
 800fd20:	6025      	str	r5, [r4, #0]
 800fd22:	bf18      	it	ne
 800fd24:	6059      	strne	r1, [r3, #4]
 800fd26:	6863      	ldr	r3, [r4, #4]
 800fd28:	bf08      	it	eq
 800fd2a:	6031      	streq	r1, [r6, #0]
 800fd2c:	5162      	str	r2, [r4, r5]
 800fd2e:	604b      	str	r3, [r1, #4]
 800fd30:	4638      	mov	r0, r7
 800fd32:	f104 060b 	add.w	r6, r4, #11
 800fd36:	f000 f877 	bl	800fe28 <__malloc_unlock>
 800fd3a:	f026 0607 	bic.w	r6, r6, #7
 800fd3e:	1d23      	adds	r3, r4, #4
 800fd40:	1af2      	subs	r2, r6, r3
 800fd42:	d0b6      	beq.n	800fcb2 <_malloc_r+0x22>
 800fd44:	1b9b      	subs	r3, r3, r6
 800fd46:	50a3      	str	r3, [r4, r2]
 800fd48:	e7b3      	b.n	800fcb2 <_malloc_r+0x22>
 800fd4a:	6862      	ldr	r2, [r4, #4]
 800fd4c:	42a3      	cmp	r3, r4
 800fd4e:	bf0c      	ite	eq
 800fd50:	6032      	streq	r2, [r6, #0]
 800fd52:	605a      	strne	r2, [r3, #4]
 800fd54:	e7ec      	b.n	800fd30 <_malloc_r+0xa0>
 800fd56:	4623      	mov	r3, r4
 800fd58:	6864      	ldr	r4, [r4, #4]
 800fd5a:	e7b2      	b.n	800fcc2 <_malloc_r+0x32>
 800fd5c:	4634      	mov	r4, r6
 800fd5e:	6876      	ldr	r6, [r6, #4]
 800fd60:	e7b9      	b.n	800fcd6 <_malloc_r+0x46>
 800fd62:	230c      	movs	r3, #12
 800fd64:	603b      	str	r3, [r7, #0]
 800fd66:	4638      	mov	r0, r7
 800fd68:	f000 f85e 	bl	800fe28 <__malloc_unlock>
 800fd6c:	e7a1      	b.n	800fcb2 <_malloc_r+0x22>
 800fd6e:	6025      	str	r5, [r4, #0]
 800fd70:	e7de      	b.n	800fd30 <_malloc_r+0xa0>
 800fd72:	bf00      	nop
 800fd74:	20004bf4 	.word	0x20004bf4

0800fd78 <_sbrk_r>:
 800fd78:	b538      	push	{r3, r4, r5, lr}
 800fd7a:	4d06      	ldr	r5, [pc, #24]	; (800fd94 <_sbrk_r+0x1c>)
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	4604      	mov	r4, r0
 800fd80:	4608      	mov	r0, r1
 800fd82:	602b      	str	r3, [r5, #0]
 800fd84:	f7f1 ff58 	bl	8001c38 <_sbrk>
 800fd88:	1c43      	adds	r3, r0, #1
 800fd8a:	d102      	bne.n	800fd92 <_sbrk_r+0x1a>
 800fd8c:	682b      	ldr	r3, [r5, #0]
 800fd8e:	b103      	cbz	r3, 800fd92 <_sbrk_r+0x1a>
 800fd90:	6023      	str	r3, [r4, #0]
 800fd92:	bd38      	pop	{r3, r4, r5, pc}
 800fd94:	20004bfc 	.word	0x20004bfc

0800fd98 <__assert_func>:
 800fd98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd9a:	4614      	mov	r4, r2
 800fd9c:	461a      	mov	r2, r3
 800fd9e:	4b09      	ldr	r3, [pc, #36]	; (800fdc4 <__assert_func+0x2c>)
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	4605      	mov	r5, r0
 800fda4:	68d8      	ldr	r0, [r3, #12]
 800fda6:	b14c      	cbz	r4, 800fdbc <__assert_func+0x24>
 800fda8:	4b07      	ldr	r3, [pc, #28]	; (800fdc8 <__assert_func+0x30>)
 800fdaa:	9100      	str	r1, [sp, #0]
 800fdac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fdb0:	4906      	ldr	r1, [pc, #24]	; (800fdcc <__assert_func+0x34>)
 800fdb2:	462b      	mov	r3, r5
 800fdb4:	f000 f80e 	bl	800fdd4 <fiprintf>
 800fdb8:	f000 fa64 	bl	8010284 <abort>
 800fdbc:	4b04      	ldr	r3, [pc, #16]	; (800fdd0 <__assert_func+0x38>)
 800fdbe:	461c      	mov	r4, r3
 800fdc0:	e7f3      	b.n	800fdaa <__assert_func+0x12>
 800fdc2:	bf00      	nop
 800fdc4:	20002858 	.word	0x20002858
 800fdc8:	08010ba4 	.word	0x08010ba4
 800fdcc:	08010bb1 	.word	0x08010bb1
 800fdd0:	08010bdf 	.word	0x08010bdf

0800fdd4 <fiprintf>:
 800fdd4:	b40e      	push	{r1, r2, r3}
 800fdd6:	b503      	push	{r0, r1, lr}
 800fdd8:	4601      	mov	r1, r0
 800fdda:	ab03      	add	r3, sp, #12
 800fddc:	4805      	ldr	r0, [pc, #20]	; (800fdf4 <fiprintf+0x20>)
 800fdde:	f853 2b04 	ldr.w	r2, [r3], #4
 800fde2:	6800      	ldr	r0, [r0, #0]
 800fde4:	9301      	str	r3, [sp, #4]
 800fde6:	f000 f84f 	bl	800fe88 <_vfiprintf_r>
 800fdea:	b002      	add	sp, #8
 800fdec:	f85d eb04 	ldr.w	lr, [sp], #4
 800fdf0:	b003      	add	sp, #12
 800fdf2:	4770      	bx	lr
 800fdf4:	20002858 	.word	0x20002858

0800fdf8 <__ascii_mbtowc>:
 800fdf8:	b082      	sub	sp, #8
 800fdfa:	b901      	cbnz	r1, 800fdfe <__ascii_mbtowc+0x6>
 800fdfc:	a901      	add	r1, sp, #4
 800fdfe:	b142      	cbz	r2, 800fe12 <__ascii_mbtowc+0x1a>
 800fe00:	b14b      	cbz	r3, 800fe16 <__ascii_mbtowc+0x1e>
 800fe02:	7813      	ldrb	r3, [r2, #0]
 800fe04:	600b      	str	r3, [r1, #0]
 800fe06:	7812      	ldrb	r2, [r2, #0]
 800fe08:	1e10      	subs	r0, r2, #0
 800fe0a:	bf18      	it	ne
 800fe0c:	2001      	movne	r0, #1
 800fe0e:	b002      	add	sp, #8
 800fe10:	4770      	bx	lr
 800fe12:	4610      	mov	r0, r2
 800fe14:	e7fb      	b.n	800fe0e <__ascii_mbtowc+0x16>
 800fe16:	f06f 0001 	mvn.w	r0, #1
 800fe1a:	e7f8      	b.n	800fe0e <__ascii_mbtowc+0x16>

0800fe1c <__malloc_lock>:
 800fe1c:	4801      	ldr	r0, [pc, #4]	; (800fe24 <__malloc_lock+0x8>)
 800fe1e:	f000 bbf1 	b.w	8010604 <__retarget_lock_acquire_recursive>
 800fe22:	bf00      	nop
 800fe24:	20004c00 	.word	0x20004c00

0800fe28 <__malloc_unlock>:
 800fe28:	4801      	ldr	r0, [pc, #4]	; (800fe30 <__malloc_unlock+0x8>)
 800fe2a:	f000 bbec 	b.w	8010606 <__retarget_lock_release_recursive>
 800fe2e:	bf00      	nop
 800fe30:	20004c00 	.word	0x20004c00

0800fe34 <__sfputc_r>:
 800fe34:	6893      	ldr	r3, [r2, #8]
 800fe36:	3b01      	subs	r3, #1
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	b410      	push	{r4}
 800fe3c:	6093      	str	r3, [r2, #8]
 800fe3e:	da08      	bge.n	800fe52 <__sfputc_r+0x1e>
 800fe40:	6994      	ldr	r4, [r2, #24]
 800fe42:	42a3      	cmp	r3, r4
 800fe44:	db01      	blt.n	800fe4a <__sfputc_r+0x16>
 800fe46:	290a      	cmp	r1, #10
 800fe48:	d103      	bne.n	800fe52 <__sfputc_r+0x1e>
 800fe4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe4e:	f000 b94b 	b.w	80100e8 <__swbuf_r>
 800fe52:	6813      	ldr	r3, [r2, #0]
 800fe54:	1c58      	adds	r0, r3, #1
 800fe56:	6010      	str	r0, [r2, #0]
 800fe58:	7019      	strb	r1, [r3, #0]
 800fe5a:	4608      	mov	r0, r1
 800fe5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe60:	4770      	bx	lr

0800fe62 <__sfputs_r>:
 800fe62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe64:	4606      	mov	r6, r0
 800fe66:	460f      	mov	r7, r1
 800fe68:	4614      	mov	r4, r2
 800fe6a:	18d5      	adds	r5, r2, r3
 800fe6c:	42ac      	cmp	r4, r5
 800fe6e:	d101      	bne.n	800fe74 <__sfputs_r+0x12>
 800fe70:	2000      	movs	r0, #0
 800fe72:	e007      	b.n	800fe84 <__sfputs_r+0x22>
 800fe74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe78:	463a      	mov	r2, r7
 800fe7a:	4630      	mov	r0, r6
 800fe7c:	f7ff ffda 	bl	800fe34 <__sfputc_r>
 800fe80:	1c43      	adds	r3, r0, #1
 800fe82:	d1f3      	bne.n	800fe6c <__sfputs_r+0xa>
 800fe84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fe88 <_vfiprintf_r>:
 800fe88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe8c:	460d      	mov	r5, r1
 800fe8e:	b09d      	sub	sp, #116	; 0x74
 800fe90:	4614      	mov	r4, r2
 800fe92:	4698      	mov	r8, r3
 800fe94:	4606      	mov	r6, r0
 800fe96:	b118      	cbz	r0, 800fea0 <_vfiprintf_r+0x18>
 800fe98:	6983      	ldr	r3, [r0, #24]
 800fe9a:	b90b      	cbnz	r3, 800fea0 <_vfiprintf_r+0x18>
 800fe9c:	f000 fb14 	bl	80104c8 <__sinit>
 800fea0:	4b89      	ldr	r3, [pc, #548]	; (80100c8 <_vfiprintf_r+0x240>)
 800fea2:	429d      	cmp	r5, r3
 800fea4:	d11b      	bne.n	800fede <_vfiprintf_r+0x56>
 800fea6:	6875      	ldr	r5, [r6, #4]
 800fea8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800feaa:	07d9      	lsls	r1, r3, #31
 800feac:	d405      	bmi.n	800feba <_vfiprintf_r+0x32>
 800feae:	89ab      	ldrh	r3, [r5, #12]
 800feb0:	059a      	lsls	r2, r3, #22
 800feb2:	d402      	bmi.n	800feba <_vfiprintf_r+0x32>
 800feb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800feb6:	f000 fba5 	bl	8010604 <__retarget_lock_acquire_recursive>
 800feba:	89ab      	ldrh	r3, [r5, #12]
 800febc:	071b      	lsls	r3, r3, #28
 800febe:	d501      	bpl.n	800fec4 <_vfiprintf_r+0x3c>
 800fec0:	692b      	ldr	r3, [r5, #16]
 800fec2:	b9eb      	cbnz	r3, 800ff00 <_vfiprintf_r+0x78>
 800fec4:	4629      	mov	r1, r5
 800fec6:	4630      	mov	r0, r6
 800fec8:	f000 f96e 	bl	80101a8 <__swsetup_r>
 800fecc:	b1c0      	cbz	r0, 800ff00 <_vfiprintf_r+0x78>
 800fece:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fed0:	07dc      	lsls	r4, r3, #31
 800fed2:	d50e      	bpl.n	800fef2 <_vfiprintf_r+0x6a>
 800fed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fed8:	b01d      	add	sp, #116	; 0x74
 800feda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fede:	4b7b      	ldr	r3, [pc, #492]	; (80100cc <_vfiprintf_r+0x244>)
 800fee0:	429d      	cmp	r5, r3
 800fee2:	d101      	bne.n	800fee8 <_vfiprintf_r+0x60>
 800fee4:	68b5      	ldr	r5, [r6, #8]
 800fee6:	e7df      	b.n	800fea8 <_vfiprintf_r+0x20>
 800fee8:	4b79      	ldr	r3, [pc, #484]	; (80100d0 <_vfiprintf_r+0x248>)
 800feea:	429d      	cmp	r5, r3
 800feec:	bf08      	it	eq
 800feee:	68f5      	ldreq	r5, [r6, #12]
 800fef0:	e7da      	b.n	800fea8 <_vfiprintf_r+0x20>
 800fef2:	89ab      	ldrh	r3, [r5, #12]
 800fef4:	0598      	lsls	r0, r3, #22
 800fef6:	d4ed      	bmi.n	800fed4 <_vfiprintf_r+0x4c>
 800fef8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fefa:	f000 fb84 	bl	8010606 <__retarget_lock_release_recursive>
 800fefe:	e7e9      	b.n	800fed4 <_vfiprintf_r+0x4c>
 800ff00:	2300      	movs	r3, #0
 800ff02:	9309      	str	r3, [sp, #36]	; 0x24
 800ff04:	2320      	movs	r3, #32
 800ff06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ff0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff0e:	2330      	movs	r3, #48	; 0x30
 800ff10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80100d4 <_vfiprintf_r+0x24c>
 800ff14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ff18:	f04f 0901 	mov.w	r9, #1
 800ff1c:	4623      	mov	r3, r4
 800ff1e:	469a      	mov	sl, r3
 800ff20:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff24:	b10a      	cbz	r2, 800ff2a <_vfiprintf_r+0xa2>
 800ff26:	2a25      	cmp	r2, #37	; 0x25
 800ff28:	d1f9      	bne.n	800ff1e <_vfiprintf_r+0x96>
 800ff2a:	ebba 0b04 	subs.w	fp, sl, r4
 800ff2e:	d00b      	beq.n	800ff48 <_vfiprintf_r+0xc0>
 800ff30:	465b      	mov	r3, fp
 800ff32:	4622      	mov	r2, r4
 800ff34:	4629      	mov	r1, r5
 800ff36:	4630      	mov	r0, r6
 800ff38:	f7ff ff93 	bl	800fe62 <__sfputs_r>
 800ff3c:	3001      	adds	r0, #1
 800ff3e:	f000 80aa 	beq.w	8010096 <_vfiprintf_r+0x20e>
 800ff42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff44:	445a      	add	r2, fp
 800ff46:	9209      	str	r2, [sp, #36]	; 0x24
 800ff48:	f89a 3000 	ldrb.w	r3, [sl]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	f000 80a2 	beq.w	8010096 <_vfiprintf_r+0x20e>
 800ff52:	2300      	movs	r3, #0
 800ff54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff5c:	f10a 0a01 	add.w	sl, sl, #1
 800ff60:	9304      	str	r3, [sp, #16]
 800ff62:	9307      	str	r3, [sp, #28]
 800ff64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff68:	931a      	str	r3, [sp, #104]	; 0x68
 800ff6a:	4654      	mov	r4, sl
 800ff6c:	2205      	movs	r2, #5
 800ff6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff72:	4858      	ldr	r0, [pc, #352]	; (80100d4 <_vfiprintf_r+0x24c>)
 800ff74:	f7f0 f95c 	bl	8000230 <memchr>
 800ff78:	9a04      	ldr	r2, [sp, #16]
 800ff7a:	b9d8      	cbnz	r0, 800ffb4 <_vfiprintf_r+0x12c>
 800ff7c:	06d1      	lsls	r1, r2, #27
 800ff7e:	bf44      	itt	mi
 800ff80:	2320      	movmi	r3, #32
 800ff82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff86:	0713      	lsls	r3, r2, #28
 800ff88:	bf44      	itt	mi
 800ff8a:	232b      	movmi	r3, #43	; 0x2b
 800ff8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff90:	f89a 3000 	ldrb.w	r3, [sl]
 800ff94:	2b2a      	cmp	r3, #42	; 0x2a
 800ff96:	d015      	beq.n	800ffc4 <_vfiprintf_r+0x13c>
 800ff98:	9a07      	ldr	r2, [sp, #28]
 800ff9a:	4654      	mov	r4, sl
 800ff9c:	2000      	movs	r0, #0
 800ff9e:	f04f 0c0a 	mov.w	ip, #10
 800ffa2:	4621      	mov	r1, r4
 800ffa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ffa8:	3b30      	subs	r3, #48	; 0x30
 800ffaa:	2b09      	cmp	r3, #9
 800ffac:	d94e      	bls.n	801004c <_vfiprintf_r+0x1c4>
 800ffae:	b1b0      	cbz	r0, 800ffde <_vfiprintf_r+0x156>
 800ffb0:	9207      	str	r2, [sp, #28]
 800ffb2:	e014      	b.n	800ffde <_vfiprintf_r+0x156>
 800ffb4:	eba0 0308 	sub.w	r3, r0, r8
 800ffb8:	fa09 f303 	lsl.w	r3, r9, r3
 800ffbc:	4313      	orrs	r3, r2
 800ffbe:	9304      	str	r3, [sp, #16]
 800ffc0:	46a2      	mov	sl, r4
 800ffc2:	e7d2      	b.n	800ff6a <_vfiprintf_r+0xe2>
 800ffc4:	9b03      	ldr	r3, [sp, #12]
 800ffc6:	1d19      	adds	r1, r3, #4
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	9103      	str	r1, [sp, #12]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	bfbb      	ittet	lt
 800ffd0:	425b      	neglt	r3, r3
 800ffd2:	f042 0202 	orrlt.w	r2, r2, #2
 800ffd6:	9307      	strge	r3, [sp, #28]
 800ffd8:	9307      	strlt	r3, [sp, #28]
 800ffda:	bfb8      	it	lt
 800ffdc:	9204      	strlt	r2, [sp, #16]
 800ffde:	7823      	ldrb	r3, [r4, #0]
 800ffe0:	2b2e      	cmp	r3, #46	; 0x2e
 800ffe2:	d10c      	bne.n	800fffe <_vfiprintf_r+0x176>
 800ffe4:	7863      	ldrb	r3, [r4, #1]
 800ffe6:	2b2a      	cmp	r3, #42	; 0x2a
 800ffe8:	d135      	bne.n	8010056 <_vfiprintf_r+0x1ce>
 800ffea:	9b03      	ldr	r3, [sp, #12]
 800ffec:	1d1a      	adds	r2, r3, #4
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	9203      	str	r2, [sp, #12]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	bfb8      	it	lt
 800fff6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fffa:	3402      	adds	r4, #2
 800fffc:	9305      	str	r3, [sp, #20]
 800fffe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80100e4 <_vfiprintf_r+0x25c>
 8010002:	7821      	ldrb	r1, [r4, #0]
 8010004:	2203      	movs	r2, #3
 8010006:	4650      	mov	r0, sl
 8010008:	f7f0 f912 	bl	8000230 <memchr>
 801000c:	b140      	cbz	r0, 8010020 <_vfiprintf_r+0x198>
 801000e:	2340      	movs	r3, #64	; 0x40
 8010010:	eba0 000a 	sub.w	r0, r0, sl
 8010014:	fa03 f000 	lsl.w	r0, r3, r0
 8010018:	9b04      	ldr	r3, [sp, #16]
 801001a:	4303      	orrs	r3, r0
 801001c:	3401      	adds	r4, #1
 801001e:	9304      	str	r3, [sp, #16]
 8010020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010024:	482c      	ldr	r0, [pc, #176]	; (80100d8 <_vfiprintf_r+0x250>)
 8010026:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801002a:	2206      	movs	r2, #6
 801002c:	f7f0 f900 	bl	8000230 <memchr>
 8010030:	2800      	cmp	r0, #0
 8010032:	d03f      	beq.n	80100b4 <_vfiprintf_r+0x22c>
 8010034:	4b29      	ldr	r3, [pc, #164]	; (80100dc <_vfiprintf_r+0x254>)
 8010036:	bb1b      	cbnz	r3, 8010080 <_vfiprintf_r+0x1f8>
 8010038:	9b03      	ldr	r3, [sp, #12]
 801003a:	3307      	adds	r3, #7
 801003c:	f023 0307 	bic.w	r3, r3, #7
 8010040:	3308      	adds	r3, #8
 8010042:	9303      	str	r3, [sp, #12]
 8010044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010046:	443b      	add	r3, r7
 8010048:	9309      	str	r3, [sp, #36]	; 0x24
 801004a:	e767      	b.n	800ff1c <_vfiprintf_r+0x94>
 801004c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010050:	460c      	mov	r4, r1
 8010052:	2001      	movs	r0, #1
 8010054:	e7a5      	b.n	800ffa2 <_vfiprintf_r+0x11a>
 8010056:	2300      	movs	r3, #0
 8010058:	3401      	adds	r4, #1
 801005a:	9305      	str	r3, [sp, #20]
 801005c:	4619      	mov	r1, r3
 801005e:	f04f 0c0a 	mov.w	ip, #10
 8010062:	4620      	mov	r0, r4
 8010064:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010068:	3a30      	subs	r2, #48	; 0x30
 801006a:	2a09      	cmp	r2, #9
 801006c:	d903      	bls.n	8010076 <_vfiprintf_r+0x1ee>
 801006e:	2b00      	cmp	r3, #0
 8010070:	d0c5      	beq.n	800fffe <_vfiprintf_r+0x176>
 8010072:	9105      	str	r1, [sp, #20]
 8010074:	e7c3      	b.n	800fffe <_vfiprintf_r+0x176>
 8010076:	fb0c 2101 	mla	r1, ip, r1, r2
 801007a:	4604      	mov	r4, r0
 801007c:	2301      	movs	r3, #1
 801007e:	e7f0      	b.n	8010062 <_vfiprintf_r+0x1da>
 8010080:	ab03      	add	r3, sp, #12
 8010082:	9300      	str	r3, [sp, #0]
 8010084:	462a      	mov	r2, r5
 8010086:	4b16      	ldr	r3, [pc, #88]	; (80100e0 <_vfiprintf_r+0x258>)
 8010088:	a904      	add	r1, sp, #16
 801008a:	4630      	mov	r0, r6
 801008c:	f7fd ffa8 	bl	800dfe0 <_printf_float>
 8010090:	4607      	mov	r7, r0
 8010092:	1c78      	adds	r0, r7, #1
 8010094:	d1d6      	bne.n	8010044 <_vfiprintf_r+0x1bc>
 8010096:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010098:	07d9      	lsls	r1, r3, #31
 801009a:	d405      	bmi.n	80100a8 <_vfiprintf_r+0x220>
 801009c:	89ab      	ldrh	r3, [r5, #12]
 801009e:	059a      	lsls	r2, r3, #22
 80100a0:	d402      	bmi.n	80100a8 <_vfiprintf_r+0x220>
 80100a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80100a4:	f000 faaf 	bl	8010606 <__retarget_lock_release_recursive>
 80100a8:	89ab      	ldrh	r3, [r5, #12]
 80100aa:	065b      	lsls	r3, r3, #25
 80100ac:	f53f af12 	bmi.w	800fed4 <_vfiprintf_r+0x4c>
 80100b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80100b2:	e711      	b.n	800fed8 <_vfiprintf_r+0x50>
 80100b4:	ab03      	add	r3, sp, #12
 80100b6:	9300      	str	r3, [sp, #0]
 80100b8:	462a      	mov	r2, r5
 80100ba:	4b09      	ldr	r3, [pc, #36]	; (80100e0 <_vfiprintf_r+0x258>)
 80100bc:	a904      	add	r1, sp, #16
 80100be:	4630      	mov	r0, r6
 80100c0:	f7fe fa32 	bl	800e528 <_printf_i>
 80100c4:	e7e4      	b.n	8010090 <_vfiprintf_r+0x208>
 80100c6:	bf00      	nop
 80100c8:	08010d1c 	.word	0x08010d1c
 80100cc:	08010d3c 	.word	0x08010d3c
 80100d0:	08010cfc 	.word	0x08010cfc
 80100d4:	08010bea 	.word	0x08010bea
 80100d8:	08010bf4 	.word	0x08010bf4
 80100dc:	0800dfe1 	.word	0x0800dfe1
 80100e0:	0800fe63 	.word	0x0800fe63
 80100e4:	08010bf0 	.word	0x08010bf0

080100e8 <__swbuf_r>:
 80100e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100ea:	460e      	mov	r6, r1
 80100ec:	4614      	mov	r4, r2
 80100ee:	4605      	mov	r5, r0
 80100f0:	b118      	cbz	r0, 80100fa <__swbuf_r+0x12>
 80100f2:	6983      	ldr	r3, [r0, #24]
 80100f4:	b90b      	cbnz	r3, 80100fa <__swbuf_r+0x12>
 80100f6:	f000 f9e7 	bl	80104c8 <__sinit>
 80100fa:	4b21      	ldr	r3, [pc, #132]	; (8010180 <__swbuf_r+0x98>)
 80100fc:	429c      	cmp	r4, r3
 80100fe:	d12b      	bne.n	8010158 <__swbuf_r+0x70>
 8010100:	686c      	ldr	r4, [r5, #4]
 8010102:	69a3      	ldr	r3, [r4, #24]
 8010104:	60a3      	str	r3, [r4, #8]
 8010106:	89a3      	ldrh	r3, [r4, #12]
 8010108:	071a      	lsls	r2, r3, #28
 801010a:	d52f      	bpl.n	801016c <__swbuf_r+0x84>
 801010c:	6923      	ldr	r3, [r4, #16]
 801010e:	b36b      	cbz	r3, 801016c <__swbuf_r+0x84>
 8010110:	6923      	ldr	r3, [r4, #16]
 8010112:	6820      	ldr	r0, [r4, #0]
 8010114:	1ac0      	subs	r0, r0, r3
 8010116:	6963      	ldr	r3, [r4, #20]
 8010118:	b2f6      	uxtb	r6, r6
 801011a:	4283      	cmp	r3, r0
 801011c:	4637      	mov	r7, r6
 801011e:	dc04      	bgt.n	801012a <__swbuf_r+0x42>
 8010120:	4621      	mov	r1, r4
 8010122:	4628      	mov	r0, r5
 8010124:	f000 f93c 	bl	80103a0 <_fflush_r>
 8010128:	bb30      	cbnz	r0, 8010178 <__swbuf_r+0x90>
 801012a:	68a3      	ldr	r3, [r4, #8]
 801012c:	3b01      	subs	r3, #1
 801012e:	60a3      	str	r3, [r4, #8]
 8010130:	6823      	ldr	r3, [r4, #0]
 8010132:	1c5a      	adds	r2, r3, #1
 8010134:	6022      	str	r2, [r4, #0]
 8010136:	701e      	strb	r6, [r3, #0]
 8010138:	6963      	ldr	r3, [r4, #20]
 801013a:	3001      	adds	r0, #1
 801013c:	4283      	cmp	r3, r0
 801013e:	d004      	beq.n	801014a <__swbuf_r+0x62>
 8010140:	89a3      	ldrh	r3, [r4, #12]
 8010142:	07db      	lsls	r3, r3, #31
 8010144:	d506      	bpl.n	8010154 <__swbuf_r+0x6c>
 8010146:	2e0a      	cmp	r6, #10
 8010148:	d104      	bne.n	8010154 <__swbuf_r+0x6c>
 801014a:	4621      	mov	r1, r4
 801014c:	4628      	mov	r0, r5
 801014e:	f000 f927 	bl	80103a0 <_fflush_r>
 8010152:	b988      	cbnz	r0, 8010178 <__swbuf_r+0x90>
 8010154:	4638      	mov	r0, r7
 8010156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010158:	4b0a      	ldr	r3, [pc, #40]	; (8010184 <__swbuf_r+0x9c>)
 801015a:	429c      	cmp	r4, r3
 801015c:	d101      	bne.n	8010162 <__swbuf_r+0x7a>
 801015e:	68ac      	ldr	r4, [r5, #8]
 8010160:	e7cf      	b.n	8010102 <__swbuf_r+0x1a>
 8010162:	4b09      	ldr	r3, [pc, #36]	; (8010188 <__swbuf_r+0xa0>)
 8010164:	429c      	cmp	r4, r3
 8010166:	bf08      	it	eq
 8010168:	68ec      	ldreq	r4, [r5, #12]
 801016a:	e7ca      	b.n	8010102 <__swbuf_r+0x1a>
 801016c:	4621      	mov	r1, r4
 801016e:	4628      	mov	r0, r5
 8010170:	f000 f81a 	bl	80101a8 <__swsetup_r>
 8010174:	2800      	cmp	r0, #0
 8010176:	d0cb      	beq.n	8010110 <__swbuf_r+0x28>
 8010178:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801017c:	e7ea      	b.n	8010154 <__swbuf_r+0x6c>
 801017e:	bf00      	nop
 8010180:	08010d1c 	.word	0x08010d1c
 8010184:	08010d3c 	.word	0x08010d3c
 8010188:	08010cfc 	.word	0x08010cfc

0801018c <__ascii_wctomb>:
 801018c:	b149      	cbz	r1, 80101a2 <__ascii_wctomb+0x16>
 801018e:	2aff      	cmp	r2, #255	; 0xff
 8010190:	bf85      	ittet	hi
 8010192:	238a      	movhi	r3, #138	; 0x8a
 8010194:	6003      	strhi	r3, [r0, #0]
 8010196:	700a      	strbls	r2, [r1, #0]
 8010198:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801019c:	bf98      	it	ls
 801019e:	2001      	movls	r0, #1
 80101a0:	4770      	bx	lr
 80101a2:	4608      	mov	r0, r1
 80101a4:	4770      	bx	lr
	...

080101a8 <__swsetup_r>:
 80101a8:	4b32      	ldr	r3, [pc, #200]	; (8010274 <__swsetup_r+0xcc>)
 80101aa:	b570      	push	{r4, r5, r6, lr}
 80101ac:	681d      	ldr	r5, [r3, #0]
 80101ae:	4606      	mov	r6, r0
 80101b0:	460c      	mov	r4, r1
 80101b2:	b125      	cbz	r5, 80101be <__swsetup_r+0x16>
 80101b4:	69ab      	ldr	r3, [r5, #24]
 80101b6:	b913      	cbnz	r3, 80101be <__swsetup_r+0x16>
 80101b8:	4628      	mov	r0, r5
 80101ba:	f000 f985 	bl	80104c8 <__sinit>
 80101be:	4b2e      	ldr	r3, [pc, #184]	; (8010278 <__swsetup_r+0xd0>)
 80101c0:	429c      	cmp	r4, r3
 80101c2:	d10f      	bne.n	80101e4 <__swsetup_r+0x3c>
 80101c4:	686c      	ldr	r4, [r5, #4]
 80101c6:	89a3      	ldrh	r3, [r4, #12]
 80101c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80101cc:	0719      	lsls	r1, r3, #28
 80101ce:	d42c      	bmi.n	801022a <__swsetup_r+0x82>
 80101d0:	06dd      	lsls	r5, r3, #27
 80101d2:	d411      	bmi.n	80101f8 <__swsetup_r+0x50>
 80101d4:	2309      	movs	r3, #9
 80101d6:	6033      	str	r3, [r6, #0]
 80101d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80101dc:	81a3      	strh	r3, [r4, #12]
 80101de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80101e2:	e03e      	b.n	8010262 <__swsetup_r+0xba>
 80101e4:	4b25      	ldr	r3, [pc, #148]	; (801027c <__swsetup_r+0xd4>)
 80101e6:	429c      	cmp	r4, r3
 80101e8:	d101      	bne.n	80101ee <__swsetup_r+0x46>
 80101ea:	68ac      	ldr	r4, [r5, #8]
 80101ec:	e7eb      	b.n	80101c6 <__swsetup_r+0x1e>
 80101ee:	4b24      	ldr	r3, [pc, #144]	; (8010280 <__swsetup_r+0xd8>)
 80101f0:	429c      	cmp	r4, r3
 80101f2:	bf08      	it	eq
 80101f4:	68ec      	ldreq	r4, [r5, #12]
 80101f6:	e7e6      	b.n	80101c6 <__swsetup_r+0x1e>
 80101f8:	0758      	lsls	r0, r3, #29
 80101fa:	d512      	bpl.n	8010222 <__swsetup_r+0x7a>
 80101fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80101fe:	b141      	cbz	r1, 8010212 <__swsetup_r+0x6a>
 8010200:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010204:	4299      	cmp	r1, r3
 8010206:	d002      	beq.n	801020e <__swsetup_r+0x66>
 8010208:	4630      	mov	r0, r6
 801020a:	f7ff fcd5 	bl	800fbb8 <_free_r>
 801020e:	2300      	movs	r3, #0
 8010210:	6363      	str	r3, [r4, #52]	; 0x34
 8010212:	89a3      	ldrh	r3, [r4, #12]
 8010214:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010218:	81a3      	strh	r3, [r4, #12]
 801021a:	2300      	movs	r3, #0
 801021c:	6063      	str	r3, [r4, #4]
 801021e:	6923      	ldr	r3, [r4, #16]
 8010220:	6023      	str	r3, [r4, #0]
 8010222:	89a3      	ldrh	r3, [r4, #12]
 8010224:	f043 0308 	orr.w	r3, r3, #8
 8010228:	81a3      	strh	r3, [r4, #12]
 801022a:	6923      	ldr	r3, [r4, #16]
 801022c:	b94b      	cbnz	r3, 8010242 <__swsetup_r+0x9a>
 801022e:	89a3      	ldrh	r3, [r4, #12]
 8010230:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010238:	d003      	beq.n	8010242 <__swsetup_r+0x9a>
 801023a:	4621      	mov	r1, r4
 801023c:	4630      	mov	r0, r6
 801023e:	f000 fa09 	bl	8010654 <__smakebuf_r>
 8010242:	89a0      	ldrh	r0, [r4, #12]
 8010244:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010248:	f010 0301 	ands.w	r3, r0, #1
 801024c:	d00a      	beq.n	8010264 <__swsetup_r+0xbc>
 801024e:	2300      	movs	r3, #0
 8010250:	60a3      	str	r3, [r4, #8]
 8010252:	6963      	ldr	r3, [r4, #20]
 8010254:	425b      	negs	r3, r3
 8010256:	61a3      	str	r3, [r4, #24]
 8010258:	6923      	ldr	r3, [r4, #16]
 801025a:	b943      	cbnz	r3, 801026e <__swsetup_r+0xc6>
 801025c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010260:	d1ba      	bne.n	80101d8 <__swsetup_r+0x30>
 8010262:	bd70      	pop	{r4, r5, r6, pc}
 8010264:	0781      	lsls	r1, r0, #30
 8010266:	bf58      	it	pl
 8010268:	6963      	ldrpl	r3, [r4, #20]
 801026a:	60a3      	str	r3, [r4, #8]
 801026c:	e7f4      	b.n	8010258 <__swsetup_r+0xb0>
 801026e:	2000      	movs	r0, #0
 8010270:	e7f7      	b.n	8010262 <__swsetup_r+0xba>
 8010272:	bf00      	nop
 8010274:	20002858 	.word	0x20002858
 8010278:	08010d1c 	.word	0x08010d1c
 801027c:	08010d3c 	.word	0x08010d3c
 8010280:	08010cfc 	.word	0x08010cfc

08010284 <abort>:
 8010284:	b508      	push	{r3, lr}
 8010286:	2006      	movs	r0, #6
 8010288:	f000 fa4c 	bl	8010724 <raise>
 801028c:	2001      	movs	r0, #1
 801028e:	f7f1 fc5b 	bl	8001b48 <_exit>
	...

08010294 <__sflush_r>:
 8010294:	898a      	ldrh	r2, [r1, #12]
 8010296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801029a:	4605      	mov	r5, r0
 801029c:	0710      	lsls	r0, r2, #28
 801029e:	460c      	mov	r4, r1
 80102a0:	d458      	bmi.n	8010354 <__sflush_r+0xc0>
 80102a2:	684b      	ldr	r3, [r1, #4]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	dc05      	bgt.n	80102b4 <__sflush_r+0x20>
 80102a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	dc02      	bgt.n	80102b4 <__sflush_r+0x20>
 80102ae:	2000      	movs	r0, #0
 80102b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80102b6:	2e00      	cmp	r6, #0
 80102b8:	d0f9      	beq.n	80102ae <__sflush_r+0x1a>
 80102ba:	2300      	movs	r3, #0
 80102bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80102c0:	682f      	ldr	r7, [r5, #0]
 80102c2:	602b      	str	r3, [r5, #0]
 80102c4:	d032      	beq.n	801032c <__sflush_r+0x98>
 80102c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80102c8:	89a3      	ldrh	r3, [r4, #12]
 80102ca:	075a      	lsls	r2, r3, #29
 80102cc:	d505      	bpl.n	80102da <__sflush_r+0x46>
 80102ce:	6863      	ldr	r3, [r4, #4]
 80102d0:	1ac0      	subs	r0, r0, r3
 80102d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80102d4:	b10b      	cbz	r3, 80102da <__sflush_r+0x46>
 80102d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80102d8:	1ac0      	subs	r0, r0, r3
 80102da:	2300      	movs	r3, #0
 80102dc:	4602      	mov	r2, r0
 80102de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80102e0:	6a21      	ldr	r1, [r4, #32]
 80102e2:	4628      	mov	r0, r5
 80102e4:	47b0      	blx	r6
 80102e6:	1c43      	adds	r3, r0, #1
 80102e8:	89a3      	ldrh	r3, [r4, #12]
 80102ea:	d106      	bne.n	80102fa <__sflush_r+0x66>
 80102ec:	6829      	ldr	r1, [r5, #0]
 80102ee:	291d      	cmp	r1, #29
 80102f0:	d82c      	bhi.n	801034c <__sflush_r+0xb8>
 80102f2:	4a2a      	ldr	r2, [pc, #168]	; (801039c <__sflush_r+0x108>)
 80102f4:	40ca      	lsrs	r2, r1
 80102f6:	07d6      	lsls	r6, r2, #31
 80102f8:	d528      	bpl.n	801034c <__sflush_r+0xb8>
 80102fa:	2200      	movs	r2, #0
 80102fc:	6062      	str	r2, [r4, #4]
 80102fe:	04d9      	lsls	r1, r3, #19
 8010300:	6922      	ldr	r2, [r4, #16]
 8010302:	6022      	str	r2, [r4, #0]
 8010304:	d504      	bpl.n	8010310 <__sflush_r+0x7c>
 8010306:	1c42      	adds	r2, r0, #1
 8010308:	d101      	bne.n	801030e <__sflush_r+0x7a>
 801030a:	682b      	ldr	r3, [r5, #0]
 801030c:	b903      	cbnz	r3, 8010310 <__sflush_r+0x7c>
 801030e:	6560      	str	r0, [r4, #84]	; 0x54
 8010310:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010312:	602f      	str	r7, [r5, #0]
 8010314:	2900      	cmp	r1, #0
 8010316:	d0ca      	beq.n	80102ae <__sflush_r+0x1a>
 8010318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801031c:	4299      	cmp	r1, r3
 801031e:	d002      	beq.n	8010326 <__sflush_r+0x92>
 8010320:	4628      	mov	r0, r5
 8010322:	f7ff fc49 	bl	800fbb8 <_free_r>
 8010326:	2000      	movs	r0, #0
 8010328:	6360      	str	r0, [r4, #52]	; 0x34
 801032a:	e7c1      	b.n	80102b0 <__sflush_r+0x1c>
 801032c:	6a21      	ldr	r1, [r4, #32]
 801032e:	2301      	movs	r3, #1
 8010330:	4628      	mov	r0, r5
 8010332:	47b0      	blx	r6
 8010334:	1c41      	adds	r1, r0, #1
 8010336:	d1c7      	bne.n	80102c8 <__sflush_r+0x34>
 8010338:	682b      	ldr	r3, [r5, #0]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d0c4      	beq.n	80102c8 <__sflush_r+0x34>
 801033e:	2b1d      	cmp	r3, #29
 8010340:	d001      	beq.n	8010346 <__sflush_r+0xb2>
 8010342:	2b16      	cmp	r3, #22
 8010344:	d101      	bne.n	801034a <__sflush_r+0xb6>
 8010346:	602f      	str	r7, [r5, #0]
 8010348:	e7b1      	b.n	80102ae <__sflush_r+0x1a>
 801034a:	89a3      	ldrh	r3, [r4, #12]
 801034c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010350:	81a3      	strh	r3, [r4, #12]
 8010352:	e7ad      	b.n	80102b0 <__sflush_r+0x1c>
 8010354:	690f      	ldr	r7, [r1, #16]
 8010356:	2f00      	cmp	r7, #0
 8010358:	d0a9      	beq.n	80102ae <__sflush_r+0x1a>
 801035a:	0793      	lsls	r3, r2, #30
 801035c:	680e      	ldr	r6, [r1, #0]
 801035e:	bf08      	it	eq
 8010360:	694b      	ldreq	r3, [r1, #20]
 8010362:	600f      	str	r7, [r1, #0]
 8010364:	bf18      	it	ne
 8010366:	2300      	movne	r3, #0
 8010368:	eba6 0807 	sub.w	r8, r6, r7
 801036c:	608b      	str	r3, [r1, #8]
 801036e:	f1b8 0f00 	cmp.w	r8, #0
 8010372:	dd9c      	ble.n	80102ae <__sflush_r+0x1a>
 8010374:	6a21      	ldr	r1, [r4, #32]
 8010376:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010378:	4643      	mov	r3, r8
 801037a:	463a      	mov	r2, r7
 801037c:	4628      	mov	r0, r5
 801037e:	47b0      	blx	r6
 8010380:	2800      	cmp	r0, #0
 8010382:	dc06      	bgt.n	8010392 <__sflush_r+0xfe>
 8010384:	89a3      	ldrh	r3, [r4, #12]
 8010386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801038a:	81a3      	strh	r3, [r4, #12]
 801038c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010390:	e78e      	b.n	80102b0 <__sflush_r+0x1c>
 8010392:	4407      	add	r7, r0
 8010394:	eba8 0800 	sub.w	r8, r8, r0
 8010398:	e7e9      	b.n	801036e <__sflush_r+0xda>
 801039a:	bf00      	nop
 801039c:	20400001 	.word	0x20400001

080103a0 <_fflush_r>:
 80103a0:	b538      	push	{r3, r4, r5, lr}
 80103a2:	690b      	ldr	r3, [r1, #16]
 80103a4:	4605      	mov	r5, r0
 80103a6:	460c      	mov	r4, r1
 80103a8:	b913      	cbnz	r3, 80103b0 <_fflush_r+0x10>
 80103aa:	2500      	movs	r5, #0
 80103ac:	4628      	mov	r0, r5
 80103ae:	bd38      	pop	{r3, r4, r5, pc}
 80103b0:	b118      	cbz	r0, 80103ba <_fflush_r+0x1a>
 80103b2:	6983      	ldr	r3, [r0, #24]
 80103b4:	b90b      	cbnz	r3, 80103ba <_fflush_r+0x1a>
 80103b6:	f000 f887 	bl	80104c8 <__sinit>
 80103ba:	4b14      	ldr	r3, [pc, #80]	; (801040c <_fflush_r+0x6c>)
 80103bc:	429c      	cmp	r4, r3
 80103be:	d11b      	bne.n	80103f8 <_fflush_r+0x58>
 80103c0:	686c      	ldr	r4, [r5, #4]
 80103c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d0ef      	beq.n	80103aa <_fflush_r+0xa>
 80103ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80103cc:	07d0      	lsls	r0, r2, #31
 80103ce:	d404      	bmi.n	80103da <_fflush_r+0x3a>
 80103d0:	0599      	lsls	r1, r3, #22
 80103d2:	d402      	bmi.n	80103da <_fflush_r+0x3a>
 80103d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80103d6:	f000 f915 	bl	8010604 <__retarget_lock_acquire_recursive>
 80103da:	4628      	mov	r0, r5
 80103dc:	4621      	mov	r1, r4
 80103de:	f7ff ff59 	bl	8010294 <__sflush_r>
 80103e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80103e4:	07da      	lsls	r2, r3, #31
 80103e6:	4605      	mov	r5, r0
 80103e8:	d4e0      	bmi.n	80103ac <_fflush_r+0xc>
 80103ea:	89a3      	ldrh	r3, [r4, #12]
 80103ec:	059b      	lsls	r3, r3, #22
 80103ee:	d4dd      	bmi.n	80103ac <_fflush_r+0xc>
 80103f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80103f2:	f000 f908 	bl	8010606 <__retarget_lock_release_recursive>
 80103f6:	e7d9      	b.n	80103ac <_fflush_r+0xc>
 80103f8:	4b05      	ldr	r3, [pc, #20]	; (8010410 <_fflush_r+0x70>)
 80103fa:	429c      	cmp	r4, r3
 80103fc:	d101      	bne.n	8010402 <_fflush_r+0x62>
 80103fe:	68ac      	ldr	r4, [r5, #8]
 8010400:	e7df      	b.n	80103c2 <_fflush_r+0x22>
 8010402:	4b04      	ldr	r3, [pc, #16]	; (8010414 <_fflush_r+0x74>)
 8010404:	429c      	cmp	r4, r3
 8010406:	bf08      	it	eq
 8010408:	68ec      	ldreq	r4, [r5, #12]
 801040a:	e7da      	b.n	80103c2 <_fflush_r+0x22>
 801040c:	08010d1c 	.word	0x08010d1c
 8010410:	08010d3c 	.word	0x08010d3c
 8010414:	08010cfc 	.word	0x08010cfc

08010418 <std>:
 8010418:	2300      	movs	r3, #0
 801041a:	b510      	push	{r4, lr}
 801041c:	4604      	mov	r4, r0
 801041e:	e9c0 3300 	strd	r3, r3, [r0]
 8010422:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010426:	6083      	str	r3, [r0, #8]
 8010428:	8181      	strh	r1, [r0, #12]
 801042a:	6643      	str	r3, [r0, #100]	; 0x64
 801042c:	81c2      	strh	r2, [r0, #14]
 801042e:	6183      	str	r3, [r0, #24]
 8010430:	4619      	mov	r1, r3
 8010432:	2208      	movs	r2, #8
 8010434:	305c      	adds	r0, #92	; 0x5c
 8010436:	f7fd fd2b 	bl	800de90 <memset>
 801043a:	4b05      	ldr	r3, [pc, #20]	; (8010450 <std+0x38>)
 801043c:	6263      	str	r3, [r4, #36]	; 0x24
 801043e:	4b05      	ldr	r3, [pc, #20]	; (8010454 <std+0x3c>)
 8010440:	62a3      	str	r3, [r4, #40]	; 0x28
 8010442:	4b05      	ldr	r3, [pc, #20]	; (8010458 <std+0x40>)
 8010444:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010446:	4b05      	ldr	r3, [pc, #20]	; (801045c <std+0x44>)
 8010448:	6224      	str	r4, [r4, #32]
 801044a:	6323      	str	r3, [r4, #48]	; 0x30
 801044c:	bd10      	pop	{r4, pc}
 801044e:	bf00      	nop
 8010450:	0801075d 	.word	0x0801075d
 8010454:	0801077f 	.word	0x0801077f
 8010458:	080107b7 	.word	0x080107b7
 801045c:	080107db 	.word	0x080107db

08010460 <_cleanup_r>:
 8010460:	4901      	ldr	r1, [pc, #4]	; (8010468 <_cleanup_r+0x8>)
 8010462:	f000 b8af 	b.w	80105c4 <_fwalk_reent>
 8010466:	bf00      	nop
 8010468:	080103a1 	.word	0x080103a1

0801046c <__sfmoreglue>:
 801046c:	b570      	push	{r4, r5, r6, lr}
 801046e:	2268      	movs	r2, #104	; 0x68
 8010470:	1e4d      	subs	r5, r1, #1
 8010472:	4355      	muls	r5, r2
 8010474:	460e      	mov	r6, r1
 8010476:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801047a:	f7ff fc09 	bl	800fc90 <_malloc_r>
 801047e:	4604      	mov	r4, r0
 8010480:	b140      	cbz	r0, 8010494 <__sfmoreglue+0x28>
 8010482:	2100      	movs	r1, #0
 8010484:	e9c0 1600 	strd	r1, r6, [r0]
 8010488:	300c      	adds	r0, #12
 801048a:	60a0      	str	r0, [r4, #8]
 801048c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010490:	f7fd fcfe 	bl	800de90 <memset>
 8010494:	4620      	mov	r0, r4
 8010496:	bd70      	pop	{r4, r5, r6, pc}

08010498 <__sfp_lock_acquire>:
 8010498:	4801      	ldr	r0, [pc, #4]	; (80104a0 <__sfp_lock_acquire+0x8>)
 801049a:	f000 b8b3 	b.w	8010604 <__retarget_lock_acquire_recursive>
 801049e:	bf00      	nop
 80104a0:	20004c01 	.word	0x20004c01

080104a4 <__sfp_lock_release>:
 80104a4:	4801      	ldr	r0, [pc, #4]	; (80104ac <__sfp_lock_release+0x8>)
 80104a6:	f000 b8ae 	b.w	8010606 <__retarget_lock_release_recursive>
 80104aa:	bf00      	nop
 80104ac:	20004c01 	.word	0x20004c01

080104b0 <__sinit_lock_acquire>:
 80104b0:	4801      	ldr	r0, [pc, #4]	; (80104b8 <__sinit_lock_acquire+0x8>)
 80104b2:	f000 b8a7 	b.w	8010604 <__retarget_lock_acquire_recursive>
 80104b6:	bf00      	nop
 80104b8:	20004c02 	.word	0x20004c02

080104bc <__sinit_lock_release>:
 80104bc:	4801      	ldr	r0, [pc, #4]	; (80104c4 <__sinit_lock_release+0x8>)
 80104be:	f000 b8a2 	b.w	8010606 <__retarget_lock_release_recursive>
 80104c2:	bf00      	nop
 80104c4:	20004c02 	.word	0x20004c02

080104c8 <__sinit>:
 80104c8:	b510      	push	{r4, lr}
 80104ca:	4604      	mov	r4, r0
 80104cc:	f7ff fff0 	bl	80104b0 <__sinit_lock_acquire>
 80104d0:	69a3      	ldr	r3, [r4, #24]
 80104d2:	b11b      	cbz	r3, 80104dc <__sinit+0x14>
 80104d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104d8:	f7ff bff0 	b.w	80104bc <__sinit_lock_release>
 80104dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80104e0:	6523      	str	r3, [r4, #80]	; 0x50
 80104e2:	4b13      	ldr	r3, [pc, #76]	; (8010530 <__sinit+0x68>)
 80104e4:	4a13      	ldr	r2, [pc, #76]	; (8010534 <__sinit+0x6c>)
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80104ea:	42a3      	cmp	r3, r4
 80104ec:	bf04      	itt	eq
 80104ee:	2301      	moveq	r3, #1
 80104f0:	61a3      	streq	r3, [r4, #24]
 80104f2:	4620      	mov	r0, r4
 80104f4:	f000 f820 	bl	8010538 <__sfp>
 80104f8:	6060      	str	r0, [r4, #4]
 80104fa:	4620      	mov	r0, r4
 80104fc:	f000 f81c 	bl	8010538 <__sfp>
 8010500:	60a0      	str	r0, [r4, #8]
 8010502:	4620      	mov	r0, r4
 8010504:	f000 f818 	bl	8010538 <__sfp>
 8010508:	2200      	movs	r2, #0
 801050a:	60e0      	str	r0, [r4, #12]
 801050c:	2104      	movs	r1, #4
 801050e:	6860      	ldr	r0, [r4, #4]
 8010510:	f7ff ff82 	bl	8010418 <std>
 8010514:	68a0      	ldr	r0, [r4, #8]
 8010516:	2201      	movs	r2, #1
 8010518:	2109      	movs	r1, #9
 801051a:	f7ff ff7d 	bl	8010418 <std>
 801051e:	68e0      	ldr	r0, [r4, #12]
 8010520:	2202      	movs	r2, #2
 8010522:	2112      	movs	r1, #18
 8010524:	f7ff ff78 	bl	8010418 <std>
 8010528:	2301      	movs	r3, #1
 801052a:	61a3      	str	r3, [r4, #24]
 801052c:	e7d2      	b.n	80104d4 <__sinit+0xc>
 801052e:	bf00      	nop
 8010530:	08010984 	.word	0x08010984
 8010534:	08010461 	.word	0x08010461

08010538 <__sfp>:
 8010538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801053a:	4607      	mov	r7, r0
 801053c:	f7ff ffac 	bl	8010498 <__sfp_lock_acquire>
 8010540:	4b1e      	ldr	r3, [pc, #120]	; (80105bc <__sfp+0x84>)
 8010542:	681e      	ldr	r6, [r3, #0]
 8010544:	69b3      	ldr	r3, [r6, #24]
 8010546:	b913      	cbnz	r3, 801054e <__sfp+0x16>
 8010548:	4630      	mov	r0, r6
 801054a:	f7ff ffbd 	bl	80104c8 <__sinit>
 801054e:	3648      	adds	r6, #72	; 0x48
 8010550:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010554:	3b01      	subs	r3, #1
 8010556:	d503      	bpl.n	8010560 <__sfp+0x28>
 8010558:	6833      	ldr	r3, [r6, #0]
 801055a:	b30b      	cbz	r3, 80105a0 <__sfp+0x68>
 801055c:	6836      	ldr	r6, [r6, #0]
 801055e:	e7f7      	b.n	8010550 <__sfp+0x18>
 8010560:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010564:	b9d5      	cbnz	r5, 801059c <__sfp+0x64>
 8010566:	4b16      	ldr	r3, [pc, #88]	; (80105c0 <__sfp+0x88>)
 8010568:	60e3      	str	r3, [r4, #12]
 801056a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801056e:	6665      	str	r5, [r4, #100]	; 0x64
 8010570:	f000 f847 	bl	8010602 <__retarget_lock_init_recursive>
 8010574:	f7ff ff96 	bl	80104a4 <__sfp_lock_release>
 8010578:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801057c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010580:	6025      	str	r5, [r4, #0]
 8010582:	61a5      	str	r5, [r4, #24]
 8010584:	2208      	movs	r2, #8
 8010586:	4629      	mov	r1, r5
 8010588:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801058c:	f7fd fc80 	bl	800de90 <memset>
 8010590:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010594:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010598:	4620      	mov	r0, r4
 801059a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801059c:	3468      	adds	r4, #104	; 0x68
 801059e:	e7d9      	b.n	8010554 <__sfp+0x1c>
 80105a0:	2104      	movs	r1, #4
 80105a2:	4638      	mov	r0, r7
 80105a4:	f7ff ff62 	bl	801046c <__sfmoreglue>
 80105a8:	4604      	mov	r4, r0
 80105aa:	6030      	str	r0, [r6, #0]
 80105ac:	2800      	cmp	r0, #0
 80105ae:	d1d5      	bne.n	801055c <__sfp+0x24>
 80105b0:	f7ff ff78 	bl	80104a4 <__sfp_lock_release>
 80105b4:	230c      	movs	r3, #12
 80105b6:	603b      	str	r3, [r7, #0]
 80105b8:	e7ee      	b.n	8010598 <__sfp+0x60>
 80105ba:	bf00      	nop
 80105bc:	08010984 	.word	0x08010984
 80105c0:	ffff0001 	.word	0xffff0001

080105c4 <_fwalk_reent>:
 80105c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105c8:	4606      	mov	r6, r0
 80105ca:	4688      	mov	r8, r1
 80105cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80105d0:	2700      	movs	r7, #0
 80105d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80105d6:	f1b9 0901 	subs.w	r9, r9, #1
 80105da:	d505      	bpl.n	80105e8 <_fwalk_reent+0x24>
 80105dc:	6824      	ldr	r4, [r4, #0]
 80105de:	2c00      	cmp	r4, #0
 80105e0:	d1f7      	bne.n	80105d2 <_fwalk_reent+0xe>
 80105e2:	4638      	mov	r0, r7
 80105e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105e8:	89ab      	ldrh	r3, [r5, #12]
 80105ea:	2b01      	cmp	r3, #1
 80105ec:	d907      	bls.n	80105fe <_fwalk_reent+0x3a>
 80105ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80105f2:	3301      	adds	r3, #1
 80105f4:	d003      	beq.n	80105fe <_fwalk_reent+0x3a>
 80105f6:	4629      	mov	r1, r5
 80105f8:	4630      	mov	r0, r6
 80105fa:	47c0      	blx	r8
 80105fc:	4307      	orrs	r7, r0
 80105fe:	3568      	adds	r5, #104	; 0x68
 8010600:	e7e9      	b.n	80105d6 <_fwalk_reent+0x12>

08010602 <__retarget_lock_init_recursive>:
 8010602:	4770      	bx	lr

08010604 <__retarget_lock_acquire_recursive>:
 8010604:	4770      	bx	lr

08010606 <__retarget_lock_release_recursive>:
 8010606:	4770      	bx	lr

08010608 <__swhatbuf_r>:
 8010608:	b570      	push	{r4, r5, r6, lr}
 801060a:	460e      	mov	r6, r1
 801060c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010610:	2900      	cmp	r1, #0
 8010612:	b096      	sub	sp, #88	; 0x58
 8010614:	4614      	mov	r4, r2
 8010616:	461d      	mov	r5, r3
 8010618:	da08      	bge.n	801062c <__swhatbuf_r+0x24>
 801061a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801061e:	2200      	movs	r2, #0
 8010620:	602a      	str	r2, [r5, #0]
 8010622:	061a      	lsls	r2, r3, #24
 8010624:	d410      	bmi.n	8010648 <__swhatbuf_r+0x40>
 8010626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801062a:	e00e      	b.n	801064a <__swhatbuf_r+0x42>
 801062c:	466a      	mov	r2, sp
 801062e:	f000 f8fb 	bl	8010828 <_fstat_r>
 8010632:	2800      	cmp	r0, #0
 8010634:	dbf1      	blt.n	801061a <__swhatbuf_r+0x12>
 8010636:	9a01      	ldr	r2, [sp, #4]
 8010638:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801063c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010640:	425a      	negs	r2, r3
 8010642:	415a      	adcs	r2, r3
 8010644:	602a      	str	r2, [r5, #0]
 8010646:	e7ee      	b.n	8010626 <__swhatbuf_r+0x1e>
 8010648:	2340      	movs	r3, #64	; 0x40
 801064a:	2000      	movs	r0, #0
 801064c:	6023      	str	r3, [r4, #0]
 801064e:	b016      	add	sp, #88	; 0x58
 8010650:	bd70      	pop	{r4, r5, r6, pc}
	...

08010654 <__smakebuf_r>:
 8010654:	898b      	ldrh	r3, [r1, #12]
 8010656:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010658:	079d      	lsls	r5, r3, #30
 801065a:	4606      	mov	r6, r0
 801065c:	460c      	mov	r4, r1
 801065e:	d507      	bpl.n	8010670 <__smakebuf_r+0x1c>
 8010660:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010664:	6023      	str	r3, [r4, #0]
 8010666:	6123      	str	r3, [r4, #16]
 8010668:	2301      	movs	r3, #1
 801066a:	6163      	str	r3, [r4, #20]
 801066c:	b002      	add	sp, #8
 801066e:	bd70      	pop	{r4, r5, r6, pc}
 8010670:	ab01      	add	r3, sp, #4
 8010672:	466a      	mov	r2, sp
 8010674:	f7ff ffc8 	bl	8010608 <__swhatbuf_r>
 8010678:	9900      	ldr	r1, [sp, #0]
 801067a:	4605      	mov	r5, r0
 801067c:	4630      	mov	r0, r6
 801067e:	f7ff fb07 	bl	800fc90 <_malloc_r>
 8010682:	b948      	cbnz	r0, 8010698 <__smakebuf_r+0x44>
 8010684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010688:	059a      	lsls	r2, r3, #22
 801068a:	d4ef      	bmi.n	801066c <__smakebuf_r+0x18>
 801068c:	f023 0303 	bic.w	r3, r3, #3
 8010690:	f043 0302 	orr.w	r3, r3, #2
 8010694:	81a3      	strh	r3, [r4, #12]
 8010696:	e7e3      	b.n	8010660 <__smakebuf_r+0xc>
 8010698:	4b0d      	ldr	r3, [pc, #52]	; (80106d0 <__smakebuf_r+0x7c>)
 801069a:	62b3      	str	r3, [r6, #40]	; 0x28
 801069c:	89a3      	ldrh	r3, [r4, #12]
 801069e:	6020      	str	r0, [r4, #0]
 80106a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106a4:	81a3      	strh	r3, [r4, #12]
 80106a6:	9b00      	ldr	r3, [sp, #0]
 80106a8:	6163      	str	r3, [r4, #20]
 80106aa:	9b01      	ldr	r3, [sp, #4]
 80106ac:	6120      	str	r0, [r4, #16]
 80106ae:	b15b      	cbz	r3, 80106c8 <__smakebuf_r+0x74>
 80106b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80106b4:	4630      	mov	r0, r6
 80106b6:	f000 f8c9 	bl	801084c <_isatty_r>
 80106ba:	b128      	cbz	r0, 80106c8 <__smakebuf_r+0x74>
 80106bc:	89a3      	ldrh	r3, [r4, #12]
 80106be:	f023 0303 	bic.w	r3, r3, #3
 80106c2:	f043 0301 	orr.w	r3, r3, #1
 80106c6:	81a3      	strh	r3, [r4, #12]
 80106c8:	89a0      	ldrh	r0, [r4, #12]
 80106ca:	4305      	orrs	r5, r0
 80106cc:	81a5      	strh	r5, [r4, #12]
 80106ce:	e7cd      	b.n	801066c <__smakebuf_r+0x18>
 80106d0:	08010461 	.word	0x08010461

080106d4 <_raise_r>:
 80106d4:	291f      	cmp	r1, #31
 80106d6:	b538      	push	{r3, r4, r5, lr}
 80106d8:	4604      	mov	r4, r0
 80106da:	460d      	mov	r5, r1
 80106dc:	d904      	bls.n	80106e8 <_raise_r+0x14>
 80106de:	2316      	movs	r3, #22
 80106e0:	6003      	str	r3, [r0, #0]
 80106e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80106e6:	bd38      	pop	{r3, r4, r5, pc}
 80106e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80106ea:	b112      	cbz	r2, 80106f2 <_raise_r+0x1e>
 80106ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80106f0:	b94b      	cbnz	r3, 8010706 <_raise_r+0x32>
 80106f2:	4620      	mov	r0, r4
 80106f4:	f000 f830 	bl	8010758 <_getpid_r>
 80106f8:	462a      	mov	r2, r5
 80106fa:	4601      	mov	r1, r0
 80106fc:	4620      	mov	r0, r4
 80106fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010702:	f000 b817 	b.w	8010734 <_kill_r>
 8010706:	2b01      	cmp	r3, #1
 8010708:	d00a      	beq.n	8010720 <_raise_r+0x4c>
 801070a:	1c59      	adds	r1, r3, #1
 801070c:	d103      	bne.n	8010716 <_raise_r+0x42>
 801070e:	2316      	movs	r3, #22
 8010710:	6003      	str	r3, [r0, #0]
 8010712:	2001      	movs	r0, #1
 8010714:	e7e7      	b.n	80106e6 <_raise_r+0x12>
 8010716:	2400      	movs	r4, #0
 8010718:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801071c:	4628      	mov	r0, r5
 801071e:	4798      	blx	r3
 8010720:	2000      	movs	r0, #0
 8010722:	e7e0      	b.n	80106e6 <_raise_r+0x12>

08010724 <raise>:
 8010724:	4b02      	ldr	r3, [pc, #8]	; (8010730 <raise+0xc>)
 8010726:	4601      	mov	r1, r0
 8010728:	6818      	ldr	r0, [r3, #0]
 801072a:	f7ff bfd3 	b.w	80106d4 <_raise_r>
 801072e:	bf00      	nop
 8010730:	20002858 	.word	0x20002858

08010734 <_kill_r>:
 8010734:	b538      	push	{r3, r4, r5, lr}
 8010736:	4d07      	ldr	r5, [pc, #28]	; (8010754 <_kill_r+0x20>)
 8010738:	2300      	movs	r3, #0
 801073a:	4604      	mov	r4, r0
 801073c:	4608      	mov	r0, r1
 801073e:	4611      	mov	r1, r2
 8010740:	602b      	str	r3, [r5, #0]
 8010742:	f7f1 f9f1 	bl	8001b28 <_kill>
 8010746:	1c43      	adds	r3, r0, #1
 8010748:	d102      	bne.n	8010750 <_kill_r+0x1c>
 801074a:	682b      	ldr	r3, [r5, #0]
 801074c:	b103      	cbz	r3, 8010750 <_kill_r+0x1c>
 801074e:	6023      	str	r3, [r4, #0]
 8010750:	bd38      	pop	{r3, r4, r5, pc}
 8010752:	bf00      	nop
 8010754:	20004bfc 	.word	0x20004bfc

08010758 <_getpid_r>:
 8010758:	f7f1 b9de 	b.w	8001b18 <_getpid>

0801075c <__sread>:
 801075c:	b510      	push	{r4, lr}
 801075e:	460c      	mov	r4, r1
 8010760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010764:	f000 f894 	bl	8010890 <_read_r>
 8010768:	2800      	cmp	r0, #0
 801076a:	bfab      	itete	ge
 801076c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801076e:	89a3      	ldrhlt	r3, [r4, #12]
 8010770:	181b      	addge	r3, r3, r0
 8010772:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010776:	bfac      	ite	ge
 8010778:	6563      	strge	r3, [r4, #84]	; 0x54
 801077a:	81a3      	strhlt	r3, [r4, #12]
 801077c:	bd10      	pop	{r4, pc}

0801077e <__swrite>:
 801077e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010782:	461f      	mov	r7, r3
 8010784:	898b      	ldrh	r3, [r1, #12]
 8010786:	05db      	lsls	r3, r3, #23
 8010788:	4605      	mov	r5, r0
 801078a:	460c      	mov	r4, r1
 801078c:	4616      	mov	r6, r2
 801078e:	d505      	bpl.n	801079c <__swrite+0x1e>
 8010790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010794:	2302      	movs	r3, #2
 8010796:	2200      	movs	r2, #0
 8010798:	f000 f868 	bl	801086c <_lseek_r>
 801079c:	89a3      	ldrh	r3, [r4, #12]
 801079e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80107a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80107a6:	81a3      	strh	r3, [r4, #12]
 80107a8:	4632      	mov	r2, r6
 80107aa:	463b      	mov	r3, r7
 80107ac:	4628      	mov	r0, r5
 80107ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80107b2:	f000 b817 	b.w	80107e4 <_write_r>

080107b6 <__sseek>:
 80107b6:	b510      	push	{r4, lr}
 80107b8:	460c      	mov	r4, r1
 80107ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107be:	f000 f855 	bl	801086c <_lseek_r>
 80107c2:	1c43      	adds	r3, r0, #1
 80107c4:	89a3      	ldrh	r3, [r4, #12]
 80107c6:	bf15      	itete	ne
 80107c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80107ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80107ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80107d2:	81a3      	strheq	r3, [r4, #12]
 80107d4:	bf18      	it	ne
 80107d6:	81a3      	strhne	r3, [r4, #12]
 80107d8:	bd10      	pop	{r4, pc}

080107da <__sclose>:
 80107da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107de:	f000 b813 	b.w	8010808 <_close_r>
	...

080107e4 <_write_r>:
 80107e4:	b538      	push	{r3, r4, r5, lr}
 80107e6:	4d07      	ldr	r5, [pc, #28]	; (8010804 <_write_r+0x20>)
 80107e8:	4604      	mov	r4, r0
 80107ea:	4608      	mov	r0, r1
 80107ec:	4611      	mov	r1, r2
 80107ee:	2200      	movs	r2, #0
 80107f0:	602a      	str	r2, [r5, #0]
 80107f2:	461a      	mov	r2, r3
 80107f4:	f7f1 f9cf 	bl	8001b96 <_write>
 80107f8:	1c43      	adds	r3, r0, #1
 80107fa:	d102      	bne.n	8010802 <_write_r+0x1e>
 80107fc:	682b      	ldr	r3, [r5, #0]
 80107fe:	b103      	cbz	r3, 8010802 <_write_r+0x1e>
 8010800:	6023      	str	r3, [r4, #0]
 8010802:	bd38      	pop	{r3, r4, r5, pc}
 8010804:	20004bfc 	.word	0x20004bfc

08010808 <_close_r>:
 8010808:	b538      	push	{r3, r4, r5, lr}
 801080a:	4d06      	ldr	r5, [pc, #24]	; (8010824 <_close_r+0x1c>)
 801080c:	2300      	movs	r3, #0
 801080e:	4604      	mov	r4, r0
 8010810:	4608      	mov	r0, r1
 8010812:	602b      	str	r3, [r5, #0]
 8010814:	f7f1 f9db 	bl	8001bce <_close>
 8010818:	1c43      	adds	r3, r0, #1
 801081a:	d102      	bne.n	8010822 <_close_r+0x1a>
 801081c:	682b      	ldr	r3, [r5, #0]
 801081e:	b103      	cbz	r3, 8010822 <_close_r+0x1a>
 8010820:	6023      	str	r3, [r4, #0]
 8010822:	bd38      	pop	{r3, r4, r5, pc}
 8010824:	20004bfc 	.word	0x20004bfc

08010828 <_fstat_r>:
 8010828:	b538      	push	{r3, r4, r5, lr}
 801082a:	4d07      	ldr	r5, [pc, #28]	; (8010848 <_fstat_r+0x20>)
 801082c:	2300      	movs	r3, #0
 801082e:	4604      	mov	r4, r0
 8010830:	4608      	mov	r0, r1
 8010832:	4611      	mov	r1, r2
 8010834:	602b      	str	r3, [r5, #0]
 8010836:	f7f1 f9d6 	bl	8001be6 <_fstat>
 801083a:	1c43      	adds	r3, r0, #1
 801083c:	d102      	bne.n	8010844 <_fstat_r+0x1c>
 801083e:	682b      	ldr	r3, [r5, #0]
 8010840:	b103      	cbz	r3, 8010844 <_fstat_r+0x1c>
 8010842:	6023      	str	r3, [r4, #0]
 8010844:	bd38      	pop	{r3, r4, r5, pc}
 8010846:	bf00      	nop
 8010848:	20004bfc 	.word	0x20004bfc

0801084c <_isatty_r>:
 801084c:	b538      	push	{r3, r4, r5, lr}
 801084e:	4d06      	ldr	r5, [pc, #24]	; (8010868 <_isatty_r+0x1c>)
 8010850:	2300      	movs	r3, #0
 8010852:	4604      	mov	r4, r0
 8010854:	4608      	mov	r0, r1
 8010856:	602b      	str	r3, [r5, #0]
 8010858:	f7f1 f9d5 	bl	8001c06 <_isatty>
 801085c:	1c43      	adds	r3, r0, #1
 801085e:	d102      	bne.n	8010866 <_isatty_r+0x1a>
 8010860:	682b      	ldr	r3, [r5, #0]
 8010862:	b103      	cbz	r3, 8010866 <_isatty_r+0x1a>
 8010864:	6023      	str	r3, [r4, #0]
 8010866:	bd38      	pop	{r3, r4, r5, pc}
 8010868:	20004bfc 	.word	0x20004bfc

0801086c <_lseek_r>:
 801086c:	b538      	push	{r3, r4, r5, lr}
 801086e:	4d07      	ldr	r5, [pc, #28]	; (801088c <_lseek_r+0x20>)
 8010870:	4604      	mov	r4, r0
 8010872:	4608      	mov	r0, r1
 8010874:	4611      	mov	r1, r2
 8010876:	2200      	movs	r2, #0
 8010878:	602a      	str	r2, [r5, #0]
 801087a:	461a      	mov	r2, r3
 801087c:	f7f1 f9ce 	bl	8001c1c <_lseek>
 8010880:	1c43      	adds	r3, r0, #1
 8010882:	d102      	bne.n	801088a <_lseek_r+0x1e>
 8010884:	682b      	ldr	r3, [r5, #0]
 8010886:	b103      	cbz	r3, 801088a <_lseek_r+0x1e>
 8010888:	6023      	str	r3, [r4, #0]
 801088a:	bd38      	pop	{r3, r4, r5, pc}
 801088c:	20004bfc 	.word	0x20004bfc

08010890 <_read_r>:
 8010890:	b538      	push	{r3, r4, r5, lr}
 8010892:	4d07      	ldr	r5, [pc, #28]	; (80108b0 <_read_r+0x20>)
 8010894:	4604      	mov	r4, r0
 8010896:	4608      	mov	r0, r1
 8010898:	4611      	mov	r1, r2
 801089a:	2200      	movs	r2, #0
 801089c:	602a      	str	r2, [r5, #0]
 801089e:	461a      	mov	r2, r3
 80108a0:	f7f1 f95c 	bl	8001b5c <_read>
 80108a4:	1c43      	adds	r3, r0, #1
 80108a6:	d102      	bne.n	80108ae <_read_r+0x1e>
 80108a8:	682b      	ldr	r3, [r5, #0]
 80108aa:	b103      	cbz	r3, 80108ae <_read_r+0x1e>
 80108ac:	6023      	str	r3, [r4, #0]
 80108ae:	bd38      	pop	{r3, r4, r5, pc}
 80108b0:	20004bfc 	.word	0x20004bfc

080108b4 <_init>:
 80108b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108b6:	bf00      	nop
 80108b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108ba:	bc08      	pop	{r3}
 80108bc:	469e      	mov	lr, r3
 80108be:	4770      	bx	lr

080108c0 <_fini>:
 80108c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108c2:	bf00      	nop
 80108c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108c6:	bc08      	pop	{r3}
 80108c8:	469e      	mov	lr, r3
 80108ca:	4770      	bx	lr
