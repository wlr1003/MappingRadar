
radar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8c0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800ba98  0800ba98  0001ba98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800baf0  0800baf0  00022854  2**0
                  CONTENTS
  4 .ARM          00000000  0800baf0  0800baf0  00022854  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800baf0  0800baf0  00022854  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800baf0  0800baf0  0001baf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800baf4  0800baf4  0001baf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002854  20000000  0800baf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b9c  20002854  0800e34c  00022854  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200043f0  0800e34c  000243f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00022854  2**0
                  CONTENTS, READONLY
 12 .debug_info   000285b5  00000000  00000000  00022884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004581  00000000  00000000  0004ae39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022f0  00000000  00000000  0004f3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002108  00000000  00000000  000516b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026d7c  00000000  00000000  000537b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022a31  00000000  00000000  0007a534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f86a2  00000000  00000000  0009cf65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00195607  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009654  00000000  00000000  00195658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20002854 	.word	0x20002854
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800ba80 	.word	0x0800ba80

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20002858 	.word	0x20002858
 8000214:	0800ba80 	.word	0x0800ba80

08000218 <lsm6dsl_read_reg>:
  *
  */
int32_t __weak lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8000218:	b590      	push	{r4, r7, lr}
 800021a:	b087      	sub	sp, #28
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	607a      	str	r2, [r7, #4]
 8000222:	461a      	mov	r2, r3
 8000224:	460b      	mov	r3, r1
 8000226:	72fb      	strb	r3, [r7, #11]
 8000228:	4613      	mov	r3, r2
 800022a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	685c      	ldr	r4, [r3, #4]
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	68d8      	ldr	r0, [r3, #12]
 8000234:	893b      	ldrh	r3, [r7, #8]
 8000236:	7af9      	ldrb	r1, [r7, #11]
 8000238:	687a      	ldr	r2, [r7, #4]
 800023a:	47a0      	blx	r4
 800023c:	6178      	str	r0, [r7, #20]

  return ret;
 800023e:	697b      	ldr	r3, [r7, #20]
}
 8000240:	4618      	mov	r0, r3
 8000242:	371c      	adds	r7, #28
 8000244:	46bd      	mov	sp, r7
 8000246:	bd90      	pop	{r4, r7, pc}

08000248 <lsm6dsl_write_reg>:
  *
  */
int32_t __weak lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8000248:	b590      	push	{r4, r7, lr}
 800024a:	b087      	sub	sp, #28
 800024c:	af00      	add	r7, sp, #0
 800024e:	60f8      	str	r0, [r7, #12]
 8000250:	607a      	str	r2, [r7, #4]
 8000252:	461a      	mov	r2, r3
 8000254:	460b      	mov	r3, r1
 8000256:	72fb      	strb	r3, [r7, #11]
 8000258:	4613      	mov	r3, r2
 800025a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	681c      	ldr	r4, [r3, #0]
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	68d8      	ldr	r0, [r3, #12]
 8000264:	893b      	ldrh	r3, [r7, #8]
 8000266:	7af9      	ldrb	r1, [r7, #11]
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	47a0      	blx	r4
 800026c:	6178      	str	r0, [r7, #20]

  return ret;
 800026e:	697b      	ldr	r3, [r7, #20]
}
 8000270:	4618      	mov	r0, r3
 8000272:	371c      	adds	r7, #28
 8000274:	46bd      	mov	sp, r7
 8000276:	bd90      	pop	{r4, r7, pc}

08000278 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b084      	sub	sp, #16
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
 8000280:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8000282:	2301      	movs	r3, #1
 8000284:	683a      	ldr	r2, [r7, #0]
 8000286:	210f      	movs	r1, #15
 8000288:	6878      	ldr	r0, [r7, #4]
 800028a:	f7ff ffc5 	bl	8000218 <lsm6dsl_read_reg>
 800028e:	60f8      	str	r0, [r7, #12]

  return ret;
 8000290:	68fb      	ldr	r3, [r7, #12]
}
 8000292:	4618      	mov	r0, r3
 8000294:	3710      	adds	r7, #16
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}

0800029a <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800029a:	b580      	push	{r7, lr}
 800029c:	b084      	sub	sp, #16
 800029e:	af00      	add	r7, sp, #0
 80002a0:	6078      	str	r0, [r7, #4]
 80002a2:	460b      	mov	r3, r1
 80002a4:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80002a6:	f107 0208 	add.w	r2, r7, #8
 80002aa:	2301      	movs	r3, #1
 80002ac:	2112      	movs	r1, #18
 80002ae:	6878      	ldr	r0, [r7, #4]
 80002b0:	f7ff ffb2 	bl	8000218 <lsm6dsl_read_reg>
 80002b4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d10f      	bne.n	80002dc <lsm6dsl_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 80002bc:	78fb      	ldrb	r3, [r7, #3]
 80002be:	f003 0301 	and.w	r3, r3, #1
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	7a3b      	ldrb	r3, [r7, #8]
 80002c6:	f362 0300 	bfi	r3, r2, #0, #1
 80002ca:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80002cc:	f107 0208 	add.w	r2, r7, #8
 80002d0:	2301      	movs	r3, #1
 80002d2:	2112      	movs	r1, #18
 80002d4:	6878      	ldr	r0, [r7, #4]
 80002d6:	f7ff ffb7 	bl	8000248 <lsm6dsl_write_reg>
 80002da:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80002dc:	68fb      	ldr	r3, [r7, #12]
}
 80002de:	4618      	mov	r0, r3
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}

080002e6 <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80002e6:	b580      	push	{r7, lr}
 80002e8:	b084      	sub	sp, #16
 80002ea:	af00      	add	r7, sp, #0
 80002ec:	6078      	str	r0, [r7, #4]
 80002ee:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80002f0:	f107 0208 	add.w	r2, r7, #8
 80002f4:	2301      	movs	r3, #1
 80002f6:	2112      	movs	r1, #18
 80002f8:	6878      	ldr	r0, [r7, #4]
 80002fa:	f7ff ff8d 	bl	8000218 <lsm6dsl_read_reg>
 80002fe:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8000300:	7a3b      	ldrb	r3, [r7, #8]
 8000302:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000306:	b2db      	uxtb	r3, r3
 8000308:	461a      	mov	r2, r3
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	701a      	strb	r2, [r3, #0]

  return ret;
 800030e:	68fb      	ldr	r3, [r7, #12]
}
 8000310:	4618      	mov	r0, r3
 8000312:	3710      	adds	r7, #16
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}

08000318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b086      	sub	sp, #24
 800031c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800031e:	f000 fcd8 	bl	8000cd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000322:	f000 f849 	bl	80003b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000326:	f000 f9fb 	bl	8000720 <MX_GPIO_Init>
  MX_DMA_Init();
 800032a:	f000 f9cf 	bl	80006cc <MX_DMA_Init>
  MX_ADC1_Init();
 800032e:	f000 f88f 	bl	8000450 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000332:	f000 f905 	bl	8000540 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000336:	f000 f97b 	bl	8000630 <MX_TIM2_Init>
  MX_SPI1_Init();
 800033a:	f000 f93b 	bl	80005b4 <MX_SPI1_Init>
  MX_USB_Device_Init();
 800033e:	f00a fe8d 	bl	800b05c <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  /* Set DAC_CH_1 to CTune or VTune based on Ctune flag*/
  if (!Ctune)
  	  {
	  HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,(uint32_t*)VTune,2484,DAC_ALIGN_12B_R);
 8000342:	2300      	movs	r3, #0
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	f640 13b4 	movw	r3, #2484	; 0x9b4
 800034a:	4a14      	ldr	r2, [pc, #80]	; (800039c <main+0x84>)
 800034c:	2100      	movs	r1, #0
 800034e:	4814      	ldr	r0, [pc, #80]	; (80003a0 <main+0x88>)
 8000350:	f001 ff8e 	bl	8002270 <HAL_DAC_Start_DMA>
	  HAL_TIM_Base_Start(&htim2);
 8000354:	4813      	ldr	r0, [pc, #76]	; (80003a4 <main+0x8c>)
 8000356:	f006 fc43 	bl	8006be0 <HAL_TIM_Base_Start>
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, CTune);
  	  }

  /* initialize accelerometer/gyroscope on lsm6dsl */
  stmdev_ctx_t dev_ctx;
  dev_ctx.write_reg = platform_write;
 800035a:	4b13      	ldr	r3, [pc, #76]	; (80003a8 <main+0x90>)
 800035c:	603b      	str	r3, [r7, #0]
  dev_ctx.read_reg = platform_read;
 800035e:	4b13      	ldr	r3, [pc, #76]	; (80003ac <main+0x94>)
 8000360:	607b      	str	r3, [r7, #4]
  /* Check device ID */
    whoamI = 0;
 8000362:	4b13      	ldr	r3, [pc, #76]	; (80003b0 <main+0x98>)
 8000364:	2200      	movs	r2, #0
 8000366:	701a      	strb	r2, [r3, #0]
    lsm6dsl_device_id_get(&dev_ctx, &whoamI);
 8000368:	463b      	mov	r3, r7
 800036a:	4911      	ldr	r1, [pc, #68]	; (80003b0 <main+0x98>)
 800036c:	4618      	mov	r0, r3
 800036e:	f7ff ff83 	bl	8000278 <lsm6dsl_device_id_get>

    if ( whoamI != LSM6DSL_ID )
 8000372:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <main+0x98>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2b6a      	cmp	r3, #106	; 0x6a
 8000378:	d000      	beq.n	800037c <main+0x64>
      while (1); /*manage here device not found */
 800037a:	e7fe      	b.n	800037a <main+0x62>

    /* Restore default configuration */
    lsm6dsl_reset_set(&dev_ctx, PROPERTY_ENABLE);
 800037c:	463b      	mov	r3, r7
 800037e:	2101      	movs	r1, #1
 8000380:	4618      	mov	r0, r3
 8000382:	f7ff ff8a 	bl	800029a <lsm6dsl_reset_set>

    do {
      lsm6dsl_reset_get(&dev_ctx, &rst);
 8000386:	463b      	mov	r3, r7
 8000388:	490a      	ldr	r1, [pc, #40]	; (80003b4 <main+0x9c>)
 800038a:	4618      	mov	r0, r3
 800038c:	f7ff ffab 	bl	80002e6 <lsm6dsl_reset_get>
    } while (rst);
 8000390:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <main+0x9c>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d1f6      	bne.n	8000386 <main+0x6e>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000398:	e7fe      	b.n	8000398 <main+0x80>
 800039a:	bf00      	nop
 800039c:	20000000 	.word	0x20000000
 80003a0:	200028dc 	.word	0x200028dc
 80003a4:	200029b4 	.word	0x200029b4
 80003a8:	08000841 	.word	0x08000841
 80003ac:	08000899 	.word	0x08000899
 80003b0:	20002a00 	.word	0x20002a00
 80003b4:	20002a01 	.word	0x20002a01

080003b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b094      	sub	sp, #80	; 0x50
 80003bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003be:	f107 0318 	add.w	r3, r7, #24
 80003c2:	2238      	movs	r2, #56	; 0x38
 80003c4:	2100      	movs	r1, #0
 80003c6:	4618      	mov	r0, r3
 80003c8:	f00b fb52 	bl	800ba70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
 80003d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80003da:	2000      	movs	r0, #0
 80003dc:	f004 fc30 	bl	8004c40 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80003e0:	2321      	movs	r3, #33	; 0x21
 80003e2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003e8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003ea:	2301      	movs	r3, #1
 80003ec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ee:	2302      	movs	r3, #2
 80003f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003f2:	2303      	movs	r3, #3
 80003f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80003f6:	2302      	movs	r3, #2
 80003f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 42;
 80003fa:	232a      	movs	r3, #42	; 0x2a
 80003fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV12;
 80003fe:	230c      	movs	r3, #12
 8000400:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000402:	2306      	movs	r3, #6
 8000404:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000406:	2302      	movs	r3, #2
 8000408:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800040a:	f107 0318 	add.w	r3, r7, #24
 800040e:	4618      	mov	r0, r3
 8000410:	f004 fcba 	bl	8004d88 <HAL_RCC_OscConfig>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800041a:	f000 fa75 	bl	8000908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800041e:	230f      	movs	r3, #15
 8000420:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000422:	2303      	movs	r3, #3
 8000424:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000426:	2300      	movs	r3, #0
 8000428:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800042a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800042e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000430:	2300      	movs	r3, #0
 8000432:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	2104      	movs	r1, #4
 8000438:	4618      	mov	r0, r3
 800043a:	f004 ffbd 	bl	80053b8 <HAL_RCC_ClockConfig>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000444:	f000 fa60 	bl	8000908 <Error_Handler>
  }
}
 8000448:	bf00      	nop
 800044a:	3750      	adds	r7, #80	; 0x50
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}

08000450 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b08c      	sub	sp, #48	; 0x30
 8000454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	605a      	str	r2, [r3, #4]
 8000460:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	2220      	movs	r2, #32
 8000466:	2100      	movs	r1, #0
 8000468:	4618      	mov	r0, r3
 800046a:	f00b fb01 	bl	800ba70 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800046e:	4b32      	ldr	r3, [pc, #200]	; (8000538 <MX_ADC1_Init+0xe8>)
 8000470:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000474:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000476:	4b30      	ldr	r3, [pc, #192]	; (8000538 <MX_ADC1_Init+0xe8>)
 8000478:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800047c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800047e:	4b2e      	ldr	r3, [pc, #184]	; (8000538 <MX_ADC1_Init+0xe8>)
 8000480:	2200      	movs	r2, #0
 8000482:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000484:	4b2c      	ldr	r3, [pc, #176]	; (8000538 <MX_ADC1_Init+0xe8>)
 8000486:	2200      	movs	r2, #0
 8000488:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800048a:	4b2b      	ldr	r3, [pc, #172]	; (8000538 <MX_ADC1_Init+0xe8>)
 800048c:	2200      	movs	r2, #0
 800048e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000490:	4b29      	ldr	r3, [pc, #164]	; (8000538 <MX_ADC1_Init+0xe8>)
 8000492:	2200      	movs	r2, #0
 8000494:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000496:	4b28      	ldr	r3, [pc, #160]	; (8000538 <MX_ADC1_Init+0xe8>)
 8000498:	2204      	movs	r2, #4
 800049a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800049c:	4b26      	ldr	r3, [pc, #152]	; (8000538 <MX_ADC1_Init+0xe8>)
 800049e:	2200      	movs	r2, #0
 80004a0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004a2:	4b25      	ldr	r3, [pc, #148]	; (8000538 <MX_ADC1_Init+0xe8>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80004a8:	4b23      	ldr	r3, [pc, #140]	; (8000538 <MX_ADC1_Init+0xe8>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004ae:	4b22      	ldr	r3, [pc, #136]	; (8000538 <MX_ADC1_Init+0xe8>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004b6:	4b20      	ldr	r3, [pc, #128]	; (8000538 <MX_ADC1_Init+0xe8>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004bc:	4b1e      	ldr	r3, [pc, #120]	; (8000538 <MX_ADC1_Init+0xe8>)
 80004be:	2200      	movs	r2, #0
 80004c0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80004c2:	4b1d      	ldr	r3, [pc, #116]	; (8000538 <MX_ADC1_Init+0xe8>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004ca:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <MX_ADC1_Init+0xe8>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80004d0:	4b19      	ldr	r3, [pc, #100]	; (8000538 <MX_ADC1_Init+0xe8>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004d8:	4817      	ldr	r0, [pc, #92]	; (8000538 <MX_ADC1_Init+0xe8>)
 80004da:	f000 fe67 	bl	80011ac <HAL_ADC_Init>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80004e4:	f000 fa10 	bl	8000908 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80004e8:	2300      	movs	r3, #0
 80004ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80004ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004f0:	4619      	mov	r1, r3
 80004f2:	4811      	ldr	r0, [pc, #68]	; (8000538 <MX_ADC1_Init+0xe8>)
 80004f4:	f001 fc82 	bl	8001dfc <HAL_ADCEx_MultiModeConfigChannel>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80004fe:	f000 fa03 	bl	8000908 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000502:	4b0e      	ldr	r3, [pc, #56]	; (800053c <MX_ADC1_Init+0xec>)
 8000504:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000506:	2306      	movs	r3, #6
 8000508:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800050e:	237f      	movs	r3, #127	; 0x7f
 8000510:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000512:	2304      	movs	r3, #4
 8000514:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000516:	2300      	movs	r3, #0
 8000518:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	4619      	mov	r1, r3
 800051e:	4806      	ldr	r0, [pc, #24]	; (8000538 <MX_ADC1_Init+0xe8>)
 8000520:	f001 f806 	bl	8001530 <HAL_ADC_ConfigChannel>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800052a:	f000 f9ed 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800052e:	bf00      	nop
 8000530:	3730      	adds	r7, #48	; 0x30
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20002870 	.word	0x20002870
 800053c:	04300002 	.word	0x04300002

08000540 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b08c      	sub	sp, #48	; 0x30
 8000544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000546:	463b      	mov	r3, r7
 8000548:	2230      	movs	r2, #48	; 0x30
 800054a:	2100      	movs	r1, #0
 800054c:	4618      	mov	r0, r3
 800054e:	f00b fa8f 	bl	800ba70 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000552:	4b16      	ldr	r3, [pc, #88]	; (80005ac <MX_DAC1_Init+0x6c>)
 8000554:	4a16      	ldr	r2, [pc, #88]	; (80005b0 <MX_DAC1_Init+0x70>)
 8000556:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000558:	4814      	ldr	r0, [pc, #80]	; (80005ac <MX_DAC1_Init+0x6c>)
 800055a:	f001 fe66 	bl	800222a <HAL_DAC_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000564:	f000 f9d0 	bl	8000908 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000568:	2302      	movs	r3, #2
 800056a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800056c:	2300      	movs	r3, #0
 800056e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000570:	2300      	movs	r3, #0
 8000572:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000574:	2300      	movs	r3, #0
 8000576:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000578:	2312      	movs	r3, #18
 800057a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800057c:	2300      	movs	r3, #0
 800057e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000584:	2301      	movs	r3, #1
 8000586:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000588:	2300      	movs	r3, #0
 800058a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800058c:	463b      	mov	r3, r7
 800058e:	2200      	movs	r2, #0
 8000590:	4619      	mov	r1, r3
 8000592:	4806      	ldr	r0, [pc, #24]	; (80005ac <MX_DAC1_Init+0x6c>)
 8000594:	f001 ff58 	bl	8002448 <HAL_DAC_ConfigChannel>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800059e:	f000 f9b3 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80005a2:	bf00      	nop
 80005a4:	3730      	adds	r7, #48	; 0x30
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	200028dc 	.word	0x200028dc
 80005b0:	50000800 	.word	0x50000800

080005b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005b8:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <MX_SPI1_Init+0x74>)
 80005ba:	4a1c      	ldr	r2, [pc, #112]	; (800062c <MX_SPI1_Init+0x78>)
 80005bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005be:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <MX_SPI1_Init+0x74>)
 80005c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <MX_SPI1_Init+0x74>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005cc:	4b16      	ldr	r3, [pc, #88]	; (8000628 <MX_SPI1_Init+0x74>)
 80005ce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80005d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005d4:	4b14      	ldr	r3, [pc, #80]	; (8000628 <MX_SPI1_Init+0x74>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005da:	4b13      	ldr	r3, [pc, #76]	; (8000628 <MX_SPI1_Init+0x74>)
 80005dc:	2200      	movs	r2, #0
 80005de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_SPI1_Init+0x74>)
 80005e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_SPI1_Init+0x74>)
 80005ea:	2220      	movs	r2, #32
 80005ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_SPI1_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_SPI1_Init+0x74>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <MX_SPI1_Init+0x74>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_SPI1_Init+0x74>)
 8000602:	2207      	movs	r2, #7
 8000604:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <MX_SPI1_Init+0x74>)
 8000608:	2200      	movs	r2, #0
 800060a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_SPI1_Init+0x74>)
 800060e:	2200      	movs	r2, #0
 8000610:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <MX_SPI1_Init+0x74>)
 8000614:	f005 fb0a 	bl	8005c2c <HAL_SPI_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800061e:	f000 f973 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20002950 	.word	0x20002950
 800062c:	40013000 	.word	0x40013000

08000630 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000636:	f107 0310 	add.w	r3, r7, #16
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800064e:	4b1d      	ldr	r3, [pc, #116]	; (80006c4 <MX_TIM2_Init+0x94>)
 8000650:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000654:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 255;
 8000656:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <MX_TIM2_Init+0x94>)
 8000658:	22ff      	movs	r2, #255	; 0xff
 800065a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065c:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <MX_TIM2_Init+0x94>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6.5204999E7;
 8000662:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <MX_TIM2_Init+0x94>)
 8000664:	4a18      	ldr	r2, [pc, #96]	; (80006c8 <MX_TIM2_Init+0x98>)
 8000666:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000668:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <MX_TIM2_Init+0x94>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <MX_TIM2_Init+0x94>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000674:	4813      	ldr	r0, [pc, #76]	; (80006c4 <MX_TIM2_Init+0x94>)
 8000676:	f006 fa5b 	bl	8006b30 <HAL_TIM_Base_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000680:	f000 f942 	bl	8000908 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000688:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800068a:	f107 0310 	add.w	r3, r7, #16
 800068e:	4619      	mov	r1, r3
 8000690:	480c      	ldr	r0, [pc, #48]	; (80006c4 <MX_TIM2_Init+0x94>)
 8000692:	f006 fb15 	bl	8006cc0 <HAL_TIM_ConfigClockSource>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800069c:	f000 f934 	bl	8000908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80006a0:	2320      	movs	r3, #32
 80006a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	4619      	mov	r1, r3
 80006ac:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_TIM2_Init+0x94>)
 80006ae:	f006 fd57 	bl	8007160 <HAL_TIMEx_MasterConfigSynchronization>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80006b8:	f000 f926 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	3720      	adds	r7, #32
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	200029b4 	.word	0x200029b4
 80006c8:	03e2f307 	.word	0x03e2f307

080006cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_DMA_Init+0x50>)
 80006d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006d6:	4a11      	ldr	r2, [pc, #68]	; (800071c <MX_DMA_Init+0x50>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	6493      	str	r3, [r2, #72]	; 0x48
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_DMA_Init+0x50>)
 80006e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_DMA_Init+0x50>)
 80006ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ee:	4a0b      	ldr	r2, [pc, #44]	; (800071c <MX_DMA_Init+0x50>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6493      	str	r3, [r2, #72]	; 0x48
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_DMA_Init+0x50>)
 80006f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	2100      	movs	r1, #0
 8000706:	200b      	movs	r0, #11
 8000708:	f001 fd5b 	bl	80021c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800070c:	200b      	movs	r0, #11
 800070e:	f001 fd72 	bl	80021f6 <HAL_NVIC_EnableIRQ>

}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40021000 	.word	0x40021000

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000736:	4b40      	ldr	r3, [pc, #256]	; (8000838 <MX_GPIO_Init+0x118>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	4a3f      	ldr	r2, [pc, #252]	; (8000838 <MX_GPIO_Init+0x118>)
 800073c:	f043 0320 	orr.w	r3, r3, #32
 8000740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000742:	4b3d      	ldr	r3, [pc, #244]	; (8000838 <MX_GPIO_Init+0x118>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	f003 0320 	and.w	r3, r3, #32
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	4b3a      	ldr	r3, [pc, #232]	; (8000838 <MX_GPIO_Init+0x118>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4a39      	ldr	r2, [pc, #228]	; (8000838 <MX_GPIO_Init+0x118>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4b37      	ldr	r3, [pc, #220]	; (8000838 <MX_GPIO_Init+0x118>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	4b34      	ldr	r3, [pc, #208]	; (8000838 <MX_GPIO_Init+0x118>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a33      	ldr	r2, [pc, #204]	; (8000838 <MX_GPIO_Init+0x118>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b31      	ldr	r3, [pc, #196]	; (8000838 <MX_GPIO_Init+0x118>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000784:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000788:	f002 fcec 	bl	8003164 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800078c:	2303      	movs	r3, #3
 800078e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000790:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000794:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	4619      	mov	r1, r3
 80007a0:	4826      	ldr	r0, [pc, #152]	; (800083c <MX_GPIO_Init+0x11c>)
 80007a2:	f002 fb5d 	bl	8002e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ac:	2312      	movs	r3, #18
 80007ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 80007b8:	2302      	movs	r3, #2
 80007ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	4619      	mov	r1, r3
 80007c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c6:	f002 fb4b 	bl	8002e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007d0:	2312      	movs	r3, #18
 80007d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d8:	2300      	movs	r3, #0
 80007da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80007dc:	2304      	movs	r3, #4
 80007de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	4619      	mov	r1, r3
 80007e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ea:	f002 fb39 	bl	8002e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LSM6DSL_ncs_Pin */
  GPIO_InitStruct.Pin = LSM6DSL_ncs_Pin;
 80007ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LSM6DSL_ncs_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	4619      	mov	r1, r3
 8000806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080a:	f002 fb29 	bl	8002e60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	2006      	movs	r0, #6
 8000814:	f001 fcd5 	bl	80021c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000818:	2006      	movs	r0, #6
 800081a:	f001 fcec 	bl	80021f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2100      	movs	r1, #0
 8000822:	2007      	movs	r0, #7
 8000824:	f001 fccd 	bl	80021c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000828:	2007      	movs	r0, #7
 800082a:	f001 fce4 	bl	80021f6 <HAL_NVIC_EnableIRQ>

}
 800082e:	bf00      	nop
 8000830:	3720      	adds	r7, #32
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40021000 	.word	0x40021000
 800083c:	48000400 	.word	0x48000400

08000840 <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	607a      	str	r2, [r7, #4]
 800084a:	461a      	mov	r2, r3
 800084c:	460b      	mov	r3, r1
 800084e:	72fb      	strb	r3, [r7, #11]
 8000850:	4613      	mov	r3, r2
 8000852:	813b      	strh	r3, [r7, #8]
  HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800085a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800085e:	f002 fc81 	bl	8003164 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8000862:	f107 010b 	add.w	r1, r7, #11
 8000866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800086a:	2201      	movs	r2, #1
 800086c:	68f8      	ldr	r0, [r7, #12]
 800086e:	f005 fa88 	bl	8005d82 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
 8000872:	893a      	ldrh	r2, [r7, #8]
 8000874:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000878:	6879      	ldr	r1, [r7, #4]
 800087a:	68f8      	ldr	r0, [r7, #12]
 800087c:	f005 fa81 	bl	8005d82 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_SET);
 8000880:	2201      	movs	r2, #1
 8000882:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088a:	f002 fc6b 	bl	8003164 <HAL_GPIO_WritePin>
  return 0;
 800088e:	2300      	movs	r3, #0
}
 8000890:	4618      	mov	r0, r3
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	607a      	str	r2, [r7, #4]
 80008a2:	461a      	mov	r2, r3
 80008a4:	460b      	mov	r3, r1
 80008a6:	72fb      	strb	r3, [r7, #11]
 80008a8:	4613      	mov	r3, r2
 80008aa:	813b      	strh	r3, [r7, #8]
	uint8_t tx_data[2];
	tx_data[0] = 0x80 | reg;
 80008ac:	7afb      	ldrb	r3, [r7, #11]
 80008ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	753b      	strb	r3, [r7, #20]
	tx_data[1] = 0x00;
 80008b6:	2300      	movs	r3, #0
 80008b8:	757b      	strb	r3, [r7, #21]
	// Reset the complete flag
	spi_complete_flag = 0;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <platform_read+0x68>)
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
	// Start the SPI transfer
	HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ca:	f002 fc4b 	bl	8003164 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, tx_data, bufp, len);
 80008ce:	893b      	ldrh	r3, [r7, #8]
 80008d0:	f107 0114 	add.w	r1, r7, #20
 80008d4:	687a      	ldr	r2, [r7, #4]
 80008d6:	480b      	ldr	r0, [pc, #44]	; (8000904 <platform_read+0x6c>)
 80008d8:	f005 fbc2 	bl	8006060 <HAL_SPI_TransmitReceive_DMA>

	// Wait for the transfer to complete
	while(!spi_complete_flag);
 80008dc:	bf00      	nop
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <platform_read+0x68>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d0fa      	beq.n	80008de <platform_read+0x46>

	HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_SET);
 80008e8:	2201      	movs	r2, #1
 80008ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f2:	f002 fc37 	bl	8003164 <HAL_GPIO_WritePin>
  return 0;
 80008f6:	2300      	movs	r3, #0
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3718      	adds	r7, #24
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20002a02 	.word	0x20002a02
 8000904:	20002950 	.word	0x20002950

08000908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090c:	b672      	cpsid	i
}
 800090e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000910:	e7fe      	b.n	8000910 <Error_Handler+0x8>
	...

08000914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091a:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <HAL_MspInit+0x44>)
 800091c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800091e:	4a0e      	ldr	r2, [pc, #56]	; (8000958 <HAL_MspInit+0x44>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6613      	str	r3, [r2, #96]	; 0x60
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <HAL_MspInit+0x44>)
 8000928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <HAL_MspInit+0x44>)
 8000934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000936:	4a08      	ldr	r2, [pc, #32]	; (8000958 <HAL_MspInit+0x44>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093c:	6593      	str	r3, [r2, #88]	; 0x58
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HAL_MspInit+0x44>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40021000 	.word	0x40021000

0800095c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b09e      	sub	sp, #120	; 0x78
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000974:	f107 0310 	add.w	r3, r7, #16
 8000978:	2254      	movs	r2, #84	; 0x54
 800097a:	2100      	movs	r1, #0
 800097c:	4618      	mov	r0, r3
 800097e:	f00b f877 	bl	800ba70 <memset>
  if(hadc->Instance==ADC1)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800098a:	d134      	bne.n	80009f6 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800098c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000990:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8000992:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000996:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000998:	f107 0310 	add.w	r3, r7, #16
 800099c:	4618      	mov	r0, r3
 800099e:	f004 fef7 	bl	8005790 <HAL_RCCEx_PeriphCLKConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80009a8:	f7ff ffae 	bl	8000908 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <HAL_ADC_MspInit+0xa4>)
 80009ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b0:	4a13      	ldr	r2, [pc, #76]	; (8000a00 <HAL_ADC_MspInit+0xa4>)
 80009b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <HAL_ADC_MspInit+0xa4>)
 80009ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <HAL_ADC_MspInit+0xa4>)
 80009c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c8:	4a0d      	ldr	r2, [pc, #52]	; (8000a00 <HAL_ADC_MspInit+0xa4>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d0:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <HAL_ADC_MspInit+0xa4>)
 80009d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80009dc:	230f      	movs	r3, #15
 80009de:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e0:	2303      	movs	r3, #3
 80009e2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009ec:	4619      	mov	r1, r3
 80009ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f2:	f002 fa35 	bl	8002e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009f6:	bf00      	nop
 80009f8:	3778      	adds	r7, #120	; 0x78
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40021000 	.word	0x40021000

08000a04 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	; 0x28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a2b      	ldr	r2, [pc, #172]	; (8000ad0 <HAL_DAC_MspInit+0xcc>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d150      	bne.n	8000ac8 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000a26:	4b2b      	ldr	r3, [pc, #172]	; (8000ad4 <HAL_DAC_MspInit+0xd0>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	4a2a      	ldr	r2, [pc, #168]	; (8000ad4 <HAL_DAC_MspInit+0xd0>)
 8000a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a32:	4b28      	ldr	r3, [pc, #160]	; (8000ad4 <HAL_DAC_MspInit+0xd0>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	4b25      	ldr	r3, [pc, #148]	; (8000ad4 <HAL_DAC_MspInit+0xd0>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	4a24      	ldr	r2, [pc, #144]	; (8000ad4 <HAL_DAC_MspInit+0xd0>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4a:	4b22      	ldr	r3, [pc, #136]	; (8000ad4 <HAL_DAC_MspInit+0xd0>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a56:	2310      	movs	r3, #16
 8000a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	4619      	mov	r1, r3
 8000a68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6c:	f002 f9f8 	bl	8002e60 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8000a70:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <HAL_DAC_MspInit+0xd4>)
 8000a72:	4a1a      	ldr	r2, [pc, #104]	; (8000adc <HAL_DAC_MspInit+0xd8>)
 8000a74:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8000a76:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <HAL_DAC_MspInit+0xd4>)
 8000a78:	2206      	movs	r2, #6
 8000a7a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a7c:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <HAL_DAC_MspInit+0xd4>)
 8000a7e:	2210      	movs	r2, #16
 8000a80:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <HAL_DAC_MspInit+0xd4>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <HAL_DAC_MspInit+0xd4>)
 8000a8a:	2280      	movs	r2, #128	; 0x80
 8000a8c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a8e:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <HAL_DAC_MspInit+0xd4>)
 8000a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a94:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <HAL_DAC_MspInit+0xd4>)
 8000a98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a9c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <HAL_DAC_MspInit+0xd4>)
 8000aa0:	2220      	movs	r2, #32
 8000aa2:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <HAL_DAC_MspInit+0xd4>)
 8000aa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aaa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000aac:	480a      	ldr	r0, [pc, #40]	; (8000ad8 <HAL_DAC_MspInit+0xd4>)
 8000aae:	f001 fefd 	bl	80028ac <HAL_DMA_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8000ab8:	f7ff ff26 	bl	8000908 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a06      	ldr	r2, [pc, #24]	; (8000ad8 <HAL_DAC_MspInit+0xd4>)
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <HAL_DAC_MspInit+0xd4>)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000ac8:	bf00      	nop
 8000aca:	3728      	adds	r7, #40	; 0x28
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	50000800 	.word	0x50000800
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	200028f0 	.word	0x200028f0
 8000adc:	40020008 	.word	0x40020008

08000ae0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a1b      	ldr	r2, [pc, #108]	; (8000b6c <HAL_SPI_MspInit+0x8c>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d130      	bne.n	8000b64 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b02:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <HAL_SPI_MspInit+0x90>)
 8000b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b06:	4a1a      	ldr	r2, [pc, #104]	; (8000b70 <HAL_SPI_MspInit+0x90>)
 8000b08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b0e:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <HAL_SPI_MspInit+0x90>)
 8000b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_SPI_MspInit+0x90>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <HAL_SPI_MspInit+0x90>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_SPI_MspInit+0x90>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b32:	23e0      	movs	r3, #224	; 0xe0
 8000b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b42:	2305      	movs	r3, #5
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b50:	f002 f986 	bl	8002e60 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	2023      	movs	r0, #35	; 0x23
 8000b5a:	f001 fb32 	bl	80021c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000b5e:	2023      	movs	r0, #35	; 0x23
 8000b60:	f001 fb49 	bl	80021f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b64:	bf00      	nop
 8000b66:	3728      	adds	r7, #40	; 0x28
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40013000 	.word	0x40013000
 8000b70:	40021000 	.word	0x40021000

08000b74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b84:	d10b      	bne.n	8000b9e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_TIM_Base_MspInit+0x38>)
 8000b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8a:	4a08      	ldr	r2, [pc, #32]	; (8000bac <HAL_TIM_Base_MspInit+0x38>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6593      	str	r3, [r2, #88]	; 0x58
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_TIM_Base_MspInit+0x38>)
 8000b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b9e:	bf00      	nop
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40021000 	.word	0x40021000

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <NMI_Handler+0x4>

08000bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <HardFault_Handler+0x4>

08000bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <MemManage_Handler+0x4>

08000bc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <BusFault_Handler+0x4>

08000bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <UsageFault_Handler+0x4>

08000bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfc:	f000 f8bc 	bl	8000d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f002 fac3 	bl	8003194 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000c16:	2002      	movs	r0, #2
 8000c18:	f002 fabc 	bl	8003194 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <DMA1_Channel1_IRQHandler+0x10>)
 8000c26:	f001 ffcb 	bl	8002bc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200028f0 	.word	0x200028f0

08000c34 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000c38:	4802      	ldr	r0, [pc, #8]	; (8000c44 <USB_LP_IRQHandler+0x10>)
 8000c3a:	f002 fbd5 	bl	80033e8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20003edc 	.word	0x20003edc

08000c48 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <SPI1_IRQHandler+0x10>)
 8000c4e:	f005 fb93 	bl	8006378 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20002950 	.word	0x20002950

08000c5c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <SystemInit+0x20>)
 8000c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <SystemInit+0x20>)
 8000c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c80:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c82:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c84:	480d      	ldr	r0, [pc, #52]	; (8000cbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000c86:	490e      	ldr	r1, [pc, #56]	; (8000cc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c88:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <LoopForever+0xe>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000c8c:	e002      	b.n	8000c94 <LoopCopyDataInit>

08000c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c92:	3304      	adds	r3, #4

08000c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c98:	d3f9      	bcc.n	8000c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9a:	4a0b      	ldr	r2, [pc, #44]	; (8000cc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c9c:	4c0b      	ldr	r4, [pc, #44]	; (8000ccc <LoopForever+0x16>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca0:	e001      	b.n	8000ca6 <LoopFillZerobss>

08000ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca4:	3204      	adds	r2, #4

08000ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca8:	d3fb      	bcc.n	8000ca2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000caa:	f7ff ffd7 	bl	8000c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cae:	f00a febb 	bl	800ba28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cb2:	f7ff fb31 	bl	8000318 <main>

08000cb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cb6:	e7fe      	b.n	8000cb6 <LoopForever>
  ldr   r0, =_estack
 8000cb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc0:	20002854 	.word	0x20002854
  ldr r2, =_sidata
 8000cc4:	0800baf8 	.word	0x0800baf8
  ldr r2, =_sbss
 8000cc8:	20002854 	.word	0x20002854
  ldr r4, =_ebss
 8000ccc:	200043f0 	.word	0x200043f0

08000cd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC1_2_IRQHandler>

08000cd2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cdc:	2003      	movs	r0, #3
 8000cde:	f001 fa65 	bl	80021ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ce2:	200f      	movs	r0, #15
 8000ce4:	f000 f80e 	bl	8000d04 <HAL_InitTick>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d002      	beq.n	8000cf4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	71fb      	strb	r3, [r7, #7]
 8000cf2:	e001      	b.n	8000cf8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cf4:	f7ff fe0e 	bl	8000914 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cf8:	79fb      	ldrb	r3, [r7, #7]

}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d10:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <HAL_InitTick+0x68>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d022      	beq.n	8000d5e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <HAL_InitTick+0x6c>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <HAL_InitTick+0x68>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d24:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f001 fa70 	bl	8002212 <HAL_SYSTICK_Config>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d10f      	bne.n	8000d58 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b0f      	cmp	r3, #15
 8000d3c:	d809      	bhi.n	8000d52 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	6879      	ldr	r1, [r7, #4]
 8000d42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d46:	f001 fa3c 	bl	80021c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <HAL_InitTick+0x70>)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6013      	str	r3, [r2, #0]
 8000d50:	e007      	b.n	8000d62 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	73fb      	strb	r3, [r7, #15]
 8000d56:	e004      	b.n	8000d62 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	73fb      	strb	r3, [r7, #15]
 8000d5c:	e001      	b.n	8000d62 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	200026d8 	.word	0x200026d8
 8000d70:	200026d0 	.word	0x200026d0
 8000d74:	200026d4 	.word	0x200026d4

08000d78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <HAL_IncTick+0x1c>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <HAL_IncTick+0x20>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4413      	add	r3, r2
 8000d86:	4a03      	ldr	r2, [pc, #12]	; (8000d94 <HAL_IncTick+0x1c>)
 8000d88:	6013      	str	r3, [r2, #0]
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	20002a04 	.word	0x20002a04
 8000d98:	200026d8 	.word	0x200026d8

08000d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000da0:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <HAL_GetTick+0x14>)
 8000da2:	681b      	ldr	r3, [r3, #0]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	20002a04 	.word	0x20002a04

08000db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dbc:	f7ff ffee 	bl	8000d9c <HAL_GetTick>
 8000dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dcc:	d004      	beq.n	8000dd8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <HAL_Delay+0x40>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dd8:	bf00      	nop
 8000dda:	f7ff ffdf 	bl	8000d9c <HAL_GetTick>
 8000dde:	4602      	mov	r2, r0
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	68fa      	ldr	r2, [r7, #12]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d8f7      	bhi.n	8000dda <HAL_Delay+0x26>
  {
  }
}
 8000dea:	bf00      	nop
 8000dec:	bf00      	nop
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	200026d8 	.word	0x200026d8

08000df8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	431a      	orrs	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	609a      	str	r2, [r3, #8]
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
 8000e26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	431a      	orrs	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	609a      	str	r2, [r3, #8]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b087      	sub	sp, #28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
 8000e6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	3360      	adds	r3, #96	; 0x60
 8000e72:	461a      	mov	r2, r3
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	4413      	add	r3, r2
 8000e7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <LL_ADC_SetOffset+0x44>)
 8000e82:	4013      	ands	r3, r2
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000e8a:	683a      	ldr	r2, [r7, #0]
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000e98:	bf00      	nop
 8000e9a:	371c      	adds	r7, #28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	03fff000 	.word	0x03fff000

08000ea8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3360      	adds	r3, #96	; 0x60
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	4413      	add	r3, r2
 8000ebe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b087      	sub	sp, #28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	3360      	adds	r3, #96	; 0x60
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	431a      	orrs	r2, r3
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000efe:	bf00      	nop
 8000f00:	371c      	adds	r7, #28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	b087      	sub	sp, #28
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	60f8      	str	r0, [r7, #12]
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	3360      	adds	r3, #96	; 0x60
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4413      	add	r3, r2
 8000f22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000f34:	bf00      	nop
 8000f36:	371c      	adds	r7, #28
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b087      	sub	sp, #28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	3360      	adds	r3, #96	; 0x60
 8000f50:	461a      	mov	r2, r3
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	4413      	add	r3, r2
 8000f58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	431a      	orrs	r2, r3
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000f6a:	bf00      	nop
 8000f6c:	371c      	adds	r7, #28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	615a      	str	r2, [r3, #20]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b087      	sub	sp, #28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	3330      	adds	r3, #48	; 0x30
 8000fac:	461a      	mov	r2, r3
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	f003 030c 	and.w	r3, r3, #12
 8000fb8:	4413      	add	r3, r2
 8000fba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	f003 031f 	and.w	r3, r3, #31
 8000fc6:	211f      	movs	r1, #31
 8000fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	401a      	ands	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	0e9b      	lsrs	r3, r3, #26
 8000fd4:	f003 011f 	and.w	r1, r3, #31
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	f003 031f 	and.w	r3, r3, #31
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000fe8:	bf00      	nop
 8000fea:	371c      	adds	r7, #28
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b087      	sub	sp, #28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	3314      	adds	r3, #20
 8001004:	461a      	mov	r2, r3
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	0e5b      	lsrs	r3, r3, #25
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	f003 0304 	and.w	r3, r3, #4
 8001010:	4413      	add	r3, r2
 8001012:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	0d1b      	lsrs	r3, r3, #20
 800101c:	f003 031f 	and.w	r3, r3, #31
 8001020:	2107      	movs	r1, #7
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	401a      	ands	r2, r3
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	0d1b      	lsrs	r3, r3, #20
 800102e:	f003 031f 	and.w	r3, r3, #31
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	fa01 f303 	lsl.w	r3, r1, r3
 8001038:	431a      	orrs	r2, r3
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800103e:	bf00      	nop
 8001040:	371c      	adds	r7, #28
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a0f      	ldr	r2, [pc, #60]	; (8001098 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d10a      	bne.n	8001076 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800106c:	431a      	orrs	r2, r3
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001074:	e00a      	b.n	800108c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001082:	43db      	mvns	r3, r3
 8001084:	401a      	ands	r2, r3
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800108c:	bf00      	nop
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	407f0000 	.word	0x407f0000

0800109c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80010ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	6093      	str	r3, [r2, #8]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80010d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010d4:	d101      	bne.n	80010da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80010d6:	2301      	movs	r3, #1
 80010d8:	e000      	b.n	80010dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80010f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001120:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001124:	d101      	bne.n	800112a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	2b01      	cmp	r3, #1
 800114a:	d101      	bne.n	8001150 <LL_ADC_IsEnabled+0x18>
 800114c:	2301      	movs	r3, #1
 800114e:	e000      	b.n	8001152 <LL_ADC_IsEnabled+0x1a>
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	2b04      	cmp	r3, #4
 8001170:	d101      	bne.n	8001176 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001172:	2301      	movs	r3, #1
 8001174:	e000      	b.n	8001178 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001176:	2300      	movs	r3, #0
}
 8001178:	4618      	mov	r0, r3
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f003 0308 	and.w	r3, r3, #8
 8001194:	2b08      	cmp	r3, #8
 8001196:	d101      	bne.n	800119c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001198:	2301      	movs	r3, #1
 800119a:	e000      	b.n	800119e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011ac:	b590      	push	{r4, r7, lr}
 80011ae:	b089      	sub	sp, #36	; 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011b4:	2300      	movs	r3, #0
 80011b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e1af      	b.n	8001526 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d109      	bne.n	80011e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff fbc1 	bl	800095c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff67 	bl	80010c0 <LL_ADC_IsDeepPowerDownEnabled>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d004      	beq.n	8001202 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff4d 	bl	800109c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ff82 	bl	8001110 <LL_ADC_IsInternalRegulatorEnabled>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d115      	bne.n	800123e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ff66 	bl	80010e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800121c:	4b9f      	ldr	r3, [pc, #636]	; (800149c <HAL_ADC_Init+0x2f0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	099b      	lsrs	r3, r3, #6
 8001222:	4a9f      	ldr	r2, [pc, #636]	; (80014a0 <HAL_ADC_Init+0x2f4>)
 8001224:	fba2 2303 	umull	r2, r3, r2, r3
 8001228:	099b      	lsrs	r3, r3, #6
 800122a:	3301      	adds	r3, #1
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001230:	e002      	b.n	8001238 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	3b01      	subs	r3, #1
 8001236:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1f9      	bne.n	8001232 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ff64 	bl	8001110 <LL_ADC_IsInternalRegulatorEnabled>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d10d      	bne.n	800126a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001252:	f043 0210 	orr.w	r2, r3, #16
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800125e:	f043 0201 	orr.w	r2, r3, #1
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ff75 	bl	800115e <LL_ADC_REG_IsConversionOngoing>
 8001274:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800127a:	f003 0310 	and.w	r3, r3, #16
 800127e:	2b00      	cmp	r3, #0
 8001280:	f040 8148 	bne.w	8001514 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	2b00      	cmp	r3, #0
 8001288:	f040 8144 	bne.w	8001514 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001290:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001294:	f043 0202 	orr.w	r2, r3, #2
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff49 	bl	8001138 <LL_ADC_IsEnabled>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d141      	bne.n	8001330 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012b4:	d004      	beq.n	80012c0 <HAL_ADC_Init+0x114>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a7a      	ldr	r2, [pc, #488]	; (80014a4 <HAL_ADC_Init+0x2f8>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d10f      	bne.n	80012e0 <HAL_ADC_Init+0x134>
 80012c0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80012c4:	f7ff ff38 	bl	8001138 <LL_ADC_IsEnabled>
 80012c8:	4604      	mov	r4, r0
 80012ca:	4876      	ldr	r0, [pc, #472]	; (80014a4 <HAL_ADC_Init+0x2f8>)
 80012cc:	f7ff ff34 	bl	8001138 <LL_ADC_IsEnabled>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4323      	orrs	r3, r4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	bf0c      	ite	eq
 80012d8:	2301      	moveq	r3, #1
 80012da:	2300      	movne	r3, #0
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	e012      	b.n	8001306 <HAL_ADC_Init+0x15a>
 80012e0:	4871      	ldr	r0, [pc, #452]	; (80014a8 <HAL_ADC_Init+0x2fc>)
 80012e2:	f7ff ff29 	bl	8001138 <LL_ADC_IsEnabled>
 80012e6:	4604      	mov	r4, r0
 80012e8:	4870      	ldr	r0, [pc, #448]	; (80014ac <HAL_ADC_Init+0x300>)
 80012ea:	f7ff ff25 	bl	8001138 <LL_ADC_IsEnabled>
 80012ee:	4603      	mov	r3, r0
 80012f0:	431c      	orrs	r4, r3
 80012f2:	486f      	ldr	r0, [pc, #444]	; (80014b0 <HAL_ADC_Init+0x304>)
 80012f4:	f7ff ff20 	bl	8001138 <LL_ADC_IsEnabled>
 80012f8:	4603      	mov	r3, r0
 80012fa:	4323      	orrs	r3, r4
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	bf0c      	ite	eq
 8001300:	2301      	moveq	r3, #1
 8001302:	2300      	movne	r3, #0
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d012      	beq.n	8001330 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001312:	d004      	beq.n	800131e <HAL_ADC_Init+0x172>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a62      	ldr	r2, [pc, #392]	; (80014a4 <HAL_ADC_Init+0x2f8>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d101      	bne.n	8001322 <HAL_ADC_Init+0x176>
 800131e:	4a65      	ldr	r2, [pc, #404]	; (80014b4 <HAL_ADC_Init+0x308>)
 8001320:	e000      	b.n	8001324 <HAL_ADC_Init+0x178>
 8001322:	4a65      	ldr	r2, [pc, #404]	; (80014b8 <HAL_ADC_Init+0x30c>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	4619      	mov	r1, r3
 800132a:	4610      	mov	r0, r2
 800132c:	f7ff fd64 	bl	8000df8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	7f5b      	ldrb	r3, [r3, #29]
 8001334:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800133a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001340:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001346:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800134e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800135a:	2b01      	cmp	r3, #1
 800135c:	d106      	bne.n	800136c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001362:	3b01      	subs	r3, #1
 8001364:	045b      	lsls	r3, r3, #17
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001370:	2b00      	cmp	r3, #0
 8001372:	d009      	beq.n	8001388 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001378:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001380:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68da      	ldr	r2, [r3, #12]
 800138e:	4b4b      	ldr	r3, [pc, #300]	; (80014bc <HAL_ADC_Init+0x310>)
 8001390:	4013      	ands	r3, r2
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6812      	ldr	r2, [r2, #0]
 8001396:	69b9      	ldr	r1, [r7, #24]
 8001398:	430b      	orrs	r3, r1
 800139a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fed1 	bl	800115e <LL_ADC_REG_IsConversionOngoing>
 80013bc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fede 	bl	8001184 <LL_ADC_INJ_IsConversionOngoing>
 80013c8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d17f      	bne.n	80014d0 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d17c      	bne.n	80014d0 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80013da:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80013e2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013f2:	f023 0302 	bic.w	r3, r3, #2
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	6812      	ldr	r2, [r2, #0]
 80013fa:	69b9      	ldr	r1, [r7, #24]
 80013fc:	430b      	orrs	r3, r1
 80013fe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d017      	beq.n	8001438 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	691a      	ldr	r2, [r3, #16]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001416:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001420:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001424:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	6911      	ldr	r1, [r2, #16]
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	6812      	ldr	r2, [r2, #0]
 8001430:	430b      	orrs	r3, r1
 8001432:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001436:	e013      	b.n	8001460 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	691a      	ldr	r2, [r3, #16]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001446:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001458:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800145c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001466:	2b01      	cmp	r3, #1
 8001468:	d12a      	bne.n	80014c0 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001474:	f023 0304 	bic.w	r3, r3, #4
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001480:	4311      	orrs	r1, r2
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001486:	4311      	orrs	r1, r2
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800148c:	430a      	orrs	r2, r1
 800148e:	431a      	orrs	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f042 0201 	orr.w	r2, r2, #1
 8001498:	611a      	str	r2, [r3, #16]
 800149a:	e019      	b.n	80014d0 <HAL_ADC_Init+0x324>
 800149c:	200026d0 	.word	0x200026d0
 80014a0:	053e2d63 	.word	0x053e2d63
 80014a4:	50000100 	.word	0x50000100
 80014a8:	50000400 	.word	0x50000400
 80014ac:	50000500 	.word	0x50000500
 80014b0:	50000600 	.word	0x50000600
 80014b4:	50000300 	.word	0x50000300
 80014b8:	50000700 	.word	0x50000700
 80014bc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	691a      	ldr	r2, [r3, #16]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 0201 	bic.w	r2, r2, #1
 80014ce:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d10c      	bne.n	80014f2 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f023 010f 	bic.w	r1, r3, #15
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	1e5a      	subs	r2, r3, #1
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	631a      	str	r2, [r3, #48]	; 0x30
 80014f0:	e007      	b.n	8001502 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 020f 	bic.w	r2, r2, #15
 8001500:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001506:	f023 0303 	bic.w	r3, r3, #3
 800150a:	f043 0201 	orr.w	r2, r3, #1
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	65da      	str	r2, [r3, #92]	; 0x5c
 8001512:	e007      	b.n	8001524 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001518:	f043 0210 	orr.w	r2, r3, #16
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001524:	7ffb      	ldrb	r3, [r7, #31]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3724      	adds	r7, #36	; 0x24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd90      	pop	{r4, r7, pc}
 800152e:	bf00      	nop

08001530 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b0b6      	sub	sp, #216	; 0xd8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800154a:	2b01      	cmp	r3, #1
 800154c:	d102      	bne.n	8001554 <HAL_ADC_ConfigChannel+0x24>
 800154e:	2302      	movs	r3, #2
 8001550:	f000 bc13 	b.w	8001d7a <HAL_ADC_ConfigChannel+0x84a>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fdfc 	bl	800115e <LL_ADC_REG_IsConversionOngoing>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	f040 83f3 	bne.w	8001d54 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6818      	ldr	r0, [r3, #0]
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	6859      	ldr	r1, [r3, #4]
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	461a      	mov	r2, r3
 800157c:	f7ff fd0e 	bl	8000f9c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fdea 	bl	800115e <LL_ADC_REG_IsConversionOngoing>
 800158a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fdf6 	bl	8001184 <LL_ADC_INJ_IsConversionOngoing>
 8001598:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800159c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f040 81d9 	bne.w	8001958 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f040 81d4 	bne.w	8001958 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015b8:	d10f      	bne.n	80015da <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2200      	movs	r2, #0
 80015c4:	4619      	mov	r1, r3
 80015c6:	f7ff fd15 	bl	8000ff4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fccf 	bl	8000f76 <LL_ADC_SetSamplingTimeCommonConfig>
 80015d8:	e00e      	b.n	80015f8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6818      	ldr	r0, [r3, #0]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	6819      	ldr	r1, [r3, #0]
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	461a      	mov	r2, r3
 80015e8:	f7ff fd04 	bl	8000ff4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fcbf 	bl	8000f76 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	695a      	ldr	r2, [r3, #20]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	08db      	lsrs	r3, r3, #3
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	2b04      	cmp	r3, #4
 8001618:	d022      	beq.n	8001660 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6818      	ldr	r0, [r3, #0]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	6919      	ldr	r1, [r3, #16]
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800162a:	f7ff fc19 	bl	8000e60 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6818      	ldr	r0, [r3, #0]
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	6919      	ldr	r1, [r3, #16]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	461a      	mov	r2, r3
 800163c:	f7ff fc65 	bl	8000f0a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6818      	ldr	r0, [r3, #0]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	6919      	ldr	r1, [r3, #16]
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	7f1b      	ldrb	r3, [r3, #28]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d102      	bne.n	8001656 <HAL_ADC_ConfigChannel+0x126>
 8001650:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001654:	e000      	b.n	8001658 <HAL_ADC_ConfigChannel+0x128>
 8001656:	2300      	movs	r3, #0
 8001658:	461a      	mov	r2, r3
 800165a:	f7ff fc71 	bl	8000f40 <LL_ADC_SetOffsetSaturation>
 800165e:	e17b      	b.n	8001958 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2100      	movs	r1, #0
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fc1e 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 800166c:	4603      	mov	r3, r0
 800166e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10a      	bne.n	800168c <HAL_ADC_ConfigChannel+0x15c>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2100      	movs	r1, #0
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fc13 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 8001682:	4603      	mov	r3, r0
 8001684:	0e9b      	lsrs	r3, r3, #26
 8001686:	f003 021f 	and.w	r2, r3, #31
 800168a:	e01e      	b.n	80016ca <HAL_ADC_ConfigChannel+0x19a>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2100      	movs	r1, #0
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fc08 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 8001698:	4603      	mov	r3, r0
 800169a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80016a2:	fa93 f3a3 	rbit	r3, r3
 80016a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80016b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80016ba:	2320      	movs	r3, #32
 80016bc:	e004      	b.n	80016c8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80016be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016c2:	fab3 f383 	clz	r3, r3
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d105      	bne.n	80016e2 <HAL_ADC_ConfigChannel+0x1b2>
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	0e9b      	lsrs	r3, r3, #26
 80016dc:	f003 031f 	and.w	r3, r3, #31
 80016e0:	e018      	b.n	8001714 <HAL_ADC_ConfigChannel+0x1e4>
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80016ee:	fa93 f3a3 	rbit	r3, r3
 80016f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80016f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80016fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001706:	2320      	movs	r3, #32
 8001708:	e004      	b.n	8001714 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800170a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800170e:	fab3 f383 	clz	r3, r3
 8001712:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001714:	429a      	cmp	r2, r3
 8001716:	d106      	bne.n	8001726 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2200      	movs	r2, #0
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fbd7 	bl	8000ed4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2101      	movs	r1, #1
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fbbb 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 8001732:	4603      	mov	r3, r0
 8001734:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001738:	2b00      	cmp	r3, #0
 800173a:	d10a      	bne.n	8001752 <HAL_ADC_ConfigChannel+0x222>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2101      	movs	r1, #1
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fbb0 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 8001748:	4603      	mov	r3, r0
 800174a:	0e9b      	lsrs	r3, r3, #26
 800174c:	f003 021f 	and.w	r2, r3, #31
 8001750:	e01e      	b.n	8001790 <HAL_ADC_ConfigChannel+0x260>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2101      	movs	r1, #1
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fba5 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 800175e:	4603      	mov	r3, r0
 8001760:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001764:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001768:	fa93 f3a3 	rbit	r3, r3
 800176c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001770:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001774:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001778:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001780:	2320      	movs	r3, #32
 8001782:	e004      	b.n	800178e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001784:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001788:	fab3 f383 	clz	r3, r3
 800178c:	b2db      	uxtb	r3, r3
 800178e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001798:	2b00      	cmp	r3, #0
 800179a:	d105      	bne.n	80017a8 <HAL_ADC_ConfigChannel+0x278>
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	0e9b      	lsrs	r3, r3, #26
 80017a2:	f003 031f 	and.w	r3, r3, #31
 80017a6:	e018      	b.n	80017da <HAL_ADC_ConfigChannel+0x2aa>
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017b4:	fa93 f3a3 	rbit	r3, r3
 80017b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80017bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80017c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80017c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80017cc:	2320      	movs	r3, #32
 80017ce:	e004      	b.n	80017da <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80017d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80017d4:	fab3 f383 	clz	r3, r3
 80017d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80017da:	429a      	cmp	r2, r3
 80017dc:	d106      	bne.n	80017ec <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2200      	movs	r2, #0
 80017e4:	2101      	movs	r1, #1
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff fb74 	bl	8000ed4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2102      	movs	r1, #2
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff fb58 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10a      	bne.n	8001818 <HAL_ADC_ConfigChannel+0x2e8>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2102      	movs	r1, #2
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fb4d 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 800180e:	4603      	mov	r3, r0
 8001810:	0e9b      	lsrs	r3, r3, #26
 8001812:	f003 021f 	and.w	r2, r3, #31
 8001816:	e01e      	b.n	8001856 <HAL_ADC_ConfigChannel+0x326>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2102      	movs	r1, #2
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fb42 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 8001824:	4603      	mov	r3, r0
 8001826:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800182e:	fa93 f3a3 	rbit	r3, r3
 8001832:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001836:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800183a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800183e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001846:	2320      	movs	r3, #32
 8001848:	e004      	b.n	8001854 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800184a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800184e:	fab3 f383 	clz	r3, r3
 8001852:	b2db      	uxtb	r3, r3
 8001854:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800185e:	2b00      	cmp	r3, #0
 8001860:	d105      	bne.n	800186e <HAL_ADC_ConfigChannel+0x33e>
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	0e9b      	lsrs	r3, r3, #26
 8001868:	f003 031f 	and.w	r3, r3, #31
 800186c:	e016      	b.n	800189c <HAL_ADC_ConfigChannel+0x36c>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001876:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800187a:	fa93 f3a3 	rbit	r3, r3
 800187e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001880:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001882:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001886:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800188e:	2320      	movs	r3, #32
 8001890:	e004      	b.n	800189c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001892:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001896:	fab3 f383 	clz	r3, r3
 800189a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800189c:	429a      	cmp	r2, r3
 800189e:	d106      	bne.n	80018ae <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2200      	movs	r2, #0
 80018a6:	2102      	movs	r1, #2
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fb13 	bl	8000ed4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2103      	movs	r1, #3
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff faf7 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 80018ba:	4603      	mov	r3, r0
 80018bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d10a      	bne.n	80018da <HAL_ADC_ConfigChannel+0x3aa>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2103      	movs	r1, #3
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff faec 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 80018d0:	4603      	mov	r3, r0
 80018d2:	0e9b      	lsrs	r3, r3, #26
 80018d4:	f003 021f 	and.w	r2, r3, #31
 80018d8:	e017      	b.n	800190a <HAL_ADC_ConfigChannel+0x3da>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2103      	movs	r1, #3
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fae1 	bl	8000ea8 <LL_ADC_GetOffsetChannel>
 80018e6:	4603      	mov	r3, r0
 80018e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018ec:	fa93 f3a3 	rbit	r3, r3
 80018f0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80018f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018f4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80018f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d101      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80018fc:	2320      	movs	r3, #32
 80018fe:	e003      	b.n	8001908 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001900:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001902:	fab3 f383 	clz	r3, r3
 8001906:	b2db      	uxtb	r3, r3
 8001908:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001912:	2b00      	cmp	r3, #0
 8001914:	d105      	bne.n	8001922 <HAL_ADC_ConfigChannel+0x3f2>
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	0e9b      	lsrs	r3, r3, #26
 800191c:	f003 031f 	and.w	r3, r3, #31
 8001920:	e011      	b.n	8001946 <HAL_ADC_ConfigChannel+0x416>
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001928:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800192a:	fa93 f3a3 	rbit	r3, r3
 800192e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001930:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001932:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800193a:	2320      	movs	r3, #32
 800193c:	e003      	b.n	8001946 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800193e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001940:	fab3 f383 	clz	r3, r3
 8001944:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001946:	429a      	cmp	r2, r3
 8001948:	d106      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2200      	movs	r2, #0
 8001950:	2103      	movs	r1, #3
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fabe 	bl	8000ed4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fbeb 	bl	8001138 <LL_ADC_IsEnabled>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	f040 813d 	bne.w	8001be4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6818      	ldr	r0, [r3, #0]
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	6819      	ldr	r1, [r3, #0]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	461a      	mov	r2, r3
 8001978:	f7ff fb68 	bl	800104c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	4aa2      	ldr	r2, [pc, #648]	; (8001c0c <HAL_ADC_ConfigChannel+0x6dc>)
 8001982:	4293      	cmp	r3, r2
 8001984:	f040 812e 	bne.w	8001be4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001994:	2b00      	cmp	r3, #0
 8001996:	d10b      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x480>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	0e9b      	lsrs	r3, r3, #26
 800199e:	3301      	adds	r3, #1
 80019a0:	f003 031f 	and.w	r3, r3, #31
 80019a4:	2b09      	cmp	r3, #9
 80019a6:	bf94      	ite	ls
 80019a8:	2301      	movls	r3, #1
 80019aa:	2300      	movhi	r3, #0
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	e019      	b.n	80019e4 <HAL_ADC_ConfigChannel+0x4b4>
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019b8:	fa93 f3a3 	rbit	r3, r3
 80019bc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80019be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019c0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80019c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80019c8:	2320      	movs	r3, #32
 80019ca:	e003      	b.n	80019d4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80019cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019ce:	fab3 f383 	clz	r3, r3
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	3301      	adds	r3, #1
 80019d6:	f003 031f 	and.w	r3, r3, #31
 80019da:	2b09      	cmp	r3, #9
 80019dc:	bf94      	ite	ls
 80019de:	2301      	movls	r3, #1
 80019e0:	2300      	movhi	r3, #0
 80019e2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d079      	beq.n	8001adc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d107      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x4d4>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	0e9b      	lsrs	r3, r3, #26
 80019fa:	3301      	adds	r3, #1
 80019fc:	069b      	lsls	r3, r3, #26
 80019fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a02:	e015      	b.n	8001a30 <HAL_ADC_ConfigChannel+0x500>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a0c:	fa93 f3a3 	rbit	r3, r3
 8001a10:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a14:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001a1c:	2320      	movs	r3, #32
 8001a1e:	e003      	b.n	8001a28 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a22:	fab3 f383 	clz	r3, r3
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	3301      	adds	r3, #1
 8001a2a:	069b      	lsls	r3, r3, #26
 8001a2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d109      	bne.n	8001a50 <HAL_ADC_ConfigChannel+0x520>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	0e9b      	lsrs	r3, r3, #26
 8001a42:	3301      	adds	r3, #1
 8001a44:	f003 031f 	and.w	r3, r3, #31
 8001a48:	2101      	movs	r1, #1
 8001a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4e:	e017      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x550>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a58:	fa93 f3a3 	rbit	r3, r3
 8001a5c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a60:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001a68:	2320      	movs	r3, #32
 8001a6a:	e003      	b.n	8001a74 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a6e:	fab3 f383 	clz	r3, r3
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	3301      	adds	r3, #1
 8001a76:	f003 031f 	and.w	r3, r3, #31
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a80:	ea42 0103 	orr.w	r1, r2, r3
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d10a      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x576>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	0e9b      	lsrs	r3, r3, #26
 8001a96:	3301      	adds	r3, #1
 8001a98:	f003 021f 	and.w	r2, r3, #31
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	4413      	add	r3, r2
 8001aa2:	051b      	lsls	r3, r3, #20
 8001aa4:	e018      	b.n	8001ad8 <HAL_ADC_ConfigChannel+0x5a8>
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aae:	fa93 f3a3 	rbit	r3, r3
 8001ab2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001abe:	2320      	movs	r3, #32
 8001ac0:	e003      	b.n	8001aca <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ac4:	fab3 f383 	clz	r3, r3
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	3301      	adds	r3, #1
 8001acc:	f003 021f 	and.w	r2, r3, #31
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	4413      	add	r3, r2
 8001ad6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ad8:	430b      	orrs	r3, r1
 8001ada:	e07e      	b.n	8001bda <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d107      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x5c8>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	0e9b      	lsrs	r3, r3, #26
 8001aee:	3301      	adds	r3, #1
 8001af0:	069b      	lsls	r3, r3, #26
 8001af2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001af6:	e015      	b.n	8001b24 <HAL_ADC_ConfigChannel+0x5f4>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b00:	fa93 f3a3 	rbit	r3, r3
 8001b04:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b08:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001b10:	2320      	movs	r3, #32
 8001b12:	e003      	b.n	8001b1c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b16:	fab3 f383 	clz	r3, r3
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	069b      	lsls	r3, r3, #26
 8001b20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d109      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x614>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	0e9b      	lsrs	r3, r3, #26
 8001b36:	3301      	adds	r3, #1
 8001b38:	f003 031f 	and.w	r3, r3, #31
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b42:	e017      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x644>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
 8001b4c:	fa93 f3a3 	rbit	r3, r3
 8001b50:	61fb      	str	r3, [r7, #28]
  return result;
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001b5c:	2320      	movs	r3, #32
 8001b5e:	e003      	b.n	8001b68 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	fab3 f383 	clz	r3, r3
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	3301      	adds	r3, #1
 8001b6a:	f003 031f 	and.w	r3, r3, #31
 8001b6e:	2101      	movs	r1, #1
 8001b70:	fa01 f303 	lsl.w	r3, r1, r3
 8001b74:	ea42 0103 	orr.w	r1, r2, r3
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d10d      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x670>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	0e9b      	lsrs	r3, r3, #26
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	f003 021f 	and.w	r2, r3, #31
 8001b90:	4613      	mov	r3, r2
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4413      	add	r3, r2
 8001b96:	3b1e      	subs	r3, #30
 8001b98:	051b      	lsls	r3, r3, #20
 8001b9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b9e:	e01b      	b.n	8001bd8 <HAL_ADC_ConfigChannel+0x6a8>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	fa93 f3a3 	rbit	r3, r3
 8001bac:	613b      	str	r3, [r7, #16]
  return result;
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001bb8:	2320      	movs	r3, #32
 8001bba:	e003      	b.n	8001bc4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	fab3 f383 	clz	r3, r3
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	f003 021f 	and.w	r2, r3, #31
 8001bca:	4613      	mov	r3, r2
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	4413      	add	r3, r2
 8001bd0:	3b1e      	subs	r3, #30
 8001bd2:	051b      	lsls	r3, r3, #20
 8001bd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bd8:	430b      	orrs	r3, r1
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	6892      	ldr	r2, [r2, #8]
 8001bde:	4619      	mov	r1, r3
 8001be0:	f7ff fa08 	bl	8000ff4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <HAL_ADC_ConfigChannel+0x6e0>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 80be 	beq.w	8001d6e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bfa:	d004      	beq.n	8001c06 <HAL_ADC_ConfigChannel+0x6d6>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <HAL_ADC_ConfigChannel+0x6e4>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d10a      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x6ec>
 8001c06:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <HAL_ADC_ConfigChannel+0x6e8>)
 8001c08:	e009      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x6ee>
 8001c0a:	bf00      	nop
 8001c0c:	407f0000 	.word	0x407f0000
 8001c10:	80080000 	.word	0x80080000
 8001c14:	50000100 	.word	0x50000100
 8001c18:	50000300 	.word	0x50000300
 8001c1c:	4b59      	ldr	r3, [pc, #356]	; (8001d84 <HAL_ADC_ConfigChannel+0x854>)
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff f910 	bl	8000e44 <LL_ADC_GetCommonPathInternalCh>
 8001c24:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a56      	ldr	r2, [pc, #344]	; (8001d88 <HAL_ADC_ConfigChannel+0x858>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d004      	beq.n	8001c3c <HAL_ADC_ConfigChannel+0x70c>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a55      	ldr	r2, [pc, #340]	; (8001d8c <HAL_ADC_ConfigChannel+0x85c>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d13a      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d134      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c50:	d005      	beq.n	8001c5e <HAL_ADC_ConfigChannel+0x72e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a4e      	ldr	r2, [pc, #312]	; (8001d90 <HAL_ADC_ConfigChannel+0x860>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	f040 8085 	bne.w	8001d68 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c66:	d004      	beq.n	8001c72 <HAL_ADC_ConfigChannel+0x742>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a49      	ldr	r2, [pc, #292]	; (8001d94 <HAL_ADC_ConfigChannel+0x864>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d101      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x746>
 8001c72:	4a49      	ldr	r2, [pc, #292]	; (8001d98 <HAL_ADC_ConfigChannel+0x868>)
 8001c74:	e000      	b.n	8001c78 <HAL_ADC_ConfigChannel+0x748>
 8001c76:	4a43      	ldr	r2, [pc, #268]	; (8001d84 <HAL_ADC_ConfigChannel+0x854>)
 8001c78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c80:	4619      	mov	r1, r3
 8001c82:	4610      	mov	r0, r2
 8001c84:	f7ff f8cb 	bl	8000e1e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c88:	4b44      	ldr	r3, [pc, #272]	; (8001d9c <HAL_ADC_ConfigChannel+0x86c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	099b      	lsrs	r3, r3, #6
 8001c8e:	4a44      	ldr	r2, [pc, #272]	; (8001da0 <HAL_ADC_ConfigChannel+0x870>)
 8001c90:	fba2 2303 	umull	r2, r3, r2, r3
 8001c94:	099b      	lsrs	r3, r3, #6
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	4613      	mov	r3, r2
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	4413      	add	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ca2:	e002      	b.n	8001caa <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1f9      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001cb0:	e05a      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a3b      	ldr	r2, [pc, #236]	; (8001da4 <HAL_ADC_ConfigChannel+0x874>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d125      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x7d8>
 8001cbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d11f      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a31      	ldr	r2, [pc, #196]	; (8001d94 <HAL_ADC_ConfigChannel+0x864>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d104      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x7ac>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a34      	ldr	r2, [pc, #208]	; (8001da8 <HAL_ADC_ConfigChannel+0x878>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d047      	beq.n	8001d6c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ce4:	d004      	beq.n	8001cf0 <HAL_ADC_ConfigChannel+0x7c0>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a2a      	ldr	r2, [pc, #168]	; (8001d94 <HAL_ADC_ConfigChannel+0x864>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d101      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x7c4>
 8001cf0:	4a29      	ldr	r2, [pc, #164]	; (8001d98 <HAL_ADC_ConfigChannel+0x868>)
 8001cf2:	e000      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0x7c6>
 8001cf4:	4a23      	ldr	r2, [pc, #140]	; (8001d84 <HAL_ADC_ConfigChannel+0x854>)
 8001cf6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4610      	mov	r0, r2
 8001d02:	f7ff f88c 	bl	8000e1e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d06:	e031      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a27      	ldr	r2, [pc, #156]	; (8001dac <HAL_ADC_ConfigChannel+0x87c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d12d      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d127      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a1c      	ldr	r2, [pc, #112]	; (8001d94 <HAL_ADC_ConfigChannel+0x864>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d022      	beq.n	8001d6e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d30:	d004      	beq.n	8001d3c <HAL_ADC_ConfigChannel+0x80c>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a17      	ldr	r2, [pc, #92]	; (8001d94 <HAL_ADC_ConfigChannel+0x864>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d101      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x810>
 8001d3c:	4a16      	ldr	r2, [pc, #88]	; (8001d98 <HAL_ADC_ConfigChannel+0x868>)
 8001d3e:	e000      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x812>
 8001d40:	4a10      	ldr	r2, [pc, #64]	; (8001d84 <HAL_ADC_ConfigChannel+0x854>)
 8001d42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	f7ff f866 	bl	8000e1e <LL_ADC_SetCommonPathInternalCh>
 8001d52:	e00c      	b.n	8001d6e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d58:	f043 0220 	orr.w	r2, r3, #32
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001d66:	e002      	b.n	8001d6e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d68:	bf00      	nop
 8001d6a:	e000      	b.n	8001d6e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001d6c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001d76:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	37d8      	adds	r7, #216	; 0xd8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	50000700 	.word	0x50000700
 8001d88:	c3210000 	.word	0xc3210000
 8001d8c:	90c00010 	.word	0x90c00010
 8001d90:	50000600 	.word	0x50000600
 8001d94:	50000100 	.word	0x50000100
 8001d98:	50000300 	.word	0x50000300
 8001d9c:	200026d0 	.word	0x200026d0
 8001da0:	053e2d63 	.word	0x053e2d63
 8001da4:	c7520000 	.word	0xc7520000
 8001da8:	50000500 	.word	0x50000500
 8001dac:	cb840000 	.word	0xcb840000

08001db0 <LL_ADC_IsEnabled>:
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d101      	bne.n	8001dc8 <LL_ADC_IsEnabled+0x18>
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e000      	b.n	8001dca <LL_ADC_IsEnabled+0x1a>
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <LL_ADC_REG_IsConversionOngoing>:
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d101      	bne.n	8001dee <LL_ADC_REG_IsConversionOngoing+0x18>
 8001dea:	2301      	movs	r3, #1
 8001dec:	e000      	b.n	8001df0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b0a1      	sub	sp, #132	; 0x84
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e0e7      	b.n	8001fea <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001e22:	2300      	movs	r3, #0
 8001e24:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001e26:	2300      	movs	r3, #0
 8001e28:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e32:	d102      	bne.n	8001e3a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001e34:	4b6f      	ldr	r3, [pc, #444]	; (8001ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	e009      	b.n	8001e4e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a6e      	ldr	r2, [pc, #440]	; (8001ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d102      	bne.n	8001e4a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8001e44:	4b6d      	ldr	r3, [pc, #436]	; (8001ffc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	e001      	b.n	8001e4e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10b      	bne.n	8001e6c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e58:	f043 0220 	orr.w	r2, r3, #32
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0be      	b.n	8001fea <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff ffb1 	bl	8001dd6 <LL_ADC_REG_IsConversionOngoing>
 8001e74:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff ffab 	bl	8001dd6 <LL_ADC_REG_IsConversionOngoing>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f040 80a0 	bne.w	8001fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001e88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f040 809c 	bne.w	8001fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e98:	d004      	beq.n	8001ea4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a55      	ldr	r2, [pc, #340]	; (8001ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d101      	bne.n	8001ea8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001ea4:	4b56      	ldr	r3, [pc, #344]	; (8002000 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8001ea6:	e000      	b.n	8001eaa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001ea8:	4b56      	ldr	r3, [pc, #344]	; (8002004 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8001eaa:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d04b      	beq.n	8001f4c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001eb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	6859      	ldr	r1, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ec6:	035b      	lsls	r3, r3, #13
 8001ec8:	430b      	orrs	r3, r1
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ece:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ed8:	d004      	beq.n	8001ee4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a45      	ldr	r2, [pc, #276]	; (8001ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d10f      	bne.n	8001f04 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8001ee4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001ee8:	f7ff ff62 	bl	8001db0 <LL_ADC_IsEnabled>
 8001eec:	4604      	mov	r4, r0
 8001eee:	4841      	ldr	r0, [pc, #260]	; (8001ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001ef0:	f7ff ff5e 	bl	8001db0 <LL_ADC_IsEnabled>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	4323      	orrs	r3, r4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf0c      	ite	eq
 8001efc:	2301      	moveq	r3, #1
 8001efe:	2300      	movne	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	e012      	b.n	8001f2a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8001f04:	483c      	ldr	r0, [pc, #240]	; (8001ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8001f06:	f7ff ff53 	bl	8001db0 <LL_ADC_IsEnabled>
 8001f0a:	4604      	mov	r4, r0
 8001f0c:	483b      	ldr	r0, [pc, #236]	; (8001ffc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8001f0e:	f7ff ff4f 	bl	8001db0 <LL_ADC_IsEnabled>
 8001f12:	4603      	mov	r3, r0
 8001f14:	431c      	orrs	r4, r3
 8001f16:	483c      	ldr	r0, [pc, #240]	; (8002008 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8001f18:	f7ff ff4a 	bl	8001db0 <LL_ADC_IsEnabled>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	4323      	orrs	r3, r4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	bf0c      	ite	eq
 8001f24:	2301      	moveq	r3, #1
 8001f26:	2300      	movne	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d056      	beq.n	8001fdc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f36:	f023 030f 	bic.w	r3, r3, #15
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	6811      	ldr	r1, [r2, #0]
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	6892      	ldr	r2, [r2, #8]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	431a      	orrs	r2, r3
 8001f46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f48:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f4a:	e047      	b.n	8001fdc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f56:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f60:	d004      	beq.n	8001f6c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a23      	ldr	r2, [pc, #140]	; (8001ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d10f      	bne.n	8001f8c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8001f6c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001f70:	f7ff ff1e 	bl	8001db0 <LL_ADC_IsEnabled>
 8001f74:	4604      	mov	r4, r0
 8001f76:	481f      	ldr	r0, [pc, #124]	; (8001ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001f78:	f7ff ff1a 	bl	8001db0 <LL_ADC_IsEnabled>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	4323      	orrs	r3, r4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	bf0c      	ite	eq
 8001f84:	2301      	moveq	r3, #1
 8001f86:	2300      	movne	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	e012      	b.n	8001fb2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8001f8c:	481a      	ldr	r0, [pc, #104]	; (8001ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8001f8e:	f7ff ff0f 	bl	8001db0 <LL_ADC_IsEnabled>
 8001f92:	4604      	mov	r4, r0
 8001f94:	4819      	ldr	r0, [pc, #100]	; (8001ffc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8001f96:	f7ff ff0b 	bl	8001db0 <LL_ADC_IsEnabled>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	431c      	orrs	r4, r3
 8001f9e:	481a      	ldr	r0, [pc, #104]	; (8002008 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8001fa0:	f7ff ff06 	bl	8001db0 <LL_ADC_IsEnabled>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	4323      	orrs	r3, r4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	bf0c      	ite	eq
 8001fac:	2301      	moveq	r3, #1
 8001fae:	2300      	movne	r3, #0
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d012      	beq.n	8001fdc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001fb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001fbe:	f023 030f 	bic.w	r3, r3, #15
 8001fc2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001fc4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fc6:	e009      	b.n	8001fdc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fcc:	f043 0220 	orr.w	r2, r3, #32
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001fda:	e000      	b.n	8001fde <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fdc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001fe6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3784      	adds	r7, #132	; 0x84
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd90      	pop	{r4, r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	50000100 	.word	0x50000100
 8001ff8:	50000400 	.word	0x50000400
 8001ffc:	50000500 	.word	0x50000500
 8002000:	50000300 	.word	0x50000300
 8002004:	50000700 	.word	0x50000700
 8002008:	50000600 	.word	0x50000600

0800200c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800201c:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <__NVIC_SetPriorityGrouping+0x44>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002028:	4013      	ands	r3, r2
 800202a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800203c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800203e:	4a04      	ldr	r2, [pc, #16]	; (8002050 <__NVIC_SetPriorityGrouping+0x44>)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	60d3      	str	r3, [r2, #12]
}
 8002044:	bf00      	nop
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002058:	4b04      	ldr	r3, [pc, #16]	; (800206c <__NVIC_GetPriorityGrouping+0x18>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	0a1b      	lsrs	r3, r3, #8
 800205e:	f003 0307 	and.w	r3, r3, #7
}
 8002062:	4618      	mov	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	2b00      	cmp	r3, #0
 8002080:	db0b      	blt.n	800209a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	f003 021f 	and.w	r2, r3, #31
 8002088:	4907      	ldr	r1, [pc, #28]	; (80020a8 <__NVIC_EnableIRQ+0x38>)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	095b      	lsrs	r3, r3, #5
 8002090:	2001      	movs	r0, #1
 8002092:	fa00 f202 	lsl.w	r2, r0, r2
 8002096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000e100 	.word	0xe000e100

080020ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	6039      	str	r1, [r7, #0]
 80020b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	db0a      	blt.n	80020d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	490c      	ldr	r1, [pc, #48]	; (80020f8 <__NVIC_SetPriority+0x4c>)
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	0112      	lsls	r2, r2, #4
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	440b      	add	r3, r1
 80020d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d4:	e00a      	b.n	80020ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	4908      	ldr	r1, [pc, #32]	; (80020fc <__NVIC_SetPriority+0x50>)
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	3b04      	subs	r3, #4
 80020e4:	0112      	lsls	r2, r2, #4
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	440b      	add	r3, r1
 80020ea:	761a      	strb	r2, [r3, #24]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000e100 	.word	0xe000e100
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002100:	b480      	push	{r7}
 8002102:	b089      	sub	sp, #36	; 0x24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f1c3 0307 	rsb	r3, r3, #7
 800211a:	2b04      	cmp	r3, #4
 800211c:	bf28      	it	cs
 800211e:	2304      	movcs	r3, #4
 8002120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3304      	adds	r3, #4
 8002126:	2b06      	cmp	r3, #6
 8002128:	d902      	bls.n	8002130 <NVIC_EncodePriority+0x30>
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	3b03      	subs	r3, #3
 800212e:	e000      	b.n	8002132 <NVIC_EncodePriority+0x32>
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43da      	mvns	r2, r3
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	401a      	ands	r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002148:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	fa01 f303 	lsl.w	r3, r1, r3
 8002152:	43d9      	mvns	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002158:	4313      	orrs	r3, r2
         );
}
 800215a:	4618      	mov	r0, r3
 800215c:	3724      	adds	r7, #36	; 0x24
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
	...

08002168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3b01      	subs	r3, #1
 8002174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002178:	d301      	bcc.n	800217e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800217a:	2301      	movs	r3, #1
 800217c:	e00f      	b.n	800219e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800217e:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <SysTick_Config+0x40>)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3b01      	subs	r3, #1
 8002184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002186:	210f      	movs	r1, #15
 8002188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800218c:	f7ff ff8e 	bl	80020ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002190:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <SysTick_Config+0x40>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002196:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <SysTick_Config+0x40>)
 8002198:	2207      	movs	r2, #7
 800219a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	e000e010 	.word	0xe000e010

080021ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ff29 	bl	800200c <__NVIC_SetPriorityGrouping>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b086      	sub	sp, #24
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	4603      	mov	r3, r0
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021d0:	f7ff ff40 	bl	8002054 <__NVIC_GetPriorityGrouping>
 80021d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68b9      	ldr	r1, [r7, #8]
 80021da:	6978      	ldr	r0, [r7, #20]
 80021dc:	f7ff ff90 	bl	8002100 <NVIC_EncodePriority>
 80021e0:	4602      	mov	r2, r0
 80021e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff5f 	bl	80020ac <__NVIC_SetPriority>
}
 80021ee:	bf00      	nop
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	4603      	mov	r3, r0
 80021fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff33 	bl	8002070 <__NVIC_EnableIRQ>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff ffa4 	bl	8002168 <SysTick_Config>
 8002220:	4603      	mov	r3, r0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b082      	sub	sp, #8
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e014      	b.n	8002266 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	791b      	ldrb	r3, [r3, #4]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d105      	bne.n	8002252 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7fe fbd9 	bl	8000a04 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2202      	movs	r2, #2
 8002256:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
	...

08002270 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
 800227c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800227e:	2300      	movs	r3, #0
 8002280:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	795b      	ldrb	r3, [r3, #5]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d101      	bne.n	800228e <HAL_DAC_Start_DMA+0x1e>
 800228a:	2302      	movs	r3, #2
 800228c:	e0ae      	b.n	80023ec <HAL_DAC_Start_DMA+0x17c>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2201      	movs	r2, #1
 8002292:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2202      	movs	r2, #2
 8002298:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d12f      	bne.n	8002300 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	4a53      	ldr	r2, [pc, #332]	; (80023f4 <HAL_DAC_Start_DMA+0x184>)
 80022a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	4a52      	ldr	r2, [pc, #328]	; (80023f8 <HAL_DAC_Start_DMA+0x188>)
 80022ae:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	4a51      	ldr	r2, [pc, #324]	; (80023fc <HAL_DAC_Start_DMA+0x18c>)
 80022b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80022c6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80022c8:	6a3b      	ldr	r3, [r7, #32]
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	d013      	beq.n	80022f6 <HAL_DAC_Start_DMA+0x86>
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d845      	bhi.n	8002360 <HAL_DAC_Start_DMA+0xf0>
 80022d4:	6a3b      	ldr	r3, [r7, #32]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_DAC_Start_DMA+0x72>
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d005      	beq.n	80022ec <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80022e0:	e03e      	b.n	8002360 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	3308      	adds	r3, #8
 80022e8:	613b      	str	r3, [r7, #16]
        break;
 80022ea:	e03c      	b.n	8002366 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	330c      	adds	r3, #12
 80022f2:	613b      	str	r3, [r7, #16]
        break;
 80022f4:	e037      	b.n	8002366 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	3310      	adds	r3, #16
 80022fc:	613b      	str	r3, [r7, #16]
        break;
 80022fe:	e032      	b.n	8002366 <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	4a3e      	ldr	r2, [pc, #248]	; (8002400 <HAL_DAC_Start_DMA+0x190>)
 8002306:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4a3d      	ldr	r2, [pc, #244]	; (8002404 <HAL_DAC_Start_DMA+0x194>)
 800230e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4a3c      	ldr	r2, [pc, #240]	; (8002408 <HAL_DAC_Start_DMA+0x198>)
 8002316:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002326:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	2b08      	cmp	r3, #8
 800232c:	d013      	beq.n	8002356 <HAL_DAC_Start_DMA+0xe6>
 800232e:	6a3b      	ldr	r3, [r7, #32]
 8002330:	2b08      	cmp	r3, #8
 8002332:	d817      	bhi.n	8002364 <HAL_DAC_Start_DMA+0xf4>
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_DAC_Start_DMA+0xd2>
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	2b04      	cmp	r3, #4
 800233e:	d005      	beq.n	800234c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002340:	e010      	b.n	8002364 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	3314      	adds	r3, #20
 8002348:	613b      	str	r3, [r7, #16]
        break;
 800234a:	e00c      	b.n	8002366 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	3318      	adds	r3, #24
 8002352:	613b      	str	r3, [r7, #16]
        break;
 8002354:	e007      	b.n	8002366 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	331c      	adds	r3, #28
 800235c:	613b      	str	r3, [r7, #16]
        break;
 800235e:	e002      	b.n	8002366 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002360:	bf00      	nop
 8002362:	e000      	b.n	8002366 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002364:	bf00      	nop
    }
  }


  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d111      	bne.n	8002390 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800237a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6898      	ldr	r0, [r3, #8]
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	f000 fb39 	bl	80029fc <HAL_DMA_Start_IT>
 800238a:	4603      	mov	r3, r0
 800238c:	75fb      	strb	r3, [r7, #23]
 800238e:	e010      	b.n	80023b2 <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800239e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	68d8      	ldr	r0, [r3, #12]
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	f000 fb27 	bl	80029fc <HAL_DMA_Start_IT>
 80023ae:	4603      	mov	r3, r0
 80023b0:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80023b8:	7dfb      	ldrb	r3, [r7, #23]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10f      	bne.n	80023de <HAL_DAC_Start_DMA+0x16e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6819      	ldr	r1, [r3, #0]
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	f003 0310 	and.w	r3, r3, #16
 80023ca:	2201      	movs	r2, #1
 80023cc:	409a      	lsls	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 80023d6:	2001      	movs	r0, #1
 80023d8:	f7fe fcec 	bl	8000db4 <HAL_Delay>
 80023dc:	e005      	b.n	80023ea <HAL_DAC_Start_DMA+0x17a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	f043 0204 	orr.w	r2, r3, #4
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80023ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	08002799 	.word	0x08002799
 80023f8:	080027bb 	.word	0x080027bb
 80023fc:	080027d7 	.word	0x080027d7
 8002400:	08002841 	.word	0x08002841
 8002404:	08002863 	.word	0x08002863
 8002408:	0800287f 	.word	0x0800287f

0800240c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08a      	sub	sp, #40	; 0x28
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	795b      	ldrb	r3, [r3, #5]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <HAL_DAC_ConfigChannel+0x18>
 800245c:	2302      	movs	r3, #2
 800245e:	e192      	b.n	8002786 <HAL_DAC_ConfigChannel+0x33e>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2201      	movs	r2, #1
 8002464:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2202      	movs	r2, #2
 800246a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	2b04      	cmp	r3, #4
 8002472:	d174      	bne.n	800255e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002474:	f7fe fc92 	bl	8000d9c <HAL_GetTick>
 8002478:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d134      	bne.n	80024ea <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002480:	e011      	b.n	80024a6 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002482:	f7fe fc8b 	bl	8000d9c <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b01      	cmp	r3, #1
 800248e:	d90a      	bls.n	80024a6 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	f043 0208 	orr.w	r2, r3, #8
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2203      	movs	r2, #3
 80024a0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e16f      	b.n	8002786 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1e6      	bne.n	8002482 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80024b4:	2001      	movs	r0, #1
 80024b6:	f7fe fc7d 	bl	8000db4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024c2:	641a      	str	r2, [r3, #64]	; 0x40
 80024c4:	e01e      	b.n	8002504 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80024c6:	f7fe fc69 	bl	8000d9c <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d90a      	bls.n	80024ea <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	f043 0208 	orr.w	r2, r3, #8
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2203      	movs	r2, #3
 80024e4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e14d      	b.n	8002786 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	dbe8      	blt.n	80024c6 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80024f4:	2001      	movs	r0, #1
 80024f6:	f7fe fc5d 	bl	8000db4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002502:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f003 0310 	and.w	r3, r3, #16
 8002510:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002514:	fa01 f303 	lsl.w	r3, r1, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	ea02 0103 	and.w	r1, r2, r3
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f003 0310 	and.w	r3, r3, #16
 8002528:	409a      	lsls	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f003 0310 	and.w	r3, r3, #16
 800253e:	21ff      	movs	r1, #255	; 0xff
 8002540:	fa01 f303 	lsl.w	r3, r1, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	ea02 0103 	and.w	r1, r2, r3
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	409a      	lsls	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d11d      	bne.n	80025a2 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f003 0310 	and.w	r3, r3, #16
 8002574:	221f      	movs	r2, #31
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43db      	mvns	r3, r3
 800257c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800257e:	4013      	ands	r3, r2
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f003 0310 	and.w	r3, r3, #16
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002596:	4313      	orrs	r3, r2
 8002598:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f003 0310 	and.w	r3, r3, #16
 80025b0:	2207      	movs	r2, #7
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ba:	4013      	ands	r3, r2
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d102      	bne.n	80025cc <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	623b      	str	r3, [r7, #32]
 80025ca:	e00f      	b.n	80025ec <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d102      	bne.n	80025da <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80025d4:	2301      	movs	r3, #1
 80025d6:	623b      	str	r3, [r7, #32]
 80025d8:	e008      	b.n	80025ec <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d102      	bne.n	80025e8 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80025e2:	2301      	movs	r3, #1
 80025e4:	623b      	str	r3, [r7, #32]
 80025e6:	e001      	b.n	80025ec <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	6a3a      	ldr	r2, [r7, #32]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f003 0310 	and.w	r3, r3, #16
 8002602:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43db      	mvns	r3, r3
 800260c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800260e:	4013      	ands	r3, r2
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	791b      	ldrb	r3, [r3, #4]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d102      	bne.n	8002620 <HAL_DAC_ConfigChannel+0x1d8>
 800261a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800261e:	e000      	b.n	8002622 <HAL_DAC_ConfigChannel+0x1da>
 8002620:	2300      	movs	r3, #0
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f003 0310 	and.w	r3, r3, #16
 800262e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800263a:	4013      	ands	r3, r2
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	795b      	ldrb	r3, [r3, #5]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d102      	bne.n	800264c <HAL_DAC_ConfigChannel+0x204>
 8002646:	f44f 7300 	mov.w	r3, #512	; 0x200
 800264a:	e000      	b.n	800264e <HAL_DAC_ConfigChannel+0x206>
 800264c:	2300      	movs	r3, #0
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800265a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b02      	cmp	r3, #2
 8002662:	d114      	bne.n	800268e <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002664:	f003 f844 	bl	80056f0 <HAL_RCC_GetHCLKFreq>
 8002668:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	4a48      	ldr	r2, [pc, #288]	; (8002790 <HAL_DAC_ConfigChannel+0x348>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d904      	bls.n	800267c <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
 800267a:	e00f      	b.n	800269c <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	4a45      	ldr	r2, [pc, #276]	; (8002794 <HAL_DAC_ConfigChannel+0x34c>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d90a      	bls.n	800269a <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
 800268c:	e006      	b.n	800269c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002694:	4313      	orrs	r3, r2
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
 8002698:	e000      	b.n	800269c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800269a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f003 0310 	and.w	r3, r3, #16
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026aa:	4313      	orrs	r3, r2
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6819      	ldr	r1, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f003 0310 	and.w	r3, r3, #16
 80026c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43da      	mvns	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	400a      	ands	r2, r1
 80026d2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f003 0310 	and.w	r3, r3, #16
 80026e2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ee:	4013      	ands	r3, r2
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f003 0310 	and.w	r3, r3, #16
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002706:	4313      	orrs	r3, r2
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002710:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6819      	ldr	r1, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f003 0310 	and.w	r3, r3, #16
 800271e:	22c0      	movs	r2, #192	; 0xc0
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43da      	mvns	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	400a      	ands	r2, r1
 800272c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	089b      	lsrs	r3, r3, #2
 8002734:	f003 030f 	and.w	r3, r3, #15
 8002738:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	089b      	lsrs	r3, r3, #2
 8002740:	021b      	lsls	r3, r3, #8
 8002742:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f003 0310 	and.w	r3, r3, #16
 8002758:	f640 710f 	movw	r1, #3855	; 0xf0f
 800275c:	fa01 f303 	lsl.w	r3, r1, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	ea02 0103 	and.w	r1, r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f003 0310 	and.w	r3, r3, #16
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	409a      	lsls	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2201      	movs	r2, #1
 800277c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3728      	adds	r7, #40	; 0x28
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	09896800 	.word	0x09896800
 8002794:	04c4b400 	.word	0x04c4b400

08002798 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f7ff fe30 	bl	800240c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2201      	movs	r2, #1
 80027b0:	711a      	strb	r2, [r3, #4]
}
 80027b2:	bf00      	nop
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b084      	sub	sp, #16
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f7ff fe29 	bl	8002420 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80027ce:	bf00      	nop
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b084      	sub	sp, #16
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	f043 0204 	orr.w	r2, r3, #4
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f7ff fe1f 	bl	8002434 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2201      	movs	r2, #1
 80027fa:	711a      	strb	r2, [r3, #4]
}
 80027fc:	bf00      	nop
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f7ff ffd8 	bl	8002804 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2201      	movs	r2, #1
 8002858:	711a      	strb	r2, [r3, #4]
}
 800285a:	bf00      	nop
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b084      	sub	sp, #16
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f7ff ffd1 	bl	8002818 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002876:	bf00      	nop
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b084      	sub	sp, #16
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	f043 0204 	orr.w	r2, r3, #4
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f7ff ffc7 	bl	800282c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2201      	movs	r2, #1
 80028a2:	711a      	strb	r2, [r3, #4]
}
 80028a4:	bf00      	nop
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e08d      	b.n	80029da <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	461a      	mov	r2, r3
 80028c4:	4b47      	ldr	r3, [pc, #284]	; (80029e4 <HAL_DMA_Init+0x138>)
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d80f      	bhi.n	80028ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	4b45      	ldr	r3, [pc, #276]	; (80029e8 <HAL_DMA_Init+0x13c>)
 80028d2:	4413      	add	r3, r2
 80028d4:	4a45      	ldr	r2, [pc, #276]	; (80029ec <HAL_DMA_Init+0x140>)
 80028d6:	fba2 2303 	umull	r2, r3, r2, r3
 80028da:	091b      	lsrs	r3, r3, #4
 80028dc:	009a      	lsls	r2, r3, #2
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a42      	ldr	r2, [pc, #264]	; (80029f0 <HAL_DMA_Init+0x144>)
 80028e6:	641a      	str	r2, [r3, #64]	; 0x40
 80028e8:	e00e      	b.n	8002908 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	4b40      	ldr	r3, [pc, #256]	; (80029f4 <HAL_DMA_Init+0x148>)
 80028f2:	4413      	add	r3, r2
 80028f4:	4a3d      	ldr	r2, [pc, #244]	; (80029ec <HAL_DMA_Init+0x140>)
 80028f6:	fba2 2303 	umull	r2, r3, r2, r3
 80028fa:	091b      	lsrs	r3, r3, #4
 80028fc:	009a      	lsls	r2, r3, #2
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a3c      	ldr	r2, [pc, #240]	; (80029f8 <HAL_DMA_Init+0x14c>)
 8002906:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2202      	movs	r2, #2
 800290c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800291e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002922:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800292c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002938:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002944:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	4313      	orrs	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 fa1e 	bl	8002d9c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002968:	d102      	bne.n	8002970 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002984:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d010      	beq.n	80029b0 <HAL_DMA_Init+0x104>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b04      	cmp	r3, #4
 8002994:	d80c      	bhi.n	80029b0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 fa3e 	bl	8002e18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	e008      	b.n	80029c2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40020407 	.word	0x40020407
 80029e8:	bffdfff8 	.word	0xbffdfff8
 80029ec:	cccccccd 	.word	0xcccccccd
 80029f0:	40020000 	.word	0x40020000
 80029f4:	bffdfbf8 	.word	0xbffdfbf8
 80029f8:	40020400 	.word	0x40020400

080029fc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_DMA_Start_IT+0x20>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e066      	b.n	8002aea <HAL_DMA_Start_IT+0xee>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d155      	bne.n	8002adc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0201 	bic.w	r2, r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	68b9      	ldr	r1, [r7, #8]
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 f962 	bl	8002d1e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d008      	beq.n	8002a74 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f042 020e 	orr.w	r2, r2, #14
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	e00f      	b.n	8002a94 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0204 	bic.w	r2, r2, #4
 8002a82:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 020a 	orr.w	r2, r2, #10
 8002a92:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d007      	beq.n	8002ab2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ab0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d007      	beq.n	8002aca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ac8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f042 0201 	orr.w	r2, r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	e005      	b.n	8002ae8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002ae8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b084      	sub	sp, #16
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002afa:	2300      	movs	r3, #0
 8002afc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d00d      	beq.n	8002b26 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2204      	movs	r2, #4
 8002b0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	73fb      	strb	r3, [r7, #15]
 8002b24:	e047      	b.n	8002bb6 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 020e 	bic.w	r2, r2, #14
 8002b34:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0201 	bic.w	r2, r2, #1
 8002b44:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	f003 021f 	and.w	r2, r3, #31
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	2101      	movs	r1, #1
 8002b64:	fa01 f202 	lsl.w	r2, r1, r2
 8002b68:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b72:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00c      	beq.n	8002b96 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b8a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002b94:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	4798      	blx	r3
    }
  }
  return status;
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bdc:	f003 031f 	and.w	r3, r3, #31
 8002be0:	2204      	movs	r2, #4
 8002be2:	409a      	lsls	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4013      	ands	r3, r2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d026      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x7a>
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d021      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0320 	and.w	r3, r3, #32
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d107      	bne.n	8002c14 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0204 	bic.w	r2, r2, #4
 8002c12:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c18:	f003 021f 	and.w	r2, r3, #31
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	2104      	movs	r1, #4
 8002c22:	fa01 f202 	lsl.w	r2, r1, r2
 8002c26:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d071      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002c38:	e06c      	b.n	8002d14 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3e:	f003 031f 	and.w	r3, r3, #31
 8002c42:	2202      	movs	r2, #2
 8002c44:	409a      	lsls	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d02e      	beq.n	8002cac <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d029      	beq.n	8002cac <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0320 	and.w	r3, r3, #32
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10b      	bne.n	8002c7e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 020a 	bic.w	r2, r2, #10
 8002c74:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	f003 021f 	and.w	r2, r3, #31
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	2102      	movs	r1, #2
 8002c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c90:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d038      	beq.n	8002d14 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002caa:	e033      	b.n	8002d14 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb0:	f003 031f 	and.w	r3, r3, #31
 8002cb4:	2208      	movs	r2, #8
 8002cb6:	409a      	lsls	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d02a      	beq.n	8002d16 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d025      	beq.n	8002d16 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 020e 	bic.w	r2, r2, #14
 8002cd8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cde:	f003 021f 	and.w	r2, r3, #31
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8002cec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d004      	beq.n	8002d16 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d14:	bf00      	nop
 8002d16:	bf00      	nop
}
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b085      	sub	sp, #20
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	607a      	str	r2, [r7, #4]
 8002d2a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d34:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d004      	beq.n	8002d48 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002d46:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4c:	f003 021f 	and.w	r2, r3, #31
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	2101      	movs	r1, #1
 8002d56:	fa01 f202 	lsl.w	r2, r1, r2
 8002d5a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2b10      	cmp	r3, #16
 8002d6a:	d108      	bne.n	8002d7e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d7c:	e007      	b.n	8002d8e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	60da      	str	r2, [r3, #12]
}
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
	...

08002d9c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b087      	sub	sp, #28
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	461a      	mov	r2, r3
 8002daa:	4b16      	ldr	r3, [pc, #88]	; (8002e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d802      	bhi.n	8002db6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002db0:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	e001      	b.n	8002dba <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002db6:	4b15      	ldr	r3, [pc, #84]	; (8002e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002db8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	3b08      	subs	r3, #8
 8002dc6:	4a12      	ldr	r2, [pc, #72]	; (8002e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd4:	089b      	lsrs	r3, r3, #2
 8002dd6:	009a      	lsls	r2, r3, #2
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	4413      	add	r3, r2
 8002ddc:	461a      	mov	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a0b      	ldr	r2, [pc, #44]	; (8002e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002de6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f003 031f 	and.w	r3, r3, #31
 8002dee:	2201      	movs	r2, #1
 8002df0:	409a      	lsls	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002df6:	bf00      	nop
 8002df8:	371c      	adds	r7, #28
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	40020407 	.word	0x40020407
 8002e08:	40020800 	.word	0x40020800
 8002e0c:	40020820 	.word	0x40020820
 8002e10:	cccccccd 	.word	0xcccccccd
 8002e14:	40020880 	.word	0x40020880

08002e18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	461a      	mov	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a08      	ldr	r2, [pc, #32]	; (8002e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002e3a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	f003 031f 	and.w	r3, r3, #31
 8002e44:	2201      	movs	r2, #1
 8002e46:	409a      	lsls	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002e4c:	bf00      	nop
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	1000823f 	.word	0x1000823f
 8002e5c:	40020940 	.word	0x40020940

08002e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e6e:	e15a      	b.n	8003126 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	2101      	movs	r1, #1
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 814c 	beq.w	8003120 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 0303 	and.w	r3, r3, #3
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d005      	beq.n	8002ea0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d130      	bne.n	8002f02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	2203      	movs	r2, #3
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	68da      	ldr	r2, [r3, #12]
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	091b      	lsrs	r3, r3, #4
 8002eec:	f003 0201 	and.w	r2, r3, #1
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	2b03      	cmp	r3, #3
 8002f0c:	d017      	beq.n	8002f3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	2203      	movs	r2, #3
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	4013      	ands	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d123      	bne.n	8002f92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	08da      	lsrs	r2, r3, #3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3208      	adds	r2, #8
 8002f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	220f      	movs	r2, #15
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	691a      	ldr	r2, [r3, #16]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	08da      	lsrs	r2, r3, #3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3208      	adds	r2, #8
 8002f8c:	6939      	ldr	r1, [r7, #16]
 8002f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 0203 	and.w	r2, r3, #3
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 80a6 	beq.w	8003120 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fd4:	4b5b      	ldr	r3, [pc, #364]	; (8003144 <HAL_GPIO_Init+0x2e4>)
 8002fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fd8:	4a5a      	ldr	r2, [pc, #360]	; (8003144 <HAL_GPIO_Init+0x2e4>)
 8002fda:	f043 0301 	orr.w	r3, r3, #1
 8002fde:	6613      	str	r3, [r2, #96]	; 0x60
 8002fe0:	4b58      	ldr	r3, [pc, #352]	; (8003144 <HAL_GPIO_Init+0x2e4>)
 8002fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fec:	4a56      	ldr	r2, [pc, #344]	; (8003148 <HAL_GPIO_Init+0x2e8>)
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	089b      	lsrs	r3, r3, #2
 8002ff2:	3302      	adds	r3, #2
 8002ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f003 0303 	and.w	r3, r3, #3
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	220f      	movs	r2, #15
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	4013      	ands	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003016:	d01f      	beq.n	8003058 <HAL_GPIO_Init+0x1f8>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a4c      	ldr	r2, [pc, #304]	; (800314c <HAL_GPIO_Init+0x2ec>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d019      	beq.n	8003054 <HAL_GPIO_Init+0x1f4>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a4b      	ldr	r2, [pc, #300]	; (8003150 <HAL_GPIO_Init+0x2f0>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d013      	beq.n	8003050 <HAL_GPIO_Init+0x1f0>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a4a      	ldr	r2, [pc, #296]	; (8003154 <HAL_GPIO_Init+0x2f4>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d00d      	beq.n	800304c <HAL_GPIO_Init+0x1ec>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a49      	ldr	r2, [pc, #292]	; (8003158 <HAL_GPIO_Init+0x2f8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d007      	beq.n	8003048 <HAL_GPIO_Init+0x1e8>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a48      	ldr	r2, [pc, #288]	; (800315c <HAL_GPIO_Init+0x2fc>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d101      	bne.n	8003044 <HAL_GPIO_Init+0x1e4>
 8003040:	2305      	movs	r3, #5
 8003042:	e00a      	b.n	800305a <HAL_GPIO_Init+0x1fa>
 8003044:	2306      	movs	r3, #6
 8003046:	e008      	b.n	800305a <HAL_GPIO_Init+0x1fa>
 8003048:	2304      	movs	r3, #4
 800304a:	e006      	b.n	800305a <HAL_GPIO_Init+0x1fa>
 800304c:	2303      	movs	r3, #3
 800304e:	e004      	b.n	800305a <HAL_GPIO_Init+0x1fa>
 8003050:	2302      	movs	r3, #2
 8003052:	e002      	b.n	800305a <HAL_GPIO_Init+0x1fa>
 8003054:	2301      	movs	r3, #1
 8003056:	e000      	b.n	800305a <HAL_GPIO_Init+0x1fa>
 8003058:	2300      	movs	r3, #0
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	f002 0203 	and.w	r2, r2, #3
 8003060:	0092      	lsls	r2, r2, #2
 8003062:	4093      	lsls	r3, r2
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	4313      	orrs	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800306a:	4937      	ldr	r1, [pc, #220]	; (8003148 <HAL_GPIO_Init+0x2e8>)
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	089b      	lsrs	r3, r3, #2
 8003070:	3302      	adds	r3, #2
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003078:	4b39      	ldr	r3, [pc, #228]	; (8003160 <HAL_GPIO_Init+0x300>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	43db      	mvns	r3, r3
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	4013      	ands	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	4313      	orrs	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800309c:	4a30      	ldr	r2, [pc, #192]	; (8003160 <HAL_GPIO_Init+0x300>)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030a2:	4b2f      	ldr	r3, [pc, #188]	; (8003160 <HAL_GPIO_Init+0x300>)
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	43db      	mvns	r3, r3
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	4013      	ands	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030c6:	4a26      	ldr	r2, [pc, #152]	; (8003160 <HAL_GPIO_Init+0x300>)
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80030cc:	4b24      	ldr	r3, [pc, #144]	; (8003160 <HAL_GPIO_Init+0x300>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	43db      	mvns	r3, r3
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4013      	ands	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030f0:	4a1b      	ldr	r2, [pc, #108]	; (8003160 <HAL_GPIO_Init+0x300>)
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80030f6:	4b1a      	ldr	r3, [pc, #104]	; (8003160 <HAL_GPIO_Init+0x300>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	43db      	mvns	r3, r3
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	4013      	ands	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	4313      	orrs	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800311a:	4a11      	ldr	r2, [pc, #68]	; (8003160 <HAL_GPIO_Init+0x300>)
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	3301      	adds	r3, #1
 8003124:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	fa22 f303 	lsr.w	r3, r2, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	f47f ae9d 	bne.w	8002e70 <HAL_GPIO_Init+0x10>
  }
}
 8003136:	bf00      	nop
 8003138:	bf00      	nop
 800313a:	371c      	adds	r7, #28
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	40021000 	.word	0x40021000
 8003148:	40010000 	.word	0x40010000
 800314c:	48000400 	.word	0x48000400
 8003150:	48000800 	.word	0x48000800
 8003154:	48000c00 	.word	0x48000c00
 8003158:	48001000 	.word	0x48001000
 800315c:	48001400 	.word	0x48001400
 8003160:	40010400 	.word	0x40010400

08003164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	807b      	strh	r3, [r7, #2]
 8003170:	4613      	mov	r3, r2
 8003172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003174:	787b      	ldrb	r3, [r7, #1]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800317a:	887a      	ldrh	r2, [r7, #2]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003180:	e002      	b.n	8003188 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003182:	887a      	ldrh	r2, [r7, #2]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800319e:	4b08      	ldr	r3, [pc, #32]	; (80031c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031a0:	695a      	ldr	r2, [r3, #20]
 80031a2:	88fb      	ldrh	r3, [r7, #6]
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d006      	beq.n	80031b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031aa:	4a05      	ldr	r2, [pc, #20]	; (80031c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031ac:	88fb      	ldrh	r3, [r7, #6]
 80031ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031b0:	88fb      	ldrh	r3, [r7, #6]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 f806 	bl	80031c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80031b8:	bf00      	nop
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40010400 	.word	0x40010400

080031c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4603      	mov	r3, r0
 80031cc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031dc:	b08b      	sub	sp, #44	; 0x2c
 80031de:	af06      	add	r7, sp, #24
 80031e0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e0d7      	b.n	800339c <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d106      	bne.n	8003206 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f008 f90b 	bl	800b41c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2203      	movs	r2, #3
 800320a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f004 f851 	bl	80072ba <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003218:	2300      	movs	r3, #0
 800321a:	73fb      	strb	r3, [r7, #15]
 800321c:	e04c      	b.n	80032b8 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800321e:	7bfb      	ldrb	r3, [r7, #15]
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	1c5a      	adds	r2, r3, #1
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	440b      	add	r3, r1
 800322e:	3301      	adds	r3, #1
 8003230:	2201      	movs	r2, #1
 8003232:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003234:	7bfb      	ldrb	r3, [r7, #15]
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	1c5a      	adds	r2, r3, #1
 800323a:	4613      	mov	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	440b      	add	r3, r1
 8003244:	7bfa      	ldrb	r2, [r7, #15]
 8003246:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003248:	7bfa      	ldrb	r2, [r7, #15]
 800324a:	7bfb      	ldrb	r3, [r7, #15]
 800324c:	b298      	uxth	r0, r3
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	440b      	add	r3, r1
 800325a:	3336      	adds	r3, #54	; 0x36
 800325c:	4602      	mov	r2, r0
 800325e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	440b      	add	r3, r1
 8003270:	3303      	adds	r3, #3
 8003272:	2200      	movs	r2, #0
 8003274:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003276:	7bfa      	ldrb	r2, [r7, #15]
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	440b      	add	r3, r1
 8003284:	3338      	adds	r3, #56	; 0x38
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800328a:	7bfa      	ldrb	r2, [r7, #15]
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	4613      	mov	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	440b      	add	r3, r1
 8003298:	333c      	adds	r3, #60	; 0x3c
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800329e:	7bfa      	ldrb	r2, [r7, #15]
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	4613      	mov	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	440b      	add	r3, r1
 80032ac:	3340      	adds	r3, #64	; 0x40
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
 80032b4:	3301      	adds	r3, #1
 80032b6:	73fb      	strb	r3, [r7, #15]
 80032b8:	7bfa      	ldrb	r2, [r7, #15]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d3ad      	bcc.n	800321e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032c2:	2300      	movs	r3, #0
 80032c4:	73fb      	strb	r3, [r7, #15]
 80032c6:	e044      	b.n	8003352 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032c8:	7bfa      	ldrb	r2, [r7, #15]
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	4613      	mov	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	440b      	add	r3, r1
 80032d6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80032da:	2200      	movs	r2, #0
 80032dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032de:	7bfa      	ldrb	r2, [r7, #15]
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	440b      	add	r3, r1
 80032ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032f0:	7bfa      	ldrb	r2, [r7, #15]
 80032f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032f4:	7bfa      	ldrb	r2, [r7, #15]
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	440b      	add	r3, r1
 8003302:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003306:	2200      	movs	r2, #0
 8003308:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800330a:	7bfa      	ldrb	r2, [r7, #15]
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	440b      	add	r3, r1
 8003318:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003320:	7bfa      	ldrb	r2, [r7, #15]
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	4613      	mov	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	440b      	add	r3, r1
 800332e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003336:	7bfa      	ldrb	r2, [r7, #15]
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	4613      	mov	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	440b      	add	r3, r1
 8003344:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800334c:	7bfb      	ldrb	r3, [r7, #15]
 800334e:	3301      	adds	r3, #1
 8003350:	73fb      	strb	r3, [r7, #15]
 8003352:	7bfa      	ldrb	r2, [r7, #15]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	429a      	cmp	r2, r3
 800335a:	d3b5      	bcc.n	80032c8 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	603b      	str	r3, [r7, #0]
 8003362:	687e      	ldr	r6, [r7, #4]
 8003364:	466d      	mov	r5, sp
 8003366:	f106 0410 	add.w	r4, r6, #16
 800336a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800336c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800336e:	6823      	ldr	r3, [r4, #0]
 8003370:	602b      	str	r3, [r5, #0]
 8003372:	1d33      	adds	r3, r6, #4
 8003374:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003376:	6838      	ldr	r0, [r7, #0]
 8003378:	f003 ffba 	bl	80072f0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d102      	bne.n	800339a <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f001 fc29 	bl	8004bec <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033a4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d101      	bne.n	80033ba <HAL_PCD_Start+0x16>
 80033b6:	2302      	movs	r3, #2
 80033b8:	e012      	b.n	80033e0 <HAL_PCD_Start+0x3c>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f003 ff60 	bl	800728c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f006 f979 	bl	80096c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f006 f97e 	bl	80096f6 <USB_ReadInterrupts>
 80033fa:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 fb26 	bl	8003a58 <PCD_EP_ISR_Handler>

    return;
 800340c:	e110      	b.n	8003630 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003414:	2b00      	cmp	r3, #0
 8003416:	d013      	beq.n	8003440 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003420:	b29a      	uxth	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800342a:	b292      	uxth	r2, r2
 800342c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f008 f884 	bl	800b53e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003436:	2100      	movs	r1, #0
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f8fc 	bl	8003636 <HAL_PCD_SetAddress>

    return;
 800343e:	e0f7      	b.n	8003630 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00c      	beq.n	8003464 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003452:	b29a      	uxth	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800345c:	b292      	uxth	r2, r2
 800345e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003462:	e0e5      	b.n	8003630 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00c      	beq.n	8003488 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003476:	b29a      	uxth	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003480:	b292      	uxth	r2, r2
 8003482:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003486:	e0d3      	b.n	8003630 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d034      	beq.n	80034fc <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800349a:	b29a      	uxth	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0204 	bic.w	r2, r2, #4
 80034a4:	b292      	uxth	r2, r2
 80034a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0208 	bic.w	r2, r2, #8
 80034bc:	b292      	uxth	r2, r2
 80034be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d107      	bne.n	80034dc <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80034d4:	2100      	movs	r1, #0
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f008 fa26 	bl	800b928 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f008 f867 	bl	800b5b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034f4:	b292      	uxth	r2, r2
 80034f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80034fa:	e099      	b.n	8003630 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003502:	2b00      	cmp	r3, #0
 8003504:	d027      	beq.n	8003556 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800350e:	b29a      	uxth	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f042 0208 	orr.w	r2, r2, #8
 8003518:	b292      	uxth	r2, r2
 800351a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003526:	b29a      	uxth	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003530:	b292      	uxth	r2, r2
 8003532:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800353e:	b29a      	uxth	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f042 0204 	orr.w	r2, r2, #4
 8003548:	b292      	uxth	r2, r2
 800354a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f008 f814 	bl	800b57c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003554:	e06c      	b.n	8003630 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355c:	2b00      	cmp	r3, #0
 800355e:	d040      	beq.n	80035e2 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003568:	b29a      	uxth	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003572:	b292      	uxth	r2, r2
 8003574:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d12b      	bne.n	80035da <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800358a:	b29a      	uxth	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0204 	orr.w	r2, r2, #4
 8003594:	b292      	uxth	r2, r2
 8003596:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f042 0208 	orr.w	r2, r2, #8
 80035ac:	b292      	uxth	r2, r2
 80035ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	089b      	lsrs	r3, r3, #2
 80035c6:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80035d0:	2101      	movs	r1, #1
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f008 f9a8 	bl	800b928 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80035d8:	e02a      	b.n	8003630 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f007 ffce 	bl	800b57c <HAL_PCD_SuspendCallback>
    return;
 80035e0:	e026      	b.n	8003630 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00f      	beq.n	800360c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035fe:	b292      	uxth	r2, r2
 8003600:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f007 ff8c 	bl	800b522 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800360a:	e011      	b.n	8003630 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00c      	beq.n	8003630 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800361e:	b29a      	uxth	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003628:	b292      	uxth	r2, r2
 800362a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800362e:	bf00      	nop
  }
}
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b082      	sub	sp, #8
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	460b      	mov	r3, r1
 8003640:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003648:	2b01      	cmp	r3, #1
 800364a:	d101      	bne.n	8003650 <HAL_PCD_SetAddress+0x1a>
 800364c:	2302      	movs	r3, #2
 800364e:	e013      	b.n	8003678 <HAL_PCD_SetAddress+0x42>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	78fa      	ldrb	r2, [r7, #3]
 800365c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	78fa      	ldrb	r2, [r7, #3]
 8003666:	4611      	mov	r1, r2
 8003668:	4618      	mov	r0, r3
 800366a:	f006 f819 	bl	80096a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	4608      	mov	r0, r1
 800368a:	4611      	mov	r1, r2
 800368c:	461a      	mov	r2, r3
 800368e:	4603      	mov	r3, r0
 8003690:	70fb      	strb	r3, [r7, #3]
 8003692:	460b      	mov	r3, r1
 8003694:	803b      	strh	r3, [r7, #0]
 8003696:	4613      	mov	r3, r2
 8003698:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800369e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	da0e      	bge.n	80036c4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036a6:	78fb      	ldrb	r3, [r7, #3]
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	4613      	mov	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	4413      	add	r3, r2
 80036ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2201      	movs	r2, #1
 80036c0:	705a      	strb	r2, [r3, #1]
 80036c2:	e00e      	b.n	80036e2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036c4:	78fb      	ldrb	r3, [r7, #3]
 80036c6:	f003 0207 	and.w	r2, r3, #7
 80036ca:	4613      	mov	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	4413      	add	r3, r2
 80036da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80036e2:	78fb      	ldrb	r3, [r7, #3]
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80036ee:	883a      	ldrh	r2, [r7, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	78ba      	ldrb	r2, [r7, #2]
 80036f8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	785b      	ldrb	r3, [r3, #1]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d004      	beq.n	800370c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	b29a      	uxth	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800370c:	78bb      	ldrb	r3, [r7, #2]
 800370e:	2b02      	cmp	r3, #2
 8003710:	d102      	bne.n	8003718 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800371e:	2b01      	cmp	r3, #1
 8003720:	d101      	bne.n	8003726 <HAL_PCD_EP_Open+0xa6>
 8003722:	2302      	movs	r3, #2
 8003724:	e00e      	b.n	8003744 <HAL_PCD_EP_Open+0xc4>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68f9      	ldr	r1, [r7, #12]
 8003734:	4618      	mov	r0, r3
 8003736:	f003 fdfd 	bl	8007334 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003742:	7afb      	ldrb	r3, [r7, #11]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003758:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800375c:	2b00      	cmp	r3, #0
 800375e:	da0e      	bge.n	800377e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003760:	78fb      	ldrb	r3, [r7, #3]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	4613      	mov	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	4413      	add	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	705a      	strb	r2, [r3, #1]
 800377c:	e00e      	b.n	800379c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800377e:	78fb      	ldrb	r3, [r7, #3]
 8003780:	f003 0207 	and.w	r2, r3, #7
 8003784:	4613      	mov	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	4413      	add	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800379c:	78fb      	ldrb	r3, [r7, #3]
 800379e:	f003 0307 	and.w	r3, r3, #7
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d101      	bne.n	80037b6 <HAL_PCD_EP_Close+0x6a>
 80037b2:	2302      	movs	r3, #2
 80037b4:	e00e      	b.n	80037d4 <HAL_PCD_EP_Close+0x88>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68f9      	ldr	r1, [r7, #12]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f004 f949 	bl	8007a5c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	607a      	str	r2, [r7, #4]
 80037e6:	603b      	str	r3, [r7, #0]
 80037e8:	460b      	mov	r3, r1
 80037ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037ec:	7afb      	ldrb	r3, [r7, #11]
 80037ee:	f003 0207 	and.w	r2, r3, #7
 80037f2:	4613      	mov	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4413      	add	r3, r2
 8003802:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	2200      	movs	r2, #0
 8003814:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	2200      	movs	r2, #0
 800381a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800381c:	7afb      	ldrb	r3, [r7, #11]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	b2da      	uxtb	r2, r3
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003828:	7afb      	ldrb	r3, [r7, #11]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	2b00      	cmp	r3, #0
 8003830:	d106      	bne.n	8003840 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6979      	ldr	r1, [r7, #20]
 8003838:	4618      	mov	r0, r3
 800383a:	f004 fafc 	bl	8007e36 <USB_EPStartXfer>
 800383e:	e005      	b.n	800384c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6979      	ldr	r1, [r7, #20]
 8003846:	4618      	mov	r0, r3
 8003848:	f004 faf5 	bl	8007e36 <USB_EPStartXfer>
  }

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	460b      	mov	r3, r1
 8003860:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003862:	78fb      	ldrb	r3, [r7, #3]
 8003864:	f003 0207 	and.w	r2, r3, #7
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	4613      	mov	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	440b      	add	r3, r1
 8003874:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003878:	681b      	ldr	r3, [r3, #0]
}
 800387a:	4618      	mov	r0, r3
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b086      	sub	sp, #24
 800388a:	af00      	add	r7, sp, #0
 800388c:	60f8      	str	r0, [r7, #12]
 800388e:	607a      	str	r2, [r7, #4]
 8003890:	603b      	str	r3, [r7, #0]
 8003892:	460b      	mov	r3, r1
 8003894:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003896:	7afb      	ldrb	r3, [r7, #11]
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	4413      	add	r3, r2
 80038aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2200      	movs	r2, #0
 80038ca:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2201      	movs	r2, #1
 80038d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038d2:	7afb      	ldrb	r3, [r7, #11]
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038de:	7afb      	ldrb	r3, [r7, #11]
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d106      	bne.n	80038f6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6979      	ldr	r1, [r7, #20]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f004 faa1 	bl	8007e36 <USB_EPStartXfer>
 80038f4:	e005      	b.n	8003902 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6979      	ldr	r1, [r7, #20]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f004 fa9a 	bl	8007e36 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	460b      	mov	r3, r1
 8003916:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003918:	78fb      	ldrb	r3, [r7, #3]
 800391a:	f003 0207 	and.w	r2, r3, #7
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	429a      	cmp	r2, r3
 8003924:	d901      	bls.n	800392a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e03e      	b.n	80039a8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800392a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800392e:	2b00      	cmp	r3, #0
 8003930:	da0e      	bge.n	8003950 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003932:	78fb      	ldrb	r3, [r7, #3]
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	1c5a      	adds	r2, r3, #1
 800393a:	4613      	mov	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4413      	add	r3, r2
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	4413      	add	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2201      	movs	r2, #1
 800394c:	705a      	strb	r2, [r3, #1]
 800394e:	e00c      	b.n	800396a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003950:	78fa      	ldrb	r2, [r7, #3]
 8003952:	4613      	mov	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	4413      	add	r3, r2
 8003962:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2201      	movs	r2, #1
 800396e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	b2da      	uxtb	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003982:	2b01      	cmp	r3, #1
 8003984:	d101      	bne.n	800398a <HAL_PCD_EP_SetStall+0x7e>
 8003986:	2302      	movs	r3, #2
 8003988:	e00e      	b.n	80039a8 <HAL_PCD_EP_SetStall+0x9c>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68f9      	ldr	r1, [r7, #12]
 8003998:	4618      	mov	r0, r3
 800399a:	f005 fd82 	bl	80094a2 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	f003 020f 	and.w	r2, r3, #15
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d901      	bls.n	80039ce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e040      	b.n	8003a50 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	da0e      	bge.n	80039f4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039d6:	78fb      	ldrb	r3, [r7, #3]
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	1c5a      	adds	r2, r3, #1
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	4413      	add	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2201      	movs	r2, #1
 80039f0:	705a      	strb	r2, [r3, #1]
 80039f2:	e00e      	b.n	8003a12 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039f4:	78fb      	ldrb	r3, [r7, #3]
 80039f6:	f003 0207 	and.w	r2, r3, #7
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	4413      	add	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d101      	bne.n	8003a32 <HAL_PCD_EP_ClrStall+0x82>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e00e      	b.n	8003a50 <HAL_PCD_EP_ClrStall+0xa0>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68f9      	ldr	r1, [r7, #12]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f005 fd7f 	bl	8009544 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b096      	sub	sp, #88	; 0x58
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a60:	e39c      	b.n	800419c <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a6a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003a6e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	f003 030f 	and.w	r3, r3, #15
 8003a78:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8003a7c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f040 815e 	bne.w	8003d42 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003a86:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003a8a:	f003 0310 	and.w	r3, r3, #16
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d150      	bne.n	8003b34 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa2:	81fb      	strh	r3, [r7, #14]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	89fb      	ldrh	r3, [r7, #14]
 8003aaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	3328      	adds	r3, #40	; 0x28
 8003aba:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	4413      	add	r3, r2
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6812      	ldr	r2, [r2, #0]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003ada:	881b      	ldrh	r3, [r3, #0]
 8003adc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ae2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ae6:	695a      	ldr	r2, [r3, #20]
 8003ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	441a      	add	r2, r3
 8003aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003af0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003af2:	2100      	movs	r1, #0
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f007 fcfa 	bl	800b4ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 834a 	beq.w	800419c <PCD_EP_ISR_Handler+0x744>
 8003b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f040 8345 	bne.w	800419c <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	b292      	uxth	r2, r2
 8003b26:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003b32:	e333      	b.n	800419c <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	881b      	ldrh	r3, [r3, #0]
 8003b42:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003b46:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003b4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d032      	beq.n	8003bb8 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	4413      	add	r3, r2
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6812      	ldr	r2, [r2, #0]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003b70:	881b      	ldrh	r3, [r3, #0]
 8003b72:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b78:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6818      	ldr	r0, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b86:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b8a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	f005 fe04 	bl	800979a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	881b      	ldrh	r3, [r3, #0]
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	823b      	strh	r3, [r7, #16]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	8a3a      	ldrh	r2, [r7, #16]
 8003ba8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bac:	b292      	uxth	r2, r2
 8003bae:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f007 fc6f 	bl	800b494 <HAL_PCD_SetupStageCallback>
 8003bb6:	e2f1      	b.n	800419c <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003bb8:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f280 82ed 	bge.w	800419c <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003bce:	4013      	ands	r3, r2
 8003bd0:	83fb      	strh	r3, [r7, #30]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	8bfa      	ldrh	r2, [r7, #30]
 8003bd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bdc:	b292      	uxth	r2, r2
 8003bde:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	461a      	mov	r2, r3
 8003bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	4413      	add	r3, r2
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6812      	ldr	r2, [r2, #0]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c06:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d019      	beq.n	8003c44 <PCD_EP_ISR_Handler+0x1ec>
 8003c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d015      	beq.n	8003c44 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6818      	ldr	r0, [r3, #0]
 8003c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c1e:	6959      	ldr	r1, [r3, #20]
 8003c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c22:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c26:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	f005 fdb6 	bl	800979a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c30:	695a      	ldr	r2, [r3, #20]
 8003c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	441a      	add	r2, r3
 8003c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c3a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f007 fc3a 	bl	800b4b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	881b      	ldrh	r3, [r3, #0]
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f040 82a3 	bne.w	800419c <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	61bb      	str	r3, [r7, #24]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	461a      	mov	r2, r3
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	61bb      	str	r3, [r7, #24]
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c74:	617b      	str	r3, [r7, #20]
 8003c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	2b3e      	cmp	r3, #62	; 0x3e
 8003c7c:	d918      	bls.n	8003cb0 <PCD_EP_ISR_Handler+0x258>
 8003c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	647b      	str	r3, [r7, #68]	; 0x44
 8003c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	f003 031f 	and.w	r3, r3, #31
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d102      	bne.n	8003c98 <PCD_EP_ISR_Handler+0x240>
 8003c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c94:	3b01      	subs	r3, #1
 8003c96:	647b      	str	r3, [r7, #68]	; 0x44
 8003c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	029b      	lsls	r3, r3, #10
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ca4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	801a      	strh	r2, [r3, #0]
 8003cae:	e029      	b.n	8003d04 <PCD_EP_ISR_Handler+0x2ac>
 8003cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d112      	bne.n	8003cde <PCD_EP_ISR_Handler+0x286>
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	801a      	strh	r2, [r3, #0]
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	881b      	ldrh	r3, [r3, #0]
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	801a      	strh	r2, [r3, #0]
 8003cdc:	e012      	b.n	8003d04 <PCD_EP_ISR_Handler+0x2ac>
 8003cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	085b      	lsrs	r3, r3, #1
 8003ce4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <PCD_EP_ISR_Handler+0x2a0>
 8003cf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	647b      	str	r3, [r7, #68]	; 0x44
 8003cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	029b      	lsls	r3, r3, #10
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d14:	827b      	strh	r3, [r7, #18]
 8003d16:	8a7b      	ldrh	r3, [r7, #18]
 8003d18:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003d1c:	827b      	strh	r3, [r7, #18]
 8003d1e:	8a7b      	ldrh	r3, [r7, #18]
 8003d20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d24:	827b      	strh	r3, [r7, #18]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	8a7b      	ldrh	r3, [r7, #18]
 8003d2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	8013      	strh	r3, [r2, #0]
 8003d40:	e22c      	b.n	800419c <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	461a      	mov	r2, r3
 8003d48:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003d56:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f280 80f6 	bge.w	8003f4c <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	461a      	mov	r2, r3
 8003d66:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003d76:	4013      	ands	r3, r2
 8003d78:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	461a      	mov	r2, r3
 8003d82:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003d8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d92:	b292      	uxth	r2, r2
 8003d94:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003d96:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4413      	add	r3, r2
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	4413      	add	r3, r2
 8003daa:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003dac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dae:	7b1b      	ldrb	r3, [r3, #12]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d123      	bne.n	8003dfc <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	4413      	add	r3, r2
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6812      	ldr	r2, [r2, #0]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003dd2:	881b      	ldrh	r3, [r3, #0]
 8003dd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dd8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8003ddc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 808e 	beq.w	8003f02 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6818      	ldr	r0, [r3, #0]
 8003dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dec:	6959      	ldr	r1, [r3, #20]
 8003dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003df0:	88da      	ldrh	r2, [r3, #6]
 8003df2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003df6:	f005 fcd0 	bl	800979a <USB_ReadPMA>
 8003dfa:	e082      	b.n	8003f02 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dfe:	78db      	ldrb	r3, [r3, #3]
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d10a      	bne.n	8003e1a <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003e04:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003e08:	461a      	mov	r2, r3
 8003e0a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f9d3 	bl	80041b8 <HAL_PCD_EP_DB_Receive>
 8003e12:	4603      	mov	r3, r0
 8003e14:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003e18:	e073      	b.n	8003f02 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4413      	add	r3, r2
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e34:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	441a      	add	r2, r3
 8003e46:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003e4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	461a      	mov	r2, r3
 8003e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	881b      	ldrh	r3, [r3, #0]
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d022      	beq.n	8003ebe <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	461a      	mov	r2, r3
 8003e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	4413      	add	r3, r2
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6812      	ldr	r2, [r2, #0]
 8003e90:	4413      	add	r3, r2
 8003e92:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e9c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8003ea0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d02c      	beq.n	8003f02 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6818      	ldr	r0, [r3, #0]
 8003eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eae:	6959      	ldr	r1, [r3, #20]
 8003eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eb2:	891a      	ldrh	r2, [r3, #8]
 8003eb4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003eb8:	f005 fc6f 	bl	800979a <USB_ReadPMA>
 8003ebc:	e021      	b.n	8003f02 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	461a      	mov	r2, r3
 8003eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	4413      	add	r3, r2
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6812      	ldr	r2, [r2, #0]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003edc:	881b      	ldrh	r3, [r3, #0]
 8003ede:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ee2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8003ee6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d009      	beq.n	8003f02 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6818      	ldr	r0, [r3, #0]
 8003ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ef4:	6959      	ldr	r1, [r3, #20]
 8003ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ef8:	895a      	ldrh	r2, [r3, #10]
 8003efa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003efe:	f005 fc4c 	bl	800979a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f04:	69da      	ldr	r2, [r3, #28]
 8003f06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003f0a:	441a      	add	r2, r3
 8003f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f0e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f12:	695a      	ldr	r2, [r3, #20]
 8003f14:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003f18:	441a      	add	r2, r3
 8003f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f1c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d005      	beq.n	8003f32 <PCD_EP_ISR_Handler+0x4da>
 8003f26:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d206      	bcs.n	8003f40 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	4619      	mov	r1, r3
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f007 fabd 	bl	800b4b8 <HAL_PCD_DataOutStageCallback>
 8003f3e:	e005      	b.n	8003f4c <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003f46:	4618      	mov	r0, r3
 8003f48:	f003 ff75 	bl	8007e36 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003f4c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 8121 	beq.w	800419c <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8003f5a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003f5e:	1c5a      	adds	r2, r3, #1
 8003f60:	4613      	mov	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	461a      	mov	r2, r3
 8003f74:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4413      	add	r3, r2
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f88:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	461a      	mov	r2, r3
 8003f92:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	441a      	add	r2, r3
 8003f9a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003f9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8003faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fac:	78db      	ldrb	r3, [r3, #3]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	f000 80a2 	beq.w	80040f8 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8003fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fbc:	7b1b      	ldrb	r3, [r3, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f000 8093 	beq.w	80040ea <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003fc4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d046      	beq.n	800405e <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fd2:	785b      	ldrb	r3, [r3, #1]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d126      	bne.n	8004026 <PCD_EP_ISR_Handler+0x5ce>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	461a      	mov	r2, r3
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	4413      	add	r3, r2
 8003fee:	627b      	str	r3, [r7, #36]	; 0x24
 8003ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	00da      	lsls	r2, r3, #3
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003ffe:	623b      	str	r3, [r7, #32]
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	b29b      	uxth	r3, r3
 8004006:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800400a:	b29a      	uxth	r2, r3
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	801a      	strh	r2, [r3, #0]
 8004010:	6a3b      	ldr	r3, [r7, #32]
 8004012:	881b      	ldrh	r3, [r3, #0]
 8004014:	b29b      	uxth	r3, r3
 8004016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800401a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800401e:	b29a      	uxth	r2, r3
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	801a      	strh	r2, [r3, #0]
 8004024:	e061      	b.n	80040ea <PCD_EP_ISR_Handler+0x692>
 8004026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004028:	785b      	ldrb	r3, [r3, #1]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d15d      	bne.n	80040ea <PCD_EP_ISR_Handler+0x692>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800403c:	b29b      	uxth	r3, r3
 800403e:	461a      	mov	r2, r3
 8004040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004042:	4413      	add	r3, r2
 8004044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	00da      	lsls	r2, r3, #3
 800404c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404e:	4413      	add	r3, r2
 8004050:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004054:	62bb      	str	r3, [r7, #40]	; 0x28
 8004056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004058:	2200      	movs	r2, #0
 800405a:	801a      	strh	r2, [r3, #0]
 800405c:	e045      	b.n	80040ea <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004066:	785b      	ldrb	r3, [r3, #1]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d126      	bne.n	80040ba <PCD_EP_ISR_Handler+0x662>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	637b      	str	r3, [r7, #52]	; 0x34
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800407a:	b29b      	uxth	r3, r3
 800407c:	461a      	mov	r2, r3
 800407e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004080:	4413      	add	r3, r2
 8004082:	637b      	str	r3, [r7, #52]	; 0x34
 8004084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	00da      	lsls	r2, r3, #3
 800408a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800408c:	4413      	add	r3, r2
 800408e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004092:	633b      	str	r3, [r7, #48]	; 0x30
 8004094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	b29b      	uxth	r3, r3
 800409a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800409e:	b29a      	uxth	r2, r3
 80040a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a2:	801a      	strh	r2, [r3, #0]
 80040a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b6:	801a      	strh	r2, [r3, #0]
 80040b8:	e017      	b.n	80040ea <PCD_EP_ISR_Handler+0x692>
 80040ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040bc:	785b      	ldrb	r3, [r3, #1]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d113      	bne.n	80040ea <PCD_EP_ISR_Handler+0x692>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	461a      	mov	r2, r3
 80040ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040d0:	4413      	add	r3, r2
 80040d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	00da      	lsls	r2, r3, #3
 80040da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040dc:	4413      	add	r3, r2
 80040de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80040e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80040e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e6:	2200      	movs	r2, #0
 80040e8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80040ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	4619      	mov	r1, r3
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f007 f9fc 	bl	800b4ee <HAL_PCD_DataInStageCallback>
 80040f6:	e051      	b.n	800419c <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80040f8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80040fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004100:	2b00      	cmp	r3, #0
 8004102:	d144      	bne.n	800418e <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800410c:	b29b      	uxth	r3, r3
 800410e:	461a      	mov	r2, r3
 8004110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	4413      	add	r3, r2
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6812      	ldr	r2, [r2, #0]
 800411c:	4413      	add	r3, r2
 800411e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004128:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800412c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800412e:	699a      	ldr	r2, [r3, #24]
 8004130:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004134:	429a      	cmp	r2, r3
 8004136:	d907      	bls.n	8004148 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8004138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800413a:	699a      	ldr	r2, [r3, #24]
 800413c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004140:	1ad2      	subs	r2, r2, r3
 8004142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004144:	619a      	str	r2, [r3, #24]
 8004146:	e002      	b.n	800414e <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8004148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800414a:	2200      	movs	r2, #0
 800414c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800414e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d106      	bne.n	8004164 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	4619      	mov	r1, r3
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f007 f9c6 	bl	800b4ee <HAL_PCD_DataInStageCallback>
 8004162:	e01b      	b.n	800419c <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004166:	695a      	ldr	r2, [r3, #20]
 8004168:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800416c:	441a      	add	r2, r3
 800416e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004170:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004174:	69da      	ldr	r2, [r3, #28]
 8004176:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800417a:	441a      	add	r2, r3
 800417c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800417e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004186:	4618      	mov	r0, r3
 8004188:	f003 fe55 	bl	8007e36 <USB_EPStartXfer>
 800418c:	e006      	b.n	800419c <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800418e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004192:	461a      	mov	r2, r3
 8004194:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f917 	bl	80043ca <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	b21b      	sxth	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f6ff ac5a 	blt.w	8003a62 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3758      	adds	r7, #88	; 0x58
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	4613      	mov	r3, r2
 80041c4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80041c6:	88fb      	ldrh	r3, [r7, #6]
 80041c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d07c      	beq.n	80042ca <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041d8:	b29b      	uxth	r3, r3
 80041da:	461a      	mov	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	4413      	add	r3, r2
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	6812      	ldr	r2, [r2, #0]
 80041e8:	4413      	add	r3, r2
 80041ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041f4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	699a      	ldr	r2, [r3, #24]
 80041fa:	8b7b      	ldrh	r3, [r7, #26]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d306      	bcc.n	800420e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	699a      	ldr	r2, [r3, #24]
 8004204:	8b7b      	ldrh	r3, [r7, #26]
 8004206:	1ad2      	subs	r2, r2, r3
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	619a      	str	r2, [r3, #24]
 800420c:	e002      	b.n	8004214 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2200      	movs	r2, #0
 8004212:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d123      	bne.n	8004264 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	461a      	mov	r2, r3
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	b29b      	uxth	r3, r3
 800422e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004236:	833b      	strh	r3, [r7, #24]
 8004238:	8b3b      	ldrh	r3, [r7, #24]
 800423a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800423e:	833b      	strh	r3, [r7, #24]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	441a      	add	r2, r3
 800424e:	8b3b      	ldrh	r3, [r7, #24]
 8004250:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004254:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004258:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800425c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004260:	b29b      	uxth	r3, r3
 8004262:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004264:	88fb      	ldrh	r3, [r7, #6]
 8004266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800426a:	2b00      	cmp	r3, #0
 800426c:	d01f      	beq.n	80042ae <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	461a      	mov	r2, r3
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	b29b      	uxth	r3, r3
 8004280:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004288:	82fb      	strh	r3, [r7, #22]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	461a      	mov	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	441a      	add	r2, r3
 8004298:	8afb      	ldrh	r3, [r7, #22]
 800429a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800429e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80042ae:	8b7b      	ldrh	r3, [r7, #26]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 8085 	beq.w	80043c0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6818      	ldr	r0, [r3, #0]
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	6959      	ldr	r1, [r3, #20]
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	891a      	ldrh	r2, [r3, #8]
 80042c2:	8b7b      	ldrh	r3, [r7, #26]
 80042c4:	f005 fa69 	bl	800979a <USB_ReadPMA>
 80042c8:	e07a      	b.n	80043c0 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	461a      	mov	r2, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	4413      	add	r3, r2
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	6812      	ldr	r2, [r2, #0]
 80042e2:	4413      	add	r3, r2
 80042e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80042e8:	881b      	ldrh	r3, [r3, #0]
 80042ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042ee:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	699a      	ldr	r2, [r3, #24]
 80042f4:	8b7b      	ldrh	r3, [r7, #26]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d306      	bcc.n	8004308 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	699a      	ldr	r2, [r3, #24]
 80042fe:	8b7b      	ldrh	r3, [r7, #26]
 8004300:	1ad2      	subs	r2, r2, r3
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	619a      	str	r2, [r3, #24]
 8004306:	e002      	b.n	800430e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2200      	movs	r2, #0
 800430c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d123      	bne.n	800435e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	461a      	mov	r2, r3
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	b29b      	uxth	r3, r3
 8004328:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800432c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004330:	83fb      	strh	r3, [r7, #30]
 8004332:	8bfb      	ldrh	r3, [r7, #30]
 8004334:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004338:	83fb      	strh	r3, [r7, #30]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	461a      	mov	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	441a      	add	r2, r3
 8004348:	8bfb      	ldrh	r3, [r7, #30]
 800434a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800434e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800435a:	b29b      	uxth	r3, r3
 800435c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800435e:	88fb      	ldrh	r3, [r7, #6]
 8004360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004364:	2b00      	cmp	r3, #0
 8004366:	d11f      	bne.n	80043a8 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	461a      	mov	r2, r3
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4413      	add	r3, r2
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	b29b      	uxth	r3, r3
 800437a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800437e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004382:	83bb      	strh	r3, [r7, #28]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	461a      	mov	r2, r3
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	441a      	add	r2, r3
 8004392:	8bbb      	ldrh	r3, [r7, #28]
 8004394:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004398:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800439c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80043a8:	8b7b      	ldrh	r3, [r7, #26]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d008      	beq.n	80043c0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6818      	ldr	r0, [r3, #0]
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	6959      	ldr	r1, [r3, #20]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	895a      	ldrh	r2, [r3, #10]
 80043ba:	8b7b      	ldrh	r3, [r7, #26]
 80043bc:	f005 f9ed 	bl	800979a <USB_ReadPMA>
    }
  }

  return count;
 80043c0:	8b7b      	ldrh	r3, [r7, #26]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3720      	adds	r7, #32
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b0a2      	sub	sp, #136	; 0x88
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	60f8      	str	r0, [r7, #12]
 80043d2:	60b9      	str	r1, [r7, #8]
 80043d4:	4613      	mov	r3, r2
 80043d6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80043d8:	88fb      	ldrh	r3, [r7, #6]
 80043da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 81c5 	beq.w	800476e <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	461a      	mov	r2, r3
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	4413      	add	r3, r2
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	6812      	ldr	r2, [r2, #0]
 80043fc:	4413      	add	r3, r2
 80043fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004408:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	699a      	ldr	r2, [r3, #24]
 8004410:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004414:	429a      	cmp	r2, r3
 8004416:	d907      	bls.n	8004428 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	699a      	ldr	r2, [r3, #24]
 800441c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004420:	1ad2      	subs	r2, r2, r3
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	619a      	str	r2, [r3, #24]
 8004426:	e002      	b.n	800442e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	2200      	movs	r2, #0
 800442c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	2b00      	cmp	r3, #0
 8004434:	f040 80b9 	bne.w	80045aa <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	785b      	ldrb	r3, [r3, #1]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d126      	bne.n	800448e <HAL_PCD_EP_DB_Transmit+0xc4>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	62bb      	str	r3, [r7, #40]	; 0x28
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800444e:	b29b      	uxth	r3, r3
 8004450:	461a      	mov	r2, r3
 8004452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004454:	4413      	add	r3, r2
 8004456:	62bb      	str	r3, [r7, #40]	; 0x28
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	00da      	lsls	r2, r3, #3
 800445e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004460:	4413      	add	r3, r2
 8004462:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	881b      	ldrh	r3, [r3, #0]
 800446c:	b29b      	uxth	r3, r3
 800446e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004472:	b29a      	uxth	r2, r3
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	801a      	strh	r2, [r3, #0]
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	b29b      	uxth	r3, r3
 800447e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004482:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004486:	b29a      	uxth	r2, r3
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	801a      	strh	r2, [r3, #0]
 800448c:	e01a      	b.n	80044c4 <HAL_PCD_EP_DB_Transmit+0xfa>
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	785b      	ldrb	r3, [r3, #1]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d116      	bne.n	80044c4 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	633b      	str	r3, [r7, #48]	; 0x30
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	461a      	mov	r2, r3
 80044a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044aa:	4413      	add	r3, r2
 80044ac:	633b      	str	r3, [r7, #48]	; 0x30
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	00da      	lsls	r2, r3, #3
 80044b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b6:	4413      	add	r3, r2
 80044b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80044bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c0:	2200      	movs	r2, #0
 80044c2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	623b      	str	r3, [r7, #32]
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	785b      	ldrb	r3, [r3, #1]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d126      	bne.n	8004520 <HAL_PCD_EP_DB_Transmit+0x156>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	61bb      	str	r3, [r7, #24]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	461a      	mov	r2, r3
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	4413      	add	r3, r2
 80044e8:	61bb      	str	r3, [r7, #24]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	00da      	lsls	r2, r3, #3
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	4413      	add	r3, r2
 80044f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80044f8:	617b      	str	r3, [r7, #20]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	881b      	ldrh	r3, [r3, #0]
 80044fe:	b29b      	uxth	r3, r3
 8004500:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004504:	b29a      	uxth	r2, r3
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	801a      	strh	r2, [r3, #0]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	b29b      	uxth	r3, r3
 8004510:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004514:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004518:	b29a      	uxth	r2, r3
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	801a      	strh	r2, [r3, #0]
 800451e:	e017      	b.n	8004550 <HAL_PCD_EP_DB_Transmit+0x186>
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	785b      	ldrb	r3, [r3, #1]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d113      	bne.n	8004550 <HAL_PCD_EP_DB_Transmit+0x186>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004530:	b29b      	uxth	r3, r3
 8004532:	461a      	mov	r2, r3
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	4413      	add	r3, r2
 8004538:	623b      	str	r3, [r7, #32]
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	00da      	lsls	r2, r3, #3
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	4413      	add	r3, r2
 8004544:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004548:	61fb      	str	r3, [r7, #28]
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	2200      	movs	r2, #0
 800454e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	4619      	mov	r1, r3
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f006 ffc9 	bl	800b4ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800455c:	88fb      	ldrh	r3, [r7, #6]
 800455e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 82d2 	beq.w	8004b0c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	461a      	mov	r2, r3
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	881b      	ldrh	r3, [r3, #0]
 8004578:	b29b      	uxth	r3, r3
 800457a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800457e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004582:	827b      	strh	r3, [r7, #18]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	461a      	mov	r2, r3
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	441a      	add	r2, r3
 8004592:	8a7b      	ldrh	r3, [r7, #18]
 8004594:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004598:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800459c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	8013      	strh	r3, [r2, #0]
 80045a8:	e2b0      	b.n	8004b0c <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80045aa:	88fb      	ldrh	r3, [r7, #6]
 80045ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d021      	beq.n	80045f8 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	461a      	mov	r2, r3
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	441a      	add	r2, r3
 80045e0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80045e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80045fe:	2b01      	cmp	r3, #1
 8004600:	f040 8284 	bne.w	8004b0c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	695a      	ldr	r2, [r3, #20]
 8004608:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800460c:	441a      	add	r2, r3
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	69da      	ldr	r2, [r3, #28]
 8004616:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800461a:	441a      	add	r2, r3
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	6a1a      	ldr	r2, [r3, #32]
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	429a      	cmp	r2, r3
 800462a:	d309      	bcc.n	8004640 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	6a1a      	ldr	r2, [r3, #32]
 8004636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004638:	1ad2      	subs	r2, r2, r3
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	621a      	str	r2, [r3, #32]
 800463e:	e015      	b.n	800466c <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d107      	bne.n	8004658 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8004648:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800464c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004656:	e009      	b.n	800466c <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2200      	movs	r2, #0
 800466a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	785b      	ldrb	r3, [r3, #1]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d155      	bne.n	8004720 <HAL_PCD_EP_DB_Transmit+0x356>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	63bb      	str	r3, [r7, #56]	; 0x38
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004682:	b29b      	uxth	r3, r3
 8004684:	461a      	mov	r2, r3
 8004686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004688:	4413      	add	r3, r2
 800468a:	63bb      	str	r3, [r7, #56]	; 0x38
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	00da      	lsls	r2, r3, #3
 8004692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004694:	4413      	add	r3, r2
 8004696:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800469a:	637b      	str	r3, [r7, #52]	; 0x34
 800469c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800469e:	2b3e      	cmp	r3, #62	; 0x3e
 80046a0:	d916      	bls.n	80046d0 <HAL_PCD_EP_DB_Transmit+0x306>
 80046a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046a4:	095b      	lsrs	r3, r3, #5
 80046a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80046a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046aa:	f003 031f 	and.w	r3, r3, #31
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d102      	bne.n	80046b8 <HAL_PCD_EP_DB_Transmit+0x2ee>
 80046b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046b4:	3b01      	subs	r3, #1
 80046b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80046b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	029b      	lsls	r3, r3, #10
 80046be:	b29b      	uxth	r3, r3
 80046c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046cc:	801a      	strh	r2, [r3, #0]
 80046ce:	e043      	b.n	8004758 <HAL_PCD_EP_DB_Transmit+0x38e>
 80046d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d112      	bne.n	80046fc <HAL_PCD_EP_DB_Transmit+0x332>
 80046d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d8:	881b      	ldrh	r3, [r3, #0]
 80046da:	b29b      	uxth	r3, r3
 80046dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e4:	801a      	strh	r2, [r3, #0]
 80046e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f8:	801a      	strh	r2, [r3, #0]
 80046fa:	e02d      	b.n	8004758 <HAL_PCD_EP_DB_Transmit+0x38e>
 80046fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046fe:	085b      	lsrs	r3, r3, #1
 8004700:	64bb      	str	r3, [r7, #72]	; 0x48
 8004702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <HAL_PCD_EP_DB_Transmit+0x348>
 800470c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800470e:	3301      	adds	r3, #1
 8004710:	64bb      	str	r3, [r7, #72]	; 0x48
 8004712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004714:	b29b      	uxth	r3, r3
 8004716:	029b      	lsls	r3, r3, #10
 8004718:	b29a      	uxth	r2, r3
 800471a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800471c:	801a      	strh	r2, [r3, #0]
 800471e:	e01b      	b.n	8004758 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	785b      	ldrb	r3, [r3, #1]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d117      	bne.n	8004758 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	643b      	str	r3, [r7, #64]	; 0x40
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004736:	b29b      	uxth	r3, r3
 8004738:	461a      	mov	r2, r3
 800473a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800473c:	4413      	add	r3, r2
 800473e:	643b      	str	r3, [r7, #64]	; 0x40
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	00da      	lsls	r2, r3, #3
 8004746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004748:	4413      	add	r3, r2
 800474a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800474e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004752:	b29a      	uxth	r2, r3
 8004754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004756:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6818      	ldr	r0, [r3, #0]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	6959      	ldr	r1, [r3, #20]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	891a      	ldrh	r2, [r3, #8]
 8004764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004766:	b29b      	uxth	r3, r3
 8004768:	f004 ffd5 	bl	8009716 <USB_WritePMA>
 800476c:	e1ce      	b.n	8004b0c <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004776:	b29b      	uxth	r3, r3
 8004778:	461a      	mov	r2, r3
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	4413      	add	r3, r2
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	6812      	ldr	r2, [r2, #0]
 8004786:	4413      	add	r3, r2
 8004788:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004792:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	699a      	ldr	r2, [r3, #24]
 800479a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800479e:	429a      	cmp	r2, r3
 80047a0:	d307      	bcc.n	80047b2 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	699a      	ldr	r2, [r3, #24]
 80047a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80047aa:	1ad2      	subs	r2, r2, r3
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	619a      	str	r2, [r3, #24]
 80047b0:	e002      	b.n	80047b8 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2200      	movs	r2, #0
 80047b6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f040 80c4 	bne.w	800494a <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	785b      	ldrb	r3, [r3, #1]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d126      	bne.n	8004818 <HAL_PCD_EP_DB_Transmit+0x44e>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047d8:	b29b      	uxth	r3, r3
 80047da:	461a      	mov	r2, r3
 80047dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047de:	4413      	add	r3, r2
 80047e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	00da      	lsls	r2, r3, #3
 80047e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047ea:	4413      	add	r3, r2
 80047ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80047f0:	667b      	str	r3, [r7, #100]	; 0x64
 80047f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004800:	801a      	strh	r2, [r3, #0]
 8004802:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	b29b      	uxth	r3, r3
 8004808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800480c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004810:	b29a      	uxth	r2, r3
 8004812:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004814:	801a      	strh	r2, [r3, #0]
 8004816:	e01a      	b.n	800484e <HAL_PCD_EP_DB_Transmit+0x484>
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	785b      	ldrb	r3, [r3, #1]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d116      	bne.n	800484e <HAL_PCD_EP_DB_Transmit+0x484>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	673b      	str	r3, [r7, #112]	; 0x70
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800482e:	b29b      	uxth	r3, r3
 8004830:	461a      	mov	r2, r3
 8004832:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004834:	4413      	add	r3, r2
 8004836:	673b      	str	r3, [r7, #112]	; 0x70
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	00da      	lsls	r2, r3, #3
 800483e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004840:	4413      	add	r3, r2
 8004842:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004846:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800484a:	2200      	movs	r2, #0
 800484c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	785b      	ldrb	r3, [r3, #1]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d12f      	bne.n	80048bc <HAL_PCD_EP_DB_Transmit+0x4f2>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800486c:	b29b      	uxth	r3, r3
 800486e:	461a      	mov	r2, r3
 8004870:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004874:	4413      	add	r3, r2
 8004876:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	00da      	lsls	r2, r3, #3
 8004880:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004884:	4413      	add	r3, r2
 8004886:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800488a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800488e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	b29b      	uxth	r3, r3
 8004896:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800489a:	b29a      	uxth	r2, r3
 800489c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048a0:	801a      	strh	r2, [r3, #0]
 80048a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048a6:	881b      	ldrh	r3, [r3, #0]
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048b8:	801a      	strh	r2, [r3, #0]
 80048ba:	e017      	b.n	80048ec <HAL_PCD_EP_DB_Transmit+0x522>
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	785b      	ldrb	r3, [r3, #1]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d113      	bne.n	80048ec <HAL_PCD_EP_DB_Transmit+0x522>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	461a      	mov	r2, r3
 80048d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048d2:	4413      	add	r3, r2
 80048d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	00da      	lsls	r2, r3, #3
 80048dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048de:	4413      	add	r3, r2
 80048e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80048e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80048e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048e8:	2200      	movs	r2, #0
 80048ea:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	4619      	mov	r1, r3
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f006 fdfb 	bl	800b4ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80048f8:	88fb      	ldrh	r3, [r7, #6]
 80048fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f040 8104 	bne.w	8004b0c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	461a      	mov	r2, r3
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	b29b      	uxth	r3, r3
 8004916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800491a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800491e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	461a      	mov	r2, r3
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	441a      	add	r2, r3
 8004930:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800493c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004944:	b29b      	uxth	r3, r3
 8004946:	8013      	strh	r3, [r2, #0]
 8004948:	e0e0      	b.n	8004b0c <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800494a:	88fb      	ldrh	r3, [r7, #6]
 800494c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d121      	bne.n	8004998 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	461a      	mov	r2, r3
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	b29b      	uxth	r3, r3
 8004966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800496a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	461a      	mov	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	441a      	add	r2, r3
 8004980:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004984:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004988:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800498c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004994:	b29b      	uxth	r3, r3
 8004996:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800499e:	2b01      	cmp	r3, #1
 80049a0:	f040 80b4 	bne.w	8004b0c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	695a      	ldr	r2, [r3, #20]
 80049a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80049ac:	441a      	add	r2, r3
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	69da      	ldr	r2, [r3, #28]
 80049b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80049ba:	441a      	add	r2, r3
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	6a1a      	ldr	r2, [r3, #32]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d309      	bcc.n	80049e0 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	6a1a      	ldr	r2, [r3, #32]
 80049d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049d8:	1ad2      	subs	r2, r2, r3
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	621a      	str	r2, [r3, #32]
 80049de:	e015      	b.n	8004a0c <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d107      	bne.n	80049f8 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80049e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80049ec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80049f6:	e009      	b.n	8004a0c <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	2200      	movs	r2, #0
 8004a02:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	663b      	str	r3, [r7, #96]	; 0x60
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	785b      	ldrb	r3, [r3, #1]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d155      	bne.n	8004ac6 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a2e:	4413      	add	r3, r2
 8004a30:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	00da      	lsls	r2, r3, #3
 8004a38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004a40:	657b      	str	r3, [r7, #84]	; 0x54
 8004a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a44:	2b3e      	cmp	r3, #62	; 0x3e
 8004a46:	d916      	bls.n	8004a76 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	677b      	str	r3, [r7, #116]	; 0x74
 8004a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a50:	f003 031f 	and.w	r3, r3, #31
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d102      	bne.n	8004a5e <HAL_PCD_EP_DB_Transmit+0x694>
 8004a58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	677b      	str	r3, [r7, #116]	; 0x74
 8004a5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	029b      	lsls	r3, r3, #10
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a72:	801a      	strh	r2, [r3, #0]
 8004a74:	e040      	b.n	8004af8 <HAL_PCD_EP_DB_Transmit+0x72e>
 8004a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d112      	bne.n	8004aa2 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8004a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a8a:	801a      	strh	r2, [r3, #0]
 8004a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a9e:	801a      	strh	r2, [r3, #0]
 8004aa0:	e02a      	b.n	8004af8 <HAL_PCD_EP_DB_Transmit+0x72e>
 8004aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aa4:	085b      	lsrs	r3, r3, #1
 8004aa6:	677b      	str	r3, [r7, #116]	; 0x74
 8004aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d002      	beq.n	8004ab8 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8004ab2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	677b      	str	r3, [r7, #116]	; 0x74
 8004ab8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	029b      	lsls	r3, r3, #10
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ac2:	801a      	strh	r2, [r3, #0]
 8004ac4:	e018      	b.n	8004af8 <HAL_PCD_EP_DB_Transmit+0x72e>
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	785b      	ldrb	r3, [r3, #1]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d114      	bne.n	8004af8 <HAL_PCD_EP_DB_Transmit+0x72e>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	461a      	mov	r2, r3
 8004ada:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004adc:	4413      	add	r3, r2
 8004ade:	663b      	str	r3, [r7, #96]	; 0x60
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	00da      	lsls	r2, r3, #3
 8004ae6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ae8:	4413      	add	r3, r2
 8004aea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004aee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004af6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6818      	ldr	r0, [r3, #0]
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	6959      	ldr	r1, [r3, #20]
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	895a      	ldrh	r2, [r3, #10]
 8004b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	f004 fe05 	bl	8009716 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	461a      	mov	r2, r3
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b26:	823b      	strh	r3, [r7, #16]
 8004b28:	8a3b      	ldrh	r3, [r7, #16]
 8004b2a:	f083 0310 	eor.w	r3, r3, #16
 8004b2e:	823b      	strh	r3, [r7, #16]
 8004b30:	8a3b      	ldrh	r3, [r7, #16]
 8004b32:	f083 0320 	eor.w	r3, r3, #32
 8004b36:	823b      	strh	r3, [r7, #16]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	441a      	add	r2, r3
 8004b46:	8a3b      	ldrh	r3, [r7, #16]
 8004b48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3788      	adds	r7, #136	; 0x88
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b087      	sub	sp, #28
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	60f8      	str	r0, [r7, #12]
 8004b6e:	607b      	str	r3, [r7, #4]
 8004b70:	460b      	mov	r3, r1
 8004b72:	817b      	strh	r3, [r7, #10]
 8004b74:	4613      	mov	r3, r2
 8004b76:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004b78:	897b      	ldrh	r3, [r7, #10]
 8004b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00b      	beq.n	8004b9c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b84:	897b      	ldrh	r3, [r7, #10]
 8004b86:	f003 0307 	and.w	r3, r3, #7
 8004b8a:	1c5a      	adds	r2, r3, #1
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4413      	add	r3, r2
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	4413      	add	r3, r2
 8004b98:	617b      	str	r3, [r7, #20]
 8004b9a:	e009      	b.n	8004bb0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004b9c:	897a      	ldrh	r2, [r7, #10]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4413      	add	r3, r2
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	4413      	add	r3, r2
 8004bae:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004bb0:	893b      	ldrh	r3, [r7, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d107      	bne.n	8004bc6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	80da      	strh	r2, [r3, #6]
 8004bc4:	e00b      	b.n	8004bde <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	0c1b      	lsrs	r3, r3, #16
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	371c      	adds	r7, #28
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	f043 0301 	orr.w	r3, r3, #1
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	f043 0302 	orr.w	r3, r3, #2
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d141      	bne.n	8004cd2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c4e:	4b4b      	ldr	r3, [pc, #300]	; (8004d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c5a:	d131      	bne.n	8004cc0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c5c:	4b47      	ldr	r3, [pc, #284]	; (8004d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c62:	4a46      	ldr	r2, [pc, #280]	; (8004d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c6c:	4b43      	ldr	r3, [pc, #268]	; (8004d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c74:	4a41      	ldr	r2, [pc, #260]	; (8004d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c7c:	4b40      	ldr	r3, [pc, #256]	; (8004d80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2232      	movs	r2, #50	; 0x32
 8004c82:	fb02 f303 	mul.w	r3, r2, r3
 8004c86:	4a3f      	ldr	r2, [pc, #252]	; (8004d84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c88:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8c:	0c9b      	lsrs	r3, r3, #18
 8004c8e:	3301      	adds	r3, #1
 8004c90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c92:	e002      	b.n	8004c9a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c9a:	4b38      	ldr	r3, [pc, #224]	; (8004d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ca6:	d102      	bne.n	8004cae <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f2      	bne.n	8004c94 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cae:	4b33      	ldr	r3, [pc, #204]	; (8004d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cba:	d158      	bne.n	8004d6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e057      	b.n	8004d70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cc0:	4b2e      	ldr	r3, [pc, #184]	; (8004d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cc6:	4a2d      	ldr	r2, [pc, #180]	; (8004d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ccc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004cd0:	e04d      	b.n	8004d6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cd8:	d141      	bne.n	8004d5e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004cda:	4b28      	ldr	r3, [pc, #160]	; (8004d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ce6:	d131      	bne.n	8004d4c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ce8:	4b24      	ldr	r3, [pc, #144]	; (8004d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cee:	4a23      	ldr	r2, [pc, #140]	; (8004d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cf8:	4b20      	ldr	r3, [pc, #128]	; (8004d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d00:	4a1e      	ldr	r2, [pc, #120]	; (8004d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d08:	4b1d      	ldr	r3, [pc, #116]	; (8004d80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2232      	movs	r2, #50	; 0x32
 8004d0e:	fb02 f303 	mul.w	r3, r2, r3
 8004d12:	4a1c      	ldr	r2, [pc, #112]	; (8004d84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d14:	fba2 2303 	umull	r2, r3, r2, r3
 8004d18:	0c9b      	lsrs	r3, r3, #18
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d1e:	e002      	b.n	8004d26 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d26:	4b15      	ldr	r3, [pc, #84]	; (8004d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d32:	d102      	bne.n	8004d3a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1f2      	bne.n	8004d20 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d3a:	4b10      	ldr	r3, [pc, #64]	; (8004d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d46:	d112      	bne.n	8004d6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e011      	b.n	8004d70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d4c:	4b0b      	ldr	r3, [pc, #44]	; (8004d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d52:	4a0a      	ldr	r2, [pc, #40]	; (8004d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004d5c:	e007      	b.n	8004d6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d5e:	4b07      	ldr	r3, [pc, #28]	; (8004d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d66:	4a05      	ldr	r2, [pc, #20]	; (8004d7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d6c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3714      	adds	r7, #20
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	40007000 	.word	0x40007000
 8004d80:	200026d0 	.word	0x200026d0
 8004d84:	431bde83 	.word	0x431bde83

08004d88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e306      	b.n	80053a8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d075      	beq.n	8004e92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004da6:	4b97      	ldr	r3, [pc, #604]	; (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f003 030c 	and.w	r3, r3, #12
 8004dae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004db0:	4b94      	ldr	r3, [pc, #592]	; (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f003 0303 	and.w	r3, r3, #3
 8004db8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	2b0c      	cmp	r3, #12
 8004dbe:	d102      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x3e>
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	d002      	beq.n	8004dcc <HAL_RCC_OscConfig+0x44>
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d10b      	bne.n	8004de4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dcc:	4b8d      	ldr	r3, [pc, #564]	; (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d05b      	beq.n	8004e90 <HAL_RCC_OscConfig+0x108>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d157      	bne.n	8004e90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e2e1      	b.n	80053a8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dec:	d106      	bne.n	8004dfc <HAL_RCC_OscConfig+0x74>
 8004dee:	4b85      	ldr	r3, [pc, #532]	; (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a84      	ldr	r2, [pc, #528]	; (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004df8:	6013      	str	r3, [r2, #0]
 8004dfa:	e01d      	b.n	8004e38 <HAL_RCC_OscConfig+0xb0>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e04:	d10c      	bne.n	8004e20 <HAL_RCC_OscConfig+0x98>
 8004e06:	4b7f      	ldr	r3, [pc, #508]	; (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a7e      	ldr	r2, [pc, #504]	; (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e10:	6013      	str	r3, [r2, #0]
 8004e12:	4b7c      	ldr	r3, [pc, #496]	; (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a7b      	ldr	r2, [pc, #492]	; (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e1c:	6013      	str	r3, [r2, #0]
 8004e1e:	e00b      	b.n	8004e38 <HAL_RCC_OscConfig+0xb0>
 8004e20:	4b78      	ldr	r3, [pc, #480]	; (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a77      	ldr	r2, [pc, #476]	; (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e2a:	6013      	str	r3, [r2, #0]
 8004e2c:	4b75      	ldr	r3, [pc, #468]	; (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a74      	ldr	r2, [pc, #464]	; (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d013      	beq.n	8004e68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e40:	f7fb ffac 	bl	8000d9c <HAL_GetTick>
 8004e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e48:	f7fb ffa8 	bl	8000d9c <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b64      	cmp	r3, #100	; 0x64
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e2a6      	b.n	80053a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e5a:	4b6a      	ldr	r3, [pc, #424]	; (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0f0      	beq.n	8004e48 <HAL_RCC_OscConfig+0xc0>
 8004e66:	e014      	b.n	8004e92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e68:	f7fb ff98 	bl	8000d9c <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e70:	f7fb ff94 	bl	8000d9c <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b64      	cmp	r3, #100	; 0x64
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e292      	b.n	80053a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e82:	4b60      	ldr	r3, [pc, #384]	; (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1f0      	bne.n	8004e70 <HAL_RCC_OscConfig+0xe8>
 8004e8e:	e000      	b.n	8004e92 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d075      	beq.n	8004f8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e9e:	4b59      	ldr	r3, [pc, #356]	; (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 030c 	and.w	r3, r3, #12
 8004ea6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ea8:	4b56      	ldr	r3, [pc, #344]	; (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f003 0303 	and.w	r3, r3, #3
 8004eb0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	2b0c      	cmp	r3, #12
 8004eb6:	d102      	bne.n	8004ebe <HAL_RCC_OscConfig+0x136>
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d002      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x13c>
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	2b04      	cmp	r3, #4
 8004ec2:	d11f      	bne.n	8004f04 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ec4:	4b4f      	ldr	r3, [pc, #316]	; (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d005      	beq.n	8004edc <HAL_RCC_OscConfig+0x154>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e265      	b.n	80053a8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004edc:	4b49      	ldr	r3, [pc, #292]	; (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	061b      	lsls	r3, r3, #24
 8004eea:	4946      	ldr	r1, [pc, #280]	; (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004ef0:	4b45      	ldr	r3, [pc, #276]	; (8005008 <HAL_RCC_OscConfig+0x280>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7fb ff05 	bl	8000d04 <HAL_InitTick>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d043      	beq.n	8004f88 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e251      	b.n	80053a8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d023      	beq.n	8004f54 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f0c:	4b3d      	ldr	r3, [pc, #244]	; (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a3c      	ldr	r2, [pc, #240]	; (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f18:	f7fb ff40 	bl	8000d9c <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f20:	f7fb ff3c 	bl	8000d9c <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e23a      	b.n	80053a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f32:	4b34      	ldr	r3, [pc, #208]	; (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0f0      	beq.n	8004f20 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f3e:	4b31      	ldr	r3, [pc, #196]	; (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	061b      	lsls	r3, r3, #24
 8004f4c:	492d      	ldr	r1, [pc, #180]	; (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	604b      	str	r3, [r1, #4]
 8004f52:	e01a      	b.n	8004f8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f54:	4b2b      	ldr	r3, [pc, #172]	; (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a2a      	ldr	r2, [pc, #168]	; (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004f5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f60:	f7fb ff1c 	bl	8000d9c <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f66:	e008      	b.n	8004f7a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f68:	f7fb ff18 	bl	8000d9c <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e216      	b.n	80053a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f7a:	4b22      	ldr	r3, [pc, #136]	; (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1f0      	bne.n	8004f68 <HAL_RCC_OscConfig+0x1e0>
 8004f86:	e000      	b.n	8004f8a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d041      	beq.n	800501a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d01c      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f9e:	4b19      	ldr	r3, [pc, #100]	; (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fa4:	4a17      	ldr	r2, [pc, #92]	; (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004fa6:	f043 0301 	orr.w	r3, r3, #1
 8004faa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fae:	f7fb fef5 	bl	8000d9c <HAL_GetTick>
 8004fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fb4:	e008      	b.n	8004fc8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fb6:	f7fb fef1 	bl	8000d9c <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e1ef      	b.n	80053a8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fc8:	4b0e      	ldr	r3, [pc, #56]	; (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d0ef      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x22e>
 8004fd6:	e020      	b.n	800501a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fd8:	4b0a      	ldr	r3, [pc, #40]	; (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fde:	4a09      	ldr	r2, [pc, #36]	; (8005004 <HAL_RCC_OscConfig+0x27c>)
 8004fe0:	f023 0301 	bic.w	r3, r3, #1
 8004fe4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe8:	f7fb fed8 	bl	8000d9c <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fee:	e00d      	b.n	800500c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ff0:	f7fb fed4 	bl	8000d9c <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d906      	bls.n	800500c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e1d2      	b.n	80053a8 <HAL_RCC_OscConfig+0x620>
 8005002:	bf00      	nop
 8005004:	40021000 	.word	0x40021000
 8005008:	200026d4 	.word	0x200026d4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800500c:	4b8c      	ldr	r3, [pc, #560]	; (8005240 <HAL_RCC_OscConfig+0x4b8>)
 800500e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1ea      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0304 	and.w	r3, r3, #4
 8005022:	2b00      	cmp	r3, #0
 8005024:	f000 80a6 	beq.w	8005174 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005028:	2300      	movs	r3, #0
 800502a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800502c:	4b84      	ldr	r3, [pc, #528]	; (8005240 <HAL_RCC_OscConfig+0x4b8>)
 800502e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d101      	bne.n	800503c <HAL_RCC_OscConfig+0x2b4>
 8005038:	2301      	movs	r3, #1
 800503a:	e000      	b.n	800503e <HAL_RCC_OscConfig+0x2b6>
 800503c:	2300      	movs	r3, #0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00d      	beq.n	800505e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005042:	4b7f      	ldr	r3, [pc, #508]	; (8005240 <HAL_RCC_OscConfig+0x4b8>)
 8005044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005046:	4a7e      	ldr	r2, [pc, #504]	; (8005240 <HAL_RCC_OscConfig+0x4b8>)
 8005048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800504c:	6593      	str	r3, [r2, #88]	; 0x58
 800504e:	4b7c      	ldr	r3, [pc, #496]	; (8005240 <HAL_RCC_OscConfig+0x4b8>)
 8005050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005056:	60fb      	str	r3, [r7, #12]
 8005058:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800505a:	2301      	movs	r3, #1
 800505c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800505e:	4b79      	ldr	r3, [pc, #484]	; (8005244 <HAL_RCC_OscConfig+0x4bc>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005066:	2b00      	cmp	r3, #0
 8005068:	d118      	bne.n	800509c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800506a:	4b76      	ldr	r3, [pc, #472]	; (8005244 <HAL_RCC_OscConfig+0x4bc>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a75      	ldr	r2, [pc, #468]	; (8005244 <HAL_RCC_OscConfig+0x4bc>)
 8005070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005074:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005076:	f7fb fe91 	bl	8000d9c <HAL_GetTick>
 800507a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800507c:	e008      	b.n	8005090 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800507e:	f7fb fe8d 	bl	8000d9c <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	2b02      	cmp	r3, #2
 800508a:	d901      	bls.n	8005090 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e18b      	b.n	80053a8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005090:	4b6c      	ldr	r3, [pc, #432]	; (8005244 <HAL_RCC_OscConfig+0x4bc>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0f0      	beq.n	800507e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d108      	bne.n	80050b6 <HAL_RCC_OscConfig+0x32e>
 80050a4:	4b66      	ldr	r3, [pc, #408]	; (8005240 <HAL_RCC_OscConfig+0x4b8>)
 80050a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050aa:	4a65      	ldr	r2, [pc, #404]	; (8005240 <HAL_RCC_OscConfig+0x4b8>)
 80050ac:	f043 0301 	orr.w	r3, r3, #1
 80050b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050b4:	e024      	b.n	8005100 <HAL_RCC_OscConfig+0x378>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	2b05      	cmp	r3, #5
 80050bc:	d110      	bne.n	80050e0 <HAL_RCC_OscConfig+0x358>
 80050be:	4b60      	ldr	r3, [pc, #384]	; (8005240 <HAL_RCC_OscConfig+0x4b8>)
 80050c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c4:	4a5e      	ldr	r2, [pc, #376]	; (8005240 <HAL_RCC_OscConfig+0x4b8>)
 80050c6:	f043 0304 	orr.w	r3, r3, #4
 80050ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050ce:	4b5c      	ldr	r3, [pc, #368]	; (8005240 <HAL_RCC_OscConfig+0x4b8>)
 80050d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d4:	4a5a      	ldr	r2, [pc, #360]	; (8005240 <HAL_RCC_OscConfig+0x4b8>)
 80050d6:	f043 0301 	orr.w	r3, r3, #1
 80050da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050de:	e00f      	b.n	8005100 <HAL_RCC_OscConfig+0x378>
 80050e0:	4b57      	ldr	r3, [pc, #348]	; (8005240 <HAL_RCC_OscConfig+0x4b8>)
 80050e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e6:	4a56      	ldr	r2, [pc, #344]	; (8005240 <HAL_RCC_OscConfig+0x4b8>)
 80050e8:	f023 0301 	bic.w	r3, r3, #1
 80050ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80050f0:	4b53      	ldr	r3, [pc, #332]	; (8005240 <HAL_RCC_OscConfig+0x4b8>)
 80050f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f6:	4a52      	ldr	r2, [pc, #328]	; (8005240 <HAL_RCC_OscConfig+0x4b8>)
 80050f8:	f023 0304 	bic.w	r3, r3, #4
 80050fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d016      	beq.n	8005136 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005108:	f7fb fe48 	bl	8000d9c <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800510e:	e00a      	b.n	8005126 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005110:	f7fb fe44 	bl	8000d9c <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	f241 3288 	movw	r2, #5000	; 0x1388
 800511e:	4293      	cmp	r3, r2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e140      	b.n	80053a8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005126:	4b46      	ldr	r3, [pc, #280]	; (8005240 <HAL_RCC_OscConfig+0x4b8>)
 8005128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d0ed      	beq.n	8005110 <HAL_RCC_OscConfig+0x388>
 8005134:	e015      	b.n	8005162 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005136:	f7fb fe31 	bl	8000d9c <HAL_GetTick>
 800513a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800513c:	e00a      	b.n	8005154 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800513e:	f7fb fe2d 	bl	8000d9c <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	f241 3288 	movw	r2, #5000	; 0x1388
 800514c:	4293      	cmp	r3, r2
 800514e:	d901      	bls.n	8005154 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e129      	b.n	80053a8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005154:	4b3a      	ldr	r3, [pc, #232]	; (8005240 <HAL_RCC_OscConfig+0x4b8>)
 8005156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1ed      	bne.n	800513e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005162:	7ffb      	ldrb	r3, [r7, #31]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d105      	bne.n	8005174 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005168:	4b35      	ldr	r3, [pc, #212]	; (8005240 <HAL_RCC_OscConfig+0x4b8>)
 800516a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800516c:	4a34      	ldr	r2, [pc, #208]	; (8005240 <HAL_RCC_OscConfig+0x4b8>)
 800516e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005172:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0320 	and.w	r3, r3, #32
 800517c:	2b00      	cmp	r3, #0
 800517e:	d03c      	beq.n	80051fa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d01c      	beq.n	80051c2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005188:	4b2d      	ldr	r3, [pc, #180]	; (8005240 <HAL_RCC_OscConfig+0x4b8>)
 800518a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800518e:	4a2c      	ldr	r2, [pc, #176]	; (8005240 <HAL_RCC_OscConfig+0x4b8>)
 8005190:	f043 0301 	orr.w	r3, r3, #1
 8005194:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005198:	f7fb fe00 	bl	8000d9c <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051a0:	f7fb fdfc 	bl	8000d9c <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e0fa      	b.n	80053a8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051b2:	4b23      	ldr	r3, [pc, #140]	; (8005240 <HAL_RCC_OscConfig+0x4b8>)
 80051b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d0ef      	beq.n	80051a0 <HAL_RCC_OscConfig+0x418>
 80051c0:	e01b      	b.n	80051fa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80051c2:	4b1f      	ldr	r3, [pc, #124]	; (8005240 <HAL_RCC_OscConfig+0x4b8>)
 80051c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051c8:	4a1d      	ldr	r2, [pc, #116]	; (8005240 <HAL_RCC_OscConfig+0x4b8>)
 80051ca:	f023 0301 	bic.w	r3, r3, #1
 80051ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d2:	f7fb fde3 	bl	8000d9c <HAL_GetTick>
 80051d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80051d8:	e008      	b.n	80051ec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051da:	f7fb fddf 	bl	8000d9c <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d901      	bls.n	80051ec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e0dd      	b.n	80053a8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80051ec:	4b14      	ldr	r3, [pc, #80]	; (8005240 <HAL_RCC_OscConfig+0x4b8>)
 80051ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1ef      	bne.n	80051da <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f000 80d1 	beq.w	80053a6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005204:	4b0e      	ldr	r3, [pc, #56]	; (8005240 <HAL_RCC_OscConfig+0x4b8>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f003 030c 	and.w	r3, r3, #12
 800520c:	2b0c      	cmp	r3, #12
 800520e:	f000 808b 	beq.w	8005328 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	2b02      	cmp	r3, #2
 8005218:	d15e      	bne.n	80052d8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800521a:	4b09      	ldr	r3, [pc, #36]	; (8005240 <HAL_RCC_OscConfig+0x4b8>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a08      	ldr	r2, [pc, #32]	; (8005240 <HAL_RCC_OscConfig+0x4b8>)
 8005220:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005224:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005226:	f7fb fdb9 	bl	8000d9c <HAL_GetTick>
 800522a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800522c:	e00c      	b.n	8005248 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800522e:	f7fb fdb5 	bl	8000d9c <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d905      	bls.n	8005248 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e0b3      	b.n	80053a8 <HAL_RCC_OscConfig+0x620>
 8005240:	40021000 	.word	0x40021000
 8005244:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005248:	4b59      	ldr	r3, [pc, #356]	; (80053b0 <HAL_RCC_OscConfig+0x628>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1ec      	bne.n	800522e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005254:	4b56      	ldr	r3, [pc, #344]	; (80053b0 <HAL_RCC_OscConfig+0x628>)
 8005256:	68da      	ldr	r2, [r3, #12]
 8005258:	4b56      	ldr	r3, [pc, #344]	; (80053b4 <HAL_RCC_OscConfig+0x62c>)
 800525a:	4013      	ands	r3, r2
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	6a11      	ldr	r1, [r2, #32]
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005264:	3a01      	subs	r2, #1
 8005266:	0112      	lsls	r2, r2, #4
 8005268:	4311      	orrs	r1, r2
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800526e:	0212      	lsls	r2, r2, #8
 8005270:	4311      	orrs	r1, r2
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005276:	0852      	lsrs	r2, r2, #1
 8005278:	3a01      	subs	r2, #1
 800527a:	0552      	lsls	r2, r2, #21
 800527c:	4311      	orrs	r1, r2
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005282:	0852      	lsrs	r2, r2, #1
 8005284:	3a01      	subs	r2, #1
 8005286:	0652      	lsls	r2, r2, #25
 8005288:	4311      	orrs	r1, r2
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800528e:	06d2      	lsls	r2, r2, #27
 8005290:	430a      	orrs	r2, r1
 8005292:	4947      	ldr	r1, [pc, #284]	; (80053b0 <HAL_RCC_OscConfig+0x628>)
 8005294:	4313      	orrs	r3, r2
 8005296:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005298:	4b45      	ldr	r3, [pc, #276]	; (80053b0 <HAL_RCC_OscConfig+0x628>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a44      	ldr	r2, [pc, #272]	; (80053b0 <HAL_RCC_OscConfig+0x628>)
 800529e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052a2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052a4:	4b42      	ldr	r3, [pc, #264]	; (80053b0 <HAL_RCC_OscConfig+0x628>)
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	4a41      	ldr	r2, [pc, #260]	; (80053b0 <HAL_RCC_OscConfig+0x628>)
 80052aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b0:	f7fb fd74 	bl	8000d9c <HAL_GetTick>
 80052b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052b6:	e008      	b.n	80052ca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052b8:	f7fb fd70 	bl	8000d9c <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e06e      	b.n	80053a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052ca:	4b39      	ldr	r3, [pc, #228]	; (80053b0 <HAL_RCC_OscConfig+0x628>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0f0      	beq.n	80052b8 <HAL_RCC_OscConfig+0x530>
 80052d6:	e066      	b.n	80053a6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052d8:	4b35      	ldr	r3, [pc, #212]	; (80053b0 <HAL_RCC_OscConfig+0x628>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a34      	ldr	r2, [pc, #208]	; (80053b0 <HAL_RCC_OscConfig+0x628>)
 80052de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052e2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80052e4:	4b32      	ldr	r3, [pc, #200]	; (80053b0 <HAL_RCC_OscConfig+0x628>)
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	4a31      	ldr	r2, [pc, #196]	; (80053b0 <HAL_RCC_OscConfig+0x628>)
 80052ea:	f023 0303 	bic.w	r3, r3, #3
 80052ee:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80052f0:	4b2f      	ldr	r3, [pc, #188]	; (80053b0 <HAL_RCC_OscConfig+0x628>)
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	4a2e      	ldr	r2, [pc, #184]	; (80053b0 <HAL_RCC_OscConfig+0x628>)
 80052f6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80052fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005300:	f7fb fd4c 	bl	8000d9c <HAL_GetTick>
 8005304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005306:	e008      	b.n	800531a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005308:	f7fb fd48 	bl	8000d9c <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e046      	b.n	80053a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800531a:	4b25      	ldr	r3, [pc, #148]	; (80053b0 <HAL_RCC_OscConfig+0x628>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1f0      	bne.n	8005308 <HAL_RCC_OscConfig+0x580>
 8005326:	e03e      	b.n	80053a6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	69db      	ldr	r3, [r3, #28]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d101      	bne.n	8005334 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e039      	b.n	80053a8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005334:	4b1e      	ldr	r3, [pc, #120]	; (80053b0 <HAL_RCC_OscConfig+0x628>)
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f003 0203 	and.w	r2, r3, #3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	429a      	cmp	r2, r3
 8005346:	d12c      	bne.n	80053a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005352:	3b01      	subs	r3, #1
 8005354:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005356:	429a      	cmp	r2, r3
 8005358:	d123      	bne.n	80053a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005364:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005366:	429a      	cmp	r2, r3
 8005368:	d11b      	bne.n	80053a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005374:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005376:	429a      	cmp	r2, r3
 8005378:	d113      	bne.n	80053a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005384:	085b      	lsrs	r3, r3, #1
 8005386:	3b01      	subs	r3, #1
 8005388:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800538a:	429a      	cmp	r2, r3
 800538c:	d109      	bne.n	80053a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005398:	085b      	lsrs	r3, r3, #1
 800539a:	3b01      	subs	r3, #1
 800539c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800539e:	429a      	cmp	r2, r3
 80053a0:	d001      	beq.n	80053a6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e000      	b.n	80053a8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3720      	adds	r7, #32
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	40021000 	.word	0x40021000
 80053b4:	019f800c 	.word	0x019f800c

080053b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80053c2:	2300      	movs	r3, #0
 80053c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e11e      	b.n	800560e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053d0:	4b91      	ldr	r3, [pc, #580]	; (8005618 <HAL_RCC_ClockConfig+0x260>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 030f 	and.w	r3, r3, #15
 80053d8:	683a      	ldr	r2, [r7, #0]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d910      	bls.n	8005400 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053de:	4b8e      	ldr	r3, [pc, #568]	; (8005618 <HAL_RCC_ClockConfig+0x260>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f023 020f 	bic.w	r2, r3, #15
 80053e6:	498c      	ldr	r1, [pc, #560]	; (8005618 <HAL_RCC_ClockConfig+0x260>)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ee:	4b8a      	ldr	r3, [pc, #552]	; (8005618 <HAL_RCC_ClockConfig+0x260>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d001      	beq.n	8005400 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e106      	b.n	800560e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b00      	cmp	r3, #0
 800540a:	d073      	beq.n	80054f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	2b03      	cmp	r3, #3
 8005412:	d129      	bne.n	8005468 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005414:	4b81      	ldr	r3, [pc, #516]	; (800561c <HAL_RCC_ClockConfig+0x264>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e0f4      	b.n	800560e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005424:	f000 f970 	bl	8005708 <RCC_GetSysClockFreqFromPLLSource>
 8005428:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	4a7c      	ldr	r2, [pc, #496]	; (8005620 <HAL_RCC_ClockConfig+0x268>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d93f      	bls.n	80054b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005432:	4b7a      	ldr	r3, [pc, #488]	; (800561c <HAL_RCC_ClockConfig+0x264>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d009      	beq.n	8005452 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005446:	2b00      	cmp	r3, #0
 8005448:	d033      	beq.n	80054b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800544e:	2b00      	cmp	r3, #0
 8005450:	d12f      	bne.n	80054b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005452:	4b72      	ldr	r3, [pc, #456]	; (800561c <HAL_RCC_ClockConfig+0x264>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800545a:	4a70      	ldr	r2, [pc, #448]	; (800561c <HAL_RCC_ClockConfig+0x264>)
 800545c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005460:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005462:	2380      	movs	r3, #128	; 0x80
 8005464:	617b      	str	r3, [r7, #20]
 8005466:	e024      	b.n	80054b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	2b02      	cmp	r3, #2
 800546e:	d107      	bne.n	8005480 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005470:	4b6a      	ldr	r3, [pc, #424]	; (800561c <HAL_RCC_ClockConfig+0x264>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d109      	bne.n	8005490 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e0c6      	b.n	800560e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005480:	4b66      	ldr	r3, [pc, #408]	; (800561c <HAL_RCC_ClockConfig+0x264>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e0be      	b.n	800560e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005490:	f000 f8ce 	bl	8005630 <HAL_RCC_GetSysClockFreq>
 8005494:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	4a61      	ldr	r2, [pc, #388]	; (8005620 <HAL_RCC_ClockConfig+0x268>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d909      	bls.n	80054b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800549e:	4b5f      	ldr	r3, [pc, #380]	; (800561c <HAL_RCC_ClockConfig+0x264>)
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054a6:	4a5d      	ldr	r2, [pc, #372]	; (800561c <HAL_RCC_ClockConfig+0x264>)
 80054a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80054ae:	2380      	movs	r3, #128	; 0x80
 80054b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054b2:	4b5a      	ldr	r3, [pc, #360]	; (800561c <HAL_RCC_ClockConfig+0x264>)
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f023 0203 	bic.w	r2, r3, #3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	4957      	ldr	r1, [pc, #348]	; (800561c <HAL_RCC_ClockConfig+0x264>)
 80054c0:	4313      	orrs	r3, r2
 80054c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054c4:	f7fb fc6a 	bl	8000d9c <HAL_GetTick>
 80054c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ca:	e00a      	b.n	80054e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054cc:	f7fb fc66 	bl	8000d9c <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80054da:	4293      	cmp	r3, r2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e095      	b.n	800560e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054e2:	4b4e      	ldr	r3, [pc, #312]	; (800561c <HAL_RCC_ClockConfig+0x264>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f003 020c 	and.w	r2, r3, #12
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d1eb      	bne.n	80054cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d023      	beq.n	8005548 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0304 	and.w	r3, r3, #4
 8005508:	2b00      	cmp	r3, #0
 800550a:	d005      	beq.n	8005518 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800550c:	4b43      	ldr	r3, [pc, #268]	; (800561c <HAL_RCC_ClockConfig+0x264>)
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	4a42      	ldr	r2, [pc, #264]	; (800561c <HAL_RCC_ClockConfig+0x264>)
 8005512:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005516:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0308 	and.w	r3, r3, #8
 8005520:	2b00      	cmp	r3, #0
 8005522:	d007      	beq.n	8005534 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005524:	4b3d      	ldr	r3, [pc, #244]	; (800561c <HAL_RCC_ClockConfig+0x264>)
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800552c:	4a3b      	ldr	r2, [pc, #236]	; (800561c <HAL_RCC_ClockConfig+0x264>)
 800552e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005532:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005534:	4b39      	ldr	r3, [pc, #228]	; (800561c <HAL_RCC_ClockConfig+0x264>)
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	4936      	ldr	r1, [pc, #216]	; (800561c <HAL_RCC_ClockConfig+0x264>)
 8005542:	4313      	orrs	r3, r2
 8005544:	608b      	str	r3, [r1, #8]
 8005546:	e008      	b.n	800555a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	2b80      	cmp	r3, #128	; 0x80
 800554c:	d105      	bne.n	800555a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800554e:	4b33      	ldr	r3, [pc, #204]	; (800561c <HAL_RCC_ClockConfig+0x264>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	4a32      	ldr	r2, [pc, #200]	; (800561c <HAL_RCC_ClockConfig+0x264>)
 8005554:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005558:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800555a:	4b2f      	ldr	r3, [pc, #188]	; (8005618 <HAL_RCC_ClockConfig+0x260>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 030f 	and.w	r3, r3, #15
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	429a      	cmp	r2, r3
 8005566:	d21d      	bcs.n	80055a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005568:	4b2b      	ldr	r3, [pc, #172]	; (8005618 <HAL_RCC_ClockConfig+0x260>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f023 020f 	bic.w	r2, r3, #15
 8005570:	4929      	ldr	r1, [pc, #164]	; (8005618 <HAL_RCC_ClockConfig+0x260>)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	4313      	orrs	r3, r2
 8005576:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005578:	f7fb fc10 	bl	8000d9c <HAL_GetTick>
 800557c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800557e:	e00a      	b.n	8005596 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005580:	f7fb fc0c 	bl	8000d9c <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	f241 3288 	movw	r2, #5000	; 0x1388
 800558e:	4293      	cmp	r3, r2
 8005590:	d901      	bls.n	8005596 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e03b      	b.n	800560e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005596:	4b20      	ldr	r3, [pc, #128]	; (8005618 <HAL_RCC_ClockConfig+0x260>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 030f 	and.w	r3, r3, #15
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d1ed      	bne.n	8005580 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d008      	beq.n	80055c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055b0:	4b1a      	ldr	r3, [pc, #104]	; (800561c <HAL_RCC_ClockConfig+0x264>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	4917      	ldr	r1, [pc, #92]	; (800561c <HAL_RCC_ClockConfig+0x264>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0308 	and.w	r3, r3, #8
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d009      	beq.n	80055e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055ce:	4b13      	ldr	r3, [pc, #76]	; (800561c <HAL_RCC_ClockConfig+0x264>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	490f      	ldr	r1, [pc, #60]	; (800561c <HAL_RCC_ClockConfig+0x264>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055e2:	f000 f825 	bl	8005630 <HAL_RCC_GetSysClockFreq>
 80055e6:	4602      	mov	r2, r0
 80055e8:	4b0c      	ldr	r3, [pc, #48]	; (800561c <HAL_RCC_ClockConfig+0x264>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	091b      	lsrs	r3, r3, #4
 80055ee:	f003 030f 	and.w	r3, r3, #15
 80055f2:	490c      	ldr	r1, [pc, #48]	; (8005624 <HAL_RCC_ClockConfig+0x26c>)
 80055f4:	5ccb      	ldrb	r3, [r1, r3]
 80055f6:	f003 031f 	and.w	r3, r3, #31
 80055fa:	fa22 f303 	lsr.w	r3, r2, r3
 80055fe:	4a0a      	ldr	r2, [pc, #40]	; (8005628 <HAL_RCC_ClockConfig+0x270>)
 8005600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005602:	4b0a      	ldr	r3, [pc, #40]	; (800562c <HAL_RCC_ClockConfig+0x274>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4618      	mov	r0, r3
 8005608:	f7fb fb7c 	bl	8000d04 <HAL_InitTick>
 800560c:	4603      	mov	r3, r0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3718      	adds	r7, #24
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	40022000 	.word	0x40022000
 800561c:	40021000 	.word	0x40021000
 8005620:	04c4b400 	.word	0x04c4b400
 8005624:	0800bae0 	.word	0x0800bae0
 8005628:	200026d0 	.word	0x200026d0
 800562c:	200026d4 	.word	0x200026d4

08005630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005636:	4b2c      	ldr	r3, [pc, #176]	; (80056e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 030c 	and.w	r3, r3, #12
 800563e:	2b04      	cmp	r3, #4
 8005640:	d102      	bne.n	8005648 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005642:	4b2a      	ldr	r3, [pc, #168]	; (80056ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	e047      	b.n	80056d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005648:	4b27      	ldr	r3, [pc, #156]	; (80056e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f003 030c 	and.w	r3, r3, #12
 8005650:	2b08      	cmp	r3, #8
 8005652:	d102      	bne.n	800565a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005654:	4b25      	ldr	r3, [pc, #148]	; (80056ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8005656:	613b      	str	r3, [r7, #16]
 8005658:	e03e      	b.n	80056d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800565a:	4b23      	ldr	r3, [pc, #140]	; (80056e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f003 030c 	and.w	r3, r3, #12
 8005662:	2b0c      	cmp	r3, #12
 8005664:	d136      	bne.n	80056d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005666:	4b20      	ldr	r3, [pc, #128]	; (80056e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f003 0303 	and.w	r3, r3, #3
 800566e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005670:	4b1d      	ldr	r3, [pc, #116]	; (80056e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	091b      	lsrs	r3, r3, #4
 8005676:	f003 030f 	and.w	r3, r3, #15
 800567a:	3301      	adds	r3, #1
 800567c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2b03      	cmp	r3, #3
 8005682:	d10c      	bne.n	800569e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005684:	4a19      	ldr	r2, [pc, #100]	; (80056ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	fbb2 f3f3 	udiv	r3, r2, r3
 800568c:	4a16      	ldr	r2, [pc, #88]	; (80056e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800568e:	68d2      	ldr	r2, [r2, #12]
 8005690:	0a12      	lsrs	r2, r2, #8
 8005692:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005696:	fb02 f303 	mul.w	r3, r2, r3
 800569a:	617b      	str	r3, [r7, #20]
      break;
 800569c:	e00c      	b.n	80056b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800569e:	4a13      	ldr	r2, [pc, #76]	; (80056ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a6:	4a10      	ldr	r2, [pc, #64]	; (80056e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056a8:	68d2      	ldr	r2, [r2, #12]
 80056aa:	0a12      	lsrs	r2, r2, #8
 80056ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80056b0:	fb02 f303 	mul.w	r3, r2, r3
 80056b4:	617b      	str	r3, [r7, #20]
      break;
 80056b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056b8:	4b0b      	ldr	r3, [pc, #44]	; (80056e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	0e5b      	lsrs	r3, r3, #25
 80056be:	f003 0303 	and.w	r3, r3, #3
 80056c2:	3301      	adds	r3, #1
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d0:	613b      	str	r3, [r7, #16]
 80056d2:	e001      	b.n	80056d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80056d4:	2300      	movs	r3, #0
 80056d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80056d8:	693b      	ldr	r3, [r7, #16]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	371c      	adds	r7, #28
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	40021000 	.word	0x40021000
 80056ec:	00f42400 	.word	0x00f42400

080056f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056f0:	b480      	push	{r7}
 80056f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056f4:	4b03      	ldr	r3, [pc, #12]	; (8005704 <HAL_RCC_GetHCLKFreq+0x14>)
 80056f6:	681b      	ldr	r3, [r3, #0]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	200026d0 	.word	0x200026d0

08005708 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800570e:	4b1e      	ldr	r3, [pc, #120]	; (8005788 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f003 0303 	and.w	r3, r3, #3
 8005716:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005718:	4b1b      	ldr	r3, [pc, #108]	; (8005788 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	091b      	lsrs	r3, r3, #4
 800571e:	f003 030f 	and.w	r3, r3, #15
 8005722:	3301      	adds	r3, #1
 8005724:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	2b03      	cmp	r3, #3
 800572a:	d10c      	bne.n	8005746 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800572c:	4a17      	ldr	r2, [pc, #92]	; (800578c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	fbb2 f3f3 	udiv	r3, r2, r3
 8005734:	4a14      	ldr	r2, [pc, #80]	; (8005788 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005736:	68d2      	ldr	r2, [r2, #12]
 8005738:	0a12      	lsrs	r2, r2, #8
 800573a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800573e:	fb02 f303 	mul.w	r3, r2, r3
 8005742:	617b      	str	r3, [r7, #20]
    break;
 8005744:	e00c      	b.n	8005760 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005746:	4a11      	ldr	r2, [pc, #68]	; (800578c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	fbb2 f3f3 	udiv	r3, r2, r3
 800574e:	4a0e      	ldr	r2, [pc, #56]	; (8005788 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005750:	68d2      	ldr	r2, [r2, #12]
 8005752:	0a12      	lsrs	r2, r2, #8
 8005754:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005758:	fb02 f303 	mul.w	r3, r2, r3
 800575c:	617b      	str	r3, [r7, #20]
    break;
 800575e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005760:	4b09      	ldr	r3, [pc, #36]	; (8005788 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	0e5b      	lsrs	r3, r3, #25
 8005766:	f003 0303 	and.w	r3, r3, #3
 800576a:	3301      	adds	r3, #1
 800576c:	005b      	lsls	r3, r3, #1
 800576e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	fbb2 f3f3 	udiv	r3, r2, r3
 8005778:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800577a:	687b      	ldr	r3, [r7, #4]
}
 800577c:	4618      	mov	r0, r3
 800577e:	371c      	adds	r7, #28
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	40021000 	.word	0x40021000
 800578c:	00f42400 	.word	0x00f42400

08005790 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005798:	2300      	movs	r3, #0
 800579a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800579c:	2300      	movs	r3, #0
 800579e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 8098 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057ae:	2300      	movs	r3, #0
 80057b0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057b2:	4b43      	ldr	r3, [pc, #268]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10d      	bne.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057be:	4b40      	ldr	r3, [pc, #256]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c2:	4a3f      	ldr	r2, [pc, #252]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057c8:	6593      	str	r3, [r2, #88]	; 0x58
 80057ca:	4b3d      	ldr	r3, [pc, #244]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057d2:	60bb      	str	r3, [r7, #8]
 80057d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057d6:	2301      	movs	r3, #1
 80057d8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057da:	4b3a      	ldr	r3, [pc, #232]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a39      	ldr	r2, [pc, #228]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80057e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057e6:	f7fb fad9 	bl	8000d9c <HAL_GetTick>
 80057ea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057ec:	e009      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057ee:	f7fb fad5 	bl	8000d9c <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d902      	bls.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	74fb      	strb	r3, [r7, #19]
        break;
 8005800:	e005      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005802:	4b30      	ldr	r3, [pc, #192]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0ef      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800580e:	7cfb      	ldrb	r3, [r7, #19]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d159      	bne.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005814:	4b2a      	ldr	r3, [pc, #168]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800581e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d01e      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	429a      	cmp	r2, r3
 800582e:	d019      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005830:	4b23      	ldr	r3, [pc, #140]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800583a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800583c:	4b20      	ldr	r3, [pc, #128]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800583e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005842:	4a1f      	ldr	r2, [pc, #124]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800584c:	4b1c      	ldr	r3, [pc, #112]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800584e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005852:	4a1b      	ldr	r2, [pc, #108]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800585c:	4a18      	ldr	r2, [pc, #96]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b00      	cmp	r3, #0
 800586c:	d016      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800586e:	f7fb fa95 	bl	8000d9c <HAL_GetTick>
 8005872:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005874:	e00b      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005876:	f7fb fa91 	bl	8000d9c <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	f241 3288 	movw	r2, #5000	; 0x1388
 8005884:	4293      	cmp	r3, r2
 8005886:	d902      	bls.n	800588e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	74fb      	strb	r3, [r7, #19]
            break;
 800588c:	e006      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800588e:	4b0c      	ldr	r3, [pc, #48]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	2b00      	cmp	r3, #0
 800589a:	d0ec      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800589c:	7cfb      	ldrb	r3, [r7, #19]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10b      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058a2:	4b07      	ldr	r3, [pc, #28]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058b0:	4903      	ldr	r1, [pc, #12]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80058b8:	e008      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058ba:	7cfb      	ldrb	r3, [r7, #19]
 80058bc:	74bb      	strb	r3, [r7, #18]
 80058be:	e005      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80058c0:	40021000 	.word	0x40021000
 80058c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c8:	7cfb      	ldrb	r3, [r7, #19]
 80058ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058cc:	7c7b      	ldrb	r3, [r7, #17]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d105      	bne.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058d2:	4ba7      	ldr	r3, [pc, #668]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d6:	4aa6      	ldr	r2, [pc, #664]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00a      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058ea:	4ba1      	ldr	r3, [pc, #644]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f0:	f023 0203 	bic.w	r2, r3, #3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	499d      	ldr	r1, [pc, #628]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00a      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800590c:	4b98      	ldr	r3, [pc, #608]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800590e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005912:	f023 020c 	bic.w	r2, r3, #12
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	4995      	ldr	r1, [pc, #596]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800591c:	4313      	orrs	r3, r2
 800591e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0304 	and.w	r3, r3, #4
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00a      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800592e:	4b90      	ldr	r3, [pc, #576]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005934:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	498c      	ldr	r1, [pc, #560]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800593e:	4313      	orrs	r3, r2
 8005940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0308 	and.w	r3, r3, #8
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00a      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005950:	4b87      	ldr	r3, [pc, #540]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005956:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	4984      	ldr	r1, [pc, #528]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005960:	4313      	orrs	r3, r2
 8005962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0310 	and.w	r3, r3, #16
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00a      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005972:	4b7f      	ldr	r3, [pc, #508]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005978:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	695b      	ldr	r3, [r3, #20]
 8005980:	497b      	ldr	r1, [pc, #492]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005982:	4313      	orrs	r3, r2
 8005984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0320 	and.w	r3, r3, #32
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00a      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005994:	4b76      	ldr	r3, [pc, #472]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	4973      	ldr	r1, [pc, #460]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00a      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059b6:	4b6e      	ldr	r3, [pc, #440]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	496a      	ldr	r1, [pc, #424]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00a      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059d8:	4b65      	ldr	r3, [pc, #404]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	4962      	ldr	r1, [pc, #392]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00a      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059fa:	4b5d      	ldr	r3, [pc, #372]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a08:	4959      	ldr	r1, [pc, #356]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00a      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a1c:	4b54      	ldr	r3, [pc, #336]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a22:	f023 0203 	bic.w	r2, r3, #3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2a:	4951      	ldr	r1, [pc, #324]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00a      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a3e:	4b4c      	ldr	r3, [pc, #304]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4c:	4948      	ldr	r1, [pc, #288]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d015      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a60:	4b43      	ldr	r3, [pc, #268]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6e:	4940      	ldr	r1, [pc, #256]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a7e:	d105      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a80:	4b3b      	ldr	r3, [pc, #236]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	4a3a      	ldr	r2, [pc, #232]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a8a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d015      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a98:	4b35      	ldr	r3, [pc, #212]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa6:	4932      	ldr	r1, [pc, #200]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ab6:	d105      	bne.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ab8:	4b2d      	ldr	r3, [pc, #180]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	4a2c      	ldr	r2, [pc, #176]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005abe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ac2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d015      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ad0:	4b27      	ldr	r3, [pc, #156]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ade:	4924      	ldr	r1, [pc, #144]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005aee:	d105      	bne.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005af0:	4b1f      	ldr	r3, [pc, #124]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	4a1e      	ldr	r2, [pc, #120]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005af6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005afa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d015      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b08:	4b19      	ldr	r3, [pc, #100]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b16:	4916      	ldr	r1, [pc, #88]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b26:	d105      	bne.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b28:	4b11      	ldr	r3, [pc, #68]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	4a10      	ldr	r2, [pc, #64]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b32:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d019      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b40:	4b0b      	ldr	r3, [pc, #44]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4e:	4908      	ldr	r1, [pc, #32]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b5e:	d109      	bne.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b60:	4b03      	ldr	r3, [pc, #12]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	4a02      	ldr	r2, [pc, #8]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b6a:	60d3      	str	r3, [r2, #12]
 8005b6c:	e002      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005b6e:	bf00      	nop
 8005b70:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d015      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005b80:	4b29      	ldr	r3, [pc, #164]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8e:	4926      	ldr	r1, [pc, #152]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b9e:	d105      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ba0:	4b21      	ldr	r3, [pc, #132]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	4a20      	ldr	r2, [pc, #128]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005baa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d015      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005bb8:	4b1b      	ldr	r3, [pc, #108]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bbe:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bc6:	4918      	ldr	r1, [pc, #96]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd6:	d105      	bne.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005bd8:	4b13      	ldr	r3, [pc, #76]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	4a12      	ldr	r2, [pc, #72]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005be2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d015      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005bf0:	4b0d      	ldr	r3, [pc, #52]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bf6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bfe:	490a      	ldr	r1, [pc, #40]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c0e:	d105      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c10:	4b05      	ldr	r3, [pc, #20]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	4a04      	ldr	r2, [pc, #16]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c1a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005c1c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	40021000 	.word	0x40021000

08005c2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e09d      	b.n	8005d7a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d108      	bne.n	8005c58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c4e:	d009      	beq.n	8005c64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	61da      	str	r2, [r3, #28]
 8005c56:	e005      	b.n	8005c64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d106      	bne.n	8005c84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7fa ff2e 	bl	8000ae0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ca4:	d902      	bls.n	8005cac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60fb      	str	r3, [r7, #12]
 8005caa:	e002      	b.n	8005cb2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005cac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cb0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005cba:	d007      	beq.n	8005ccc <HAL_SPI_Init+0xa0>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cc4:	d002      	beq.n	8005ccc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	f003 0301 	and.w	r3, r3, #1
 8005cf0:	431a      	orrs	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	69db      	ldr	r3, [r3, #28]
 8005d00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d04:	431a      	orrs	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d0e:	ea42 0103 	orr.w	r1, r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d16:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	0c1b      	lsrs	r3, r3, #16
 8005d28:	f003 0204 	and.w	r2, r3, #4
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d30:	f003 0310 	and.w	r3, r3, #16
 8005d34:	431a      	orrs	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d3a:	f003 0308 	and.w	r3, r3, #8
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005d48:	ea42 0103 	orr.w	r1, r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	69da      	ldr	r2, [r3, #28]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b088      	sub	sp, #32
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	60f8      	str	r0, [r7, #12]
 8005d8a:	60b9      	str	r1, [r7, #8]
 8005d8c:	603b      	str	r3, [r7, #0]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d92:	2300      	movs	r3, #0
 8005d94:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d101      	bne.n	8005da4 <HAL_SPI_Transmit+0x22>
 8005da0:	2302      	movs	r3, #2
 8005da2:	e158      	b.n	8006056 <HAL_SPI_Transmit+0x2d4>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dac:	f7fa fff6 	bl	8000d9c <HAL_GetTick>
 8005db0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005db2:	88fb      	ldrh	r3, [r7, #6]
 8005db4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d002      	beq.n	8005dc8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005dc6:	e13d      	b.n	8006044 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d002      	beq.n	8005dd4 <HAL_SPI_Transmit+0x52>
 8005dce:	88fb      	ldrh	r3, [r7, #6]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d102      	bne.n	8005dda <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005dd8:	e134      	b.n	8006044 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2203      	movs	r2, #3
 8005dde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	88fa      	ldrh	r2, [r7, #6]
 8005df2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	88fa      	ldrh	r2, [r7, #6]
 8005df8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e24:	d10f      	bne.n	8005e46 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e50:	2b40      	cmp	r3, #64	; 0x40
 8005e52:	d007      	beq.n	8005e64 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e6c:	d94b      	bls.n	8005f06 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d002      	beq.n	8005e7c <HAL_SPI_Transmit+0xfa>
 8005e76:	8afb      	ldrh	r3, [r7, #22]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d13e      	bne.n	8005efa <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e80:	881a      	ldrh	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8c:	1c9a      	adds	r2, r3, #2
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ea0:	e02b      	b.n	8005efa <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d112      	bne.n	8005ed6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb4:	881a      	ldrh	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec0:	1c9a      	adds	r2, r3, #2
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ed4:	e011      	b.n	8005efa <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ed6:	f7fa ff61 	bl	8000d9c <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d803      	bhi.n	8005eee <HAL_SPI_Transmit+0x16c>
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eec:	d102      	bne.n	8005ef4 <HAL_SPI_Transmit+0x172>
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d102      	bne.n	8005efa <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ef8:	e0a4      	b.n	8006044 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1ce      	bne.n	8005ea2 <HAL_SPI_Transmit+0x120>
 8005f04:	e07c      	b.n	8006000 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d002      	beq.n	8005f14 <HAL_SPI_Transmit+0x192>
 8005f0e:	8afb      	ldrh	r3, [r7, #22]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d170      	bne.n	8005ff6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d912      	bls.n	8005f44 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f22:	881a      	ldrh	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2e:	1c9a      	adds	r2, r3, #2
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	3b02      	subs	r3, #2
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f42:	e058      	b.n	8005ff6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	330c      	adds	r3, #12
 8005f4e:	7812      	ldrb	r2, [r2, #0]
 8005f50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f56:	1c5a      	adds	r2, r3, #1
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	3b01      	subs	r3, #1
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005f6a:	e044      	b.n	8005ff6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d12b      	bne.n	8005fd2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d912      	bls.n	8005faa <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f88:	881a      	ldrh	r2, [r3, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f94:	1c9a      	adds	r2, r3, #2
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	3b02      	subs	r3, #2
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fa8:	e025      	b.n	8005ff6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	330c      	adds	r3, #12
 8005fb4:	7812      	ldrb	r2, [r2, #0]
 8005fb6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbc:	1c5a      	adds	r2, r3, #1
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fd0:	e011      	b.n	8005ff6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fd2:	f7fa fee3 	bl	8000d9c <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	683a      	ldr	r2, [r7, #0]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d803      	bhi.n	8005fea <HAL_SPI_Transmit+0x268>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fe8:	d102      	bne.n	8005ff0 <HAL_SPI_Transmit+0x26e>
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d102      	bne.n	8005ff6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ff4:	e026      	b.n	8006044 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1b5      	bne.n	8005f6c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	6839      	ldr	r1, [r7, #0]
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f000 fd4d 	bl	8006aa4 <SPI_EndRxTxTransaction>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2220      	movs	r2, #32
 8006014:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10a      	bne.n	8006034 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800601e:	2300      	movs	r3, #0
 8006020:	613b      	str	r3, [r7, #16]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	613b      	str	r3, [r7, #16]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	613b      	str	r3, [r7, #16]
 8006032:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006038:	2b00      	cmp	r3, #0
 800603a:	d002      	beq.n	8006042 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	77fb      	strb	r3, [r7, #31]
 8006040:	e000      	b.n	8006044 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006042:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006054:	7ffb      	ldrb	r3, [r7, #31]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3720      	adds	r7, #32
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
	...

08006060 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
 800606c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800606e:	2300      	movs	r3, #0
 8006070:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006078:	2b01      	cmp	r3, #1
 800607a:	d101      	bne.n	8006080 <HAL_SPI_TransmitReceive_DMA+0x20>
 800607c:	2302      	movs	r3, #2
 800607e:	e16c      	b.n	800635a <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800608e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006096:	7dbb      	ldrb	r3, [r7, #22]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d00d      	beq.n	80060b8 <HAL_SPI_TransmitReceive_DMA+0x58>
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060a2:	d106      	bne.n	80060b2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d102      	bne.n	80060b2 <HAL_SPI_TransmitReceive_DMA+0x52>
 80060ac:	7dbb      	ldrb	r3, [r7, #22]
 80060ae:	2b04      	cmp	r3, #4
 80060b0:	d002      	beq.n	80060b8 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80060b2:	2302      	movs	r3, #2
 80060b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060b6:	e14b      	b.n	8006350 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d005      	beq.n	80060ca <HAL_SPI_TransmitReceive_DMA+0x6a>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d002      	beq.n	80060ca <HAL_SPI_TransmitReceive_DMA+0x6a>
 80060c4:	887b      	ldrh	r3, [r7, #2]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d102      	bne.n	80060d0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060ce:	e13f      	b.n	8006350 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b04      	cmp	r3, #4
 80060da:	d003      	beq.n	80060e4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2205      	movs	r2, #5
 80060e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	887a      	ldrh	r2, [r7, #2]
 80060f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	887a      	ldrh	r2, [r7, #2]
 80060fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	887a      	ldrh	r2, [r7, #2]
 8006106:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	887a      	ldrh	r2, [r7, #2]
 800610e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	685a      	ldr	r2, [r3, #4]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800612c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006136:	d908      	bls.n	800614a <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006146:	605a      	str	r2, [r3, #4]
 8006148:	e06f      	b.n	800622a <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006158:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006164:	d126      	bne.n	80061b4 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10f      	bne.n	8006192 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006180:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006186:	b29b      	uxth	r3, r3
 8006188:	085b      	lsrs	r3, r3, #1
 800618a:	b29a      	uxth	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006190:	e010      	b.n	80061b4 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	685a      	ldr	r2, [r3, #4]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061a0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	085b      	lsrs	r3, r3, #1
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	3301      	adds	r3, #1
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061be:	d134      	bne.n	800622a <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80061ce:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d111      	bne.n	8006204 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	685a      	ldr	r2, [r3, #4]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061ee:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	085b      	lsrs	r3, r3, #1
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006202:	e012      	b.n	800622a <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006212:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800621a:	b29b      	uxth	r3, r3
 800621c:	085b      	lsrs	r3, r3, #1
 800621e:	b29b      	uxth	r3, r3
 8006220:	3301      	adds	r3, #1
 8006222:	b29a      	uxth	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b04      	cmp	r3, #4
 8006234:	d108      	bne.n	8006248 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800623a:	4a4a      	ldr	r2, [pc, #296]	; (8006364 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800623c:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006242:	4a49      	ldr	r2, [pc, #292]	; (8006368 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8006244:	62da      	str	r2, [r3, #44]	; 0x2c
 8006246:	e007      	b.n	8006258 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800624c:	4a47      	ldr	r2, [pc, #284]	; (800636c <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800624e:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006254:	4a46      	ldr	r2, [pc, #280]	; (8006370 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8006256:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800625c:	4a45      	ldr	r2, [pc, #276]	; (8006374 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800625e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006264:	2200      	movs	r2, #0
 8006266:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	330c      	adds	r3, #12
 8006272:	4619      	mov	r1, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006278:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006280:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006282:	f7fc fbbb 	bl	80029fc <HAL_DMA_Start_IT>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00c      	beq.n	80062a6 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006290:	f043 0210 	orr.w	r2, r3, #16
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80062a4:	e054      	b.n	8006350 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f042 0201 	orr.w	r2, r2, #1
 80062b4:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ba:	2200      	movs	r2, #0
 80062bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c2:	2200      	movs	r2, #0
 80062c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ca:	2200      	movs	r2, #0
 80062cc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062d2:	2200      	movs	r2, #0
 80062d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062de:	4619      	mov	r1, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	330c      	adds	r3, #12
 80062e6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062ec:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80062ee:	f7fc fb85 	bl	80029fc <HAL_DMA_Start_IT>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00c      	beq.n	8006312 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062fc:	f043 0210 	orr.w	r2, r3, #16
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8006310:	e01e      	b.n	8006350 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631c:	2b40      	cmp	r3, #64	; 0x40
 800631e:	d007      	beq.n	8006330 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800632e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f042 0220 	orr.w	r2, r2, #32
 800633e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f042 0202 	orr.w	r2, r2, #2
 800634e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006358:	7dfb      	ldrb	r3, [r7, #23]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3718      	adds	r7, #24
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	08006715 	.word	0x08006715
 8006368:	080065dd 	.word	0x080065dd
 800636c:	08006731 	.word	0x08006731
 8006370:	08006685 	.word	0x08006685
 8006374:	0800674d 	.word	0x0800674d

08006378 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b088      	sub	sp, #32
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	099b      	lsrs	r3, r3, #6
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10f      	bne.n	80063bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00a      	beq.n	80063bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	099b      	lsrs	r3, r3, #6
 80063aa:	f003 0301 	and.w	r3, r3, #1
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d004      	beq.n	80063bc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	4798      	blx	r3
    return;
 80063ba:	e0d7      	b.n	800656c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	085b      	lsrs	r3, r3, #1
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00a      	beq.n	80063de <HAL_SPI_IRQHandler+0x66>
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	09db      	lsrs	r3, r3, #7
 80063cc:	f003 0301 	and.w	r3, r3, #1
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d004      	beq.n	80063de <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	4798      	blx	r3
    return;
 80063dc:	e0c6      	b.n	800656c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	095b      	lsrs	r3, r3, #5
 80063e2:	f003 0301 	and.w	r3, r3, #1
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10c      	bne.n	8006404 <HAL_SPI_IRQHandler+0x8c>
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	099b      	lsrs	r3, r3, #6
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d106      	bne.n	8006404 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	0a1b      	lsrs	r3, r3, #8
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f000 80b4 	beq.w	800656c <HAL_SPI_IRQHandler+0x1f4>
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	095b      	lsrs	r3, r3, #5
 8006408:	f003 0301 	and.w	r3, r3, #1
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 80ad 	beq.w	800656c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	099b      	lsrs	r3, r3, #6
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	2b00      	cmp	r3, #0
 800641c:	d023      	beq.n	8006466 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b03      	cmp	r3, #3
 8006428:	d011      	beq.n	800644e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800642e:	f043 0204 	orr.w	r2, r3, #4
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006436:	2300      	movs	r3, #0
 8006438:	617b      	str	r3, [r7, #20]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	617b      	str	r3, [r7, #20]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	617b      	str	r3, [r7, #20]
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	e00b      	b.n	8006466 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800644e:	2300      	movs	r3, #0
 8006450:	613b      	str	r3, [r7, #16]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	613b      	str	r3, [r7, #16]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	613b      	str	r3, [r7, #16]
 8006462:	693b      	ldr	r3, [r7, #16]
        return;
 8006464:	e082      	b.n	800656c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	095b      	lsrs	r3, r3, #5
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	2b00      	cmp	r3, #0
 8006470:	d014      	beq.n	800649c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006476:	f043 0201 	orr.w	r2, r3, #1
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800647e:	2300      	movs	r3, #0
 8006480:	60fb      	str	r3, [r7, #12]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	60fb      	str	r3, [r7, #12]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006498:	601a      	str	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	0a1b      	lsrs	r3, r3, #8
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00c      	beq.n	80064c2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ac:	f043 0208 	orr.w	r2, r3, #8
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80064b4:	2300      	movs	r3, #0
 80064b6:	60bb      	str	r3, [r7, #8]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	60bb      	str	r3, [r7, #8]
 80064c0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d04f      	beq.n	800656a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	685a      	ldr	r2, [r3, #4]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80064d8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	f003 0302 	and.w	r3, r3, #2
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d104      	bne.n	80064f6 <HAL_SPI_IRQHandler+0x17e>
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d034      	beq.n	8006560 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f022 0203 	bic.w	r2, r2, #3
 8006504:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800650a:	2b00      	cmp	r3, #0
 800650c:	d011      	beq.n	8006532 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006512:	4a18      	ldr	r2, [pc, #96]	; (8006574 <HAL_SPI_IRQHandler+0x1fc>)
 8006514:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800651a:	4618      	mov	r0, r3
 800651c:	f7fc fae9 	bl	8002af2 <HAL_DMA_Abort_IT>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d005      	beq.n	8006532 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800652a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006536:	2b00      	cmp	r3, #0
 8006538:	d016      	beq.n	8006568 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800653e:	4a0d      	ldr	r2, [pc, #52]	; (8006574 <HAL_SPI_IRQHandler+0x1fc>)
 8006540:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006546:	4618      	mov	r0, r3
 8006548:	f7fc fad3 	bl	8002af2 <HAL_DMA_Abort_IT>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00a      	beq.n	8006568 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006556:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800655e:	e003      	b.n	8006568 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 f831 	bl	80065c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006566:	e000      	b.n	800656a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006568:	bf00      	nop
    return;
 800656a:	bf00      	nop
  }
}
 800656c:	3720      	adds	r7, #32
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	0800678d 	.word	0x0800678d

08006578 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e8:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065ea:	f7fa fbd7 	bl	8000d9c <HAL_GetTick>
 80065ee:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0320 	and.w	r3, r3, #32
 80065fa:	2b20      	cmp	r3, #32
 80065fc:	d03c      	beq.n	8006678 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f022 0220 	bic.w	r2, r2, #32
 800660c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10d      	bne.n	8006632 <SPI_DMAReceiveCplt+0x56>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800661e:	d108      	bne.n	8006632 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 0203 	bic.w	r2, r2, #3
 800662e:	605a      	str	r2, [r3, #4]
 8006630:	e007      	b.n	8006642 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	685a      	ldr	r2, [r3, #4]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f022 0201 	bic.w	r2, r2, #1
 8006640:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	2164      	movs	r1, #100	; 0x64
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f000 f9d4 	bl	80069f4 <SPI_EndRxTransaction>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d002      	beq.n	8006658 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2220      	movs	r2, #32
 8006656:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800666c:	2b00      	cmp	r3, #0
 800666e:	d003      	beq.n	8006678 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f7ff ffa9 	bl	80065c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006676:	e002      	b.n	800667e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f7ff ff7d 	bl	8006578 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006690:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006692:	f7fa fb83 	bl	8000d9c <HAL_GetTick>
 8006696:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0320 	and.w	r3, r3, #32
 80066a2:	2b20      	cmp	r3, #32
 80066a4:	d030      	beq.n	8006708 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f022 0220 	bic.w	r2, r2, #32
 80066b4:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	2164      	movs	r1, #100	; 0x64
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f000 f9f2 	bl	8006aa4 <SPI_EndRxTxTransaction>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d005      	beq.n	80066d2 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066ca:	f043 0220 	orr.w	r2, r3, #32
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f022 0203 	bic.w	r2, r2, #3
 80066e0:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d003      	beq.n	8006708 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f7ff ff61 	bl	80065c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006706:	e002      	b.n	800670e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f7ff ff3f 	bl	800658c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006720:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f7ff ff3c 	bl	80065a0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006728:	bf00      	nop
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f7ff ff38 	bl	80065b4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006744:	bf00      	nop
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006758:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	685a      	ldr	r2, [r3, #4]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f022 0203 	bic.w	r2, r2, #3
 8006768:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800676e:	f043 0210 	orr.w	r2, r3, #16
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f7ff ff22 	bl	80065c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006784:	bf00      	nop
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006798:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f7ff ff0d 	bl	80065c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80067ae:	bf00      	nop
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
	...

080067b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b088      	sub	sp, #32
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	603b      	str	r3, [r7, #0]
 80067c4:	4613      	mov	r3, r2
 80067c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80067c8:	f7fa fae8 	bl	8000d9c <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d0:	1a9b      	subs	r3, r3, r2
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	4413      	add	r3, r2
 80067d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80067d8:	f7fa fae0 	bl	8000d9c <HAL_GetTick>
 80067dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80067de:	4b39      	ldr	r3, [pc, #228]	; (80068c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	015b      	lsls	r3, r3, #5
 80067e4:	0d1b      	lsrs	r3, r3, #20
 80067e6:	69fa      	ldr	r2, [r7, #28]
 80067e8:	fb02 f303 	mul.w	r3, r2, r3
 80067ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067ee:	e054      	b.n	800689a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067f6:	d050      	beq.n	800689a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067f8:	f7fa fad0 	bl	8000d9c <HAL_GetTick>
 80067fc:	4602      	mov	r2, r0
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	69fa      	ldr	r2, [r7, #28]
 8006804:	429a      	cmp	r2, r3
 8006806:	d902      	bls.n	800680e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d13d      	bne.n	800688a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800681c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006826:	d111      	bne.n	800684c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006830:	d004      	beq.n	800683c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800683a:	d107      	bne.n	800684c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800684a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006854:	d10f      	bne.n	8006876 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006864:	601a      	str	r2, [r3, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006874:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e017      	b.n	80068ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006890:	2300      	movs	r3, #0
 8006892:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	3b01      	subs	r3, #1
 8006898:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	689a      	ldr	r2, [r3, #8]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	4013      	ands	r3, r2
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	bf0c      	ite	eq
 80068aa:	2301      	moveq	r3, #1
 80068ac:	2300      	movne	r3, #0
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	461a      	mov	r2, r3
 80068b2:	79fb      	ldrb	r3, [r7, #7]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d19b      	bne.n	80067f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3720      	adds	r7, #32
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	200026d0 	.word	0x200026d0

080068c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b08a      	sub	sp, #40	; 0x28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
 80068d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80068d6:	2300      	movs	r3, #0
 80068d8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80068da:	f7fa fa5f 	bl	8000d9c <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e2:	1a9b      	subs	r3, r3, r2
 80068e4:	683a      	ldr	r2, [r7, #0]
 80068e6:	4413      	add	r3, r2
 80068e8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80068ea:	f7fa fa57 	bl	8000d9c <HAL_GetTick>
 80068ee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	330c      	adds	r3, #12
 80068f6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80068f8:	4b3d      	ldr	r3, [pc, #244]	; (80069f0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	4613      	mov	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	00da      	lsls	r2, r3, #3
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	0d1b      	lsrs	r3, r3, #20
 8006908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800690a:	fb02 f303 	mul.w	r3, r2, r3
 800690e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006910:	e060      	b.n	80069d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006918:	d107      	bne.n	800692a <SPI_WaitFifoStateUntilTimeout+0x62>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d104      	bne.n	800692a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	b2db      	uxtb	r3, r3
 8006926:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006928:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006930:	d050      	beq.n	80069d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006932:	f7fa fa33 	bl	8000d9c <HAL_GetTick>
 8006936:	4602      	mov	r2, r0
 8006938:	6a3b      	ldr	r3, [r7, #32]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800693e:	429a      	cmp	r2, r3
 8006940:	d902      	bls.n	8006948 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006944:	2b00      	cmp	r3, #0
 8006946:	d13d      	bne.n	80069c4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	685a      	ldr	r2, [r3, #4]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006956:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006960:	d111      	bne.n	8006986 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800696a:	d004      	beq.n	8006976 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006974:	d107      	bne.n	8006986 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006984:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800698e:	d10f      	bne.n	80069b0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800699e:	601a      	str	r2, [r3, #0]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e010      	b.n	80069e6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d101      	bne.n	80069ce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80069ca:	2300      	movs	r3, #0
 80069cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	3b01      	subs	r3, #1
 80069d2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689a      	ldr	r2, [r3, #8]
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	4013      	ands	r3, r2
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d196      	bne.n	8006912 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3728      	adds	r7, #40	; 0x28
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	200026d0 	.word	0x200026d0

080069f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af02      	add	r7, sp, #8
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a08:	d111      	bne.n	8006a2e <SPI_EndRxTransaction+0x3a>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a12:	d004      	beq.n	8006a1e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a1c:	d107      	bne.n	8006a2e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a2c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	9300      	str	r3, [sp, #0]
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	2200      	movs	r2, #0
 8006a36:	2180      	movs	r1, #128	; 0x80
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	f7ff febd 	bl	80067b8 <SPI_WaitFlagStateUntilTimeout>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d007      	beq.n	8006a54 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a48:	f043 0220 	orr.w	r2, r3, #32
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e023      	b.n	8006a9c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a5c:	d11d      	bne.n	8006a9a <SPI_EndRxTransaction+0xa6>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a66:	d004      	beq.n	8006a72 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a70:	d113      	bne.n	8006a9a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f7ff ff22 	bl	80068c8 <SPI_WaitFifoStateUntilTimeout>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d007      	beq.n	8006a9a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a8e:	f043 0220 	orr.w	r2, r3, #32
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e000      	b.n	8006a9c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af02      	add	r7, sp, #8
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f7ff ff03 	bl	80068c8 <SPI_WaitFifoStateUntilTimeout>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d007      	beq.n	8006ad8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006acc:	f043 0220 	orr.w	r2, r3, #32
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e027      	b.n	8006b28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	9300      	str	r3, [sp, #0]
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	2180      	movs	r1, #128	; 0x80
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f7ff fe68 	bl	80067b8 <SPI_WaitFlagStateUntilTimeout>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d007      	beq.n	8006afe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006af2:	f043 0220 	orr.w	r2, r3, #32
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e014      	b.n	8006b28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	9300      	str	r3, [sp, #0]
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f7ff fedc 	bl	80068c8 <SPI_WaitFifoStateUntilTimeout>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d007      	beq.n	8006b26 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b1a:	f043 0220 	orr.w	r2, r3, #32
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e000      	b.n	8006b28 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e049      	b.n	8006bd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d106      	bne.n	8006b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7fa f80c 	bl	8000b74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2202      	movs	r2, #2
 8006b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	3304      	adds	r3, #4
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	4610      	mov	r0, r2
 8006b70:	f000 f9b2 	bl	8006ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3708      	adds	r7, #8
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
	...

08006be0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d001      	beq.n	8006bf8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e04c      	b.n	8006c92 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a26      	ldr	r2, [pc, #152]	; (8006ca0 <HAL_TIM_Base_Start+0xc0>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d022      	beq.n	8006c50 <HAL_TIM_Base_Start+0x70>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c12:	d01d      	beq.n	8006c50 <HAL_TIM_Base_Start+0x70>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a22      	ldr	r2, [pc, #136]	; (8006ca4 <HAL_TIM_Base_Start+0xc4>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d018      	beq.n	8006c50 <HAL_TIM_Base_Start+0x70>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a21      	ldr	r2, [pc, #132]	; (8006ca8 <HAL_TIM_Base_Start+0xc8>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d013      	beq.n	8006c50 <HAL_TIM_Base_Start+0x70>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a1f      	ldr	r2, [pc, #124]	; (8006cac <HAL_TIM_Base_Start+0xcc>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d00e      	beq.n	8006c50 <HAL_TIM_Base_Start+0x70>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a1e      	ldr	r2, [pc, #120]	; (8006cb0 <HAL_TIM_Base_Start+0xd0>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d009      	beq.n	8006c50 <HAL_TIM_Base_Start+0x70>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a1c      	ldr	r2, [pc, #112]	; (8006cb4 <HAL_TIM_Base_Start+0xd4>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d004      	beq.n	8006c50 <HAL_TIM_Base_Start+0x70>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a1b      	ldr	r2, [pc, #108]	; (8006cb8 <HAL_TIM_Base_Start+0xd8>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d115      	bne.n	8006c7c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	689a      	ldr	r2, [r3, #8]
 8006c56:	4b19      	ldr	r3, [pc, #100]	; (8006cbc <HAL_TIM_Base_Start+0xdc>)
 8006c58:	4013      	ands	r3, r2
 8006c5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2b06      	cmp	r3, #6
 8006c60:	d015      	beq.n	8006c8e <HAL_TIM_Base_Start+0xae>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c68:	d011      	beq.n	8006c8e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f042 0201 	orr.w	r2, r2, #1
 8006c78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c7a:	e008      	b.n	8006c8e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f042 0201 	orr.w	r2, r2, #1
 8006c8a:	601a      	str	r2, [r3, #0]
 8006c8c:	e000      	b.n	8006c90 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	40012c00 	.word	0x40012c00
 8006ca4:	40000400 	.word	0x40000400
 8006ca8:	40000800 	.word	0x40000800
 8006cac:	40000c00 	.word	0x40000c00
 8006cb0:	40013400 	.word	0x40013400
 8006cb4:	40014000 	.word	0x40014000
 8006cb8:	40015000 	.word	0x40015000
 8006cbc:	00010007 	.word	0x00010007

08006cc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d101      	bne.n	8006cdc <HAL_TIM_ConfigClockSource+0x1c>
 8006cd8:	2302      	movs	r3, #2
 8006cda:	e0ee      	b.n	8006eba <HAL_TIM_ConfigClockSource+0x1fa>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006cfa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006cfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a6b      	ldr	r2, [pc, #428]	; (8006ec4 <HAL_TIM_ConfigClockSource+0x204>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	f000 80b9 	beq.w	8006e8e <HAL_TIM_ConfigClockSource+0x1ce>
 8006d1c:	4a69      	ldr	r2, [pc, #420]	; (8006ec4 <HAL_TIM_ConfigClockSource+0x204>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	f200 80be 	bhi.w	8006ea0 <HAL_TIM_ConfigClockSource+0x1e0>
 8006d24:	4a68      	ldr	r2, [pc, #416]	; (8006ec8 <HAL_TIM_ConfigClockSource+0x208>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	f000 80b1 	beq.w	8006e8e <HAL_TIM_ConfigClockSource+0x1ce>
 8006d2c:	4a66      	ldr	r2, [pc, #408]	; (8006ec8 <HAL_TIM_ConfigClockSource+0x208>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	f200 80b6 	bhi.w	8006ea0 <HAL_TIM_ConfigClockSource+0x1e0>
 8006d34:	4a65      	ldr	r2, [pc, #404]	; (8006ecc <HAL_TIM_ConfigClockSource+0x20c>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	f000 80a9 	beq.w	8006e8e <HAL_TIM_ConfigClockSource+0x1ce>
 8006d3c:	4a63      	ldr	r2, [pc, #396]	; (8006ecc <HAL_TIM_ConfigClockSource+0x20c>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	f200 80ae 	bhi.w	8006ea0 <HAL_TIM_ConfigClockSource+0x1e0>
 8006d44:	4a62      	ldr	r2, [pc, #392]	; (8006ed0 <HAL_TIM_ConfigClockSource+0x210>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	f000 80a1 	beq.w	8006e8e <HAL_TIM_ConfigClockSource+0x1ce>
 8006d4c:	4a60      	ldr	r2, [pc, #384]	; (8006ed0 <HAL_TIM_ConfigClockSource+0x210>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	f200 80a6 	bhi.w	8006ea0 <HAL_TIM_ConfigClockSource+0x1e0>
 8006d54:	4a5f      	ldr	r2, [pc, #380]	; (8006ed4 <HAL_TIM_ConfigClockSource+0x214>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	f000 8099 	beq.w	8006e8e <HAL_TIM_ConfigClockSource+0x1ce>
 8006d5c:	4a5d      	ldr	r2, [pc, #372]	; (8006ed4 <HAL_TIM_ConfigClockSource+0x214>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	f200 809e 	bhi.w	8006ea0 <HAL_TIM_ConfigClockSource+0x1e0>
 8006d64:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006d68:	f000 8091 	beq.w	8006e8e <HAL_TIM_ConfigClockSource+0x1ce>
 8006d6c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006d70:	f200 8096 	bhi.w	8006ea0 <HAL_TIM_ConfigClockSource+0x1e0>
 8006d74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d78:	f000 8089 	beq.w	8006e8e <HAL_TIM_ConfigClockSource+0x1ce>
 8006d7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d80:	f200 808e 	bhi.w	8006ea0 <HAL_TIM_ConfigClockSource+0x1e0>
 8006d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d88:	d03e      	beq.n	8006e08 <HAL_TIM_ConfigClockSource+0x148>
 8006d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d8e:	f200 8087 	bhi.w	8006ea0 <HAL_TIM_ConfigClockSource+0x1e0>
 8006d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d96:	f000 8086 	beq.w	8006ea6 <HAL_TIM_ConfigClockSource+0x1e6>
 8006d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d9e:	d87f      	bhi.n	8006ea0 <HAL_TIM_ConfigClockSource+0x1e0>
 8006da0:	2b70      	cmp	r3, #112	; 0x70
 8006da2:	d01a      	beq.n	8006dda <HAL_TIM_ConfigClockSource+0x11a>
 8006da4:	2b70      	cmp	r3, #112	; 0x70
 8006da6:	d87b      	bhi.n	8006ea0 <HAL_TIM_ConfigClockSource+0x1e0>
 8006da8:	2b60      	cmp	r3, #96	; 0x60
 8006daa:	d050      	beq.n	8006e4e <HAL_TIM_ConfigClockSource+0x18e>
 8006dac:	2b60      	cmp	r3, #96	; 0x60
 8006dae:	d877      	bhi.n	8006ea0 <HAL_TIM_ConfigClockSource+0x1e0>
 8006db0:	2b50      	cmp	r3, #80	; 0x50
 8006db2:	d03c      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0x16e>
 8006db4:	2b50      	cmp	r3, #80	; 0x50
 8006db6:	d873      	bhi.n	8006ea0 <HAL_TIM_ConfigClockSource+0x1e0>
 8006db8:	2b40      	cmp	r3, #64	; 0x40
 8006dba:	d058      	beq.n	8006e6e <HAL_TIM_ConfigClockSource+0x1ae>
 8006dbc:	2b40      	cmp	r3, #64	; 0x40
 8006dbe:	d86f      	bhi.n	8006ea0 <HAL_TIM_ConfigClockSource+0x1e0>
 8006dc0:	2b30      	cmp	r3, #48	; 0x30
 8006dc2:	d064      	beq.n	8006e8e <HAL_TIM_ConfigClockSource+0x1ce>
 8006dc4:	2b30      	cmp	r3, #48	; 0x30
 8006dc6:	d86b      	bhi.n	8006ea0 <HAL_TIM_ConfigClockSource+0x1e0>
 8006dc8:	2b20      	cmp	r3, #32
 8006dca:	d060      	beq.n	8006e8e <HAL_TIM_ConfigClockSource+0x1ce>
 8006dcc:	2b20      	cmp	r3, #32
 8006dce:	d867      	bhi.n	8006ea0 <HAL_TIM_ConfigClockSource+0x1e0>
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d05c      	beq.n	8006e8e <HAL_TIM_ConfigClockSource+0x1ce>
 8006dd4:	2b10      	cmp	r3, #16
 8006dd6:	d05a      	beq.n	8006e8e <HAL_TIM_ConfigClockSource+0x1ce>
 8006dd8:	e062      	b.n	8006ea0 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6818      	ldr	r0, [r3, #0]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	6899      	ldr	r1, [r3, #8]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	685a      	ldr	r2, [r3, #4]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	f000 f999 	bl	8007120 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006dfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	609a      	str	r2, [r3, #8]
      break;
 8006e06:	e04f      	b.n	8006ea8 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6818      	ldr	r0, [r3, #0]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	6899      	ldr	r1, [r3, #8]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	f000 f982 	bl	8007120 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	689a      	ldr	r2, [r3, #8]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e2a:	609a      	str	r2, [r3, #8]
      break;
 8006e2c:	e03c      	b.n	8006ea8 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6818      	ldr	r0, [r3, #0]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	6859      	ldr	r1, [r3, #4]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	f000 f8f4 	bl	8007028 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2150      	movs	r1, #80	; 0x50
 8006e46:	4618      	mov	r0, r3
 8006e48:	f000 f94d 	bl	80070e6 <TIM_ITRx_SetConfig>
      break;
 8006e4c:	e02c      	b.n	8006ea8 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6818      	ldr	r0, [r3, #0]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	6859      	ldr	r1, [r3, #4]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	f000 f913 	bl	8007086 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2160      	movs	r1, #96	; 0x60
 8006e66:	4618      	mov	r0, r3
 8006e68:	f000 f93d 	bl	80070e6 <TIM_ITRx_SetConfig>
      break;
 8006e6c:	e01c      	b.n	8006ea8 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6818      	ldr	r0, [r3, #0]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	6859      	ldr	r1, [r3, #4]
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	f000 f8d4 	bl	8007028 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2140      	movs	r1, #64	; 0x40
 8006e86:	4618      	mov	r0, r3
 8006e88:	f000 f92d 	bl	80070e6 <TIM_ITRx_SetConfig>
      break;
 8006e8c:	e00c      	b.n	8006ea8 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4619      	mov	r1, r3
 8006e98:	4610      	mov	r0, r2
 8006e9a:	f000 f924 	bl	80070e6 <TIM_ITRx_SetConfig>
      break;
 8006e9e:	e003      	b.n	8006ea8 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ea4:	e000      	b.n	8006ea8 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8006ea6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	00100070 	.word	0x00100070
 8006ec8:	00100050 	.word	0x00100050
 8006ecc:	00100040 	.word	0x00100040
 8006ed0:	00100030 	.word	0x00100030
 8006ed4:	00100020 	.word	0x00100020

08006ed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a46      	ldr	r2, [pc, #280]	; (8007004 <TIM_Base_SetConfig+0x12c>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d017      	beq.n	8006f20 <TIM_Base_SetConfig+0x48>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ef6:	d013      	beq.n	8006f20 <TIM_Base_SetConfig+0x48>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a43      	ldr	r2, [pc, #268]	; (8007008 <TIM_Base_SetConfig+0x130>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d00f      	beq.n	8006f20 <TIM_Base_SetConfig+0x48>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a42      	ldr	r2, [pc, #264]	; (800700c <TIM_Base_SetConfig+0x134>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d00b      	beq.n	8006f20 <TIM_Base_SetConfig+0x48>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a41      	ldr	r2, [pc, #260]	; (8007010 <TIM_Base_SetConfig+0x138>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d007      	beq.n	8006f20 <TIM_Base_SetConfig+0x48>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a40      	ldr	r2, [pc, #256]	; (8007014 <TIM_Base_SetConfig+0x13c>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d003      	beq.n	8006f20 <TIM_Base_SetConfig+0x48>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a3f      	ldr	r2, [pc, #252]	; (8007018 <TIM_Base_SetConfig+0x140>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d108      	bne.n	8006f32 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a33      	ldr	r2, [pc, #204]	; (8007004 <TIM_Base_SetConfig+0x12c>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d023      	beq.n	8006f82 <TIM_Base_SetConfig+0xaa>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f40:	d01f      	beq.n	8006f82 <TIM_Base_SetConfig+0xaa>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a30      	ldr	r2, [pc, #192]	; (8007008 <TIM_Base_SetConfig+0x130>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d01b      	beq.n	8006f82 <TIM_Base_SetConfig+0xaa>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a2f      	ldr	r2, [pc, #188]	; (800700c <TIM_Base_SetConfig+0x134>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d017      	beq.n	8006f82 <TIM_Base_SetConfig+0xaa>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a2e      	ldr	r2, [pc, #184]	; (8007010 <TIM_Base_SetConfig+0x138>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d013      	beq.n	8006f82 <TIM_Base_SetConfig+0xaa>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a2d      	ldr	r2, [pc, #180]	; (8007014 <TIM_Base_SetConfig+0x13c>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d00f      	beq.n	8006f82 <TIM_Base_SetConfig+0xaa>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a2d      	ldr	r2, [pc, #180]	; (800701c <TIM_Base_SetConfig+0x144>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d00b      	beq.n	8006f82 <TIM_Base_SetConfig+0xaa>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a2c      	ldr	r2, [pc, #176]	; (8007020 <TIM_Base_SetConfig+0x148>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d007      	beq.n	8006f82 <TIM_Base_SetConfig+0xaa>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a2b      	ldr	r2, [pc, #172]	; (8007024 <TIM_Base_SetConfig+0x14c>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d003      	beq.n	8006f82 <TIM_Base_SetConfig+0xaa>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a26      	ldr	r2, [pc, #152]	; (8007018 <TIM_Base_SetConfig+0x140>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d108      	bne.n	8006f94 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	695b      	ldr	r3, [r3, #20]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	689a      	ldr	r2, [r3, #8]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a12      	ldr	r2, [pc, #72]	; (8007004 <TIM_Base_SetConfig+0x12c>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d013      	beq.n	8006fe8 <TIM_Base_SetConfig+0x110>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a14      	ldr	r2, [pc, #80]	; (8007014 <TIM_Base_SetConfig+0x13c>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d00f      	beq.n	8006fe8 <TIM_Base_SetConfig+0x110>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a14      	ldr	r2, [pc, #80]	; (800701c <TIM_Base_SetConfig+0x144>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d00b      	beq.n	8006fe8 <TIM_Base_SetConfig+0x110>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a13      	ldr	r2, [pc, #76]	; (8007020 <TIM_Base_SetConfig+0x148>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d007      	beq.n	8006fe8 <TIM_Base_SetConfig+0x110>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a12      	ldr	r2, [pc, #72]	; (8007024 <TIM_Base_SetConfig+0x14c>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d003      	beq.n	8006fe8 <TIM_Base_SetConfig+0x110>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a0d      	ldr	r2, [pc, #52]	; (8007018 <TIM_Base_SetConfig+0x140>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d103      	bne.n	8006ff0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	691a      	ldr	r2, [r3, #16]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	615a      	str	r2, [r3, #20]
}
 8006ff6:	bf00      	nop
 8006ff8:	3714      	adds	r7, #20
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	40012c00 	.word	0x40012c00
 8007008:	40000400 	.word	0x40000400
 800700c:	40000800 	.word	0x40000800
 8007010:	40000c00 	.word	0x40000c00
 8007014:	40013400 	.word	0x40013400
 8007018:	40015000 	.word	0x40015000
 800701c:	40014000 	.word	0x40014000
 8007020:	40014400 	.word	0x40014400
 8007024:	40014800 	.word	0x40014800

08007028 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007028:	b480      	push	{r7}
 800702a:	b087      	sub	sp, #28
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6a1b      	ldr	r3, [r3, #32]
 8007038:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6a1b      	ldr	r3, [r3, #32]
 800703e:	f023 0201 	bic.w	r2, r3, #1
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007052:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	011b      	lsls	r3, r3, #4
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	4313      	orrs	r3, r2
 800705c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	f023 030a 	bic.w	r3, r3, #10
 8007064:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	4313      	orrs	r3, r2
 800706c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	693a      	ldr	r2, [r7, #16]
 8007072:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	621a      	str	r2, [r3, #32]
}
 800707a:	bf00      	nop
 800707c:	371c      	adds	r7, #28
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007086:	b480      	push	{r7}
 8007088:	b087      	sub	sp, #28
 800708a:	af00      	add	r7, sp, #0
 800708c:	60f8      	str	r0, [r7, #12]
 800708e:	60b9      	str	r1, [r7, #8]
 8007090:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	f023 0210 	bic.w	r2, r3, #16
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6a1b      	ldr	r3, [r3, #32]
 80070a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	031b      	lsls	r3, r3, #12
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80070c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	011b      	lsls	r3, r3, #4
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	697a      	ldr	r2, [r7, #20]
 80070d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	621a      	str	r2, [r3, #32]
}
 80070da:	bf00      	nop
 80070dc:	371c      	adds	r7, #28
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b085      	sub	sp, #20
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
 80070ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80070fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007100:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4313      	orrs	r3, r2
 8007108:	f043 0307 	orr.w	r3, r3, #7
 800710c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	609a      	str	r2, [r3, #8]
}
 8007114:	bf00      	nop
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007120:	b480      	push	{r7}
 8007122:	b087      	sub	sp, #28
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
 800712c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800713a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	021a      	lsls	r2, r3, #8
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	431a      	orrs	r2, r3
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	4313      	orrs	r3, r2
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	4313      	orrs	r3, r2
 800714c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	609a      	str	r2, [r3, #8]
}
 8007154:	bf00      	nop
 8007156:	371c      	adds	r7, #28
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007170:	2b01      	cmp	r3, #1
 8007172:	d101      	bne.n	8007178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007174:	2302      	movs	r3, #2
 8007176:	e074      	b.n	8007262 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2202      	movs	r2, #2
 8007184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a34      	ldr	r2, [pc, #208]	; (8007270 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d009      	beq.n	80071b6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a33      	ldr	r2, [pc, #204]	; (8007274 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d004      	beq.n	80071b6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a31      	ldr	r2, [pc, #196]	; (8007278 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d108      	bne.n	80071c8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80071bc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80071ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	4313      	orrs	r3, r2
 80071dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a21      	ldr	r2, [pc, #132]	; (8007270 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d022      	beq.n	8007236 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071f8:	d01d      	beq.n	8007236 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a1f      	ldr	r2, [pc, #124]	; (800727c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d018      	beq.n	8007236 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a1d      	ldr	r2, [pc, #116]	; (8007280 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d013      	beq.n	8007236 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a1c      	ldr	r2, [pc, #112]	; (8007284 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d00e      	beq.n	8007236 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a15      	ldr	r2, [pc, #84]	; (8007274 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d009      	beq.n	8007236 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a18      	ldr	r2, [pc, #96]	; (8007288 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d004      	beq.n	8007236 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a11      	ldr	r2, [pc, #68]	; (8007278 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d10c      	bne.n	8007250 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800723c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	68ba      	ldr	r2, [r7, #8]
 8007244:	4313      	orrs	r3, r2
 8007246:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3714      	adds	r7, #20
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop
 8007270:	40012c00 	.word	0x40012c00
 8007274:	40013400 	.word	0x40013400
 8007278:	40015000 	.word	0x40015000
 800727c:	40000400 	.word	0x40000400
 8007280:	40000800 	.word	0x40000800
 8007284:	40000c00 	.word	0x40000c00
 8007288:	40014000 	.word	0x40014000

0800728c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800729c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80072a0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3714      	adds	r7, #20
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr

080072ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b085      	sub	sp, #20
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80072c2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80072c6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	43db      	mvns	r3, r3
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	4013      	ands	r3, r2
 80072da:	b29a      	uxth	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80072f0:	b084      	sub	sp, #16
 80072f2:	b480      	push	{r7}
 80072f4:	b083      	sub	sp, #12
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
 80072fa:	f107 0014 	add.w	r0, r7, #20
 80072fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	b004      	add	sp, #16
 8007330:	4770      	bx	lr
	...

08007334 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007334:	b480      	push	{r7}
 8007336:	b09d      	sub	sp, #116	; 0x74
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800733e:	2300      	movs	r3, #0
 8007340:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4413      	add	r3, r2
 800734e:	881b      	ldrh	r3, [r3, #0]
 8007350:	b29b      	uxth	r3, r3
 8007352:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800735a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	78db      	ldrb	r3, [r3, #3]
 8007362:	2b03      	cmp	r3, #3
 8007364:	d81f      	bhi.n	80073a6 <USB_ActivateEndpoint+0x72>
 8007366:	a201      	add	r2, pc, #4	; (adr r2, 800736c <USB_ActivateEndpoint+0x38>)
 8007368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736c:	0800737d 	.word	0x0800737d
 8007370:	08007399 	.word	0x08007399
 8007374:	080073af 	.word	0x080073af
 8007378:	0800738b 	.word	0x0800738b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800737c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007380:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007384:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007388:	e012      	b.n	80073b0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800738a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800738e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007392:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007396:	e00b      	b.n	80073b0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007398:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800739c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80073a0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80073a4:	e004      	b.n	80073b0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80073ac:	e000      	b.n	80073b0 <USB_ActivateEndpoint+0x7c>
      break;
 80073ae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	441a      	add	r2, r3
 80073ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80073be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	4413      	add	r3, r2
 80073dc:	881b      	ldrh	r3, [r3, #0]
 80073de:	b29b      	uxth	r3, r3
 80073e0:	b21b      	sxth	r3, r3
 80073e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ea:	b21a      	sxth	r2, r3
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	b21b      	sxth	r3, r3
 80073f2:	4313      	orrs	r3, r2
 80073f4:	b21b      	sxth	r3, r3
 80073f6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	441a      	add	r2, r3
 8007404:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007408:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800740c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007418:	b29b      	uxth	r3, r3
 800741a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	7b1b      	ldrb	r3, [r3, #12]
 8007420:	2b00      	cmp	r3, #0
 8007422:	f040 8149 	bne.w	80076b8 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	785b      	ldrb	r3, [r3, #1]
 800742a:	2b00      	cmp	r3, #0
 800742c:	f000 8084 	beq.w	8007538 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	61bb      	str	r3, [r7, #24]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800743a:	b29b      	uxth	r3, r3
 800743c:	461a      	mov	r2, r3
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	4413      	add	r3, r2
 8007442:	61bb      	str	r3, [r7, #24]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	00da      	lsls	r2, r3, #3
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	4413      	add	r3, r2
 800744e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007452:	617b      	str	r3, [r7, #20]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	88db      	ldrh	r3, [r3, #6]
 8007458:	085b      	lsrs	r3, r3, #1
 800745a:	b29b      	uxth	r3, r3
 800745c:	005b      	lsls	r3, r3, #1
 800745e:	b29a      	uxth	r2, r3
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	4413      	add	r3, r2
 800746e:	881b      	ldrh	r3, [r3, #0]
 8007470:	827b      	strh	r3, [r7, #18]
 8007472:	8a7b      	ldrh	r3, [r7, #18]
 8007474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007478:	2b00      	cmp	r3, #0
 800747a:	d01b      	beq.n	80074b4 <USB_ActivateEndpoint+0x180>
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4413      	add	r3, r2
 8007486:	881b      	ldrh	r3, [r3, #0]
 8007488:	b29b      	uxth	r3, r3
 800748a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800748e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007492:	823b      	strh	r3, [r7, #16]
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	441a      	add	r2, r3
 800749e:	8a3b      	ldrh	r3, [r7, #16]
 80074a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	78db      	ldrb	r3, [r3, #3]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d020      	beq.n	80074fe <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	4413      	add	r3, r2
 80074c6:	881b      	ldrh	r3, [r3, #0]
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074d2:	81bb      	strh	r3, [r7, #12]
 80074d4:	89bb      	ldrh	r3, [r7, #12]
 80074d6:	f083 0320 	eor.w	r3, r3, #32
 80074da:	81bb      	strh	r3, [r7, #12]
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	441a      	add	r2, r3
 80074e6:	89bb      	ldrh	r3, [r7, #12]
 80074e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	8013      	strh	r3, [r2, #0]
 80074fc:	e2a6      	b.n	8007a4c <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	881b      	ldrh	r3, [r3, #0]
 800750a:	b29b      	uxth	r3, r3
 800750c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007510:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007514:	81fb      	strh	r3, [r7, #14]
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	441a      	add	r2, r3
 8007520:	89fb      	ldrh	r3, [r7, #14]
 8007522:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007526:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800752a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800752e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007532:	b29b      	uxth	r3, r3
 8007534:	8013      	strh	r3, [r2, #0]
 8007536:	e289      	b.n	8007a4c <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	633b      	str	r3, [r7, #48]	; 0x30
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007542:	b29b      	uxth	r3, r3
 8007544:	461a      	mov	r2, r3
 8007546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007548:	4413      	add	r3, r2
 800754a:	633b      	str	r3, [r7, #48]	; 0x30
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	00da      	lsls	r2, r3, #3
 8007552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007554:	4413      	add	r3, r2
 8007556:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800755a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	88db      	ldrh	r3, [r3, #6]
 8007560:	085b      	lsrs	r3, r3, #1
 8007562:	b29b      	uxth	r3, r3
 8007564:	005b      	lsls	r3, r3, #1
 8007566:	b29a      	uxth	r2, r3
 8007568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007576:	b29b      	uxth	r3, r3
 8007578:	461a      	mov	r2, r3
 800757a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757c:	4413      	add	r3, r2
 800757e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	00da      	lsls	r2, r3, #3
 8007586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007588:	4413      	add	r3, r2
 800758a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800758e:	627b      	str	r3, [r7, #36]	; 0x24
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	2b3e      	cmp	r3, #62	; 0x3e
 8007596:	d918      	bls.n	80075ca <USB_ActivateEndpoint+0x296>
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	095b      	lsrs	r3, r3, #5
 800759e:	66bb      	str	r3, [r7, #104]	; 0x68
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	f003 031f 	and.w	r3, r3, #31
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d102      	bne.n	80075b2 <USB_ActivateEndpoint+0x27e>
 80075ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075ae:	3b01      	subs	r3, #1
 80075b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80075b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	029b      	lsls	r3, r3, #10
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c6:	801a      	strh	r2, [r3, #0]
 80075c8:	e029      	b.n	800761e <USB_ActivateEndpoint+0x2ea>
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d112      	bne.n	80075f8 <USB_ActivateEndpoint+0x2c4>
 80075d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d4:	881b      	ldrh	r3, [r3, #0]
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075dc:	b29a      	uxth	r2, r3
 80075de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e0:	801a      	strh	r2, [r3, #0]
 80075e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e4:	881b      	ldrh	r3, [r3, #0]
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f4:	801a      	strh	r2, [r3, #0]
 80075f6:	e012      	b.n	800761e <USB_ActivateEndpoint+0x2ea>
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	085b      	lsrs	r3, r3, #1
 80075fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	f003 0301 	and.w	r3, r3, #1
 8007608:	2b00      	cmp	r3, #0
 800760a:	d002      	beq.n	8007612 <USB_ActivateEndpoint+0x2de>
 800760c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800760e:	3301      	adds	r3, #1
 8007610:	66bb      	str	r3, [r7, #104]	; 0x68
 8007612:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007614:	b29b      	uxth	r3, r3
 8007616:	029b      	lsls	r3, r3, #10
 8007618:	b29a      	uxth	r2, r3
 800761a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4413      	add	r3, r2
 8007628:	881b      	ldrh	r3, [r3, #0]
 800762a:	847b      	strh	r3, [r7, #34]	; 0x22
 800762c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800762e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d01b      	beq.n	800766e <USB_ActivateEndpoint+0x33a>
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4413      	add	r3, r2
 8007640:	881b      	ldrh	r3, [r3, #0]
 8007642:	b29b      	uxth	r3, r3
 8007644:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800764c:	843b      	strh	r3, [r7, #32]
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	441a      	add	r2, r3
 8007658:	8c3b      	ldrh	r3, [r7, #32]
 800765a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800765e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007662:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800766a:	b29b      	uxth	r3, r3
 800766c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	4413      	add	r3, r2
 8007678:	881b      	ldrh	r3, [r3, #0]
 800767a:	b29b      	uxth	r3, r3
 800767c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007684:	83fb      	strh	r3, [r7, #30]
 8007686:	8bfb      	ldrh	r3, [r7, #30]
 8007688:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800768c:	83fb      	strh	r3, [r7, #30]
 800768e:	8bfb      	ldrh	r3, [r7, #30]
 8007690:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007694:	83fb      	strh	r3, [r7, #30]
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	441a      	add	r2, r3
 80076a0:	8bfb      	ldrh	r3, [r7, #30]
 80076a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	8013      	strh	r3, [r2, #0]
 80076b6:	e1c9      	b.n	8007a4c <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	78db      	ldrb	r3, [r3, #3]
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d11e      	bne.n	80076fe <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	4413      	add	r3, r2
 80076ca:	881b      	ldrh	r3, [r3, #0]
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076d6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	441a      	add	r2, r3
 80076e4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80076e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076f0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80076f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	8013      	strh	r3, [r2, #0]
 80076fc:	e01d      	b.n	800773a <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4413      	add	r3, r2
 8007708:	881b      	ldrh	r3, [r3, #0]
 800770a:	b29b      	uxth	r3, r3
 800770c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007714:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	441a      	add	r2, r3
 8007722:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800772a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800772e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007736:	b29b      	uxth	r3, r3
 8007738:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007744:	b29b      	uxth	r3, r3
 8007746:	461a      	mov	r2, r3
 8007748:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800774a:	4413      	add	r3, r2
 800774c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	00da      	lsls	r2, r3, #3
 8007754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007756:	4413      	add	r3, r2
 8007758:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800775c:	65bb      	str	r3, [r7, #88]	; 0x58
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	891b      	ldrh	r3, [r3, #8]
 8007762:	085b      	lsrs	r3, r3, #1
 8007764:	b29b      	uxth	r3, r3
 8007766:	005b      	lsls	r3, r3, #1
 8007768:	b29a      	uxth	r2, r3
 800776a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800776c:	801a      	strh	r2, [r3, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	657b      	str	r3, [r7, #84]	; 0x54
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007778:	b29b      	uxth	r3, r3
 800777a:	461a      	mov	r2, r3
 800777c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800777e:	4413      	add	r3, r2
 8007780:	657b      	str	r3, [r7, #84]	; 0x54
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	00da      	lsls	r2, r3, #3
 8007788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800778a:	4413      	add	r3, r2
 800778c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007790:	653b      	str	r3, [r7, #80]	; 0x50
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	895b      	ldrh	r3, [r3, #10]
 8007796:	085b      	lsrs	r3, r3, #1
 8007798:	b29b      	uxth	r3, r3
 800779a:	005b      	lsls	r3, r3, #1
 800779c:	b29a      	uxth	r2, r3
 800779e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077a0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	785b      	ldrb	r3, [r3, #1]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f040 8093 	bne.w	80078d2 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4413      	add	r3, r2
 80077b6:	881b      	ldrh	r3, [r3, #0]
 80077b8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80077bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80077c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d01b      	beq.n	8007800 <USB_ActivateEndpoint+0x4cc>
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	4413      	add	r3, r2
 80077d2:	881b      	ldrh	r3, [r3, #0]
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077de:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	441a      	add	r2, r3
 80077ea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80077ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80077f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	4413      	add	r3, r2
 800780a:	881b      	ldrh	r3, [r3, #0]
 800780c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800780e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007814:	2b00      	cmp	r3, #0
 8007816:	d01b      	beq.n	8007850 <USB_ActivateEndpoint+0x51c>
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	4413      	add	r3, r2
 8007822:	881b      	ldrh	r3, [r3, #0]
 8007824:	b29b      	uxth	r3, r3
 8007826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800782a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800782e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	441a      	add	r2, r3
 800783a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800783c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007840:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007848:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800784c:	b29b      	uxth	r3, r3
 800784e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	4413      	add	r3, r2
 800785a:	881b      	ldrh	r3, [r3, #0]
 800785c:	b29b      	uxth	r3, r3
 800785e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007866:	873b      	strh	r3, [r7, #56]	; 0x38
 8007868:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800786a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800786e:	873b      	strh	r3, [r7, #56]	; 0x38
 8007870:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007872:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007876:	873b      	strh	r3, [r7, #56]	; 0x38
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	441a      	add	r2, r3
 8007882:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800788c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007894:	b29b      	uxth	r3, r3
 8007896:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	4413      	add	r3, r2
 80078a2:	881b      	ldrh	r3, [r3, #0]
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ae:	86fb      	strh	r3, [r7, #54]	; 0x36
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	441a      	add	r2, r3
 80078ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80078bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	8013      	strh	r3, [r2, #0]
 80078d0:	e0bc      	b.n	8007a4c <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	4413      	add	r3, r2
 80078dc:	881b      	ldrh	r3, [r3, #0]
 80078de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80078e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80078e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d01d      	beq.n	800792a <USB_ActivateEndpoint+0x5f6>
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	4413      	add	r3, r2
 80078f8:	881b      	ldrh	r3, [r3, #0]
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007904:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	441a      	add	r2, r3
 8007912:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800791a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800791e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007926:	b29b      	uxth	r3, r3
 8007928:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4413      	add	r3, r2
 8007934:	881b      	ldrh	r3, [r3, #0]
 8007936:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800793a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800793e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007942:	2b00      	cmp	r3, #0
 8007944:	d01d      	beq.n	8007982 <USB_ActivateEndpoint+0x64e>
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	4413      	add	r3, r2
 8007950:	881b      	ldrh	r3, [r3, #0]
 8007952:	b29b      	uxth	r3, r3
 8007954:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800795c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	441a      	add	r2, r3
 800796a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800796e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007972:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800797a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800797e:	b29b      	uxth	r3, r3
 8007980:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	78db      	ldrb	r3, [r3, #3]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d024      	beq.n	80079d4 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4413      	add	r3, r2
 8007994:	881b      	ldrh	r3, [r3, #0]
 8007996:	b29b      	uxth	r3, r3
 8007998:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800799c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079a0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80079a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80079a8:	f083 0320 	eor.w	r3, r3, #32
 80079ac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	441a      	add	r2, r3
 80079ba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80079be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	8013      	strh	r3, [r2, #0]
 80079d2:	e01d      	b.n	8007a10 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4413      	add	r3, r2
 80079de:	881b      	ldrh	r3, [r3, #0]
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079ea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	441a      	add	r2, r3
 80079f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80079fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	4413      	add	r3, r2
 8007a1a:	881b      	ldrh	r3, [r3, #0]
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a26:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	441a      	add	r2, r3
 8007a34:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007a38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007a4c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3774      	adds	r7, #116	; 0x74
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b08d      	sub	sp, #52	; 0x34
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	7b1b      	ldrb	r3, [r3, #12]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f040 808e 	bne.w	8007b8c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	785b      	ldrb	r3, [r3, #1]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d044      	beq.n	8007b02 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	4413      	add	r3, r2
 8007a82:	881b      	ldrh	r3, [r3, #0]
 8007a84:	81bb      	strh	r3, [r7, #12]
 8007a86:	89bb      	ldrh	r3, [r7, #12]
 8007a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d01b      	beq.n	8007ac8 <USB_DeactivateEndpoint+0x6c>
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	4413      	add	r3, r2
 8007a9a:	881b      	ldrh	r3, [r3, #0]
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aa6:	817b      	strh	r3, [r7, #10]
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	441a      	add	r2, r3
 8007ab2:	897b      	ldrh	r3, [r7, #10]
 8007ab4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ab8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ac0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	881b      	ldrh	r3, [r3, #0]
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ade:	813b      	strh	r3, [r7, #8]
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	441a      	add	r2, r3
 8007aea:	893b      	ldrh	r3, [r7, #8]
 8007aec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007af0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007af4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	8013      	strh	r3, [r2, #0]
 8007b00:	e192      	b.n	8007e28 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4413      	add	r3, r2
 8007b0c:	881b      	ldrh	r3, [r3, #0]
 8007b0e:	827b      	strh	r3, [r7, #18]
 8007b10:	8a7b      	ldrh	r3, [r7, #18]
 8007b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d01b      	beq.n	8007b52 <USB_DeactivateEndpoint+0xf6>
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4413      	add	r3, r2
 8007b24:	881b      	ldrh	r3, [r3, #0]
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b30:	823b      	strh	r3, [r7, #16]
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	441a      	add	r2, r3
 8007b3c:	8a3b      	ldrh	r3, [r7, #16]
 8007b3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	4413      	add	r3, r2
 8007b5c:	881b      	ldrh	r3, [r3, #0]
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b68:	81fb      	strh	r3, [r7, #14]
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	441a      	add	r2, r3
 8007b74:	89fb      	ldrh	r3, [r7, #14]
 8007b76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	8013      	strh	r3, [r2, #0]
 8007b8a:	e14d      	b.n	8007e28 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	785b      	ldrb	r3, [r3, #1]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f040 80a5 	bne.w	8007ce0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	4413      	add	r3, r2
 8007ba0:	881b      	ldrh	r3, [r3, #0]
 8007ba2:	843b      	strh	r3, [r7, #32]
 8007ba4:	8c3b      	ldrh	r3, [r7, #32]
 8007ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d01b      	beq.n	8007be6 <USB_DeactivateEndpoint+0x18a>
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	4413      	add	r3, r2
 8007bb8:	881b      	ldrh	r3, [r3, #0]
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bc4:	83fb      	strh	r3, [r7, #30]
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	441a      	add	r2, r3
 8007bd0:	8bfb      	ldrh	r3, [r7, #30]
 8007bd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	4413      	add	r3, r2
 8007bf0:	881b      	ldrh	r3, [r3, #0]
 8007bf2:	83bb      	strh	r3, [r7, #28]
 8007bf4:	8bbb      	ldrh	r3, [r7, #28]
 8007bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d01b      	beq.n	8007c36 <USB_DeactivateEndpoint+0x1da>
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	4413      	add	r3, r2
 8007c08:	881b      	ldrh	r3, [r3, #0]
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c14:	837b      	strh	r3, [r7, #26]
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	441a      	add	r2, r3
 8007c20:	8b7b      	ldrh	r3, [r7, #26]
 8007c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	4413      	add	r3, r2
 8007c40:	881b      	ldrh	r3, [r3, #0]
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c4c:	833b      	strh	r3, [r7, #24]
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	441a      	add	r2, r3
 8007c58:	8b3b      	ldrh	r3, [r7, #24]
 8007c5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4413      	add	r3, r2
 8007c78:	881b      	ldrh	r3, [r3, #0]
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c84:	82fb      	strh	r3, [r7, #22]
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	441a      	add	r2, r3
 8007c90:	8afb      	ldrh	r3, [r7, #22]
 8007c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	4413      	add	r3, r2
 8007cb0:	881b      	ldrh	r3, [r3, #0]
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cbc:	82bb      	strh	r3, [r7, #20]
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	441a      	add	r2, r3
 8007cc8:	8abb      	ldrh	r3, [r7, #20]
 8007cca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	8013      	strh	r3, [r2, #0]
 8007cde:	e0a3      	b.n	8007e28 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	4413      	add	r3, r2
 8007cea:	881b      	ldrh	r3, [r3, #0]
 8007cec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007cee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007cf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d01b      	beq.n	8007d30 <USB_DeactivateEndpoint+0x2d4>
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	4413      	add	r3, r2
 8007d02:	881b      	ldrh	r3, [r3, #0]
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d0e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	441a      	add	r2, r3
 8007d1a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007d1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	4413      	add	r3, r2
 8007d3a:	881b      	ldrh	r3, [r3, #0]
 8007d3c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007d3e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d01b      	beq.n	8007d80 <USB_DeactivateEndpoint+0x324>
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	4413      	add	r3, r2
 8007d52:	881b      	ldrh	r3, [r3, #0]
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d5e:	853b      	strh	r3, [r7, #40]	; 0x28
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	441a      	add	r2, r3
 8007d6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007d6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	4413      	add	r3, r2
 8007d8a:	881b      	ldrh	r3, [r3, #0]
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d96:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	441a      	add	r2, r3
 8007da2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007da4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007da8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4413      	add	r3, r2
 8007dc2:	881b      	ldrh	r3, [r3, #0]
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dce:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	441a      	add	r2, r3
 8007dda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ddc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007de0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007de4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	4413      	add	r3, r2
 8007dfa:	881b      	ldrh	r3, [r3, #0]
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e06:	847b      	strh	r3, [r7, #34]	; 0x22
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	441a      	add	r2, r3
 8007e12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007e14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3734      	adds	r7, #52	; 0x34
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr

08007e36 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b0c2      	sub	sp, #264	; 0x108
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e44:	6018      	str	r0, [r3, #0]
 8007e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e4e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	785b      	ldrb	r3, [r3, #1]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	f040 867b 	bne.w	8008b58 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007e62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	699a      	ldr	r2, [r3, #24]
 8007e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d908      	bls.n	8007e90 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007e8e:	e007      	b.n	8007ea0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007e90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	699b      	ldr	r3, [r3, #24]
 8007e9c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007ea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ea4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	7b1b      	ldrb	r3, [r3, #12]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d13a      	bne.n	8007f26 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007eb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	6959      	ldr	r1, [r3, #20]
 8007ebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ec0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	88da      	ldrh	r2, [r3, #6]
 8007ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007ed2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007ed6:	6800      	ldr	r0, [r0, #0]
 8007ed8:	f001 fc1d 	bl	8009716 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007edc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ee0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	613b      	str	r3, [r7, #16]
 8007ee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007eec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	461a      	mov	r2, r3
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	4413      	add	r3, r2
 8007efe:	613b      	str	r3, [r7, #16]
 8007f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	00da      	lsls	r2, r3, #3
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	4413      	add	r3, r2
 8007f12:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007f16:	60fb      	str	r3, [r7, #12]
 8007f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	801a      	strh	r2, [r3, #0]
 8007f22:	f000 bde3 	b.w	8008aec <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	78db      	ldrb	r3, [r3, #3]
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	f040 843a 	bne.w	80087ac <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	6a1a      	ldr	r2, [r3, #32]
 8007f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	f240 83b7 	bls.w	80086c4 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4413      	add	r3, r2
 8007f70:	881b      	ldrh	r3, [r3, #0]
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f7c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007f80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	441a      	add	r2, r3
 8007f9a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007f9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fa6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	6a1a      	ldr	r2, [r3, #32]
 8007fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fc2:	1ad2      	subs	r2, r2, r3
 8007fc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007fd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	4413      	add	r3, r2
 8007fea:	881b      	ldrh	r3, [r3, #0]
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f000 81b3 	beq.w	800835e <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ffc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	633b      	str	r3, [r7, #48]	; 0x30
 8008004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008008:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	785b      	ldrb	r3, [r3, #1]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d16d      	bne.n	80080f0 <USB_EPStartXfer+0x2ba>
 8008014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008018:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008024:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800802e:	b29b      	uxth	r3, r3
 8008030:	461a      	mov	r2, r3
 8008032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008034:	4413      	add	r3, r2
 8008036:	62bb      	str	r3, [r7, #40]	; 0x28
 8008038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800803c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	00da      	lsls	r2, r3, #3
 8008046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008048:	4413      	add	r3, r2
 800804a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800804e:	627b      	str	r3, [r7, #36]	; 0x24
 8008050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008054:	2b3e      	cmp	r3, #62	; 0x3e
 8008056:	d91c      	bls.n	8008092 <USB_EPStartXfer+0x25c>
 8008058:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800805c:	095b      	lsrs	r3, r3, #5
 800805e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008066:	f003 031f 	and.w	r3, r3, #31
 800806a:	2b00      	cmp	r3, #0
 800806c:	d104      	bne.n	8008078 <USB_EPStartXfer+0x242>
 800806e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008072:	3b01      	subs	r3, #1
 8008074:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008078:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800807c:	b29b      	uxth	r3, r3
 800807e:	029b      	lsls	r3, r3, #10
 8008080:	b29b      	uxth	r3, r3
 8008082:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008086:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800808a:	b29a      	uxth	r2, r3
 800808c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808e:	801a      	strh	r2, [r3, #0]
 8008090:	e053      	b.n	800813a <USB_EPStartXfer+0x304>
 8008092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008096:	2b00      	cmp	r3, #0
 8008098:	d112      	bne.n	80080c0 <USB_EPStartXfer+0x28a>
 800809a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809c:	881b      	ldrh	r3, [r3, #0]
 800809e:	b29b      	uxth	r3, r3
 80080a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a8:	801a      	strh	r2, [r3, #0]
 80080aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ac:	881b      	ldrh	r3, [r3, #0]
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080bc:	801a      	strh	r2, [r3, #0]
 80080be:	e03c      	b.n	800813a <USB_EPStartXfer+0x304>
 80080c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080c4:	085b      	lsrs	r3, r3, #1
 80080c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80080ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080ce:	f003 0301 	and.w	r3, r3, #1
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d004      	beq.n	80080e0 <USB_EPStartXfer+0x2aa>
 80080d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80080da:	3301      	adds	r3, #1
 80080dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80080e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	029b      	lsls	r3, r3, #10
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ec:	801a      	strh	r2, [r3, #0]
 80080ee:	e024      	b.n	800813a <USB_EPStartXfer+0x304>
 80080f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	785b      	ldrb	r3, [r3, #1]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d11c      	bne.n	800813a <USB_EPStartXfer+0x304>
 8008100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008104:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800810e:	b29b      	uxth	r3, r3
 8008110:	461a      	mov	r2, r3
 8008112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008114:	4413      	add	r3, r2
 8008116:	633b      	str	r3, [r7, #48]	; 0x30
 8008118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800811c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	00da      	lsls	r2, r3, #3
 8008126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008128:	4413      	add	r3, r2
 800812a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800812e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008134:	b29a      	uxth	r2, r3
 8008136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008138:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800813a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800813e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	895b      	ldrh	r3, [r3, #10]
 8008146:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800814a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800814e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	6959      	ldr	r1, [r3, #20]
 8008156:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800815a:	b29b      	uxth	r3, r3
 800815c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008160:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008164:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008168:	6800      	ldr	r0, [r0, #0]
 800816a:	f001 fad4 	bl	8009716 <USB_WritePMA>
            ep->xfer_buff += len;
 800816e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	695a      	ldr	r2, [r3, #20]
 800817a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800817e:	441a      	add	r2, r3
 8008180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008184:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800818c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008190:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	6a1a      	ldr	r2, [r3, #32]
 8008198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800819c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d90f      	bls.n	80081c8 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 80081a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	6a1a      	ldr	r2, [r3, #32]
 80081b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081b8:	1ad2      	subs	r2, r2, r3
 80081ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	621a      	str	r2, [r3, #32]
 80081c6:	e00e      	b.n	80081e6 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80081c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	6a1b      	ldr	r3, [r3, #32]
 80081d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80081d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2200      	movs	r2, #0
 80081e4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80081e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	785b      	ldrb	r3, [r3, #1]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d16d      	bne.n	80082d2 <USB_EPStartXfer+0x49c>
 80081f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	61bb      	str	r3, [r7, #24]
 8008202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008206:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008210:	b29b      	uxth	r3, r3
 8008212:	461a      	mov	r2, r3
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	4413      	add	r3, r2
 8008218:	61bb      	str	r3, [r7, #24]
 800821a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800821e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	00da      	lsls	r2, r3, #3
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	4413      	add	r3, r2
 800822c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008230:	617b      	str	r3, [r7, #20]
 8008232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008236:	2b3e      	cmp	r3, #62	; 0x3e
 8008238:	d91c      	bls.n	8008274 <USB_EPStartXfer+0x43e>
 800823a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800823e:	095b      	lsrs	r3, r3, #5
 8008240:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008248:	f003 031f 	and.w	r3, r3, #31
 800824c:	2b00      	cmp	r3, #0
 800824e:	d104      	bne.n	800825a <USB_EPStartXfer+0x424>
 8008250:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008254:	3b01      	subs	r3, #1
 8008256:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800825a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800825e:	b29b      	uxth	r3, r3
 8008260:	029b      	lsls	r3, r3, #10
 8008262:	b29b      	uxth	r3, r3
 8008264:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008268:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800826c:	b29a      	uxth	r2, r3
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	801a      	strh	r2, [r3, #0]
 8008272:	e059      	b.n	8008328 <USB_EPStartXfer+0x4f2>
 8008274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008278:	2b00      	cmp	r3, #0
 800827a:	d112      	bne.n	80082a2 <USB_EPStartXfer+0x46c>
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	881b      	ldrh	r3, [r3, #0]
 8008280:	b29b      	uxth	r3, r3
 8008282:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008286:	b29a      	uxth	r2, r3
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	801a      	strh	r2, [r3, #0]
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	881b      	ldrh	r3, [r3, #0]
 8008290:	b29b      	uxth	r3, r3
 8008292:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008296:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800829a:	b29a      	uxth	r2, r3
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	801a      	strh	r2, [r3, #0]
 80082a0:	e042      	b.n	8008328 <USB_EPStartXfer+0x4f2>
 80082a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082a6:	085b      	lsrs	r3, r3, #1
 80082a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80082ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082b0:	f003 0301 	and.w	r3, r3, #1
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d004      	beq.n	80082c2 <USB_EPStartXfer+0x48c>
 80082b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082bc:	3301      	adds	r3, #1
 80082be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80082c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	029b      	lsls	r3, r3, #10
 80082ca:	b29a      	uxth	r2, r3
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	801a      	strh	r2, [r3, #0]
 80082d0:	e02a      	b.n	8008328 <USB_EPStartXfer+0x4f2>
 80082d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	785b      	ldrb	r3, [r3, #1]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d122      	bne.n	8008328 <USB_EPStartXfer+0x4f2>
 80082e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	623b      	str	r3, [r7, #32]
 80082ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	461a      	mov	r2, r3
 8008300:	6a3b      	ldr	r3, [r7, #32]
 8008302:	4413      	add	r3, r2
 8008304:	623b      	str	r3, [r7, #32]
 8008306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800830a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	00da      	lsls	r2, r3, #3
 8008314:	6a3b      	ldr	r3, [r7, #32]
 8008316:	4413      	add	r3, r2
 8008318:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800831c:	61fb      	str	r3, [r7, #28]
 800831e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008322:	b29a      	uxth	r2, r3
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800832c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	891b      	ldrh	r3, [r3, #8]
 8008334:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800833c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	6959      	ldr	r1, [r3, #20]
 8008344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008348:	b29b      	uxth	r3, r3
 800834a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800834e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008352:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008356:	6800      	ldr	r0, [r0, #0]
 8008358:	f001 f9dd 	bl	8009716 <USB_WritePMA>
 800835c:	e3c6      	b.n	8008aec <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800835e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	785b      	ldrb	r3, [r3, #1]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d16d      	bne.n	800844a <USB_EPStartXfer+0x614>
 800836e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008372:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	64bb      	str	r3, [r7, #72]	; 0x48
 800837a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800837e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008388:	b29b      	uxth	r3, r3
 800838a:	461a      	mov	r2, r3
 800838c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800838e:	4413      	add	r3, r2
 8008390:	64bb      	str	r3, [r7, #72]	; 0x48
 8008392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008396:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	00da      	lsls	r2, r3, #3
 80083a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083a2:	4413      	add	r3, r2
 80083a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80083a8:	647b      	str	r3, [r7, #68]	; 0x44
 80083aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083ae:	2b3e      	cmp	r3, #62	; 0x3e
 80083b0:	d91c      	bls.n	80083ec <USB_EPStartXfer+0x5b6>
 80083b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083b6:	095b      	lsrs	r3, r3, #5
 80083b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80083bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083c0:	f003 031f 	and.w	r3, r3, #31
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d104      	bne.n	80083d2 <USB_EPStartXfer+0x59c>
 80083c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80083cc:	3b01      	subs	r3, #1
 80083ce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80083d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	029b      	lsls	r3, r3, #10
 80083da:	b29b      	uxth	r3, r3
 80083dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083e4:	b29a      	uxth	r2, r3
 80083e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083e8:	801a      	strh	r2, [r3, #0]
 80083ea:	e059      	b.n	80084a0 <USB_EPStartXfer+0x66a>
 80083ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d112      	bne.n	800841a <USB_EPStartXfer+0x5e4>
 80083f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083f6:	881b      	ldrh	r3, [r3, #0]
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083fe:	b29a      	uxth	r2, r3
 8008400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008402:	801a      	strh	r2, [r3, #0]
 8008404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008406:	881b      	ldrh	r3, [r3, #0]
 8008408:	b29b      	uxth	r3, r3
 800840a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800840e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008412:	b29a      	uxth	r2, r3
 8008414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008416:	801a      	strh	r2, [r3, #0]
 8008418:	e042      	b.n	80084a0 <USB_EPStartXfer+0x66a>
 800841a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800841e:	085b      	lsrs	r3, r3, #1
 8008420:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008428:	f003 0301 	and.w	r3, r3, #1
 800842c:	2b00      	cmp	r3, #0
 800842e:	d004      	beq.n	800843a <USB_EPStartXfer+0x604>
 8008430:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008434:	3301      	adds	r3, #1
 8008436:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800843a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800843e:	b29b      	uxth	r3, r3
 8008440:	029b      	lsls	r3, r3, #10
 8008442:	b29a      	uxth	r2, r3
 8008444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008446:	801a      	strh	r2, [r3, #0]
 8008448:	e02a      	b.n	80084a0 <USB_EPStartXfer+0x66a>
 800844a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800844e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	785b      	ldrb	r3, [r3, #1]
 8008456:	2b01      	cmp	r3, #1
 8008458:	d122      	bne.n	80084a0 <USB_EPStartXfer+0x66a>
 800845a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800845e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	653b      	str	r3, [r7, #80]	; 0x50
 8008466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800846a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008474:	b29b      	uxth	r3, r3
 8008476:	461a      	mov	r2, r3
 8008478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800847a:	4413      	add	r3, r2
 800847c:	653b      	str	r3, [r7, #80]	; 0x50
 800847e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	00da      	lsls	r2, r3, #3
 800848c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800848e:	4413      	add	r3, r2
 8008490:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008494:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008496:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800849a:	b29a      	uxth	r2, r3
 800849c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800849e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80084a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	891b      	ldrh	r3, [r3, #8]
 80084ac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80084b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	6959      	ldr	r1, [r3, #20]
 80084bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80084c6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80084ca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80084ce:	6800      	ldr	r0, [r0, #0]
 80084d0:	f001 f921 	bl	8009716 <USB_WritePMA>
            ep->xfer_buff += len;
 80084d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	695a      	ldr	r2, [r3, #20]
 80084e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084e4:	441a      	add	r2, r3
 80084e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80084f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	6a1a      	ldr	r2, [r3, #32]
 80084fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008502:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	429a      	cmp	r2, r3
 800850c:	d90f      	bls.n	800852e <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800850e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008512:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	6a1a      	ldr	r2, [r3, #32]
 800851a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800851e:	1ad2      	subs	r2, r2, r3
 8008520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008524:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	621a      	str	r2, [r3, #32]
 800852c:	e00e      	b.n	800854c <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800852e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008532:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	6a1b      	ldr	r3, [r3, #32]
 800853a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800853e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008542:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2200      	movs	r2, #0
 800854a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800854c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008550:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	643b      	str	r3, [r7, #64]	; 0x40
 8008558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800855c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	785b      	ldrb	r3, [r3, #1]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d16d      	bne.n	8008644 <USB_EPStartXfer+0x80e>
 8008568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800856c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	63bb      	str	r3, [r7, #56]	; 0x38
 8008574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008578:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008582:	b29b      	uxth	r3, r3
 8008584:	461a      	mov	r2, r3
 8008586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008588:	4413      	add	r3, r2
 800858a:	63bb      	str	r3, [r7, #56]	; 0x38
 800858c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008590:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	00da      	lsls	r2, r3, #3
 800859a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859c:	4413      	add	r3, r2
 800859e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80085a2:	637b      	str	r3, [r7, #52]	; 0x34
 80085a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085a8:	2b3e      	cmp	r3, #62	; 0x3e
 80085aa:	d91c      	bls.n	80085e6 <USB_EPStartXfer+0x7b0>
 80085ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085b0:	095b      	lsrs	r3, r3, #5
 80085b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80085b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085ba:	f003 031f 	and.w	r3, r3, #31
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d104      	bne.n	80085cc <USB_EPStartXfer+0x796>
 80085c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085c6:	3b01      	subs	r3, #1
 80085c8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80085cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	029b      	lsls	r3, r3, #10
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085de:	b29a      	uxth	r2, r3
 80085e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e2:	801a      	strh	r2, [r3, #0]
 80085e4:	e053      	b.n	800868e <USB_EPStartXfer+0x858>
 80085e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d112      	bne.n	8008614 <USB_EPStartXfer+0x7de>
 80085ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085f0:	881b      	ldrh	r3, [r3, #0]
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085fc:	801a      	strh	r2, [r3, #0]
 80085fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008600:	881b      	ldrh	r3, [r3, #0]
 8008602:	b29b      	uxth	r3, r3
 8008604:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008608:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800860c:	b29a      	uxth	r2, r3
 800860e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008610:	801a      	strh	r2, [r3, #0]
 8008612:	e03c      	b.n	800868e <USB_EPStartXfer+0x858>
 8008614:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008618:	085b      	lsrs	r3, r3, #1
 800861a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800861e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008622:	f003 0301 	and.w	r3, r3, #1
 8008626:	2b00      	cmp	r3, #0
 8008628:	d004      	beq.n	8008634 <USB_EPStartXfer+0x7fe>
 800862a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800862e:	3301      	adds	r3, #1
 8008630:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008638:	b29b      	uxth	r3, r3
 800863a:	029b      	lsls	r3, r3, #10
 800863c:	b29a      	uxth	r2, r3
 800863e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008640:	801a      	strh	r2, [r3, #0]
 8008642:	e024      	b.n	800868e <USB_EPStartXfer+0x858>
 8008644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	785b      	ldrb	r3, [r3, #1]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d11c      	bne.n	800868e <USB_EPStartXfer+0x858>
 8008654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008658:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008662:	b29b      	uxth	r3, r3
 8008664:	461a      	mov	r2, r3
 8008666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008668:	4413      	add	r3, r2
 800866a:	643b      	str	r3, [r7, #64]	; 0x40
 800866c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	00da      	lsls	r2, r3, #3
 800867a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800867c:	4413      	add	r3, r2
 800867e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008682:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008688:	b29a      	uxth	r2, r3
 800868a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800868c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800868e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008692:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	895b      	ldrh	r3, [r3, #10]
 800869a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800869e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	6959      	ldr	r1, [r3, #20]
 80086aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80086b4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80086b8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80086bc:	6800      	ldr	r0, [r0, #0]
 80086be:	f001 f82a 	bl	8009716 <USB_WritePMA>
 80086c2:	e213      	b.n	8008aec <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80086c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	6a1b      	ldr	r3, [r3, #32]
 80086d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80086d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	4413      	add	r3, r2
 80086ee:	881b      	ldrh	r3, [r3, #0]
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80086f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086fa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80086fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008702:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800870c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	441a      	add	r2, r3
 8008718:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800871c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008720:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008724:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800872c:	b29b      	uxth	r3, r3
 800872e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008734:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800873c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008740:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800874a:	b29b      	uxth	r3, r3
 800874c:	461a      	mov	r2, r3
 800874e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008750:	4413      	add	r3, r2
 8008752:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008758:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	00da      	lsls	r2, r3, #3
 8008762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008764:	4413      	add	r3, r2
 8008766:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800876a:	65bb      	str	r3, [r7, #88]	; 0x58
 800876c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008770:	b29a      	uxth	r2, r3
 8008772:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008774:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800877a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	891b      	ldrh	r3, [r3, #8]
 8008782:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800878a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	6959      	ldr	r1, [r3, #20]
 8008792:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008796:	b29b      	uxth	r3, r3
 8008798:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800879c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80087a0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80087a4:	6800      	ldr	r0, [r0, #0]
 80087a6:	f000 ffb6 	bl	8009716 <USB_WritePMA>
 80087aa:	e19f      	b.n	8008aec <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80087ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	6a1a      	ldr	r2, [r3, #32]
 80087b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087bc:	1ad2      	subs	r2, r2, r3
 80087be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80087ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	4413      	add	r3, r2
 80087e4:	881b      	ldrh	r3, [r3, #0]
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f000 80bc 	beq.w	800896a <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80087f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	673b      	str	r3, [r7, #112]	; 0x70
 80087fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	785b      	ldrb	r3, [r3, #1]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d16d      	bne.n	80088ea <USB_EPStartXfer+0xab4>
 800880e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008812:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	66bb      	str	r3, [r7, #104]	; 0x68
 800881a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800881e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008828:	b29b      	uxth	r3, r3
 800882a:	461a      	mov	r2, r3
 800882c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800882e:	4413      	add	r3, r2
 8008830:	66bb      	str	r3, [r7, #104]	; 0x68
 8008832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008836:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	00da      	lsls	r2, r3, #3
 8008840:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008842:	4413      	add	r3, r2
 8008844:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008848:	667b      	str	r3, [r7, #100]	; 0x64
 800884a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800884e:	2b3e      	cmp	r3, #62	; 0x3e
 8008850:	d91c      	bls.n	800888c <USB_EPStartXfer+0xa56>
 8008852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008856:	095b      	lsrs	r3, r3, #5
 8008858:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800885c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008860:	f003 031f 	and.w	r3, r3, #31
 8008864:	2b00      	cmp	r3, #0
 8008866:	d104      	bne.n	8008872 <USB_EPStartXfer+0xa3c>
 8008868:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800886c:	3b01      	subs	r3, #1
 800886e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008872:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008876:	b29b      	uxth	r3, r3
 8008878:	029b      	lsls	r3, r3, #10
 800887a:	b29b      	uxth	r3, r3
 800887c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008880:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008884:	b29a      	uxth	r2, r3
 8008886:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008888:	801a      	strh	r2, [r3, #0]
 800888a:	e053      	b.n	8008934 <USB_EPStartXfer+0xafe>
 800888c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008890:	2b00      	cmp	r3, #0
 8008892:	d112      	bne.n	80088ba <USB_EPStartXfer+0xa84>
 8008894:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008896:	881b      	ldrh	r3, [r3, #0]
 8008898:	b29b      	uxth	r3, r3
 800889a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800889e:	b29a      	uxth	r2, r3
 80088a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088a2:	801a      	strh	r2, [r3, #0]
 80088a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088a6:	881b      	ldrh	r3, [r3, #0]
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088b6:	801a      	strh	r2, [r3, #0]
 80088b8:	e03c      	b.n	8008934 <USB_EPStartXfer+0xafe>
 80088ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088be:	085b      	lsrs	r3, r3, #1
 80088c0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80088c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088c8:	f003 0301 	and.w	r3, r3, #1
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d004      	beq.n	80088da <USB_EPStartXfer+0xaa4>
 80088d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80088d4:	3301      	adds	r3, #1
 80088d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80088da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80088de:	b29b      	uxth	r3, r3
 80088e0:	029b      	lsls	r3, r3, #10
 80088e2:	b29a      	uxth	r2, r3
 80088e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088e6:	801a      	strh	r2, [r3, #0]
 80088e8:	e024      	b.n	8008934 <USB_EPStartXfer+0xafe>
 80088ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	785b      	ldrb	r3, [r3, #1]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d11c      	bne.n	8008934 <USB_EPStartXfer+0xafe>
 80088fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008908:	b29b      	uxth	r3, r3
 800890a:	461a      	mov	r2, r3
 800890c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800890e:	4413      	add	r3, r2
 8008910:	673b      	str	r3, [r7, #112]	; 0x70
 8008912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	00da      	lsls	r2, r3, #3
 8008920:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008922:	4413      	add	r3, r2
 8008924:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008928:	66fb      	str	r3, [r7, #108]	; 0x6c
 800892a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800892e:	b29a      	uxth	r2, r3
 8008930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008932:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	895b      	ldrh	r3, [r3, #10]
 8008940:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	6959      	ldr	r1, [r3, #20]
 8008950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008954:	b29b      	uxth	r3, r3
 8008956:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800895a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800895e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008962:	6800      	ldr	r0, [r0, #0]
 8008964:	f000 fed7 	bl	8009716 <USB_WritePMA>
 8008968:	e0c0      	b.n	8008aec <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800896a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800896e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	785b      	ldrb	r3, [r3, #1]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d16d      	bne.n	8008a56 <USB_EPStartXfer+0xc20>
 800897a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800897e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800898a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008994:	b29b      	uxth	r3, r3
 8008996:	461a      	mov	r2, r3
 8008998:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800899a:	4413      	add	r3, r2
 800899c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800899e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	00da      	lsls	r2, r3, #3
 80089ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80089ae:	4413      	add	r3, r2
 80089b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80089b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80089b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089ba:	2b3e      	cmp	r3, #62	; 0x3e
 80089bc:	d91c      	bls.n	80089f8 <USB_EPStartXfer+0xbc2>
 80089be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089c2:	095b      	lsrs	r3, r3, #5
 80089c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80089c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089cc:	f003 031f 	and.w	r3, r3, #31
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d104      	bne.n	80089de <USB_EPStartXfer+0xba8>
 80089d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80089d8:	3b01      	subs	r3, #1
 80089da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80089de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	029b      	lsls	r3, r3, #10
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089f4:	801a      	strh	r2, [r3, #0]
 80089f6:	e05f      	b.n	8008ab8 <USB_EPStartXfer+0xc82>
 80089f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d112      	bne.n	8008a26 <USB_EPStartXfer+0xbf0>
 8008a00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a02:	881b      	ldrh	r3, [r3, #0]
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a0a:	b29a      	uxth	r2, r3
 8008a0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a0e:	801a      	strh	r2, [r3, #0]
 8008a10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a12:	881b      	ldrh	r3, [r3, #0]
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a1e:	b29a      	uxth	r2, r3
 8008a20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a22:	801a      	strh	r2, [r3, #0]
 8008a24:	e048      	b.n	8008ab8 <USB_EPStartXfer+0xc82>
 8008a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a2a:	085b      	lsrs	r3, r3, #1
 8008a2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a34:	f003 0301 	and.w	r3, r3, #1
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d004      	beq.n	8008a46 <USB_EPStartXfer+0xc10>
 8008a3c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008a40:	3301      	adds	r3, #1
 8008a42:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008a46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	029b      	lsls	r3, r3, #10
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a52:	801a      	strh	r2, [r3, #0]
 8008a54:	e030      	b.n	8008ab8 <USB_EPStartXfer+0xc82>
 8008a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	785b      	ldrb	r3, [r3, #1]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d128      	bne.n	8008ab8 <USB_EPStartXfer+0xc82>
 8008a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	461a      	mov	r2, r3
 8008a86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a8a:	4413      	add	r3, r2
 8008a8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	00da      	lsls	r2, r3, #3
 8008a9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008aa2:	4413      	add	r3, r2
 8008aa4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008aa8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008ab6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008abc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	891b      	ldrh	r3, [r3, #8]
 8008ac4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008acc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	6959      	ldr	r1, [r3, #20]
 8008ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008ade:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008ae2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008ae6:	6800      	ldr	r0, [r0, #0]
 8008ae8:	f000 fe15 	bl	8009716 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008af0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008afa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	4413      	add	r3, r2
 8008b06:	881b      	ldrh	r3, [r3, #0]
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b12:	817b      	strh	r3, [r7, #10]
 8008b14:	897b      	ldrh	r3, [r7, #10]
 8008b16:	f083 0310 	eor.w	r3, r3, #16
 8008b1a:	817b      	strh	r3, [r7, #10]
 8008b1c:	897b      	ldrh	r3, [r7, #10]
 8008b1e:	f083 0320 	eor.w	r3, r3, #32
 8008b22:	817b      	strh	r3, [r7, #10]
 8008b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	441a      	add	r2, r3
 8008b3e:	897b      	ldrh	r3, [r7, #10]
 8008b40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	8013      	strh	r3, [r2, #0]
 8008b54:	f000 bc9f 	b.w	8009496 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	7b1b      	ldrb	r3, [r3, #12]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	f040 80ae 	bne.w	8008cc6 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008b6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	699a      	ldr	r2, [r3, #24]
 8008b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d917      	bls.n	8008bb6 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8008b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	691b      	ldr	r3, [r3, #16]
 8008b92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8008b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	699a      	ldr	r2, [r3, #24]
 8008ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ba6:	1ad2      	subs	r2, r2, r3
 8008ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	619a      	str	r2, [r3, #24]
 8008bb4:	e00e      	b.n	8008bd4 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8008bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8008bc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008bd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008be2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008be6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008bf8:	4413      	add	r3, r2
 8008bfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	00da      	lsls	r2, r3, #3
 8008c0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c10:	4413      	add	r3, r2
 8008c12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008c16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c1e:	2b3e      	cmp	r3, #62	; 0x3e
 8008c20:	d91d      	bls.n	8008c5e <USB_EPStartXfer+0xe28>
 8008c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c26:	095b      	lsrs	r3, r3, #5
 8008c28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c30:	f003 031f 	and.w	r3, r3, #31
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d104      	bne.n	8008c42 <USB_EPStartXfer+0xe0c>
 8008c38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008c42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	029b      	lsls	r3, r3, #10
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c5a:	801a      	strh	r2, [r3, #0]
 8008c5c:	e3e1      	b.n	8009422 <USB_EPStartXfer+0x15ec>
 8008c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d116      	bne.n	8008c94 <USB_EPStartXfer+0xe5e>
 8008c66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c6a:	881b      	ldrh	r3, [r3, #0]
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c72:	b29a      	uxth	r2, r3
 8008c74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c78:	801a      	strh	r2, [r3, #0]
 8008c7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c7e:	881b      	ldrh	r3, [r3, #0]
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c8a:	b29a      	uxth	r2, r3
 8008c8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c90:	801a      	strh	r2, [r3, #0]
 8008c92:	e3c6      	b.n	8009422 <USB_EPStartXfer+0x15ec>
 8008c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c98:	085b      	lsrs	r3, r3, #1
 8008c9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ca2:	f003 0301 	and.w	r3, r3, #1
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d004      	beq.n	8008cb4 <USB_EPStartXfer+0xe7e>
 8008caa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008cae:	3301      	adds	r3, #1
 8008cb0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008cb4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	029b      	lsls	r3, r3, #10
 8008cbc:	b29a      	uxth	r2, r3
 8008cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008cc2:	801a      	strh	r2, [r3, #0]
 8008cc4:	e3ad      	b.n	8009422 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008cc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	78db      	ldrb	r3, [r3, #3]
 8008cd2:	2b02      	cmp	r3, #2
 8008cd4:	f040 8200 	bne.w	80090d8 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	785b      	ldrb	r3, [r3, #1]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f040 8091 	bne.w	8008e0c <USB_EPStartXfer+0xfd6>
 8008cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	461a      	mov	r2, r3
 8008d0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d0e:	4413      	add	r3, r2
 8008d10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	00da      	lsls	r2, r3, #3
 8008d22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d26:	4413      	add	r3, r2
 8008d28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008d2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	2b3e      	cmp	r3, #62	; 0x3e
 8008d3e:	d925      	bls.n	8008d8c <USB_EPStartXfer+0xf56>
 8008d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	691b      	ldr	r3, [r3, #16]
 8008d4c:	095b      	lsrs	r3, r3, #5
 8008d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008d52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	691b      	ldr	r3, [r3, #16]
 8008d5e:	f003 031f 	and.w	r3, r3, #31
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d104      	bne.n	8008d70 <USB_EPStartXfer+0xf3a>
 8008d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	029b      	lsls	r3, r3, #10
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d82:	b29a      	uxth	r2, r3
 8008d84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d88:	801a      	strh	r2, [r3, #0]
 8008d8a:	e074      	b.n	8008e76 <USB_EPStartXfer+0x1040>
 8008d8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d116      	bne.n	8008dca <USB_EPStartXfer+0xf94>
 8008d9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008da0:	881b      	ldrh	r3, [r3, #0]
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008dae:	801a      	strh	r2, [r3, #0]
 8008db0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008db4:	881b      	ldrh	r3, [r3, #0]
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008dc6:	801a      	strh	r2, [r3, #0]
 8008dc8:	e055      	b.n	8008e76 <USB_EPStartXfer+0x1040>
 8008dca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	085b      	lsrs	r3, r3, #1
 8008dd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008de0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	691b      	ldr	r3, [r3, #16]
 8008de8:	f003 0301 	and.w	r3, r3, #1
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d004      	beq.n	8008dfa <USB_EPStartXfer+0xfc4>
 8008df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008df4:	3301      	adds	r3, #1
 8008df6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	029b      	lsls	r3, r3, #10
 8008e02:	b29a      	uxth	r2, r3
 8008e04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e08:	801a      	strh	r2, [r3, #0]
 8008e0a:	e034      	b.n	8008e76 <USB_EPStartXfer+0x1040>
 8008e0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	785b      	ldrb	r3, [r3, #1]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d12c      	bne.n	8008e76 <USB_EPStartXfer+0x1040>
 8008e1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e40:	4413      	add	r3, r2
 8008e42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	00da      	lsls	r2, r3, #3
 8008e54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e58:	4413      	add	r3, r2
 8008e5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008e5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	691b      	ldr	r3, [r3, #16]
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008e74:	801a      	strh	r2, [r3, #0]
 8008e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	785b      	ldrb	r3, [r3, #1]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f040 8091 	bne.w	8008fb8 <USB_EPStartXfer+0x1182>
 8008e96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ea8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008eba:	4413      	add	r3, r2
 8008ebc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ec4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	00da      	lsls	r2, r3, #3
 8008ece:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ed2:	4413      	add	r3, r2
 8008ed4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008ed8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008edc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ee0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	691b      	ldr	r3, [r3, #16]
 8008ee8:	2b3e      	cmp	r3, #62	; 0x3e
 8008eea:	d925      	bls.n	8008f38 <USB_EPStartXfer+0x1102>
 8008eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	095b      	lsrs	r3, r3, #5
 8008efa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	691b      	ldr	r3, [r3, #16]
 8008f0a:	f003 031f 	and.w	r3, r3, #31
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d104      	bne.n	8008f1c <USB_EPStartXfer+0x10e6>
 8008f12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f16:	3b01      	subs	r3, #1
 8008f18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	029b      	lsls	r3, r3, #10
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f2e:	b29a      	uxth	r2, r3
 8008f30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f34:	801a      	strh	r2, [r3, #0]
 8008f36:	e06d      	b.n	8009014 <USB_EPStartXfer+0x11de>
 8008f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	691b      	ldr	r3, [r3, #16]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d116      	bne.n	8008f76 <USB_EPStartXfer+0x1140>
 8008f48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f4c:	881b      	ldrh	r3, [r3, #0]
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f54:	b29a      	uxth	r2, r3
 8008f56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f5a:	801a      	strh	r2, [r3, #0]
 8008f5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f60:	881b      	ldrh	r3, [r3, #0]
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f6c:	b29a      	uxth	r2, r3
 8008f6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f72:	801a      	strh	r2, [r3, #0]
 8008f74:	e04e      	b.n	8009014 <USB_EPStartXfer+0x11de>
 8008f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	691b      	ldr	r3, [r3, #16]
 8008f82:	085b      	lsrs	r3, r3, #1
 8008f84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	691b      	ldr	r3, [r3, #16]
 8008f94:	f003 0301 	and.w	r3, r3, #1
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d004      	beq.n	8008fa6 <USB_EPStartXfer+0x1170>
 8008f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	029b      	lsls	r3, r3, #10
 8008fae:	b29a      	uxth	r2, r3
 8008fb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008fb4:	801a      	strh	r2, [r3, #0]
 8008fb6:	e02d      	b.n	8009014 <USB_EPStartXfer+0x11de>
 8008fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	785b      	ldrb	r3, [r3, #1]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d125      	bne.n	8009014 <USB_EPStartXfer+0x11de>
 8008fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fcc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	461a      	mov	r2, r3
 8008fda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008fde:	4413      	add	r3, r2
 8008fe0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	00da      	lsls	r2, r3, #3
 8008ff2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008ff6:	4413      	add	r3, r2
 8008ff8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008ffc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009004:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	691b      	ldr	r3, [r3, #16]
 800900c:	b29a      	uxth	r2, r3
 800900e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009012:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009018:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	69db      	ldr	r3, [r3, #28]
 8009020:	2b00      	cmp	r3, #0
 8009022:	f000 81fe 	beq.w	8009422 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800902a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	4413      	add	r3, r2
 8009040:	881b      	ldrh	r3, [r3, #0]
 8009042:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009046:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800904a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800904e:	2b00      	cmp	r3, #0
 8009050:	d005      	beq.n	800905e <USB_EPStartXfer+0x1228>
 8009052:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800905a:	2b00      	cmp	r3, #0
 800905c:	d10d      	bne.n	800907a <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800905e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009066:	2b00      	cmp	r3, #0
 8009068:	f040 81db 	bne.w	8009422 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800906c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009074:	2b00      	cmp	r3, #0
 8009076:	f040 81d4 	bne.w	8009422 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800907a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800907e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	4413      	add	r3, r2
 8009094:	881b      	ldrh	r3, [r3, #0]
 8009096:	b29b      	uxth	r3, r3
 8009098:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800909c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090a0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80090a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	441a      	add	r2, r3
 80090be:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80090c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	8013      	strh	r3, [r2, #0]
 80090d6:	e1a4      	b.n	8009422 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80090d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	78db      	ldrb	r3, [r3, #3]
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	f040 819a 	bne.w	800941e <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80090ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	699a      	ldr	r2, [r3, #24]
 80090f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	691b      	ldr	r3, [r3, #16]
 8009102:	429a      	cmp	r2, r3
 8009104:	d917      	bls.n	8009136 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8009106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800910a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8009116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800911a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	699a      	ldr	r2, [r3, #24]
 8009122:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009126:	1ad2      	subs	r2, r2, r3
 8009128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800912c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	619a      	str	r2, [r3, #24]
 8009134:	e00e      	b.n	8009154 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8009136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800913a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	699b      	ldr	r3, [r3, #24]
 8009142:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800914a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2200      	movs	r2, #0
 8009152:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	785b      	ldrb	r3, [r3, #1]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d178      	bne.n	8009256 <USB_EPStartXfer+0x1420>
 8009164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009168:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009176:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009180:	b29b      	uxth	r3, r3
 8009182:	461a      	mov	r2, r3
 8009184:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009188:	4413      	add	r3, r2
 800918a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800918e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	00da      	lsls	r2, r3, #3
 800919c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80091a0:	4413      	add	r3, r2
 80091a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80091a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80091aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091ae:	2b3e      	cmp	r3, #62	; 0x3e
 80091b0:	d91d      	bls.n	80091ee <USB_EPStartXfer+0x13b8>
 80091b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091b6:	095b      	lsrs	r3, r3, #5
 80091b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80091bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091c0:	f003 031f 	and.w	r3, r3, #31
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d104      	bne.n	80091d2 <USB_EPStartXfer+0x139c>
 80091c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091cc:	3b01      	subs	r3, #1
 80091ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80091d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	029b      	lsls	r3, r3, #10
 80091da:	b29b      	uxth	r3, r3
 80091dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091e4:	b29a      	uxth	r2, r3
 80091e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091ea:	801a      	strh	r2, [r3, #0]
 80091ec:	e064      	b.n	80092b8 <USB_EPStartXfer+0x1482>
 80091ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d116      	bne.n	8009224 <USB_EPStartXfer+0x13ee>
 80091f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091fa:	881b      	ldrh	r3, [r3, #0]
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009202:	b29a      	uxth	r2, r3
 8009204:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009208:	801a      	strh	r2, [r3, #0]
 800920a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800920e:	881b      	ldrh	r3, [r3, #0]
 8009210:	b29b      	uxth	r3, r3
 8009212:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009216:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800921a:	b29a      	uxth	r2, r3
 800921c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009220:	801a      	strh	r2, [r3, #0]
 8009222:	e049      	b.n	80092b8 <USB_EPStartXfer+0x1482>
 8009224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009228:	085b      	lsrs	r3, r3, #1
 800922a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800922e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009232:	f003 0301 	and.w	r3, r3, #1
 8009236:	2b00      	cmp	r3, #0
 8009238:	d004      	beq.n	8009244 <USB_EPStartXfer+0x140e>
 800923a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800923e:	3301      	adds	r3, #1
 8009240:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009244:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009248:	b29b      	uxth	r3, r3
 800924a:	029b      	lsls	r3, r3, #10
 800924c:	b29a      	uxth	r2, r3
 800924e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009252:	801a      	strh	r2, [r3, #0]
 8009254:	e030      	b.n	80092b8 <USB_EPStartXfer+0x1482>
 8009256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800925a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	785b      	ldrb	r3, [r3, #1]
 8009262:	2b01      	cmp	r3, #1
 8009264:	d128      	bne.n	80092b8 <USB_EPStartXfer+0x1482>
 8009266:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800926a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009278:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009282:	b29b      	uxth	r3, r3
 8009284:	461a      	mov	r2, r3
 8009286:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800928a:	4413      	add	r3, r2
 800928c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	00da      	lsls	r2, r3, #3
 800929e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80092a2:	4413      	add	r3, r2
 80092a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80092a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80092ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092b0:	b29a      	uxth	r2, r3
 80092b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80092b6:	801a      	strh	r2, [r3, #0]
 80092b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80092c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	785b      	ldrb	r3, [r3, #1]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d178      	bne.n	80093c8 <USB_EPStartXfer+0x1592>
 80092d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80092e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	461a      	mov	r2, r3
 80092f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80092fa:	4413      	add	r3, r2
 80092fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009304:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	00da      	lsls	r2, r3, #3
 800930e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009312:	4413      	add	r3, r2
 8009314:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009318:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800931c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009320:	2b3e      	cmp	r3, #62	; 0x3e
 8009322:	d91d      	bls.n	8009360 <USB_EPStartXfer+0x152a>
 8009324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009328:	095b      	lsrs	r3, r3, #5
 800932a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800932e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009332:	f003 031f 	and.w	r3, r3, #31
 8009336:	2b00      	cmp	r3, #0
 8009338:	d104      	bne.n	8009344 <USB_EPStartXfer+0x150e>
 800933a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800933e:	3b01      	subs	r3, #1
 8009340:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009344:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009348:	b29b      	uxth	r3, r3
 800934a:	029b      	lsls	r3, r3, #10
 800934c:	b29b      	uxth	r3, r3
 800934e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009356:	b29a      	uxth	r2, r3
 8009358:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800935c:	801a      	strh	r2, [r3, #0]
 800935e:	e060      	b.n	8009422 <USB_EPStartXfer+0x15ec>
 8009360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009364:	2b00      	cmp	r3, #0
 8009366:	d116      	bne.n	8009396 <USB_EPStartXfer+0x1560>
 8009368:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800936c:	881b      	ldrh	r3, [r3, #0]
 800936e:	b29b      	uxth	r3, r3
 8009370:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009374:	b29a      	uxth	r2, r3
 8009376:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800937a:	801a      	strh	r2, [r3, #0]
 800937c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009380:	881b      	ldrh	r3, [r3, #0]
 8009382:	b29b      	uxth	r3, r3
 8009384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800938c:	b29a      	uxth	r2, r3
 800938e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009392:	801a      	strh	r2, [r3, #0]
 8009394:	e045      	b.n	8009422 <USB_EPStartXfer+0x15ec>
 8009396:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800939a:	085b      	lsrs	r3, r3, #1
 800939c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80093a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093a4:	f003 0301 	and.w	r3, r3, #1
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d004      	beq.n	80093b6 <USB_EPStartXfer+0x1580>
 80093ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80093b0:	3301      	adds	r3, #1
 80093b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80093b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	029b      	lsls	r3, r3, #10
 80093be:	b29a      	uxth	r2, r3
 80093c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80093c4:	801a      	strh	r2, [r3, #0]
 80093c6:	e02c      	b.n	8009422 <USB_EPStartXfer+0x15ec>
 80093c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	785b      	ldrb	r3, [r3, #1]
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d124      	bne.n	8009422 <USB_EPStartXfer+0x15ec>
 80093d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	461a      	mov	r2, r3
 80093ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80093ee:	4413      	add	r3, r2
 80093f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80093f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	00da      	lsls	r2, r3, #3
 8009402:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009406:	4413      	add	r3, r2
 8009408:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800940c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009410:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009414:	b29a      	uxth	r2, r3
 8009416:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800941a:	801a      	strh	r2, [r3, #0]
 800941c:	e001      	b.n	8009422 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800941e:	2301      	movs	r3, #1
 8009420:	e03a      	b.n	8009498 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009426:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	4413      	add	r3, r2
 800943c:	881b      	ldrh	r3, [r3, #0]
 800943e:	b29b      	uxth	r3, r3
 8009440:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009448:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800944c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009450:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009454:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009458:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800945c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009460:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009468:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	441a      	add	r2, r3
 800947e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009482:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009486:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800948a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800948e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009492:	b29b      	uxth	r3, r3
 8009494:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80094a2:	b480      	push	{r7}
 80094a4:	b085      	sub	sp, #20
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
 80094aa:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	785b      	ldrb	r3, [r3, #1]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d020      	beq.n	80094f6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	4413      	add	r3, r2
 80094be:	881b      	ldrh	r3, [r3, #0]
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094ca:	81bb      	strh	r3, [r7, #12]
 80094cc:	89bb      	ldrh	r3, [r7, #12]
 80094ce:	f083 0310 	eor.w	r3, r3, #16
 80094d2:	81bb      	strh	r3, [r7, #12]
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	441a      	add	r2, r3
 80094de:	89bb      	ldrh	r3, [r7, #12]
 80094e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	8013      	strh	r3, [r2, #0]
 80094f4:	e01f      	b.n	8009536 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	4413      	add	r3, r2
 8009500:	881b      	ldrh	r3, [r3, #0]
 8009502:	b29b      	uxth	r3, r3
 8009504:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800950c:	81fb      	strh	r3, [r7, #14]
 800950e:	89fb      	ldrh	r3, [r7, #14]
 8009510:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009514:	81fb      	strh	r3, [r7, #14]
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	441a      	add	r2, r3
 8009520:	89fb      	ldrh	r3, [r7, #14]
 8009522:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009526:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800952a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800952e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009532:	b29b      	uxth	r3, r3
 8009534:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009536:	2300      	movs	r3, #0
}
 8009538:	4618      	mov	r0, r3
 800953a:	3714      	adds	r7, #20
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009544:	b480      	push	{r7}
 8009546:	b087      	sub	sp, #28
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	7b1b      	ldrb	r3, [r3, #12]
 8009552:	2b00      	cmp	r3, #0
 8009554:	f040 809d 	bne.w	8009692 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	785b      	ldrb	r3, [r3, #1]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d04c      	beq.n	80095fa <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	4413      	add	r3, r2
 800956a:	881b      	ldrh	r3, [r3, #0]
 800956c:	823b      	strh	r3, [r7, #16]
 800956e:	8a3b      	ldrh	r3, [r7, #16]
 8009570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009574:	2b00      	cmp	r3, #0
 8009576:	d01b      	beq.n	80095b0 <USB_EPClearStall+0x6c>
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	4413      	add	r3, r2
 8009582:	881b      	ldrh	r3, [r3, #0]
 8009584:	b29b      	uxth	r3, r3
 8009586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800958a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800958e:	81fb      	strh	r3, [r7, #14]
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	441a      	add	r2, r3
 800959a:	89fb      	ldrh	r3, [r7, #14]
 800959c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	78db      	ldrb	r3, [r3, #3]
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d06c      	beq.n	8009692 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	4413      	add	r3, r2
 80095c2:	881b      	ldrh	r3, [r3, #0]
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095ce:	81bb      	strh	r3, [r7, #12]
 80095d0:	89bb      	ldrh	r3, [r7, #12]
 80095d2:	f083 0320 	eor.w	r3, r3, #32
 80095d6:	81bb      	strh	r3, [r7, #12]
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	441a      	add	r2, r3
 80095e2:	89bb      	ldrh	r3, [r7, #12]
 80095e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	8013      	strh	r3, [r2, #0]
 80095f8:	e04b      	b.n	8009692 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80095fa:	687a      	ldr	r2, [r7, #4]
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	4413      	add	r3, r2
 8009604:	881b      	ldrh	r3, [r3, #0]
 8009606:	82fb      	strh	r3, [r7, #22]
 8009608:	8afb      	ldrh	r3, [r7, #22]
 800960a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800960e:	2b00      	cmp	r3, #0
 8009610:	d01b      	beq.n	800964a <USB_EPClearStall+0x106>
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4413      	add	r3, r2
 800961c:	881b      	ldrh	r3, [r3, #0]
 800961e:	b29b      	uxth	r3, r3
 8009620:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009628:	82bb      	strh	r3, [r7, #20]
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	441a      	add	r2, r3
 8009634:	8abb      	ldrh	r3, [r7, #20]
 8009636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800963a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800963e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009646:	b29b      	uxth	r3, r3
 8009648:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	4413      	add	r3, r2
 8009654:	881b      	ldrh	r3, [r3, #0]
 8009656:	b29b      	uxth	r3, r3
 8009658:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800965c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009660:	827b      	strh	r3, [r7, #18]
 8009662:	8a7b      	ldrh	r3, [r7, #18]
 8009664:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009668:	827b      	strh	r3, [r7, #18]
 800966a:	8a7b      	ldrh	r3, [r7, #18]
 800966c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009670:	827b      	strh	r3, [r7, #18]
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	441a      	add	r2, r3
 800967c:	8a7b      	ldrh	r3, [r7, #18]
 800967e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800968a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800968e:	b29b      	uxth	r3, r3
 8009690:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	371c      	adds	r7, #28
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	460b      	mov	r3, r1
 80096aa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80096ac:	78fb      	ldrb	r3, [r7, #3]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d103      	bne.n	80096ba <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2280      	movs	r2, #128	; 0x80
 80096b6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096e0:	b29a      	uxth	r2, r3
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	370c      	adds	r7, #12
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr

080096f6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80096f6:	b480      	push	{r7}
 80096f8:	b085      	sub	sp, #20
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009704:	b29b      	uxth	r3, r3
 8009706:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009708:	68fb      	ldr	r3, [r7, #12]
}
 800970a:	4618      	mov	r0, r3
 800970c:	3714      	adds	r7, #20
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr

08009716 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009716:	b480      	push	{r7}
 8009718:	b08d      	sub	sp, #52	; 0x34
 800971a:	af00      	add	r7, sp, #0
 800971c:	60f8      	str	r0, [r7, #12]
 800971e:	60b9      	str	r1, [r7, #8]
 8009720:	4611      	mov	r1, r2
 8009722:	461a      	mov	r2, r3
 8009724:	460b      	mov	r3, r1
 8009726:	80fb      	strh	r3, [r7, #6]
 8009728:	4613      	mov	r3, r2
 800972a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800972c:	88bb      	ldrh	r3, [r7, #4]
 800972e:	3301      	adds	r3, #1
 8009730:	085b      	lsrs	r3, r3, #1
 8009732:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800973c:	88fa      	ldrh	r2, [r7, #6]
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	4413      	add	r3, r2
 8009742:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009746:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009748:	6a3b      	ldr	r3, [r7, #32]
 800974a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800974c:	e01b      	b.n	8009786 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800974e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009756:	3301      	adds	r3, #1
 8009758:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800975a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	b29b      	uxth	r3, r3
 8009760:	021b      	lsls	r3, r3, #8
 8009762:	b29b      	uxth	r3, r3
 8009764:	461a      	mov	r2, r3
 8009766:	69bb      	ldr	r3, [r7, #24]
 8009768:	4313      	orrs	r3, r2
 800976a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	b29a      	uxth	r2, r3
 8009770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009772:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009776:	3302      	adds	r3, #2
 8009778:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800977a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977c:	3301      	adds	r3, #1
 800977e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009782:	3b01      	subs	r3, #1
 8009784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009788:	2b00      	cmp	r3, #0
 800978a:	d1e0      	bne.n	800974e <USB_WritePMA+0x38>
  }
}
 800978c:	bf00      	nop
 800978e:	bf00      	nop
 8009790:	3734      	adds	r7, #52	; 0x34
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr

0800979a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800979a:	b480      	push	{r7}
 800979c:	b08b      	sub	sp, #44	; 0x2c
 800979e:	af00      	add	r7, sp, #0
 80097a0:	60f8      	str	r0, [r7, #12]
 80097a2:	60b9      	str	r1, [r7, #8]
 80097a4:	4611      	mov	r1, r2
 80097a6:	461a      	mov	r2, r3
 80097a8:	460b      	mov	r3, r1
 80097aa:	80fb      	strh	r3, [r7, #6]
 80097ac:	4613      	mov	r3, r2
 80097ae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80097b0:	88bb      	ldrh	r3, [r7, #4]
 80097b2:	085b      	lsrs	r3, r3, #1
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80097c0:	88fa      	ldrh	r2, [r7, #6]
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	4413      	add	r3, r2
 80097c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097ca:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80097cc:	69bb      	ldr	r3, [r7, #24]
 80097ce:	627b      	str	r3, [r7, #36]	; 0x24
 80097d0:	e018      	b.n	8009804 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80097d2:	6a3b      	ldr	r3, [r7, #32]
 80097d4:	881b      	ldrh	r3, [r3, #0]
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80097da:	6a3b      	ldr	r3, [r7, #32]
 80097dc:	3302      	adds	r3, #2
 80097de:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	b2da      	uxtb	r2, r3
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80097e8:	69fb      	ldr	r3, [r7, #28]
 80097ea:	3301      	adds	r3, #1
 80097ec:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	0a1b      	lsrs	r3, r3, #8
 80097f2:	b2da      	uxtb	r2, r3
 80097f4:	69fb      	ldr	r3, [r7, #28]
 80097f6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	3301      	adds	r3, #1
 80097fc:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80097fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009800:	3b01      	subs	r3, #1
 8009802:	627b      	str	r3, [r7, #36]	; 0x24
 8009804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009806:	2b00      	cmp	r3, #0
 8009808:	d1e3      	bne.n	80097d2 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800980a:	88bb      	ldrh	r3, [r7, #4]
 800980c:	f003 0301 	and.w	r3, r3, #1
 8009810:	b29b      	uxth	r3, r3
 8009812:	2b00      	cmp	r3, #0
 8009814:	d007      	beq.n	8009826 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8009816:	6a3b      	ldr	r3, [r7, #32]
 8009818:	881b      	ldrh	r3, [r3, #0]
 800981a:	b29b      	uxth	r3, r3
 800981c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	b2da      	uxtb	r2, r3
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	701a      	strb	r2, [r3, #0]
  }
}
 8009826:	bf00      	nop
 8009828:	372c      	adds	r7, #44	; 0x2c
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr

08009832 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009832:	b580      	push	{r7, lr}
 8009834:	b084      	sub	sp, #16
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
 800983a:	460b      	mov	r3, r1
 800983c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800983e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009842:	f002 f8a7 	bl	800b994 <USBD_static_malloc>
 8009846:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d105      	bne.n	800985a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2200      	movs	r2, #0
 8009852:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009856:	2302      	movs	r3, #2
 8009858:	e066      	b.n	8009928 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	68fa      	ldr	r2, [r7, #12]
 800985e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	7c1b      	ldrb	r3, [r3, #16]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d119      	bne.n	800989e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800986a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800986e:	2202      	movs	r2, #2
 8009870:	2181      	movs	r1, #129	; 0x81
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f001 ff33 	bl	800b6de <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2201      	movs	r2, #1
 800987c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800987e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009882:	2202      	movs	r2, #2
 8009884:	2101      	movs	r1, #1
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f001 ff29 	bl	800b6de <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2201      	movs	r2, #1
 8009890:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2210      	movs	r2, #16
 8009898:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800989c:	e016      	b.n	80098cc <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800989e:	2340      	movs	r3, #64	; 0x40
 80098a0:	2202      	movs	r2, #2
 80098a2:	2181      	movs	r1, #129	; 0x81
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f001 ff1a 	bl	800b6de <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2201      	movs	r2, #1
 80098ae:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80098b0:	2340      	movs	r3, #64	; 0x40
 80098b2:	2202      	movs	r2, #2
 80098b4:	2101      	movs	r1, #1
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f001 ff11 	bl	800b6de <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2201      	movs	r2, #1
 80098c0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2210      	movs	r2, #16
 80098c8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80098cc:	2308      	movs	r3, #8
 80098ce:	2203      	movs	r2, #3
 80098d0:	2182      	movs	r1, #130	; 0x82
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f001 ff03 	bl	800b6de <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2200      	movs	r2, #0
 80098f6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	7c1b      	ldrb	r3, [r3, #16]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d109      	bne.n	8009916 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009908:	f44f 7300 	mov.w	r3, #512	; 0x200
 800990c:	2101      	movs	r1, #1
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f001 ffd5 	bl	800b8be <USBD_LL_PrepareReceive>
 8009914:	e007      	b.n	8009926 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800991c:	2340      	movs	r3, #64	; 0x40
 800991e:	2101      	movs	r1, #1
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f001 ffcc 	bl	800b8be <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009926:	2300      	movs	r3, #0
}
 8009928:	4618      	mov	r0, r3
 800992a:	3710      	adds	r7, #16
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	460b      	mov	r3, r1
 800993a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800993c:	2181      	movs	r1, #129	; 0x81
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f001 fef3 	bl	800b72a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800994a:	2101      	movs	r1, #1
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f001 feec 	bl	800b72a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2200      	movs	r2, #0
 8009956:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800995a:	2182      	movs	r1, #130	; 0x82
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f001 fee4 	bl	800b72a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009978:	2b00      	cmp	r3, #0
 800997a:	d00e      	beq.n	800999a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800998c:	4618      	mov	r0, r3
 800998e:	f002 f80f 	bl	800b9b0 <USBD_static_free>
    pdev->pClassData = NULL;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2200      	movs	r2, #0
 8009996:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800999a:	2300      	movs	r3, #0
}
 800999c:	4618      	mov	r0, r3
 800999e:	3708      	adds	r7, #8
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b086      	sub	sp, #24
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80099b4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80099b6:	2300      	movs	r3, #0
 80099b8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80099ba:	2300      	movs	r3, #0
 80099bc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80099be:	2300      	movs	r3, #0
 80099c0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d101      	bne.n	80099cc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80099c8:	2303      	movs	r3, #3
 80099ca:	e0af      	b.n	8009b2c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d03f      	beq.n	8009a58 <USBD_CDC_Setup+0xb4>
 80099d8:	2b20      	cmp	r3, #32
 80099da:	f040 809f 	bne.w	8009b1c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	88db      	ldrh	r3, [r3, #6]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d02e      	beq.n	8009a44 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	b25b      	sxtb	r3, r3
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	da16      	bge.n	8009a1e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	683a      	ldr	r2, [r7, #0]
 80099fa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80099fc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80099fe:	683a      	ldr	r2, [r7, #0]
 8009a00:	88d2      	ldrh	r2, [r2, #6]
 8009a02:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	88db      	ldrh	r3, [r3, #6]
 8009a08:	2b07      	cmp	r3, #7
 8009a0a:	bf28      	it	cs
 8009a0c:	2307      	movcs	r3, #7
 8009a0e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	89fa      	ldrh	r2, [r7, #14]
 8009a14:	4619      	mov	r1, r3
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f001 fa9f 	bl	800af5a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009a1c:	e085      	b.n	8009b2a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	785a      	ldrb	r2, [r3, #1]
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	88db      	ldrh	r3, [r3, #6]
 8009a2c:	b2da      	uxtb	r2, r3
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009a34:	6939      	ldr	r1, [r7, #16]
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	88db      	ldrh	r3, [r3, #6]
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f001 fab8 	bl	800afb2 <USBD_CtlPrepareRx>
      break;
 8009a42:	e072      	b.n	8009b2a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	683a      	ldr	r2, [r7, #0]
 8009a4e:	7850      	ldrb	r0, [r2, #1]
 8009a50:	2200      	movs	r2, #0
 8009a52:	6839      	ldr	r1, [r7, #0]
 8009a54:	4798      	blx	r3
      break;
 8009a56:	e068      	b.n	8009b2a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	785b      	ldrb	r3, [r3, #1]
 8009a5c:	2b0b      	cmp	r3, #11
 8009a5e:	d852      	bhi.n	8009b06 <USBD_CDC_Setup+0x162>
 8009a60:	a201      	add	r2, pc, #4	; (adr r2, 8009a68 <USBD_CDC_Setup+0xc4>)
 8009a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a66:	bf00      	nop
 8009a68:	08009a99 	.word	0x08009a99
 8009a6c:	08009b15 	.word	0x08009b15
 8009a70:	08009b07 	.word	0x08009b07
 8009a74:	08009b07 	.word	0x08009b07
 8009a78:	08009b07 	.word	0x08009b07
 8009a7c:	08009b07 	.word	0x08009b07
 8009a80:	08009b07 	.word	0x08009b07
 8009a84:	08009b07 	.word	0x08009b07
 8009a88:	08009b07 	.word	0x08009b07
 8009a8c:	08009b07 	.word	0x08009b07
 8009a90:	08009ac3 	.word	0x08009ac3
 8009a94:	08009aed 	.word	0x08009aed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	2b03      	cmp	r3, #3
 8009aa2:	d107      	bne.n	8009ab4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009aa4:	f107 030a 	add.w	r3, r7, #10
 8009aa8:	2202      	movs	r2, #2
 8009aaa:	4619      	mov	r1, r3
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f001 fa54 	bl	800af5a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ab2:	e032      	b.n	8009b1a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009ab4:	6839      	ldr	r1, [r7, #0]
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f001 f9de 	bl	800ae78 <USBD_CtlError>
            ret = USBD_FAIL;
 8009abc:	2303      	movs	r3, #3
 8009abe:	75fb      	strb	r3, [r7, #23]
          break;
 8009ac0:	e02b      	b.n	8009b1a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	2b03      	cmp	r3, #3
 8009acc:	d107      	bne.n	8009ade <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009ace:	f107 030d 	add.w	r3, r7, #13
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f001 fa3f 	bl	800af5a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009adc:	e01d      	b.n	8009b1a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009ade:	6839      	ldr	r1, [r7, #0]
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f001 f9c9 	bl	800ae78 <USBD_CtlError>
            ret = USBD_FAIL;
 8009ae6:	2303      	movs	r3, #3
 8009ae8:	75fb      	strb	r3, [r7, #23]
          break;
 8009aea:	e016      	b.n	8009b1a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	2b03      	cmp	r3, #3
 8009af6:	d00f      	beq.n	8009b18 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009af8:	6839      	ldr	r1, [r7, #0]
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f001 f9bc 	bl	800ae78 <USBD_CtlError>
            ret = USBD_FAIL;
 8009b00:	2303      	movs	r3, #3
 8009b02:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009b04:	e008      	b.n	8009b18 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009b06:	6839      	ldr	r1, [r7, #0]
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f001 f9b5 	bl	800ae78 <USBD_CtlError>
          ret = USBD_FAIL;
 8009b0e:	2303      	movs	r3, #3
 8009b10:	75fb      	strb	r3, [r7, #23]
          break;
 8009b12:	e002      	b.n	8009b1a <USBD_CDC_Setup+0x176>
          break;
 8009b14:	bf00      	nop
 8009b16:	e008      	b.n	8009b2a <USBD_CDC_Setup+0x186>
          break;
 8009b18:	bf00      	nop
      }
      break;
 8009b1a:	e006      	b.n	8009b2a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009b1c:	6839      	ldr	r1, [r7, #0]
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f001 f9aa 	bl	800ae78 <USBD_CtlError>
      ret = USBD_FAIL;
 8009b24:	2303      	movs	r3, #3
 8009b26:	75fb      	strb	r3, [r7, #23]
      break;
 8009b28:	bf00      	nop
  }

  return (uint8_t)ret;
 8009b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3718      	adds	r7, #24
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d101      	bne.n	8009b56 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009b52:	2303      	movs	r3, #3
 8009b54:	e04f      	b.n	8009bf6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b5c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009b5e:	78fa      	ldrb	r2, [r7, #3]
 8009b60:	6879      	ldr	r1, [r7, #4]
 8009b62:	4613      	mov	r3, r2
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	4413      	add	r3, r2
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	440b      	add	r3, r1
 8009b6c:	3318      	adds	r3, #24
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d029      	beq.n	8009bc8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009b74:	78fa      	ldrb	r2, [r7, #3]
 8009b76:	6879      	ldr	r1, [r7, #4]
 8009b78:	4613      	mov	r3, r2
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	4413      	add	r3, r2
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	440b      	add	r3, r1
 8009b82:	3318      	adds	r3, #24
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	78f9      	ldrb	r1, [r7, #3]
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	440b      	add	r3, r1
 8009b90:	00db      	lsls	r3, r3, #3
 8009b92:	4403      	add	r3, r0
 8009b94:	3338      	adds	r3, #56	; 0x38
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	fbb2 f1f3 	udiv	r1, r2, r3
 8009b9c:	fb01 f303 	mul.w	r3, r1, r3
 8009ba0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d110      	bne.n	8009bc8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009ba6:	78fa      	ldrb	r2, [r7, #3]
 8009ba8:	6879      	ldr	r1, [r7, #4]
 8009baa:	4613      	mov	r3, r2
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	4413      	add	r3, r2
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	440b      	add	r3, r1
 8009bb4:	3318      	adds	r3, #24
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009bba:	78f9      	ldrb	r1, [r7, #3]
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f001 fe5b 	bl	800b87c <USBD_LL_Transmit>
 8009bc6:	e015      	b.n	8009bf4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009bd6:	691b      	ldr	r3, [r3, #16]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d00b      	beq.n	8009bf4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	68ba      	ldr	r2, [r7, #8]
 8009be6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009bea:	68ba      	ldr	r2, [r7, #8]
 8009bec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009bf0:	78fa      	ldrb	r2, [r7, #3]
 8009bf2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009bf4:	2300      	movs	r3, #0
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3710      	adds	r7, #16
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b084      	sub	sp, #16
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
 8009c06:	460b      	mov	r3, r1
 8009c08:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c10:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d101      	bne.n	8009c20 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009c1c:	2303      	movs	r3, #3
 8009c1e:	e015      	b.n	8009c4c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009c20:	78fb      	ldrb	r3, [r7, #3]
 8009c22:	4619      	mov	r1, r3
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f001 fe6b 	bl	800b900 <USBD_LL_GetRxDataSize>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	68fa      	ldr	r2, [r7, #12]
 8009c3c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009c46:	4611      	mov	r1, r2
 8009c48:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009c4a:	2300      	movs	r3, #0
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c62:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d101      	bne.n	8009c6e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009c6a:	2303      	movs	r3, #3
 8009c6c:	e01b      	b.n	8009ca6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d015      	beq.n	8009ca4 <USBD_CDC_EP0_RxReady+0x50>
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009c7e:	2bff      	cmp	r3, #255	; 0xff
 8009c80:	d010      	beq.n	8009ca4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009c90:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009c92:	68fa      	ldr	r2, [r7, #12]
 8009c94:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009c98:	b292      	uxth	r2, r2
 8009c9a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	22ff      	movs	r2, #255	; 0xff
 8009ca0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009ca4:	2300      	movs	r3, #0
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
	...

08009cb0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2243      	movs	r2, #67	; 0x43
 8009cbc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009cbe:	4b03      	ldr	r3, [pc, #12]	; (8009ccc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr
 8009ccc:	20002764 	.word	0x20002764

08009cd0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b083      	sub	sp, #12
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2243      	movs	r2, #67	; 0x43
 8009cdc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009cde:	4b03      	ldr	r3, [pc, #12]	; (8009cec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr
 8009cec:	20002720 	.word	0x20002720

08009cf0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2243      	movs	r2, #67	; 0x43
 8009cfc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009cfe:	4b03      	ldr	r3, [pc, #12]	; (8009d0c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	370c      	adds	r7, #12
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr
 8009d0c:	200027a8 	.word	0x200027a8

08009d10 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	220a      	movs	r2, #10
 8009d1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009d1e:	4b03      	ldr	r3, [pc, #12]	; (8009d2c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	370c      	adds	r7, #12
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr
 8009d2c:	200026dc 	.word	0x200026dc

08009d30 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d101      	bne.n	8009d44 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009d40:	2303      	movs	r3, #3
 8009d42:	e004      	b.n	8009d4e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	683a      	ldr	r2, [r7, #0]
 8009d48:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009d4c:	2300      	movs	r3, #0
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	370c      	adds	r7, #12
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr

08009d5a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009d5a:	b480      	push	{r7}
 8009d5c:	b087      	sub	sp, #28
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	60f8      	str	r0, [r7, #12]
 8009d62:	60b9      	str	r1, [r7, #8]
 8009d64:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d6c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d101      	bne.n	8009d78 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009d74:	2303      	movs	r3, #3
 8009d76:	e008      	b.n	8009d8a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	68ba      	ldr	r2, [r7, #8]
 8009d7c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	371c      	adds	r7, #28
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr

08009d96 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009d96:	b480      	push	{r7}
 8009d98:	b085      	sub	sp, #20
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
 8009d9e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009da6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d101      	bne.n	8009db2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8009dae:	2303      	movs	r3, #3
 8009db0:	e004      	b.n	8009dbc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	683a      	ldr	r2, [r7, #0]
 8009db6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3714      	adds	r7, #20
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009dd6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d101      	bne.n	8009de6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009de2:	2303      	movs	r3, #3
 8009de4:	e016      	b.n	8009e14 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	7c1b      	ldrb	r3, [r3, #16]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d109      	bne.n	8009e02 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009df4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009df8:	2101      	movs	r1, #1
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f001 fd5f 	bl	800b8be <USBD_LL_PrepareReceive>
 8009e00:	e007      	b.n	8009e12 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e08:	2340      	movs	r3, #64	; 0x40
 8009e0a:	2101      	movs	r1, #1
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f001 fd56 	bl	800b8be <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009e12:	2300      	movs	r3, #0
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3710      	adds	r7, #16
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b086      	sub	sp, #24
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	4613      	mov	r3, r2
 8009e28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d101      	bne.n	8009e34 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009e30:	2303      	movs	r3, #3
 8009e32:	e01f      	b.n	8009e74 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2200      	movs	r2, #0
 8009e38:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2200      	movs	r2, #0
 8009e48:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d003      	beq.n	8009e5a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	68ba      	ldr	r2, [r7, #8]
 8009e56:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	79fa      	ldrb	r2, [r7, #7]
 8009e66:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009e68:	68f8      	ldr	r0, [r7, #12]
 8009e6a:	f001 fbbd 	bl	800b5e8 <USBD_LL_Init>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3718      	adds	r7, #24
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009e86:	2300      	movs	r3, #0
 8009e88:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d101      	bne.n	8009e94 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009e90:	2303      	movs	r3, #3
 8009e92:	e016      	b.n	8009ec2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	683a      	ldr	r2, [r7, #0]
 8009e98:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00b      	beq.n	8009ec0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb0:	f107 020e 	add.w	r2, r7, #14
 8009eb4:	4610      	mov	r0, r2
 8009eb6:	4798      	blx	r3
 8009eb8:	4602      	mov	r2, r0
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b082      	sub	sp, #8
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f001 fbe8 	bl	800b6a8 <USBD_LL_Start>
 8009ed8:	4603      	mov	r3, r0
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3708      	adds	r7, #8
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009ee2:	b480      	push	{r7}
 8009ee4:	b083      	sub	sp, #12
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009eea:	2300      	movs	r3, #0
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	460b      	mov	r3, r1
 8009f02:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009f04:	2303      	movs	r3, #3
 8009f06:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d009      	beq.n	8009f26 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	78fa      	ldrb	r2, [r7, #3]
 8009f1c:	4611      	mov	r1, r2
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	4798      	blx	r3
 8009f22:	4603      	mov	r3, r0
 8009f24:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3710      	adds	r7, #16
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	460b      	mov	r3, r1
 8009f3a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d007      	beq.n	8009f56 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	78fa      	ldrb	r2, [r7, #3]
 8009f50:	4611      	mov	r1, r2
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	4798      	blx	r3
  }

  return USBD_OK;
 8009f56:	2300      	movs	r3, #0
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3708      	adds	r7, #8
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009f70:	6839      	ldr	r1, [r7, #0]
 8009f72:	4618      	mov	r0, r3
 8009f74:	f000 ff46 	bl	800ae04 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009f86:	461a      	mov	r2, r3
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009f94:	f003 031f 	and.w	r3, r3, #31
 8009f98:	2b02      	cmp	r3, #2
 8009f9a:	d01a      	beq.n	8009fd2 <USBD_LL_SetupStage+0x72>
 8009f9c:	2b02      	cmp	r3, #2
 8009f9e:	d822      	bhi.n	8009fe6 <USBD_LL_SetupStage+0x86>
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d002      	beq.n	8009faa <USBD_LL_SetupStage+0x4a>
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d00a      	beq.n	8009fbe <USBD_LL_SetupStage+0x5e>
 8009fa8:	e01d      	b.n	8009fe6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 f9ee 	bl	800a394 <USBD_StdDevReq>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	73fb      	strb	r3, [r7, #15]
      break;
 8009fbc:	e020      	b.n	800a000 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 fa52 	bl	800a470 <USBD_StdItfReq>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	73fb      	strb	r3, [r7, #15]
      break;
 8009fd0:	e016      	b.n	800a000 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009fd8:	4619      	mov	r1, r3
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 fa91 	bl	800a502 <USBD_StdEPReq>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8009fe4:	e00c      	b.n	800a000 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009fec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f001 fbb7 	bl	800b768 <USBD_LL_StallEP>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	73fb      	strb	r3, [r7, #15]
      break;
 8009ffe:	bf00      	nop
  }

  return ret;
 800a000:	7bfb      	ldrb	r3, [r7, #15]
}
 800a002:	4618      	mov	r0, r3
 800a004:	3710      	adds	r7, #16
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b086      	sub	sp, #24
 800a00e:	af00      	add	r7, sp, #0
 800a010:	60f8      	str	r0, [r7, #12]
 800a012:	460b      	mov	r3, r1
 800a014:	607a      	str	r2, [r7, #4]
 800a016:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a018:	7afb      	ldrb	r3, [r7, #11]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d138      	bne.n	800a090 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a024:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a02c:	2b03      	cmp	r3, #3
 800a02e:	d14a      	bne.n	800a0c6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	689a      	ldr	r2, [r3, #8]
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d913      	bls.n	800a064 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	689a      	ldr	r2, [r3, #8]
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	68db      	ldr	r3, [r3, #12]
 800a044:	1ad2      	subs	r2, r2, r3
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	68da      	ldr	r2, [r3, #12]
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	4293      	cmp	r3, r2
 800a054:	bf28      	it	cs
 800a056:	4613      	movcs	r3, r2
 800a058:	461a      	mov	r2, r3
 800a05a:	6879      	ldr	r1, [r7, #4]
 800a05c:	68f8      	ldr	r0, [r7, #12]
 800a05e:	f000 ffc5 	bl	800afec <USBD_CtlContinueRx>
 800a062:	e030      	b.n	800a0c6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a06a:	b2db      	uxtb	r3, r3
 800a06c:	2b03      	cmp	r3, #3
 800a06e:	d10b      	bne.n	800a088 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d005      	beq.n	800a088 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a082:	691b      	ldr	r3, [r3, #16]
 800a084:	68f8      	ldr	r0, [r7, #12]
 800a086:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	f000 ffc0 	bl	800b00e <USBD_CtlSendStatus>
 800a08e:	e01a      	b.n	800a0c6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a096:	b2db      	uxtb	r3, r3
 800a098:	2b03      	cmp	r3, #3
 800a09a:	d114      	bne.n	800a0c6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0a2:	699b      	ldr	r3, [r3, #24]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d00e      	beq.n	800a0c6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0ae:	699b      	ldr	r3, [r3, #24]
 800a0b0:	7afa      	ldrb	r2, [r7, #11]
 800a0b2:	4611      	mov	r1, r2
 800a0b4:	68f8      	ldr	r0, [r7, #12]
 800a0b6:	4798      	blx	r3
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a0bc:	7dfb      	ldrb	r3, [r7, #23]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d001      	beq.n	800a0c6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a0c2:	7dfb      	ldrb	r3, [r7, #23]
 800a0c4:	e000      	b.n	800a0c8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a0c6:	2300      	movs	r3, #0
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3718      	adds	r7, #24
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b086      	sub	sp, #24
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	460b      	mov	r3, r1
 800a0da:	607a      	str	r2, [r7, #4]
 800a0dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a0de:	7afb      	ldrb	r3, [r7, #11]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d16b      	bne.n	800a1bc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	3314      	adds	r3, #20
 800a0e8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	d156      	bne.n	800a1a2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	689a      	ldr	r2, [r3, #8]
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d914      	bls.n	800a12a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	689a      	ldr	r2, [r3, #8]
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	68db      	ldr	r3, [r3, #12]
 800a108:	1ad2      	subs	r2, r2, r3
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	689b      	ldr	r3, [r3, #8]
 800a112:	461a      	mov	r2, r3
 800a114:	6879      	ldr	r1, [r7, #4]
 800a116:	68f8      	ldr	r0, [r7, #12]
 800a118:	f000 ff3a 	bl	800af90 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a11c:	2300      	movs	r3, #0
 800a11e:	2200      	movs	r2, #0
 800a120:	2100      	movs	r1, #0
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f001 fbcb 	bl	800b8be <USBD_LL_PrepareReceive>
 800a128:	e03b      	b.n	800a1a2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	68da      	ldr	r2, [r3, #12]
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	689b      	ldr	r3, [r3, #8]
 800a132:	429a      	cmp	r2, r3
 800a134:	d11c      	bne.n	800a170 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	685a      	ldr	r2, [r3, #4]
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a13e:	429a      	cmp	r2, r3
 800a140:	d316      	bcc.n	800a170 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	685a      	ldr	r2, [r3, #4]
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d20f      	bcs.n	800a170 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a150:	2200      	movs	r2, #0
 800a152:	2100      	movs	r1, #0
 800a154:	68f8      	ldr	r0, [r7, #12]
 800a156:	f000 ff1b 	bl	800af90 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2200      	movs	r2, #0
 800a15e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a162:	2300      	movs	r3, #0
 800a164:	2200      	movs	r2, #0
 800a166:	2100      	movs	r1, #0
 800a168:	68f8      	ldr	r0, [r7, #12]
 800a16a:	f001 fba8 	bl	800b8be <USBD_LL_PrepareReceive>
 800a16e:	e018      	b.n	800a1a2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a176:	b2db      	uxtb	r3, r3
 800a178:	2b03      	cmp	r3, #3
 800a17a:	d10b      	bne.n	800a194 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d005      	beq.n	800a194 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a18e:	68db      	ldr	r3, [r3, #12]
 800a190:	68f8      	ldr	r0, [r7, #12]
 800a192:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a194:	2180      	movs	r1, #128	; 0x80
 800a196:	68f8      	ldr	r0, [r7, #12]
 800a198:	f001 fae6 	bl	800b768 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f000 ff49 	bl	800b034 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d122      	bne.n	800a1f2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f7ff fe98 	bl	8009ee2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a1ba:	e01a      	b.n	800a1f2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	2b03      	cmp	r3, #3
 800a1c6:	d114      	bne.n	800a1f2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1ce:	695b      	ldr	r3, [r3, #20]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d00e      	beq.n	800a1f2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1da:	695b      	ldr	r3, [r3, #20]
 800a1dc:	7afa      	ldrb	r2, [r7, #11]
 800a1de:	4611      	mov	r1, r2
 800a1e0:	68f8      	ldr	r0, [r7, #12]
 800a1e2:	4798      	blx	r3
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a1e8:	7dfb      	ldrb	r3, [r7, #23]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d001      	beq.n	800a1f2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a1ee:	7dfb      	ldrb	r3, [r7, #23]
 800a1f0:	e000      	b.n	800a1f4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3718      	adds	r7, #24
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2201      	movs	r2, #1
 800a208:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2200      	movs	r2, #0
 800a21e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d101      	bne.n	800a230 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a22c:	2303      	movs	r3, #3
 800a22e:	e02f      	b.n	800a290 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00f      	beq.n	800a25a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d009      	beq.n	800a25a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	6852      	ldr	r2, [r2, #4]
 800a252:	b2d2      	uxtb	r2, r2
 800a254:	4611      	mov	r1, r2
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a25a:	2340      	movs	r3, #64	; 0x40
 800a25c:	2200      	movs	r2, #0
 800a25e:	2100      	movs	r1, #0
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f001 fa3c 	bl	800b6de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2201      	movs	r2, #1
 800a26a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2240      	movs	r2, #64	; 0x40
 800a272:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a276:	2340      	movs	r3, #64	; 0x40
 800a278:	2200      	movs	r2, #0
 800a27a:	2180      	movs	r1, #128	; 0x80
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f001 fa2e 	bl	800b6de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2201      	movs	r2, #1
 800a286:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2240      	movs	r2, #64	; 0x40
 800a28c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a28e:	2300      	movs	r3, #0
}
 800a290:	4618      	mov	r0, r3
 800a292:	3708      	adds	r7, #8
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	78fa      	ldrb	r2, [r7, #3]
 800a2a8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b083      	sub	sp, #12
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2c6:	b2da      	uxtb	r2, r3
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2204      	movs	r2, #4
 800a2d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a2d6:	2300      	movs	r3, #0
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	2b04      	cmp	r3, #4
 800a2f6:	d106      	bne.n	800a306 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a2fe:	b2da      	uxtb	r2, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a306:	2300      	movs	r3, #0
}
 800a308:	4618      	mov	r0, r3
 800a30a:	370c      	adds	r7, #12
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr

0800a314 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a322:	2b00      	cmp	r3, #0
 800a324:	d101      	bne.n	800a32a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a326:	2303      	movs	r3, #3
 800a328:	e012      	b.n	800a350 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a330:	b2db      	uxtb	r3, r3
 800a332:	2b03      	cmp	r3, #3
 800a334:	d10b      	bne.n	800a34e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a33c:	69db      	ldr	r3, [r3, #28]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d005      	beq.n	800a34e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a348:	69db      	ldr	r3, [r3, #28]
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a34e:	2300      	movs	r3, #0
}
 800a350:	4618      	mov	r0, r3
 800a352:	3708      	adds	r7, #8
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a358:	b480      	push	{r7}
 800a35a:	b087      	sub	sp, #28
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	3301      	adds	r3, #1
 800a36e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a376:	8a3b      	ldrh	r3, [r7, #16]
 800a378:	021b      	lsls	r3, r3, #8
 800a37a:	b21a      	sxth	r2, r3
 800a37c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a380:	4313      	orrs	r3, r2
 800a382:	b21b      	sxth	r3, r3
 800a384:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a386:	89fb      	ldrh	r3, [r7, #14]
}
 800a388:	4618      	mov	r0, r3
 800a38a:	371c      	adds	r7, #28
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a3aa:	2b40      	cmp	r3, #64	; 0x40
 800a3ac:	d005      	beq.n	800a3ba <USBD_StdDevReq+0x26>
 800a3ae:	2b40      	cmp	r3, #64	; 0x40
 800a3b0:	d853      	bhi.n	800a45a <USBD_StdDevReq+0xc6>
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d00b      	beq.n	800a3ce <USBD_StdDevReq+0x3a>
 800a3b6:	2b20      	cmp	r3, #32
 800a3b8:	d14f      	bne.n	800a45a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	6839      	ldr	r1, [r7, #0]
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	4798      	blx	r3
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	73fb      	strb	r3, [r7, #15]
      break;
 800a3cc:	e04a      	b.n	800a464 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	785b      	ldrb	r3, [r3, #1]
 800a3d2:	2b09      	cmp	r3, #9
 800a3d4:	d83b      	bhi.n	800a44e <USBD_StdDevReq+0xba>
 800a3d6:	a201      	add	r2, pc, #4	; (adr r2, 800a3dc <USBD_StdDevReq+0x48>)
 800a3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3dc:	0800a431 	.word	0x0800a431
 800a3e0:	0800a445 	.word	0x0800a445
 800a3e4:	0800a44f 	.word	0x0800a44f
 800a3e8:	0800a43b 	.word	0x0800a43b
 800a3ec:	0800a44f 	.word	0x0800a44f
 800a3f0:	0800a40f 	.word	0x0800a40f
 800a3f4:	0800a405 	.word	0x0800a405
 800a3f8:	0800a44f 	.word	0x0800a44f
 800a3fc:	0800a427 	.word	0x0800a427
 800a400:	0800a419 	.word	0x0800a419
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a404:	6839      	ldr	r1, [r7, #0]
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 f9de 	bl	800a7c8 <USBD_GetDescriptor>
          break;
 800a40c:	e024      	b.n	800a458 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a40e:	6839      	ldr	r1, [r7, #0]
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f000 fb6d 	bl	800aaf0 <USBD_SetAddress>
          break;
 800a416:	e01f      	b.n	800a458 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a418:	6839      	ldr	r1, [r7, #0]
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 fbac 	bl	800ab78 <USBD_SetConfig>
 800a420:	4603      	mov	r3, r0
 800a422:	73fb      	strb	r3, [r7, #15]
          break;
 800a424:	e018      	b.n	800a458 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a426:	6839      	ldr	r1, [r7, #0]
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 fc4b 	bl	800acc4 <USBD_GetConfig>
          break;
 800a42e:	e013      	b.n	800a458 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a430:	6839      	ldr	r1, [r7, #0]
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 fc7c 	bl	800ad30 <USBD_GetStatus>
          break;
 800a438:	e00e      	b.n	800a458 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a43a:	6839      	ldr	r1, [r7, #0]
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f000 fcab 	bl	800ad98 <USBD_SetFeature>
          break;
 800a442:	e009      	b.n	800a458 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a444:	6839      	ldr	r1, [r7, #0]
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 fcba 	bl	800adc0 <USBD_ClrFeature>
          break;
 800a44c:	e004      	b.n	800a458 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a44e:	6839      	ldr	r1, [r7, #0]
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 fd11 	bl	800ae78 <USBD_CtlError>
          break;
 800a456:	bf00      	nop
      }
      break;
 800a458:	e004      	b.n	800a464 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a45a:	6839      	ldr	r1, [r7, #0]
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f000 fd0b 	bl	800ae78 <USBD_CtlError>
      break;
 800a462:	bf00      	nop
  }

  return ret;
 800a464:	7bfb      	ldrb	r3, [r7, #15]
}
 800a466:	4618      	mov	r0, r3
 800a468:	3710      	adds	r7, #16
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop

0800a470 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a47a:	2300      	movs	r3, #0
 800a47c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a486:	2b40      	cmp	r3, #64	; 0x40
 800a488:	d005      	beq.n	800a496 <USBD_StdItfReq+0x26>
 800a48a:	2b40      	cmp	r3, #64	; 0x40
 800a48c:	d82f      	bhi.n	800a4ee <USBD_StdItfReq+0x7e>
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d001      	beq.n	800a496 <USBD_StdItfReq+0x26>
 800a492:	2b20      	cmp	r3, #32
 800a494:	d12b      	bne.n	800a4ee <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	3b01      	subs	r3, #1
 800a4a0:	2b02      	cmp	r3, #2
 800a4a2:	d81d      	bhi.n	800a4e0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	889b      	ldrh	r3, [r3, #4]
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d813      	bhi.n	800a4d6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4b4:	689b      	ldr	r3, [r3, #8]
 800a4b6:	6839      	ldr	r1, [r7, #0]
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	4798      	blx	r3
 800a4bc:	4603      	mov	r3, r0
 800a4be:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	88db      	ldrh	r3, [r3, #6]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d110      	bne.n	800a4ea <USBD_StdItfReq+0x7a>
 800a4c8:	7bfb      	ldrb	r3, [r7, #15]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d10d      	bne.n	800a4ea <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 fd9d 	bl	800b00e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a4d4:	e009      	b.n	800a4ea <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a4d6:	6839      	ldr	r1, [r7, #0]
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f000 fccd 	bl	800ae78 <USBD_CtlError>
          break;
 800a4de:	e004      	b.n	800a4ea <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a4e0:	6839      	ldr	r1, [r7, #0]
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 fcc8 	bl	800ae78 <USBD_CtlError>
          break;
 800a4e8:	e000      	b.n	800a4ec <USBD_StdItfReq+0x7c>
          break;
 800a4ea:	bf00      	nop
      }
      break;
 800a4ec:	e004      	b.n	800a4f8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a4ee:	6839      	ldr	r1, [r7, #0]
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 fcc1 	bl	800ae78 <USBD_CtlError>
      break;
 800a4f6:	bf00      	nop
  }

  return ret;
 800a4f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3710      	adds	r7, #16
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a502:	b580      	push	{r7, lr}
 800a504:	b084      	sub	sp, #16
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
 800a50a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a50c:	2300      	movs	r3, #0
 800a50e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	889b      	ldrh	r3, [r3, #4]
 800a514:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a51e:	2b40      	cmp	r3, #64	; 0x40
 800a520:	d007      	beq.n	800a532 <USBD_StdEPReq+0x30>
 800a522:	2b40      	cmp	r3, #64	; 0x40
 800a524:	f200 8145 	bhi.w	800a7b2 <USBD_StdEPReq+0x2b0>
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d00c      	beq.n	800a546 <USBD_StdEPReq+0x44>
 800a52c:	2b20      	cmp	r3, #32
 800a52e:	f040 8140 	bne.w	800a7b2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a538:	689b      	ldr	r3, [r3, #8]
 800a53a:	6839      	ldr	r1, [r7, #0]
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	4798      	blx	r3
 800a540:	4603      	mov	r3, r0
 800a542:	73fb      	strb	r3, [r7, #15]
      break;
 800a544:	e13a      	b.n	800a7bc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	785b      	ldrb	r3, [r3, #1]
 800a54a:	2b03      	cmp	r3, #3
 800a54c:	d007      	beq.n	800a55e <USBD_StdEPReq+0x5c>
 800a54e:	2b03      	cmp	r3, #3
 800a550:	f300 8129 	bgt.w	800a7a6 <USBD_StdEPReq+0x2a4>
 800a554:	2b00      	cmp	r3, #0
 800a556:	d07f      	beq.n	800a658 <USBD_StdEPReq+0x156>
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d03c      	beq.n	800a5d6 <USBD_StdEPReq+0xd4>
 800a55c:	e123      	b.n	800a7a6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a564:	b2db      	uxtb	r3, r3
 800a566:	2b02      	cmp	r3, #2
 800a568:	d002      	beq.n	800a570 <USBD_StdEPReq+0x6e>
 800a56a:	2b03      	cmp	r3, #3
 800a56c:	d016      	beq.n	800a59c <USBD_StdEPReq+0x9a>
 800a56e:	e02c      	b.n	800a5ca <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a570:	7bbb      	ldrb	r3, [r7, #14]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d00d      	beq.n	800a592 <USBD_StdEPReq+0x90>
 800a576:	7bbb      	ldrb	r3, [r7, #14]
 800a578:	2b80      	cmp	r3, #128	; 0x80
 800a57a:	d00a      	beq.n	800a592 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a57c:	7bbb      	ldrb	r3, [r7, #14]
 800a57e:	4619      	mov	r1, r3
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f001 f8f1 	bl	800b768 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a586:	2180      	movs	r1, #128	; 0x80
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f001 f8ed 	bl	800b768 <USBD_LL_StallEP>
 800a58e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a590:	e020      	b.n	800a5d4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a592:	6839      	ldr	r1, [r7, #0]
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f000 fc6f 	bl	800ae78 <USBD_CtlError>
              break;
 800a59a:	e01b      	b.n	800a5d4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	885b      	ldrh	r3, [r3, #2]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d10e      	bne.n	800a5c2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a5a4:	7bbb      	ldrb	r3, [r7, #14]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d00b      	beq.n	800a5c2 <USBD_StdEPReq+0xc0>
 800a5aa:	7bbb      	ldrb	r3, [r7, #14]
 800a5ac:	2b80      	cmp	r3, #128	; 0x80
 800a5ae:	d008      	beq.n	800a5c2 <USBD_StdEPReq+0xc0>
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	88db      	ldrh	r3, [r3, #6]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d104      	bne.n	800a5c2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a5b8:	7bbb      	ldrb	r3, [r7, #14]
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f001 f8d3 	bl	800b768 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 fd23 	bl	800b00e <USBD_CtlSendStatus>

              break;
 800a5c8:	e004      	b.n	800a5d4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a5ca:	6839      	ldr	r1, [r7, #0]
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 fc53 	bl	800ae78 <USBD_CtlError>
              break;
 800a5d2:	bf00      	nop
          }
          break;
 800a5d4:	e0ec      	b.n	800a7b0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	2b02      	cmp	r3, #2
 800a5e0:	d002      	beq.n	800a5e8 <USBD_StdEPReq+0xe6>
 800a5e2:	2b03      	cmp	r3, #3
 800a5e4:	d016      	beq.n	800a614 <USBD_StdEPReq+0x112>
 800a5e6:	e030      	b.n	800a64a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a5e8:	7bbb      	ldrb	r3, [r7, #14]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d00d      	beq.n	800a60a <USBD_StdEPReq+0x108>
 800a5ee:	7bbb      	ldrb	r3, [r7, #14]
 800a5f0:	2b80      	cmp	r3, #128	; 0x80
 800a5f2:	d00a      	beq.n	800a60a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a5f4:	7bbb      	ldrb	r3, [r7, #14]
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f001 f8b5 	bl	800b768 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5fe:	2180      	movs	r1, #128	; 0x80
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f001 f8b1 	bl	800b768 <USBD_LL_StallEP>
 800a606:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a608:	e025      	b.n	800a656 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a60a:	6839      	ldr	r1, [r7, #0]
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 fc33 	bl	800ae78 <USBD_CtlError>
              break;
 800a612:	e020      	b.n	800a656 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	885b      	ldrh	r3, [r3, #2]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d11b      	bne.n	800a654 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a61c:	7bbb      	ldrb	r3, [r7, #14]
 800a61e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a622:	2b00      	cmp	r3, #0
 800a624:	d004      	beq.n	800a630 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a626:	7bbb      	ldrb	r3, [r7, #14]
 800a628:	4619      	mov	r1, r3
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f001 f8bb 	bl	800b7a6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 fcec 	bl	800b00e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a63c:	689b      	ldr	r3, [r3, #8]
 800a63e:	6839      	ldr	r1, [r7, #0]
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	4798      	blx	r3
 800a644:	4603      	mov	r3, r0
 800a646:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a648:	e004      	b.n	800a654 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a64a:	6839      	ldr	r1, [r7, #0]
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f000 fc13 	bl	800ae78 <USBD_CtlError>
              break;
 800a652:	e000      	b.n	800a656 <USBD_StdEPReq+0x154>
              break;
 800a654:	bf00      	nop
          }
          break;
 800a656:	e0ab      	b.n	800a7b0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	2b02      	cmp	r3, #2
 800a662:	d002      	beq.n	800a66a <USBD_StdEPReq+0x168>
 800a664:	2b03      	cmp	r3, #3
 800a666:	d032      	beq.n	800a6ce <USBD_StdEPReq+0x1cc>
 800a668:	e097      	b.n	800a79a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a66a:	7bbb      	ldrb	r3, [r7, #14]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d007      	beq.n	800a680 <USBD_StdEPReq+0x17e>
 800a670:	7bbb      	ldrb	r3, [r7, #14]
 800a672:	2b80      	cmp	r3, #128	; 0x80
 800a674:	d004      	beq.n	800a680 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a676:	6839      	ldr	r1, [r7, #0]
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f000 fbfd 	bl	800ae78 <USBD_CtlError>
                break;
 800a67e:	e091      	b.n	800a7a4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a680:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a684:	2b00      	cmp	r3, #0
 800a686:	da0b      	bge.n	800a6a0 <USBD_StdEPReq+0x19e>
 800a688:	7bbb      	ldrb	r3, [r7, #14]
 800a68a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a68e:	4613      	mov	r3, r2
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	4413      	add	r3, r2
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	3310      	adds	r3, #16
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	4413      	add	r3, r2
 800a69c:	3304      	adds	r3, #4
 800a69e:	e00b      	b.n	800a6b8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a6a0:	7bbb      	ldrb	r3, [r7, #14]
 800a6a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	4413      	add	r3, r2
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	3304      	adds	r3, #4
 800a6b8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	2202      	movs	r2, #2
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 fc47 	bl	800af5a <USBD_CtlSendData>
              break;
 800a6cc:	e06a      	b.n	800a7a4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a6ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	da11      	bge.n	800a6fa <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a6d6:	7bbb      	ldrb	r3, [r7, #14]
 800a6d8:	f003 020f 	and.w	r2, r3, #15
 800a6dc:	6879      	ldr	r1, [r7, #4]
 800a6de:	4613      	mov	r3, r2
 800a6e0:	009b      	lsls	r3, r3, #2
 800a6e2:	4413      	add	r3, r2
 800a6e4:	009b      	lsls	r3, r3, #2
 800a6e6:	440b      	add	r3, r1
 800a6e8:	3324      	adds	r3, #36	; 0x24
 800a6ea:	881b      	ldrh	r3, [r3, #0]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d117      	bne.n	800a720 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a6f0:	6839      	ldr	r1, [r7, #0]
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 fbc0 	bl	800ae78 <USBD_CtlError>
                  break;
 800a6f8:	e054      	b.n	800a7a4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a6fa:	7bbb      	ldrb	r3, [r7, #14]
 800a6fc:	f003 020f 	and.w	r2, r3, #15
 800a700:	6879      	ldr	r1, [r7, #4]
 800a702:	4613      	mov	r3, r2
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	4413      	add	r3, r2
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	440b      	add	r3, r1
 800a70c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a710:	881b      	ldrh	r3, [r3, #0]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d104      	bne.n	800a720 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a716:	6839      	ldr	r1, [r7, #0]
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 fbad 	bl	800ae78 <USBD_CtlError>
                  break;
 800a71e:	e041      	b.n	800a7a4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a720:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a724:	2b00      	cmp	r3, #0
 800a726:	da0b      	bge.n	800a740 <USBD_StdEPReq+0x23e>
 800a728:	7bbb      	ldrb	r3, [r7, #14]
 800a72a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a72e:	4613      	mov	r3, r2
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	4413      	add	r3, r2
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	3310      	adds	r3, #16
 800a738:	687a      	ldr	r2, [r7, #4]
 800a73a:	4413      	add	r3, r2
 800a73c:	3304      	adds	r3, #4
 800a73e:	e00b      	b.n	800a758 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a740:	7bbb      	ldrb	r3, [r7, #14]
 800a742:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a746:	4613      	mov	r3, r2
 800a748:	009b      	lsls	r3, r3, #2
 800a74a:	4413      	add	r3, r2
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a752:	687a      	ldr	r2, [r7, #4]
 800a754:	4413      	add	r3, r2
 800a756:	3304      	adds	r3, #4
 800a758:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a75a:	7bbb      	ldrb	r3, [r7, #14]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d002      	beq.n	800a766 <USBD_StdEPReq+0x264>
 800a760:	7bbb      	ldrb	r3, [r7, #14]
 800a762:	2b80      	cmp	r3, #128	; 0x80
 800a764:	d103      	bne.n	800a76e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	2200      	movs	r2, #0
 800a76a:	601a      	str	r2, [r3, #0]
 800a76c:	e00e      	b.n	800a78c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a76e:	7bbb      	ldrb	r3, [r7, #14]
 800a770:	4619      	mov	r1, r3
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f001 f836 	bl	800b7e4 <USBD_LL_IsStallEP>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d003      	beq.n	800a786 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	2201      	movs	r2, #1
 800a782:	601a      	str	r2, [r3, #0]
 800a784:	e002      	b.n	800a78c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	2200      	movs	r2, #0
 800a78a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	2202      	movs	r2, #2
 800a790:	4619      	mov	r1, r3
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 fbe1 	bl	800af5a <USBD_CtlSendData>
              break;
 800a798:	e004      	b.n	800a7a4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a79a:	6839      	ldr	r1, [r7, #0]
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f000 fb6b 	bl	800ae78 <USBD_CtlError>
              break;
 800a7a2:	bf00      	nop
          }
          break;
 800a7a4:	e004      	b.n	800a7b0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a7a6:	6839      	ldr	r1, [r7, #0]
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f000 fb65 	bl	800ae78 <USBD_CtlError>
          break;
 800a7ae:	bf00      	nop
      }
      break;
 800a7b0:	e004      	b.n	800a7bc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a7b2:	6839      	ldr	r1, [r7, #0]
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 fb5f 	bl	800ae78 <USBD_CtlError>
      break;
 800a7ba:	bf00      	nop
  }

  return ret;
 800a7bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3710      	adds	r7, #16
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
	...

0800a7c8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	885b      	ldrh	r3, [r3, #2]
 800a7e2:	0a1b      	lsrs	r3, r3, #8
 800a7e4:	b29b      	uxth	r3, r3
 800a7e6:	3b01      	subs	r3, #1
 800a7e8:	2b0e      	cmp	r3, #14
 800a7ea:	f200 8152 	bhi.w	800aa92 <USBD_GetDescriptor+0x2ca>
 800a7ee:	a201      	add	r2, pc, #4	; (adr r2, 800a7f4 <USBD_GetDescriptor+0x2c>)
 800a7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f4:	0800a865 	.word	0x0800a865
 800a7f8:	0800a87d 	.word	0x0800a87d
 800a7fc:	0800a8bd 	.word	0x0800a8bd
 800a800:	0800aa93 	.word	0x0800aa93
 800a804:	0800aa93 	.word	0x0800aa93
 800a808:	0800aa33 	.word	0x0800aa33
 800a80c:	0800aa5f 	.word	0x0800aa5f
 800a810:	0800aa93 	.word	0x0800aa93
 800a814:	0800aa93 	.word	0x0800aa93
 800a818:	0800aa93 	.word	0x0800aa93
 800a81c:	0800aa93 	.word	0x0800aa93
 800a820:	0800aa93 	.word	0x0800aa93
 800a824:	0800aa93 	.word	0x0800aa93
 800a828:	0800aa93 	.word	0x0800aa93
 800a82c:	0800a831 	.word	0x0800a831
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a836:	69db      	ldr	r3, [r3, #28]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d00b      	beq.n	800a854 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a842:	69db      	ldr	r3, [r3, #28]
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	7c12      	ldrb	r2, [r2, #16]
 800a848:	f107 0108 	add.w	r1, r7, #8
 800a84c:	4610      	mov	r0, r2
 800a84e:	4798      	blx	r3
 800a850:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a852:	e126      	b.n	800aaa2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a854:	6839      	ldr	r1, [r7, #0]
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 fb0e 	bl	800ae78 <USBD_CtlError>
        err++;
 800a85c:	7afb      	ldrb	r3, [r7, #11]
 800a85e:	3301      	adds	r3, #1
 800a860:	72fb      	strb	r3, [r7, #11]
      break;
 800a862:	e11e      	b.n	800aaa2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	7c12      	ldrb	r2, [r2, #16]
 800a870:	f107 0108 	add.w	r1, r7, #8
 800a874:	4610      	mov	r0, r2
 800a876:	4798      	blx	r3
 800a878:	60f8      	str	r0, [r7, #12]
      break;
 800a87a:	e112      	b.n	800aaa2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	7c1b      	ldrb	r3, [r3, #16]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d10d      	bne.n	800a8a0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a88a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a88c:	f107 0208 	add.w	r2, r7, #8
 800a890:	4610      	mov	r0, r2
 800a892:	4798      	blx	r3
 800a894:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	3301      	adds	r3, #1
 800a89a:	2202      	movs	r2, #2
 800a89c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a89e:	e100      	b.n	800aaa2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a8:	f107 0208 	add.w	r2, r7, #8
 800a8ac:	4610      	mov	r0, r2
 800a8ae:	4798      	blx	r3
 800a8b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	2202      	movs	r2, #2
 800a8b8:	701a      	strb	r2, [r3, #0]
      break;
 800a8ba:	e0f2      	b.n	800aaa2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	885b      	ldrh	r3, [r3, #2]
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	2b05      	cmp	r3, #5
 800a8c4:	f200 80ac 	bhi.w	800aa20 <USBD_GetDescriptor+0x258>
 800a8c8:	a201      	add	r2, pc, #4	; (adr r2, 800a8d0 <USBD_GetDescriptor+0x108>)
 800a8ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ce:	bf00      	nop
 800a8d0:	0800a8e9 	.word	0x0800a8e9
 800a8d4:	0800a91d 	.word	0x0800a91d
 800a8d8:	0800a951 	.word	0x0800a951
 800a8dc:	0800a985 	.word	0x0800a985
 800a8e0:	0800a9b9 	.word	0x0800a9b9
 800a8e4:	0800a9ed 	.word	0x0800a9ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d00b      	beq.n	800a90c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	7c12      	ldrb	r2, [r2, #16]
 800a900:	f107 0108 	add.w	r1, r7, #8
 800a904:	4610      	mov	r0, r2
 800a906:	4798      	blx	r3
 800a908:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a90a:	e091      	b.n	800aa30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a90c:	6839      	ldr	r1, [r7, #0]
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 fab2 	bl	800ae78 <USBD_CtlError>
            err++;
 800a914:	7afb      	ldrb	r3, [r7, #11]
 800a916:	3301      	adds	r3, #1
 800a918:	72fb      	strb	r3, [r7, #11]
          break;
 800a91a:	e089      	b.n	800aa30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d00b      	beq.n	800a940 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	7c12      	ldrb	r2, [r2, #16]
 800a934:	f107 0108 	add.w	r1, r7, #8
 800a938:	4610      	mov	r0, r2
 800a93a:	4798      	blx	r3
 800a93c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a93e:	e077      	b.n	800aa30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a940:	6839      	ldr	r1, [r7, #0]
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f000 fa98 	bl	800ae78 <USBD_CtlError>
            err++;
 800a948:	7afb      	ldrb	r3, [r7, #11]
 800a94a:	3301      	adds	r3, #1
 800a94c:	72fb      	strb	r3, [r7, #11]
          break;
 800a94e:	e06f      	b.n	800aa30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a956:	68db      	ldr	r3, [r3, #12]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d00b      	beq.n	800a974 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	7c12      	ldrb	r2, [r2, #16]
 800a968:	f107 0108 	add.w	r1, r7, #8
 800a96c:	4610      	mov	r0, r2
 800a96e:	4798      	blx	r3
 800a970:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a972:	e05d      	b.n	800aa30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a974:	6839      	ldr	r1, [r7, #0]
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 fa7e 	bl	800ae78 <USBD_CtlError>
            err++;
 800a97c:	7afb      	ldrb	r3, [r7, #11]
 800a97e:	3301      	adds	r3, #1
 800a980:	72fb      	strb	r3, [r7, #11]
          break;
 800a982:	e055      	b.n	800aa30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a98a:	691b      	ldr	r3, [r3, #16]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d00b      	beq.n	800a9a8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a996:	691b      	ldr	r3, [r3, #16]
 800a998:	687a      	ldr	r2, [r7, #4]
 800a99a:	7c12      	ldrb	r2, [r2, #16]
 800a99c:	f107 0108 	add.w	r1, r7, #8
 800a9a0:	4610      	mov	r0, r2
 800a9a2:	4798      	blx	r3
 800a9a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9a6:	e043      	b.n	800aa30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a9a8:	6839      	ldr	r1, [r7, #0]
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 fa64 	bl	800ae78 <USBD_CtlError>
            err++;
 800a9b0:	7afb      	ldrb	r3, [r7, #11]
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	72fb      	strb	r3, [r7, #11]
          break;
 800a9b6:	e03b      	b.n	800aa30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9be:	695b      	ldr	r3, [r3, #20]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d00b      	beq.n	800a9dc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9ca:	695b      	ldr	r3, [r3, #20]
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	7c12      	ldrb	r2, [r2, #16]
 800a9d0:	f107 0108 	add.w	r1, r7, #8
 800a9d4:	4610      	mov	r0, r2
 800a9d6:	4798      	blx	r3
 800a9d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9da:	e029      	b.n	800aa30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a9dc:	6839      	ldr	r1, [r7, #0]
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 fa4a 	bl	800ae78 <USBD_CtlError>
            err++;
 800a9e4:	7afb      	ldrb	r3, [r7, #11]
 800a9e6:	3301      	adds	r3, #1
 800a9e8:	72fb      	strb	r3, [r7, #11]
          break;
 800a9ea:	e021      	b.n	800aa30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9f2:	699b      	ldr	r3, [r3, #24]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d00b      	beq.n	800aa10 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9fe:	699b      	ldr	r3, [r3, #24]
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	7c12      	ldrb	r2, [r2, #16]
 800aa04:	f107 0108 	add.w	r1, r7, #8
 800aa08:	4610      	mov	r0, r2
 800aa0a:	4798      	blx	r3
 800aa0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa0e:	e00f      	b.n	800aa30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa10:	6839      	ldr	r1, [r7, #0]
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 fa30 	bl	800ae78 <USBD_CtlError>
            err++;
 800aa18:	7afb      	ldrb	r3, [r7, #11]
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	72fb      	strb	r3, [r7, #11]
          break;
 800aa1e:	e007      	b.n	800aa30 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800aa20:	6839      	ldr	r1, [r7, #0]
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 fa28 	bl	800ae78 <USBD_CtlError>
          err++;
 800aa28:	7afb      	ldrb	r3, [r7, #11]
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800aa2e:	bf00      	nop
      }
      break;
 800aa30:	e037      	b.n	800aaa2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	7c1b      	ldrb	r3, [r3, #16]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d109      	bne.n	800aa4e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa42:	f107 0208 	add.w	r2, r7, #8
 800aa46:	4610      	mov	r0, r2
 800aa48:	4798      	blx	r3
 800aa4a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aa4c:	e029      	b.n	800aaa2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aa4e:	6839      	ldr	r1, [r7, #0]
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 fa11 	bl	800ae78 <USBD_CtlError>
        err++;
 800aa56:	7afb      	ldrb	r3, [r7, #11]
 800aa58:	3301      	adds	r3, #1
 800aa5a:	72fb      	strb	r3, [r7, #11]
      break;
 800aa5c:	e021      	b.n	800aaa2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	7c1b      	ldrb	r3, [r3, #16]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d10d      	bne.n	800aa82 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa6e:	f107 0208 	add.w	r2, r7, #8
 800aa72:	4610      	mov	r0, r2
 800aa74:	4798      	blx	r3
 800aa76:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	2207      	movs	r2, #7
 800aa7e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aa80:	e00f      	b.n	800aaa2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aa82:	6839      	ldr	r1, [r7, #0]
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 f9f7 	bl	800ae78 <USBD_CtlError>
        err++;
 800aa8a:	7afb      	ldrb	r3, [r7, #11]
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	72fb      	strb	r3, [r7, #11]
      break;
 800aa90:	e007      	b.n	800aaa2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800aa92:	6839      	ldr	r1, [r7, #0]
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 f9ef 	bl	800ae78 <USBD_CtlError>
      err++;
 800aa9a:	7afb      	ldrb	r3, [r7, #11]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	72fb      	strb	r3, [r7, #11]
      break;
 800aaa0:	bf00      	nop
  }

  if (err != 0U)
 800aaa2:	7afb      	ldrb	r3, [r7, #11]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d11e      	bne.n	800aae6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	88db      	ldrh	r3, [r3, #6]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d016      	beq.n	800aade <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800aab0:	893b      	ldrh	r3, [r7, #8]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00e      	beq.n	800aad4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	88da      	ldrh	r2, [r3, #6]
 800aaba:	893b      	ldrh	r3, [r7, #8]
 800aabc:	4293      	cmp	r3, r2
 800aabe:	bf28      	it	cs
 800aac0:	4613      	movcs	r3, r2
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aac6:	893b      	ldrh	r3, [r7, #8]
 800aac8:	461a      	mov	r2, r3
 800aaca:	68f9      	ldr	r1, [r7, #12]
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 fa44 	bl	800af5a <USBD_CtlSendData>
 800aad2:	e009      	b.n	800aae8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800aad4:	6839      	ldr	r1, [r7, #0]
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f000 f9ce 	bl	800ae78 <USBD_CtlError>
 800aadc:	e004      	b.n	800aae8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 fa95 	bl	800b00e <USBD_CtlSendStatus>
 800aae4:	e000      	b.n	800aae8 <USBD_GetDescriptor+0x320>
    return;
 800aae6:	bf00      	nop
  }
}
 800aae8:	3710      	adds	r7, #16
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	bf00      	nop

0800aaf0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	889b      	ldrh	r3, [r3, #4]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d131      	bne.n	800ab66 <USBD_SetAddress+0x76>
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	88db      	ldrh	r3, [r3, #6]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d12d      	bne.n	800ab66 <USBD_SetAddress+0x76>
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	885b      	ldrh	r3, [r3, #2]
 800ab0e:	2b7f      	cmp	r3, #127	; 0x7f
 800ab10:	d829      	bhi.n	800ab66 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	885b      	ldrh	r3, [r3, #2]
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab1c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	2b03      	cmp	r3, #3
 800ab28:	d104      	bne.n	800ab34 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ab2a:	6839      	ldr	r1, [r7, #0]
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 f9a3 	bl	800ae78 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab32:	e01d      	b.n	800ab70 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	7bfa      	ldrb	r2, [r7, #15]
 800ab38:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ab3c:	7bfb      	ldrb	r3, [r7, #15]
 800ab3e:	4619      	mov	r1, r3
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 fe7c 	bl	800b83e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 fa61 	bl	800b00e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ab4c:	7bfb      	ldrb	r3, [r7, #15]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d004      	beq.n	800ab5c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2202      	movs	r2, #2
 800ab56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab5a:	e009      	b.n	800ab70 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab64:	e004      	b.n	800ab70 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ab66:	6839      	ldr	r1, [r7, #0]
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f000 f985 	bl	800ae78 <USBD_CtlError>
  }
}
 800ab6e:	bf00      	nop
 800ab70:	bf00      	nop
 800ab72:	3710      	adds	r7, #16
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab82:	2300      	movs	r3, #0
 800ab84:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	885b      	ldrh	r3, [r3, #2]
 800ab8a:	b2da      	uxtb	r2, r3
 800ab8c:	4b4c      	ldr	r3, [pc, #304]	; (800acc0 <USBD_SetConfig+0x148>)
 800ab8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ab90:	4b4b      	ldr	r3, [pc, #300]	; (800acc0 <USBD_SetConfig+0x148>)
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d905      	bls.n	800aba4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ab98:	6839      	ldr	r1, [r7, #0]
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 f96c 	bl	800ae78 <USBD_CtlError>
    return USBD_FAIL;
 800aba0:	2303      	movs	r3, #3
 800aba2:	e088      	b.n	800acb6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	2b02      	cmp	r3, #2
 800abae:	d002      	beq.n	800abb6 <USBD_SetConfig+0x3e>
 800abb0:	2b03      	cmp	r3, #3
 800abb2:	d025      	beq.n	800ac00 <USBD_SetConfig+0x88>
 800abb4:	e071      	b.n	800ac9a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800abb6:	4b42      	ldr	r3, [pc, #264]	; (800acc0 <USBD_SetConfig+0x148>)
 800abb8:	781b      	ldrb	r3, [r3, #0]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d01c      	beq.n	800abf8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800abbe:	4b40      	ldr	r3, [pc, #256]	; (800acc0 <USBD_SetConfig+0x148>)
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	461a      	mov	r2, r3
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800abc8:	4b3d      	ldr	r3, [pc, #244]	; (800acc0 <USBD_SetConfig+0x148>)
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	4619      	mov	r1, r3
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f7ff f992 	bl	8009ef8 <USBD_SetClassConfig>
 800abd4:	4603      	mov	r3, r0
 800abd6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800abd8:	7bfb      	ldrb	r3, [r7, #15]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d004      	beq.n	800abe8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800abde:	6839      	ldr	r1, [r7, #0]
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f000 f949 	bl	800ae78 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800abe6:	e065      	b.n	800acb4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 fa10 	bl	800b00e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2203      	movs	r2, #3
 800abf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800abf6:	e05d      	b.n	800acb4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f000 fa08 	bl	800b00e <USBD_CtlSendStatus>
      break;
 800abfe:	e059      	b.n	800acb4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ac00:	4b2f      	ldr	r3, [pc, #188]	; (800acc0 <USBD_SetConfig+0x148>)
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d112      	bne.n	800ac2e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2202      	movs	r2, #2
 800ac0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ac10:	4b2b      	ldr	r3, [pc, #172]	; (800acc0 <USBD_SetConfig+0x148>)
 800ac12:	781b      	ldrb	r3, [r3, #0]
 800ac14:	461a      	mov	r2, r3
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ac1a:	4b29      	ldr	r3, [pc, #164]	; (800acc0 <USBD_SetConfig+0x148>)
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	4619      	mov	r1, r3
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f7ff f985 	bl	8009f30 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 f9f1 	bl	800b00e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ac2c:	e042      	b.n	800acb4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800ac2e:	4b24      	ldr	r3, [pc, #144]	; (800acc0 <USBD_SetConfig+0x148>)
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	461a      	mov	r2, r3
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d02a      	beq.n	800ac92 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	4619      	mov	r1, r3
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f7ff f973 	bl	8009f30 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ac4a:	4b1d      	ldr	r3, [pc, #116]	; (800acc0 <USBD_SetConfig+0x148>)
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	461a      	mov	r2, r3
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ac54:	4b1a      	ldr	r3, [pc, #104]	; (800acc0 <USBD_SetConfig+0x148>)
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	4619      	mov	r1, r3
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f7ff f94c 	bl	8009ef8 <USBD_SetClassConfig>
 800ac60:	4603      	mov	r3, r0
 800ac62:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ac64:	7bfb      	ldrb	r3, [r7, #15]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d00f      	beq.n	800ac8a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800ac6a:	6839      	ldr	r1, [r7, #0]
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f000 f903 	bl	800ae78 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	4619      	mov	r1, r3
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f7ff f958 	bl	8009f30 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2202      	movs	r2, #2
 800ac84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ac88:	e014      	b.n	800acb4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 f9bf 	bl	800b00e <USBD_CtlSendStatus>
      break;
 800ac90:	e010      	b.n	800acb4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 f9bb 	bl	800b00e <USBD_CtlSendStatus>
      break;
 800ac98:	e00c      	b.n	800acb4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ac9a:	6839      	ldr	r1, [r7, #0]
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 f8eb 	bl	800ae78 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aca2:	4b07      	ldr	r3, [pc, #28]	; (800acc0 <USBD_SetConfig+0x148>)
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	4619      	mov	r1, r3
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f7ff f941 	bl	8009f30 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800acae:	2303      	movs	r3, #3
 800acb0:	73fb      	strb	r3, [r7, #15]
      break;
 800acb2:	bf00      	nop
  }

  return ret;
 800acb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3710      	adds	r7, #16
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	20002a08 	.word	0x20002a08

0800acc4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	88db      	ldrh	r3, [r3, #6]
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d004      	beq.n	800ace0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800acd6:	6839      	ldr	r1, [r7, #0]
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f000 f8cd 	bl	800ae78 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800acde:	e023      	b.n	800ad28 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ace6:	b2db      	uxtb	r3, r3
 800ace8:	2b02      	cmp	r3, #2
 800acea:	dc02      	bgt.n	800acf2 <USBD_GetConfig+0x2e>
 800acec:	2b00      	cmp	r3, #0
 800acee:	dc03      	bgt.n	800acf8 <USBD_GetConfig+0x34>
 800acf0:	e015      	b.n	800ad1e <USBD_GetConfig+0x5a>
 800acf2:	2b03      	cmp	r3, #3
 800acf4:	d00b      	beq.n	800ad0e <USBD_GetConfig+0x4a>
 800acf6:	e012      	b.n	800ad1e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2200      	movs	r2, #0
 800acfc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	3308      	adds	r3, #8
 800ad02:	2201      	movs	r2, #1
 800ad04:	4619      	mov	r1, r3
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 f927 	bl	800af5a <USBD_CtlSendData>
        break;
 800ad0c:	e00c      	b.n	800ad28 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	3304      	adds	r3, #4
 800ad12:	2201      	movs	r2, #1
 800ad14:	4619      	mov	r1, r3
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 f91f 	bl	800af5a <USBD_CtlSendData>
        break;
 800ad1c:	e004      	b.n	800ad28 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ad1e:	6839      	ldr	r1, [r7, #0]
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 f8a9 	bl	800ae78 <USBD_CtlError>
        break;
 800ad26:	bf00      	nop
}
 800ad28:	bf00      	nop
 800ad2a:	3708      	adds	r7, #8
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	3b01      	subs	r3, #1
 800ad44:	2b02      	cmp	r3, #2
 800ad46:	d81e      	bhi.n	800ad86 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	88db      	ldrh	r3, [r3, #6]
 800ad4c:	2b02      	cmp	r3, #2
 800ad4e:	d004      	beq.n	800ad5a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ad50:	6839      	ldr	r1, [r7, #0]
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 f890 	bl	800ae78 <USBD_CtlError>
        break;
 800ad58:	e01a      	b.n	800ad90 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2201      	movs	r2, #1
 800ad5e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d005      	beq.n	800ad76 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	68db      	ldr	r3, [r3, #12]
 800ad6e:	f043 0202 	orr.w	r2, r3, #2
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	330c      	adds	r3, #12
 800ad7a:	2202      	movs	r2, #2
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 f8eb 	bl	800af5a <USBD_CtlSendData>
      break;
 800ad84:	e004      	b.n	800ad90 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ad86:	6839      	ldr	r1, [r7, #0]
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 f875 	bl	800ae78 <USBD_CtlError>
      break;
 800ad8e:	bf00      	nop
  }
}
 800ad90:	bf00      	nop
 800ad92:	3708      	adds	r7, #8
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	885b      	ldrh	r3, [r3, #2]
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d106      	bne.n	800adb8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2201      	movs	r2, #1
 800adae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 f92b 	bl	800b00e <USBD_CtlSendStatus>
  }
}
 800adb8:	bf00      	nop
 800adba:	3708      	adds	r7, #8
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800add0:	b2db      	uxtb	r3, r3
 800add2:	3b01      	subs	r3, #1
 800add4:	2b02      	cmp	r3, #2
 800add6:	d80b      	bhi.n	800adf0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	885b      	ldrh	r3, [r3, #2]
 800addc:	2b01      	cmp	r3, #1
 800adde:	d10c      	bne.n	800adfa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2200      	movs	r2, #0
 800ade4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f000 f910 	bl	800b00e <USBD_CtlSendStatus>
      }
      break;
 800adee:	e004      	b.n	800adfa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800adf0:	6839      	ldr	r1, [r7, #0]
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 f840 	bl	800ae78 <USBD_CtlError>
      break;
 800adf8:	e000      	b.n	800adfc <USBD_ClrFeature+0x3c>
      break;
 800adfa:	bf00      	nop
  }
}
 800adfc:	bf00      	nop
 800adfe:	3708      	adds	r7, #8
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	781a      	ldrb	r2, [r3, #0]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	781a      	ldrb	r2, [r3, #0]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ae2e:	68f8      	ldr	r0, [r7, #12]
 800ae30:	f7ff fa92 	bl	800a358 <SWAPBYTE>
 800ae34:	4603      	mov	r3, r0
 800ae36:	461a      	mov	r2, r3
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	3301      	adds	r3, #1
 800ae40:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	3301      	adds	r3, #1
 800ae46:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ae48:	68f8      	ldr	r0, [r7, #12]
 800ae4a:	f7ff fa85 	bl	800a358 <SWAPBYTE>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	461a      	mov	r2, r3
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	3301      	adds	r3, #1
 800ae5a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	3301      	adds	r3, #1
 800ae60:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ae62:	68f8      	ldr	r0, [r7, #12]
 800ae64:	f7ff fa78 	bl	800a358 <SWAPBYTE>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	80da      	strh	r2, [r3, #6]
}
 800ae70:	bf00      	nop
 800ae72:	3710      	adds	r7, #16
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b082      	sub	sp, #8
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae82:	2180      	movs	r1, #128	; 0x80
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 fc6f 	bl	800b768 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ae8a:	2100      	movs	r1, #0
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f000 fc6b 	bl	800b768 <USBD_LL_StallEP>
}
 800ae92:	bf00      	nop
 800ae94:	3708      	adds	r7, #8
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}

0800ae9a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ae9a:	b580      	push	{r7, lr}
 800ae9c:	b086      	sub	sp, #24
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	60f8      	str	r0, [r7, #12]
 800aea2:	60b9      	str	r1, [r7, #8]
 800aea4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aea6:	2300      	movs	r3, #0
 800aea8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d036      	beq.n	800af1e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800aeb4:	6938      	ldr	r0, [r7, #16]
 800aeb6:	f000 f836 	bl	800af26 <USBD_GetLen>
 800aeba:	4603      	mov	r3, r0
 800aebc:	3301      	adds	r3, #1
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	005b      	lsls	r3, r3, #1
 800aec2:	b29a      	uxth	r2, r3
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800aec8:	7dfb      	ldrb	r3, [r7, #23]
 800aeca:	68ba      	ldr	r2, [r7, #8]
 800aecc:	4413      	add	r3, r2
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	7812      	ldrb	r2, [r2, #0]
 800aed2:	701a      	strb	r2, [r3, #0]
  idx++;
 800aed4:	7dfb      	ldrb	r3, [r7, #23]
 800aed6:	3301      	adds	r3, #1
 800aed8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800aeda:	7dfb      	ldrb	r3, [r7, #23]
 800aedc:	68ba      	ldr	r2, [r7, #8]
 800aede:	4413      	add	r3, r2
 800aee0:	2203      	movs	r2, #3
 800aee2:	701a      	strb	r2, [r3, #0]
  idx++;
 800aee4:	7dfb      	ldrb	r3, [r7, #23]
 800aee6:	3301      	adds	r3, #1
 800aee8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800aeea:	e013      	b.n	800af14 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800aeec:	7dfb      	ldrb	r3, [r7, #23]
 800aeee:	68ba      	ldr	r2, [r7, #8]
 800aef0:	4413      	add	r3, r2
 800aef2:	693a      	ldr	r2, [r7, #16]
 800aef4:	7812      	ldrb	r2, [r2, #0]
 800aef6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	3301      	adds	r3, #1
 800aefc:	613b      	str	r3, [r7, #16]
    idx++;
 800aefe:	7dfb      	ldrb	r3, [r7, #23]
 800af00:	3301      	adds	r3, #1
 800af02:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800af04:	7dfb      	ldrb	r3, [r7, #23]
 800af06:	68ba      	ldr	r2, [r7, #8]
 800af08:	4413      	add	r3, r2
 800af0a:	2200      	movs	r2, #0
 800af0c:	701a      	strb	r2, [r3, #0]
    idx++;
 800af0e:	7dfb      	ldrb	r3, [r7, #23]
 800af10:	3301      	adds	r3, #1
 800af12:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d1e7      	bne.n	800aeec <USBD_GetString+0x52>
 800af1c:	e000      	b.n	800af20 <USBD_GetString+0x86>
    return;
 800af1e:	bf00      	nop
  }
}
 800af20:	3718      	adds	r7, #24
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}

0800af26 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800af26:	b480      	push	{r7}
 800af28:	b085      	sub	sp, #20
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800af2e:	2300      	movs	r3, #0
 800af30:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800af36:	e005      	b.n	800af44 <USBD_GetLen+0x1e>
  {
    len++;
 800af38:	7bfb      	ldrb	r3, [r7, #15]
 800af3a:	3301      	adds	r3, #1
 800af3c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	3301      	adds	r3, #1
 800af42:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d1f5      	bne.n	800af38 <USBD_GetLen+0x12>
  }

  return len;
 800af4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3714      	adds	r7, #20
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr

0800af5a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b084      	sub	sp, #16
 800af5e:	af00      	add	r7, sp, #0
 800af60:	60f8      	str	r0, [r7, #12]
 800af62:	60b9      	str	r1, [r7, #8]
 800af64:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2202      	movs	r2, #2
 800af6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	68ba      	ldr	r2, [r7, #8]
 800af7e:	2100      	movs	r1, #0
 800af80:	68f8      	ldr	r0, [r7, #12]
 800af82:	f000 fc7b 	bl	800b87c <USBD_LL_Transmit>

  return USBD_OK;
 800af86:	2300      	movs	r3, #0
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3710      	adds	r7, #16
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	68ba      	ldr	r2, [r7, #8]
 800afa0:	2100      	movs	r1, #0
 800afa2:	68f8      	ldr	r0, [r7, #12]
 800afa4:	f000 fc6a 	bl	800b87c <USBD_LL_Transmit>

  return USBD_OK;
 800afa8:	2300      	movs	r3, #0
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3710      	adds	r7, #16
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b084      	sub	sp, #16
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	60f8      	str	r0, [r7, #12]
 800afba:	60b9      	str	r1, [r7, #8]
 800afbc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2203      	movs	r2, #3
 800afc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	68ba      	ldr	r2, [r7, #8]
 800afda:	2100      	movs	r1, #0
 800afdc:	68f8      	ldr	r0, [r7, #12]
 800afde:	f000 fc6e 	bl	800b8be <USBD_LL_PrepareReceive>

  return USBD_OK;
 800afe2:	2300      	movs	r3, #0
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3710      	adds	r7, #16
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	68ba      	ldr	r2, [r7, #8]
 800affc:	2100      	movs	r1, #0
 800affe:	68f8      	ldr	r0, [r7, #12]
 800b000:	f000 fc5d 	bl	800b8be <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b004:	2300      	movs	r3, #0
}
 800b006:	4618      	mov	r0, r3
 800b008:	3710      	adds	r7, #16
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}

0800b00e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b00e:	b580      	push	{r7, lr}
 800b010:	b082      	sub	sp, #8
 800b012:	af00      	add	r7, sp, #0
 800b014:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2204      	movs	r2, #4
 800b01a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b01e:	2300      	movs	r3, #0
 800b020:	2200      	movs	r2, #0
 800b022:	2100      	movs	r1, #0
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 fc29 	bl	800b87c <USBD_LL_Transmit>

  return USBD_OK;
 800b02a:	2300      	movs	r3, #0
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3708      	adds	r7, #8
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b082      	sub	sp, #8
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2205      	movs	r2, #5
 800b040:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b044:	2300      	movs	r3, #0
 800b046:	2200      	movs	r2, #0
 800b048:	2100      	movs	r1, #0
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 fc37 	bl	800b8be <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b050:	2300      	movs	r3, #0
}
 800b052:	4618      	mov	r0, r3
 800b054:	3708      	adds	r7, #8
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
	...

0800b05c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b060:	2200      	movs	r2, #0
 800b062:	4912      	ldr	r1, [pc, #72]	; (800b0ac <MX_USB_Device_Init+0x50>)
 800b064:	4812      	ldr	r0, [pc, #72]	; (800b0b0 <MX_USB_Device_Init+0x54>)
 800b066:	f7fe fed9 	bl	8009e1c <USBD_Init>
 800b06a:	4603      	mov	r3, r0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d001      	beq.n	800b074 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b070:	f7f5 fc4a 	bl	8000908 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b074:	490f      	ldr	r1, [pc, #60]	; (800b0b4 <MX_USB_Device_Init+0x58>)
 800b076:	480e      	ldr	r0, [pc, #56]	; (800b0b0 <MX_USB_Device_Init+0x54>)
 800b078:	f7fe ff00 	bl	8009e7c <USBD_RegisterClass>
 800b07c:	4603      	mov	r3, r0
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d001      	beq.n	800b086 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b082:	f7f5 fc41 	bl	8000908 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b086:	490c      	ldr	r1, [pc, #48]	; (800b0b8 <MX_USB_Device_Init+0x5c>)
 800b088:	4809      	ldr	r0, [pc, #36]	; (800b0b0 <MX_USB_Device_Init+0x54>)
 800b08a:	f7fe fe51 	bl	8009d30 <USBD_CDC_RegisterInterface>
 800b08e:	4603      	mov	r3, r0
 800b090:	2b00      	cmp	r3, #0
 800b092:	d001      	beq.n	800b098 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b094:	f7f5 fc38 	bl	8000908 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b098:	4805      	ldr	r0, [pc, #20]	; (800b0b0 <MX_USB_Device_Init+0x54>)
 800b09a:	f7fe ff16 	bl	8009eca <USBD_Start>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d001      	beq.n	800b0a8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b0a4:	f7f5 fc30 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b0a8:	bf00      	nop
 800b0aa:	bd80      	pop	{r7, pc}
 800b0ac:	20002800 	.word	0x20002800
 800b0b0:	20002a0c 	.word	0x20002a0c
 800b0b4:	200026e8 	.word	0x200026e8
 800b0b8:	200027ec 	.word	0x200027ec

0800b0bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	4905      	ldr	r1, [pc, #20]	; (800b0d8 <CDC_Init_FS+0x1c>)
 800b0c4:	4805      	ldr	r0, [pc, #20]	; (800b0dc <CDC_Init_FS+0x20>)
 800b0c6:	f7fe fe48 	bl	8009d5a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b0ca:	4905      	ldr	r1, [pc, #20]	; (800b0e0 <CDC_Init_FS+0x24>)
 800b0cc:	4803      	ldr	r0, [pc, #12]	; (800b0dc <CDC_Init_FS+0x20>)
 800b0ce:	f7fe fe62 	bl	8009d96 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b0d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	bd80      	pop	{r7, pc}
 800b0d8:	200034dc 	.word	0x200034dc
 800b0dc:	20002a0c 	.word	0x20002a0c
 800b0e0:	20002cdc 	.word	0x20002cdc

0800b0e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b0e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr

0800b0f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b083      	sub	sp, #12
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	6039      	str	r1, [r7, #0]
 800b0fe:	71fb      	strb	r3, [r7, #7]
 800b100:	4613      	mov	r3, r2
 800b102:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b104:	79fb      	ldrb	r3, [r7, #7]
 800b106:	2b23      	cmp	r3, #35	; 0x23
 800b108:	d84a      	bhi.n	800b1a0 <CDC_Control_FS+0xac>
 800b10a:	a201      	add	r2, pc, #4	; (adr r2, 800b110 <CDC_Control_FS+0x1c>)
 800b10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b110:	0800b1a1 	.word	0x0800b1a1
 800b114:	0800b1a1 	.word	0x0800b1a1
 800b118:	0800b1a1 	.word	0x0800b1a1
 800b11c:	0800b1a1 	.word	0x0800b1a1
 800b120:	0800b1a1 	.word	0x0800b1a1
 800b124:	0800b1a1 	.word	0x0800b1a1
 800b128:	0800b1a1 	.word	0x0800b1a1
 800b12c:	0800b1a1 	.word	0x0800b1a1
 800b130:	0800b1a1 	.word	0x0800b1a1
 800b134:	0800b1a1 	.word	0x0800b1a1
 800b138:	0800b1a1 	.word	0x0800b1a1
 800b13c:	0800b1a1 	.word	0x0800b1a1
 800b140:	0800b1a1 	.word	0x0800b1a1
 800b144:	0800b1a1 	.word	0x0800b1a1
 800b148:	0800b1a1 	.word	0x0800b1a1
 800b14c:	0800b1a1 	.word	0x0800b1a1
 800b150:	0800b1a1 	.word	0x0800b1a1
 800b154:	0800b1a1 	.word	0x0800b1a1
 800b158:	0800b1a1 	.word	0x0800b1a1
 800b15c:	0800b1a1 	.word	0x0800b1a1
 800b160:	0800b1a1 	.word	0x0800b1a1
 800b164:	0800b1a1 	.word	0x0800b1a1
 800b168:	0800b1a1 	.word	0x0800b1a1
 800b16c:	0800b1a1 	.word	0x0800b1a1
 800b170:	0800b1a1 	.word	0x0800b1a1
 800b174:	0800b1a1 	.word	0x0800b1a1
 800b178:	0800b1a1 	.word	0x0800b1a1
 800b17c:	0800b1a1 	.word	0x0800b1a1
 800b180:	0800b1a1 	.word	0x0800b1a1
 800b184:	0800b1a1 	.word	0x0800b1a1
 800b188:	0800b1a1 	.word	0x0800b1a1
 800b18c:	0800b1a1 	.word	0x0800b1a1
 800b190:	0800b1a1 	.word	0x0800b1a1
 800b194:	0800b1a1 	.word	0x0800b1a1
 800b198:	0800b1a1 	.word	0x0800b1a1
 800b19c:	0800b1a1 	.word	0x0800b1a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b1a0:	bf00      	nop
  }

  return (USBD_OK);
 800b1a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b082      	sub	sp, #8
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b1ba:	6879      	ldr	r1, [r7, #4]
 800b1bc:	4805      	ldr	r0, [pc, #20]	; (800b1d4 <CDC_Receive_FS+0x24>)
 800b1be:	f7fe fdea 	bl	8009d96 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b1c2:	4804      	ldr	r0, [pc, #16]	; (800b1d4 <CDC_Receive_FS+0x24>)
 800b1c4:	f7fe fe00 	bl	8009dc8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b1c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3708      	adds	r7, #8
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	20002a0c 	.word	0x20002a0c

0800b1d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b087      	sub	sp, #28
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	60f8      	str	r0, [r7, #12]
 800b1e0:	60b9      	str	r1, [r7, #8]
 800b1e2:	4613      	mov	r3, r2
 800b1e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b1ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	371c      	adds	r7, #28
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr
	...

0800b1fc <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b083      	sub	sp, #12
 800b200:	af00      	add	r7, sp, #0
 800b202:	4603      	mov	r3, r0
 800b204:	6039      	str	r1, [r7, #0]
 800b206:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	2212      	movs	r2, #18
 800b20c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b20e:	4b03      	ldr	r3, [pc, #12]	; (800b21c <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b210:	4618      	mov	r0, r3
 800b212:	370c      	adds	r7, #12
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr
 800b21c:	20002820 	.word	0x20002820

0800b220 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b220:	b480      	push	{r7}
 800b222:	b083      	sub	sp, #12
 800b224:	af00      	add	r7, sp, #0
 800b226:	4603      	mov	r3, r0
 800b228:	6039      	str	r1, [r7, #0]
 800b22a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	2204      	movs	r2, #4
 800b230:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b232:	4b03      	ldr	r3, [pc, #12]	; (800b240 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b234:	4618      	mov	r0, r3
 800b236:	370c      	adds	r7, #12
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr
 800b240:	20002834 	.word	0x20002834

0800b244 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b082      	sub	sp, #8
 800b248:	af00      	add	r7, sp, #0
 800b24a:	4603      	mov	r3, r0
 800b24c:	6039      	str	r1, [r7, #0]
 800b24e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b250:	79fb      	ldrb	r3, [r7, #7]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d105      	bne.n	800b262 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b256:	683a      	ldr	r2, [r7, #0]
 800b258:	4907      	ldr	r1, [pc, #28]	; (800b278 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b25a:	4808      	ldr	r0, [pc, #32]	; (800b27c <USBD_CDC_ProductStrDescriptor+0x38>)
 800b25c:	f7ff fe1d 	bl	800ae9a <USBD_GetString>
 800b260:	e004      	b.n	800b26c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b262:	683a      	ldr	r2, [r7, #0]
 800b264:	4904      	ldr	r1, [pc, #16]	; (800b278 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b266:	4805      	ldr	r0, [pc, #20]	; (800b27c <USBD_CDC_ProductStrDescriptor+0x38>)
 800b268:	f7ff fe17 	bl	800ae9a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b26c:	4b02      	ldr	r3, [pc, #8]	; (800b278 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3708      	adds	r7, #8
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop
 800b278:	20003cdc 	.word	0x20003cdc
 800b27c:	0800ba98 	.word	0x0800ba98

0800b280 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b082      	sub	sp, #8
 800b284:	af00      	add	r7, sp, #0
 800b286:	4603      	mov	r3, r0
 800b288:	6039      	str	r1, [r7, #0]
 800b28a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b28c:	683a      	ldr	r2, [r7, #0]
 800b28e:	4904      	ldr	r1, [pc, #16]	; (800b2a0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b290:	4804      	ldr	r0, [pc, #16]	; (800b2a4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b292:	f7ff fe02 	bl	800ae9a <USBD_GetString>
  return USBD_StrDesc;
 800b296:	4b02      	ldr	r3, [pc, #8]	; (800b2a0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3708      	adds	r7, #8
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}
 800b2a0:	20003cdc 	.word	0x20003cdc
 800b2a4:	0800bab0 	.word	0x0800bab0

0800b2a8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	6039      	str	r1, [r7, #0]
 800b2b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	221a      	movs	r2, #26
 800b2b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b2ba:	f000 f843 	bl	800b344 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b2be:	4b02      	ldr	r3, [pc, #8]	; (800b2c8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3708      	adds	r7, #8
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}
 800b2c8:	20002838 	.word	0x20002838

0800b2cc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b082      	sub	sp, #8
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	6039      	str	r1, [r7, #0]
 800b2d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b2d8:	79fb      	ldrb	r3, [r7, #7]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d105      	bne.n	800b2ea <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b2de:	683a      	ldr	r2, [r7, #0]
 800b2e0:	4907      	ldr	r1, [pc, #28]	; (800b300 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b2e2:	4808      	ldr	r0, [pc, #32]	; (800b304 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b2e4:	f7ff fdd9 	bl	800ae9a <USBD_GetString>
 800b2e8:	e004      	b.n	800b2f4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b2ea:	683a      	ldr	r2, [r7, #0]
 800b2ec:	4904      	ldr	r1, [pc, #16]	; (800b300 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b2ee:	4805      	ldr	r0, [pc, #20]	; (800b304 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b2f0:	f7ff fdd3 	bl	800ae9a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b2f4:	4b02      	ldr	r3, [pc, #8]	; (800b300 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3708      	adds	r7, #8
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	20003cdc 	.word	0x20003cdc
 800b304:	0800bac4 	.word	0x0800bac4

0800b308 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b082      	sub	sp, #8
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	4603      	mov	r3, r0
 800b310:	6039      	str	r1, [r7, #0]
 800b312:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b314:	79fb      	ldrb	r3, [r7, #7]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d105      	bne.n	800b326 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b31a:	683a      	ldr	r2, [r7, #0]
 800b31c:	4907      	ldr	r1, [pc, #28]	; (800b33c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b31e:	4808      	ldr	r0, [pc, #32]	; (800b340 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b320:	f7ff fdbb 	bl	800ae9a <USBD_GetString>
 800b324:	e004      	b.n	800b330 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b326:	683a      	ldr	r2, [r7, #0]
 800b328:	4904      	ldr	r1, [pc, #16]	; (800b33c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b32a:	4805      	ldr	r0, [pc, #20]	; (800b340 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b32c:	f7ff fdb5 	bl	800ae9a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b330:	4b02      	ldr	r3, [pc, #8]	; (800b33c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b332:	4618      	mov	r0, r3
 800b334:	3708      	adds	r7, #8
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
 800b33a:	bf00      	nop
 800b33c:	20003cdc 	.word	0x20003cdc
 800b340:	0800bad0 	.word	0x0800bad0

0800b344 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b084      	sub	sp, #16
 800b348:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b34a:	4b0f      	ldr	r3, [pc, #60]	; (800b388 <Get_SerialNum+0x44>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b350:	4b0e      	ldr	r3, [pc, #56]	; (800b38c <Get_SerialNum+0x48>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b356:	4b0e      	ldr	r3, [pc, #56]	; (800b390 <Get_SerialNum+0x4c>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b35c:	68fa      	ldr	r2, [r7, #12]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	4413      	add	r3, r2
 800b362:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d009      	beq.n	800b37e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b36a:	2208      	movs	r2, #8
 800b36c:	4909      	ldr	r1, [pc, #36]	; (800b394 <Get_SerialNum+0x50>)
 800b36e:	68f8      	ldr	r0, [r7, #12]
 800b370:	f000 f814 	bl	800b39c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b374:	2204      	movs	r2, #4
 800b376:	4908      	ldr	r1, [pc, #32]	; (800b398 <Get_SerialNum+0x54>)
 800b378:	68b8      	ldr	r0, [r7, #8]
 800b37a:	f000 f80f 	bl	800b39c <IntToUnicode>
  }
}
 800b37e:	bf00      	nop
 800b380:	3710      	adds	r7, #16
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	1fff7590 	.word	0x1fff7590
 800b38c:	1fff7594 	.word	0x1fff7594
 800b390:	1fff7598 	.word	0x1fff7598
 800b394:	2000283a 	.word	0x2000283a
 800b398:	2000284a 	.word	0x2000284a

0800b39c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b087      	sub	sp, #28
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	60f8      	str	r0, [r7, #12]
 800b3a4:	60b9      	str	r1, [r7, #8]
 800b3a6:	4613      	mov	r3, r2
 800b3a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	75fb      	strb	r3, [r7, #23]
 800b3b2:	e027      	b.n	800b404 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	0f1b      	lsrs	r3, r3, #28
 800b3b8:	2b09      	cmp	r3, #9
 800b3ba:	d80b      	bhi.n	800b3d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	0f1b      	lsrs	r3, r3, #28
 800b3c0:	b2da      	uxtb	r2, r3
 800b3c2:	7dfb      	ldrb	r3, [r7, #23]
 800b3c4:	005b      	lsls	r3, r3, #1
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	440b      	add	r3, r1
 800b3cc:	3230      	adds	r2, #48	; 0x30
 800b3ce:	b2d2      	uxtb	r2, r2
 800b3d0:	701a      	strb	r2, [r3, #0]
 800b3d2:	e00a      	b.n	800b3ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	0f1b      	lsrs	r3, r3, #28
 800b3d8:	b2da      	uxtb	r2, r3
 800b3da:	7dfb      	ldrb	r3, [r7, #23]
 800b3dc:	005b      	lsls	r3, r3, #1
 800b3de:	4619      	mov	r1, r3
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	440b      	add	r3, r1
 800b3e4:	3237      	adds	r2, #55	; 0x37
 800b3e6:	b2d2      	uxtb	r2, r2
 800b3e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	011b      	lsls	r3, r3, #4
 800b3ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b3f0:	7dfb      	ldrb	r3, [r7, #23]
 800b3f2:	005b      	lsls	r3, r3, #1
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	68ba      	ldr	r2, [r7, #8]
 800b3f8:	4413      	add	r3, r2
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b3fe:	7dfb      	ldrb	r3, [r7, #23]
 800b400:	3301      	adds	r3, #1
 800b402:	75fb      	strb	r3, [r7, #23]
 800b404:	7dfa      	ldrb	r2, [r7, #23]
 800b406:	79fb      	ldrb	r3, [r7, #7]
 800b408:	429a      	cmp	r2, r3
 800b40a:	d3d3      	bcc.n	800b3b4 <IntToUnicode+0x18>
  }
}
 800b40c:	bf00      	nop
 800b40e:	bf00      	nop
 800b410:	371c      	adds	r7, #28
 800b412:	46bd      	mov	sp, r7
 800b414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b418:	4770      	bx	lr
	...

0800b41c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b098      	sub	sp, #96	; 0x60
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b424:	f107 030c 	add.w	r3, r7, #12
 800b428:	2254      	movs	r2, #84	; 0x54
 800b42a:	2100      	movs	r1, #0
 800b42c:	4618      	mov	r0, r3
 800b42e:	f000 fb1f 	bl	800ba70 <memset>
  if(pcdHandle->Instance==USB)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a15      	ldr	r2, [pc, #84]	; (800b48c <HAL_PCD_MspInit+0x70>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d122      	bne.n	800b482 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b43c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b440:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b442:	2300      	movs	r3, #0
 800b444:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b446:	f107 030c 	add.w	r3, r7, #12
 800b44a:	4618      	mov	r0, r3
 800b44c:	f7fa f9a0 	bl	8005790 <HAL_RCCEx_PeriphCLKConfig>
 800b450:	4603      	mov	r3, r0
 800b452:	2b00      	cmp	r3, #0
 800b454:	d001      	beq.n	800b45a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800b456:	f7f5 fa57 	bl	8000908 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b45a:	4b0d      	ldr	r3, [pc, #52]	; (800b490 <HAL_PCD_MspInit+0x74>)
 800b45c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b45e:	4a0c      	ldr	r2, [pc, #48]	; (800b490 <HAL_PCD_MspInit+0x74>)
 800b460:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b464:	6593      	str	r3, [r2, #88]	; 0x58
 800b466:	4b0a      	ldr	r3, [pc, #40]	; (800b490 <HAL_PCD_MspInit+0x74>)
 800b468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b46a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b46e:	60bb      	str	r3, [r7, #8]
 800b470:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b472:	2200      	movs	r2, #0
 800b474:	2100      	movs	r1, #0
 800b476:	2014      	movs	r0, #20
 800b478:	f7f6 fea3 	bl	80021c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b47c:	2014      	movs	r0, #20
 800b47e:	f7f6 feba 	bl	80021f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b482:	bf00      	nop
 800b484:	3760      	adds	r7, #96	; 0x60
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop
 800b48c:	40005c00 	.word	0x40005c00
 800b490:	40021000 	.word	0x40021000

0800b494 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b082      	sub	sp, #8
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	4610      	mov	r0, r2
 800b4ac:	f7fe fd58 	bl	8009f60 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b4b0:	bf00      	nop
 800b4b2:	3708      	adds	r7, #8
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}

0800b4b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b4ca:	78fa      	ldrb	r2, [r7, #3]
 800b4cc:	6879      	ldr	r1, [r7, #4]
 800b4ce:	4613      	mov	r3, r2
 800b4d0:	009b      	lsls	r3, r3, #2
 800b4d2:	4413      	add	r3, r2
 800b4d4:	00db      	lsls	r3, r3, #3
 800b4d6:	440b      	add	r3, r1
 800b4d8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b4dc:	681a      	ldr	r2, [r3, #0]
 800b4de:	78fb      	ldrb	r3, [r7, #3]
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	f7fe fd92 	bl	800a00a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b4e6:	bf00      	nop
 800b4e8:	3708      	adds	r7, #8
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}

0800b4ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4ee:	b580      	push	{r7, lr}
 800b4f0:	b082      	sub	sp, #8
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b500:	78fa      	ldrb	r2, [r7, #3]
 800b502:	6879      	ldr	r1, [r7, #4]
 800b504:	4613      	mov	r3, r2
 800b506:	009b      	lsls	r3, r3, #2
 800b508:	4413      	add	r3, r2
 800b50a:	00db      	lsls	r3, r3, #3
 800b50c:	440b      	add	r3, r1
 800b50e:	333c      	adds	r3, #60	; 0x3c
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	78fb      	ldrb	r3, [r7, #3]
 800b514:	4619      	mov	r1, r3
 800b516:	f7fe fddb 	bl	800a0d0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b51a:	bf00      	nop
 800b51c:	3708      	adds	r7, #8
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}

0800b522 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b522:	b580      	push	{r7, lr}
 800b524:	b082      	sub	sp, #8
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b530:	4618      	mov	r0, r3
 800b532:	f7fe feef 	bl	800a314 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b536:	bf00      	nop
 800b538:	3708      	adds	r7, #8
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}

0800b53e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b53e:	b580      	push	{r7, lr}
 800b540:	b084      	sub	sp, #16
 800b542:	af00      	add	r7, sp, #0
 800b544:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b546:	2301      	movs	r3, #1
 800b548:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	689b      	ldr	r3, [r3, #8]
 800b54e:	2b02      	cmp	r3, #2
 800b550:	d001      	beq.n	800b556 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b552:	f7f5 f9d9 	bl	8000908 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b55c:	7bfa      	ldrb	r2, [r7, #15]
 800b55e:	4611      	mov	r1, r2
 800b560:	4618      	mov	r0, r3
 800b562:	f7fe fe99 	bl	800a298 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b56c:	4618      	mov	r0, r3
 800b56e:	f7fe fe45 	bl	800a1fc <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b572:	bf00      	nop
 800b574:	3710      	adds	r7, #16
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
	...

0800b57c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b082      	sub	sp, #8
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b58a:	4618      	mov	r0, r3
 800b58c:	f7fe fe94 	bl	800a2b8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	699b      	ldr	r3, [r3, #24]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d005      	beq.n	800b5a4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b598:	4b04      	ldr	r3, [pc, #16]	; (800b5ac <HAL_PCD_SuspendCallback+0x30>)
 800b59a:	691b      	ldr	r3, [r3, #16]
 800b59c:	4a03      	ldr	r2, [pc, #12]	; (800b5ac <HAL_PCD_SuspendCallback+0x30>)
 800b59e:	f043 0306 	orr.w	r3, r3, #6
 800b5a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b5a4:	bf00      	nop
 800b5a6:	3708      	adds	r7, #8
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}
 800b5ac:	e000ed00 	.word	0xe000ed00

0800b5b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b082      	sub	sp, #8
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	699b      	ldr	r3, [r3, #24]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d007      	beq.n	800b5d0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b5c0:	4b08      	ldr	r3, [pc, #32]	; (800b5e4 <HAL_PCD_ResumeCallback+0x34>)
 800b5c2:	691b      	ldr	r3, [r3, #16]
 800b5c4:	4a07      	ldr	r2, [pc, #28]	; (800b5e4 <HAL_PCD_ResumeCallback+0x34>)
 800b5c6:	f023 0306 	bic.w	r3, r3, #6
 800b5ca:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b5cc:	f000 f9fa 	bl	800b9c4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7fe fe84 	bl	800a2e4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800b5dc:	bf00      	nop
 800b5de:	3708      	adds	r7, #8
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}
 800b5e4:	e000ed00 	.word	0xe000ed00

0800b5e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800b5f0:	4a2b      	ldr	r2, [pc, #172]	; (800b6a0 <USBD_LL_Init+0xb8>)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	4a29      	ldr	r2, [pc, #164]	; (800b6a0 <USBD_LL_Init+0xb8>)
 800b5fc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800b600:	4b27      	ldr	r3, [pc, #156]	; (800b6a0 <USBD_LL_Init+0xb8>)
 800b602:	4a28      	ldr	r2, [pc, #160]	; (800b6a4 <USBD_LL_Init+0xbc>)
 800b604:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b606:	4b26      	ldr	r3, [pc, #152]	; (800b6a0 <USBD_LL_Init+0xb8>)
 800b608:	2208      	movs	r2, #8
 800b60a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b60c:	4b24      	ldr	r3, [pc, #144]	; (800b6a0 <USBD_LL_Init+0xb8>)
 800b60e:	2202      	movs	r2, #2
 800b610:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b612:	4b23      	ldr	r3, [pc, #140]	; (800b6a0 <USBD_LL_Init+0xb8>)
 800b614:	2202      	movs	r2, #2
 800b616:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b618:	4b21      	ldr	r3, [pc, #132]	; (800b6a0 <USBD_LL_Init+0xb8>)
 800b61a:	2200      	movs	r2, #0
 800b61c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b61e:	4b20      	ldr	r3, [pc, #128]	; (800b6a0 <USBD_LL_Init+0xb8>)
 800b620:	2200      	movs	r2, #0
 800b622:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b624:	4b1e      	ldr	r3, [pc, #120]	; (800b6a0 <USBD_LL_Init+0xb8>)
 800b626:	2200      	movs	r2, #0
 800b628:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b62a:	4b1d      	ldr	r3, [pc, #116]	; (800b6a0 <USBD_LL_Init+0xb8>)
 800b62c:	2200      	movs	r2, #0
 800b62e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b630:	481b      	ldr	r0, [pc, #108]	; (800b6a0 <USBD_LL_Init+0xb8>)
 800b632:	f7f7 fdd2 	bl	80031da <HAL_PCD_Init>
 800b636:	4603      	mov	r3, r0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d001      	beq.n	800b640 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800b63c:	f7f5 f964 	bl	8000908 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b646:	2318      	movs	r3, #24
 800b648:	2200      	movs	r2, #0
 800b64a:	2100      	movs	r1, #0
 800b64c:	f7f9 fa8b 	bl	8004b66 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b656:	2358      	movs	r3, #88	; 0x58
 800b658:	2200      	movs	r2, #0
 800b65a:	2180      	movs	r1, #128	; 0x80
 800b65c:	f7f9 fa83 	bl	8004b66 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b666:	23c0      	movs	r3, #192	; 0xc0
 800b668:	2200      	movs	r2, #0
 800b66a:	2181      	movs	r1, #129	; 0x81
 800b66c:	f7f9 fa7b 	bl	8004b66 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b676:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b67a:	2200      	movs	r2, #0
 800b67c:	2101      	movs	r1, #1
 800b67e:	f7f9 fa72 	bl	8004b66 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b68c:	2200      	movs	r2, #0
 800b68e:	2182      	movs	r1, #130	; 0x82
 800b690:	f7f9 fa69 	bl	8004b66 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b694:	2300      	movs	r3, #0
}
 800b696:	4618      	mov	r0, r3
 800b698:	3708      	adds	r7, #8
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	20003edc 	.word	0x20003edc
 800b6a4:	40005c00 	.word	0x40005c00

0800b6a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b084      	sub	sp, #16
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7f7 fe70 	bl	80033a4 <HAL_PCD_Start>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6c8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f000 f980 	bl	800b9d0 <USBD_Get_USB_Status>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3710      	adds	r7, #16
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b6de:	b580      	push	{r7, lr}
 800b6e0:	b084      	sub	sp, #16
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
 800b6e6:	4608      	mov	r0, r1
 800b6e8:	4611      	mov	r1, r2
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	70fb      	strb	r3, [r7, #3]
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	70bb      	strb	r3, [r7, #2]
 800b6f4:	4613      	mov	r3, r2
 800b6f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b706:	78bb      	ldrb	r3, [r7, #2]
 800b708:	883a      	ldrh	r2, [r7, #0]
 800b70a:	78f9      	ldrb	r1, [r7, #3]
 800b70c:	f7f7 ffb8 	bl	8003680 <HAL_PCD_EP_Open>
 800b710:	4603      	mov	r3, r0
 800b712:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b714:	7bfb      	ldrb	r3, [r7, #15]
 800b716:	4618      	mov	r0, r3
 800b718:	f000 f95a 	bl	800b9d0 <USBD_Get_USB_Status>
 800b71c:	4603      	mov	r3, r0
 800b71e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b720:	7bbb      	ldrb	r3, [r7, #14]
}
 800b722:	4618      	mov	r0, r3
 800b724:	3710      	adds	r7, #16
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}

0800b72a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b72a:	b580      	push	{r7, lr}
 800b72c:	b084      	sub	sp, #16
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
 800b732:	460b      	mov	r3, r1
 800b734:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b736:	2300      	movs	r3, #0
 800b738:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b73a:	2300      	movs	r3, #0
 800b73c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b744:	78fa      	ldrb	r2, [r7, #3]
 800b746:	4611      	mov	r1, r2
 800b748:	4618      	mov	r0, r3
 800b74a:	f7f7 ffff 	bl	800374c <HAL_PCD_EP_Close>
 800b74e:	4603      	mov	r3, r0
 800b750:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b752:	7bfb      	ldrb	r3, [r7, #15]
 800b754:	4618      	mov	r0, r3
 800b756:	f000 f93b 	bl	800b9d0 <USBD_Get_USB_Status>
 800b75a:	4603      	mov	r3, r0
 800b75c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b75e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b760:	4618      	mov	r0, r3
 800b762:	3710      	adds	r7, #16
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	460b      	mov	r3, r1
 800b772:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b774:	2300      	movs	r3, #0
 800b776:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b778:	2300      	movs	r3, #0
 800b77a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b782:	78fa      	ldrb	r2, [r7, #3]
 800b784:	4611      	mov	r1, r2
 800b786:	4618      	mov	r0, r3
 800b788:	f7f8 f8c0 	bl	800390c <HAL_PCD_EP_SetStall>
 800b78c:	4603      	mov	r3, r0
 800b78e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b790:	7bfb      	ldrb	r3, [r7, #15]
 800b792:	4618      	mov	r0, r3
 800b794:	f000 f91c 	bl	800b9d0 <USBD_Get_USB_Status>
 800b798:	4603      	mov	r3, r0
 800b79a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b79c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3710      	adds	r7, #16
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}

0800b7a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b084      	sub	sp, #16
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
 800b7ae:	460b      	mov	r3, r1
 800b7b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b7c0:	78fa      	ldrb	r2, [r7, #3]
 800b7c2:	4611      	mov	r1, r2
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f7f8 f8f3 	bl	80039b0 <HAL_PCD_EP_ClrStall>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7ce:	7bfb      	ldrb	r3, [r7, #15]
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f000 f8fd 	bl	800b9d0 <USBD_Get_USB_Status>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7da:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3710      	adds	r7, #16
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}

0800b7e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b085      	sub	sp, #20
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	460b      	mov	r3, r1
 800b7ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b7f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b7f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	da0c      	bge.n	800b81a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b800:	78fb      	ldrb	r3, [r7, #3]
 800b802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b806:	68f9      	ldr	r1, [r7, #12]
 800b808:	1c5a      	adds	r2, r3, #1
 800b80a:	4613      	mov	r3, r2
 800b80c:	009b      	lsls	r3, r3, #2
 800b80e:	4413      	add	r3, r2
 800b810:	00db      	lsls	r3, r3, #3
 800b812:	440b      	add	r3, r1
 800b814:	3302      	adds	r3, #2
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	e00b      	b.n	800b832 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b81a:	78fb      	ldrb	r3, [r7, #3]
 800b81c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b820:	68f9      	ldr	r1, [r7, #12]
 800b822:	4613      	mov	r3, r2
 800b824:	009b      	lsls	r3, r3, #2
 800b826:	4413      	add	r3, r2
 800b828:	00db      	lsls	r3, r3, #3
 800b82a:	440b      	add	r3, r1
 800b82c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b830:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b832:	4618      	mov	r0, r3
 800b834:	3714      	adds	r7, #20
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr

0800b83e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b83e:	b580      	push	{r7, lr}
 800b840:	b084      	sub	sp, #16
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
 800b846:	460b      	mov	r3, r1
 800b848:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b84a:	2300      	movs	r3, #0
 800b84c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b84e:	2300      	movs	r3, #0
 800b850:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b858:	78fa      	ldrb	r2, [r7, #3]
 800b85a:	4611      	mov	r1, r2
 800b85c:	4618      	mov	r0, r3
 800b85e:	f7f7 feea 	bl	8003636 <HAL_PCD_SetAddress>
 800b862:	4603      	mov	r3, r0
 800b864:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b866:	7bfb      	ldrb	r3, [r7, #15]
 800b868:	4618      	mov	r0, r3
 800b86a:	f000 f8b1 	bl	800b9d0 <USBD_Get_USB_Status>
 800b86e:	4603      	mov	r3, r0
 800b870:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b872:	7bbb      	ldrb	r3, [r7, #14]
}
 800b874:	4618      	mov	r0, r3
 800b876:	3710      	adds	r7, #16
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b086      	sub	sp, #24
 800b880:	af00      	add	r7, sp, #0
 800b882:	60f8      	str	r0, [r7, #12]
 800b884:	607a      	str	r2, [r7, #4]
 800b886:	603b      	str	r3, [r7, #0]
 800b888:	460b      	mov	r3, r1
 800b88a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b88c:	2300      	movs	r3, #0
 800b88e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b890:	2300      	movs	r3, #0
 800b892:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b89a:	7af9      	ldrb	r1, [r7, #11]
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	687a      	ldr	r2, [r7, #4]
 800b8a0:	f7f7 fff1 	bl	8003886 <HAL_PCD_EP_Transmit>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8a8:	7dfb      	ldrb	r3, [r7, #23]
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f000 f890 	bl	800b9d0 <USBD_Get_USB_Status>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b8b4:	7dbb      	ldrb	r3, [r7, #22]
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3718      	adds	r7, #24
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}

0800b8be <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b8be:	b580      	push	{r7, lr}
 800b8c0:	b086      	sub	sp, #24
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	60f8      	str	r0, [r7, #12]
 800b8c6:	607a      	str	r2, [r7, #4]
 800b8c8:	603b      	str	r3, [r7, #0]
 800b8ca:	460b      	mov	r3, r1
 800b8cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b8dc:	7af9      	ldrb	r1, [r7, #11]
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	f7f7 ff7b 	bl	80037dc <HAL_PCD_EP_Receive>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8ea:	7dfb      	ldrb	r3, [r7, #23]
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f000 f86f 	bl	800b9d0 <USBD_Get_USB_Status>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b8f6:	7dbb      	ldrb	r3, [r7, #22]
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3718      	adds	r7, #24
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b082      	sub	sp, #8
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
 800b908:	460b      	mov	r3, r1
 800b90a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b912:	78fa      	ldrb	r2, [r7, #3]
 800b914:	4611      	mov	r1, r2
 800b916:	4618      	mov	r0, r3
 800b918:	f7f7 ff9d 	bl	8003856 <HAL_PCD_EP_GetRxCount>
 800b91c:	4603      	mov	r3, r0
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3708      	adds	r7, #8
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
	...

0800b928 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b082      	sub	sp, #8
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	460b      	mov	r3, r1
 800b932:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800b934:	78fb      	ldrb	r3, [r7, #3]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d002      	beq.n	800b940 <HAL_PCDEx_LPM_Callback+0x18>
 800b93a:	2b01      	cmp	r3, #1
 800b93c:	d013      	beq.n	800b966 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800b93e:	e023      	b.n	800b988 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	699b      	ldr	r3, [r3, #24]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d007      	beq.n	800b958 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b948:	f000 f83c 	bl	800b9c4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b94c:	4b10      	ldr	r3, [pc, #64]	; (800b990 <HAL_PCDEx_LPM_Callback+0x68>)
 800b94e:	691b      	ldr	r3, [r3, #16]
 800b950:	4a0f      	ldr	r2, [pc, #60]	; (800b990 <HAL_PCDEx_LPM_Callback+0x68>)
 800b952:	f023 0306 	bic.w	r3, r3, #6
 800b956:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b95e:	4618      	mov	r0, r3
 800b960:	f7fe fcc0 	bl	800a2e4 <USBD_LL_Resume>
    break;
 800b964:	e010      	b.n	800b988 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800b96c:	4618      	mov	r0, r3
 800b96e:	f7fe fca3 	bl	800a2b8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	699b      	ldr	r3, [r3, #24]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d005      	beq.n	800b986 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b97a:	4b05      	ldr	r3, [pc, #20]	; (800b990 <HAL_PCDEx_LPM_Callback+0x68>)
 800b97c:	691b      	ldr	r3, [r3, #16]
 800b97e:	4a04      	ldr	r2, [pc, #16]	; (800b990 <HAL_PCDEx_LPM_Callback+0x68>)
 800b980:	f043 0306 	orr.w	r3, r3, #6
 800b984:	6113      	str	r3, [r2, #16]
    break;
 800b986:	bf00      	nop
}
 800b988:	bf00      	nop
 800b98a:	3708      	adds	r7, #8
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}
 800b990:	e000ed00 	.word	0xe000ed00

0800b994 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b994:	b480      	push	{r7}
 800b996:	b083      	sub	sp, #12
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b99c:	4b03      	ldr	r3, [pc, #12]	; (800b9ac <USBD_static_malloc+0x18>)
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	370c      	adds	r7, #12
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr
 800b9aa:	bf00      	nop
 800b9ac:	200041d0 	.word	0x200041d0

0800b9b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]

}
 800b9b8:	bf00      	nop
 800b9ba:	370c      	adds	r7, #12
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c2:	4770      	bx	lr

0800b9c4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b9c8:	f7f4 fcf6 	bl	80003b8 <SystemClock_Config>
}
 800b9cc:	bf00      	nop
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b085      	sub	sp, #20
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b9de:	79fb      	ldrb	r3, [r7, #7]
 800b9e0:	2b03      	cmp	r3, #3
 800b9e2:	d817      	bhi.n	800ba14 <USBD_Get_USB_Status+0x44>
 800b9e4:	a201      	add	r2, pc, #4	; (adr r2, 800b9ec <USBD_Get_USB_Status+0x1c>)
 800b9e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9ea:	bf00      	nop
 800b9ec:	0800b9fd 	.word	0x0800b9fd
 800b9f0:	0800ba03 	.word	0x0800ba03
 800b9f4:	0800ba09 	.word	0x0800ba09
 800b9f8:	0800ba0f 	.word	0x0800ba0f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	73fb      	strb	r3, [r7, #15]
    break;
 800ba00:	e00b      	b.n	800ba1a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba02:	2303      	movs	r3, #3
 800ba04:	73fb      	strb	r3, [r7, #15]
    break;
 800ba06:	e008      	b.n	800ba1a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba08:	2301      	movs	r3, #1
 800ba0a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba0c:	e005      	b.n	800ba1a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba0e:	2303      	movs	r3, #3
 800ba10:	73fb      	strb	r3, [r7, #15]
    break;
 800ba12:	e002      	b.n	800ba1a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ba14:	2303      	movs	r3, #3
 800ba16:	73fb      	strb	r3, [r7, #15]
    break;
 800ba18:	bf00      	nop
  }
  return usb_status;
 800ba1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3714      	adds	r7, #20
 800ba20:	46bd      	mov	sp, r7
 800ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba26:	4770      	bx	lr

0800ba28 <__libc_init_array>:
 800ba28:	b570      	push	{r4, r5, r6, lr}
 800ba2a:	4d0d      	ldr	r5, [pc, #52]	; (800ba60 <__libc_init_array+0x38>)
 800ba2c:	4c0d      	ldr	r4, [pc, #52]	; (800ba64 <__libc_init_array+0x3c>)
 800ba2e:	1b64      	subs	r4, r4, r5
 800ba30:	10a4      	asrs	r4, r4, #2
 800ba32:	2600      	movs	r6, #0
 800ba34:	42a6      	cmp	r6, r4
 800ba36:	d109      	bne.n	800ba4c <__libc_init_array+0x24>
 800ba38:	4d0b      	ldr	r5, [pc, #44]	; (800ba68 <__libc_init_array+0x40>)
 800ba3a:	4c0c      	ldr	r4, [pc, #48]	; (800ba6c <__libc_init_array+0x44>)
 800ba3c:	f000 f820 	bl	800ba80 <_init>
 800ba40:	1b64      	subs	r4, r4, r5
 800ba42:	10a4      	asrs	r4, r4, #2
 800ba44:	2600      	movs	r6, #0
 800ba46:	42a6      	cmp	r6, r4
 800ba48:	d105      	bne.n	800ba56 <__libc_init_array+0x2e>
 800ba4a:	bd70      	pop	{r4, r5, r6, pc}
 800ba4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba50:	4798      	blx	r3
 800ba52:	3601      	adds	r6, #1
 800ba54:	e7ee      	b.n	800ba34 <__libc_init_array+0xc>
 800ba56:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba5a:	4798      	blx	r3
 800ba5c:	3601      	adds	r6, #1
 800ba5e:	e7f2      	b.n	800ba46 <__libc_init_array+0x1e>
 800ba60:	0800baf0 	.word	0x0800baf0
 800ba64:	0800baf0 	.word	0x0800baf0
 800ba68:	0800baf0 	.word	0x0800baf0
 800ba6c:	0800baf4 	.word	0x0800baf4

0800ba70 <memset>:
 800ba70:	4402      	add	r2, r0
 800ba72:	4603      	mov	r3, r0
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d100      	bne.n	800ba7a <memset+0xa>
 800ba78:	4770      	bx	lr
 800ba7a:	f803 1b01 	strb.w	r1, [r3], #1
 800ba7e:	e7f9      	b.n	800ba74 <memset+0x4>

0800ba80 <_init>:
 800ba80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba82:	bf00      	nop
 800ba84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba86:	bc08      	pop	{r3}
 800ba88:	469e      	mov	lr, r3
 800ba8a:	4770      	bx	lr

0800ba8c <_fini>:
 800ba8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba8e:	bf00      	nop
 800ba90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba92:	bc08      	pop	{r3}
 800ba94:	469e      	mov	lr, r3
 800ba96:	4770      	bx	lr
