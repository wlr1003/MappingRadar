
radar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f31c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  0800f500  0800f500  0001f500  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f944  0800f944  00022a28  2**0
                  CONTENTS
  4 .ARM          00000000  0800f944  0800f944  00022a28  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f944  0800f944  00022a28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f944  0800f944  0001f944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f948  0800f948  0001f948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002a28  20000000  0800f94c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bb4  20002a28  08012374  00022a28  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200045dc  08012374  000245dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00022a28  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002904b  00000000  00000000  00022a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004829  00000000  00000000  0004baa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023c8  00000000  00000000  000502d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021c0  00000000  00000000  00052698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027af8  00000000  00000000  00054858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023827  00000000  00000000  0007c350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9dd4  00000000  00000000  0009fb77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019994b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a9d8  00000000  00000000  0019999c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20002a28 	.word	0x20002a28
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f4e4 	.word	0x0800f4e4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20002a2c 	.word	0x20002a2c
 800021c:	0800f4e4 	.word	0x0800f4e4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <lsm6dsl_read_reg>:
  *
  */
int32_t __weak lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b087      	sub	sp, #28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	607a      	str	r2, [r7, #4]
 8000c02:	461a      	mov	r2, r3
 8000c04:	460b      	mov	r3, r1
 8000c06:	72fb      	strb	r3, [r7, #11]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	685c      	ldr	r4, [r3, #4]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	68d8      	ldr	r0, [r3, #12]
 8000c14:	893b      	ldrh	r3, [r7, #8]
 8000c16:	7af9      	ldrb	r1, [r7, #11]
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	47a0      	blx	r4
 8000c1c:	6178      	str	r0, [r7, #20]

  return ret;
 8000c1e:	697b      	ldr	r3, [r7, #20]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	371c      	adds	r7, #28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd90      	pop	{r4, r7, pc}

08000c28 <lsm6dsl_write_reg>:
  *
  */
int32_t __weak lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8000c28:	b590      	push	{r4, r7, lr}
 8000c2a:	b087      	sub	sp, #28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	607a      	str	r2, [r7, #4]
 8000c32:	461a      	mov	r2, r3
 8000c34:	460b      	mov	r3, r1
 8000c36:	72fb      	strb	r3, [r7, #11]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	681c      	ldr	r4, [r3, #0]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	68d8      	ldr	r0, [r3, #12]
 8000c44:	893b      	ldrh	r3, [r7, #8]
 8000c46:	7af9      	ldrb	r1, [r7, #11]
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	47a0      	blx	r4
 8000c4c:	6178      	str	r0, [r7, #20]

  return ret;
 8000c4e:	697b      	ldr	r3, [r7, #20]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	371c      	adds	r7, #28
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd90      	pop	{r4, r7, pc}

08000c58 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8000c62:	2301      	movs	r3, #1
 8000c64:	683a      	ldr	r2, [r7, #0]
 8000c66:	210f      	movs	r1, #15
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f7ff ffc5 	bl	8000bf8 <lsm6dsl_read_reg>
 8000c6e:	60f8      	str	r0, [r7, #12]

  return ret;
 8000c70:	68fb      	ldr	r3, [r7, #12]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b084      	sub	sp, #16
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
 8000c82:	460b      	mov	r3, r1
 8000c84:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8000c86:	f107 0208 	add.w	r2, r7, #8
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	2112      	movs	r1, #18
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ffb2 	bl	8000bf8 <lsm6dsl_read_reg>
 8000c94:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d10f      	bne.n	8000cbc <lsm6dsl_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 8000c9c:	78fb      	ldrb	r3, [r7, #3]
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	7a3b      	ldrb	r3, [r7, #8]
 8000ca6:	f362 0300 	bfi	r3, r2, #0, #1
 8000caa:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8000cac:	f107 0208 	add.w	r2, r7, #8
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	2112      	movs	r1, #18
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f7ff ffb7 	bl	8000c28 <lsm6dsl_write_reg>
 8000cba:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b084      	sub	sp, #16
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
 8000cce:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8000cd0:	f107 0208 	add.w	r2, r7, #8
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	2112      	movs	r1, #18
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff ff8d 	bl	8000bf8 <lsm6dsl_read_reg>
 8000cde:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8000ce0:	7a3b      	ldrb	r3, [r7, #8]
 8000ce2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	461a      	mov	r2, r3
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	701a      	strb	r2, [r3, #0]

  return ret;
 8000cee:	68fb      	ldr	r3, [r7, #12]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
input_received_flag = 0;
 8000cfe:	4b2b      	ldr	r3, [pc, #172]	; (8000dac <main+0xb4>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
// initialize command struct
control user_input;
user_input.mode_instructed = 'r'; // r:range, s:speed
 8000d04:	2372      	movs	r3, #114	; 0x72
 8000d06:	75bb      	strb	r3, [r7, #22]
user_input.mode_running = 'x'; // x:none
 8000d08:	2378      	movs	r3, #120	; 0x78
 8000d0a:	75fb      	strb	r3, [r7, #23]
user_input.run_time_sec=0; // length of time in seconds to operate
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	82bb      	strh	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d10:	f000 fe77 	bl	8001a02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d14:	f000 f856 	bl	8000dc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d18:	f000 fa08 	bl	800112c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d1c:	f000 f9dc 	bl	80010d8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000d20:	f000 f89c 	bl	8000e5c <MX_ADC1_Init>
  MX_DAC1_Init();
 8000d24:	f000 f912 	bl	8000f4c <MX_DAC1_Init>
  MX_TIM2_Init();
 8000d28:	f000 f988 	bl	800103c <MX_TIM2_Init>
  MX_SPI1_Init();
 8000d2c:	f000 f948 	bl	8000fc0 <MX_SPI1_Init>
  MX_USB_Device_Init();
 8000d30:	f00b f990 	bl	800c054 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

	set_VCO_input_DAC(&user_input);
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f000 fb6b 	bl	8001414 <set_VCO_input_DAC>

  /* initialize accelerometer/gyroscope on lsm6dsl */
  stmdev_ctx_t dev_ctx;
  dev_ctx.write_reg = platform_write;
 8000d3e:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <main+0xb8>)
 8000d40:	607b      	str	r3, [r7, #4]
  dev_ctx.read_reg = platform_read;
 8000d42:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <main+0xbc>)
 8000d44:	60bb      	str	r3, [r7, #8]
  /* Check device ID */
    whoamI = 0;
 8000d46:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <main+0xc0>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
    lsm6dsl_device_id_get(&dev_ctx, &whoamI);
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	491a      	ldr	r1, [pc, #104]	; (8000db8 <main+0xc0>)
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff81 	bl	8000c58 <lsm6dsl_device_id_get>

    if ( whoamI != LSM6DSL_ID )
 8000d56:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <main+0xc0>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b6a      	cmp	r3, #106	; 0x6a
 8000d5c:	d000      	beq.n	8000d60 <main+0x68>
      while (1) /*manage here device not found */
 8000d5e:	e7fe      	b.n	8000d5e <main+0x66>
      {

      }
    /* Restore default configuration */
    lsm6dsl_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	2101      	movs	r1, #1
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff88 	bl	8000c7a <lsm6dsl_reset_set>

    do {
      lsm6dsl_reset_get(&dev_ctx, &rst);
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	4913      	ldr	r1, [pc, #76]	; (8000dbc <main+0xc4>)
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff ffa9 	bl	8000cc6 <lsm6dsl_reset_get>
    } while (rst);
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <main+0xc4>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d1f6      	bne.n	8000d6a <main+0x72>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (input_received_flag)
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <main+0xb4>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d00e      	beq.n	8000da2 <main+0xaa>
	  {
	 	    	process_input(&UserRxBufferFS,&user_input);
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4619      	mov	r1, r3
 8000d8a:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <main+0xc8>)
 8000d8c:	f000 fac2 	bl	8001314 <process_input>
	 	    	set_VCO_input_DAC(&user_input);
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 fb3d 	bl	8001414 <set_VCO_input_DAC>
	 	    	//perform_trial(&user_input);
	 	        input_received_flag=0;
 8000d9a:	4b04      	ldr	r3, [pc, #16]	; (8000dac <main+0xb4>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
 8000da0:	e7ec      	b.n	8000d7c <main+0x84>
	  }
	  else
	  {
	 	    	HAL_Delay(250);
 8000da2:	20fa      	movs	r0, #250	; 0xfa
 8000da4:	f000 fe9e 	bl	8001ae4 <HAL_Delay>
	  if (input_received_flag)
 8000da8:	e7e8      	b.n	8000d7c <main+0x84>
 8000daa:	bf00      	nop
 8000dac:	20003eb4 	.word	0x20003eb4
 8000db0:	0800124d 	.word	0x0800124d
 8000db4:	080012a5 	.word	0x080012a5
 8000db8:	20002bd4 	.word	0x20002bd4
 8000dbc:	20002bd5 	.word	0x20002bd5
 8000dc0:	20002eb4 	.word	0x20002eb4

08000dc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b094      	sub	sp, #80	; 0x50
 8000dc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dca:	f107 0318 	add.w	r3, r7, #24
 8000dce:	2238      	movs	r2, #56	; 0x38
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f00b fe76 	bl	800cac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
 8000de4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000de6:	2000      	movs	r0, #0
 8000de8:	f004 fefe 	bl	8005be8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000dec:	2321      	movs	r3, #33	; 0x21
 8000dee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000df0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000df4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000df6:	2301      	movs	r3, #1
 8000df8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000e02:	2302      	movs	r3, #2
 8000e04:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8000e06:	232a      	movs	r3, #42	; 0x2a
 8000e08:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV12;
 8000e0a:	230c      	movs	r3, #12
 8000e0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000e0e:	2306      	movs	r3, #6
 8000e10:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e12:	2302      	movs	r3, #2
 8000e14:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e16:	f107 0318 	add.w	r3, r7, #24
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f004 ff88 	bl	8005d30 <HAL_RCC_OscConfig>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e26:	f000 fb41 	bl	80014ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2a:	230f      	movs	r3, #15
 8000e2c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2104      	movs	r1, #4
 8000e44:	4618      	mov	r0, r3
 8000e46:	f005 fa8b 	bl	8006360 <HAL_RCC_ClockConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000e50:	f000 fb2c 	bl	80014ac <Error_Handler>
  }
}
 8000e54:	bf00      	nop
 8000e56:	3750      	adds	r7, #80	; 0x50
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08c      	sub	sp, #48	; 0x30
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	2220      	movs	r2, #32
 8000e72:	2100      	movs	r1, #0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f00b fe25 	bl	800cac4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e7a:	4b32      	ldr	r3, [pc, #200]	; (8000f44 <MX_ADC1_Init+0xe8>)
 8000e7c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e80:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e82:	4b30      	ldr	r3, [pc, #192]	; (8000f44 <MX_ADC1_Init+0xe8>)
 8000e84:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e88:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e8a:	4b2e      	ldr	r3, [pc, #184]	; (8000f44 <MX_ADC1_Init+0xe8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e90:	4b2c      	ldr	r3, [pc, #176]	; (8000f44 <MX_ADC1_Init+0xe8>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e96:	4b2b      	ldr	r3, [pc, #172]	; (8000f44 <MX_ADC1_Init+0xe8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e9c:	4b29      	ldr	r3, [pc, #164]	; (8000f44 <MX_ADC1_Init+0xe8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ea2:	4b28      	ldr	r3, [pc, #160]	; (8000f44 <MX_ADC1_Init+0xe8>)
 8000ea4:	2204      	movs	r2, #4
 8000ea6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ea8:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <MX_ADC1_Init+0xe8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eae:	4b25      	ldr	r3, [pc, #148]	; (8000f44 <MX_ADC1_Init+0xe8>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000eb4:	4b23      	ldr	r3, [pc, #140]	; (8000f44 <MX_ADC1_Init+0xe8>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eba:	4b22      	ldr	r3, [pc, #136]	; (8000f44 <MX_ADC1_Init+0xe8>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ec2:	4b20      	ldr	r3, [pc, #128]	; (8000f44 <MX_ADC1_Init+0xe8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ec8:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <MX_ADC1_Init+0xe8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ece:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <MX_ADC1_Init+0xe8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ed6:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <MX_ADC1_Init+0xe8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000edc:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <MX_ADC1_Init+0xe8>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ee4:	4817      	ldr	r0, [pc, #92]	; (8000f44 <MX_ADC1_Init+0xe8>)
 8000ee6:	f000 fff9 	bl	8001edc <HAL_ADC_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000ef0:	f000 fadc 	bl	80014ac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efc:	4619      	mov	r1, r3
 8000efe:	4811      	ldr	r0, [pc, #68]	; (8000f44 <MX_ADC1_Init+0xe8>)
 8000f00:	f001 fe14 	bl	8002b2c <HAL_ADCEx_MultiModeConfigChannel>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f0a:	f000 facf 	bl	80014ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <MX_ADC1_Init+0xec>)
 8000f10:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f12:	2306      	movs	r3, #6
 8000f14:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f1a:	237f      	movs	r3, #127	; 0x7f
 8000f1c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f1e:	2304      	movs	r3, #4
 8000f20:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4806      	ldr	r0, [pc, #24]	; (8000f44 <MX_ADC1_Init+0xe8>)
 8000f2c:	f001 f998 	bl	8002260 <HAL_ADC_ConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000f36:	f000 fab9 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	3730      	adds	r7, #48	; 0x30
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20002a44 	.word	0x20002a44
 8000f48:	04300002 	.word	0x04300002

08000f4c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08c      	sub	sp, #48	; 0x30
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f52:	463b      	mov	r3, r7
 8000f54:	2230      	movs	r2, #48	; 0x30
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f00b fdb3 	bl	800cac4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000f5e:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <MX_DAC1_Init+0x6c>)
 8000f60:	4a16      	ldr	r2, [pc, #88]	; (8000fbc <MX_DAC1_Init+0x70>)
 8000f62:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000f64:	4814      	ldr	r0, [pc, #80]	; (8000fb8 <MX_DAC1_Init+0x6c>)
 8000f66:	f001 fff8 	bl	8002f5a <HAL_DAC_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000f70:	f000 fa9c 	bl	80014ac <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000f74:	2302      	movs	r3, #2
 8000f76:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000f80:	2300      	movs	r3, #0
 8000f82:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000f84:	2312      	movs	r3, #18
 8000f86:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000f90:	2301      	movs	r3, #1
 8000f92:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f98:	463b      	mov	r3, r7
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4806      	ldr	r0, [pc, #24]	; (8000fb8 <MX_DAC1_Init+0x6c>)
 8000fa0:	f002 f9ce 	bl	8003340 <HAL_DAC_ConfigChannel>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000faa:	f000 fa7f 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000fae:	bf00      	nop
 8000fb0:	3730      	adds	r7, #48	; 0x30
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20002ab0 	.word	0x20002ab0
 8000fbc:	50000800 	.word	0x50000800

08000fc0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <MX_SPI1_Init+0x74>)
 8000fc6:	4a1c      	ldr	r2, [pc, #112]	; (8001038 <MX_SPI1_Init+0x78>)
 8000fc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fca:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <MX_SPI1_Init+0x74>)
 8000fcc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fd2:	4b18      	ldr	r3, [pc, #96]	; (8001034 <MX_SPI1_Init+0x74>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fd8:	4b16      	ldr	r3, [pc, #88]	; (8001034 <MX_SPI1_Init+0x74>)
 8000fda:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000fde:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <MX_SPI1_Init+0x74>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fe6:	4b13      	ldr	r3, [pc, #76]	; (8001034 <MX_SPI1_Init+0x74>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <MX_SPI1_Init+0x74>)
 8000fee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ff2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <MX_SPI1_Init+0x74>)
 8000ff6:	2220      	movs	r2, #32
 8000ff8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <MX_SPI1_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <MX_SPI1_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <MX_SPI1_Init+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <MX_SPI1_Init+0x74>)
 800100e:	2207      	movs	r2, #7
 8001010:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <MX_SPI1_Init+0x74>)
 8001014:	2200      	movs	r2, #0
 8001016:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <MX_SPI1_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <MX_SPI1_Init+0x74>)
 8001020:	f005 fdd8 	bl	8006bd4 <HAL_SPI_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800102a:	f000 fa3f 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20002b24 	.word	0x20002b24
 8001038:	40013000 	.word	0x40013000

0800103c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800105a:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <MX_TIM2_Init+0x94>)
 800105c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001060:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 255;
 8001062:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <MX_TIM2_Init+0x94>)
 8001064:	22ff      	movs	r2, #255	; 0xff
 8001066:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001068:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <MX_TIM2_Init+0x94>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6.5204999E7;
 800106e:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <MX_TIM2_Init+0x94>)
 8001070:	4a18      	ldr	r2, [pc, #96]	; (80010d4 <MX_TIM2_Init+0x98>)
 8001072:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001074:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <MX_TIM2_Init+0x94>)
 8001076:	2200      	movs	r2, #0
 8001078:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <MX_TIM2_Init+0x94>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001080:	4813      	ldr	r0, [pc, #76]	; (80010d0 <MX_TIM2_Init+0x94>)
 8001082:	f006 fd29 	bl	8007ad8 <HAL_TIM_Base_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800108c:	f000 fa0e 	bl	80014ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001094:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001096:	f107 0310 	add.w	r3, r7, #16
 800109a:	4619      	mov	r1, r3
 800109c:	480c      	ldr	r0, [pc, #48]	; (80010d0 <MX_TIM2_Init+0x94>)
 800109e:	f006 fe0b 	bl	8007cb8 <HAL_TIM_ConfigClockSource>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010a8:	f000 fa00 	bl	80014ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010ac:	2320      	movs	r3, #32
 80010ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	4619      	mov	r1, r3
 80010b8:	4805      	ldr	r0, [pc, #20]	; (80010d0 <MX_TIM2_Init+0x94>)
 80010ba:	f007 f84d 	bl	8008158 <HAL_TIMEx_MasterConfigSynchronization>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010c4:	f000 f9f2 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	3720      	adds	r7, #32
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20002b88 	.word	0x20002b88
 80010d4:	03e2f307 	.word	0x03e2f307

080010d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80010de:	4b12      	ldr	r3, [pc, #72]	; (8001128 <MX_DMA_Init+0x50>)
 80010e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010e2:	4a11      	ldr	r2, [pc, #68]	; (8001128 <MX_DMA_Init+0x50>)
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	6493      	str	r3, [r2, #72]	; 0x48
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <MX_DMA_Init+0x50>)
 80010ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MX_DMA_Init+0x50>)
 80010f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010fa:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <MX_DMA_Init+0x50>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6493      	str	r3, [r2, #72]	; 0x48
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_DMA_Init+0x50>)
 8001104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2100      	movs	r1, #0
 8001112:	200b      	movs	r0, #11
 8001114:	f001 feed 	bl	8002ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001118:	200b      	movs	r0, #11
 800111a:	f001 ff04 	bl	8002f26 <HAL_NVIC_EnableIRQ>

}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40021000 	.word	0x40021000

0800112c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	f107 030c 	add.w	r3, r7, #12
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001142:	4b40      	ldr	r3, [pc, #256]	; (8001244 <MX_GPIO_Init+0x118>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	4a3f      	ldr	r2, [pc, #252]	; (8001244 <MX_GPIO_Init+0x118>)
 8001148:	f043 0320 	orr.w	r3, r3, #32
 800114c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114e:	4b3d      	ldr	r3, [pc, #244]	; (8001244 <MX_GPIO_Init+0x118>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	f003 0320 	and.w	r3, r3, #32
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	4b3a      	ldr	r3, [pc, #232]	; (8001244 <MX_GPIO_Init+0x118>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	4a39      	ldr	r2, [pc, #228]	; (8001244 <MX_GPIO_Init+0x118>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001166:	4b37      	ldr	r3, [pc, #220]	; (8001244 <MX_GPIO_Init+0x118>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001172:	4b34      	ldr	r3, [pc, #208]	; (8001244 <MX_GPIO_Init+0x118>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001176:	4a33      	ldr	r2, [pc, #204]	; (8001244 <MX_GPIO_Init+0x118>)
 8001178:	f043 0302 	orr.w	r3, r3, #2
 800117c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117e:	4b31      	ldr	r3, [pc, #196]	; (8001244 <MX_GPIO_Init+0x118>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	603b      	str	r3, [r7, #0]
 8001188:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001190:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001194:	f002 ffba 	bl	800410c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001198:	2303      	movs	r3, #3
 800119a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800119c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a6:	f107 030c 	add.w	r3, r7, #12
 80011aa:	4619      	mov	r1, r3
 80011ac:	4826      	ldr	r0, [pc, #152]	; (8001248 <MX_GPIO_Init+0x11c>)
 80011ae:	f002 fe2b 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011b8:	2312      	movs	r3, #18
 80011ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 80011c4:	2302      	movs	r3, #2
 80011c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	4619      	mov	r1, r3
 80011ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d2:	f002 fe19 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011dc:	2312      	movs	r3, #18
 80011de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011e8:	2304      	movs	r3, #4
 80011ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	4619      	mov	r1, r3
 80011f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f6:	f002 fe07 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LSM6DSL_ncs_Pin */
  GPIO_InitStruct.Pin = LSM6DSL_ncs_Pin;
 80011fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001200:	2301      	movs	r3, #1
 8001202:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001208:	2300      	movs	r3, #0
 800120a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LSM6DSL_ncs_GPIO_Port, &GPIO_InitStruct);
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	4619      	mov	r1, r3
 8001212:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001216:	f002 fdf7 	bl	8003e08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	2006      	movs	r0, #6
 8001220:	f001 fe67 	bl	8002ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001224:	2006      	movs	r0, #6
 8001226:	f001 fe7e 	bl	8002f26 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	2007      	movs	r0, #7
 8001230:	f001 fe5f 	bl	8002ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001234:	2007      	movs	r0, #7
 8001236:	f001 fe76 	bl	8002f26 <HAL_NVIC_EnableIRQ>

}
 800123a:	bf00      	nop
 800123c:	3720      	adds	r7, #32
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40021000 	.word	0x40021000
 8001248:	48000400 	.word	0x48000400

0800124c <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	461a      	mov	r2, r3
 8001258:	460b      	mov	r3, r1
 800125a:	72fb      	strb	r3, [r7, #11]
 800125c:	4613      	mov	r3, r2
 800125e:	813b      	strh	r3, [r7, #8]
  HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_RESET);
 8001260:	2200      	movs	r2, #0
 8001262:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126a:	f002 ff4f 	bl	800410c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 800126e:	f107 010b 	add.w	r1, r7, #11
 8001272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001276:	2201      	movs	r2, #1
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f005 fd56 	bl	8006d2a <HAL_SPI_Transmit>
  HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
 800127e:	893a      	ldrh	r2, [r7, #8]
 8001280:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001284:	6879      	ldr	r1, [r7, #4]
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	f005 fd4f 	bl	8006d2a <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_SET);
 800128c:	2201      	movs	r2, #1
 800128e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001296:	f002 ff39 	bl	800410c <HAL_GPIO_WritePin>
  return 0;
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	461a      	mov	r2, r3
 80012b0:	460b      	mov	r3, r1
 80012b2:	72fb      	strb	r3, [r7, #11]
 80012b4:	4613      	mov	r3, r2
 80012b6:	813b      	strh	r3, [r7, #8]
	uint8_t tx_data[2];
	tx_data[0] = 0x80 | reg;
 80012b8:	7afb      	ldrb	r3, [r7, #11]
 80012ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	753b      	strb	r3, [r7, #20]
	tx_data[1] = 0x00;
 80012c2:	2300      	movs	r3, #0
 80012c4:	757b      	strb	r3, [r7, #21]
	// Reset the complete flag
	spi_complete_flag = 0;
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <platform_read+0x68>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
	// Start the SPI transfer
	HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d6:	f002 ff19 	bl	800410c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, tx_data, bufp, len);
 80012da:	893b      	ldrh	r3, [r7, #8]
 80012dc:	f107 0114 	add.w	r1, r7, #20
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	480b      	ldr	r0, [pc, #44]	; (8001310 <platform_read+0x6c>)
 80012e4:	f005 fe90 	bl	8007008 <HAL_SPI_TransmitReceive_DMA>
//	  {
//	    /* Transfer error in transmission process */
//	    Error_Handler();
//	  }
	// Wait for the transfer to complete
	while(!spi_complete_flag);
 80012e8:	bf00      	nop
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <platform_read+0x68>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0fa      	beq.n	80012ea <platform_read+0x46>

	HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_SET);
 80012f4:	2201      	movs	r2, #1
 80012f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fe:	f002 ff05 	bl	800410c <HAL_GPIO_WritePin>
  return 0;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20002bd6 	.word	0x20002bd6
 8001310:	20002b24 	.word	0x20002b24

08001314 <process_input>:
 * process the input received over usb to extract the operating mode and the time of operation
 *
 * @param arr    user input array
 * @param pCommand command struct to return mode and time
*/
void process_input(const uint8_t *arr, control *pControl) {
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	; 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
    uint8_t mode[]={'m','o','d','e',':'};
 800131e:	4a3b      	ldr	r2, [pc, #236]	; (800140c <process_input+0xf8>)
 8001320:	f107 0310 	add.w	r3, r7, #16
 8001324:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001328:	6018      	str	r0, [r3, #0]
 800132a:	3304      	adds	r3, #4
 800132c:	7019      	strb	r1, [r3, #0]
    uint8_t time[] = {'t','i','m','e',':'};
 800132e:	4a38      	ldr	r2, [pc, #224]	; (8001410 <process_input+0xfc>)
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001338:	6018      	str	r0, [r3, #0]
 800133a:	3304      	adds	r3, #4
 800133c:	7019      	strb	r1, [r3, #0]
    int i = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
    int j = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	61bb      	str	r3, [r7, #24]
    // check input to ensure "mode:" is received
    while (arr[i]==mode[i]) {
 8001346:	e002      	b.n	800134e <process_input+0x3a>
        i++;
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	3301      	adds	r3, #1
 800134c:	61fb      	str	r3, [r7, #28]
    while (arr[i]==mode[i]) {
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	4413      	add	r3, r2
 8001354:	781a      	ldrb	r2, [r3, #0]
 8001356:	f107 0110 	add.w	r1, r7, #16
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	440b      	add	r3, r1
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	429a      	cmp	r2, r3
 8001362:	d0f1      	beq.n	8001348 <process_input+0x34>
    }
    // set mode in command
    pControl->mode_instructed=arr[i];
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	4413      	add	r3, r2
 800136a:	781a      	ldrb	r2, [r3, #0]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	709a      	strb	r2, [r3, #2]
    // move index past command for mode and '\n'
    while (arr[i]!='t') {
 8001370:	e002      	b.n	8001378 <process_input+0x64>
        i++;
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3301      	adds	r3, #1
 8001376:	61fb      	str	r3, [r7, #28]
    while (arr[i]!='t') {
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b74      	cmp	r3, #116	; 0x74
 8001382:	d1f6      	bne.n	8001372 <process_input+0x5e>
    }
    // check input to ensure "time:" is received
    while (arr[i]==time[j]) {
 8001384:	e005      	b.n	8001392 <process_input+0x7e>
        i++;
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3301      	adds	r3, #1
 800138a:	61fb      	str	r3, [r7, #28]
        j++;
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	3301      	adds	r3, #1
 8001390:	61bb      	str	r3, [r7, #24]
    while (arr[i]==time[j]) {
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	4413      	add	r3, r2
 8001398:	781a      	ldrb	r2, [r3, #0]
 800139a:	f107 0108 	add.w	r1, r7, #8
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	440b      	add	r3, r1
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d0ee      	beq.n	8001386 <process_input+0x72>
    }
    // set j to index one past first digit of command for time
    j=i+1;
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	3301      	adds	r3, #1
 80013ac:	61bb      	str	r3, [r7, #24]
    // get index of last digit
    while (arr[j]!='\n') {
 80013ae:	e002      	b.n	80013b6 <process_input+0xa2>
        j++;
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	3301      	adds	r3, #1
 80013b4:	61bb      	str	r3, [r7, #24]
    while (arr[j]!='\n') {
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	4413      	add	r3, r2
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b0a      	cmp	r3, #10
 80013c0:	d1f6      	bne.n	80013b0 <process_input+0x9c>
    }
    // set runt time to zero
    pControl->run_time_sec=0;
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	2200      	movs	r2, #0
 80013c6:	801a      	strh	r2, [r3, #0]
    // add each digits value,
    // *10 to shift current value left one digit for adding next digit
    // -48 converts from ascii to int
    while (i < j) {
 80013c8:	e014      	b.n	80013f4 <process_input+0xe0>
        pControl->run_time_sec=(pControl->run_time_sec*10)+arr[i]-48;
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	0092      	lsls	r2, r2, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	440b      	add	r3, r1
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	4413      	add	r3, r2
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	3b30      	subs	r3, #48	; 0x30
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	801a      	strh	r2, [r3, #0]
        i++;
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3301      	adds	r3, #1
 80013f2:	61fb      	str	r3, [r7, #28]
    while (i < j) {
 80013f4:	69fa      	ldr	r2, [r7, #28]
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	dbe6      	blt.n	80013ca <process_input+0xb6>
    }
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	3724      	adds	r7, #36	; 0x24
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	0800f500 	.word	0x0800f500
 8001410:	0800f508 	.word	0x0800f508

08001414 <set_VCO_input_DAC>:


void set_VCO_input_DAC(control *ctrl_ptr) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af02      	add	r7, sp, #8
 800141a:	6078      	str	r0, [r7, #4]
	// if currently running is as instructed, return
	if (ctrl_ptr->mode_running==ctrl_ptr->mode_instructed) {
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	78da      	ldrb	r2, [r3, #3]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	789b      	ldrb	r3, [r3, #2]
 8001424:	429a      	cmp	r2, r3
 8001426:	d035      	beq.n	8001494 <set_VCO_input_DAC+0x80>
		return;
	}

	  /* Set DAC_CH_1 to CTune or VTune based on user input for mode, defaults to range(r)*/
	if (ctrl_ptr->mode_instructed=='r')
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	789b      	ldrb	r3, [r3, #2]
 800142c:	2b72      	cmp	r3, #114	; 0x72
 800142e:	d117      	bne.n	8001460 <set_VCO_input_DAC+0x4c>
	{
		// if currently running in other mode, turn it off
		if (ctrl_ptr->mode_running=='s') {
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	78db      	ldrb	r3, [r3, #3]
 8001434:	2b73      	cmp	r3, #115	; 0x73
 8001436:	d103      	bne.n	8001440 <set_VCO_input_DAC+0x2c>
			HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
 8001438:	2100      	movs	r1, #0
 800143a:	4818      	ldr	r0, [pc, #96]	; (800149c <set_VCO_input_DAC+0x88>)
 800143c:	f001 fe02 	bl	8003044 <HAL_DAC_Stop>
		}
		// turn on dac using dma and timer 2
		HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,(uint32_t*)VTune,2484,DAC_ALIGN_12B_R);
 8001440:	2300      	movs	r3, #0
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	f640 13b4 	movw	r3, #2484	; 0x9b4
 8001448:	4a15      	ldr	r2, [pc, #84]	; (80014a0 <set_VCO_input_DAC+0x8c>)
 800144a:	2100      	movs	r1, #0
 800144c:	4813      	ldr	r0, [pc, #76]	; (800149c <set_VCO_input_DAC+0x88>)
 800144e:	f001 fe17 	bl	8003080 <HAL_DAC_Start_DMA>
		HAL_TIM_Base_Start(&htim2);
 8001452:	4814      	ldr	r0, [pc, #80]	; (80014a4 <set_VCO_input_DAC+0x90>)
 8001454:	f006 fb98 	bl	8007b88 <HAL_TIM_Base_Start>
		ctrl_ptr->mode_running='r';
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2272      	movs	r2, #114	; 0x72
 800145c:	70da      	strb	r2, [r3, #3]
 800145e:	e01a      	b.n	8001496 <set_VCO_input_DAC+0x82>
	}
	else
	{
		if (ctrl_ptr->mode_running=='r') {
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	78db      	ldrb	r3, [r3, #3]
 8001464:	2b72      	cmp	r3, #114	; 0x72
 8001466:	d106      	bne.n	8001476 <set_VCO_input_DAC+0x62>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001468:	2100      	movs	r1, #0
 800146a:	480c      	ldr	r0, [pc, #48]	; (800149c <set_VCO_input_DAC+0x88>)
 800146c:	f001 fed6 	bl	800321c <HAL_DAC_Stop_DMA>
			HAL_TIM_Base_Stop(&htim2);
 8001470:	480c      	ldr	r0, [pc, #48]	; (80014a4 <set_VCO_input_DAC+0x90>)
 8001472:	f006 fbf9 	bl	8007c68 <HAL_TIM_Base_Stop>

		}
		HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001476:	2100      	movs	r1, #0
 8001478:	4808      	ldr	r0, [pc, #32]	; (800149c <set_VCO_input_DAC+0x88>)
 800147a:	f001 fd90 	bl	8002f9e <HAL_DAC_Start>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, CTune);
 800147e:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <set_VCO_input_DAC+0x94>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2200      	movs	r2, #0
 8001484:	2100      	movs	r1, #0
 8001486:	4805      	ldr	r0, [pc, #20]	; (800149c <set_VCO_input_DAC+0x88>)
 8001488:	f001 ff13 	bl	80032b2 <HAL_DAC_SetValue>
		ctrl_ptr->mode_running='s';
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2273      	movs	r2, #115	; 0x73
 8001490:	70da      	strb	r2, [r3, #3]
 8001492:	e000      	b.n	8001496 <set_VCO_input_DAC+0x82>
		return;
 8001494:	bf00      	nop
	}
}
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20002ab0 	.word	0x20002ab0
 80014a0:	20000004 	.word	0x20000004
 80014a4:	20002b88 	.word	0x20002b88
 80014a8:	20000000 	.word	0x20000000

080014ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b0:	b672      	cpsid	i
}
 80014b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <Error_Handler+0x8>
	...

080014b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_MspInit+0x44>)
 80014c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c2:	4a0e      	ldr	r2, [pc, #56]	; (80014fc <HAL_MspInit+0x44>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6613      	str	r3, [r2, #96]	; 0x60
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <HAL_MspInit+0x44>)
 80014cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <HAL_MspInit+0x44>)
 80014d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014da:	4a08      	ldr	r2, [pc, #32]	; (80014fc <HAL_MspInit+0x44>)
 80014dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e0:	6593      	str	r3, [r2, #88]	; 0x58
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_MspInit+0x44>)
 80014e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40021000 	.word	0x40021000

08001500 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b09e      	sub	sp, #120	; 0x78
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001518:	f107 0310 	add.w	r3, r7, #16
 800151c:	2254      	movs	r2, #84	; 0x54
 800151e:	2100      	movs	r1, #0
 8001520:	4618      	mov	r0, r3
 8001522:	f00b facf 	bl	800cac4 <memset>
  if(hadc->Instance==ADC1)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800152e:	d134      	bne.n	800159a <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001530:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001534:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8001536:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800153a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800153c:	f107 0310 	add.w	r3, r7, #16
 8001540:	4618      	mov	r0, r3
 8001542:	f005 f8f9 	bl	8006738 <HAL_RCCEx_PeriphCLKConfig>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800154c:	f7ff ffae 	bl	80014ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <HAL_ADC_MspInit+0xa4>)
 8001552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001554:	4a13      	ldr	r2, [pc, #76]	; (80015a4 <HAL_ADC_MspInit+0xa4>)
 8001556:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800155a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <HAL_ADC_MspInit+0xa4>)
 800155e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001560:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001568:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <HAL_ADC_MspInit+0xa4>)
 800156a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156c:	4a0d      	ldr	r2, [pc, #52]	; (80015a4 <HAL_ADC_MspInit+0xa4>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_ADC_MspInit+0xa4>)
 8001576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001580:	230f      	movs	r3, #15
 8001582:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001584:	2303      	movs	r3, #3
 8001586:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001590:	4619      	mov	r1, r3
 8001592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001596:	f002 fc37 	bl	8003e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800159a:	bf00      	nop
 800159c:	3778      	adds	r7, #120	; 0x78
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000

080015a8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	; 0x28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a2b      	ldr	r2, [pc, #172]	; (8001674 <HAL_DAC_MspInit+0xcc>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d150      	bne.n	800166c <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80015ca:	4b2b      	ldr	r3, [pc, #172]	; (8001678 <HAL_DAC_MspInit+0xd0>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	4a2a      	ldr	r2, [pc, #168]	; (8001678 <HAL_DAC_MspInit+0xd0>)
 80015d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d6:	4b28      	ldr	r3, [pc, #160]	; (8001678 <HAL_DAC_MspInit+0xd0>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e2:	4b25      	ldr	r3, [pc, #148]	; (8001678 <HAL_DAC_MspInit+0xd0>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e6:	4a24      	ldr	r2, [pc, #144]	; (8001678 <HAL_DAC_MspInit+0xd0>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ee:	4b22      	ldr	r3, [pc, #136]	; (8001678 <HAL_DAC_MspInit+0xd0>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015fa:	2310      	movs	r3, #16
 80015fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015fe:	2303      	movs	r3, #3
 8001600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001610:	f002 fbfa 	bl	8003e08 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8001614:	4b19      	ldr	r3, [pc, #100]	; (800167c <HAL_DAC_MspInit+0xd4>)
 8001616:	4a1a      	ldr	r2, [pc, #104]	; (8001680 <HAL_DAC_MspInit+0xd8>)
 8001618:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800161a:	4b18      	ldr	r3, [pc, #96]	; (800167c <HAL_DAC_MspInit+0xd4>)
 800161c:	2206      	movs	r2, #6
 800161e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001620:	4b16      	ldr	r3, [pc, #88]	; (800167c <HAL_DAC_MspInit+0xd4>)
 8001622:	2210      	movs	r2, #16
 8001624:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <HAL_DAC_MspInit+0xd4>)
 8001628:	2200      	movs	r2, #0
 800162a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800162c:	4b13      	ldr	r3, [pc, #76]	; (800167c <HAL_DAC_MspInit+0xd4>)
 800162e:	2280      	movs	r2, #128	; 0x80
 8001630:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001632:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_DAC_MspInit+0xd4>)
 8001634:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001638:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <HAL_DAC_MspInit+0xd4>)
 800163c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001640:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <HAL_DAC_MspInit+0xd4>)
 8001644:	2220      	movs	r2, #32
 8001646:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <HAL_DAC_MspInit+0xd4>)
 800164a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800164e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001650:	480a      	ldr	r0, [pc, #40]	; (800167c <HAL_DAC_MspInit+0xd4>)
 8001652:	f002 f8a7 	bl	80037a4 <HAL_DMA_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 800165c:	f7ff ff26 	bl	80014ac <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a06      	ldr	r2, [pc, #24]	; (800167c <HAL_DAC_MspInit+0xd4>)
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	4a05      	ldr	r2, [pc, #20]	; (800167c <HAL_DAC_MspInit+0xd4>)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800166c:	bf00      	nop
 800166e:	3728      	adds	r7, #40	; 0x28
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	50000800 	.word	0x50000800
 8001678:	40021000 	.word	0x40021000
 800167c:	20002ac4 	.word	0x20002ac4
 8001680:	40020008 	.word	0x40020008

08001684 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a1b      	ldr	r2, [pc, #108]	; (8001710 <HAL_SPI_MspInit+0x8c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d130      	bne.n	8001708 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016a6:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <HAL_SPI_MspInit+0x90>)
 80016a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016aa:	4a1a      	ldr	r2, [pc, #104]	; (8001714 <HAL_SPI_MspInit+0x90>)
 80016ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016b0:	6613      	str	r3, [r2, #96]	; 0x60
 80016b2:	4b18      	ldr	r3, [pc, #96]	; (8001714 <HAL_SPI_MspInit+0x90>)
 80016b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <HAL_SPI_MspInit+0x90>)
 80016c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c2:	4a14      	ldr	r2, [pc, #80]	; (8001714 <HAL_SPI_MspInit+0x90>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ca:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_SPI_MspInit+0x90>)
 80016cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80016d6:	23e0      	movs	r3, #224	; 0xe0
 80016d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016e6:	2305      	movs	r3, #5
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f4:	f002 fb88 	bl	8003e08 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2100      	movs	r1, #0
 80016fc:	2023      	movs	r0, #35	; 0x23
 80016fe:	f001 fbf8 	bl	8002ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001702:	2023      	movs	r0, #35	; 0x23
 8001704:	f001 fc0f 	bl	8002f26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001708:	bf00      	nop
 800170a:	3728      	adds	r7, #40	; 0x28
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40013000 	.word	0x40013000
 8001714:	40021000 	.word	0x40021000

08001718 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001728:	d10b      	bne.n	8001742 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <HAL_TIM_Base_MspInit+0x38>)
 800172c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172e:	4a08      	ldr	r2, [pc, #32]	; (8001750 <HAL_TIM_Base_MspInit+0x38>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6593      	str	r3, [r2, #88]	; 0x58
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_TIM_Base_MspInit+0x38>)
 8001738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001742:	bf00      	nop
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000

08001754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <NMI_Handler+0x4>

0800175a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175e:	e7fe      	b.n	800175e <HardFault_Handler+0x4>

08001760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <MemManage_Handler+0x4>

08001766 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176a:	e7fe      	b.n	800176a <BusFault_Handler+0x4>

0800176c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001770:	e7fe      	b.n	8001770 <UsageFault_Handler+0x4>

08001772 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a0:	f000 f982 	bl	8001aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80017ac:	2001      	movs	r0, #1
 80017ae:	f002 fcc5 	bl	800413c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80017ba:	2002      	movs	r0, #2
 80017bc:	f002 fcbe 	bl	800413c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <DMA1_Channel1_IRQHandler+0x10>)
 80017ca:	f002 f9ce 	bl	8003b6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20002ac4 	.word	0x20002ac4

080017d8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <USB_LP_IRQHandler+0x10>)
 80017de:	f002 fdd7 	bl	8004390 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	200040b8 	.word	0x200040b8

080017ec <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80017f0:	4802      	ldr	r0, [pc, #8]	; (80017fc <SPI1_IRQHandler+0x10>)
 80017f2:	f005 fd95 	bl	8007320 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20002b24 	.word	0x20002b24

08001800 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
	return 1;
 8001804:	2301      	movs	r3, #1
}
 8001806:	4618      	mov	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <_kill>:

int _kill(int pid, int sig)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800181a:	f00b f91b 	bl	800ca54 <__errno>
 800181e:	4603      	mov	r3, r0
 8001820:	2216      	movs	r2, #22
 8001822:	601a      	str	r2, [r3, #0]
	return -1;
 8001824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <_exit>:

void _exit (int status)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001838:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff ffe7 	bl	8001810 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001842:	e7fe      	b.n	8001842 <_exit+0x12>

08001844 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	e00a      	b.n	800186c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001856:	f3af 8000 	nop.w
 800185a:	4601      	mov	r1, r0
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	1c5a      	adds	r2, r3, #1
 8001860:	60ba      	str	r2, [r7, #8]
 8001862:	b2ca      	uxtb	r2, r1
 8001864:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	3301      	adds	r3, #1
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	429a      	cmp	r2, r3
 8001872:	dbf0      	blt.n	8001856 <_read+0x12>
	}

return len;
 8001874:	687b      	ldr	r3, [r7, #4]
}
 8001876:	4618      	mov	r0, r3
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b086      	sub	sp, #24
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	e009      	b.n	80018a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	1c5a      	adds	r2, r3, #1
 8001894:	60ba      	str	r2, [r7, #8]
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	3301      	adds	r3, #1
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	dbf1      	blt.n	8001890 <_write+0x12>
	}
	return len;
 80018ac:	687b      	ldr	r3, [r7, #4]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <_close>:

int _close(int file)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
	return -1;
 80018be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
 80018d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018de:	605a      	str	r2, [r3, #4]
	return 0;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <_isatty>:

int _isatty(int file)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
	return 1;
 80018f6:	2301      	movs	r3, #1
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
	return 0;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001928:	4a14      	ldr	r2, [pc, #80]	; (800197c <_sbrk+0x5c>)
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <_sbrk+0x60>)
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001934:	4b13      	ldr	r3, [pc, #76]	; (8001984 <_sbrk+0x64>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d102      	bne.n	8001942 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <_sbrk+0x64>)
 800193e:	4a12      	ldr	r2, [pc, #72]	; (8001988 <_sbrk+0x68>)
 8001940:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001942:	4b10      	ldr	r3, [pc, #64]	; (8001984 <_sbrk+0x64>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	429a      	cmp	r2, r3
 800194e:	d207      	bcs.n	8001960 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001950:	f00b f880 	bl	800ca54 <__errno>
 8001954:	4603      	mov	r3, r0
 8001956:	220c      	movs	r2, #12
 8001958:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800195a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800195e:	e009      	b.n	8001974 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001960:	4b08      	ldr	r3, [pc, #32]	; (8001984 <_sbrk+0x64>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001966:	4b07      	ldr	r3, [pc, #28]	; (8001984 <_sbrk+0x64>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	4a05      	ldr	r2, [pc, #20]	; (8001984 <_sbrk+0x64>)
 8001970:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001972:	68fb      	ldr	r3, [r7, #12]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20020000 	.word	0x20020000
 8001980:	00000400 	.word	0x00000400
 8001984:	20002bd8 	.word	0x20002bd8
 8001988:	200045e0 	.word	0x200045e0

0800198c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <SystemInit+0x20>)
 8001992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001996:	4a05      	ldr	r2, [pc, #20]	; (80019ac <SystemInit+0x20>)
 8001998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800199c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019b0:	480d      	ldr	r0, [pc, #52]	; (80019e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019b4:	480d      	ldr	r0, [pc, #52]	; (80019ec <LoopForever+0x6>)
  ldr r1, =_edata
 80019b6:	490e      	ldr	r1, [pc, #56]	; (80019f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019b8:	4a0e      	ldr	r2, [pc, #56]	; (80019f4 <LoopForever+0xe>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80019bc:	e002      	b.n	80019c4 <LoopCopyDataInit>

080019be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c2:	3304      	adds	r3, #4

080019c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c8:	d3f9      	bcc.n	80019be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ca:	4a0b      	ldr	r2, [pc, #44]	; (80019f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019cc:	4c0b      	ldr	r4, [pc, #44]	; (80019fc <LoopForever+0x16>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d0:	e001      	b.n	80019d6 <LoopFillZerobss>

080019d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d4:	3204      	adds	r2, #4

080019d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d8:	d3fb      	bcc.n	80019d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019da:	f7ff ffd7 	bl	800198c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019de:	f00b f83f 	bl	800ca60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019e2:	f7ff f989 	bl	8000cf8 <main>

080019e6 <LoopForever>:

LoopForever:
    b LoopForever
 80019e6:	e7fe      	b.n	80019e6 <LoopForever>
  ldr   r0, =_estack
 80019e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f0:	20002a28 	.word	0x20002a28
  ldr r2, =_sidata
 80019f4:	0800f94c 	.word	0x0800f94c
  ldr r2, =_sbss
 80019f8:	20002a28 	.word	0x20002a28
  ldr r4, =_ebss
 80019fc:	200045dc 	.word	0x200045dc

08001a00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a00:	e7fe      	b.n	8001a00 <ADC1_2_IRQHandler>

08001a02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a0c:	2003      	movs	r0, #3
 8001a0e:	f001 fa65 	bl	8002edc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a12:	200f      	movs	r0, #15
 8001a14:	f000 f80e 	bl	8001a34 <HAL_InitTick>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d002      	beq.n	8001a24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	71fb      	strb	r3, [r7, #7]
 8001a22:	e001      	b.n	8001a28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a24:	f7ff fd48 	bl	80014b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a28:	79fb      	ldrb	r3, [r7, #7]

}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a40:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <HAL_InitTick+0x68>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d022      	beq.n	8001a8e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a48:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <HAL_InitTick+0x6c>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <HAL_InitTick+0x68>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a54:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f001 fa70 	bl	8002f42 <HAL_SYSTICK_Config>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d10f      	bne.n	8001a88 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b0f      	cmp	r3, #15
 8001a6c:	d809      	bhi.n	8001a82 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a76:	f001 fa3c 	bl	8002ef2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <HAL_InitTick+0x70>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	e007      	b.n	8001a92 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	73fb      	strb	r3, [r7, #15]
 8001a86:	e004      	b.n	8001a92 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	73fb      	strb	r3, [r7, #15]
 8001a8c:	e001      	b.n	8001a92 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	200026dc 	.word	0x200026dc
 8001aa0:	200026d4 	.word	0x200026d4
 8001aa4:	200026d8 	.word	0x200026d8

08001aa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <HAL_IncTick+0x1c>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <HAL_IncTick+0x20>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	4a03      	ldr	r2, [pc, #12]	; (8001ac4 <HAL_IncTick+0x1c>)
 8001ab8:	6013      	str	r3, [r2, #0]
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	20002bdc 	.word	0x20002bdc
 8001ac8:	200026dc 	.word	0x200026dc

08001acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad0:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <HAL_GetTick+0x14>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20002bdc 	.word	0x20002bdc

08001ae4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aec:	f7ff ffee 	bl	8001acc <HAL_GetTick>
 8001af0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001afc:	d004      	beq.n	8001b08 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <HAL_Delay+0x40>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	4413      	add	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b08:	bf00      	nop
 8001b0a:	f7ff ffdf 	bl	8001acc <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d8f7      	bhi.n	8001b0a <HAL_Delay+0x26>
  {
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	bf00      	nop
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	200026dc 	.word	0x200026dc

08001b28 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	609a      	str	r2, [r3, #8]
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	609a      	str	r2, [r3, #8]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b087      	sub	sp, #28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
 8001b9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	3360      	adds	r3, #96	; 0x60
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <LL_ADC_SetOffset+0x44>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001bc8:	bf00      	nop
 8001bca:	371c      	adds	r7, #28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	03fff000 	.word	0x03fff000

08001bd8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3360      	adds	r3, #96	; 0x60
 8001be6:	461a      	mov	r2, r3
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	3360      	adds	r3, #96	; 0x60
 8001c14:	461a      	mov	r2, r3
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c2e:	bf00      	nop
 8001c30:	371c      	adds	r7, #28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b087      	sub	sp, #28
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	60f8      	str	r0, [r7, #12]
 8001c42:	60b9      	str	r1, [r7, #8]
 8001c44:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	3360      	adds	r3, #96	; 0x60
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001c64:	bf00      	nop
 8001c66:	371c      	adds	r7, #28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b087      	sub	sp, #28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	3360      	adds	r3, #96	; 0x60
 8001c80:	461a      	mov	r2, r3
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	431a      	orrs	r2, r3
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001c9a:	bf00      	nop
 8001c9c:	371c      	adds	r7, #28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	615a      	str	r2, [r3, #20]
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b087      	sub	sp, #28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	3330      	adds	r3, #48	; 0x30
 8001cdc:	461a      	mov	r2, r3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	0a1b      	lsrs	r3, r3, #8
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	f003 030c 	and.w	r3, r3, #12
 8001ce8:	4413      	add	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	f003 031f 	and.w	r3, r3, #31
 8001cf6:	211f      	movs	r1, #31
 8001cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	401a      	ands	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	0e9b      	lsrs	r3, r3, #26
 8001d04:	f003 011f 	and.w	r1, r3, #31
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	f003 031f 	and.w	r3, r3, #31
 8001d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d12:	431a      	orrs	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d18:	bf00      	nop
 8001d1a:	371c      	adds	r7, #28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b087      	sub	sp, #28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	3314      	adds	r3, #20
 8001d34:	461a      	mov	r2, r3
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	0e5b      	lsrs	r3, r3, #25
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	4413      	add	r3, r2
 8001d42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	0d1b      	lsrs	r3, r3, #20
 8001d4c:	f003 031f 	and.w	r3, r3, #31
 8001d50:	2107      	movs	r1, #7
 8001d52:	fa01 f303 	lsl.w	r3, r1, r3
 8001d56:	43db      	mvns	r3, r3
 8001d58:	401a      	ands	r2, r3
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	0d1b      	lsrs	r3, r3, #20
 8001d5e:	f003 031f 	and.w	r3, r3, #31
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	fa01 f303 	lsl.w	r3, r1, r3
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d6e:	bf00      	nop
 8001d70:	371c      	adds	r7, #28
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a0f      	ldr	r2, [pc, #60]	; (8001dc8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d10a      	bne.n	8001da6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001da4:	e00a      	b.n	8001dbc <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db2:	43db      	mvns	r3, r3
 8001db4:	401a      	ands	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001dbc:	bf00      	nop
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	407f0000 	.word	0x407f0000

08001dcc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ddc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6093      	str	r3, [r2, #8]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e04:	d101      	bne.n	8001e0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001e28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e54:	d101      	bne.n	8001e5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e56:	2301      	movs	r3, #1
 8001e58:	e000      	b.n	8001e5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <LL_ADC_IsEnabled+0x18>
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e000      	b.n	8001e82 <LL_ADC_IsEnabled+0x1a>
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 0304 	and.w	r3, r3, #4
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d101      	bne.n	8001ea6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	2b08      	cmp	r3, #8
 8001ec6:	d101      	bne.n	8001ecc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e000      	b.n	8001ece <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
	...

08001edc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001edc:	b590      	push	{r4, r7, lr}
 8001ede:	b089      	sub	sp, #36	; 0x24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e1af      	b.n	8002256 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d109      	bne.n	8001f18 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff fafb 	bl	8001500 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff67 	bl	8001df0 <LL_ADC_IsDeepPowerDownEnabled>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d004      	beq.n	8001f32 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff4d 	bl	8001dcc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff ff82 	bl	8001e40 <LL_ADC_IsInternalRegulatorEnabled>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d115      	bne.n	8001f6e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff ff66 	bl	8001e18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f4c:	4b9f      	ldr	r3, [pc, #636]	; (80021cc <HAL_ADC_Init+0x2f0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	099b      	lsrs	r3, r3, #6
 8001f52:	4a9f      	ldr	r2, [pc, #636]	; (80021d0 <HAL_ADC_Init+0x2f4>)
 8001f54:	fba2 2303 	umull	r2, r3, r2, r3
 8001f58:	099b      	lsrs	r3, r3, #6
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f60:	e002      	b.n	8001f68 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	3b01      	subs	r3, #1
 8001f66:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f9      	bne.n	8001f62 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff ff64 	bl	8001e40 <LL_ADC_IsInternalRegulatorEnabled>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10d      	bne.n	8001f9a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f82:	f043 0210 	orr.w	r2, r3, #16
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f8e:	f043 0201 	orr.w	r2, r3, #1
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff ff75 	bl	8001e8e <LL_ADC_REG_IsConversionOngoing>
 8001fa4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001faa:	f003 0310 	and.w	r3, r3, #16
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f040 8148 	bne.w	8002244 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f040 8144 	bne.w	8002244 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001fc4:	f043 0202 	orr.w	r2, r3, #2
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff49 	bl	8001e68 <LL_ADC_IsEnabled>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d141      	bne.n	8002060 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fe4:	d004      	beq.n	8001ff0 <HAL_ADC_Init+0x114>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a7a      	ldr	r2, [pc, #488]	; (80021d4 <HAL_ADC_Init+0x2f8>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d10f      	bne.n	8002010 <HAL_ADC_Init+0x134>
 8001ff0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001ff4:	f7ff ff38 	bl	8001e68 <LL_ADC_IsEnabled>
 8001ff8:	4604      	mov	r4, r0
 8001ffa:	4876      	ldr	r0, [pc, #472]	; (80021d4 <HAL_ADC_Init+0x2f8>)
 8001ffc:	f7ff ff34 	bl	8001e68 <LL_ADC_IsEnabled>
 8002000:	4603      	mov	r3, r0
 8002002:	4323      	orrs	r3, r4
 8002004:	2b00      	cmp	r3, #0
 8002006:	bf0c      	ite	eq
 8002008:	2301      	moveq	r3, #1
 800200a:	2300      	movne	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	e012      	b.n	8002036 <HAL_ADC_Init+0x15a>
 8002010:	4871      	ldr	r0, [pc, #452]	; (80021d8 <HAL_ADC_Init+0x2fc>)
 8002012:	f7ff ff29 	bl	8001e68 <LL_ADC_IsEnabled>
 8002016:	4604      	mov	r4, r0
 8002018:	4870      	ldr	r0, [pc, #448]	; (80021dc <HAL_ADC_Init+0x300>)
 800201a:	f7ff ff25 	bl	8001e68 <LL_ADC_IsEnabled>
 800201e:	4603      	mov	r3, r0
 8002020:	431c      	orrs	r4, r3
 8002022:	486f      	ldr	r0, [pc, #444]	; (80021e0 <HAL_ADC_Init+0x304>)
 8002024:	f7ff ff20 	bl	8001e68 <LL_ADC_IsEnabled>
 8002028:	4603      	mov	r3, r0
 800202a:	4323      	orrs	r3, r4
 800202c:	2b00      	cmp	r3, #0
 800202e:	bf0c      	ite	eq
 8002030:	2301      	moveq	r3, #1
 8002032:	2300      	movne	r3, #0
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d012      	beq.n	8002060 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002042:	d004      	beq.n	800204e <HAL_ADC_Init+0x172>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a62      	ldr	r2, [pc, #392]	; (80021d4 <HAL_ADC_Init+0x2f8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d101      	bne.n	8002052 <HAL_ADC_Init+0x176>
 800204e:	4a65      	ldr	r2, [pc, #404]	; (80021e4 <HAL_ADC_Init+0x308>)
 8002050:	e000      	b.n	8002054 <HAL_ADC_Init+0x178>
 8002052:	4a65      	ldr	r2, [pc, #404]	; (80021e8 <HAL_ADC_Init+0x30c>)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	4619      	mov	r1, r3
 800205a:	4610      	mov	r0, r2
 800205c:	f7ff fd64 	bl	8001b28 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	7f5b      	ldrb	r3, [r3, #29]
 8002064:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800206a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002070:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002076:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800207e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800208a:	2b01      	cmp	r3, #1
 800208c:	d106      	bne.n	800209c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	3b01      	subs	r3, #1
 8002094:	045b      	lsls	r3, r3, #17
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d009      	beq.n	80020b8 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	4b4b      	ldr	r3, [pc, #300]	; (80021ec <HAL_ADC_Init+0x310>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6812      	ldr	r2, [r2, #0]
 80020c6:	69b9      	ldr	r1, [r7, #24]
 80020c8:	430b      	orrs	r3, r1
 80020ca:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fed1 	bl	8001e8e <LL_ADC_REG_IsConversionOngoing>
 80020ec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fede 	bl	8001eb4 <LL_ADC_INJ_IsConversionOngoing>
 80020f8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d17f      	bne.n	8002200 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d17c      	bne.n	8002200 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800210a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002112:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002122:	f023 0302 	bic.w	r3, r3, #2
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6812      	ldr	r2, [r2, #0]
 800212a:	69b9      	ldr	r1, [r7, #24]
 800212c:	430b      	orrs	r3, r1
 800212e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d017      	beq.n	8002168 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691a      	ldr	r2, [r3, #16]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002146:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002150:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002154:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6911      	ldr	r1, [r2, #16]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	430b      	orrs	r3, r1
 8002162:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002166:	e013      	b.n	8002190 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691a      	ldr	r2, [r3, #16]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002176:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002188:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800218c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002196:	2b01      	cmp	r3, #1
 8002198:	d12a      	bne.n	80021f0 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80021a4:	f023 0304 	bic.w	r3, r3, #4
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80021b0:	4311      	orrs	r1, r2
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80021b6:	4311      	orrs	r1, r2
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80021bc:	430a      	orrs	r2, r1
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f042 0201 	orr.w	r2, r2, #1
 80021c8:	611a      	str	r2, [r3, #16]
 80021ca:	e019      	b.n	8002200 <HAL_ADC_Init+0x324>
 80021cc:	200026d4 	.word	0x200026d4
 80021d0:	053e2d63 	.word	0x053e2d63
 80021d4:	50000100 	.word	0x50000100
 80021d8:	50000400 	.word	0x50000400
 80021dc:	50000500 	.word	0x50000500
 80021e0:	50000600 	.word	0x50000600
 80021e4:	50000300 	.word	0x50000300
 80021e8:	50000700 	.word	0x50000700
 80021ec:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	691a      	ldr	r2, [r3, #16]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0201 	bic.w	r2, r2, #1
 80021fe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	695b      	ldr	r3, [r3, #20]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d10c      	bne.n	8002222 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	f023 010f 	bic.w	r1, r3, #15
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	1e5a      	subs	r2, r3, #1
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	631a      	str	r2, [r3, #48]	; 0x30
 8002220:	e007      	b.n	8002232 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 020f 	bic.w	r2, r2, #15
 8002230:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002236:	f023 0303 	bic.w	r3, r3, #3
 800223a:	f043 0201 	orr.w	r2, r3, #1
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	65da      	str	r2, [r3, #92]	; 0x5c
 8002242:	e007      	b.n	8002254 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002248:	f043 0210 	orr.w	r2, r3, #16
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002254:	7ffb      	ldrb	r3, [r7, #31]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3724      	adds	r7, #36	; 0x24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd90      	pop	{r4, r7, pc}
 800225e:	bf00      	nop

08002260 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b0b6      	sub	sp, #216	; 0xd8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002270:	2300      	movs	r3, #0
 8002272:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800227a:	2b01      	cmp	r3, #1
 800227c:	d102      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x24>
 800227e:	2302      	movs	r3, #2
 8002280:	f000 bc13 	b.w	8002aaa <HAL_ADC_ConfigChannel+0x84a>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fdfc 	bl	8001e8e <LL_ADC_REG_IsConversionOngoing>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	f040 83f3 	bne.w	8002a84 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	6859      	ldr	r1, [r3, #4]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	f7ff fd0e 	bl	8001ccc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff fdea 	bl	8001e8e <LL_ADC_REG_IsConversionOngoing>
 80022ba:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff fdf6 	bl	8001eb4 <LL_ADC_INJ_IsConversionOngoing>
 80022c8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f040 81d9 	bne.w	8002688 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f040 81d4 	bne.w	8002688 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022e8:	d10f      	bne.n	800230a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2200      	movs	r2, #0
 80022f4:	4619      	mov	r1, r3
 80022f6:	f7ff fd15 	bl	8001d24 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff fccf 	bl	8001ca6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002308:	e00e      	b.n	8002328 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	6819      	ldr	r1, [r3, #0]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	461a      	mov	r2, r3
 8002318:	f7ff fd04 	bl	8001d24 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2100      	movs	r1, #0
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fcbf 	bl	8001ca6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	695a      	ldr	r2, [r3, #20]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	08db      	lsrs	r3, r3, #3
 8002334:	f003 0303 	and.w	r3, r3, #3
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	2b04      	cmp	r3, #4
 8002348:	d022      	beq.n	8002390 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	6919      	ldr	r1, [r3, #16]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800235a:	f7ff fc19 	bl	8001b90 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6818      	ldr	r0, [r3, #0]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	6919      	ldr	r1, [r3, #16]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	461a      	mov	r2, r3
 800236c:	f7ff fc65 	bl	8001c3a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6818      	ldr	r0, [r3, #0]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	6919      	ldr	r1, [r3, #16]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	7f1b      	ldrb	r3, [r3, #28]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d102      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x126>
 8002380:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002384:	e000      	b.n	8002388 <HAL_ADC_ConfigChannel+0x128>
 8002386:	2300      	movs	r3, #0
 8002388:	461a      	mov	r2, r3
 800238a:	f7ff fc71 	bl	8001c70 <LL_ADC_SetOffsetSaturation>
 800238e:	e17b      	b.n	8002688 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2100      	movs	r1, #0
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff fc1e 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 800239c:	4603      	mov	r3, r0
 800239e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10a      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x15c>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2100      	movs	r1, #0
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff fc13 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 80023b2:	4603      	mov	r3, r0
 80023b4:	0e9b      	lsrs	r3, r3, #26
 80023b6:	f003 021f 	and.w	r2, r3, #31
 80023ba:	e01e      	b.n	80023fa <HAL_ADC_ConfigChannel+0x19a>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2100      	movs	r1, #0
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff fc08 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 80023c8:	4603      	mov	r3, r0
 80023ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80023d2:	fa93 f3a3 	rbit	r3, r3
 80023d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80023de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80023ea:	2320      	movs	r3, #32
 80023ec:	e004      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80023ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002402:	2b00      	cmp	r3, #0
 8002404:	d105      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x1b2>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	0e9b      	lsrs	r3, r3, #26
 800240c:	f003 031f 	and.w	r3, r3, #31
 8002410:	e018      	b.n	8002444 <HAL_ADC_ConfigChannel+0x1e4>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800241e:	fa93 f3a3 	rbit	r3, r3
 8002422:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002426:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800242a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800242e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002436:	2320      	movs	r3, #32
 8002438:	e004      	b.n	8002444 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800243a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800243e:	fab3 f383 	clz	r3, r3
 8002442:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002444:	429a      	cmp	r2, r3
 8002446:	d106      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2200      	movs	r2, #0
 800244e:	2100      	movs	r1, #0
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff fbd7 	bl	8001c04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2101      	movs	r1, #1
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff fbbb 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002462:	4603      	mov	r3, r0
 8002464:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10a      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x222>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2101      	movs	r1, #1
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff fbb0 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002478:	4603      	mov	r3, r0
 800247a:	0e9b      	lsrs	r3, r3, #26
 800247c:	f003 021f 	and.w	r2, r3, #31
 8002480:	e01e      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x260>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2101      	movs	r1, #1
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff fba5 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 800248e:	4603      	mov	r3, r0
 8002490:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002494:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002498:	fa93 f3a3 	rbit	r3, r3
 800249c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80024a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80024a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80024b0:	2320      	movs	r3, #32
 80024b2:	e004      	b.n	80024be <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80024b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024b8:	fab3 f383 	clz	r3, r3
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d105      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x278>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	0e9b      	lsrs	r3, r3, #26
 80024d2:	f003 031f 	and.w	r3, r3, #31
 80024d6:	e018      	b.n	800250a <HAL_ADC_ConfigChannel+0x2aa>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024e4:	fa93 f3a3 	rbit	r3, r3
 80024e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80024ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80024f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80024fc:	2320      	movs	r3, #32
 80024fe:	e004      	b.n	800250a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002500:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002504:	fab3 f383 	clz	r3, r3
 8002508:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800250a:	429a      	cmp	r2, r3
 800250c:	d106      	bne.n	800251c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2200      	movs	r2, #0
 8002514:	2101      	movs	r1, #1
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff fb74 	bl	8001c04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2102      	movs	r1, #2
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff fb58 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002528:	4603      	mov	r3, r0
 800252a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10a      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x2e8>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2102      	movs	r1, #2
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fb4d 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 800253e:	4603      	mov	r3, r0
 8002540:	0e9b      	lsrs	r3, r3, #26
 8002542:	f003 021f 	and.w	r2, r3, #31
 8002546:	e01e      	b.n	8002586 <HAL_ADC_ConfigChannel+0x326>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2102      	movs	r1, #2
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fb42 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002554:	4603      	mov	r3, r0
 8002556:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002566:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800256a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800256e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002576:	2320      	movs	r3, #32
 8002578:	e004      	b.n	8002584 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800257a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800257e:	fab3 f383 	clz	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800258e:	2b00      	cmp	r3, #0
 8002590:	d105      	bne.n	800259e <HAL_ADC_ConfigChannel+0x33e>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	0e9b      	lsrs	r3, r3, #26
 8002598:	f003 031f 	and.w	r3, r3, #31
 800259c:	e016      	b.n	80025cc <HAL_ADC_ConfigChannel+0x36c>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025aa:	fa93 f3a3 	rbit	r3, r3
 80025ae:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80025b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80025b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80025be:	2320      	movs	r3, #32
 80025c0:	e004      	b.n	80025cc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80025c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025c6:	fab3 f383 	clz	r3, r3
 80025ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d106      	bne.n	80025de <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2200      	movs	r2, #0
 80025d6:	2102      	movs	r1, #2
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff fb13 	bl	8001c04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2103      	movs	r1, #3
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff faf7 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10a      	bne.n	800260a <HAL_ADC_ConfigChannel+0x3aa>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2103      	movs	r1, #3
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff faec 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002600:	4603      	mov	r3, r0
 8002602:	0e9b      	lsrs	r3, r3, #26
 8002604:	f003 021f 	and.w	r2, r3, #31
 8002608:	e017      	b.n	800263a <HAL_ADC_ConfigChannel+0x3da>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2103      	movs	r1, #3
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fae1 	bl	8001bd8 <LL_ADC_GetOffsetChannel>
 8002616:	4603      	mov	r3, r0
 8002618:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800261c:	fa93 f3a3 	rbit	r3, r3
 8002620:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002622:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002624:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002626:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800262c:	2320      	movs	r3, #32
 800262e:	e003      	b.n	8002638 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002630:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002632:	fab3 f383 	clz	r3, r3
 8002636:	b2db      	uxtb	r3, r3
 8002638:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002642:	2b00      	cmp	r3, #0
 8002644:	d105      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x3f2>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	0e9b      	lsrs	r3, r3, #26
 800264c:	f003 031f 	and.w	r3, r3, #31
 8002650:	e011      	b.n	8002676 <HAL_ADC_ConfigChannel+0x416>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800265a:	fa93 f3a3 	rbit	r3, r3
 800265e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002660:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002662:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800266a:	2320      	movs	r3, #32
 800266c:	e003      	b.n	8002676 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800266e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002670:	fab3 f383 	clz	r3, r3
 8002674:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002676:	429a      	cmp	r2, r3
 8002678:	d106      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2200      	movs	r2, #0
 8002680:	2103      	movs	r1, #3
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fabe 	bl	8001c04 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff fbeb 	bl	8001e68 <LL_ADC_IsEnabled>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	f040 813d 	bne.w	8002914 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	6819      	ldr	r1, [r3, #0]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	461a      	mov	r2, r3
 80026a8:	f7ff fb68 	bl	8001d7c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	4aa2      	ldr	r2, [pc, #648]	; (800293c <HAL_ADC_ConfigChannel+0x6dc>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	f040 812e 	bne.w	8002914 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10b      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x480>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	0e9b      	lsrs	r3, r3, #26
 80026ce:	3301      	adds	r3, #1
 80026d0:	f003 031f 	and.w	r3, r3, #31
 80026d4:	2b09      	cmp	r3, #9
 80026d6:	bf94      	ite	ls
 80026d8:	2301      	movls	r3, #1
 80026da:	2300      	movhi	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	e019      	b.n	8002714 <HAL_ADC_ConfigChannel+0x4b4>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026e8:	fa93 f3a3 	rbit	r3, r3
 80026ec:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80026ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026f0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80026f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80026f8:	2320      	movs	r3, #32
 80026fa:	e003      	b.n	8002704 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80026fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026fe:	fab3 f383 	clz	r3, r3
 8002702:	b2db      	uxtb	r3, r3
 8002704:	3301      	adds	r3, #1
 8002706:	f003 031f 	and.w	r3, r3, #31
 800270a:	2b09      	cmp	r3, #9
 800270c:	bf94      	ite	ls
 800270e:	2301      	movls	r3, #1
 8002710:	2300      	movhi	r3, #0
 8002712:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002714:	2b00      	cmp	r3, #0
 8002716:	d079      	beq.n	800280c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002720:	2b00      	cmp	r3, #0
 8002722:	d107      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x4d4>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	0e9b      	lsrs	r3, r3, #26
 800272a:	3301      	adds	r3, #1
 800272c:	069b      	lsls	r3, r3, #26
 800272e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002732:	e015      	b.n	8002760 <HAL_ADC_ConfigChannel+0x500>
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800273c:	fa93 f3a3 	rbit	r3, r3
 8002740:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002744:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800274c:	2320      	movs	r3, #32
 800274e:	e003      	b.n	8002758 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002752:	fab3 f383 	clz	r3, r3
 8002756:	b2db      	uxtb	r3, r3
 8002758:	3301      	adds	r3, #1
 800275a:	069b      	lsls	r3, r3, #26
 800275c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002768:	2b00      	cmp	r3, #0
 800276a:	d109      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x520>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	0e9b      	lsrs	r3, r3, #26
 8002772:	3301      	adds	r3, #1
 8002774:	f003 031f 	and.w	r3, r3, #31
 8002778:	2101      	movs	r1, #1
 800277a:	fa01 f303 	lsl.w	r3, r1, r3
 800277e:	e017      	b.n	80027b0 <HAL_ADC_ConfigChannel+0x550>
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002788:	fa93 f3a3 	rbit	r3, r3
 800278c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800278e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002790:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002798:	2320      	movs	r3, #32
 800279a:	e003      	b.n	80027a4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800279c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800279e:	fab3 f383 	clz	r3, r3
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	3301      	adds	r3, #1
 80027a6:	f003 031f 	and.w	r3, r3, #31
 80027aa:	2101      	movs	r1, #1
 80027ac:	fa01 f303 	lsl.w	r3, r1, r3
 80027b0:	ea42 0103 	orr.w	r1, r2, r3
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10a      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x576>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	0e9b      	lsrs	r3, r3, #26
 80027c6:	3301      	adds	r3, #1
 80027c8:	f003 021f 	and.w	r2, r3, #31
 80027cc:	4613      	mov	r3, r2
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	4413      	add	r3, r2
 80027d2:	051b      	lsls	r3, r3, #20
 80027d4:	e018      	b.n	8002808 <HAL_ADC_ConfigChannel+0x5a8>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027de:	fa93 f3a3 	rbit	r3, r3
 80027e2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80027e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80027e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80027ee:	2320      	movs	r3, #32
 80027f0:	e003      	b.n	80027fa <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80027f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027f4:	fab3 f383 	clz	r3, r3
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	3301      	adds	r3, #1
 80027fc:	f003 021f 	and.w	r2, r3, #31
 8002800:	4613      	mov	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4413      	add	r3, r2
 8002806:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002808:	430b      	orrs	r3, r1
 800280a:	e07e      	b.n	800290a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002814:	2b00      	cmp	r3, #0
 8002816:	d107      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x5c8>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	0e9b      	lsrs	r3, r3, #26
 800281e:	3301      	adds	r3, #1
 8002820:	069b      	lsls	r3, r3, #26
 8002822:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002826:	e015      	b.n	8002854 <HAL_ADC_ConfigChannel+0x5f4>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002830:	fa93 f3a3 	rbit	r3, r3
 8002834:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002838:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800283a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002840:	2320      	movs	r3, #32
 8002842:	e003      	b.n	800284c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002846:	fab3 f383 	clz	r3, r3
 800284a:	b2db      	uxtb	r3, r3
 800284c:	3301      	adds	r3, #1
 800284e:	069b      	lsls	r3, r3, #26
 8002850:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800285c:	2b00      	cmp	r3, #0
 800285e:	d109      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x614>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	0e9b      	lsrs	r3, r3, #26
 8002866:	3301      	adds	r3, #1
 8002868:	f003 031f 	and.w	r3, r3, #31
 800286c:	2101      	movs	r1, #1
 800286e:	fa01 f303 	lsl.w	r3, r1, r3
 8002872:	e017      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x644>
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287a:	6a3b      	ldr	r3, [r7, #32]
 800287c:	fa93 f3a3 	rbit	r3, r3
 8002880:	61fb      	str	r3, [r7, #28]
  return result;
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800288c:	2320      	movs	r3, #32
 800288e:	e003      	b.n	8002898 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	fab3 f383 	clz	r3, r3
 8002896:	b2db      	uxtb	r3, r3
 8002898:	3301      	adds	r3, #1
 800289a:	f003 031f 	and.w	r3, r3, #31
 800289e:	2101      	movs	r1, #1
 80028a0:	fa01 f303 	lsl.w	r3, r1, r3
 80028a4:	ea42 0103 	orr.w	r1, r2, r3
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10d      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x670>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	0e9b      	lsrs	r3, r3, #26
 80028ba:	3301      	adds	r3, #1
 80028bc:	f003 021f 	and.w	r2, r3, #31
 80028c0:	4613      	mov	r3, r2
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	4413      	add	r3, r2
 80028c6:	3b1e      	subs	r3, #30
 80028c8:	051b      	lsls	r3, r3, #20
 80028ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028ce:	e01b      	b.n	8002908 <HAL_ADC_ConfigChannel+0x6a8>
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	fa93 f3a3 	rbit	r3, r3
 80028dc:	613b      	str	r3, [r7, #16]
  return result;
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80028e8:	2320      	movs	r3, #32
 80028ea:	e003      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	fab3 f383 	clz	r3, r3
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	3301      	adds	r3, #1
 80028f6:	f003 021f 	and.w	r2, r3, #31
 80028fa:	4613      	mov	r3, r2
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	4413      	add	r3, r2
 8002900:	3b1e      	subs	r3, #30
 8002902:	051b      	lsls	r3, r3, #20
 8002904:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002908:	430b      	orrs	r3, r1
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	6892      	ldr	r2, [r2, #8]
 800290e:	4619      	mov	r1, r3
 8002910:	f7ff fa08 	bl	8001d24 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	4b09      	ldr	r3, [pc, #36]	; (8002940 <HAL_ADC_ConfigChannel+0x6e0>)
 800291a:	4013      	ands	r3, r2
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 80be 	beq.w	8002a9e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800292a:	d004      	beq.n	8002936 <HAL_ADC_ConfigChannel+0x6d6>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a04      	ldr	r2, [pc, #16]	; (8002944 <HAL_ADC_ConfigChannel+0x6e4>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d10a      	bne.n	800294c <HAL_ADC_ConfigChannel+0x6ec>
 8002936:	4b04      	ldr	r3, [pc, #16]	; (8002948 <HAL_ADC_ConfigChannel+0x6e8>)
 8002938:	e009      	b.n	800294e <HAL_ADC_ConfigChannel+0x6ee>
 800293a:	bf00      	nop
 800293c:	407f0000 	.word	0x407f0000
 8002940:	80080000 	.word	0x80080000
 8002944:	50000100 	.word	0x50000100
 8002948:	50000300 	.word	0x50000300
 800294c:	4b59      	ldr	r3, [pc, #356]	; (8002ab4 <HAL_ADC_ConfigChannel+0x854>)
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff f910 	bl	8001b74 <LL_ADC_GetCommonPathInternalCh>
 8002954:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a56      	ldr	r2, [pc, #344]	; (8002ab8 <HAL_ADC_ConfigChannel+0x858>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d004      	beq.n	800296c <HAL_ADC_ConfigChannel+0x70c>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a55      	ldr	r2, [pc, #340]	; (8002abc <HAL_ADC_ConfigChannel+0x85c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d13a      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800296c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002970:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d134      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002980:	d005      	beq.n	800298e <HAL_ADC_ConfigChannel+0x72e>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a4e      	ldr	r2, [pc, #312]	; (8002ac0 <HAL_ADC_ConfigChannel+0x860>)
 8002988:	4293      	cmp	r3, r2
 800298a:	f040 8085 	bne.w	8002a98 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002996:	d004      	beq.n	80029a2 <HAL_ADC_ConfigChannel+0x742>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a49      	ldr	r2, [pc, #292]	; (8002ac4 <HAL_ADC_ConfigChannel+0x864>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d101      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x746>
 80029a2:	4a49      	ldr	r2, [pc, #292]	; (8002ac8 <HAL_ADC_ConfigChannel+0x868>)
 80029a4:	e000      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x748>
 80029a6:	4a43      	ldr	r2, [pc, #268]	; (8002ab4 <HAL_ADC_ConfigChannel+0x854>)
 80029a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029b0:	4619      	mov	r1, r3
 80029b2:	4610      	mov	r0, r2
 80029b4:	f7ff f8cb 	bl	8001b4e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029b8:	4b44      	ldr	r3, [pc, #272]	; (8002acc <HAL_ADC_ConfigChannel+0x86c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	099b      	lsrs	r3, r3, #6
 80029be:	4a44      	ldr	r2, [pc, #272]	; (8002ad0 <HAL_ADC_ConfigChannel+0x870>)
 80029c0:	fba2 2303 	umull	r2, r3, r2, r3
 80029c4:	099b      	lsrs	r3, r3, #6
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	4613      	mov	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029d2:	e002      	b.n	80029da <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1f9      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029e0:	e05a      	b.n	8002a98 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a3b      	ldr	r2, [pc, #236]	; (8002ad4 <HAL_ADC_ConfigChannel+0x874>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d125      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x7d8>
 80029ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d11f      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a31      	ldr	r2, [pc, #196]	; (8002ac4 <HAL_ADC_ConfigChannel+0x864>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d104      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x7ac>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a34      	ldr	r2, [pc, #208]	; (8002ad8 <HAL_ADC_ConfigChannel+0x878>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d047      	beq.n	8002a9c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a14:	d004      	beq.n	8002a20 <HAL_ADC_ConfigChannel+0x7c0>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a2a      	ldr	r2, [pc, #168]	; (8002ac4 <HAL_ADC_ConfigChannel+0x864>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d101      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x7c4>
 8002a20:	4a29      	ldr	r2, [pc, #164]	; (8002ac8 <HAL_ADC_ConfigChannel+0x868>)
 8002a22:	e000      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x7c6>
 8002a24:	4a23      	ldr	r2, [pc, #140]	; (8002ab4 <HAL_ADC_ConfigChannel+0x854>)
 8002a26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4610      	mov	r0, r2
 8002a32:	f7ff f88c 	bl	8001b4e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a36:	e031      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a27      	ldr	r2, [pc, #156]	; (8002adc <HAL_ADC_ConfigChannel+0x87c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d12d      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d127      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a1c      	ldr	r2, [pc, #112]	; (8002ac4 <HAL_ADC_ConfigChannel+0x864>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d022      	beq.n	8002a9e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a60:	d004      	beq.n	8002a6c <HAL_ADC_ConfigChannel+0x80c>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a17      	ldr	r2, [pc, #92]	; (8002ac4 <HAL_ADC_ConfigChannel+0x864>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d101      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x810>
 8002a6c:	4a16      	ldr	r2, [pc, #88]	; (8002ac8 <HAL_ADC_ConfigChannel+0x868>)
 8002a6e:	e000      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x812>
 8002a70:	4a10      	ldr	r2, [pc, #64]	; (8002ab4 <HAL_ADC_ConfigChannel+0x854>)
 8002a72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	f7ff f866 	bl	8001b4e <LL_ADC_SetCommonPathInternalCh>
 8002a82:	e00c      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a88:	f043 0220 	orr.w	r2, r3, #32
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002a96:	e002      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a98:	bf00      	nop
 8002a9a:	e000      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a9c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002aa6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	37d8      	adds	r7, #216	; 0xd8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	50000700 	.word	0x50000700
 8002ab8:	c3210000 	.word	0xc3210000
 8002abc:	90c00010 	.word	0x90c00010
 8002ac0:	50000600 	.word	0x50000600
 8002ac4:	50000100 	.word	0x50000100
 8002ac8:	50000300 	.word	0x50000300
 8002acc:	200026d4 	.word	0x200026d4
 8002ad0:	053e2d63 	.word	0x053e2d63
 8002ad4:	c7520000 	.word	0xc7520000
 8002ad8:	50000500 	.word	0x50000500
 8002adc:	cb840000 	.word	0xcb840000

08002ae0 <LL_ADC_IsEnabled>:
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d101      	bne.n	8002af8 <LL_ADC_IsEnabled+0x18>
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <LL_ADC_IsEnabled+0x1a>
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <LL_ADC_REG_IsConversionOngoing>:
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 0304 	and.w	r3, r3, #4
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d101      	bne.n	8002b1e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002b2c:	b590      	push	{r4, r7, lr}
 8002b2e:	b0a1      	sub	sp, #132	; 0x84
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e0e7      	b.n	8002d1a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002b52:	2300      	movs	r3, #0
 8002b54:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002b56:	2300      	movs	r3, #0
 8002b58:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b62:	d102      	bne.n	8002b6a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002b64:	4b6f      	ldr	r3, [pc, #444]	; (8002d24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b66:	60bb      	str	r3, [r7, #8]
 8002b68:	e009      	b.n	8002b7e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a6e      	ldr	r2, [pc, #440]	; (8002d28 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d102      	bne.n	8002b7a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002b74:	4b6d      	ldr	r3, [pc, #436]	; (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002b76:	60bb      	str	r3, [r7, #8]
 8002b78:	e001      	b.n	8002b7e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10b      	bne.n	8002b9c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b88:	f043 0220 	orr.w	r2, r3, #32
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0be      	b.n	8002d1a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff ffb1 	bl	8002b06 <LL_ADC_REG_IsConversionOngoing>
 8002ba4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff ffab 	bl	8002b06 <LL_ADC_REG_IsConversionOngoing>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f040 80a0 	bne.w	8002cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f040 809c 	bne.w	8002cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bc8:	d004      	beq.n	8002bd4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a55      	ldr	r2, [pc, #340]	; (8002d24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d101      	bne.n	8002bd8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002bd4:	4b56      	ldr	r3, [pc, #344]	; (8002d30 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002bd6:	e000      	b.n	8002bda <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002bd8:	4b56      	ldr	r3, [pc, #344]	; (8002d34 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002bda:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d04b      	beq.n	8002c7c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002be4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	6859      	ldr	r1, [r3, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bf6:	035b      	lsls	r3, r3, #13
 8002bf8:	430b      	orrs	r3, r1
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bfe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c08:	d004      	beq.n	8002c14 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a45      	ldr	r2, [pc, #276]	; (8002d24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d10f      	bne.n	8002c34 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002c14:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c18:	f7ff ff62 	bl	8002ae0 <LL_ADC_IsEnabled>
 8002c1c:	4604      	mov	r4, r0
 8002c1e:	4841      	ldr	r0, [pc, #260]	; (8002d24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c20:	f7ff ff5e 	bl	8002ae0 <LL_ADC_IsEnabled>
 8002c24:	4603      	mov	r3, r0
 8002c26:	4323      	orrs	r3, r4
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	bf0c      	ite	eq
 8002c2c:	2301      	moveq	r3, #1
 8002c2e:	2300      	movne	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	e012      	b.n	8002c5a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002c34:	483c      	ldr	r0, [pc, #240]	; (8002d28 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002c36:	f7ff ff53 	bl	8002ae0 <LL_ADC_IsEnabled>
 8002c3a:	4604      	mov	r4, r0
 8002c3c:	483b      	ldr	r0, [pc, #236]	; (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002c3e:	f7ff ff4f 	bl	8002ae0 <LL_ADC_IsEnabled>
 8002c42:	4603      	mov	r3, r0
 8002c44:	431c      	orrs	r4, r3
 8002c46:	483c      	ldr	r0, [pc, #240]	; (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002c48:	f7ff ff4a 	bl	8002ae0 <LL_ADC_IsEnabled>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	4323      	orrs	r3, r4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	bf0c      	ite	eq
 8002c54:	2301      	moveq	r3, #1
 8002c56:	2300      	movne	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d056      	beq.n	8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c66:	f023 030f 	bic.w	r3, r3, #15
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	6811      	ldr	r1, [r2, #0]
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	6892      	ldr	r2, [r2, #8]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	431a      	orrs	r2, r3
 8002c76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c78:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c7a:	e047      	b.n	8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c86:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c90:	d004      	beq.n	8002c9c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a23      	ldr	r2, [pc, #140]	; (8002d24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d10f      	bne.n	8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002c9c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002ca0:	f7ff ff1e 	bl	8002ae0 <LL_ADC_IsEnabled>
 8002ca4:	4604      	mov	r4, r0
 8002ca6:	481f      	ldr	r0, [pc, #124]	; (8002d24 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ca8:	f7ff ff1a 	bl	8002ae0 <LL_ADC_IsEnabled>
 8002cac:	4603      	mov	r3, r0
 8002cae:	4323      	orrs	r3, r4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	bf0c      	ite	eq
 8002cb4:	2301      	moveq	r3, #1
 8002cb6:	2300      	movne	r3, #0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	e012      	b.n	8002ce2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002cbc:	481a      	ldr	r0, [pc, #104]	; (8002d28 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002cbe:	f7ff ff0f 	bl	8002ae0 <LL_ADC_IsEnabled>
 8002cc2:	4604      	mov	r4, r0
 8002cc4:	4819      	ldr	r0, [pc, #100]	; (8002d2c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002cc6:	f7ff ff0b 	bl	8002ae0 <LL_ADC_IsEnabled>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	431c      	orrs	r4, r3
 8002cce:	481a      	ldr	r0, [pc, #104]	; (8002d38 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002cd0:	f7ff ff06 	bl	8002ae0 <LL_ADC_IsEnabled>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	4323      	orrs	r3, r4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	bf0c      	ite	eq
 8002cdc:	2301      	moveq	r3, #1
 8002cde:	2300      	movne	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d012      	beq.n	8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ce6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002cee:	f023 030f 	bic.w	r3, r3, #15
 8002cf2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002cf4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cf6:	e009      	b.n	8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfc:	f043 0220 	orr.w	r2, r3, #32
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002d0a:	e000      	b.n	8002d0e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d0c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d16:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3784      	adds	r7, #132	; 0x84
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd90      	pop	{r4, r7, pc}
 8002d22:	bf00      	nop
 8002d24:	50000100 	.word	0x50000100
 8002d28:	50000400 	.word	0x50000400
 8002d2c:	50000500 	.word	0x50000500
 8002d30:	50000300 	.word	0x50000300
 8002d34:	50000700 	.word	0x50000700
 8002d38:	50000600 	.word	0x50000600

08002d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <__NVIC_SetPriorityGrouping+0x44>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d52:	68ba      	ldr	r2, [r7, #8]
 8002d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d58:	4013      	ands	r3, r2
 8002d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d6e:	4a04      	ldr	r2, [pc, #16]	; (8002d80 <__NVIC_SetPriorityGrouping+0x44>)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	60d3      	str	r3, [r2, #12]
}
 8002d74:	bf00      	nop
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d88:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <__NVIC_GetPriorityGrouping+0x18>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	0a1b      	lsrs	r3, r3, #8
 8002d8e:	f003 0307 	and.w	r3, r3, #7
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	db0b      	blt.n	8002dca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002db2:	79fb      	ldrb	r3, [r7, #7]
 8002db4:	f003 021f 	and.w	r2, r3, #31
 8002db8:	4907      	ldr	r1, [pc, #28]	; (8002dd8 <__NVIC_EnableIRQ+0x38>)
 8002dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbe:	095b      	lsrs	r3, r3, #5
 8002dc0:	2001      	movs	r0, #1
 8002dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8002dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	e000e100 	.word	0xe000e100

08002ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	6039      	str	r1, [r7, #0]
 8002de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	db0a      	blt.n	8002e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	490c      	ldr	r1, [pc, #48]	; (8002e28 <__NVIC_SetPriority+0x4c>)
 8002df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfa:	0112      	lsls	r2, r2, #4
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	440b      	add	r3, r1
 8002e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e04:	e00a      	b.n	8002e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	4908      	ldr	r1, [pc, #32]	; (8002e2c <__NVIC_SetPriority+0x50>)
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	3b04      	subs	r3, #4
 8002e14:	0112      	lsls	r2, r2, #4
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	440b      	add	r3, r1
 8002e1a:	761a      	strb	r2, [r3, #24]
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	e000e100 	.word	0xe000e100
 8002e2c:	e000ed00 	.word	0xe000ed00

08002e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b089      	sub	sp, #36	; 0x24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f1c3 0307 	rsb	r3, r3, #7
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	bf28      	it	cs
 8002e4e:	2304      	movcs	r3, #4
 8002e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	3304      	adds	r3, #4
 8002e56:	2b06      	cmp	r3, #6
 8002e58:	d902      	bls.n	8002e60 <NVIC_EncodePriority+0x30>
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	3b03      	subs	r3, #3
 8002e5e:	e000      	b.n	8002e62 <NVIC_EncodePriority+0x32>
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	43da      	mvns	r2, r3
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	401a      	ands	r2, r3
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e82:	43d9      	mvns	r1, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e88:	4313      	orrs	r3, r2
         );
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3724      	adds	r7, #36	; 0x24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
	...

08002e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ea8:	d301      	bcc.n	8002eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e00f      	b.n	8002ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eae:	4a0a      	ldr	r2, [pc, #40]	; (8002ed8 <SysTick_Config+0x40>)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eb6:	210f      	movs	r1, #15
 8002eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ebc:	f7ff ff8e 	bl	8002ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ec0:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <SysTick_Config+0x40>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ec6:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <SysTick_Config+0x40>)
 8002ec8:	2207      	movs	r2, #7
 8002eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	e000e010 	.word	0xe000e010

08002edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7ff ff29 	bl	8002d3c <__NVIC_SetPriorityGrouping>
}
 8002eea:	bf00      	nop
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b086      	sub	sp, #24
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	4603      	mov	r3, r0
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	607a      	str	r2, [r7, #4]
 8002efe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f00:	f7ff ff40 	bl	8002d84 <__NVIC_GetPriorityGrouping>
 8002f04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	68b9      	ldr	r1, [r7, #8]
 8002f0a:	6978      	ldr	r0, [r7, #20]
 8002f0c:	f7ff ff90 	bl	8002e30 <NVIC_EncodePriority>
 8002f10:	4602      	mov	r2, r0
 8002f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f16:	4611      	mov	r1, r2
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff ff5f 	bl	8002ddc <__NVIC_SetPriority>
}
 8002f1e:	bf00      	nop
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff ff33 	bl	8002da0 <__NVIC_EnableIRQ>
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b082      	sub	sp, #8
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7ff ffa4 	bl	8002e98 <SysTick_Config>
 8002f50:	4603      	mov	r3, r0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e014      	b.n	8002f96 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	791b      	ldrb	r3, [r3, #4]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d105      	bne.n	8002f82 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7fe fb13 	bl	80015a8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2202      	movs	r2, #2
 8002f86:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
 8002fa6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	795b      	ldrb	r3, [r3, #5]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <HAL_DAC_Start+0x16>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e043      	b.n	800303c <HAL_DAC_Start+0x9e>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6819      	ldr	r1, [r3, #0]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	f003 0310 	and.w	r3, r3, #16
 8002fcc:	2201      	movs	r2, #1
 8002fce:	409a      	lsls	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8002fd8:	2001      	movs	r0, #1
 8002fda:	f7fe fd83 	bl	8001ae4 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10f      	bne.n	8003004 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d11d      	bne.n	800302e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f042 0201 	orr.w	r2, r2, #1
 8003000:	605a      	str	r2, [r3, #4]
 8003002:	e014      	b.n	800302e <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	f003 0310 	and.w	r3, r3, #16
 8003014:	2102      	movs	r1, #2
 8003016:	fa01 f303 	lsl.w	r3, r1, r3
 800301a:	429a      	cmp	r2, r3
 800301c:	d107      	bne.n	800302e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f042 0202 	orr.w	r2, r2, #2
 800302c:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_DAC_Stop>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6819      	ldr	r1, [r3, #0]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	f003 0310 	and.w	r3, r3, #16
 800305a:	2201      	movs	r2, #1
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	43da      	mvns	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	400a      	ands	r2, r1
 8003068:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 800306a:	2001      	movs	r0, #1
 800306c:	f7fe fd3a 	bl	8001ae4 <HAL_Delay>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
 800308c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	795b      	ldrb	r3, [r3, #5]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d101      	bne.n	800309e <HAL_DAC_Start_DMA+0x1e>
 800309a:	2302      	movs	r3, #2
 800309c:	e0ae      	b.n	80031fc <HAL_DAC_Start_DMA+0x17c>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2201      	movs	r2, #1
 80030a2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2202      	movs	r2, #2
 80030a8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d12f      	bne.n	8003110 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	4a53      	ldr	r2, [pc, #332]	; (8003204 <HAL_DAC_Start_DMA+0x184>)
 80030b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	4a52      	ldr	r2, [pc, #328]	; (8003208 <HAL_DAC_Start_DMA+0x188>)
 80030be:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	4a51      	ldr	r2, [pc, #324]	; (800320c <HAL_DAC_Start_DMA+0x18c>)
 80030c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030d6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d013      	beq.n	8003106 <HAL_DAC_Start_DMA+0x86>
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d845      	bhi.n	8003170 <HAL_DAC_Start_DMA+0xf0>
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <HAL_DAC_Start_DMA+0x72>
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	d005      	beq.n	80030fc <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80030f0:	e03e      	b.n	8003170 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	3308      	adds	r3, #8
 80030f8:	613b      	str	r3, [r7, #16]
        break;
 80030fa:	e03c      	b.n	8003176 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	330c      	adds	r3, #12
 8003102:	613b      	str	r3, [r7, #16]
        break;
 8003104:	e037      	b.n	8003176 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	3310      	adds	r3, #16
 800310c:	613b      	str	r3, [r7, #16]
        break;
 800310e:	e032      	b.n	8003176 <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	4a3e      	ldr	r2, [pc, #248]	; (8003210 <HAL_DAC_Start_DMA+0x190>)
 8003116:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	4a3d      	ldr	r2, [pc, #244]	; (8003214 <HAL_DAC_Start_DMA+0x194>)
 800311e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	4a3c      	ldr	r2, [pc, #240]	; (8003218 <HAL_DAC_Start_DMA+0x198>)
 8003126:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003136:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	2b08      	cmp	r3, #8
 800313c:	d013      	beq.n	8003166 <HAL_DAC_Start_DMA+0xe6>
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	2b08      	cmp	r3, #8
 8003142:	d817      	bhi.n	8003174 <HAL_DAC_Start_DMA+0xf4>
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_DAC_Start_DMA+0xd2>
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	2b04      	cmp	r3, #4
 800314e:	d005      	beq.n	800315c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003150:	e010      	b.n	8003174 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	3314      	adds	r3, #20
 8003158:	613b      	str	r3, [r7, #16]
        break;
 800315a:	e00c      	b.n	8003176 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	3318      	adds	r3, #24
 8003162:	613b      	str	r3, [r7, #16]
        break;
 8003164:	e007      	b.n	8003176 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	331c      	adds	r3, #28
 800316c:	613b      	str	r3, [r7, #16]
        break;
 800316e:	e002      	b.n	8003176 <HAL_DAC_Start_DMA+0xf6>
        break;
 8003170:	bf00      	nop
 8003172:	e000      	b.n	8003176 <HAL_DAC_Start_DMA+0xf6>
        break;
 8003174:	bf00      	nop
    }
  }


  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d111      	bne.n	80031a0 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800318a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6898      	ldr	r0, [r3, #8]
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	f000 fbad 	bl	80038f4 <HAL_DMA_Start_IT>
 800319a:	4603      	mov	r3, r0
 800319c:	75fb      	strb	r3, [r7, #23]
 800319e:	e010      	b.n	80031c2 <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80031ae:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	68d8      	ldr	r0, [r3, #12]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	f000 fb9b 	bl	80038f4 <HAL_DMA_Start_IT>
 80031be:	4603      	mov	r3, r0
 80031c0:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80031c8:	7dfb      	ldrb	r3, [r7, #23]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10f      	bne.n	80031ee <HAL_DAC_Start_DMA+0x16e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6819      	ldr	r1, [r3, #0]
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f003 0310 	and.w	r3, r3, #16
 80031da:	2201      	movs	r2, #1
 80031dc:	409a      	lsls	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 80031e6:	2001      	movs	r0, #1
 80031e8:	f7fe fc7c 	bl	8001ae4 <HAL_Delay>
 80031ec:	e005      	b.n	80031fa <HAL_DAC_Start_DMA+0x17a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f043 0204 	orr.w	r2, r3, #4
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80031fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3718      	adds	r7, #24
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	08003691 	.word	0x08003691
 8003208:	080036b3 	.word	0x080036b3
 800320c:	080036cf 	.word	0x080036cf
 8003210:	08003739 	.word	0x08003739
 8003214:	0800375b 	.word	0x0800375b
 8003218:	08003777 	.word	0x08003777

0800321c <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6819      	ldr	r1, [r3, #0]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	f003 0310 	and.w	r3, r3, #16
 8003232:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43da      	mvns	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	400a      	ands	r2, r1
 8003242:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6819      	ldr	r1, [r3, #0]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	f003 0310 	and.w	r3, r3, #16
 8003250:	2201      	movs	r2, #1
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	43da      	mvns	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	400a      	ands	r2, r1
 800325e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8003260:	2001      	movs	r0, #1
 8003262:	f7fe fc3f 	bl	8001ae4 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10d      	bne.n	8003288 <HAL_DAC_Stop_DMA+0x6c>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	4618      	mov	r0, r3
 8003272:	f000 fbba 	bl	80039ea <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	e00c      	b.n	80032a2 <HAL_DAC_Stop_DMA+0x86>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	4618      	mov	r0, r3
 800328e:	f000 fbac 	bl	80039ea <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80032a0:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b087      	sub	sp, #28
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	607a      	str	r2, [r7, #4]
 80032be:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d105      	bne.n	80032e2 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4413      	add	r3, r2
 80032dc:	3308      	adds	r3, #8
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	e004      	b.n	80032ec <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4413      	add	r3, r2
 80032e8:	3314      	adds	r3, #20
 80032ea:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	461a      	mov	r2, r3
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	371c      	adds	r7, #28
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
	...

08003340 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08a      	sub	sp, #40	; 0x28
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	795b      	ldrb	r3, [r3, #5]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <HAL_DAC_ConfigChannel+0x18>
 8003354:	2302      	movs	r3, #2
 8003356:	e192      	b.n	800367e <HAL_DAC_ConfigChannel+0x33e>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2201      	movs	r2, #1
 800335c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2202      	movs	r2, #2
 8003362:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2b04      	cmp	r3, #4
 800336a:	d174      	bne.n	8003456 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800336c:	f7fe fbae 	bl	8001acc <HAL_GetTick>
 8003370:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d134      	bne.n	80033e2 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003378:	e011      	b.n	800339e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800337a:	f7fe fba7 	bl	8001acc <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b01      	cmp	r3, #1
 8003386:	d90a      	bls.n	800339e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	f043 0208 	orr.w	r2, r3, #8
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2203      	movs	r2, #3
 8003398:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e16f      	b.n	800367e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1e6      	bne.n	800337a <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80033ac:	2001      	movs	r0, #1
 80033ae:	f7fe fb99 	bl	8001ae4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033ba:	641a      	str	r2, [r3, #64]	; 0x40
 80033bc:	e01e      	b.n	80033fc <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80033be:	f7fe fb85 	bl	8001acc <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d90a      	bls.n	80033e2 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	f043 0208 	orr.w	r2, r3, #8
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2203      	movs	r2, #3
 80033dc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e14d      	b.n	800367e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	dbe8      	blt.n	80033be <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80033ec:	2001      	movs	r0, #1
 80033ee:	f7fe fb79 	bl	8001ae4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033fa:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f003 0310 	and.w	r3, r3, #16
 8003408:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800340c:	fa01 f303 	lsl.w	r3, r1, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	ea02 0103 	and.w	r1, r2, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f003 0310 	and.w	r3, r3, #16
 8003420:	409a      	lsls	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f003 0310 	and.w	r3, r3, #16
 8003436:	21ff      	movs	r1, #255	; 0xff
 8003438:	fa01 f303 	lsl.w	r3, r1, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	ea02 0103 	and.w	r1, r2, r3
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f003 0310 	and.w	r3, r3, #16
 800344c:	409a      	lsls	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d11d      	bne.n	800349a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f003 0310 	and.w	r3, r3, #16
 800346c:	221f      	movs	r2, #31
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43db      	mvns	r3, r3
 8003474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003476:	4013      	ands	r3, r2
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f003 0310 	and.w	r3, r3, #16
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800348e:	4313      	orrs	r3, r2
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003498:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f003 0310 	and.w	r3, r3, #16
 80034a8:	2207      	movs	r2, #7
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	43db      	mvns	r3, r3
 80034b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b2:	4013      	ands	r3, r2
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d102      	bne.n	80034c4 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80034be:	2300      	movs	r3, #0
 80034c0:	623b      	str	r3, [r7, #32]
 80034c2:	e00f      	b.n	80034e4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d102      	bne.n	80034d2 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80034cc:	2301      	movs	r3, #1
 80034ce:	623b      	str	r3, [r7, #32]
 80034d0:	e008      	b.n	80034e4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d102      	bne.n	80034e0 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80034da:	2301      	movs	r3, #1
 80034dc:	623b      	str	r3, [r7, #32]
 80034de:	e001      	b.n	80034e4 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	6a3a      	ldr	r2, [r7, #32]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f003 0310 	and.w	r3, r3, #16
 80034fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43db      	mvns	r3, r3
 8003504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003506:	4013      	ands	r3, r2
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	791b      	ldrb	r3, [r3, #4]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d102      	bne.n	8003518 <HAL_DAC_ConfigChannel+0x1d8>
 8003512:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003516:	e000      	b.n	800351a <HAL_DAC_ConfigChannel+0x1da>
 8003518:	2300      	movs	r3, #0
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4313      	orrs	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f003 0310 	and.w	r3, r3, #16
 8003526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	43db      	mvns	r3, r3
 8003530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003532:	4013      	ands	r3, r2
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	795b      	ldrb	r3, [r3, #5]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d102      	bne.n	8003544 <HAL_DAC_ConfigChannel+0x204>
 800353e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003542:	e000      	b.n	8003546 <HAL_DAC_ConfigChannel+0x206>
 8003544:	2300      	movs	r3, #0
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4313      	orrs	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003552:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b02      	cmp	r3, #2
 800355a:	d114      	bne.n	8003586 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800355c:	f003 f89c 	bl	8006698 <HAL_RCC_GetHCLKFreq>
 8003560:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	4a48      	ldr	r2, [pc, #288]	; (8003688 <HAL_DAC_ConfigChannel+0x348>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d904      	bls.n	8003574 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
 8003572:	e00f      	b.n	8003594 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	4a45      	ldr	r2, [pc, #276]	; (800368c <HAL_DAC_ConfigChannel+0x34c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d90a      	bls.n	8003592 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
 8003584:	e006      	b.n	8003594 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800358c:	4313      	orrs	r3, r2
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
 8003590:	e000      	b.n	8003594 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003592:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f003 0310 	and.w	r3, r3, #16
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a2:	4313      	orrs	r3, r2
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6819      	ldr	r1, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f003 0310 	and.w	r3, r3, #16
 80035ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	43da      	mvns	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	400a      	ands	r2, r1
 80035ca:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f003 0310 	and.w	r3, r3, #16
 80035da:	f640 72fe 	movw	r2, #4094	; 0xffe
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	43db      	mvns	r3, r3
 80035e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e6:	4013      	ands	r3, r2
 80035e8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f003 0310 	and.w	r3, r3, #16
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035fe:	4313      	orrs	r3, r2
 8003600:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003608:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6819      	ldr	r1, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f003 0310 	and.w	r3, r3, #16
 8003616:	22c0      	movs	r2, #192	; 0xc0
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	43da      	mvns	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	400a      	ands	r2, r1
 8003624:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	089b      	lsrs	r3, r3, #2
 800362c:	f003 030f 	and.w	r3, r3, #15
 8003630:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	089b      	lsrs	r3, r3, #2
 8003638:	021b      	lsls	r3, r3, #8
 800363a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4313      	orrs	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003654:	fa01 f303 	lsl.w	r3, r1, r3
 8003658:	43db      	mvns	r3, r3
 800365a:	ea02 0103 	and.w	r1, r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f003 0310 	and.w	r3, r3, #16
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	409a      	lsls	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2201      	movs	r2, #1
 8003674:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3728      	adds	r7, #40	; 0x28
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	09896800 	.word	0x09896800
 800368c:	04c4b400 	.word	0x04c4b400

08003690 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f7ff fe2f 	bl	8003302 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2201      	movs	r2, #1
 80036a8:	711a      	strb	r2, [r3, #4]
}
 80036aa:	bf00      	nop
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b084      	sub	sp, #16
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036be:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f7ff fe28 	bl	8003316 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80036c6:	bf00      	nop
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b084      	sub	sp, #16
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036da:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	f043 0204 	orr.w	r2, r3, #4
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f7ff fe1e 	bl	800332a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2201      	movs	r2, #1
 80036f2:	711a      	strb	r2, [r3, #4]
}
 80036f4:	bf00      	nop
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003744:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f7ff ffd8 	bl	80036fc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2201      	movs	r2, #1
 8003750:	711a      	strb	r2, [r3, #4]
}
 8003752:	bf00      	nop
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b084      	sub	sp, #16
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003766:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f7ff ffd1 	bl	8003710 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800376e:	bf00      	nop
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b084      	sub	sp, #16
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003782:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	f043 0204 	orr.w	r2, r3, #4
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f7ff ffc7 	bl	8003724 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2201      	movs	r2, #1
 800379a:	711a      	strb	r2, [r3, #4]
}
 800379c:	bf00      	nop
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e08d      	b.n	80038d2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	461a      	mov	r2, r3
 80037bc:	4b47      	ldr	r3, [pc, #284]	; (80038dc <HAL_DMA_Init+0x138>)
 80037be:	429a      	cmp	r2, r3
 80037c0:	d80f      	bhi.n	80037e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	4b45      	ldr	r3, [pc, #276]	; (80038e0 <HAL_DMA_Init+0x13c>)
 80037ca:	4413      	add	r3, r2
 80037cc:	4a45      	ldr	r2, [pc, #276]	; (80038e4 <HAL_DMA_Init+0x140>)
 80037ce:	fba2 2303 	umull	r2, r3, r2, r3
 80037d2:	091b      	lsrs	r3, r3, #4
 80037d4:	009a      	lsls	r2, r3, #2
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a42      	ldr	r2, [pc, #264]	; (80038e8 <HAL_DMA_Init+0x144>)
 80037de:	641a      	str	r2, [r3, #64]	; 0x40
 80037e0:	e00e      	b.n	8003800 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	461a      	mov	r2, r3
 80037e8:	4b40      	ldr	r3, [pc, #256]	; (80038ec <HAL_DMA_Init+0x148>)
 80037ea:	4413      	add	r3, r2
 80037ec:	4a3d      	ldr	r2, [pc, #244]	; (80038e4 <HAL_DMA_Init+0x140>)
 80037ee:	fba2 2303 	umull	r2, r3, r2, r3
 80037f2:	091b      	lsrs	r3, r3, #4
 80037f4:	009a      	lsls	r2, r3, #2
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a3c      	ldr	r2, [pc, #240]	; (80038f0 <HAL_DMA_Init+0x14c>)
 80037fe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003824:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003830:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800383c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	4313      	orrs	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fa76 	bl	8003d44 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003860:	d102      	bne.n	8003868 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003870:	b2d2      	uxtb	r2, r2
 8003872:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800387c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d010      	beq.n	80038a8 <HAL_DMA_Init+0x104>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b04      	cmp	r3, #4
 800388c:	d80c      	bhi.n	80038a8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 fa96 	bl	8003dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038a4:	605a      	str	r2, [r3, #4]
 80038a6:	e008      	b.n	80038ba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40020407 	.word	0x40020407
 80038e0:	bffdfff8 	.word	0xbffdfff8
 80038e4:	cccccccd 	.word	0xcccccccd
 80038e8:	40020000 	.word	0x40020000
 80038ec:	bffdfbf8 	.word	0xbffdfbf8
 80038f0:	40020400 	.word	0x40020400

080038f4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
 8003900:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_DMA_Start_IT+0x20>
 8003910:	2302      	movs	r3, #2
 8003912:	e066      	b.n	80039e2 <HAL_DMA_Start_IT+0xee>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b01      	cmp	r3, #1
 8003926:	d155      	bne.n	80039d4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0201 	bic.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	68b9      	ldr	r1, [r7, #8]
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 f9bb 	bl	8003cc8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	2b00      	cmp	r3, #0
 8003958:	d008      	beq.n	800396c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f042 020e 	orr.w	r2, r2, #14
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	e00f      	b.n	800398c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0204 	bic.w	r2, r2, #4
 800397a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 020a 	orr.w	r2, r2, #10
 800398a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d007      	beq.n	80039aa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039a8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d007      	beq.n	80039c2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039c0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f042 0201 	orr.w	r2, r2, #1
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	e005      	b.n	80039e0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80039dc:	2302      	movs	r3, #2
 80039de:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80039e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b085      	sub	sp, #20
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f2:	2300      	movs	r3, #0
 80039f4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d005      	beq.n	8003a0e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2204      	movs	r2, #4
 8003a06:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	73fb      	strb	r3, [r7, #15]
 8003a0c:	e037      	b.n	8003a7e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 020e 	bic.w	r2, r2, #14
 8003a1c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a2c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 0201 	bic.w	r2, r2, #1
 8003a3c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a42:	f003 021f 	and.w	r2, r3, #31
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a50:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a5a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00c      	beq.n	8003a7e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a72:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a7c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d00d      	beq.n	8003ad0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2204      	movs	r2, #4
 8003ab8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
 8003ace:	e047      	b.n	8003b60 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 020e 	bic.w	r2, r2, #14
 8003ade:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0201 	bic.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003afa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003afe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b04:	f003 021f 	and.w	r2, r3, #31
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b12:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b1c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00c      	beq.n	8003b40 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b34:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b3e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	4798      	blx	r3
    }
  }
  return status;
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b084      	sub	sp, #16
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b86:	f003 031f 	and.w	r3, r3, #31
 8003b8a:	2204      	movs	r2, #4
 8003b8c:	409a      	lsls	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4013      	ands	r3, r2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d026      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x7a>
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d021      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0320 	and.w	r3, r3, #32
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d107      	bne.n	8003bbe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 0204 	bic.w	r2, r2, #4
 8003bbc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc2:	f003 021f 	and.w	r2, r3, #31
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	2104      	movs	r1, #4
 8003bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8003bd0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d071      	beq.n	8003cbe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003be2:	e06c      	b.n	8003cbe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be8:	f003 031f 	and.w	r3, r3, #31
 8003bec:	2202      	movs	r2, #2
 8003bee:	409a      	lsls	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d02e      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d029      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0320 	and.w	r3, r3, #32
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10b      	bne.n	8003c28 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 020a 	bic.w	r2, r2, #10
 8003c1e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2c:	f003 021f 	and.w	r2, r3, #31
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	2102      	movs	r1, #2
 8003c36:	fa01 f202 	lsl.w	r2, r1, r2
 8003c3a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d038      	beq.n	8003cbe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003c54:	e033      	b.n	8003cbe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5a:	f003 031f 	and.w	r3, r3, #31
 8003c5e:	2208      	movs	r2, #8
 8003c60:	409a      	lsls	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4013      	ands	r3, r2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d02a      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	f003 0308 	and.w	r3, r3, #8
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d025      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 020e 	bic.w	r2, r2, #14
 8003c82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c88:	f003 021f 	and.w	r2, r3, #31
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	2101      	movs	r1, #1
 8003c92:	fa01 f202 	lsl.w	r2, r1, r2
 8003c96:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d004      	beq.n	8003cc0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003cbe:	bf00      	nop
 8003cc0:	bf00      	nop
}
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
 8003cd4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003cde:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d004      	beq.n	8003cf2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003cf0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf6:	f003 021f 	and.w	r2, r3, #31
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	2101      	movs	r1, #1
 8003d00:	fa01 f202 	lsl.w	r2, r1, r2
 8003d04:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	2b10      	cmp	r3, #16
 8003d14:	d108      	bne.n	8003d28 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d26:	e007      	b.n	8003d38 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	60da      	str	r2, [r3, #12]
}
 8003d38:	bf00      	nop
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	461a      	mov	r2, r3
 8003d52:	4b16      	ldr	r3, [pc, #88]	; (8003dac <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d802      	bhi.n	8003d5e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003d58:	4b15      	ldr	r3, [pc, #84]	; (8003db0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	e001      	b.n	8003d62 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003d5e:	4b15      	ldr	r3, [pc, #84]	; (8003db4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003d60:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	3b08      	subs	r3, #8
 8003d6e:	4a12      	ldr	r2, [pc, #72]	; (8003db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003d70:	fba2 2303 	umull	r2, r3, r2, r3
 8003d74:	091b      	lsrs	r3, r3, #4
 8003d76:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7c:	089b      	lsrs	r3, r3, #2
 8003d7e:	009a      	lsls	r2, r3, #2
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	4413      	add	r3, r2
 8003d84:	461a      	mov	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a0b      	ldr	r2, [pc, #44]	; (8003dbc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003d8e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f003 031f 	and.w	r3, r3, #31
 8003d96:	2201      	movs	r2, #1
 8003d98:	409a      	lsls	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003d9e:	bf00      	nop
 8003da0:	371c      	adds	r7, #28
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	40020407 	.word	0x40020407
 8003db0:	40020800 	.word	0x40020800
 8003db4:	40020820 	.word	0x40020820
 8003db8:	cccccccd 	.word	0xcccccccd
 8003dbc:	40020880 	.word	0x40020880

08003dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	461a      	mov	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a08      	ldr	r2, [pc, #32]	; (8003e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003de2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	f003 031f 	and.w	r3, r3, #31
 8003dec:	2201      	movs	r2, #1
 8003dee:	409a      	lsls	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003df4:	bf00      	nop
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	1000823f 	.word	0x1000823f
 8003e04:	40020940 	.word	0x40020940

08003e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e16:	e15a      	b.n	80040ce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	fa01 f303 	lsl.w	r3, r1, r3
 8003e24:	4013      	ands	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 814c 	beq.w	80040c8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f003 0303 	and.w	r3, r3, #3
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d005      	beq.n	8003e48 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d130      	bne.n	8003eaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	2203      	movs	r2, #3
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e7e:	2201      	movs	r2, #1
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	43db      	mvns	r3, r3
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	091b      	lsrs	r3, r3, #4
 8003e94:	f003 0201 	and.w	r2, r3, #1
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f003 0303 	and.w	r3, r3, #3
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	d017      	beq.n	8003ee6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	2203      	movs	r2, #3
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	689a      	ldr	r2, [r3, #8]
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d123      	bne.n	8003f3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	08da      	lsrs	r2, r3, #3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	3208      	adds	r2, #8
 8003efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003efe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	220f      	movs	r2, #15
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	4013      	ands	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	691a      	ldr	r2, [r3, #16]
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	fa02 f303 	lsl.w	r3, r2, r3
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	08da      	lsrs	r2, r3, #3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3208      	adds	r2, #8
 8003f34:	6939      	ldr	r1, [r7, #16]
 8003f36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	2203      	movs	r2, #3
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f003 0203 	and.w	r2, r3, #3
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 80a6 	beq.w	80040c8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f7c:	4b5b      	ldr	r3, [pc, #364]	; (80040ec <HAL_GPIO_Init+0x2e4>)
 8003f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f80:	4a5a      	ldr	r2, [pc, #360]	; (80040ec <HAL_GPIO_Init+0x2e4>)
 8003f82:	f043 0301 	orr.w	r3, r3, #1
 8003f86:	6613      	str	r3, [r2, #96]	; 0x60
 8003f88:	4b58      	ldr	r3, [pc, #352]	; (80040ec <HAL_GPIO_Init+0x2e4>)
 8003f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	60bb      	str	r3, [r7, #8]
 8003f92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f94:	4a56      	ldr	r2, [pc, #344]	; (80040f0 <HAL_GPIO_Init+0x2e8>)
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	089b      	lsrs	r3, r3, #2
 8003f9a:	3302      	adds	r3, #2
 8003f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f003 0303 	and.w	r3, r3, #3
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	220f      	movs	r2, #15
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003fbe:	d01f      	beq.n	8004000 <HAL_GPIO_Init+0x1f8>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a4c      	ldr	r2, [pc, #304]	; (80040f4 <HAL_GPIO_Init+0x2ec>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d019      	beq.n	8003ffc <HAL_GPIO_Init+0x1f4>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a4b      	ldr	r2, [pc, #300]	; (80040f8 <HAL_GPIO_Init+0x2f0>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d013      	beq.n	8003ff8 <HAL_GPIO_Init+0x1f0>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a4a      	ldr	r2, [pc, #296]	; (80040fc <HAL_GPIO_Init+0x2f4>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d00d      	beq.n	8003ff4 <HAL_GPIO_Init+0x1ec>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a49      	ldr	r2, [pc, #292]	; (8004100 <HAL_GPIO_Init+0x2f8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d007      	beq.n	8003ff0 <HAL_GPIO_Init+0x1e8>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a48      	ldr	r2, [pc, #288]	; (8004104 <HAL_GPIO_Init+0x2fc>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d101      	bne.n	8003fec <HAL_GPIO_Init+0x1e4>
 8003fe8:	2305      	movs	r3, #5
 8003fea:	e00a      	b.n	8004002 <HAL_GPIO_Init+0x1fa>
 8003fec:	2306      	movs	r3, #6
 8003fee:	e008      	b.n	8004002 <HAL_GPIO_Init+0x1fa>
 8003ff0:	2304      	movs	r3, #4
 8003ff2:	e006      	b.n	8004002 <HAL_GPIO_Init+0x1fa>
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e004      	b.n	8004002 <HAL_GPIO_Init+0x1fa>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	e002      	b.n	8004002 <HAL_GPIO_Init+0x1fa>
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e000      	b.n	8004002 <HAL_GPIO_Init+0x1fa>
 8004000:	2300      	movs	r3, #0
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	f002 0203 	and.w	r2, r2, #3
 8004008:	0092      	lsls	r2, r2, #2
 800400a:	4093      	lsls	r3, r2
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	4313      	orrs	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004012:	4937      	ldr	r1, [pc, #220]	; (80040f0 <HAL_GPIO_Init+0x2e8>)
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	089b      	lsrs	r3, r3, #2
 8004018:	3302      	adds	r3, #2
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004020:	4b39      	ldr	r3, [pc, #228]	; (8004108 <HAL_GPIO_Init+0x300>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	43db      	mvns	r3, r3
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	4013      	ands	r3, r2
 800402e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d003      	beq.n	8004044 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004044:	4a30      	ldr	r2, [pc, #192]	; (8004108 <HAL_GPIO_Init+0x300>)
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800404a:	4b2f      	ldr	r3, [pc, #188]	; (8004108 <HAL_GPIO_Init+0x300>)
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	43db      	mvns	r3, r3
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	4013      	ands	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4313      	orrs	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800406e:	4a26      	ldr	r2, [pc, #152]	; (8004108 <HAL_GPIO_Init+0x300>)
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004074:	4b24      	ldr	r3, [pc, #144]	; (8004108 <HAL_GPIO_Init+0x300>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	43db      	mvns	r3, r3
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	4013      	ands	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	4313      	orrs	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004098:	4a1b      	ldr	r2, [pc, #108]	; (8004108 <HAL_GPIO_Init+0x300>)
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800409e:	4b1a      	ldr	r3, [pc, #104]	; (8004108 <HAL_GPIO_Init+0x300>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	43db      	mvns	r3, r3
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	4013      	ands	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040c2:	4a11      	ldr	r2, [pc, #68]	; (8004108 <HAL_GPIO_Init+0x300>)
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	3301      	adds	r3, #1
 80040cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	fa22 f303 	lsr.w	r3, r2, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f47f ae9d 	bne.w	8003e18 <HAL_GPIO_Init+0x10>
  }
}
 80040de:	bf00      	nop
 80040e0:	bf00      	nop
 80040e2:	371c      	adds	r7, #28
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	40021000 	.word	0x40021000
 80040f0:	40010000 	.word	0x40010000
 80040f4:	48000400 	.word	0x48000400
 80040f8:	48000800 	.word	0x48000800
 80040fc:	48000c00 	.word	0x48000c00
 8004100:	48001000 	.word	0x48001000
 8004104:	48001400 	.word	0x48001400
 8004108:	40010400 	.word	0x40010400

0800410c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	807b      	strh	r3, [r7, #2]
 8004118:	4613      	mov	r3, r2
 800411a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800411c:	787b      	ldrb	r3, [r7, #1]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004122:	887a      	ldrh	r2, [r7, #2]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004128:	e002      	b.n	8004130 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800412a:	887a      	ldrh	r2, [r7, #2]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	4603      	mov	r3, r0
 8004144:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004146:	4b08      	ldr	r3, [pc, #32]	; (8004168 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004148:	695a      	ldr	r2, [r3, #20]
 800414a:	88fb      	ldrh	r3, [r7, #6]
 800414c:	4013      	ands	r3, r2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d006      	beq.n	8004160 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004152:	4a05      	ldr	r2, [pc, #20]	; (8004168 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004154:	88fb      	ldrh	r3, [r7, #6]
 8004156:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004158:	88fb      	ldrh	r3, [r7, #6]
 800415a:	4618      	mov	r0, r3
 800415c:	f000 f806 	bl	800416c <HAL_GPIO_EXTI_Callback>
  }
}
 8004160:	bf00      	nop
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40010400 	.word	0x40010400

0800416c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	4603      	mov	r3, r0
 8004174:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004182:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004184:	b08b      	sub	sp, #44	; 0x2c
 8004186:	af06      	add	r7, sp, #24
 8004188:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e0d7      	b.n	8004344 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d106      	bne.n	80041ae <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f008 f94d 	bl	800c448 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2203      	movs	r2, #3
 80041b2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f004 f879 	bl	80082b2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041c0:	2300      	movs	r3, #0
 80041c2:	73fb      	strb	r3, [r7, #15]
 80041c4:	e04c      	b.n	8004260 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	4613      	mov	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	440b      	add	r3, r1
 80041d6:	3301      	adds	r3, #1
 80041d8:	2201      	movs	r2, #1
 80041da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
 80041de:	6879      	ldr	r1, [r7, #4]
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	4613      	mov	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	440b      	add	r3, r1
 80041ec:	7bfa      	ldrb	r2, [r7, #15]
 80041ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80041f0:	7bfa      	ldrb	r2, [r7, #15]
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
 80041f4:	b298      	uxth	r0, r3
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	4613      	mov	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4413      	add	r3, r2
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	440b      	add	r3, r1
 8004202:	3336      	adds	r3, #54	; 0x36
 8004204:	4602      	mov	r2, r0
 8004206:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004208:	7bfb      	ldrb	r3, [r7, #15]
 800420a:	6879      	ldr	r1, [r7, #4]
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	4613      	mov	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	440b      	add	r3, r1
 8004218:	3303      	adds	r3, #3
 800421a:	2200      	movs	r2, #0
 800421c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800421e:	7bfa      	ldrb	r2, [r7, #15]
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	4613      	mov	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	440b      	add	r3, r1
 800422c:	3338      	adds	r3, #56	; 0x38
 800422e:	2200      	movs	r2, #0
 8004230:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004232:	7bfa      	ldrb	r2, [r7, #15]
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	4613      	mov	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4413      	add	r3, r2
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	440b      	add	r3, r1
 8004240:	333c      	adds	r3, #60	; 0x3c
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004246:	7bfa      	ldrb	r2, [r7, #15]
 8004248:	6879      	ldr	r1, [r7, #4]
 800424a:	4613      	mov	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4413      	add	r3, r2
 8004250:	00db      	lsls	r3, r3, #3
 8004252:	440b      	add	r3, r1
 8004254:	3340      	adds	r3, #64	; 0x40
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	3301      	adds	r3, #1
 800425e:	73fb      	strb	r3, [r7, #15]
 8004260:	7bfa      	ldrb	r2, [r7, #15]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	429a      	cmp	r2, r3
 8004268:	d3ad      	bcc.n	80041c6 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800426a:	2300      	movs	r3, #0
 800426c:	73fb      	strb	r3, [r7, #15]
 800426e:	e044      	b.n	80042fa <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004270:	7bfa      	ldrb	r2, [r7, #15]
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	4613      	mov	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	440b      	add	r3, r1
 800427e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004282:	2200      	movs	r2, #0
 8004284:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004286:	7bfa      	ldrb	r2, [r7, #15]
 8004288:	6879      	ldr	r1, [r7, #4]
 800428a:	4613      	mov	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	440b      	add	r3, r1
 8004294:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004298:	7bfa      	ldrb	r2, [r7, #15]
 800429a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800429c:	7bfa      	ldrb	r2, [r7, #15]
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	4613      	mov	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	440b      	add	r3, r1
 80042aa:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80042ae:	2200      	movs	r2, #0
 80042b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80042b2:	7bfa      	ldrb	r2, [r7, #15]
 80042b4:	6879      	ldr	r1, [r7, #4]
 80042b6:	4613      	mov	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4413      	add	r3, r2
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	440b      	add	r3, r1
 80042c0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80042c8:	7bfa      	ldrb	r2, [r7, #15]
 80042ca:	6879      	ldr	r1, [r7, #4]
 80042cc:	4613      	mov	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	440b      	add	r3, r1
 80042d6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80042de:	7bfa      	ldrb	r2, [r7, #15]
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	4613      	mov	r3, r2
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	440b      	add	r3, r1
 80042ec:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
 80042f6:	3301      	adds	r3, #1
 80042f8:	73fb      	strb	r3, [r7, #15]
 80042fa:	7bfa      	ldrb	r2, [r7, #15]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	429a      	cmp	r2, r3
 8004302:	d3b5      	bcc.n	8004270 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	603b      	str	r3, [r7, #0]
 800430a:	687e      	ldr	r6, [r7, #4]
 800430c:	466d      	mov	r5, sp
 800430e:	f106 0410 	add.w	r4, r6, #16
 8004312:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004314:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	602b      	str	r3, [r5, #0]
 800431a:	1d33      	adds	r3, r6, #4
 800431c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800431e:	6838      	ldr	r0, [r7, #0]
 8004320:	f003 ffe2 	bl	80082e8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d102      	bne.n	8004342 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f001 fc29 	bl	8005b94 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3714      	adds	r7, #20
 8004348:	46bd      	mov	sp, r7
 800434a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800434c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800435a:	2b01      	cmp	r3, #1
 800435c:	d101      	bne.n	8004362 <HAL_PCD_Start+0x16>
 800435e:	2302      	movs	r3, #2
 8004360:	e012      	b.n	8004388 <HAL_PCD_Start+0x3c>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4618      	mov	r0, r3
 8004370:	f003 ff88 	bl	8008284 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4618      	mov	r0, r3
 800437a:	f006 f9a1 	bl	800a6c0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4618      	mov	r0, r3
 800439e:	f006 f9a6 	bl	800a6ee <USB_ReadInterrupts>
 80043a2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 fb26 	bl	8004a00 <PCD_EP_ISR_Handler>

    return;
 80043b4:	e110      	b.n	80045d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d013      	beq.n	80043e8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043d2:	b292      	uxth	r2, r2
 80043d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f008 f8c6 	bl	800c56a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80043de:	2100      	movs	r1, #0
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f8fc 	bl	80045de <HAL_PCD_SetAddress>

    return;
 80043e6:	e0f7      	b.n	80045d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00c      	beq.n	800440c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004404:	b292      	uxth	r2, r2
 8004406:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800440a:	e0e5      	b.n	80045d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00c      	beq.n	8004430 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800441e:	b29a      	uxth	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004428:	b292      	uxth	r2, r2
 800442a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800442e:	e0d3      	b.n	80045d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d034      	beq.n	80044a4 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004442:	b29a      	uxth	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0204 	bic.w	r2, r2, #4
 800444c:	b292      	uxth	r2, r2
 800444e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800445a:	b29a      	uxth	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0208 	bic.w	r2, r2, #8
 8004464:	b292      	uxth	r2, r2
 8004466:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8004470:	2b01      	cmp	r3, #1
 8004472:	d107      	bne.n	8004484 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800447c:	2100      	movs	r1, #0
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f008 fa68 	bl	800c954 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f008 f8a9 	bl	800c5dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004492:	b29a      	uxth	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800449c:	b292      	uxth	r2, r2
 800449e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80044a2:	e099      	b.n	80045d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d027      	beq.n	80044fe <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f042 0208 	orr.w	r2, r2, #8
 80044c0:	b292      	uxth	r2, r2
 80044c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044d8:	b292      	uxth	r2, r2
 80044da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f042 0204 	orr.w	r2, r2, #4
 80044f0:	b292      	uxth	r2, r2
 80044f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f008 f856 	bl	800c5a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80044fc:	e06c      	b.n	80045d8 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004504:	2b00      	cmp	r3, #0
 8004506:	d040      	beq.n	800458a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004510:	b29a      	uxth	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800451a:	b292      	uxth	r2, r2
 800451c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d12b      	bne.n	8004582 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004532:	b29a      	uxth	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f042 0204 	orr.w	r2, r2, #4
 800453c:	b292      	uxth	r2, r2
 800453e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800454a:	b29a      	uxth	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f042 0208 	orr.w	r2, r2, #8
 8004554:	b292      	uxth	r2, r2
 8004556:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800456a:	b29b      	uxth	r3, r3
 800456c:	089b      	lsrs	r3, r3, #2
 800456e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004578:	2101      	movs	r1, #1
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f008 f9ea 	bl	800c954 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004580:	e02a      	b.n	80045d8 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f008 f810 	bl	800c5a8 <HAL_PCD_SuspendCallback>
    return;
 8004588:	e026      	b.n	80045d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00f      	beq.n	80045b4 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800459c:	b29a      	uxth	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80045a6:	b292      	uxth	r2, r2
 80045a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f007 ffce 	bl	800c54e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80045b2:	e011      	b.n	80045d8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00c      	beq.n	80045d8 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045d0:	b292      	uxth	r2, r2
 80045d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80045d6:	bf00      	nop
  }
}
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b082      	sub	sp, #8
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
 80045e6:	460b      	mov	r3, r1
 80045e8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_PCD_SetAddress+0x1a>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e013      	b.n	8004620 <HAL_PCD_SetAddress+0x42>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	78fa      	ldrb	r2, [r7, #3]
 8004604:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	78fa      	ldrb	r2, [r7, #3]
 800460e:	4611      	mov	r1, r2
 8004610:	4618      	mov	r0, r3
 8004612:	f006 f841 	bl	800a698 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	4608      	mov	r0, r1
 8004632:	4611      	mov	r1, r2
 8004634:	461a      	mov	r2, r3
 8004636:	4603      	mov	r3, r0
 8004638:	70fb      	strb	r3, [r7, #3]
 800463a:	460b      	mov	r3, r1
 800463c:	803b      	strh	r3, [r7, #0]
 800463e:	4613      	mov	r3, r2
 8004640:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004646:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800464a:	2b00      	cmp	r3, #0
 800464c:	da0e      	bge.n	800466c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800464e:	78fb      	ldrb	r3, [r7, #3]
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	4613      	mov	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	4413      	add	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2201      	movs	r2, #1
 8004668:	705a      	strb	r2, [r3, #1]
 800466a:	e00e      	b.n	800468a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800466c:	78fb      	ldrb	r3, [r7, #3]
 800466e:	f003 0207 	and.w	r2, r3, #7
 8004672:	4613      	mov	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4413      	add	r3, r2
 8004678:	00db      	lsls	r3, r3, #3
 800467a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	4413      	add	r3, r2
 8004682:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800468a:	78fb      	ldrb	r3, [r7, #3]
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	b2da      	uxtb	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004696:	883a      	ldrh	r2, [r7, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	78ba      	ldrb	r2, [r7, #2]
 80046a0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	785b      	ldrb	r3, [r3, #1]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d004      	beq.n	80046b4 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80046b4:	78bb      	ldrb	r3, [r7, #2]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d102      	bne.n	80046c0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d101      	bne.n	80046ce <HAL_PCD_EP_Open+0xa6>
 80046ca:	2302      	movs	r3, #2
 80046cc:	e00e      	b.n	80046ec <HAL_PCD_EP_Open+0xc4>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68f9      	ldr	r1, [r7, #12]
 80046dc:	4618      	mov	r0, r3
 80046de:	f003 fe25 	bl	800832c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80046ea:	7afb      	ldrb	r3, [r7, #11]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	460b      	mov	r3, r1
 80046fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004700:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004704:	2b00      	cmp	r3, #0
 8004706:	da0e      	bge.n	8004726 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004708:	78fb      	ldrb	r3, [r7, #3]
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	1c5a      	adds	r2, r3, #1
 8004710:	4613      	mov	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	4413      	add	r3, r2
 800471c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2201      	movs	r2, #1
 8004722:	705a      	strb	r2, [r3, #1]
 8004724:	e00e      	b.n	8004744 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004726:	78fb      	ldrb	r3, [r7, #3]
 8004728:	f003 0207 	and.w	r2, r3, #7
 800472c:	4613      	mov	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	4413      	add	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004744:	78fb      	ldrb	r3, [r7, #3]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	b2da      	uxtb	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004756:	2b01      	cmp	r3, #1
 8004758:	d101      	bne.n	800475e <HAL_PCD_EP_Close+0x6a>
 800475a:	2302      	movs	r3, #2
 800475c:	e00e      	b.n	800477c <HAL_PCD_EP_Close+0x88>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68f9      	ldr	r1, [r7, #12]
 800476c:	4618      	mov	r0, r3
 800476e:	f004 f971 	bl	8008a54 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	607a      	str	r2, [r7, #4]
 800478e:	603b      	str	r3, [r7, #0]
 8004790:	460b      	mov	r3, r1
 8004792:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004794:	7afb      	ldrb	r3, [r7, #11]
 8004796:	f003 0207 	and.w	r2, r3, #7
 800479a:	4613      	mov	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	4413      	add	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	2200      	movs	r2, #0
 80047bc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2200      	movs	r2, #0
 80047c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047c4:	7afb      	ldrb	r3, [r7, #11]
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047d0:	7afb      	ldrb	r3, [r7, #11]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d106      	bne.n	80047e8 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6979      	ldr	r1, [r7, #20]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f004 fb24 	bl	8008e2e <USB_EPStartXfer>
 80047e6:	e005      	b.n	80047f4 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6979      	ldr	r1, [r7, #20]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f004 fb1d 	bl	8008e2e <USB_EPStartXfer>
  }

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
 8004806:	460b      	mov	r3, r1
 8004808:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800480a:	78fb      	ldrb	r3, [r7, #3]
 800480c:	f003 0207 	and.w	r2, r3, #7
 8004810:	6879      	ldr	r1, [r7, #4]
 8004812:	4613      	mov	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	4413      	add	r3, r2
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	440b      	add	r3, r1
 800481c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004820:	681b      	ldr	r3, [r3, #0]
}
 8004822:	4618      	mov	r0, r3
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b086      	sub	sp, #24
 8004832:	af00      	add	r7, sp, #0
 8004834:	60f8      	str	r0, [r7, #12]
 8004836:	607a      	str	r2, [r7, #4]
 8004838:	603b      	str	r3, [r7, #0]
 800483a:	460b      	mov	r3, r1
 800483c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800483e:	7afb      	ldrb	r3, [r7, #11]
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	1c5a      	adds	r2, r3, #1
 8004846:	4613      	mov	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4413      	add	r3, r2
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	4413      	add	r3, r2
 8004852:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2200      	movs	r2, #0
 8004872:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	2201      	movs	r2, #1
 8004878:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800487a:	7afb      	ldrb	r3, [r7, #11]
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	b2da      	uxtb	r2, r3
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004886:	7afb      	ldrb	r3, [r7, #11]
 8004888:	f003 0307 	and.w	r3, r3, #7
 800488c:	2b00      	cmp	r3, #0
 800488e:	d106      	bne.n	800489e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6979      	ldr	r1, [r7, #20]
 8004896:	4618      	mov	r0, r3
 8004898:	f004 fac9 	bl	8008e2e <USB_EPStartXfer>
 800489c:	e005      	b.n	80048aa <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6979      	ldr	r1, [r7, #20]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f004 fac2 	bl	8008e2e <USB_EPStartXfer>
  }

  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3718      	adds	r7, #24
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80048c0:	78fb      	ldrb	r3, [r7, #3]
 80048c2:	f003 0207 	and.w	r2, r3, #7
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d901      	bls.n	80048d2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e03e      	b.n	8004950 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	da0e      	bge.n	80048f8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048da:	78fb      	ldrb	r3, [r7, #3]
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	4613      	mov	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	00db      	lsls	r3, r3, #3
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	4413      	add	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2201      	movs	r2, #1
 80048f4:	705a      	strb	r2, [r3, #1]
 80048f6:	e00c      	b.n	8004912 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048f8:	78fa      	ldrb	r2, [r7, #3]
 80048fa:	4613      	mov	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	4413      	add	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2201      	movs	r2, #1
 8004916:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004918:	78fb      	ldrb	r3, [r7, #3]
 800491a:	f003 0307 	and.w	r3, r3, #7
 800491e:	b2da      	uxtb	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800492a:	2b01      	cmp	r3, #1
 800492c:	d101      	bne.n	8004932 <HAL_PCD_EP_SetStall+0x7e>
 800492e:	2302      	movs	r3, #2
 8004930:	e00e      	b.n	8004950 <HAL_PCD_EP_SetStall+0x9c>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68f9      	ldr	r1, [r7, #12]
 8004940:	4618      	mov	r0, r3
 8004942:	f005 fdaa 	bl	800a49a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	460b      	mov	r3, r1
 8004962:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004964:	78fb      	ldrb	r3, [r7, #3]
 8004966:	f003 020f 	and.w	r2, r3, #15
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	429a      	cmp	r2, r3
 8004970:	d901      	bls.n	8004976 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e040      	b.n	80049f8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004976:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800497a:	2b00      	cmp	r3, #0
 800497c:	da0e      	bge.n	800499c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800497e:	78fb      	ldrb	r3, [r7, #3]
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	1c5a      	adds	r2, r3, #1
 8004986:	4613      	mov	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	4413      	add	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2201      	movs	r2, #1
 8004998:	705a      	strb	r2, [r3, #1]
 800499a:	e00e      	b.n	80049ba <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800499c:	78fb      	ldrb	r3, [r7, #3]
 800499e:	f003 0207 	and.w	r2, r3, #7
 80049a2:	4613      	mov	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	4413      	add	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049c0:	78fb      	ldrb	r3, [r7, #3]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	b2da      	uxtb	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d101      	bne.n	80049da <HAL_PCD_EP_ClrStall+0x82>
 80049d6:	2302      	movs	r3, #2
 80049d8:	e00e      	b.n	80049f8 <HAL_PCD_EP_ClrStall+0xa0>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68f9      	ldr	r1, [r7, #12]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f005 fda7 	bl	800a53c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b096      	sub	sp, #88	; 0x58
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004a08:	e39c      	b.n	8005144 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a12:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004a16:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	f003 030f 	and.w	r3, r3, #15
 8004a20:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8004a24:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f040 815e 	bne.w	8004cea <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004a2e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004a32:	f003 0310 	and.w	r3, r3, #16
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d150      	bne.n	8004adc <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	881b      	ldrh	r3, [r3, #0]
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4a:	81fb      	strh	r3, [r7, #14]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	89fb      	ldrh	r3, [r7, #14]
 8004a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	3328      	adds	r3, #40	; 0x28
 8004a62:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	461a      	mov	r2, r3
 8004a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	00db      	lsls	r3, r3, #3
 8004a76:	4413      	add	r3, r2
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6812      	ldr	r2, [r2, #0]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004a82:	881b      	ldrh	r3, [r3, #0]
 8004a84:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a8a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a8e:	695a      	ldr	r2, [r3, #20]
 8004a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	441a      	add	r2, r3
 8004a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a98:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f007 fd3c 	bl	800c51a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 834a 	beq.w	8005144 <PCD_EP_ISR_Handler+0x744>
 8004ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f040 8345 	bne.w	8005144 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	b292      	uxth	r2, r2
 8004ace:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004ada:	e333      	b.n	8005144 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004aee:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004af2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d032      	beq.n	8004b60 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	461a      	mov	r2, r3
 8004b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	4413      	add	r3, r2
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6812      	ldr	r2, [r2, #0]
 8004b12:	4413      	add	r3, r2
 8004b14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004b18:	881b      	ldrh	r3, [r3, #0]
 8004b1a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b20:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6818      	ldr	r0, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b2e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b32:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	f005 fe2c 	bl	800a792 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004b46:	4013      	ands	r3, r2
 8004b48:	823b      	strh	r3, [r7, #16]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	8a3a      	ldrh	r2, [r7, #16]
 8004b50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b54:	b292      	uxth	r2, r2
 8004b56:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f007 fcb1 	bl	800c4c0 <HAL_PCD_SetupStageCallback>
 8004b5e:	e2f1      	b.n	8005144 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004b60:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f280 82ed 	bge.w	8005144 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	881b      	ldrh	r3, [r3, #0]
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004b76:	4013      	ands	r3, r2
 8004b78:	83fb      	strh	r3, [r7, #30]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	8bfa      	ldrh	r2, [r7, #30]
 8004b80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b84:	b292      	uxth	r2, r2
 8004b86:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	461a      	mov	r2, r3
 8004b94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	00db      	lsls	r3, r3, #3
 8004b9a:	4413      	add	r3, r2
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6812      	ldr	r2, [r2, #0]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bae:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bb2:	69db      	ldr	r3, [r3, #28]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d019      	beq.n	8004bec <PCD_EP_ISR_Handler+0x1ec>
 8004bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d015      	beq.n	8004bec <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6818      	ldr	r0, [r3, #0]
 8004bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bc6:	6959      	ldr	r1, [r3, #20]
 8004bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bca:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bce:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	f005 fdde 	bl	800a792 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bd8:	695a      	ldr	r2, [r3, #20]
 8004bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bdc:	69db      	ldr	r3, [r3, #28]
 8004bde:	441a      	add	r2, r3
 8004be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004be2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004be4:	2100      	movs	r1, #0
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f007 fc7c 	bl	800c4e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f040 82a3 	bne.w	8005144 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	61bb      	str	r3, [r7, #24]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	461a      	mov	r2, r3
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	4413      	add	r3, r2
 8004c14:	61bb      	str	r3, [r7, #24]
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c1c:	617b      	str	r3, [r7, #20]
 8004c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	2b3e      	cmp	r3, #62	; 0x3e
 8004c24:	d918      	bls.n	8004c58 <PCD_EP_ISR_Handler+0x258>
 8004c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	f003 031f 	and.w	r3, r3, #31
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d102      	bne.n	8004c40 <PCD_EP_ISR_Handler+0x240>
 8004c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	029b      	lsls	r3, r3, #10
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	801a      	strh	r2, [r3, #0]
 8004c56:	e029      	b.n	8004cac <PCD_EP_ISR_Handler+0x2ac>
 8004c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d112      	bne.n	8004c86 <PCD_EP_ISR_Handler+0x286>
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	881b      	ldrh	r3, [r3, #0]
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	801a      	strh	r2, [r3, #0]
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	881b      	ldrh	r3, [r3, #0]
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	801a      	strh	r2, [r3, #0]
 8004c84:	e012      	b.n	8004cac <PCD_EP_ISR_Handler+0x2ac>
 8004c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	085b      	lsrs	r3, r3, #1
 8004c8c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <PCD_EP_ISR_Handler+0x2a0>
 8004c9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	647b      	str	r3, [r7, #68]	; 0x44
 8004ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	029b      	lsls	r3, r3, #10
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	881b      	ldrh	r3, [r3, #0]
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cbc:	827b      	strh	r3, [r7, #18]
 8004cbe:	8a7b      	ldrh	r3, [r7, #18]
 8004cc0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004cc4:	827b      	strh	r3, [r7, #18]
 8004cc6:	8a7b      	ldrh	r3, [r7, #18]
 8004cc8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ccc:	827b      	strh	r3, [r7, #18]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	8a7b      	ldrh	r3, [r7, #18]
 8004cd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	8013      	strh	r3, [r2, #0]
 8004ce8:	e22c      	b.n	8005144 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4413      	add	r3, r2
 8004cf8:	881b      	ldrh	r3, [r3, #0]
 8004cfa:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004cfe:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f280 80f6 	bge.w	8004ef4 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004d1e:	4013      	ands	r3, r2
 8004d20:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004d36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d3a:	b292      	uxth	r2, r2
 8004d3c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004d3e:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8004d42:	4613      	mov	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	00db      	lsls	r3, r3, #3
 8004d4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	4413      	add	r3, r2
 8004d52:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d56:	7b1b      	ldrb	r3, [r3, #12]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d123      	bne.n	8004da4 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	461a      	mov	r2, r3
 8004d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	00db      	lsls	r3, r3, #3
 8004d6e:	4413      	add	r3, r2
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6812      	ldr	r2, [r2, #0]
 8004d74:	4413      	add	r3, r2
 8004d76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d7a:	881b      	ldrh	r3, [r3, #0]
 8004d7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d80:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8004d84:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 808e 	beq.w	8004eaa <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6818      	ldr	r0, [r3, #0]
 8004d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d94:	6959      	ldr	r1, [r3, #20]
 8004d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d98:	88da      	ldrh	r2, [r3, #6]
 8004d9a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004d9e:	f005 fcf8 	bl	800a792 <USB_ReadPMA>
 8004da2:	e082      	b.n	8004eaa <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da6:	78db      	ldrb	r3, [r3, #3]
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d10a      	bne.n	8004dc2 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004dac:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004db0:	461a      	mov	r2, r3
 8004db2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f9d3 	bl	8005160 <HAL_PCD_EP_DB_Receive>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004dc0:	e073      	b.n	8004eaa <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ddc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	461a      	mov	r2, r3
 8004de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	441a      	add	r2, r3
 8004dee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004df2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004df6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dfe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d022      	beq.n	8004e66 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	4413      	add	r3, r2
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6812      	ldr	r2, [r2, #0]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e44:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8004e48:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d02c      	beq.n	8004eaa <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6818      	ldr	r0, [r3, #0]
 8004e54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e56:	6959      	ldr	r1, [r3, #20]
 8004e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e5a:	891a      	ldrh	r2, [r3, #8]
 8004e5c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004e60:	f005 fc97 	bl	800a792 <USB_ReadPMA>
 8004e64:	e021      	b.n	8004eaa <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	461a      	mov	r2, r3
 8004e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	4413      	add	r3, r2
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	6812      	ldr	r2, [r2, #0]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e8a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8004e8e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d009      	beq.n	8004eaa <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6818      	ldr	r0, [r3, #0]
 8004e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e9c:	6959      	ldr	r1, [r3, #20]
 8004e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ea0:	895a      	ldrh	r2, [r3, #10]
 8004ea2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004ea6:	f005 fc74 	bl	800a792 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eac:	69da      	ldr	r2, [r3, #28]
 8004eae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004eb2:	441a      	add	r2, r3
 8004eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eb6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eba:	695a      	ldr	r2, [r3, #20]
 8004ebc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004ec0:	441a      	add	r2, r3
 8004ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ec4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d005      	beq.n	8004eda <PCD_EP_ISR_Handler+0x4da>
 8004ece:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d206      	bcs.n	8004ee8 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	4619      	mov	r1, r3
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f007 faff 	bl	800c4e4 <HAL_PCD_DataOutStageCallback>
 8004ee6:	e005      	b.n	8004ef4 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f003 ff9d 	bl	8008e2e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004ef4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 8121 	beq.w	8005144 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8004f02:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004f06:	1c5a      	adds	r2, r3, #1
 8004f08:	4613      	mov	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	4413      	add	r3, r2
 8004f14:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	881b      	ldrh	r3, [r3, #0]
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f30:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	441a      	add	r2, r3
 8004f42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004f46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8004f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f54:	78db      	ldrb	r3, [r3, #3]
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	f000 80a2 	beq.w	80050a0 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8004f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f5e:	2200      	movs	r2, #0
 8004f60:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f64:	7b1b      	ldrb	r3, [r3, #12]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 8093 	beq.w	8005092 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004f6c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d046      	beq.n	8005006 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f7a:	785b      	ldrb	r3, [r3, #1]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d126      	bne.n	8004fce <PCD_EP_ISR_Handler+0x5ce>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	461a      	mov	r2, r3
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	4413      	add	r3, r2
 8004f96:	627b      	str	r3, [r7, #36]	; 0x24
 8004f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	00da      	lsls	r2, r3, #3
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004fa6:	623b      	str	r3, [r7, #32]
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	881b      	ldrh	r3, [r3, #0]
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	801a      	strh	r2, [r3, #0]
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	881b      	ldrh	r3, [r3, #0]
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	801a      	strh	r2, [r3, #0]
 8004fcc:	e061      	b.n	8005092 <PCD_EP_ISR_Handler+0x692>
 8004fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fd0:	785b      	ldrb	r3, [r3, #1]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d15d      	bne.n	8005092 <PCD_EP_ISR_Handler+0x692>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fea:	4413      	add	r3, r2
 8004fec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	00da      	lsls	r2, r3, #3
 8004ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005000:	2200      	movs	r2, #0
 8005002:	801a      	strh	r2, [r3, #0]
 8005004:	e045      	b.n	8005092 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800500c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800500e:	785b      	ldrb	r3, [r3, #1]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d126      	bne.n	8005062 <PCD_EP_ISR_Handler+0x662>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	637b      	str	r3, [r7, #52]	; 0x34
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005022:	b29b      	uxth	r3, r3
 8005024:	461a      	mov	r2, r3
 8005026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005028:	4413      	add	r3, r2
 800502a:	637b      	str	r3, [r7, #52]	; 0x34
 800502c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	00da      	lsls	r2, r3, #3
 8005032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005034:	4413      	add	r3, r2
 8005036:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800503a:	633b      	str	r3, [r7, #48]	; 0x30
 800503c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503e:	881b      	ldrh	r3, [r3, #0]
 8005040:	b29b      	uxth	r3, r3
 8005042:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005046:	b29a      	uxth	r2, r3
 8005048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504a:	801a      	strh	r2, [r3, #0]
 800504c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	b29b      	uxth	r3, r3
 8005052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800505a:	b29a      	uxth	r2, r3
 800505c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505e:	801a      	strh	r2, [r3, #0]
 8005060:	e017      	b.n	8005092 <PCD_EP_ISR_Handler+0x692>
 8005062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005064:	785b      	ldrb	r3, [r3, #1]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d113      	bne.n	8005092 <PCD_EP_ISR_Handler+0x692>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005072:	b29b      	uxth	r3, r3
 8005074:	461a      	mov	r2, r3
 8005076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005078:	4413      	add	r3, r2
 800507a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800507c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	00da      	lsls	r2, r3, #3
 8005082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005084:	4413      	add	r3, r2
 8005086:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800508a:	63bb      	str	r3, [r7, #56]	; 0x38
 800508c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508e:	2200      	movs	r2, #0
 8005090:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	4619      	mov	r1, r3
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f007 fa3e 	bl	800c51a <HAL_PCD_DataInStageCallback>
 800509e:	e051      	b.n	8005144 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80050a0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80050a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d144      	bne.n	8005136 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	461a      	mov	r2, r3
 80050b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	4413      	add	r3, r2
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	6812      	ldr	r2, [r2, #0]
 80050c4:	4413      	add	r3, r2
 80050c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80050ca:	881b      	ldrh	r3, [r3, #0]
 80050cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050d0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80050d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d6:	699a      	ldr	r2, [r3, #24]
 80050d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80050dc:	429a      	cmp	r2, r3
 80050de:	d907      	bls.n	80050f0 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 80050e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050e2:	699a      	ldr	r2, [r3, #24]
 80050e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80050e8:	1ad2      	subs	r2, r2, r3
 80050ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ec:	619a      	str	r2, [r3, #24]
 80050ee:	e002      	b.n	80050f6 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 80050f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050f2:	2200      	movs	r2, #0
 80050f4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80050f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d106      	bne.n	800510c <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80050fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	4619      	mov	r1, r3
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f007 fa08 	bl	800c51a <HAL_PCD_DataInStageCallback>
 800510a:	e01b      	b.n	8005144 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800510c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800510e:	695a      	ldr	r2, [r3, #20]
 8005110:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005114:	441a      	add	r2, r3
 8005116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005118:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800511a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800511c:	69da      	ldr	r2, [r3, #28]
 800511e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005122:	441a      	add	r2, r3
 8005124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005126:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800512e:	4618      	mov	r0, r3
 8005130:	f003 fe7d 	bl	8008e2e <USB_EPStartXfer>
 8005134:	e006      	b.n	8005144 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005136:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800513a:	461a      	mov	r2, r3
 800513c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f917 	bl	8005372 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800514c:	b29b      	uxth	r3, r3
 800514e:	b21b      	sxth	r3, r3
 8005150:	2b00      	cmp	r3, #0
 8005152:	f6ff ac5a 	blt.w	8004a0a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3758      	adds	r7, #88	; 0x58
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b088      	sub	sp, #32
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	4613      	mov	r3, r2
 800516c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800516e:	88fb      	ldrh	r3, [r7, #6]
 8005170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d07c      	beq.n	8005272 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005180:	b29b      	uxth	r3, r3
 8005182:	461a      	mov	r2, r3
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	4413      	add	r3, r2
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	6812      	ldr	r2, [r2, #0]
 8005190:	4413      	add	r3, r2
 8005192:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005196:	881b      	ldrh	r3, [r3, #0]
 8005198:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800519c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	699a      	ldr	r2, [r3, #24]
 80051a2:	8b7b      	ldrh	r3, [r7, #26]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d306      	bcc.n	80051b6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	699a      	ldr	r2, [r3, #24]
 80051ac:	8b7b      	ldrh	r3, [r7, #26]
 80051ae:	1ad2      	subs	r2, r2, r3
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	619a      	str	r2, [r3, #24]
 80051b4:	e002      	b.n	80051bc <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2200      	movs	r2, #0
 80051ba:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d123      	bne.n	800520c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	461a      	mov	r2, r3
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4413      	add	r3, r2
 80051d2:	881b      	ldrh	r3, [r3, #0]
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051de:	833b      	strh	r3, [r7, #24]
 80051e0:	8b3b      	ldrh	r3, [r7, #24]
 80051e2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80051e6:	833b      	strh	r3, [r7, #24]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	461a      	mov	r2, r3
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	441a      	add	r2, r3
 80051f6:	8b3b      	ldrh	r3, [r7, #24]
 80051f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005200:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005208:	b29b      	uxth	r3, r3
 800520a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800520c:	88fb      	ldrh	r3, [r7, #6]
 800520e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005212:	2b00      	cmp	r3, #0
 8005214:	d01f      	beq.n	8005256 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	461a      	mov	r2, r3
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	b29b      	uxth	r3, r3
 8005228:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800522c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005230:	82fb      	strh	r3, [r7, #22]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	461a      	mov	r2, r3
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	441a      	add	r2, r3
 8005240:	8afb      	ldrh	r3, [r7, #22]
 8005242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800524a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800524e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005252:	b29b      	uxth	r3, r3
 8005254:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005256:	8b7b      	ldrh	r3, [r7, #26]
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 8085 	beq.w	8005368 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6818      	ldr	r0, [r3, #0]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	6959      	ldr	r1, [r3, #20]
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	891a      	ldrh	r2, [r3, #8]
 800526a:	8b7b      	ldrh	r3, [r7, #26]
 800526c:	f005 fa91 	bl	800a792 <USB_ReadPMA>
 8005270:	e07a      	b.n	8005368 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800527a:	b29b      	uxth	r3, r3
 800527c:	461a      	mov	r2, r3
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	4413      	add	r3, r2
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	6812      	ldr	r2, [r2, #0]
 800528a:	4413      	add	r3, r2
 800528c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005296:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	699a      	ldr	r2, [r3, #24]
 800529c:	8b7b      	ldrh	r3, [r7, #26]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d306      	bcc.n	80052b0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	699a      	ldr	r2, [r3, #24]
 80052a6:	8b7b      	ldrh	r3, [r7, #26]
 80052a8:	1ad2      	subs	r2, r2, r3
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	619a      	str	r2, [r3, #24]
 80052ae:	e002      	b.n	80052b6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	2200      	movs	r2, #0
 80052b4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d123      	bne.n	8005306 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4413      	add	r3, r2
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d8:	83fb      	strh	r3, [r7, #30]
 80052da:	8bfb      	ldrh	r3, [r7, #30]
 80052dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80052e0:	83fb      	strh	r3, [r7, #30]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	461a      	mov	r2, r3
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	441a      	add	r2, r3
 80052f0:	8bfb      	ldrh	r3, [r7, #30]
 80052f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005302:	b29b      	uxth	r3, r3
 8005304:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005306:	88fb      	ldrh	r3, [r7, #6]
 8005308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800530c:	2b00      	cmp	r3, #0
 800530e:	d11f      	bne.n	8005350 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	461a      	mov	r2, r3
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	b29b      	uxth	r3, r3
 8005322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800532a:	83bb      	strh	r3, [r7, #28]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	461a      	mov	r2, r3
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	441a      	add	r2, r3
 800533a:	8bbb      	ldrh	r3, [r7, #28]
 800533c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005348:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800534c:	b29b      	uxth	r3, r3
 800534e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005350:	8b7b      	ldrh	r3, [r7, #26]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d008      	beq.n	8005368 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6818      	ldr	r0, [r3, #0]
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	6959      	ldr	r1, [r3, #20]
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	895a      	ldrh	r2, [r3, #10]
 8005362:	8b7b      	ldrh	r3, [r7, #26]
 8005364:	f005 fa15 	bl	800a792 <USB_ReadPMA>
    }
  }

  return count;
 8005368:	8b7b      	ldrh	r3, [r7, #26]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3720      	adds	r7, #32
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b0a2      	sub	sp, #136	; 0x88
 8005376:	af00      	add	r7, sp, #0
 8005378:	60f8      	str	r0, [r7, #12]
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	4613      	mov	r3, r2
 800537e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005380:	88fb      	ldrh	r3, [r7, #6]
 8005382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005386:	2b00      	cmp	r3, #0
 8005388:	f000 81c5 	beq.w	8005716 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005394:	b29b      	uxth	r3, r3
 8005396:	461a      	mov	r2, r3
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	00db      	lsls	r3, r3, #3
 800539e:	4413      	add	r3, r2
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	6812      	ldr	r2, [r2, #0]
 80053a4:	4413      	add	r3, r2
 80053a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	699a      	ldr	r2, [r3, #24]
 80053b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80053bc:	429a      	cmp	r2, r3
 80053be:	d907      	bls.n	80053d0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	699a      	ldr	r2, [r3, #24]
 80053c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80053c8:	1ad2      	subs	r2, r2, r3
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	619a      	str	r2, [r3, #24]
 80053ce:	e002      	b.n	80053d6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	2200      	movs	r2, #0
 80053d4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f040 80b9 	bne.w	8005552 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	785b      	ldrb	r3, [r3, #1]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d126      	bne.n	8005436 <HAL_PCD_EP_DB_Transmit+0xc4>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	461a      	mov	r2, r3
 80053fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fc:	4413      	add	r3, r2
 80053fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	00da      	lsls	r2, r3, #3
 8005406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005408:	4413      	add	r3, r2
 800540a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800540e:	627b      	str	r3, [r7, #36]	; 0x24
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	b29b      	uxth	r3, r3
 8005416:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800541a:	b29a      	uxth	r2, r3
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541e:	801a      	strh	r2, [r3, #0]
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	881b      	ldrh	r3, [r3, #0]
 8005424:	b29b      	uxth	r3, r3
 8005426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800542a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800542e:	b29a      	uxth	r2, r3
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	801a      	strh	r2, [r3, #0]
 8005434:	e01a      	b.n	800546c <HAL_PCD_EP_DB_Transmit+0xfa>
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	785b      	ldrb	r3, [r3, #1]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d116      	bne.n	800546c <HAL_PCD_EP_DB_Transmit+0xfa>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	633b      	str	r3, [r7, #48]	; 0x30
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800544c:	b29b      	uxth	r3, r3
 800544e:	461a      	mov	r2, r3
 8005450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005452:	4413      	add	r3, r2
 8005454:	633b      	str	r3, [r7, #48]	; 0x30
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	00da      	lsls	r2, r3, #3
 800545c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545e:	4413      	add	r3, r2
 8005460:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005464:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005468:	2200      	movs	r2, #0
 800546a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	623b      	str	r3, [r7, #32]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	785b      	ldrb	r3, [r3, #1]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d126      	bne.n	80054c8 <HAL_PCD_EP_DB_Transmit+0x156>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	61bb      	str	r3, [r7, #24]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005488:	b29b      	uxth	r3, r3
 800548a:	461a      	mov	r2, r3
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	4413      	add	r3, r2
 8005490:	61bb      	str	r3, [r7, #24]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	00da      	lsls	r2, r3, #3
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	4413      	add	r3, r2
 800549c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80054a0:	617b      	str	r3, [r7, #20]
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	801a      	strh	r2, [r3, #0]
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	801a      	strh	r2, [r3, #0]
 80054c6:	e017      	b.n	80054f8 <HAL_PCD_EP_DB_Transmit+0x186>
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	785b      	ldrb	r3, [r3, #1]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d113      	bne.n	80054f8 <HAL_PCD_EP_DB_Transmit+0x186>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054d8:	b29b      	uxth	r3, r3
 80054da:	461a      	mov	r2, r3
 80054dc:	6a3b      	ldr	r3, [r7, #32]
 80054de:	4413      	add	r3, r2
 80054e0:	623b      	str	r3, [r7, #32]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	00da      	lsls	r2, r3, #3
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	4413      	add	r3, r2
 80054ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80054f0:	61fb      	str	r3, [r7, #28]
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	2200      	movs	r2, #0
 80054f6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	4619      	mov	r1, r3
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f007 f80b 	bl	800c51a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005504:	88fb      	ldrh	r3, [r7, #6]
 8005506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 82d2 	beq.w	8005ab4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	461a      	mov	r2, r3
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	881b      	ldrh	r3, [r3, #0]
 8005520:	b29b      	uxth	r3, r3
 8005522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552a:	827b      	strh	r3, [r7, #18]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	461a      	mov	r2, r3
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	441a      	add	r2, r3
 800553a:	8a7b      	ldrh	r3, [r7, #18]
 800553c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005544:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800554c:	b29b      	uxth	r3, r3
 800554e:	8013      	strh	r3, [r2, #0]
 8005550:	e2b0      	b.n	8005ab4 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005552:	88fb      	ldrh	r3, [r7, #6]
 8005554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d021      	beq.n	80055a0 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	461a      	mov	r2, r3
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	881b      	ldrh	r3, [r3, #0]
 800556c:	b29b      	uxth	r3, r3
 800556e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005576:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	461a      	mov	r2, r3
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	441a      	add	r2, r3
 8005588:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800558c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005594:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800559c:	b29b      	uxth	r3, r3
 800559e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	f040 8284 	bne.w	8005ab4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	695a      	ldr	r2, [r3, #20]
 80055b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80055b4:	441a      	add	r2, r3
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	69da      	ldr	r2, [r3, #28]
 80055be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80055c2:	441a      	add	r2, r3
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	6a1a      	ldr	r2, [r3, #32]
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d309      	bcc.n	80055e8 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	6a1a      	ldr	r2, [r3, #32]
 80055de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055e0:	1ad2      	subs	r2, r2, r3
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	621a      	str	r2, [r3, #32]
 80055e6:	e015      	b.n	8005614 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	6a1b      	ldr	r3, [r3, #32]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d107      	bne.n	8005600 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80055f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80055f4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80055fe:	e009      	b.n	8005614 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2200      	movs	r2, #0
 8005612:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	785b      	ldrb	r3, [r3, #1]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d155      	bne.n	80056c8 <HAL_PCD_EP_DB_Transmit+0x356>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	63bb      	str	r3, [r7, #56]	; 0x38
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800562a:	b29b      	uxth	r3, r3
 800562c:	461a      	mov	r2, r3
 800562e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005630:	4413      	add	r3, r2
 8005632:	63bb      	str	r3, [r7, #56]	; 0x38
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	00da      	lsls	r2, r3, #3
 800563a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563c:	4413      	add	r3, r2
 800563e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005642:	637b      	str	r3, [r7, #52]	; 0x34
 8005644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005646:	2b3e      	cmp	r3, #62	; 0x3e
 8005648:	d916      	bls.n	8005678 <HAL_PCD_EP_DB_Transmit+0x306>
 800564a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800564c:	095b      	lsrs	r3, r3, #5
 800564e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005652:	f003 031f 	and.w	r3, r3, #31
 8005656:	2b00      	cmp	r3, #0
 8005658:	d102      	bne.n	8005660 <HAL_PCD_EP_DB_Transmit+0x2ee>
 800565a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800565c:	3b01      	subs	r3, #1
 800565e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005662:	b29b      	uxth	r3, r3
 8005664:	029b      	lsls	r3, r3, #10
 8005666:	b29b      	uxth	r3, r3
 8005668:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800566c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005670:	b29a      	uxth	r2, r3
 8005672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005674:	801a      	strh	r2, [r3, #0]
 8005676:	e043      	b.n	8005700 <HAL_PCD_EP_DB_Transmit+0x38e>
 8005678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800567a:	2b00      	cmp	r3, #0
 800567c:	d112      	bne.n	80056a4 <HAL_PCD_EP_DB_Transmit+0x332>
 800567e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005680:	881b      	ldrh	r3, [r3, #0]
 8005682:	b29b      	uxth	r3, r3
 8005684:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005688:	b29a      	uxth	r2, r3
 800568a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568c:	801a      	strh	r2, [r3, #0]
 800568e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005690:	881b      	ldrh	r3, [r3, #0]
 8005692:	b29b      	uxth	r3, r3
 8005694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800569c:	b29a      	uxth	r2, r3
 800569e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a0:	801a      	strh	r2, [r3, #0]
 80056a2:	e02d      	b.n	8005700 <HAL_PCD_EP_DB_Transmit+0x38e>
 80056a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056a6:	085b      	lsrs	r3, r3, #1
 80056a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80056aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <HAL_PCD_EP_DB_Transmit+0x348>
 80056b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056b6:	3301      	adds	r3, #1
 80056b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80056ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056bc:	b29b      	uxth	r3, r3
 80056be:	029b      	lsls	r3, r3, #10
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c4:	801a      	strh	r2, [r3, #0]
 80056c6:	e01b      	b.n	8005700 <HAL_PCD_EP_DB_Transmit+0x38e>
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	785b      	ldrb	r3, [r3, #1]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d117      	bne.n	8005700 <HAL_PCD_EP_DB_Transmit+0x38e>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	643b      	str	r3, [r7, #64]	; 0x40
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056de:	b29b      	uxth	r3, r3
 80056e0:	461a      	mov	r2, r3
 80056e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056e4:	4413      	add	r3, r2
 80056e6:	643b      	str	r3, [r7, #64]	; 0x40
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	00da      	lsls	r2, r3, #3
 80056ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056f0:	4413      	add	r3, r2
 80056f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80056f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056fe:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6818      	ldr	r0, [r3, #0]
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	6959      	ldr	r1, [r3, #20]
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	891a      	ldrh	r2, [r3, #8]
 800570c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800570e:	b29b      	uxth	r3, r3
 8005710:	f004 fffd 	bl	800a70e <USB_WritePMA>
 8005714:	e1ce      	b.n	8005ab4 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800571e:	b29b      	uxth	r3, r3
 8005720:	461a      	mov	r2, r3
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	00db      	lsls	r3, r3, #3
 8005728:	4413      	add	r3, r2
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	6812      	ldr	r2, [r2, #0]
 800572e:	4413      	add	r3, r2
 8005730:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005734:	881b      	ldrh	r3, [r3, #0]
 8005736:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800573a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	699a      	ldr	r2, [r3, #24]
 8005742:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005746:	429a      	cmp	r2, r3
 8005748:	d307      	bcc.n	800575a <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	699a      	ldr	r2, [r3, #24]
 800574e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005752:	1ad2      	subs	r2, r2, r3
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	619a      	str	r2, [r3, #24]
 8005758:	e002      	b.n	8005760 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	2200      	movs	r2, #0
 800575e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	2b00      	cmp	r3, #0
 8005766:	f040 80c4 	bne.w	80058f2 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	785b      	ldrb	r3, [r3, #1]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d126      	bne.n	80057c0 <HAL_PCD_EP_DB_Transmit+0x44e>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	66bb      	str	r3, [r7, #104]	; 0x68
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005780:	b29b      	uxth	r3, r3
 8005782:	461a      	mov	r2, r3
 8005784:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005786:	4413      	add	r3, r2
 8005788:	66bb      	str	r3, [r7, #104]	; 0x68
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	00da      	lsls	r2, r3, #3
 8005790:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005792:	4413      	add	r3, r2
 8005794:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005798:	667b      	str	r3, [r7, #100]	; 0x64
 800579a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800579c:	881b      	ldrh	r3, [r3, #0]
 800579e:	b29b      	uxth	r3, r3
 80057a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057a8:	801a      	strh	r2, [r3, #0]
 80057aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057ac:	881b      	ldrh	r3, [r3, #0]
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057bc:	801a      	strh	r2, [r3, #0]
 80057be:	e01a      	b.n	80057f6 <HAL_PCD_EP_DB_Transmit+0x484>
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	785b      	ldrb	r3, [r3, #1]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d116      	bne.n	80057f6 <HAL_PCD_EP_DB_Transmit+0x484>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	673b      	str	r3, [r7, #112]	; 0x70
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	461a      	mov	r2, r3
 80057da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057dc:	4413      	add	r3, r2
 80057de:	673b      	str	r3, [r7, #112]	; 0x70
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	00da      	lsls	r2, r3, #3
 80057e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057e8:	4413      	add	r3, r2
 80057ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80057ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f2:	2200      	movs	r2, #0
 80057f4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	785b      	ldrb	r3, [r3, #1]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d12f      	bne.n	8005864 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005814:	b29b      	uxth	r3, r3
 8005816:	461a      	mov	r2, r3
 8005818:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800581c:	4413      	add	r3, r2
 800581e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	00da      	lsls	r2, r3, #3
 8005828:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800582c:	4413      	add	r3, r2
 800582e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005832:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005836:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800583a:	881b      	ldrh	r3, [r3, #0]
 800583c:	b29b      	uxth	r3, r3
 800583e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005842:	b29a      	uxth	r2, r3
 8005844:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005848:	801a      	strh	r2, [r3, #0]
 800584a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800584e:	881b      	ldrh	r3, [r3, #0]
 8005850:	b29b      	uxth	r3, r3
 8005852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800585a:	b29a      	uxth	r2, r3
 800585c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005860:	801a      	strh	r2, [r3, #0]
 8005862:	e017      	b.n	8005894 <HAL_PCD_EP_DB_Transmit+0x522>
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	785b      	ldrb	r3, [r3, #1]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d113      	bne.n	8005894 <HAL_PCD_EP_DB_Transmit+0x522>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005874:	b29b      	uxth	r3, r3
 8005876:	461a      	mov	r2, r3
 8005878:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800587a:	4413      	add	r3, r2
 800587c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	00da      	lsls	r2, r3, #3
 8005884:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005886:	4413      	add	r3, r2
 8005888:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800588c:	67bb      	str	r3, [r7, #120]	; 0x78
 800588e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005890:	2200      	movs	r2, #0
 8005892:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	4619      	mov	r1, r3
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f006 fe3d 	bl	800c51a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80058a0:	88fb      	ldrh	r3, [r7, #6]
 80058a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f040 8104 	bne.w	8005ab4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	461a      	mov	r2, r3
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	881b      	ldrh	r3, [r3, #0]
 80058bc:	b29b      	uxth	r3, r3
 80058be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	461a      	mov	r2, r3
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	441a      	add	r2, r3
 80058d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80058dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	8013      	strh	r3, [r2, #0]
 80058f0:	e0e0      	b.n	8005ab4 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80058f2:	88fb      	ldrh	r3, [r7, #6]
 80058f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d121      	bne.n	8005940 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	461a      	mov	r2, r3
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	881b      	ldrh	r3, [r3, #0]
 800590c:	b29b      	uxth	r3, r3
 800590e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005916:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	441a      	add	r2, r3
 8005928:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800592c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005930:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005934:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800593c:	b29b      	uxth	r3, r3
 800593e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005946:	2b01      	cmp	r3, #1
 8005948:	f040 80b4 	bne.w	8005ab4 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	695a      	ldr	r2, [r3, #20]
 8005950:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005954:	441a      	add	r2, r3
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	69da      	ldr	r2, [r3, #28]
 800595e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005962:	441a      	add	r2, r3
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	6a1a      	ldr	r2, [r3, #32]
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	429a      	cmp	r2, r3
 8005972:	d309      	bcc.n	8005988 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	6a1a      	ldr	r2, [r3, #32]
 800597e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005980:	1ad2      	subs	r2, r2, r3
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	621a      	str	r2, [r3, #32]
 8005986:	e015      	b.n	80059b4 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	6a1b      	ldr	r3, [r3, #32]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d107      	bne.n	80059a0 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8005990:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005994:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800599e:	e009      	b.n	80059b4 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	2200      	movs	r2, #0
 80059aa:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	663b      	str	r3, [r7, #96]	; 0x60
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	785b      	ldrb	r3, [r3, #1]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d155      	bne.n	8005a6e <HAL_PCD_EP_DB_Transmit+0x6fc>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	461a      	mov	r2, r3
 80059d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059d6:	4413      	add	r3, r2
 80059d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	00da      	lsls	r2, r3, #3
 80059e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059e2:	4413      	add	r3, r2
 80059e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80059e8:	657b      	str	r3, [r7, #84]	; 0x54
 80059ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059ec:	2b3e      	cmp	r3, #62	; 0x3e
 80059ee:	d916      	bls.n	8005a1e <HAL_PCD_EP_DB_Transmit+0x6ac>
 80059f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059f2:	095b      	lsrs	r3, r3, #5
 80059f4:	677b      	str	r3, [r7, #116]	; 0x74
 80059f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059f8:	f003 031f 	and.w	r3, r3, #31
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d102      	bne.n	8005a06 <HAL_PCD_EP_DB_Transmit+0x694>
 8005a00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a02:	3b01      	subs	r3, #1
 8005a04:	677b      	str	r3, [r7, #116]	; 0x74
 8005a06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	029b      	lsls	r3, r3, #10
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a1a:	801a      	strh	r2, [r3, #0]
 8005a1c:	e040      	b.n	8005aa0 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005a1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d112      	bne.n	8005a4a <HAL_PCD_EP_DB_Transmit+0x6d8>
 8005a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a26:	881b      	ldrh	r3, [r3, #0]
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a32:	801a      	strh	r2, [r3, #0]
 8005a34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a46:	801a      	strh	r2, [r3, #0]
 8005a48:	e02a      	b.n	8005aa0 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a4c:	085b      	lsrs	r3, r3, #1
 8005a4e:	677b      	str	r3, [r7, #116]	; 0x74
 8005a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a52:	f003 0301 	and.w	r3, r3, #1
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d002      	beq.n	8005a60 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8005a5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	677b      	str	r3, [r7, #116]	; 0x74
 8005a60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	029b      	lsls	r3, r3, #10
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a6a:	801a      	strh	r2, [r3, #0]
 8005a6c:	e018      	b.n	8005aa0 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	785b      	ldrb	r3, [r3, #1]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d114      	bne.n	8005aa0 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	461a      	mov	r2, r3
 8005a82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a84:	4413      	add	r3, r2
 8005a86:	663b      	str	r3, [r7, #96]	; 0x60
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	00da      	lsls	r2, r3, #3
 8005a8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a90:	4413      	add	r3, r2
 8005a92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a9e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6818      	ldr	r0, [r3, #0]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	6959      	ldr	r1, [r3, #20]
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	895a      	ldrh	r2, [r3, #10]
 8005aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	f004 fe2d 	bl	800a70e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ace:	823b      	strh	r3, [r7, #16]
 8005ad0:	8a3b      	ldrh	r3, [r7, #16]
 8005ad2:	f083 0310 	eor.w	r3, r3, #16
 8005ad6:	823b      	strh	r3, [r7, #16]
 8005ad8:	8a3b      	ldrh	r3, [r7, #16]
 8005ada:	f083 0320 	eor.w	r3, r3, #32
 8005ade:	823b      	strh	r3, [r7, #16]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	441a      	add	r2, r3
 8005aee:	8a3b      	ldrh	r3, [r7, #16]
 8005af0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005af4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005af8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3788      	adds	r7, #136	; 0x88
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b087      	sub	sp, #28
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	60f8      	str	r0, [r7, #12]
 8005b16:	607b      	str	r3, [r7, #4]
 8005b18:	460b      	mov	r3, r1
 8005b1a:	817b      	strh	r3, [r7, #10]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005b20:	897b      	ldrh	r3, [r7, #10]
 8005b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00b      	beq.n	8005b44 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b2c:	897b      	ldrh	r3, [r7, #10]
 8005b2e:	f003 0307 	and.w	r3, r3, #7
 8005b32:	1c5a      	adds	r2, r3, #1
 8005b34:	4613      	mov	r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	4413      	add	r3, r2
 8005b40:	617b      	str	r3, [r7, #20]
 8005b42:	e009      	b.n	8005b58 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005b44:	897a      	ldrh	r2, [r7, #10]
 8005b46:	4613      	mov	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4413      	add	r3, r2
 8005b4c:	00db      	lsls	r3, r3, #3
 8005b4e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	4413      	add	r3, r2
 8005b56:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005b58:	893b      	ldrh	r3, [r7, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d107      	bne.n	8005b6e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	2200      	movs	r2, #0
 8005b62:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	80da      	strh	r2, [r3, #6]
 8005b6c:	e00b      	b.n	8005b86 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2201      	movs	r2, #1
 8005b72:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	0c1b      	lsrs	r3, r3, #16
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	371c      	adds	r7, #28
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	f043 0301 	orr.w	r3, r3, #1
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	f043 0302 	orr.w	r3, r3, #2
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d141      	bne.n	8005c7a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005bf6:	4b4b      	ldr	r3, [pc, #300]	; (8005d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c02:	d131      	bne.n	8005c68 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c04:	4b47      	ldr	r3, [pc, #284]	; (8005d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c0a:	4a46      	ldr	r2, [pc, #280]	; (8005d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c14:	4b43      	ldr	r3, [pc, #268]	; (8005d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005c1c:	4a41      	ldr	r2, [pc, #260]	; (8005d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005c24:	4b40      	ldr	r3, [pc, #256]	; (8005d28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2232      	movs	r2, #50	; 0x32
 8005c2a:	fb02 f303 	mul.w	r3, r2, r3
 8005c2e:	4a3f      	ldr	r2, [pc, #252]	; (8005d2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005c30:	fba2 2303 	umull	r2, r3, r2, r3
 8005c34:	0c9b      	lsrs	r3, r3, #18
 8005c36:	3301      	adds	r3, #1
 8005c38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c3a:	e002      	b.n	8005c42 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c42:	4b38      	ldr	r3, [pc, #224]	; (8005d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c4e:	d102      	bne.n	8005c56 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1f2      	bne.n	8005c3c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005c56:	4b33      	ldr	r3, [pc, #204]	; (8005d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c62:	d158      	bne.n	8005d16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e057      	b.n	8005d18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c68:	4b2e      	ldr	r3, [pc, #184]	; (8005d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c6e:	4a2d      	ldr	r2, [pc, #180]	; (8005d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005c78:	e04d      	b.n	8005d16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c80:	d141      	bne.n	8005d06 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c82:	4b28      	ldr	r3, [pc, #160]	; (8005d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c8e:	d131      	bne.n	8005cf4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c90:	4b24      	ldr	r3, [pc, #144]	; (8005d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c96:	4a23      	ldr	r2, [pc, #140]	; (8005d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ca0:	4b20      	ldr	r3, [pc, #128]	; (8005d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005ca8:	4a1e      	ldr	r2, [pc, #120]	; (8005d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005cb0:	4b1d      	ldr	r3, [pc, #116]	; (8005d28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2232      	movs	r2, #50	; 0x32
 8005cb6:	fb02 f303 	mul.w	r3, r2, r3
 8005cba:	4a1c      	ldr	r2, [pc, #112]	; (8005d2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc0:	0c9b      	lsrs	r3, r3, #18
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005cc6:	e002      	b.n	8005cce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005cce:	4b15      	ldr	r3, [pc, #84]	; (8005d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cda:	d102      	bne.n	8005ce2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1f2      	bne.n	8005cc8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ce2:	4b10      	ldr	r3, [pc, #64]	; (8005d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cee:	d112      	bne.n	8005d16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e011      	b.n	8005d18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005cf4:	4b0b      	ldr	r3, [pc, #44]	; (8005d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cfa:	4a0a      	ldr	r2, [pc, #40]	; (8005d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005d04:	e007      	b.n	8005d16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005d06:	4b07      	ldr	r3, [pc, #28]	; (8005d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d0e:	4a05      	ldr	r2, [pc, #20]	; (8005d24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d14:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3714      	adds	r7, #20
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr
 8005d24:	40007000 	.word	0x40007000
 8005d28:	200026d4 	.word	0x200026d4
 8005d2c:	431bde83 	.word	0x431bde83

08005d30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b088      	sub	sp, #32
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e306      	b.n	8006350 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d075      	beq.n	8005e3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d4e:	4b97      	ldr	r3, [pc, #604]	; (8005fac <HAL_RCC_OscConfig+0x27c>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f003 030c 	and.w	r3, r3, #12
 8005d56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d58:	4b94      	ldr	r3, [pc, #592]	; (8005fac <HAL_RCC_OscConfig+0x27c>)
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f003 0303 	and.w	r3, r3, #3
 8005d60:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	2b0c      	cmp	r3, #12
 8005d66:	d102      	bne.n	8005d6e <HAL_RCC_OscConfig+0x3e>
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	2b03      	cmp	r3, #3
 8005d6c:	d002      	beq.n	8005d74 <HAL_RCC_OscConfig+0x44>
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	2b08      	cmp	r3, #8
 8005d72:	d10b      	bne.n	8005d8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d74:	4b8d      	ldr	r3, [pc, #564]	; (8005fac <HAL_RCC_OscConfig+0x27c>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d05b      	beq.n	8005e38 <HAL_RCC_OscConfig+0x108>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d157      	bne.n	8005e38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e2e1      	b.n	8006350 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d94:	d106      	bne.n	8005da4 <HAL_RCC_OscConfig+0x74>
 8005d96:	4b85      	ldr	r3, [pc, #532]	; (8005fac <HAL_RCC_OscConfig+0x27c>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a84      	ldr	r2, [pc, #528]	; (8005fac <HAL_RCC_OscConfig+0x27c>)
 8005d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005da0:	6013      	str	r3, [r2, #0]
 8005da2:	e01d      	b.n	8005de0 <HAL_RCC_OscConfig+0xb0>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005dac:	d10c      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x98>
 8005dae:	4b7f      	ldr	r3, [pc, #508]	; (8005fac <HAL_RCC_OscConfig+0x27c>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a7e      	ldr	r2, [pc, #504]	; (8005fac <HAL_RCC_OscConfig+0x27c>)
 8005db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005db8:	6013      	str	r3, [r2, #0]
 8005dba:	4b7c      	ldr	r3, [pc, #496]	; (8005fac <HAL_RCC_OscConfig+0x27c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a7b      	ldr	r2, [pc, #492]	; (8005fac <HAL_RCC_OscConfig+0x27c>)
 8005dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	e00b      	b.n	8005de0 <HAL_RCC_OscConfig+0xb0>
 8005dc8:	4b78      	ldr	r3, [pc, #480]	; (8005fac <HAL_RCC_OscConfig+0x27c>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a77      	ldr	r2, [pc, #476]	; (8005fac <HAL_RCC_OscConfig+0x27c>)
 8005dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dd2:	6013      	str	r3, [r2, #0]
 8005dd4:	4b75      	ldr	r3, [pc, #468]	; (8005fac <HAL_RCC_OscConfig+0x27c>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a74      	ldr	r2, [pc, #464]	; (8005fac <HAL_RCC_OscConfig+0x27c>)
 8005dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d013      	beq.n	8005e10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de8:	f7fb fe70 	bl	8001acc <HAL_GetTick>
 8005dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005df0:	f7fb fe6c 	bl	8001acc <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b64      	cmp	r3, #100	; 0x64
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e2a6      	b.n	8006350 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e02:	4b6a      	ldr	r3, [pc, #424]	; (8005fac <HAL_RCC_OscConfig+0x27c>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d0f0      	beq.n	8005df0 <HAL_RCC_OscConfig+0xc0>
 8005e0e:	e014      	b.n	8005e3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e10:	f7fb fe5c 	bl	8001acc <HAL_GetTick>
 8005e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e16:	e008      	b.n	8005e2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e18:	f7fb fe58 	bl	8001acc <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	2b64      	cmp	r3, #100	; 0x64
 8005e24:	d901      	bls.n	8005e2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e292      	b.n	8006350 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e2a:	4b60      	ldr	r3, [pc, #384]	; (8005fac <HAL_RCC_OscConfig+0x27c>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1f0      	bne.n	8005e18 <HAL_RCC_OscConfig+0xe8>
 8005e36:	e000      	b.n	8005e3a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0302 	and.w	r3, r3, #2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d075      	beq.n	8005f32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e46:	4b59      	ldr	r3, [pc, #356]	; (8005fac <HAL_RCC_OscConfig+0x27c>)
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f003 030c 	and.w	r3, r3, #12
 8005e4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e50:	4b56      	ldr	r3, [pc, #344]	; (8005fac <HAL_RCC_OscConfig+0x27c>)
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f003 0303 	and.w	r3, r3, #3
 8005e58:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	2b0c      	cmp	r3, #12
 8005e5e:	d102      	bne.n	8005e66 <HAL_RCC_OscConfig+0x136>
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d002      	beq.n	8005e6c <HAL_RCC_OscConfig+0x13c>
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	2b04      	cmp	r3, #4
 8005e6a:	d11f      	bne.n	8005eac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e6c:	4b4f      	ldr	r3, [pc, #316]	; (8005fac <HAL_RCC_OscConfig+0x27c>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d005      	beq.n	8005e84 <HAL_RCC_OscConfig+0x154>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d101      	bne.n	8005e84 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e265      	b.n	8006350 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e84:	4b49      	ldr	r3, [pc, #292]	; (8005fac <HAL_RCC_OscConfig+0x27c>)
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	061b      	lsls	r3, r3, #24
 8005e92:	4946      	ldr	r1, [pc, #280]	; (8005fac <HAL_RCC_OscConfig+0x27c>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005e98:	4b45      	ldr	r3, [pc, #276]	; (8005fb0 <HAL_RCC_OscConfig+0x280>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7fb fdc9 	bl	8001a34 <HAL_InitTick>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d043      	beq.n	8005f30 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e251      	b.n	8006350 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d023      	beq.n	8005efc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005eb4:	4b3d      	ldr	r3, [pc, #244]	; (8005fac <HAL_RCC_OscConfig+0x27c>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a3c      	ldr	r2, [pc, #240]	; (8005fac <HAL_RCC_OscConfig+0x27c>)
 8005eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec0:	f7fb fe04 	bl	8001acc <HAL_GetTick>
 8005ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ec6:	e008      	b.n	8005eda <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ec8:	f7fb fe00 	bl	8001acc <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e23a      	b.n	8006350 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005eda:	4b34      	ldr	r3, [pc, #208]	; (8005fac <HAL_RCC_OscConfig+0x27c>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d0f0      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ee6:	4b31      	ldr	r3, [pc, #196]	; (8005fac <HAL_RCC_OscConfig+0x27c>)
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	061b      	lsls	r3, r3, #24
 8005ef4:	492d      	ldr	r1, [pc, #180]	; (8005fac <HAL_RCC_OscConfig+0x27c>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	604b      	str	r3, [r1, #4]
 8005efa:	e01a      	b.n	8005f32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005efc:	4b2b      	ldr	r3, [pc, #172]	; (8005fac <HAL_RCC_OscConfig+0x27c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a2a      	ldr	r2, [pc, #168]	; (8005fac <HAL_RCC_OscConfig+0x27c>)
 8005f02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f08:	f7fb fde0 	bl	8001acc <HAL_GetTick>
 8005f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f0e:	e008      	b.n	8005f22 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f10:	f7fb fddc 	bl	8001acc <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e216      	b.n	8006350 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f22:	4b22      	ldr	r3, [pc, #136]	; (8005fac <HAL_RCC_OscConfig+0x27c>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1f0      	bne.n	8005f10 <HAL_RCC_OscConfig+0x1e0>
 8005f2e:	e000      	b.n	8005f32 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0308 	and.w	r3, r3, #8
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d041      	beq.n	8005fc2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d01c      	beq.n	8005f80 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f46:	4b19      	ldr	r3, [pc, #100]	; (8005fac <HAL_RCC_OscConfig+0x27c>)
 8005f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f4c:	4a17      	ldr	r2, [pc, #92]	; (8005fac <HAL_RCC_OscConfig+0x27c>)
 8005f4e:	f043 0301 	orr.w	r3, r3, #1
 8005f52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f56:	f7fb fdb9 	bl	8001acc <HAL_GetTick>
 8005f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f5c:	e008      	b.n	8005f70 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f5e:	f7fb fdb5 	bl	8001acc <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d901      	bls.n	8005f70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e1ef      	b.n	8006350 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f70:	4b0e      	ldr	r3, [pc, #56]	; (8005fac <HAL_RCC_OscConfig+0x27c>)
 8005f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d0ef      	beq.n	8005f5e <HAL_RCC_OscConfig+0x22e>
 8005f7e:	e020      	b.n	8005fc2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f80:	4b0a      	ldr	r3, [pc, #40]	; (8005fac <HAL_RCC_OscConfig+0x27c>)
 8005f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f86:	4a09      	ldr	r2, [pc, #36]	; (8005fac <HAL_RCC_OscConfig+0x27c>)
 8005f88:	f023 0301 	bic.w	r3, r3, #1
 8005f8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f90:	f7fb fd9c 	bl	8001acc <HAL_GetTick>
 8005f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f96:	e00d      	b.n	8005fb4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f98:	f7fb fd98 	bl	8001acc <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d906      	bls.n	8005fb4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e1d2      	b.n	8006350 <HAL_RCC_OscConfig+0x620>
 8005faa:	bf00      	nop
 8005fac:	40021000 	.word	0x40021000
 8005fb0:	200026d8 	.word	0x200026d8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005fb4:	4b8c      	ldr	r3, [pc, #560]	; (80061e8 <HAL_RCC_OscConfig+0x4b8>)
 8005fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fba:	f003 0302 	and.w	r3, r3, #2
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1ea      	bne.n	8005f98 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0304 	and.w	r3, r3, #4
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 80a6 	beq.w	800611c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005fd4:	4b84      	ldr	r3, [pc, #528]	; (80061e8 <HAL_RCC_OscConfig+0x4b8>)
 8005fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x2b4>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e000      	b.n	8005fe6 <HAL_RCC_OscConfig+0x2b6>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00d      	beq.n	8006006 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fea:	4b7f      	ldr	r3, [pc, #508]	; (80061e8 <HAL_RCC_OscConfig+0x4b8>)
 8005fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fee:	4a7e      	ldr	r2, [pc, #504]	; (80061e8 <HAL_RCC_OscConfig+0x4b8>)
 8005ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ff4:	6593      	str	r3, [r2, #88]	; 0x58
 8005ff6:	4b7c      	ldr	r3, [pc, #496]	; (80061e8 <HAL_RCC_OscConfig+0x4b8>)
 8005ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ffe:	60fb      	str	r3, [r7, #12]
 8006000:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006002:	2301      	movs	r3, #1
 8006004:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006006:	4b79      	ldr	r3, [pc, #484]	; (80061ec <HAL_RCC_OscConfig+0x4bc>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800600e:	2b00      	cmp	r3, #0
 8006010:	d118      	bne.n	8006044 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006012:	4b76      	ldr	r3, [pc, #472]	; (80061ec <HAL_RCC_OscConfig+0x4bc>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a75      	ldr	r2, [pc, #468]	; (80061ec <HAL_RCC_OscConfig+0x4bc>)
 8006018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800601c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800601e:	f7fb fd55 	bl	8001acc <HAL_GetTick>
 8006022:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006024:	e008      	b.n	8006038 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006026:	f7fb fd51 	bl	8001acc <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	2b02      	cmp	r3, #2
 8006032:	d901      	bls.n	8006038 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	e18b      	b.n	8006350 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006038:	4b6c      	ldr	r3, [pc, #432]	; (80061ec <HAL_RCC_OscConfig+0x4bc>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006040:	2b00      	cmp	r3, #0
 8006042:	d0f0      	beq.n	8006026 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d108      	bne.n	800605e <HAL_RCC_OscConfig+0x32e>
 800604c:	4b66      	ldr	r3, [pc, #408]	; (80061e8 <HAL_RCC_OscConfig+0x4b8>)
 800604e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006052:	4a65      	ldr	r2, [pc, #404]	; (80061e8 <HAL_RCC_OscConfig+0x4b8>)
 8006054:	f043 0301 	orr.w	r3, r3, #1
 8006058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800605c:	e024      	b.n	80060a8 <HAL_RCC_OscConfig+0x378>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	2b05      	cmp	r3, #5
 8006064:	d110      	bne.n	8006088 <HAL_RCC_OscConfig+0x358>
 8006066:	4b60      	ldr	r3, [pc, #384]	; (80061e8 <HAL_RCC_OscConfig+0x4b8>)
 8006068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800606c:	4a5e      	ldr	r2, [pc, #376]	; (80061e8 <HAL_RCC_OscConfig+0x4b8>)
 800606e:	f043 0304 	orr.w	r3, r3, #4
 8006072:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006076:	4b5c      	ldr	r3, [pc, #368]	; (80061e8 <HAL_RCC_OscConfig+0x4b8>)
 8006078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800607c:	4a5a      	ldr	r2, [pc, #360]	; (80061e8 <HAL_RCC_OscConfig+0x4b8>)
 800607e:	f043 0301 	orr.w	r3, r3, #1
 8006082:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006086:	e00f      	b.n	80060a8 <HAL_RCC_OscConfig+0x378>
 8006088:	4b57      	ldr	r3, [pc, #348]	; (80061e8 <HAL_RCC_OscConfig+0x4b8>)
 800608a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800608e:	4a56      	ldr	r2, [pc, #344]	; (80061e8 <HAL_RCC_OscConfig+0x4b8>)
 8006090:	f023 0301 	bic.w	r3, r3, #1
 8006094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006098:	4b53      	ldr	r3, [pc, #332]	; (80061e8 <HAL_RCC_OscConfig+0x4b8>)
 800609a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609e:	4a52      	ldr	r2, [pc, #328]	; (80061e8 <HAL_RCC_OscConfig+0x4b8>)
 80060a0:	f023 0304 	bic.w	r3, r3, #4
 80060a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d016      	beq.n	80060de <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060b0:	f7fb fd0c 	bl	8001acc <HAL_GetTick>
 80060b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060b6:	e00a      	b.n	80060ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060b8:	f7fb fd08 	bl	8001acc <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e140      	b.n	8006350 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060ce:	4b46      	ldr	r3, [pc, #280]	; (80061e8 <HAL_RCC_OscConfig+0x4b8>)
 80060d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060d4:	f003 0302 	and.w	r3, r3, #2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d0ed      	beq.n	80060b8 <HAL_RCC_OscConfig+0x388>
 80060dc:	e015      	b.n	800610a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060de:	f7fb fcf5 	bl	8001acc <HAL_GetTick>
 80060e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060e4:	e00a      	b.n	80060fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060e6:	f7fb fcf1 	bl	8001acc <HAL_GetTick>
 80060ea:	4602      	mov	r2, r0
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d901      	bls.n	80060fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e129      	b.n	8006350 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060fc:	4b3a      	ldr	r3, [pc, #232]	; (80061e8 <HAL_RCC_OscConfig+0x4b8>)
 80060fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006102:	f003 0302 	and.w	r3, r3, #2
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1ed      	bne.n	80060e6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800610a:	7ffb      	ldrb	r3, [r7, #31]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d105      	bne.n	800611c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006110:	4b35      	ldr	r3, [pc, #212]	; (80061e8 <HAL_RCC_OscConfig+0x4b8>)
 8006112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006114:	4a34      	ldr	r2, [pc, #208]	; (80061e8 <HAL_RCC_OscConfig+0x4b8>)
 8006116:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800611a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0320 	and.w	r3, r3, #32
 8006124:	2b00      	cmp	r3, #0
 8006126:	d03c      	beq.n	80061a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d01c      	beq.n	800616a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006130:	4b2d      	ldr	r3, [pc, #180]	; (80061e8 <HAL_RCC_OscConfig+0x4b8>)
 8006132:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006136:	4a2c      	ldr	r2, [pc, #176]	; (80061e8 <HAL_RCC_OscConfig+0x4b8>)
 8006138:	f043 0301 	orr.w	r3, r3, #1
 800613c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006140:	f7fb fcc4 	bl	8001acc <HAL_GetTick>
 8006144:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006146:	e008      	b.n	800615a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006148:	f7fb fcc0 	bl	8001acc <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	2b02      	cmp	r3, #2
 8006154:	d901      	bls.n	800615a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e0fa      	b.n	8006350 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800615a:	4b23      	ldr	r3, [pc, #140]	; (80061e8 <HAL_RCC_OscConfig+0x4b8>)
 800615c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b00      	cmp	r3, #0
 8006166:	d0ef      	beq.n	8006148 <HAL_RCC_OscConfig+0x418>
 8006168:	e01b      	b.n	80061a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800616a:	4b1f      	ldr	r3, [pc, #124]	; (80061e8 <HAL_RCC_OscConfig+0x4b8>)
 800616c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006170:	4a1d      	ldr	r2, [pc, #116]	; (80061e8 <HAL_RCC_OscConfig+0x4b8>)
 8006172:	f023 0301 	bic.w	r3, r3, #1
 8006176:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800617a:	f7fb fca7 	bl	8001acc <HAL_GetTick>
 800617e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006180:	e008      	b.n	8006194 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006182:	f7fb fca3 	bl	8001acc <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	2b02      	cmp	r3, #2
 800618e:	d901      	bls.n	8006194 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e0dd      	b.n	8006350 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006194:	4b14      	ldr	r3, [pc, #80]	; (80061e8 <HAL_RCC_OscConfig+0x4b8>)
 8006196:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800619a:	f003 0302 	and.w	r3, r3, #2
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1ef      	bne.n	8006182 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 80d1 	beq.w	800634e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061ac:	4b0e      	ldr	r3, [pc, #56]	; (80061e8 <HAL_RCC_OscConfig+0x4b8>)
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f003 030c 	and.w	r3, r3, #12
 80061b4:	2b0c      	cmp	r3, #12
 80061b6:	f000 808b 	beq.w	80062d0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d15e      	bne.n	8006280 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061c2:	4b09      	ldr	r3, [pc, #36]	; (80061e8 <HAL_RCC_OscConfig+0x4b8>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a08      	ldr	r2, [pc, #32]	; (80061e8 <HAL_RCC_OscConfig+0x4b8>)
 80061c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ce:	f7fb fc7d 	bl	8001acc <HAL_GetTick>
 80061d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061d4:	e00c      	b.n	80061f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061d6:	f7fb fc79 	bl	8001acc <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d905      	bls.n	80061f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e0b3      	b.n	8006350 <HAL_RCC_OscConfig+0x620>
 80061e8:	40021000 	.word	0x40021000
 80061ec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061f0:	4b59      	ldr	r3, [pc, #356]	; (8006358 <HAL_RCC_OscConfig+0x628>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1ec      	bne.n	80061d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061fc:	4b56      	ldr	r3, [pc, #344]	; (8006358 <HAL_RCC_OscConfig+0x628>)
 80061fe:	68da      	ldr	r2, [r3, #12]
 8006200:	4b56      	ldr	r3, [pc, #344]	; (800635c <HAL_RCC_OscConfig+0x62c>)
 8006202:	4013      	ands	r3, r2
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	6a11      	ldr	r1, [r2, #32]
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800620c:	3a01      	subs	r2, #1
 800620e:	0112      	lsls	r2, r2, #4
 8006210:	4311      	orrs	r1, r2
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006216:	0212      	lsls	r2, r2, #8
 8006218:	4311      	orrs	r1, r2
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800621e:	0852      	lsrs	r2, r2, #1
 8006220:	3a01      	subs	r2, #1
 8006222:	0552      	lsls	r2, r2, #21
 8006224:	4311      	orrs	r1, r2
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800622a:	0852      	lsrs	r2, r2, #1
 800622c:	3a01      	subs	r2, #1
 800622e:	0652      	lsls	r2, r2, #25
 8006230:	4311      	orrs	r1, r2
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006236:	06d2      	lsls	r2, r2, #27
 8006238:	430a      	orrs	r2, r1
 800623a:	4947      	ldr	r1, [pc, #284]	; (8006358 <HAL_RCC_OscConfig+0x628>)
 800623c:	4313      	orrs	r3, r2
 800623e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006240:	4b45      	ldr	r3, [pc, #276]	; (8006358 <HAL_RCC_OscConfig+0x628>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a44      	ldr	r2, [pc, #272]	; (8006358 <HAL_RCC_OscConfig+0x628>)
 8006246:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800624a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800624c:	4b42      	ldr	r3, [pc, #264]	; (8006358 <HAL_RCC_OscConfig+0x628>)
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	4a41      	ldr	r2, [pc, #260]	; (8006358 <HAL_RCC_OscConfig+0x628>)
 8006252:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006256:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006258:	f7fb fc38 	bl	8001acc <HAL_GetTick>
 800625c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800625e:	e008      	b.n	8006272 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006260:	f7fb fc34 	bl	8001acc <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	2b02      	cmp	r3, #2
 800626c:	d901      	bls.n	8006272 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e06e      	b.n	8006350 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006272:	4b39      	ldr	r3, [pc, #228]	; (8006358 <HAL_RCC_OscConfig+0x628>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d0f0      	beq.n	8006260 <HAL_RCC_OscConfig+0x530>
 800627e:	e066      	b.n	800634e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006280:	4b35      	ldr	r3, [pc, #212]	; (8006358 <HAL_RCC_OscConfig+0x628>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a34      	ldr	r2, [pc, #208]	; (8006358 <HAL_RCC_OscConfig+0x628>)
 8006286:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800628a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800628c:	4b32      	ldr	r3, [pc, #200]	; (8006358 <HAL_RCC_OscConfig+0x628>)
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	4a31      	ldr	r2, [pc, #196]	; (8006358 <HAL_RCC_OscConfig+0x628>)
 8006292:	f023 0303 	bic.w	r3, r3, #3
 8006296:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006298:	4b2f      	ldr	r3, [pc, #188]	; (8006358 <HAL_RCC_OscConfig+0x628>)
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	4a2e      	ldr	r2, [pc, #184]	; (8006358 <HAL_RCC_OscConfig+0x628>)
 800629e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80062a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a8:	f7fb fc10 	bl	8001acc <HAL_GetTick>
 80062ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062ae:	e008      	b.n	80062c2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062b0:	f7fb fc0c 	bl	8001acc <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d901      	bls.n	80062c2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e046      	b.n	8006350 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062c2:	4b25      	ldr	r3, [pc, #148]	; (8006358 <HAL_RCC_OscConfig+0x628>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1f0      	bne.n	80062b0 <HAL_RCC_OscConfig+0x580>
 80062ce:	e03e      	b.n	800634e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	69db      	ldr	r3, [r3, #28]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d101      	bne.n	80062dc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e039      	b.n	8006350 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80062dc:	4b1e      	ldr	r3, [pc, #120]	; (8006358 <HAL_RCC_OscConfig+0x628>)
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f003 0203 	and.w	r2, r3, #3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a1b      	ldr	r3, [r3, #32]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d12c      	bne.n	800634a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fa:	3b01      	subs	r3, #1
 80062fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062fe:	429a      	cmp	r2, r3
 8006300:	d123      	bne.n	800634a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800630c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800630e:	429a      	cmp	r2, r3
 8006310:	d11b      	bne.n	800634a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800631e:	429a      	cmp	r2, r3
 8006320:	d113      	bne.n	800634a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632c:	085b      	lsrs	r3, r3, #1
 800632e:	3b01      	subs	r3, #1
 8006330:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006332:	429a      	cmp	r2, r3
 8006334:	d109      	bne.n	800634a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006340:	085b      	lsrs	r3, r3, #1
 8006342:	3b01      	subs	r3, #1
 8006344:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006346:	429a      	cmp	r2, r3
 8006348:	d001      	beq.n	800634e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e000      	b.n	8006350 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3720      	adds	r7, #32
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	40021000 	.word	0x40021000
 800635c:	019f800c 	.word	0x019f800c

08006360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800636a:	2300      	movs	r3, #0
 800636c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e11e      	b.n	80065b6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006378:	4b91      	ldr	r3, [pc, #580]	; (80065c0 <HAL_RCC_ClockConfig+0x260>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 030f 	and.w	r3, r3, #15
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	429a      	cmp	r2, r3
 8006384:	d910      	bls.n	80063a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006386:	4b8e      	ldr	r3, [pc, #568]	; (80065c0 <HAL_RCC_ClockConfig+0x260>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f023 020f 	bic.w	r2, r3, #15
 800638e:	498c      	ldr	r1, [pc, #560]	; (80065c0 <HAL_RCC_ClockConfig+0x260>)
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	4313      	orrs	r3, r2
 8006394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006396:	4b8a      	ldr	r3, [pc, #552]	; (80065c0 <HAL_RCC_ClockConfig+0x260>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 030f 	and.w	r3, r3, #15
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d001      	beq.n	80063a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e106      	b.n	80065b6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0301 	and.w	r3, r3, #1
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d073      	beq.n	800649c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	2b03      	cmp	r3, #3
 80063ba:	d129      	bne.n	8006410 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063bc:	4b81      	ldr	r3, [pc, #516]	; (80065c4 <HAL_RCC_ClockConfig+0x264>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d101      	bne.n	80063cc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e0f4      	b.n	80065b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80063cc:	f000 f970 	bl	80066b0 <RCC_GetSysClockFreqFromPLLSource>
 80063d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	4a7c      	ldr	r2, [pc, #496]	; (80065c8 <HAL_RCC_ClockConfig+0x268>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d93f      	bls.n	800645a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80063da:	4b7a      	ldr	r3, [pc, #488]	; (80065c4 <HAL_RCC_ClockConfig+0x264>)
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d009      	beq.n	80063fa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d033      	beq.n	800645a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d12f      	bne.n	800645a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80063fa:	4b72      	ldr	r3, [pc, #456]	; (80065c4 <HAL_RCC_ClockConfig+0x264>)
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006402:	4a70      	ldr	r2, [pc, #448]	; (80065c4 <HAL_RCC_ClockConfig+0x264>)
 8006404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006408:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800640a:	2380      	movs	r3, #128	; 0x80
 800640c:	617b      	str	r3, [r7, #20]
 800640e:	e024      	b.n	800645a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	2b02      	cmp	r3, #2
 8006416:	d107      	bne.n	8006428 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006418:	4b6a      	ldr	r3, [pc, #424]	; (80065c4 <HAL_RCC_ClockConfig+0x264>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d109      	bne.n	8006438 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e0c6      	b.n	80065b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006428:	4b66      	ldr	r3, [pc, #408]	; (80065c4 <HAL_RCC_ClockConfig+0x264>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006430:	2b00      	cmp	r3, #0
 8006432:	d101      	bne.n	8006438 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e0be      	b.n	80065b6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006438:	f000 f8ce 	bl	80065d8 <HAL_RCC_GetSysClockFreq>
 800643c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	4a61      	ldr	r2, [pc, #388]	; (80065c8 <HAL_RCC_ClockConfig+0x268>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d909      	bls.n	800645a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006446:	4b5f      	ldr	r3, [pc, #380]	; (80065c4 <HAL_RCC_ClockConfig+0x264>)
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800644e:	4a5d      	ldr	r2, [pc, #372]	; (80065c4 <HAL_RCC_ClockConfig+0x264>)
 8006450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006454:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006456:	2380      	movs	r3, #128	; 0x80
 8006458:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800645a:	4b5a      	ldr	r3, [pc, #360]	; (80065c4 <HAL_RCC_ClockConfig+0x264>)
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f023 0203 	bic.w	r2, r3, #3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	4957      	ldr	r1, [pc, #348]	; (80065c4 <HAL_RCC_ClockConfig+0x264>)
 8006468:	4313      	orrs	r3, r2
 800646a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800646c:	f7fb fb2e 	bl	8001acc <HAL_GetTick>
 8006470:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006472:	e00a      	b.n	800648a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006474:	f7fb fb2a 	bl	8001acc <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006482:	4293      	cmp	r3, r2
 8006484:	d901      	bls.n	800648a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e095      	b.n	80065b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800648a:	4b4e      	ldr	r3, [pc, #312]	; (80065c4 <HAL_RCC_ClockConfig+0x264>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f003 020c 	and.w	r2, r3, #12
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	429a      	cmp	r2, r3
 800649a:	d1eb      	bne.n	8006474 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d023      	beq.n	80064f0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0304 	and.w	r3, r3, #4
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d005      	beq.n	80064c0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064b4:	4b43      	ldr	r3, [pc, #268]	; (80065c4 <HAL_RCC_ClockConfig+0x264>)
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	4a42      	ldr	r2, [pc, #264]	; (80065c4 <HAL_RCC_ClockConfig+0x264>)
 80064ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80064be:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0308 	and.w	r3, r3, #8
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d007      	beq.n	80064dc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80064cc:	4b3d      	ldr	r3, [pc, #244]	; (80065c4 <HAL_RCC_ClockConfig+0x264>)
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80064d4:	4a3b      	ldr	r2, [pc, #236]	; (80065c4 <HAL_RCC_ClockConfig+0x264>)
 80064d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80064da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064dc:	4b39      	ldr	r3, [pc, #228]	; (80065c4 <HAL_RCC_ClockConfig+0x264>)
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	4936      	ldr	r1, [pc, #216]	; (80065c4 <HAL_RCC_ClockConfig+0x264>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	608b      	str	r3, [r1, #8]
 80064ee:	e008      	b.n	8006502 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	2b80      	cmp	r3, #128	; 0x80
 80064f4:	d105      	bne.n	8006502 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80064f6:	4b33      	ldr	r3, [pc, #204]	; (80065c4 <HAL_RCC_ClockConfig+0x264>)
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	4a32      	ldr	r2, [pc, #200]	; (80065c4 <HAL_RCC_ClockConfig+0x264>)
 80064fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006500:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006502:	4b2f      	ldr	r3, [pc, #188]	; (80065c0 <HAL_RCC_ClockConfig+0x260>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 030f 	and.w	r3, r3, #15
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	429a      	cmp	r2, r3
 800650e:	d21d      	bcs.n	800654c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006510:	4b2b      	ldr	r3, [pc, #172]	; (80065c0 <HAL_RCC_ClockConfig+0x260>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f023 020f 	bic.w	r2, r3, #15
 8006518:	4929      	ldr	r1, [pc, #164]	; (80065c0 <HAL_RCC_ClockConfig+0x260>)
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	4313      	orrs	r3, r2
 800651e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006520:	f7fb fad4 	bl	8001acc <HAL_GetTick>
 8006524:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006526:	e00a      	b.n	800653e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006528:	f7fb fad0 	bl	8001acc <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	f241 3288 	movw	r2, #5000	; 0x1388
 8006536:	4293      	cmp	r3, r2
 8006538:	d901      	bls.n	800653e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e03b      	b.n	80065b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800653e:	4b20      	ldr	r3, [pc, #128]	; (80065c0 <HAL_RCC_ClockConfig+0x260>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 030f 	and.w	r3, r3, #15
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	429a      	cmp	r2, r3
 800654a:	d1ed      	bne.n	8006528 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0304 	and.w	r3, r3, #4
 8006554:	2b00      	cmp	r3, #0
 8006556:	d008      	beq.n	800656a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006558:	4b1a      	ldr	r3, [pc, #104]	; (80065c4 <HAL_RCC_ClockConfig+0x264>)
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	4917      	ldr	r1, [pc, #92]	; (80065c4 <HAL_RCC_ClockConfig+0x264>)
 8006566:	4313      	orrs	r3, r2
 8006568:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0308 	and.w	r3, r3, #8
 8006572:	2b00      	cmp	r3, #0
 8006574:	d009      	beq.n	800658a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006576:	4b13      	ldr	r3, [pc, #76]	; (80065c4 <HAL_RCC_ClockConfig+0x264>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	00db      	lsls	r3, r3, #3
 8006584:	490f      	ldr	r1, [pc, #60]	; (80065c4 <HAL_RCC_ClockConfig+0x264>)
 8006586:	4313      	orrs	r3, r2
 8006588:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800658a:	f000 f825 	bl	80065d8 <HAL_RCC_GetSysClockFreq>
 800658e:	4602      	mov	r2, r0
 8006590:	4b0c      	ldr	r3, [pc, #48]	; (80065c4 <HAL_RCC_ClockConfig+0x264>)
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	091b      	lsrs	r3, r3, #4
 8006596:	f003 030f 	and.w	r3, r3, #15
 800659a:	490c      	ldr	r1, [pc, #48]	; (80065cc <HAL_RCC_ClockConfig+0x26c>)
 800659c:	5ccb      	ldrb	r3, [r1, r3]
 800659e:	f003 031f 	and.w	r3, r3, #31
 80065a2:	fa22 f303 	lsr.w	r3, r2, r3
 80065a6:	4a0a      	ldr	r2, [pc, #40]	; (80065d0 <HAL_RCC_ClockConfig+0x270>)
 80065a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80065aa:	4b0a      	ldr	r3, [pc, #40]	; (80065d4 <HAL_RCC_ClockConfig+0x274>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7fb fa40 	bl	8001a34 <HAL_InitTick>
 80065b4:	4603      	mov	r3, r0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3718      	adds	r7, #24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	40022000 	.word	0x40022000
 80065c4:	40021000 	.word	0x40021000
 80065c8:	04c4b400 	.word	0x04c4b400
 80065cc:	0800f558 	.word	0x0800f558
 80065d0:	200026d4 	.word	0x200026d4
 80065d4:	200026d8 	.word	0x200026d8

080065d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80065de:	4b2c      	ldr	r3, [pc, #176]	; (8006690 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f003 030c 	and.w	r3, r3, #12
 80065e6:	2b04      	cmp	r3, #4
 80065e8:	d102      	bne.n	80065f0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80065ea:	4b2a      	ldr	r3, [pc, #168]	; (8006694 <HAL_RCC_GetSysClockFreq+0xbc>)
 80065ec:	613b      	str	r3, [r7, #16]
 80065ee:	e047      	b.n	8006680 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80065f0:	4b27      	ldr	r3, [pc, #156]	; (8006690 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f003 030c 	and.w	r3, r3, #12
 80065f8:	2b08      	cmp	r3, #8
 80065fa:	d102      	bne.n	8006602 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80065fc:	4b25      	ldr	r3, [pc, #148]	; (8006694 <HAL_RCC_GetSysClockFreq+0xbc>)
 80065fe:	613b      	str	r3, [r7, #16]
 8006600:	e03e      	b.n	8006680 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006602:	4b23      	ldr	r3, [pc, #140]	; (8006690 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f003 030c 	and.w	r3, r3, #12
 800660a:	2b0c      	cmp	r3, #12
 800660c:	d136      	bne.n	800667c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800660e:	4b20      	ldr	r3, [pc, #128]	; (8006690 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	f003 0303 	and.w	r3, r3, #3
 8006616:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006618:	4b1d      	ldr	r3, [pc, #116]	; (8006690 <HAL_RCC_GetSysClockFreq+0xb8>)
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	091b      	lsrs	r3, r3, #4
 800661e:	f003 030f 	and.w	r3, r3, #15
 8006622:	3301      	adds	r3, #1
 8006624:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2b03      	cmp	r3, #3
 800662a:	d10c      	bne.n	8006646 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800662c:	4a19      	ldr	r2, [pc, #100]	; (8006694 <HAL_RCC_GetSysClockFreq+0xbc>)
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	fbb2 f3f3 	udiv	r3, r2, r3
 8006634:	4a16      	ldr	r2, [pc, #88]	; (8006690 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006636:	68d2      	ldr	r2, [r2, #12]
 8006638:	0a12      	lsrs	r2, r2, #8
 800663a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800663e:	fb02 f303 	mul.w	r3, r2, r3
 8006642:	617b      	str	r3, [r7, #20]
      break;
 8006644:	e00c      	b.n	8006660 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006646:	4a13      	ldr	r2, [pc, #76]	; (8006694 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	fbb2 f3f3 	udiv	r3, r2, r3
 800664e:	4a10      	ldr	r2, [pc, #64]	; (8006690 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006650:	68d2      	ldr	r2, [r2, #12]
 8006652:	0a12      	lsrs	r2, r2, #8
 8006654:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006658:	fb02 f303 	mul.w	r3, r2, r3
 800665c:	617b      	str	r3, [r7, #20]
      break;
 800665e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006660:	4b0b      	ldr	r3, [pc, #44]	; (8006690 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	0e5b      	lsrs	r3, r3, #25
 8006666:	f003 0303 	and.w	r3, r3, #3
 800666a:	3301      	adds	r3, #1
 800666c:	005b      	lsls	r3, r3, #1
 800666e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	fbb2 f3f3 	udiv	r3, r2, r3
 8006678:	613b      	str	r3, [r7, #16]
 800667a:	e001      	b.n	8006680 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800667c:	2300      	movs	r3, #0
 800667e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006680:	693b      	ldr	r3, [r7, #16]
}
 8006682:	4618      	mov	r0, r3
 8006684:	371c      	adds	r7, #28
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	40021000 	.word	0x40021000
 8006694:	00f42400 	.word	0x00f42400

08006698 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006698:	b480      	push	{r7}
 800669a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800669c:	4b03      	ldr	r3, [pc, #12]	; (80066ac <HAL_RCC_GetHCLKFreq+0x14>)
 800669e:	681b      	ldr	r3, [r3, #0]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	200026d4 	.word	0x200026d4

080066b0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b087      	sub	sp, #28
 80066b4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80066b6:	4b1e      	ldr	r3, [pc, #120]	; (8006730 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f003 0303 	and.w	r3, r3, #3
 80066be:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066c0:	4b1b      	ldr	r3, [pc, #108]	; (8006730 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	091b      	lsrs	r3, r3, #4
 80066c6:	f003 030f 	and.w	r3, r3, #15
 80066ca:	3301      	adds	r3, #1
 80066cc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	2b03      	cmp	r3, #3
 80066d2:	d10c      	bne.n	80066ee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066d4:	4a17      	ldr	r2, [pc, #92]	; (8006734 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066dc:	4a14      	ldr	r2, [pc, #80]	; (8006730 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80066de:	68d2      	ldr	r2, [r2, #12]
 80066e0:	0a12      	lsrs	r2, r2, #8
 80066e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80066e6:	fb02 f303 	mul.w	r3, r2, r3
 80066ea:	617b      	str	r3, [r7, #20]
    break;
 80066ec:	e00c      	b.n	8006708 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066ee:	4a11      	ldr	r2, [pc, #68]	; (8006734 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f6:	4a0e      	ldr	r2, [pc, #56]	; (8006730 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80066f8:	68d2      	ldr	r2, [r2, #12]
 80066fa:	0a12      	lsrs	r2, r2, #8
 80066fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006700:	fb02 f303 	mul.w	r3, r2, r3
 8006704:	617b      	str	r3, [r7, #20]
    break;
 8006706:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006708:	4b09      	ldr	r3, [pc, #36]	; (8006730 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	0e5b      	lsrs	r3, r3, #25
 800670e:	f003 0303 	and.w	r3, r3, #3
 8006712:	3301      	adds	r3, #1
 8006714:	005b      	lsls	r3, r3, #1
 8006716:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006720:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006722:	687b      	ldr	r3, [r7, #4]
}
 8006724:	4618      	mov	r0, r3
 8006726:	371c      	adds	r7, #28
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	40021000 	.word	0x40021000
 8006734:	00f42400 	.word	0x00f42400

08006738 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006740:	2300      	movs	r3, #0
 8006742:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006744:	2300      	movs	r3, #0
 8006746:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 8098 	beq.w	8006886 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006756:	2300      	movs	r3, #0
 8006758:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800675a:	4b43      	ldr	r3, [pc, #268]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800675c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800675e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10d      	bne.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006766:	4b40      	ldr	r3, [pc, #256]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800676a:	4a3f      	ldr	r2, [pc, #252]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800676c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006770:	6593      	str	r3, [r2, #88]	; 0x58
 8006772:	4b3d      	ldr	r3, [pc, #244]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800677a:	60bb      	str	r3, [r7, #8]
 800677c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800677e:	2301      	movs	r3, #1
 8006780:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006782:	4b3a      	ldr	r3, [pc, #232]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a39      	ldr	r2, [pc, #228]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800678c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800678e:	f7fb f99d 	bl	8001acc <HAL_GetTick>
 8006792:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006794:	e009      	b.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006796:	f7fb f999 	bl	8001acc <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d902      	bls.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	74fb      	strb	r3, [r7, #19]
        break;
 80067a8:	e005      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067aa:	4b30      	ldr	r3, [pc, #192]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d0ef      	beq.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80067b6:	7cfb      	ldrb	r3, [r7, #19]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d159      	bne.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80067bc:	4b2a      	ldr	r3, [pc, #168]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067c6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d01e      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d019      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80067d8:	4b23      	ldr	r3, [pc, #140]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80067e4:	4b20      	ldr	r3, [pc, #128]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ea:	4a1f      	ldr	r2, [pc, #124]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80067f4:	4b1c      	ldr	r3, [pc, #112]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067fa:	4a1b      	ldr	r2, [pc, #108]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006800:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006804:	4a18      	ldr	r2, [pc, #96]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b00      	cmp	r3, #0
 8006814:	d016      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006816:	f7fb f959 	bl	8001acc <HAL_GetTick>
 800681a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800681c:	e00b      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800681e:	f7fb f955 	bl	8001acc <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	f241 3288 	movw	r2, #5000	; 0x1388
 800682c:	4293      	cmp	r3, r2
 800682e:	d902      	bls.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	74fb      	strb	r3, [r7, #19]
            break;
 8006834:	e006      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006836:	4b0c      	ldr	r3, [pc, #48]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d0ec      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006844:	7cfb      	ldrb	r3, [r7, #19]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10b      	bne.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800684a:	4b07      	ldr	r3, [pc, #28]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800684c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006850:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006858:	4903      	ldr	r1, [pc, #12]	; (8006868 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800685a:	4313      	orrs	r3, r2
 800685c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006860:	e008      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006862:	7cfb      	ldrb	r3, [r7, #19]
 8006864:	74bb      	strb	r3, [r7, #18]
 8006866:	e005      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006868:	40021000 	.word	0x40021000
 800686c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006870:	7cfb      	ldrb	r3, [r7, #19]
 8006872:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006874:	7c7b      	ldrb	r3, [r7, #17]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d105      	bne.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800687a:	4ba7      	ldr	r3, [pc, #668]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800687c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800687e:	4aa6      	ldr	r2, [pc, #664]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006884:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0301 	and.w	r3, r3, #1
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00a      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006892:	4ba1      	ldr	r3, [pc, #644]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006898:	f023 0203 	bic.w	r2, r3, #3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	499d      	ldr	r1, [pc, #628]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068a2:	4313      	orrs	r3, r2
 80068a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00a      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80068b4:	4b98      	ldr	r3, [pc, #608]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ba:	f023 020c 	bic.w	r2, r3, #12
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	4995      	ldr	r1, [pc, #596]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068c4:	4313      	orrs	r3, r2
 80068c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0304 	and.w	r3, r3, #4
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00a      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80068d6:	4b90      	ldr	r3, [pc, #576]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	498c      	ldr	r1, [pc, #560]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068e6:	4313      	orrs	r3, r2
 80068e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0308 	and.w	r3, r3, #8
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00a      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80068f8:	4b87      	ldr	r3, [pc, #540]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	4984      	ldr	r1, [pc, #528]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006908:	4313      	orrs	r3, r2
 800690a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0310 	and.w	r3, r3, #16
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00a      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800691a:	4b7f      	ldr	r3, [pc, #508]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800691c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006920:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	497b      	ldr	r1, [pc, #492]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800692a:	4313      	orrs	r3, r2
 800692c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 0320 	and.w	r3, r3, #32
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00a      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800693c:	4b76      	ldr	r3, [pc, #472]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800693e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006942:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	4973      	ldr	r1, [pc, #460]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800694c:	4313      	orrs	r3, r2
 800694e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00a      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800695e:	4b6e      	ldr	r3, [pc, #440]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006964:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	69db      	ldr	r3, [r3, #28]
 800696c:	496a      	ldr	r1, [pc, #424]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800696e:	4313      	orrs	r3, r2
 8006970:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00a      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006980:	4b65      	ldr	r3, [pc, #404]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006986:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a1b      	ldr	r3, [r3, #32]
 800698e:	4962      	ldr	r1, [pc, #392]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006990:	4313      	orrs	r3, r2
 8006992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00a      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80069a2:	4b5d      	ldr	r3, [pc, #372]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b0:	4959      	ldr	r1, [pc, #356]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069b2:	4313      	orrs	r3, r2
 80069b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00a      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80069c4:	4b54      	ldr	r3, [pc, #336]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069ca:	f023 0203 	bic.w	r2, r3, #3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d2:	4951      	ldr	r1, [pc, #324]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00a      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80069e6:	4b4c      	ldr	r3, [pc, #304]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f4:	4948      	ldr	r1, [pc, #288]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d015      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a08:	4b43      	ldr	r3, [pc, #268]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a16:	4940      	ldr	r1, [pc, #256]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a26:	d105      	bne.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a28:	4b3b      	ldr	r3, [pc, #236]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	4a3a      	ldr	r2, [pc, #232]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a32:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d015      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006a40:	4b35      	ldr	r3, [pc, #212]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a4e:	4932      	ldr	r1, [pc, #200]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a50:	4313      	orrs	r3, r2
 8006a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a5e:	d105      	bne.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a60:	4b2d      	ldr	r3, [pc, #180]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	4a2c      	ldr	r2, [pc, #176]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a6a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d015      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006a78:	4b27      	ldr	r3, [pc, #156]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a7e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a86:	4924      	ldr	r1, [pc, #144]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a96:	d105      	bne.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a98:	4b1f      	ldr	r3, [pc, #124]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	4a1e      	ldr	r2, [pc, #120]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006aa2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d015      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ab0:	4b19      	ldr	r3, [pc, #100]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006abe:	4916      	ldr	r1, [pc, #88]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ace:	d105      	bne.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ad0:	4b11      	ldr	r3, [pc, #68]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	4a10      	ldr	r2, [pc, #64]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ad6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ada:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d019      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ae8:	4b0b      	ldr	r3, [pc, #44]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af6:	4908      	ldr	r1, [pc, #32]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b06:	d109      	bne.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b08:	4b03      	ldr	r3, [pc, #12]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	4a02      	ldr	r2, [pc, #8]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b12:	60d3      	str	r3, [r2, #12]
 8006b14:	e002      	b.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006b16:	bf00      	nop
 8006b18:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d015      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006b28:	4b29      	ldr	r3, [pc, #164]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b36:	4926      	ldr	r1, [pc, #152]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b46:	d105      	bne.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006b48:	4b21      	ldr	r3, [pc, #132]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	4a20      	ldr	r2, [pc, #128]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b52:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d015      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006b60:	4b1b      	ldr	r3, [pc, #108]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b66:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b6e:	4918      	ldr	r1, [pc, #96]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b70:	4313      	orrs	r3, r2
 8006b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b7e:	d105      	bne.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006b80:	4b13      	ldr	r3, [pc, #76]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	4a12      	ldr	r2, [pc, #72]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b8a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d015      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006b98:	4b0d      	ldr	r3, [pc, #52]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ba6:	490a      	ldr	r1, [pc, #40]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bb6:	d105      	bne.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bb8:	4b05      	ldr	r3, [pc, #20]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	4a04      	ldr	r2, [pc, #16]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006bbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bc2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006bc4:	7cbb      	ldrb	r3, [r7, #18]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3718      	adds	r7, #24
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	40021000 	.word	0x40021000

08006bd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d101      	bne.n	8006be6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e09d      	b.n	8006d22 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d108      	bne.n	8006c00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bf6:	d009      	beq.n	8006c0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	61da      	str	r2, [r3, #28]
 8006bfe:	e005      	b.n	8006c0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d106      	bne.n	8006c2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f7fa fd2c 	bl	8001684 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c4c:	d902      	bls.n	8006c54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	60fb      	str	r3, [r7, #12]
 8006c52:	e002      	b.n	8006c5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006c54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006c62:	d007      	beq.n	8006c74 <HAL_SPI_Init+0xa0>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c6c:	d002      	beq.n	8006c74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006c84:	431a      	orrs	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	f003 0302 	and.w	r3, r3, #2
 8006c8e:	431a      	orrs	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	695b      	ldr	r3, [r3, #20]
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	431a      	orrs	r2, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ca2:	431a      	orrs	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	69db      	ldr	r3, [r3, #28]
 8006ca8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cac:	431a      	orrs	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb6:	ea42 0103 	orr.w	r1, r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cbe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	0c1b      	lsrs	r3, r3, #16
 8006cd0:	f003 0204 	and.w	r2, r3, #4
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd8:	f003 0310 	and.w	r3, r3, #16
 8006cdc:	431a      	orrs	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce2:	f003 0308 	and.w	r3, r3, #8
 8006ce6:	431a      	orrs	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006cf0:	ea42 0103 	orr.w	r1, r2, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	69da      	ldr	r2, [r3, #28]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b088      	sub	sp, #32
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	60f8      	str	r0, [r7, #12]
 8006d32:	60b9      	str	r1, [r7, #8]
 8006d34:	603b      	str	r3, [r7, #0]
 8006d36:	4613      	mov	r3, r2
 8006d38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d101      	bne.n	8006d4c <HAL_SPI_Transmit+0x22>
 8006d48:	2302      	movs	r3, #2
 8006d4a:	e158      	b.n	8006ffe <HAL_SPI_Transmit+0x2d4>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d54:	f7fa feba 	bl	8001acc <HAL_GetTick>
 8006d58:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006d5a:	88fb      	ldrh	r3, [r7, #6]
 8006d5c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d002      	beq.n	8006d70 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d6e:	e13d      	b.n	8006fec <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d002      	beq.n	8006d7c <HAL_SPI_Transmit+0x52>
 8006d76:	88fb      	ldrh	r3, [r7, #6]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d102      	bne.n	8006d82 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d80:	e134      	b.n	8006fec <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2203      	movs	r2, #3
 8006d86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	68ba      	ldr	r2, [r7, #8]
 8006d94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	88fa      	ldrh	r2, [r7, #6]
 8006d9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	88fa      	ldrh	r2, [r7, #6]
 8006da0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dcc:	d10f      	bne.n	8006dee <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ddc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006dec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df8:	2b40      	cmp	r3, #64	; 0x40
 8006dfa:	d007      	beq.n	8006e0c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e14:	d94b      	bls.n	8006eae <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d002      	beq.n	8006e24 <HAL_SPI_Transmit+0xfa>
 8006e1e:	8afb      	ldrh	r3, [r7, #22]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d13e      	bne.n	8006ea2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e28:	881a      	ldrh	r2, [r3, #0]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e34:	1c9a      	adds	r2, r3, #2
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	3b01      	subs	r3, #1
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e48:	e02b      	b.n	8006ea2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f003 0302 	and.w	r3, r3, #2
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d112      	bne.n	8006e7e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5c:	881a      	ldrh	r2, [r3, #0]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e68:	1c9a      	adds	r2, r3, #2
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	3b01      	subs	r3, #1
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e7c:	e011      	b.n	8006ea2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e7e:	f7fa fe25 	bl	8001acc <HAL_GetTick>
 8006e82:	4602      	mov	r2, r0
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	683a      	ldr	r2, [r7, #0]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d803      	bhi.n	8006e96 <HAL_SPI_Transmit+0x16c>
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e94:	d102      	bne.n	8006e9c <HAL_SPI_Transmit+0x172>
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d102      	bne.n	8006ea2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006ea0:	e0a4      	b.n	8006fec <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1ce      	bne.n	8006e4a <HAL_SPI_Transmit+0x120>
 8006eac:	e07c      	b.n	8006fa8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d002      	beq.n	8006ebc <HAL_SPI_Transmit+0x192>
 8006eb6:	8afb      	ldrh	r3, [r7, #22]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d170      	bne.n	8006f9e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d912      	bls.n	8006eec <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eca:	881a      	ldrh	r2, [r3, #0]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed6:	1c9a      	adds	r2, r3, #2
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	3b02      	subs	r3, #2
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006eea:	e058      	b.n	8006f9e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	330c      	adds	r3, #12
 8006ef6:	7812      	ldrb	r2, [r2, #0]
 8006ef8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efe:	1c5a      	adds	r2, r3, #1
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006f12:	e044      	b.n	8006f9e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f003 0302 	and.w	r3, r3, #2
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d12b      	bne.n	8006f7a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d912      	bls.n	8006f52 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f30:	881a      	ldrh	r2, [r3, #0]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3c:	1c9a      	adds	r2, r3, #2
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	3b02      	subs	r3, #2
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f50:	e025      	b.n	8006f9e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	330c      	adds	r3, #12
 8006f5c:	7812      	ldrb	r2, [r2, #0]
 8006f5e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f64:	1c5a      	adds	r2, r3, #1
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	3b01      	subs	r3, #1
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f78:	e011      	b.n	8006f9e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f7a:	f7fa fda7 	bl	8001acc <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	683a      	ldr	r2, [r7, #0]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d803      	bhi.n	8006f92 <HAL_SPI_Transmit+0x268>
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f90:	d102      	bne.n	8006f98 <HAL_SPI_Transmit+0x26e>
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d102      	bne.n	8006f9e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006f9c:	e026      	b.n	8006fec <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1b5      	bne.n	8006f14 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fa8:	69ba      	ldr	r2, [r7, #24]
 8006faa:	6839      	ldr	r1, [r7, #0]
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f000 fd4d 	bl	8007a4c <SPI_EndRxTxTransaction>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d002      	beq.n	8006fbe <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2220      	movs	r2, #32
 8006fbc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10a      	bne.n	8006fdc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	613b      	str	r3, [r7, #16]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	613b      	str	r3, [r7, #16]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	613b      	str	r3, [r7, #16]
 8006fda:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d002      	beq.n	8006fea <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	77fb      	strb	r3, [r7, #31]
 8006fe8:	e000      	b.n	8006fec <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006fea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006ffc:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3720      	adds	r7, #32
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
	...

08007008 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]
 8007014:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007016:	2300      	movs	r3, #0
 8007018:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007020:	2b01      	cmp	r3, #1
 8007022:	d101      	bne.n	8007028 <HAL_SPI_TransmitReceive_DMA+0x20>
 8007024:	2302      	movs	r3, #2
 8007026:	e16c      	b.n	8007302 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007036:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800703e:	7dbb      	ldrb	r3, [r7, #22]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d00d      	beq.n	8007060 <HAL_SPI_TransmitReceive_DMA+0x58>
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800704a:	d106      	bne.n	800705a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d102      	bne.n	800705a <HAL_SPI_TransmitReceive_DMA+0x52>
 8007054:	7dbb      	ldrb	r3, [r7, #22]
 8007056:	2b04      	cmp	r3, #4
 8007058:	d002      	beq.n	8007060 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800705a:	2302      	movs	r3, #2
 800705c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800705e:	e14b      	b.n	80072f8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d005      	beq.n	8007072 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d002      	beq.n	8007072 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800706c:	887b      	ldrh	r3, [r7, #2]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d102      	bne.n	8007078 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007076:	e13f      	b.n	80072f8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800707e:	b2db      	uxtb	r3, r3
 8007080:	2b04      	cmp	r3, #4
 8007082:	d003      	beq.n	800708c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2205      	movs	r2, #5
 8007088:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2200      	movs	r2, #0
 8007090:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	68ba      	ldr	r2, [r7, #8]
 8007096:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	887a      	ldrh	r2, [r7, #2]
 800709c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	887a      	ldrh	r2, [r7, #2]
 80070a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	887a      	ldrh	r2, [r7, #2]
 80070ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	887a      	ldrh	r2, [r7, #2]
 80070b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	685a      	ldr	r2, [r3, #4]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80070d4:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070de:	d908      	bls.n	80070f2 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	685a      	ldr	r2, [r3, #4]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80070ee:	605a      	str	r2, [r3, #4]
 80070f0:	e06f      	b.n	80071d2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	685a      	ldr	r2, [r3, #4]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007100:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800710c:	d126      	bne.n	800715c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10f      	bne.n	800713a <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	685a      	ldr	r2, [r3, #4]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007128:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800712e:	b29b      	uxth	r3, r3
 8007130:	085b      	lsrs	r3, r3, #1
 8007132:	b29a      	uxth	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007138:	e010      	b.n	800715c <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	685a      	ldr	r2, [r3, #4]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007148:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800714e:	b29b      	uxth	r3, r3
 8007150:	085b      	lsrs	r3, r3, #1
 8007152:	b29b      	uxth	r3, r3
 8007154:	3301      	adds	r3, #1
 8007156:	b29a      	uxth	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007166:	d134      	bne.n	80071d2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	685a      	ldr	r2, [r3, #4]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007176:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800717e:	b29b      	uxth	r3, r3
 8007180:	f003 0301 	and.w	r3, r3, #1
 8007184:	2b00      	cmp	r3, #0
 8007186:	d111      	bne.n	80071ac <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007196:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800719e:	b29b      	uxth	r3, r3
 80071a0:	085b      	lsrs	r3, r3, #1
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80071aa:	e012      	b.n	80071d2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685a      	ldr	r2, [r3, #4]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071ba:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	085b      	lsrs	r3, r3, #1
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	3301      	adds	r3, #1
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b04      	cmp	r3, #4
 80071dc:	d108      	bne.n	80071f0 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071e2:	4a4a      	ldr	r2, [pc, #296]	; (800730c <HAL_SPI_TransmitReceive_DMA+0x304>)
 80071e4:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ea:	4a49      	ldr	r2, [pc, #292]	; (8007310 <HAL_SPI_TransmitReceive_DMA+0x308>)
 80071ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80071ee:	e007      	b.n	8007200 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071f4:	4a47      	ldr	r2, [pc, #284]	; (8007314 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 80071f6:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071fc:	4a46      	ldr	r2, [pc, #280]	; (8007318 <HAL_SPI_TransmitReceive_DMA+0x310>)
 80071fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007204:	4a45      	ldr	r2, [pc, #276]	; (800731c <HAL_SPI_TransmitReceive_DMA+0x314>)
 8007206:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800720c:	2200      	movs	r2, #0
 800720e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	330c      	adds	r3, #12
 800721a:	4619      	mov	r1, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007220:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007228:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800722a:	f7fc fb63 	bl	80038f4 <HAL_DMA_Start_IT>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00c      	beq.n	800724e <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007238:	f043 0210 	orr.w	r2, r3, #16
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800724c:	e054      	b.n	80072f8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	685a      	ldr	r2, [r3, #4]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f042 0201 	orr.w	r2, r2, #1
 800725c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007262:	2200      	movs	r2, #0
 8007264:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800726a:	2200      	movs	r2, #0
 800726c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007272:	2200      	movs	r2, #0
 8007274:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800727a:	2200      	movs	r2, #0
 800727c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007286:	4619      	mov	r1, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	330c      	adds	r3, #12
 800728e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007294:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007296:	f7fc fb2d 	bl	80038f4 <HAL_DMA_Start_IT>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00c      	beq.n	80072ba <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072a4:	f043 0210 	orr.w	r2, r3, #16
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80072b8:	e01e      	b.n	80072f8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c4:	2b40      	cmp	r3, #64	; 0x40
 80072c6:	d007      	beq.n	80072d8 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072d6:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	685a      	ldr	r2, [r3, #4]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f042 0220 	orr.w	r2, r2, #32
 80072e6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	685a      	ldr	r2, [r3, #4]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f042 0202 	orr.w	r2, r2, #2
 80072f6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007300:	7dfb      	ldrb	r3, [r7, #23]
}
 8007302:	4618      	mov	r0, r3
 8007304:	3718      	adds	r7, #24
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	080076bd 	.word	0x080076bd
 8007310:	08007585 	.word	0x08007585
 8007314:	080076d9 	.word	0x080076d9
 8007318:	0800762d 	.word	0x0800762d
 800731c:	080076f5 	.word	0x080076f5

08007320 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b088      	sub	sp, #32
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	099b      	lsrs	r3, r3, #6
 800733c:	f003 0301 	and.w	r3, r3, #1
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10f      	bne.n	8007364 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00a      	beq.n	8007364 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	099b      	lsrs	r3, r3, #6
 8007352:	f003 0301 	and.w	r3, r3, #1
 8007356:	2b00      	cmp	r3, #0
 8007358:	d004      	beq.n	8007364 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	4798      	blx	r3
    return;
 8007362:	e0d7      	b.n	8007514 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	085b      	lsrs	r3, r3, #1
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00a      	beq.n	8007386 <HAL_SPI_IRQHandler+0x66>
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	09db      	lsrs	r3, r3, #7
 8007374:	f003 0301 	and.w	r3, r3, #1
 8007378:	2b00      	cmp	r3, #0
 800737a:	d004      	beq.n	8007386 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	4798      	blx	r3
    return;
 8007384:	e0c6      	b.n	8007514 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	095b      	lsrs	r3, r3, #5
 800738a:	f003 0301 	and.w	r3, r3, #1
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10c      	bne.n	80073ac <HAL_SPI_IRQHandler+0x8c>
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	099b      	lsrs	r3, r3, #6
 8007396:	f003 0301 	and.w	r3, r3, #1
 800739a:	2b00      	cmp	r3, #0
 800739c:	d106      	bne.n	80073ac <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	0a1b      	lsrs	r3, r3, #8
 80073a2:	f003 0301 	and.w	r3, r3, #1
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f000 80b4 	beq.w	8007514 <HAL_SPI_IRQHandler+0x1f4>
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	095b      	lsrs	r3, r3, #5
 80073b0:	f003 0301 	and.w	r3, r3, #1
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f000 80ad 	beq.w	8007514 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	099b      	lsrs	r3, r3, #6
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d023      	beq.n	800740e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b03      	cmp	r3, #3
 80073d0:	d011      	beq.n	80073f6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073d6:	f043 0204 	orr.w	r2, r3, #4
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073de:	2300      	movs	r3, #0
 80073e0:	617b      	str	r3, [r7, #20]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	617b      	str	r3, [r7, #20]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	617b      	str	r3, [r7, #20]
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	e00b      	b.n	800740e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073f6:	2300      	movs	r3, #0
 80073f8:	613b      	str	r3, [r7, #16]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	613b      	str	r3, [r7, #16]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	613b      	str	r3, [r7, #16]
 800740a:	693b      	ldr	r3, [r7, #16]
        return;
 800740c:	e082      	b.n	8007514 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	095b      	lsrs	r3, r3, #5
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	2b00      	cmp	r3, #0
 8007418:	d014      	beq.n	8007444 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800741e:	f043 0201 	orr.w	r2, r3, #1
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007426:	2300      	movs	r3, #0
 8007428:	60fb      	str	r3, [r7, #12]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	60fb      	str	r3, [r7, #12]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007440:	601a      	str	r2, [r3, #0]
 8007442:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	0a1b      	lsrs	r3, r3, #8
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00c      	beq.n	800746a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007454:	f043 0208 	orr.w	r2, r3, #8
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800745c:	2300      	movs	r3, #0
 800745e:	60bb      	str	r3, [r7, #8]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	60bb      	str	r3, [r7, #8]
 8007468:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800746e:	2b00      	cmp	r3, #0
 8007470:	d04f      	beq.n	8007512 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007480:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	f003 0302 	and.w	r3, r3, #2
 8007490:	2b00      	cmp	r3, #0
 8007492:	d104      	bne.n	800749e <HAL_SPI_IRQHandler+0x17e>
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	f003 0301 	and.w	r3, r3, #1
 800749a:	2b00      	cmp	r3, #0
 800749c:	d034      	beq.n	8007508 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	685a      	ldr	r2, [r3, #4]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f022 0203 	bic.w	r2, r2, #3
 80074ac:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d011      	beq.n	80074da <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ba:	4a18      	ldr	r2, [pc, #96]	; (800751c <HAL_SPI_IRQHandler+0x1fc>)
 80074bc:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7fc faea 	bl	8003a9c <HAL_DMA_Abort_IT>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d005      	beq.n	80074da <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d016      	beq.n	8007510 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e6:	4a0d      	ldr	r2, [pc, #52]	; (800751c <HAL_SPI_IRQHandler+0x1fc>)
 80074e8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fc fad4 	bl	8003a9c <HAL_DMA_Abort_IT>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00a      	beq.n	8007510 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007506:	e003      	b.n	8007510 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 f831 	bl	8007570 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800750e:	e000      	b.n	8007512 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007510:	bf00      	nop
    return;
 8007512:	bf00      	nop
  }
}
 8007514:	3720      	adds	r7, #32
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	08007735 	.word	0x08007735

08007520 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007550:	bf00      	nop
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007564:	bf00      	nop
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007578:	bf00      	nop
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007590:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007592:	f7fa fa9b 	bl	8001acc <HAL_GetTick>
 8007596:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 0320 	and.w	r3, r3, #32
 80075a2:	2b20      	cmp	r3, #32
 80075a4:	d03c      	beq.n	8007620 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	685a      	ldr	r2, [r3, #4]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f022 0220 	bic.w	r2, r2, #32
 80075b4:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10d      	bne.n	80075da <SPI_DMAReceiveCplt+0x56>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075c6:	d108      	bne.n	80075da <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	685a      	ldr	r2, [r3, #4]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f022 0203 	bic.w	r2, r2, #3
 80075d6:	605a      	str	r2, [r3, #4]
 80075d8:	e007      	b.n	80075ea <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f022 0201 	bic.w	r2, r2, #1
 80075e8:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	2164      	movs	r1, #100	; 0x64
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f000 f9d4 	bl	800799c <SPI_EndRxTransaction>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d002      	beq.n	8007600 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2220      	movs	r2, #32
 80075fe:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007614:	2b00      	cmp	r3, #0
 8007616:	d003      	beq.n	8007620 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f7ff ffa9 	bl	8007570 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800761e:	e002      	b.n	8007626 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f7ff ff7d 	bl	8007520 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007626:	3710      	adds	r7, #16
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007638:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800763a:	f7fa fa47 	bl	8001acc <HAL_GetTick>
 800763e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0320 	and.w	r3, r3, #32
 800764a:	2b20      	cmp	r3, #32
 800764c:	d030      	beq.n	80076b0 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	685a      	ldr	r2, [r3, #4]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f022 0220 	bic.w	r2, r2, #32
 800765c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	2164      	movs	r1, #100	; 0x64
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f000 f9f2 	bl	8007a4c <SPI_EndRxTxTransaction>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d005      	beq.n	800767a <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007672:	f043 0220 	orr.w	r2, r3, #32
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	685a      	ldr	r2, [r3, #4]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f022 0203 	bic.w	r2, r2, #3
 8007688:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d003      	beq.n	80076b0 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f7ff ff61 	bl	8007570 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80076ae:	e002      	b.n	80076b6 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f7ff ff3f 	bl	8007534 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f7ff ff3c 	bl	8007548 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80076d0:	bf00      	nop
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	f7ff ff38 	bl	800755c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80076ec:	bf00      	nop
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007700:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	685a      	ldr	r2, [r3, #4]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f022 0203 	bic.w	r2, r2, #3
 8007710:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007716:	f043 0210 	orr.w	r2, r3, #16
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2201      	movs	r2, #1
 8007722:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f7ff ff22 	bl	8007570 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800772c:	bf00      	nop
 800772e:	3710      	adds	r7, #16
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007740:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f7ff ff0d 	bl	8007570 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007756:	bf00      	nop
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
	...

08007760 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b088      	sub	sp, #32
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	603b      	str	r3, [r7, #0]
 800776c:	4613      	mov	r3, r2
 800776e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007770:	f7fa f9ac 	bl	8001acc <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007778:	1a9b      	subs	r3, r3, r2
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	4413      	add	r3, r2
 800777e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007780:	f7fa f9a4 	bl	8001acc <HAL_GetTick>
 8007784:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007786:	4b39      	ldr	r3, [pc, #228]	; (800786c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	015b      	lsls	r3, r3, #5
 800778c:	0d1b      	lsrs	r3, r3, #20
 800778e:	69fa      	ldr	r2, [r7, #28]
 8007790:	fb02 f303 	mul.w	r3, r2, r3
 8007794:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007796:	e054      	b.n	8007842 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800779e:	d050      	beq.n	8007842 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80077a0:	f7fa f994 	bl	8001acc <HAL_GetTick>
 80077a4:	4602      	mov	r2, r0
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	69fa      	ldr	r2, [r7, #28]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d902      	bls.n	80077b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d13d      	bne.n	8007832 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	685a      	ldr	r2, [r3, #4]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80077c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077ce:	d111      	bne.n	80077f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077d8:	d004      	beq.n	80077e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077e2:	d107      	bne.n	80077f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077fc:	d10f      	bne.n	800781e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800780c:	601a      	str	r2, [r3, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800781c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	e017      	b.n	8007862 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d101      	bne.n	800783c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007838:	2300      	movs	r3, #0
 800783a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	3b01      	subs	r3, #1
 8007840:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	689a      	ldr	r2, [r3, #8]
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	4013      	ands	r3, r2
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	429a      	cmp	r2, r3
 8007850:	bf0c      	ite	eq
 8007852:	2301      	moveq	r3, #1
 8007854:	2300      	movne	r3, #0
 8007856:	b2db      	uxtb	r3, r3
 8007858:	461a      	mov	r2, r3
 800785a:	79fb      	ldrb	r3, [r7, #7]
 800785c:	429a      	cmp	r2, r3
 800785e:	d19b      	bne.n	8007798 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3720      	adds	r7, #32
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	200026d4 	.word	0x200026d4

08007870 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b08a      	sub	sp, #40	; 0x28
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	607a      	str	r2, [r7, #4]
 800787c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800787e:	2300      	movs	r3, #0
 8007880:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007882:	f7fa f923 	bl	8001acc <HAL_GetTick>
 8007886:	4602      	mov	r2, r0
 8007888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788a:	1a9b      	subs	r3, r3, r2
 800788c:	683a      	ldr	r2, [r7, #0]
 800788e:	4413      	add	r3, r2
 8007890:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007892:	f7fa f91b 	bl	8001acc <HAL_GetTick>
 8007896:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	330c      	adds	r3, #12
 800789e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80078a0:	4b3d      	ldr	r3, [pc, #244]	; (8007998 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	4613      	mov	r3, r2
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	4413      	add	r3, r2
 80078aa:	00da      	lsls	r2, r3, #3
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	0d1b      	lsrs	r3, r3, #20
 80078b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078b2:	fb02 f303 	mul.w	r3, r2, r3
 80078b6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80078b8:	e060      	b.n	800797c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80078c0:	d107      	bne.n	80078d2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d104      	bne.n	80078d2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80078d0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078d8:	d050      	beq.n	800797c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80078da:	f7fa f8f7 	bl	8001acc <HAL_GetTick>
 80078de:	4602      	mov	r2, r0
 80078e0:	6a3b      	ldr	r3, [r7, #32]
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d902      	bls.n	80078f0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80078ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d13d      	bne.n	800796c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	685a      	ldr	r2, [r3, #4]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80078fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007908:	d111      	bne.n	800792e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007912:	d004      	beq.n	800791e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800791c:	d107      	bne.n	800792e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800792c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007936:	d10f      	bne.n	8007958 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007946:	601a      	str	r2, [r3, #0]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007956:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007968:	2303      	movs	r3, #3
 800796a:	e010      	b.n	800798e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d101      	bne.n	8007976 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007972:	2300      	movs	r3, #0
 8007974:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	3b01      	subs	r3, #1
 800797a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	689a      	ldr	r2, [r3, #8]
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	4013      	ands	r3, r2
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	429a      	cmp	r2, r3
 800798a:	d196      	bne.n	80078ba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3728      	adds	r7, #40	; 0x28
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	200026d4 	.word	0x200026d4

0800799c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af02      	add	r7, sp, #8
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079b0:	d111      	bne.n	80079d6 <SPI_EndRxTransaction+0x3a>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079ba:	d004      	beq.n	80079c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079c4:	d107      	bne.n	80079d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079d4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	9300      	str	r3, [sp, #0]
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	2200      	movs	r2, #0
 80079de:	2180      	movs	r1, #128	; 0x80
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f7ff febd 	bl	8007760 <SPI_WaitFlagStateUntilTimeout>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d007      	beq.n	80079fc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079f0:	f043 0220 	orr.w	r2, r3, #32
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80079f8:	2303      	movs	r3, #3
 80079fa:	e023      	b.n	8007a44 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a04:	d11d      	bne.n	8007a42 <SPI_EndRxTransaction+0xa6>
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a0e:	d004      	beq.n	8007a1a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a18:	d113      	bne.n	8007a42 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f7ff ff22 	bl	8007870 <SPI_WaitFifoStateUntilTimeout>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d007      	beq.n	8007a42 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a36:	f043 0220 	orr.w	r2, r3, #32
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	e000      	b.n	8007a44 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af02      	add	r7, sp, #8
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	9300      	str	r3, [sp, #0]
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f7ff ff03 	bl	8007870 <SPI_WaitFifoStateUntilTimeout>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d007      	beq.n	8007a80 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a74:	f043 0220 	orr.w	r2, r3, #32
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e027      	b.n	8007ad0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	2200      	movs	r2, #0
 8007a88:	2180      	movs	r1, #128	; 0x80
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f7ff fe68 	bl	8007760 <SPI_WaitFlagStateUntilTimeout>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d007      	beq.n	8007aa6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a9a:	f043 0220 	orr.w	r2, r3, #32
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e014      	b.n	8007ad0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f7ff fedc 	bl	8007870 <SPI_WaitFifoStateUntilTimeout>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d007      	beq.n	8007ace <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ac2:	f043 0220 	orr.w	r2, r3, #32
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e000      	b.n	8007ad0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d101      	bne.n	8007aea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e049      	b.n	8007b7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d106      	bne.n	8007b04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7f9 fe0a 	bl	8001718 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2202      	movs	r2, #2
 8007b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	3304      	adds	r3, #4
 8007b14:	4619      	mov	r1, r3
 8007b16:	4610      	mov	r0, r2
 8007b18:	f000 f9da 	bl	8007ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3708      	adds	r7, #8
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
	...

08007b88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d001      	beq.n	8007ba0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e04c      	b.n	8007c3a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a26      	ldr	r2, [pc, #152]	; (8007c48 <HAL_TIM_Base_Start+0xc0>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d022      	beq.n	8007bf8 <HAL_TIM_Base_Start+0x70>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bba:	d01d      	beq.n	8007bf8 <HAL_TIM_Base_Start+0x70>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a22      	ldr	r2, [pc, #136]	; (8007c4c <HAL_TIM_Base_Start+0xc4>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d018      	beq.n	8007bf8 <HAL_TIM_Base_Start+0x70>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a21      	ldr	r2, [pc, #132]	; (8007c50 <HAL_TIM_Base_Start+0xc8>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d013      	beq.n	8007bf8 <HAL_TIM_Base_Start+0x70>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a1f      	ldr	r2, [pc, #124]	; (8007c54 <HAL_TIM_Base_Start+0xcc>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d00e      	beq.n	8007bf8 <HAL_TIM_Base_Start+0x70>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a1e      	ldr	r2, [pc, #120]	; (8007c58 <HAL_TIM_Base_Start+0xd0>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d009      	beq.n	8007bf8 <HAL_TIM_Base_Start+0x70>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a1c      	ldr	r2, [pc, #112]	; (8007c5c <HAL_TIM_Base_Start+0xd4>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d004      	beq.n	8007bf8 <HAL_TIM_Base_Start+0x70>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a1b      	ldr	r2, [pc, #108]	; (8007c60 <HAL_TIM_Base_Start+0xd8>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d115      	bne.n	8007c24 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	689a      	ldr	r2, [r3, #8]
 8007bfe:	4b19      	ldr	r3, [pc, #100]	; (8007c64 <HAL_TIM_Base_Start+0xdc>)
 8007c00:	4013      	ands	r3, r2
 8007c02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2b06      	cmp	r3, #6
 8007c08:	d015      	beq.n	8007c36 <HAL_TIM_Base_Start+0xae>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c10:	d011      	beq.n	8007c36 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f042 0201 	orr.w	r2, r2, #1
 8007c20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c22:	e008      	b.n	8007c36 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f042 0201 	orr.w	r2, r2, #1
 8007c32:	601a      	str	r2, [r3, #0]
 8007c34:	e000      	b.n	8007c38 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3714      	adds	r7, #20
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	40012c00 	.word	0x40012c00
 8007c4c:	40000400 	.word	0x40000400
 8007c50:	40000800 	.word	0x40000800
 8007c54:	40000c00 	.word	0x40000c00
 8007c58:	40013400 	.word	0x40013400
 8007c5c:	40014000 	.word	0x40014000
 8007c60:	40015000 	.word	0x40015000
 8007c64:	00010007 	.word	0x00010007

08007c68 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	6a1a      	ldr	r2, [r3, #32]
 8007c76:	f241 1311 	movw	r3, #4369	; 0x1111
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10f      	bne.n	8007ca0 <HAL_TIM_Base_Stop+0x38>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	6a1a      	ldr	r2, [r3, #32]
 8007c86:	f244 4344 	movw	r3, #17476	; 0x4444
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d107      	bne.n	8007ca0 <HAL_TIM_Base_Stop+0x38>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f022 0201 	bic.w	r2, r2, #1
 8007c9e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	370c      	adds	r7, #12
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
	...

08007cb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d101      	bne.n	8007cd4 <HAL_TIM_ConfigClockSource+0x1c>
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	e0ee      	b.n	8007eb2 <HAL_TIM_ConfigClockSource+0x1fa>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2202      	movs	r2, #2
 8007ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007cf2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007cf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a6b      	ldr	r2, [pc, #428]	; (8007ebc <HAL_TIM_ConfigClockSource+0x204>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	f000 80b9 	beq.w	8007e86 <HAL_TIM_ConfigClockSource+0x1ce>
 8007d14:	4a69      	ldr	r2, [pc, #420]	; (8007ebc <HAL_TIM_ConfigClockSource+0x204>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	f200 80be 	bhi.w	8007e98 <HAL_TIM_ConfigClockSource+0x1e0>
 8007d1c:	4a68      	ldr	r2, [pc, #416]	; (8007ec0 <HAL_TIM_ConfigClockSource+0x208>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	f000 80b1 	beq.w	8007e86 <HAL_TIM_ConfigClockSource+0x1ce>
 8007d24:	4a66      	ldr	r2, [pc, #408]	; (8007ec0 <HAL_TIM_ConfigClockSource+0x208>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	f200 80b6 	bhi.w	8007e98 <HAL_TIM_ConfigClockSource+0x1e0>
 8007d2c:	4a65      	ldr	r2, [pc, #404]	; (8007ec4 <HAL_TIM_ConfigClockSource+0x20c>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	f000 80a9 	beq.w	8007e86 <HAL_TIM_ConfigClockSource+0x1ce>
 8007d34:	4a63      	ldr	r2, [pc, #396]	; (8007ec4 <HAL_TIM_ConfigClockSource+0x20c>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	f200 80ae 	bhi.w	8007e98 <HAL_TIM_ConfigClockSource+0x1e0>
 8007d3c:	4a62      	ldr	r2, [pc, #392]	; (8007ec8 <HAL_TIM_ConfigClockSource+0x210>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	f000 80a1 	beq.w	8007e86 <HAL_TIM_ConfigClockSource+0x1ce>
 8007d44:	4a60      	ldr	r2, [pc, #384]	; (8007ec8 <HAL_TIM_ConfigClockSource+0x210>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	f200 80a6 	bhi.w	8007e98 <HAL_TIM_ConfigClockSource+0x1e0>
 8007d4c:	4a5f      	ldr	r2, [pc, #380]	; (8007ecc <HAL_TIM_ConfigClockSource+0x214>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	f000 8099 	beq.w	8007e86 <HAL_TIM_ConfigClockSource+0x1ce>
 8007d54:	4a5d      	ldr	r2, [pc, #372]	; (8007ecc <HAL_TIM_ConfigClockSource+0x214>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	f200 809e 	bhi.w	8007e98 <HAL_TIM_ConfigClockSource+0x1e0>
 8007d5c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007d60:	f000 8091 	beq.w	8007e86 <HAL_TIM_ConfigClockSource+0x1ce>
 8007d64:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007d68:	f200 8096 	bhi.w	8007e98 <HAL_TIM_ConfigClockSource+0x1e0>
 8007d6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d70:	f000 8089 	beq.w	8007e86 <HAL_TIM_ConfigClockSource+0x1ce>
 8007d74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d78:	f200 808e 	bhi.w	8007e98 <HAL_TIM_ConfigClockSource+0x1e0>
 8007d7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d80:	d03e      	beq.n	8007e00 <HAL_TIM_ConfigClockSource+0x148>
 8007d82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d86:	f200 8087 	bhi.w	8007e98 <HAL_TIM_ConfigClockSource+0x1e0>
 8007d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d8e:	f000 8086 	beq.w	8007e9e <HAL_TIM_ConfigClockSource+0x1e6>
 8007d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d96:	d87f      	bhi.n	8007e98 <HAL_TIM_ConfigClockSource+0x1e0>
 8007d98:	2b70      	cmp	r3, #112	; 0x70
 8007d9a:	d01a      	beq.n	8007dd2 <HAL_TIM_ConfigClockSource+0x11a>
 8007d9c:	2b70      	cmp	r3, #112	; 0x70
 8007d9e:	d87b      	bhi.n	8007e98 <HAL_TIM_ConfigClockSource+0x1e0>
 8007da0:	2b60      	cmp	r3, #96	; 0x60
 8007da2:	d050      	beq.n	8007e46 <HAL_TIM_ConfigClockSource+0x18e>
 8007da4:	2b60      	cmp	r3, #96	; 0x60
 8007da6:	d877      	bhi.n	8007e98 <HAL_TIM_ConfigClockSource+0x1e0>
 8007da8:	2b50      	cmp	r3, #80	; 0x50
 8007daa:	d03c      	beq.n	8007e26 <HAL_TIM_ConfigClockSource+0x16e>
 8007dac:	2b50      	cmp	r3, #80	; 0x50
 8007dae:	d873      	bhi.n	8007e98 <HAL_TIM_ConfigClockSource+0x1e0>
 8007db0:	2b40      	cmp	r3, #64	; 0x40
 8007db2:	d058      	beq.n	8007e66 <HAL_TIM_ConfigClockSource+0x1ae>
 8007db4:	2b40      	cmp	r3, #64	; 0x40
 8007db6:	d86f      	bhi.n	8007e98 <HAL_TIM_ConfigClockSource+0x1e0>
 8007db8:	2b30      	cmp	r3, #48	; 0x30
 8007dba:	d064      	beq.n	8007e86 <HAL_TIM_ConfigClockSource+0x1ce>
 8007dbc:	2b30      	cmp	r3, #48	; 0x30
 8007dbe:	d86b      	bhi.n	8007e98 <HAL_TIM_ConfigClockSource+0x1e0>
 8007dc0:	2b20      	cmp	r3, #32
 8007dc2:	d060      	beq.n	8007e86 <HAL_TIM_ConfigClockSource+0x1ce>
 8007dc4:	2b20      	cmp	r3, #32
 8007dc6:	d867      	bhi.n	8007e98 <HAL_TIM_ConfigClockSource+0x1e0>
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d05c      	beq.n	8007e86 <HAL_TIM_ConfigClockSource+0x1ce>
 8007dcc:	2b10      	cmp	r3, #16
 8007dce:	d05a      	beq.n	8007e86 <HAL_TIM_ConfigClockSource+0x1ce>
 8007dd0:	e062      	b.n	8007e98 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6818      	ldr	r0, [r3, #0]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	6899      	ldr	r1, [r3, #8]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	685a      	ldr	r2, [r3, #4]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	f000 f999 	bl	8008118 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007df4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68ba      	ldr	r2, [r7, #8]
 8007dfc:	609a      	str	r2, [r3, #8]
      break;
 8007dfe:	e04f      	b.n	8007ea0 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6818      	ldr	r0, [r3, #0]
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	6899      	ldr	r1, [r3, #8]
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	f000 f982 	bl	8008118 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	689a      	ldr	r2, [r3, #8]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e22:	609a      	str	r2, [r3, #8]
      break;
 8007e24:	e03c      	b.n	8007ea0 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6818      	ldr	r0, [r3, #0]
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	6859      	ldr	r1, [r3, #4]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	461a      	mov	r2, r3
 8007e34:	f000 f8f4 	bl	8008020 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2150      	movs	r1, #80	; 0x50
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f000 f94d 	bl	80080de <TIM_ITRx_SetConfig>
      break;
 8007e44:	e02c      	b.n	8007ea0 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6818      	ldr	r0, [r3, #0]
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	6859      	ldr	r1, [r3, #4]
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	461a      	mov	r2, r3
 8007e54:	f000 f913 	bl	800807e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2160      	movs	r1, #96	; 0x60
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f000 f93d 	bl	80080de <TIM_ITRx_SetConfig>
      break;
 8007e64:	e01c      	b.n	8007ea0 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6818      	ldr	r0, [r3, #0]
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	6859      	ldr	r1, [r3, #4]
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	461a      	mov	r2, r3
 8007e74:	f000 f8d4 	bl	8008020 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2140      	movs	r1, #64	; 0x40
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 f92d 	bl	80080de <TIM_ITRx_SetConfig>
      break;
 8007e84:	e00c      	b.n	8007ea0 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4619      	mov	r1, r3
 8007e90:	4610      	mov	r0, r2
 8007e92:	f000 f924 	bl	80080de <TIM_ITRx_SetConfig>
      break;
 8007e96:	e003      	b.n	8007ea0 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e9c:	e000      	b.n	8007ea0 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8007e9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3710      	adds	r7, #16
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	00100070 	.word	0x00100070
 8007ec0:	00100050 	.word	0x00100050
 8007ec4:	00100040 	.word	0x00100040
 8007ec8:	00100030 	.word	0x00100030
 8007ecc:	00100020 	.word	0x00100020

08007ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a46      	ldr	r2, [pc, #280]	; (8007ffc <TIM_Base_SetConfig+0x12c>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d017      	beq.n	8007f18 <TIM_Base_SetConfig+0x48>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eee:	d013      	beq.n	8007f18 <TIM_Base_SetConfig+0x48>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a43      	ldr	r2, [pc, #268]	; (8008000 <TIM_Base_SetConfig+0x130>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d00f      	beq.n	8007f18 <TIM_Base_SetConfig+0x48>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a42      	ldr	r2, [pc, #264]	; (8008004 <TIM_Base_SetConfig+0x134>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d00b      	beq.n	8007f18 <TIM_Base_SetConfig+0x48>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a41      	ldr	r2, [pc, #260]	; (8008008 <TIM_Base_SetConfig+0x138>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d007      	beq.n	8007f18 <TIM_Base_SetConfig+0x48>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a40      	ldr	r2, [pc, #256]	; (800800c <TIM_Base_SetConfig+0x13c>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d003      	beq.n	8007f18 <TIM_Base_SetConfig+0x48>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a3f      	ldr	r2, [pc, #252]	; (8008010 <TIM_Base_SetConfig+0x140>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d108      	bne.n	8007f2a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a33      	ldr	r2, [pc, #204]	; (8007ffc <TIM_Base_SetConfig+0x12c>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d023      	beq.n	8007f7a <TIM_Base_SetConfig+0xaa>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f38:	d01f      	beq.n	8007f7a <TIM_Base_SetConfig+0xaa>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a30      	ldr	r2, [pc, #192]	; (8008000 <TIM_Base_SetConfig+0x130>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d01b      	beq.n	8007f7a <TIM_Base_SetConfig+0xaa>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a2f      	ldr	r2, [pc, #188]	; (8008004 <TIM_Base_SetConfig+0x134>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d017      	beq.n	8007f7a <TIM_Base_SetConfig+0xaa>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a2e      	ldr	r2, [pc, #184]	; (8008008 <TIM_Base_SetConfig+0x138>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d013      	beq.n	8007f7a <TIM_Base_SetConfig+0xaa>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a2d      	ldr	r2, [pc, #180]	; (800800c <TIM_Base_SetConfig+0x13c>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d00f      	beq.n	8007f7a <TIM_Base_SetConfig+0xaa>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a2d      	ldr	r2, [pc, #180]	; (8008014 <TIM_Base_SetConfig+0x144>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d00b      	beq.n	8007f7a <TIM_Base_SetConfig+0xaa>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a2c      	ldr	r2, [pc, #176]	; (8008018 <TIM_Base_SetConfig+0x148>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d007      	beq.n	8007f7a <TIM_Base_SetConfig+0xaa>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a2b      	ldr	r2, [pc, #172]	; (800801c <TIM_Base_SetConfig+0x14c>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d003      	beq.n	8007f7a <TIM_Base_SetConfig+0xaa>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a26      	ldr	r2, [pc, #152]	; (8008010 <TIM_Base_SetConfig+0x140>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d108      	bne.n	8007f8c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	695b      	ldr	r3, [r3, #20]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	689a      	ldr	r2, [r3, #8]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a12      	ldr	r2, [pc, #72]	; (8007ffc <TIM_Base_SetConfig+0x12c>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d013      	beq.n	8007fe0 <TIM_Base_SetConfig+0x110>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4a14      	ldr	r2, [pc, #80]	; (800800c <TIM_Base_SetConfig+0x13c>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d00f      	beq.n	8007fe0 <TIM_Base_SetConfig+0x110>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a14      	ldr	r2, [pc, #80]	; (8008014 <TIM_Base_SetConfig+0x144>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d00b      	beq.n	8007fe0 <TIM_Base_SetConfig+0x110>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4a13      	ldr	r2, [pc, #76]	; (8008018 <TIM_Base_SetConfig+0x148>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d007      	beq.n	8007fe0 <TIM_Base_SetConfig+0x110>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4a12      	ldr	r2, [pc, #72]	; (800801c <TIM_Base_SetConfig+0x14c>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d003      	beq.n	8007fe0 <TIM_Base_SetConfig+0x110>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a0d      	ldr	r2, [pc, #52]	; (8008010 <TIM_Base_SetConfig+0x140>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d103      	bne.n	8007fe8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	691a      	ldr	r2, [r3, #16]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	615a      	str	r2, [r3, #20]
}
 8007fee:	bf00      	nop
 8007ff0:	3714      	adds	r7, #20
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop
 8007ffc:	40012c00 	.word	0x40012c00
 8008000:	40000400 	.word	0x40000400
 8008004:	40000800 	.word	0x40000800
 8008008:	40000c00 	.word	0x40000c00
 800800c:	40013400 	.word	0x40013400
 8008010:	40015000 	.word	0x40015000
 8008014:	40014000 	.word	0x40014000
 8008018:	40014400 	.word	0x40014400
 800801c:	40014800 	.word	0x40014800

08008020 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008020:	b480      	push	{r7}
 8008022:	b087      	sub	sp, #28
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6a1b      	ldr	r3, [r3, #32]
 8008030:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6a1b      	ldr	r3, [r3, #32]
 8008036:	f023 0201 	bic.w	r2, r3, #1
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	699b      	ldr	r3, [r3, #24]
 8008042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800804a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	011b      	lsls	r3, r3, #4
 8008050:	693a      	ldr	r2, [r7, #16]
 8008052:	4313      	orrs	r3, r2
 8008054:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	f023 030a 	bic.w	r3, r3, #10
 800805c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800805e:	697a      	ldr	r2, [r7, #20]
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	4313      	orrs	r3, r2
 8008064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	693a      	ldr	r2, [r7, #16]
 800806a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	697a      	ldr	r2, [r7, #20]
 8008070:	621a      	str	r2, [r3, #32]
}
 8008072:	bf00      	nop
 8008074:	371c      	adds	r7, #28
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800807e:	b480      	push	{r7}
 8008080:	b087      	sub	sp, #28
 8008082:	af00      	add	r7, sp, #0
 8008084:	60f8      	str	r0, [r7, #12]
 8008086:	60b9      	str	r1, [r7, #8]
 8008088:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6a1b      	ldr	r3, [r3, #32]
 800808e:	f023 0210 	bic.w	r2, r3, #16
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	699b      	ldr	r3, [r3, #24]
 800809a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6a1b      	ldr	r3, [r3, #32]
 80080a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	031b      	lsls	r3, r3, #12
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	011b      	lsls	r3, r3, #4
 80080c0:	693a      	ldr	r2, [r7, #16]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	697a      	ldr	r2, [r7, #20]
 80080ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	693a      	ldr	r2, [r7, #16]
 80080d0:	621a      	str	r2, [r3, #32]
}
 80080d2:	bf00      	nop
 80080d4:	371c      	adds	r7, #28
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr

080080de <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080de:	b480      	push	{r7}
 80080e0:	b085      	sub	sp, #20
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
 80080e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80080f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080fa:	683a      	ldr	r2, [r7, #0]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	4313      	orrs	r3, r2
 8008100:	f043 0307 	orr.w	r3, r3, #7
 8008104:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	609a      	str	r2, [r3, #8]
}
 800810c:	bf00      	nop
 800810e:	3714      	adds	r7, #20
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008118:	b480      	push	{r7}
 800811a:	b087      	sub	sp, #28
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
 8008124:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008132:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	021a      	lsls	r2, r3, #8
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	431a      	orrs	r2, r3
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	4313      	orrs	r3, r2
 8008140:	697a      	ldr	r2, [r7, #20]
 8008142:	4313      	orrs	r3, r2
 8008144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	697a      	ldr	r2, [r7, #20]
 800814a:	609a      	str	r2, [r3, #8]
}
 800814c:	bf00      	nop
 800814e:	371c      	adds	r7, #28
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008168:	2b01      	cmp	r3, #1
 800816a:	d101      	bne.n	8008170 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800816c:	2302      	movs	r3, #2
 800816e:	e074      	b.n	800825a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2202      	movs	r2, #2
 800817c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a34      	ldr	r2, [pc, #208]	; (8008268 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d009      	beq.n	80081ae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a33      	ldr	r2, [pc, #204]	; (800826c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d004      	beq.n	80081ae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a31      	ldr	r2, [pc, #196]	; (8008270 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d108      	bne.n	80081c0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80081b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	4313      	orrs	r3, r2
 80081be:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80081c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a21      	ldr	r2, [pc, #132]	; (8008268 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d022      	beq.n	800822e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081f0:	d01d      	beq.n	800822e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a1f      	ldr	r2, [pc, #124]	; (8008274 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d018      	beq.n	800822e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a1d      	ldr	r2, [pc, #116]	; (8008278 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d013      	beq.n	800822e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a1c      	ldr	r2, [pc, #112]	; (800827c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d00e      	beq.n	800822e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a15      	ldr	r2, [pc, #84]	; (800826c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d009      	beq.n	800822e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a18      	ldr	r2, [pc, #96]	; (8008280 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d004      	beq.n	800822e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a11      	ldr	r2, [pc, #68]	; (8008270 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d10c      	bne.n	8008248 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008234:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	4313      	orrs	r3, r2
 800823e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	40012c00 	.word	0x40012c00
 800826c:	40013400 	.word	0x40013400
 8008270:	40015000 	.word	0x40015000
 8008274:	40000400 	.word	0x40000400
 8008278:	40000800 	.word	0x40000800
 800827c:	40000c00 	.word	0x40000c00
 8008280:	40014000 	.word	0x40014000

08008284 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008294:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008298:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	b29a      	uxth	r2, r3
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3714      	adds	r7, #20
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80082b2:	b480      	push	{r7}
 80082b4:	b085      	sub	sp, #20
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80082ba:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80082be:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	43db      	mvns	r3, r3
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	4013      	ands	r3, r2
 80082d2:	b29a      	uxth	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3714      	adds	r7, #20
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80082e8:	b084      	sub	sp, #16
 80082ea:	b480      	push	{r7}
 80082ec:	b083      	sub	sp, #12
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	f107 0014 	add.w	r0, r7, #20
 80082f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2201      	movs	r2, #1
 80082fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	370c      	adds	r7, #12
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	b004      	add	sp, #16
 8008328:	4770      	bx	lr
	...

0800832c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800832c:	b480      	push	{r7}
 800832e:	b09d      	sub	sp, #116	; 0x74
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008336:	2300      	movs	r3, #0
 8008338:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	4413      	add	r3, r2
 8008346:	881b      	ldrh	r3, [r3, #0]
 8008348:	b29b      	uxth	r3, r3
 800834a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800834e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008352:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	78db      	ldrb	r3, [r3, #3]
 800835a:	2b03      	cmp	r3, #3
 800835c:	d81f      	bhi.n	800839e <USB_ActivateEndpoint+0x72>
 800835e:	a201      	add	r2, pc, #4	; (adr r2, 8008364 <USB_ActivateEndpoint+0x38>)
 8008360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008364:	08008375 	.word	0x08008375
 8008368:	08008391 	.word	0x08008391
 800836c:	080083a7 	.word	0x080083a7
 8008370:	08008383 	.word	0x08008383
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008374:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008378:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800837c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008380:	e012      	b.n	80083a8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008382:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008386:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800838a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800838e:	e00b      	b.n	80083a8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008390:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008394:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008398:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800839c:	e004      	b.n	80083a8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80083a4:	e000      	b.n	80083a8 <USB_ActivateEndpoint+0x7c>
      break;
 80083a6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	441a      	add	r2, r3
 80083b2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80083b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4413      	add	r3, r2
 80083d4:	881b      	ldrh	r3, [r3, #0]
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	b21b      	sxth	r3, r3
 80083da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083e2:	b21a      	sxth	r2, r3
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	b21b      	sxth	r3, r3
 80083ea:	4313      	orrs	r3, r2
 80083ec:	b21b      	sxth	r3, r3
 80083ee:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	441a      	add	r2, r3
 80083fc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008400:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008404:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008408:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800840c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008410:	b29b      	uxth	r3, r3
 8008412:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	7b1b      	ldrb	r3, [r3, #12]
 8008418:	2b00      	cmp	r3, #0
 800841a:	f040 8149 	bne.w	80086b0 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	785b      	ldrb	r3, [r3, #1]
 8008422:	2b00      	cmp	r3, #0
 8008424:	f000 8084 	beq.w	8008530 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	61bb      	str	r3, [r7, #24]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008432:	b29b      	uxth	r3, r3
 8008434:	461a      	mov	r2, r3
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	4413      	add	r3, r2
 800843a:	61bb      	str	r3, [r7, #24]
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	00da      	lsls	r2, r3, #3
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	4413      	add	r3, r2
 8008446:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800844a:	617b      	str	r3, [r7, #20]
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	88db      	ldrh	r3, [r3, #6]
 8008450:	085b      	lsrs	r3, r3, #1
 8008452:	b29b      	uxth	r3, r3
 8008454:	005b      	lsls	r3, r3, #1
 8008456:	b29a      	uxth	r2, r3
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	4413      	add	r3, r2
 8008466:	881b      	ldrh	r3, [r3, #0]
 8008468:	827b      	strh	r3, [r7, #18]
 800846a:	8a7b      	ldrh	r3, [r7, #18]
 800846c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008470:	2b00      	cmp	r3, #0
 8008472:	d01b      	beq.n	80084ac <USB_ActivateEndpoint+0x180>
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	4413      	add	r3, r2
 800847e:	881b      	ldrh	r3, [r3, #0]
 8008480:	b29b      	uxth	r3, r3
 8008482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800848a:	823b      	strh	r3, [r7, #16]
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	441a      	add	r2, r3
 8008496:	8a3b      	ldrh	r3, [r7, #16]
 8008498:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800849c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	78db      	ldrb	r3, [r3, #3]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d020      	beq.n	80084f6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4413      	add	r3, r2
 80084be:	881b      	ldrh	r3, [r3, #0]
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084ca:	81bb      	strh	r3, [r7, #12]
 80084cc:	89bb      	ldrh	r3, [r7, #12]
 80084ce:	f083 0320 	eor.w	r3, r3, #32
 80084d2:	81bb      	strh	r3, [r7, #12]
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	441a      	add	r2, r3
 80084de:	89bb      	ldrh	r3, [r7, #12]
 80084e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	8013      	strh	r3, [r2, #0]
 80084f4:	e2a6      	b.n	8008a44 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	4413      	add	r3, r2
 8008500:	881b      	ldrh	r3, [r3, #0]
 8008502:	b29b      	uxth	r3, r3
 8008504:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008508:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800850c:	81fb      	strh	r3, [r7, #14]
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	441a      	add	r2, r3
 8008518:	89fb      	ldrh	r3, [r7, #14]
 800851a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800851e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800852a:	b29b      	uxth	r3, r3
 800852c:	8013      	strh	r3, [r2, #0]
 800852e:	e289      	b.n	8008a44 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	633b      	str	r3, [r7, #48]	; 0x30
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800853a:	b29b      	uxth	r3, r3
 800853c:	461a      	mov	r2, r3
 800853e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008540:	4413      	add	r3, r2
 8008542:	633b      	str	r3, [r7, #48]	; 0x30
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	00da      	lsls	r2, r3, #3
 800854a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854c:	4413      	add	r3, r2
 800854e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008552:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	88db      	ldrh	r3, [r3, #6]
 8008558:	085b      	lsrs	r3, r3, #1
 800855a:	b29b      	uxth	r3, r3
 800855c:	005b      	lsls	r3, r3, #1
 800855e:	b29a      	uxth	r2, r3
 8008560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008562:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	62bb      	str	r3, [r7, #40]	; 0x28
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800856e:	b29b      	uxth	r3, r3
 8008570:	461a      	mov	r2, r3
 8008572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008574:	4413      	add	r3, r2
 8008576:	62bb      	str	r3, [r7, #40]	; 0x28
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	00da      	lsls	r2, r3, #3
 800857e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008580:	4413      	add	r3, r2
 8008582:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008586:	627b      	str	r3, [r7, #36]	; 0x24
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	691b      	ldr	r3, [r3, #16]
 800858c:	2b3e      	cmp	r3, #62	; 0x3e
 800858e:	d918      	bls.n	80085c2 <USB_ActivateEndpoint+0x296>
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	691b      	ldr	r3, [r3, #16]
 8008594:	095b      	lsrs	r3, r3, #5
 8008596:	66bb      	str	r3, [r7, #104]	; 0x68
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	f003 031f 	and.w	r3, r3, #31
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d102      	bne.n	80085aa <USB_ActivateEndpoint+0x27e>
 80085a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085a6:	3b01      	subs	r3, #1
 80085a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80085aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	029b      	lsls	r3, r3, #10
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085be:	801a      	strh	r2, [r3, #0]
 80085c0:	e029      	b.n	8008616 <USB_ActivateEndpoint+0x2ea>
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d112      	bne.n	80085f0 <USB_ActivateEndpoint+0x2c4>
 80085ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085cc:	881b      	ldrh	r3, [r3, #0]
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80085d4:	b29a      	uxth	r2, r3
 80085d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d8:	801a      	strh	r2, [r3, #0]
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	881b      	ldrh	r3, [r3, #0]
 80085de:	b29b      	uxth	r3, r3
 80085e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085e8:	b29a      	uxth	r2, r3
 80085ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ec:	801a      	strh	r2, [r3, #0]
 80085ee:	e012      	b.n	8008616 <USB_ActivateEndpoint+0x2ea>
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	085b      	lsrs	r3, r3, #1
 80085f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	691b      	ldr	r3, [r3, #16]
 80085fc:	f003 0301 	and.w	r3, r3, #1
 8008600:	2b00      	cmp	r3, #0
 8008602:	d002      	beq.n	800860a <USB_ActivateEndpoint+0x2de>
 8008604:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008606:	3301      	adds	r3, #1
 8008608:	66bb      	str	r3, [r7, #104]	; 0x68
 800860a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800860c:	b29b      	uxth	r3, r3
 800860e:	029b      	lsls	r3, r3, #10
 8008610:	b29a      	uxth	r2, r3
 8008612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008614:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	4413      	add	r3, r2
 8008620:	881b      	ldrh	r3, [r3, #0]
 8008622:	847b      	strh	r3, [r7, #34]	; 0x22
 8008624:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800862a:	2b00      	cmp	r3, #0
 800862c:	d01b      	beq.n	8008666 <USB_ActivateEndpoint+0x33a>
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	4413      	add	r3, r2
 8008638:	881b      	ldrh	r3, [r3, #0]
 800863a:	b29b      	uxth	r3, r3
 800863c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008644:	843b      	strh	r3, [r7, #32]
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	441a      	add	r2, r3
 8008650:	8c3b      	ldrh	r3, [r7, #32]
 8008652:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008656:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800865a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800865e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008662:	b29b      	uxth	r3, r3
 8008664:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	4413      	add	r3, r2
 8008670:	881b      	ldrh	r3, [r3, #0]
 8008672:	b29b      	uxth	r3, r3
 8008674:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800867c:	83fb      	strh	r3, [r7, #30]
 800867e:	8bfb      	ldrh	r3, [r7, #30]
 8008680:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008684:	83fb      	strh	r3, [r7, #30]
 8008686:	8bfb      	ldrh	r3, [r7, #30]
 8008688:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800868c:	83fb      	strh	r3, [r7, #30]
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	441a      	add	r2, r3
 8008698:	8bfb      	ldrh	r3, [r7, #30]
 800869a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800869e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	8013      	strh	r3, [r2, #0]
 80086ae:	e1c9      	b.n	8008a44 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	78db      	ldrb	r3, [r3, #3]
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d11e      	bne.n	80086f6 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	4413      	add	r3, r2
 80086c2:	881b      	ldrh	r3, [r3, #0]
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ce:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	441a      	add	r2, r3
 80086dc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80086e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086e8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80086ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	8013      	strh	r3, [r2, #0]
 80086f4:	e01d      	b.n	8008732 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	4413      	add	r3, r2
 8008700:	881b      	ldrh	r3, [r3, #0]
 8008702:	b29b      	uxth	r3, r3
 8008704:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800870c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	441a      	add	r2, r3
 800871a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800871e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008722:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800872a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800872e:	b29b      	uxth	r3, r3
 8008730:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800873c:	b29b      	uxth	r3, r3
 800873e:	461a      	mov	r2, r3
 8008740:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008742:	4413      	add	r3, r2
 8008744:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	00da      	lsls	r2, r3, #3
 800874c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800874e:	4413      	add	r3, r2
 8008750:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008754:	65bb      	str	r3, [r7, #88]	; 0x58
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	891b      	ldrh	r3, [r3, #8]
 800875a:	085b      	lsrs	r3, r3, #1
 800875c:	b29b      	uxth	r3, r3
 800875e:	005b      	lsls	r3, r3, #1
 8008760:	b29a      	uxth	r2, r3
 8008762:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008764:	801a      	strh	r2, [r3, #0]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	657b      	str	r3, [r7, #84]	; 0x54
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008770:	b29b      	uxth	r3, r3
 8008772:	461a      	mov	r2, r3
 8008774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008776:	4413      	add	r3, r2
 8008778:	657b      	str	r3, [r7, #84]	; 0x54
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	00da      	lsls	r2, r3, #3
 8008780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008782:	4413      	add	r3, r2
 8008784:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008788:	653b      	str	r3, [r7, #80]	; 0x50
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	895b      	ldrh	r3, [r3, #10]
 800878e:	085b      	lsrs	r3, r3, #1
 8008790:	b29b      	uxth	r3, r3
 8008792:	005b      	lsls	r3, r3, #1
 8008794:	b29a      	uxth	r2, r3
 8008796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008798:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	785b      	ldrb	r3, [r3, #1]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	f040 8093 	bne.w	80088ca <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	4413      	add	r3, r2
 80087ae:	881b      	ldrh	r3, [r3, #0]
 80087b0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80087b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80087b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d01b      	beq.n	80087f8 <USB_ActivateEndpoint+0x4cc>
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	4413      	add	r3, r2
 80087ca:	881b      	ldrh	r3, [r3, #0]
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	441a      	add	r2, r3
 80087e2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80087e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80087f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	4413      	add	r3, r2
 8008802:	881b      	ldrh	r3, [r3, #0]
 8008804:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008806:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800880c:	2b00      	cmp	r3, #0
 800880e:	d01b      	beq.n	8008848 <USB_ActivateEndpoint+0x51c>
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	4413      	add	r3, r2
 800881a:	881b      	ldrh	r3, [r3, #0]
 800881c:	b29b      	uxth	r3, r3
 800881e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008826:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	441a      	add	r2, r3
 8008832:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008834:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008838:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800883c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008840:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008844:	b29b      	uxth	r3, r3
 8008846:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	4413      	add	r3, r2
 8008852:	881b      	ldrh	r3, [r3, #0]
 8008854:	b29b      	uxth	r3, r3
 8008856:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800885a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800885e:	873b      	strh	r3, [r7, #56]	; 0x38
 8008860:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008862:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008866:	873b      	strh	r3, [r7, #56]	; 0x38
 8008868:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800886a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800886e:	873b      	strh	r3, [r7, #56]	; 0x38
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	441a      	add	r2, r3
 800887a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800887c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008880:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008884:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800888c:	b29b      	uxth	r3, r3
 800888e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	4413      	add	r3, r2
 800889a:	881b      	ldrh	r3, [r3, #0]
 800889c:	b29b      	uxth	r3, r3
 800889e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088a6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	441a      	add	r2, r3
 80088b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80088b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	8013      	strh	r3, [r2, #0]
 80088c8:	e0bc      	b.n	8008a44 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	4413      	add	r3, r2
 80088d4:	881b      	ldrh	r3, [r3, #0]
 80088d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80088da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80088de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d01d      	beq.n	8008922 <USB_ActivateEndpoint+0x5f6>
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	4413      	add	r3, r2
 80088f0:	881b      	ldrh	r3, [r3, #0]
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088fc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	441a      	add	r2, r3
 800890a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800890e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008912:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008916:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800891a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800891e:	b29b      	uxth	r3, r3
 8008920:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	4413      	add	r3, r2
 800892c:	881b      	ldrh	r3, [r3, #0]
 800892e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008932:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800893a:	2b00      	cmp	r3, #0
 800893c:	d01d      	beq.n	800897a <USB_ActivateEndpoint+0x64e>
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	4413      	add	r3, r2
 8008948:	881b      	ldrh	r3, [r3, #0]
 800894a:	b29b      	uxth	r3, r3
 800894c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008954:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	441a      	add	r2, r3
 8008962:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800896a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800896e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008972:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008976:	b29b      	uxth	r3, r3
 8008978:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	78db      	ldrb	r3, [r3, #3]
 800897e:	2b01      	cmp	r3, #1
 8008980:	d024      	beq.n	80089cc <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4413      	add	r3, r2
 800898c:	881b      	ldrh	r3, [r3, #0]
 800898e:	b29b      	uxth	r3, r3
 8008990:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008998:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800899c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80089a0:	f083 0320 	eor.w	r3, r3, #32
 80089a4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	441a      	add	r2, r3
 80089b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80089b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	8013      	strh	r3, [r2, #0]
 80089ca:	e01d      	b.n	8008a08 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4413      	add	r3, r2
 80089d6:	881b      	ldrh	r3, [r3, #0]
 80089d8:	b29b      	uxth	r3, r3
 80089da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089e2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	441a      	add	r2, r3
 80089f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80089f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	4413      	add	r3, r2
 8008a12:	881b      	ldrh	r3, [r3, #0]
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a1e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	441a      	add	r2, r3
 8008a2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008a30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008a44:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3774      	adds	r7, #116	; 0x74
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b08d      	sub	sp, #52	; 0x34
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	7b1b      	ldrb	r3, [r3, #12]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	f040 808e 	bne.w	8008b84 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	785b      	ldrb	r3, [r3, #1]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d044      	beq.n	8008afa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	4413      	add	r3, r2
 8008a7a:	881b      	ldrh	r3, [r3, #0]
 8008a7c:	81bb      	strh	r3, [r7, #12]
 8008a7e:	89bb      	ldrh	r3, [r7, #12]
 8008a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d01b      	beq.n	8008ac0 <USB_DeactivateEndpoint+0x6c>
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4413      	add	r3, r2
 8008a92:	881b      	ldrh	r3, [r3, #0]
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a9e:	817b      	strh	r3, [r7, #10]
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	441a      	add	r2, r3
 8008aaa:	897b      	ldrh	r3, [r7, #10]
 8008aac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ab8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	4413      	add	r3, r2
 8008aca:	881b      	ldrh	r3, [r3, #0]
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ad6:	813b      	strh	r3, [r7, #8]
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	441a      	add	r2, r3
 8008ae2:	893b      	ldrh	r3, [r7, #8]
 8008ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	8013      	strh	r3, [r2, #0]
 8008af8:	e192      	b.n	8008e20 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	4413      	add	r3, r2
 8008b04:	881b      	ldrh	r3, [r3, #0]
 8008b06:	827b      	strh	r3, [r7, #18]
 8008b08:	8a7b      	ldrh	r3, [r7, #18]
 8008b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d01b      	beq.n	8008b4a <USB_DeactivateEndpoint+0xf6>
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	4413      	add	r3, r2
 8008b1c:	881b      	ldrh	r3, [r3, #0]
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b28:	823b      	strh	r3, [r7, #16]
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	441a      	add	r2, r3
 8008b34:	8a3b      	ldrh	r3, [r7, #16]
 8008b36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	4413      	add	r3, r2
 8008b54:	881b      	ldrh	r3, [r3, #0]
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b60:	81fb      	strh	r3, [r7, #14]
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	441a      	add	r2, r3
 8008b6c:	89fb      	ldrh	r3, [r7, #14]
 8008b6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	8013      	strh	r3, [r2, #0]
 8008b82:	e14d      	b.n	8008e20 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	785b      	ldrb	r3, [r3, #1]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	f040 80a5 	bne.w	8008cd8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	4413      	add	r3, r2
 8008b98:	881b      	ldrh	r3, [r3, #0]
 8008b9a:	843b      	strh	r3, [r7, #32]
 8008b9c:	8c3b      	ldrh	r3, [r7, #32]
 8008b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d01b      	beq.n	8008bde <USB_DeactivateEndpoint+0x18a>
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	4413      	add	r3, r2
 8008bb0:	881b      	ldrh	r3, [r3, #0]
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bbc:	83fb      	strh	r3, [r7, #30]
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	441a      	add	r2, r3
 8008bc8:	8bfb      	ldrh	r3, [r7, #30]
 8008bca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	4413      	add	r3, r2
 8008be8:	881b      	ldrh	r3, [r3, #0]
 8008bea:	83bb      	strh	r3, [r7, #28]
 8008bec:	8bbb      	ldrh	r3, [r7, #28]
 8008bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d01b      	beq.n	8008c2e <USB_DeactivateEndpoint+0x1da>
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4413      	add	r3, r2
 8008c00:	881b      	ldrh	r3, [r3, #0]
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c0c:	837b      	strh	r3, [r7, #26]
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	441a      	add	r2, r3
 8008c18:	8b7b      	ldrh	r3, [r7, #26]
 8008c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	4413      	add	r3, r2
 8008c38:	881b      	ldrh	r3, [r3, #0]
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c44:	833b      	strh	r3, [r7, #24]
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	441a      	add	r2, r3
 8008c50:	8b3b      	ldrh	r3, [r7, #24]
 8008c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	4413      	add	r3, r2
 8008c70:	881b      	ldrh	r3, [r3, #0]
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c7c:	82fb      	strh	r3, [r7, #22]
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	441a      	add	r2, r3
 8008c88:	8afb      	ldrh	r3, [r7, #22]
 8008c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	4413      	add	r3, r2
 8008ca8:	881b      	ldrh	r3, [r3, #0]
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cb4:	82bb      	strh	r3, [r7, #20]
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	441a      	add	r2, r3
 8008cc0:	8abb      	ldrh	r3, [r7, #20]
 8008cc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	8013      	strh	r3, [r2, #0]
 8008cd6:	e0a3      	b.n	8008e20 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	4413      	add	r3, r2
 8008ce2:	881b      	ldrh	r3, [r3, #0]
 8008ce4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008ce6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d01b      	beq.n	8008d28 <USB_DeactivateEndpoint+0x2d4>
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	4413      	add	r3, r2
 8008cfa:	881b      	ldrh	r3, [r3, #0]
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d06:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	441a      	add	r2, r3
 8008d12:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008d14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	4413      	add	r3, r2
 8008d32:	881b      	ldrh	r3, [r3, #0]
 8008d34:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008d36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d01b      	beq.n	8008d78 <USB_DeactivateEndpoint+0x324>
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	4413      	add	r3, r2
 8008d4a:	881b      	ldrh	r3, [r3, #0]
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d56:	853b      	strh	r3, [r7, #40]	; 0x28
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	441a      	add	r2, r3
 8008d62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008d64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	4413      	add	r3, r2
 8008d82:	881b      	ldrh	r3, [r3, #0]
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d8e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	441a      	add	r2, r3
 8008d9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008da0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008da4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	4413      	add	r3, r2
 8008dba:	881b      	ldrh	r3, [r3, #0]
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dc6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	441a      	add	r2, r3
 8008dd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008dd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ddc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	4413      	add	r3, r2
 8008df2:	881b      	ldrh	r3, [r3, #0]
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dfe:	847b      	strh	r3, [r7, #34]	; 0x22
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	441a      	add	r2, r3
 8008e0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008e0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008e20:	2300      	movs	r3, #0
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3734      	adds	r7, #52	; 0x34
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr

08008e2e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b0c2      	sub	sp, #264	; 0x108
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e3c:	6018      	str	r0, [r3, #0]
 8008e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e46:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	785b      	ldrb	r3, [r3, #1]
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	f040 867b 	bne.w	8009b50 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	699a      	ldr	r2, [r3, #24]
 8008e66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	691b      	ldr	r3, [r3, #16]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d908      	bls.n	8008e88 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	691b      	ldr	r3, [r3, #16]
 8008e82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008e86:	e007      	b.n	8008e98 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008e88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	699b      	ldr	r3, [r3, #24]
 8008e94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	7b1b      	ldrb	r3, [r3, #12]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d13a      	bne.n	8008f1e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008ea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	6959      	ldr	r1, [r3, #20]
 8008eb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	88da      	ldrh	r2, [r3, #6]
 8008ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008eca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008ece:	6800      	ldr	r0, [r0, #0]
 8008ed0:	f001 fc1d 	bl	800a70e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ed8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	613b      	str	r3, [r7, #16]
 8008ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ee4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	613b      	str	r3, [r7, #16]
 8008ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008efc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	00da      	lsls	r2, r3, #3
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	4413      	add	r3, r2
 8008f0a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008f0e:	60fb      	str	r3, [r7, #12]
 8008f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	801a      	strh	r2, [r3, #0]
 8008f1a:	f000 bde3 	b.w	8009ae4 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	78db      	ldrb	r3, [r3, #3]
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	f040 843a 	bne.w	80097a4 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	6a1a      	ldr	r2, [r3, #32]
 8008f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	f240 83b7 	bls.w	80096bc <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	4413      	add	r3, r2
 8008f68:	881b      	ldrh	r3, [r3, #0]
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f74:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	441a      	add	r2, r3
 8008f92:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008f96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f9e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008faa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	6a1a      	ldr	r2, [r3, #32]
 8008fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fba:	1ad2      	subs	r2, r2, r3
 8008fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fcc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	4413      	add	r3, r2
 8008fe2:	881b      	ldrh	r3, [r3, #0]
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	f000 81b3 	beq.w	8009356 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ff4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	633b      	str	r3, [r7, #48]	; 0x30
 8008ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	785b      	ldrb	r3, [r3, #1]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d16d      	bne.n	80090e8 <USB_EPStartXfer+0x2ba>
 800900c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009010:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	62bb      	str	r3, [r7, #40]	; 0x28
 8009018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800901c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009026:	b29b      	uxth	r3, r3
 8009028:	461a      	mov	r2, r3
 800902a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902c:	4413      	add	r3, r2
 800902e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	00da      	lsls	r2, r3, #3
 800903e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009040:	4413      	add	r3, r2
 8009042:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009046:	627b      	str	r3, [r7, #36]	; 0x24
 8009048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800904c:	2b3e      	cmp	r3, #62	; 0x3e
 800904e:	d91c      	bls.n	800908a <USB_EPStartXfer+0x25c>
 8009050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009054:	095b      	lsrs	r3, r3, #5
 8009056:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800905a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800905e:	f003 031f 	and.w	r3, r3, #31
 8009062:	2b00      	cmp	r3, #0
 8009064:	d104      	bne.n	8009070 <USB_EPStartXfer+0x242>
 8009066:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800906a:	3b01      	subs	r3, #1
 800906c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009070:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009074:	b29b      	uxth	r3, r3
 8009076:	029b      	lsls	r3, r3, #10
 8009078:	b29b      	uxth	r3, r3
 800907a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800907e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009082:	b29a      	uxth	r2, r3
 8009084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009086:	801a      	strh	r2, [r3, #0]
 8009088:	e053      	b.n	8009132 <USB_EPStartXfer+0x304>
 800908a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800908e:	2b00      	cmp	r3, #0
 8009090:	d112      	bne.n	80090b8 <USB_EPStartXfer+0x28a>
 8009092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009094:	881b      	ldrh	r3, [r3, #0]
 8009096:	b29b      	uxth	r3, r3
 8009098:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800909c:	b29a      	uxth	r2, r3
 800909e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a0:	801a      	strh	r2, [r3, #0]
 80090a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a4:	881b      	ldrh	r3, [r3, #0]
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b4:	801a      	strh	r2, [r3, #0]
 80090b6:	e03c      	b.n	8009132 <USB_EPStartXfer+0x304>
 80090b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090bc:	085b      	lsrs	r3, r3, #1
 80090be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80090c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090c6:	f003 0301 	and.w	r3, r3, #1
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d004      	beq.n	80090d8 <USB_EPStartXfer+0x2aa>
 80090ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80090d2:	3301      	adds	r3, #1
 80090d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80090d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80090dc:	b29b      	uxth	r3, r3
 80090de:	029b      	lsls	r3, r3, #10
 80090e0:	b29a      	uxth	r2, r3
 80090e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e4:	801a      	strh	r2, [r3, #0]
 80090e6:	e024      	b.n	8009132 <USB_EPStartXfer+0x304>
 80090e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	785b      	ldrb	r3, [r3, #1]
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d11c      	bne.n	8009132 <USB_EPStartXfer+0x304>
 80090f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009106:	b29b      	uxth	r3, r3
 8009108:	461a      	mov	r2, r3
 800910a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800910c:	4413      	add	r3, r2
 800910e:	633b      	str	r3, [r7, #48]	; 0x30
 8009110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	00da      	lsls	r2, r3, #3
 800911e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009120:	4413      	add	r3, r2
 8009122:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009126:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800912c:	b29a      	uxth	r2, r3
 800912e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009130:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	895b      	ldrh	r3, [r3, #10]
 800913e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	6959      	ldr	r1, [r3, #20]
 800914e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009152:	b29b      	uxth	r3, r3
 8009154:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009158:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800915c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009160:	6800      	ldr	r0, [r0, #0]
 8009162:	f001 fad4 	bl	800a70e <USB_WritePMA>
            ep->xfer_buff += len;
 8009166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800916a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	695a      	ldr	r2, [r3, #20]
 8009172:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009176:	441a      	add	r2, r3
 8009178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800917c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	6a1a      	ldr	r2, [r3, #32]
 8009190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009194:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	691b      	ldr	r3, [r3, #16]
 800919c:	429a      	cmp	r2, r3
 800919e:	d90f      	bls.n	80091c0 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 80091a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	6a1a      	ldr	r2, [r3, #32]
 80091ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091b0:	1ad2      	subs	r2, r2, r3
 80091b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	621a      	str	r2, [r3, #32]
 80091be:	e00e      	b.n	80091de <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80091c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	6a1b      	ldr	r3, [r3, #32]
 80091cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80091d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2200      	movs	r2, #0
 80091dc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80091de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	785b      	ldrb	r3, [r3, #1]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d16d      	bne.n	80092ca <USB_EPStartXfer+0x49c>
 80091ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	61bb      	str	r3, [r7, #24]
 80091fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009208:	b29b      	uxth	r3, r3
 800920a:	461a      	mov	r2, r3
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	4413      	add	r3, r2
 8009210:	61bb      	str	r3, [r7, #24]
 8009212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009216:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	00da      	lsls	r2, r3, #3
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	4413      	add	r3, r2
 8009224:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009228:	617b      	str	r3, [r7, #20]
 800922a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800922e:	2b3e      	cmp	r3, #62	; 0x3e
 8009230:	d91c      	bls.n	800926c <USB_EPStartXfer+0x43e>
 8009232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009236:	095b      	lsrs	r3, r3, #5
 8009238:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800923c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009240:	f003 031f 	and.w	r3, r3, #31
 8009244:	2b00      	cmp	r3, #0
 8009246:	d104      	bne.n	8009252 <USB_EPStartXfer+0x424>
 8009248:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800924c:	3b01      	subs	r3, #1
 800924e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009256:	b29b      	uxth	r3, r3
 8009258:	029b      	lsls	r3, r3, #10
 800925a:	b29b      	uxth	r3, r3
 800925c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009260:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009264:	b29a      	uxth	r2, r3
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	801a      	strh	r2, [r3, #0]
 800926a:	e059      	b.n	8009320 <USB_EPStartXfer+0x4f2>
 800926c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009270:	2b00      	cmp	r3, #0
 8009272:	d112      	bne.n	800929a <USB_EPStartXfer+0x46c>
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	881b      	ldrh	r3, [r3, #0]
 8009278:	b29b      	uxth	r3, r3
 800927a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800927e:	b29a      	uxth	r2, r3
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	801a      	strh	r2, [r3, #0]
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	881b      	ldrh	r3, [r3, #0]
 8009288:	b29b      	uxth	r3, r3
 800928a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800928e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009292:	b29a      	uxth	r2, r3
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	801a      	strh	r2, [r3, #0]
 8009298:	e042      	b.n	8009320 <USB_EPStartXfer+0x4f2>
 800929a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800929e:	085b      	lsrs	r3, r3, #1
 80092a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80092a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092a8:	f003 0301 	and.w	r3, r3, #1
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d004      	beq.n	80092ba <USB_EPStartXfer+0x48c>
 80092b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092b4:	3301      	adds	r3, #1
 80092b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80092ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092be:	b29b      	uxth	r3, r3
 80092c0:	029b      	lsls	r3, r3, #10
 80092c2:	b29a      	uxth	r2, r3
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	801a      	strh	r2, [r3, #0]
 80092c8:	e02a      	b.n	8009320 <USB_EPStartXfer+0x4f2>
 80092ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	785b      	ldrb	r3, [r3, #1]
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d122      	bne.n	8009320 <USB_EPStartXfer+0x4f2>
 80092da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	623b      	str	r3, [r7, #32]
 80092e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	461a      	mov	r2, r3
 80092f8:	6a3b      	ldr	r3, [r7, #32]
 80092fa:	4413      	add	r3, r2
 80092fc:	623b      	str	r3, [r7, #32]
 80092fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009302:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	00da      	lsls	r2, r3, #3
 800930c:	6a3b      	ldr	r3, [r7, #32]
 800930e:	4413      	add	r3, r2
 8009310:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009314:	61fb      	str	r3, [r7, #28]
 8009316:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800931a:	b29a      	uxth	r2, r3
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	891b      	ldrh	r3, [r3, #8]
 800932c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	6959      	ldr	r1, [r3, #20]
 800933c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009340:	b29b      	uxth	r3, r3
 8009342:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009346:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800934a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800934e:	6800      	ldr	r0, [r0, #0]
 8009350:	f001 f9dd 	bl	800a70e <USB_WritePMA>
 8009354:	e3c6      	b.n	8009ae4 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800935a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	785b      	ldrb	r3, [r3, #1]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d16d      	bne.n	8009442 <USB_EPStartXfer+0x614>
 8009366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800936a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	64bb      	str	r3, [r7, #72]	; 0x48
 8009372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009376:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009380:	b29b      	uxth	r3, r3
 8009382:	461a      	mov	r2, r3
 8009384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009386:	4413      	add	r3, r2
 8009388:	64bb      	str	r3, [r7, #72]	; 0x48
 800938a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800938e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	00da      	lsls	r2, r3, #3
 8009398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800939a:	4413      	add	r3, r2
 800939c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80093a0:	647b      	str	r3, [r7, #68]	; 0x44
 80093a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093a6:	2b3e      	cmp	r3, #62	; 0x3e
 80093a8:	d91c      	bls.n	80093e4 <USB_EPStartXfer+0x5b6>
 80093aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093ae:	095b      	lsrs	r3, r3, #5
 80093b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80093b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093b8:	f003 031f 	and.w	r3, r3, #31
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d104      	bne.n	80093ca <USB_EPStartXfer+0x59c>
 80093c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80093c4:	3b01      	subs	r3, #1
 80093c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80093ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	029b      	lsls	r3, r3, #10
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093dc:	b29a      	uxth	r2, r3
 80093de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093e0:	801a      	strh	r2, [r3, #0]
 80093e2:	e059      	b.n	8009498 <USB_EPStartXfer+0x66a>
 80093e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d112      	bne.n	8009412 <USB_EPStartXfer+0x5e4>
 80093ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093ee:	881b      	ldrh	r3, [r3, #0]
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80093f6:	b29a      	uxth	r2, r3
 80093f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093fa:	801a      	strh	r2, [r3, #0]
 80093fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093fe:	881b      	ldrh	r3, [r3, #0]
 8009400:	b29b      	uxth	r3, r3
 8009402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800940a:	b29a      	uxth	r2, r3
 800940c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800940e:	801a      	strh	r2, [r3, #0]
 8009410:	e042      	b.n	8009498 <USB_EPStartXfer+0x66a>
 8009412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009416:	085b      	lsrs	r3, r3, #1
 8009418:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800941c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009420:	f003 0301 	and.w	r3, r3, #1
 8009424:	2b00      	cmp	r3, #0
 8009426:	d004      	beq.n	8009432 <USB_EPStartXfer+0x604>
 8009428:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800942c:	3301      	adds	r3, #1
 800942e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009432:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009436:	b29b      	uxth	r3, r3
 8009438:	029b      	lsls	r3, r3, #10
 800943a:	b29a      	uxth	r2, r3
 800943c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800943e:	801a      	strh	r2, [r3, #0]
 8009440:	e02a      	b.n	8009498 <USB_EPStartXfer+0x66a>
 8009442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	785b      	ldrb	r3, [r3, #1]
 800944e:	2b01      	cmp	r3, #1
 8009450:	d122      	bne.n	8009498 <USB_EPStartXfer+0x66a>
 8009452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009456:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	653b      	str	r3, [r7, #80]	; 0x50
 800945e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009462:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800946c:	b29b      	uxth	r3, r3
 800946e:	461a      	mov	r2, r3
 8009470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009472:	4413      	add	r3, r2
 8009474:	653b      	str	r3, [r7, #80]	; 0x50
 8009476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800947a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	00da      	lsls	r2, r3, #3
 8009484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009486:	4413      	add	r3, r2
 8009488:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800948c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800948e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009492:	b29a      	uxth	r2, r3
 8009494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009496:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800949c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	891b      	ldrh	r3, [r3, #8]
 80094a4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80094a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	6959      	ldr	r1, [r3, #20]
 80094b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80094be:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80094c2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80094c6:	6800      	ldr	r0, [r0, #0]
 80094c8:	f001 f921 	bl	800a70e <USB_WritePMA>
            ep->xfer_buff += len;
 80094cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	695a      	ldr	r2, [r3, #20]
 80094d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094dc:	441a      	add	r2, r3
 80094de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80094ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	6a1a      	ldr	r2, [r3, #32]
 80094f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	429a      	cmp	r2, r3
 8009504:	d90f      	bls.n	8009526 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8009506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800950a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	6a1a      	ldr	r2, [r3, #32]
 8009512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009516:	1ad2      	subs	r2, r2, r3
 8009518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800951c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	621a      	str	r2, [r3, #32]
 8009524:	e00e      	b.n	8009544 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8009526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800952a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	6a1b      	ldr	r3, [r3, #32]
 8009532:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800953a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2200      	movs	r2, #0
 8009542:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009548:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	643b      	str	r3, [r7, #64]	; 0x40
 8009550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	785b      	ldrb	r3, [r3, #1]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d16d      	bne.n	800963c <USB_EPStartXfer+0x80e>
 8009560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009564:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	63bb      	str	r3, [r7, #56]	; 0x38
 800956c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009570:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800957a:	b29b      	uxth	r3, r3
 800957c:	461a      	mov	r2, r3
 800957e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009580:	4413      	add	r3, r2
 8009582:	63bb      	str	r3, [r7, #56]	; 0x38
 8009584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009588:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	00da      	lsls	r2, r3, #3
 8009592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009594:	4413      	add	r3, r2
 8009596:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800959a:	637b      	str	r3, [r7, #52]	; 0x34
 800959c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095a0:	2b3e      	cmp	r3, #62	; 0x3e
 80095a2:	d91c      	bls.n	80095de <USB_EPStartXfer+0x7b0>
 80095a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095a8:	095b      	lsrs	r3, r3, #5
 80095aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80095ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095b2:	f003 031f 	and.w	r3, r3, #31
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d104      	bne.n	80095c4 <USB_EPStartXfer+0x796>
 80095ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095be:	3b01      	subs	r3, #1
 80095c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80095c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	029b      	lsls	r3, r3, #10
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095d6:	b29a      	uxth	r2, r3
 80095d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095da:	801a      	strh	r2, [r3, #0]
 80095dc:	e053      	b.n	8009686 <USB_EPStartXfer+0x858>
 80095de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d112      	bne.n	800960c <USB_EPStartXfer+0x7de>
 80095e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095e8:	881b      	ldrh	r3, [r3, #0]
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80095f0:	b29a      	uxth	r2, r3
 80095f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095f4:	801a      	strh	r2, [r3, #0]
 80095f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095f8:	881b      	ldrh	r3, [r3, #0]
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009600:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009604:	b29a      	uxth	r2, r3
 8009606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009608:	801a      	strh	r2, [r3, #0]
 800960a:	e03c      	b.n	8009686 <USB_EPStartXfer+0x858>
 800960c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009610:	085b      	lsrs	r3, r3, #1
 8009612:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800961a:	f003 0301 	and.w	r3, r3, #1
 800961e:	2b00      	cmp	r3, #0
 8009620:	d004      	beq.n	800962c <USB_EPStartXfer+0x7fe>
 8009622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009626:	3301      	adds	r3, #1
 8009628:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800962c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009630:	b29b      	uxth	r3, r3
 8009632:	029b      	lsls	r3, r3, #10
 8009634:	b29a      	uxth	r2, r3
 8009636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009638:	801a      	strh	r2, [r3, #0]
 800963a:	e024      	b.n	8009686 <USB_EPStartXfer+0x858>
 800963c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009640:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	785b      	ldrb	r3, [r3, #1]
 8009648:	2b01      	cmp	r3, #1
 800964a:	d11c      	bne.n	8009686 <USB_EPStartXfer+0x858>
 800964c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009650:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800965a:	b29b      	uxth	r3, r3
 800965c:	461a      	mov	r2, r3
 800965e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009660:	4413      	add	r3, r2
 8009662:	643b      	str	r3, [r7, #64]	; 0x40
 8009664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009668:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	00da      	lsls	r2, r3, #3
 8009672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009674:	4413      	add	r3, r2
 8009676:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800967a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800967c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009680:	b29a      	uxth	r2, r3
 8009682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009684:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800968a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	895b      	ldrh	r3, [r3, #10]
 8009692:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800969a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	6959      	ldr	r1, [r3, #20]
 80096a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80096ac:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80096b0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80096b4:	6800      	ldr	r0, [r0, #0]
 80096b6:	f001 f82a 	bl	800a70e <USB_WritePMA>
 80096ba:	e213      	b.n	8009ae4 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80096bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	6a1b      	ldr	r3, [r3, #32]
 80096c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80096cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096d4:	681a      	ldr	r2, [r3, #0]
 80096d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	4413      	add	r3, r2
 80096e6:	881b      	ldrh	r3, [r3, #0]
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80096ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096f2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80096f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	441a      	add	r2, r3
 8009710:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009714:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009718:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800971c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009724:	b29b      	uxth	r3, r3
 8009726:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800972c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009738:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009742:	b29b      	uxth	r3, r3
 8009744:	461a      	mov	r2, r3
 8009746:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009748:	4413      	add	r3, r2
 800974a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800974c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009750:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	00da      	lsls	r2, r3, #3
 800975a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800975c:	4413      	add	r3, r2
 800975e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009762:	65bb      	str	r3, [r7, #88]	; 0x58
 8009764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009768:	b29a      	uxth	r2, r3
 800976a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800976c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800976e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	891b      	ldrh	r3, [r3, #8]
 800977a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800977e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009782:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	6959      	ldr	r1, [r3, #20]
 800978a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800978e:	b29b      	uxth	r3, r3
 8009790:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009794:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009798:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800979c:	6800      	ldr	r0, [r0, #0]
 800979e:	f000 ffb6 	bl	800a70e <USB_WritePMA>
 80097a2:	e19f      	b.n	8009ae4 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80097a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	6a1a      	ldr	r2, [r3, #32]
 80097b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097b4:	1ad2      	subs	r2, r2, r3
 80097b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80097c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	4413      	add	r3, r2
 80097dc:	881b      	ldrh	r3, [r3, #0]
 80097de:	b29b      	uxth	r3, r3
 80097e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	f000 80bc 	beq.w	8009962 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80097ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	673b      	str	r3, [r7, #112]	; 0x70
 80097f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	785b      	ldrb	r3, [r3, #1]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d16d      	bne.n	80098e2 <USB_EPStartXfer+0xab4>
 8009806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800980a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	66bb      	str	r3, [r7, #104]	; 0x68
 8009812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009816:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009820:	b29b      	uxth	r3, r3
 8009822:	461a      	mov	r2, r3
 8009824:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009826:	4413      	add	r3, r2
 8009828:	66bb      	str	r3, [r7, #104]	; 0x68
 800982a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800982e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	00da      	lsls	r2, r3, #3
 8009838:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800983a:	4413      	add	r3, r2
 800983c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009840:	667b      	str	r3, [r7, #100]	; 0x64
 8009842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009846:	2b3e      	cmp	r3, #62	; 0x3e
 8009848:	d91c      	bls.n	8009884 <USB_EPStartXfer+0xa56>
 800984a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800984e:	095b      	lsrs	r3, r3, #5
 8009850:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009858:	f003 031f 	and.w	r3, r3, #31
 800985c:	2b00      	cmp	r3, #0
 800985e:	d104      	bne.n	800986a <USB_EPStartXfer+0xa3c>
 8009860:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009864:	3b01      	subs	r3, #1
 8009866:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800986a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800986e:	b29b      	uxth	r3, r3
 8009870:	029b      	lsls	r3, r3, #10
 8009872:	b29b      	uxth	r3, r3
 8009874:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009878:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800987c:	b29a      	uxth	r2, r3
 800987e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009880:	801a      	strh	r2, [r3, #0]
 8009882:	e053      	b.n	800992c <USB_EPStartXfer+0xafe>
 8009884:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009888:	2b00      	cmp	r3, #0
 800988a:	d112      	bne.n	80098b2 <USB_EPStartXfer+0xa84>
 800988c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800988e:	881b      	ldrh	r3, [r3, #0]
 8009890:	b29b      	uxth	r3, r3
 8009892:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009896:	b29a      	uxth	r2, r3
 8009898:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800989a:	801a      	strh	r2, [r3, #0]
 800989c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800989e:	881b      	ldrh	r3, [r3, #0]
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098ae:	801a      	strh	r2, [r3, #0]
 80098b0:	e03c      	b.n	800992c <USB_EPStartXfer+0xafe>
 80098b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098b6:	085b      	lsrs	r3, r3, #1
 80098b8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80098bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098c0:	f003 0301 	and.w	r3, r3, #1
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d004      	beq.n	80098d2 <USB_EPStartXfer+0xaa4>
 80098c8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80098cc:	3301      	adds	r3, #1
 80098ce:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80098d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	029b      	lsls	r3, r3, #10
 80098da:	b29a      	uxth	r2, r3
 80098dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098de:	801a      	strh	r2, [r3, #0]
 80098e0:	e024      	b.n	800992c <USB_EPStartXfer+0xafe>
 80098e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	785b      	ldrb	r3, [r3, #1]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d11c      	bne.n	800992c <USB_EPStartXfer+0xafe>
 80098f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009900:	b29b      	uxth	r3, r3
 8009902:	461a      	mov	r2, r3
 8009904:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009906:	4413      	add	r3, r2
 8009908:	673b      	str	r3, [r7, #112]	; 0x70
 800990a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800990e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	00da      	lsls	r2, r3, #3
 8009918:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800991a:	4413      	add	r3, r2
 800991c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009920:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009926:	b29a      	uxth	r2, r3
 8009928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800992a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800992c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009930:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	895b      	ldrh	r3, [r3, #10]
 8009938:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800993c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009940:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	6959      	ldr	r1, [r3, #20]
 8009948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800994c:	b29b      	uxth	r3, r3
 800994e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009952:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009956:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800995a:	6800      	ldr	r0, [r0, #0]
 800995c:	f000 fed7 	bl	800a70e <USB_WritePMA>
 8009960:	e0c0      	b.n	8009ae4 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	785b      	ldrb	r3, [r3, #1]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d16d      	bne.n	8009a4e <USB_EPStartXfer+0xc20>
 8009972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009976:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800997e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009982:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800998c:	b29b      	uxth	r3, r3
 800998e:	461a      	mov	r2, r3
 8009990:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009992:	4413      	add	r3, r2
 8009994:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800999a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	00da      	lsls	r2, r3, #3
 80099a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80099a6:	4413      	add	r3, r2
 80099a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80099ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80099ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099b2:	2b3e      	cmp	r3, #62	; 0x3e
 80099b4:	d91c      	bls.n	80099f0 <USB_EPStartXfer+0xbc2>
 80099b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099ba:	095b      	lsrs	r3, r3, #5
 80099bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80099c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099c4:	f003 031f 	and.w	r3, r3, #31
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d104      	bne.n	80099d6 <USB_EPStartXfer+0xba8>
 80099cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80099d0:	3b01      	subs	r3, #1
 80099d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80099d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80099da:	b29b      	uxth	r3, r3
 80099dc:	029b      	lsls	r3, r3, #10
 80099de:	b29b      	uxth	r3, r3
 80099e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099e8:	b29a      	uxth	r2, r3
 80099ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099ec:	801a      	strh	r2, [r3, #0]
 80099ee:	e05f      	b.n	8009ab0 <USB_EPStartXfer+0xc82>
 80099f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d112      	bne.n	8009a1e <USB_EPStartXfer+0xbf0>
 80099f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099fa:	881b      	ldrh	r3, [r3, #0]
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009a02:	b29a      	uxth	r2, r3
 8009a04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a06:	801a      	strh	r2, [r3, #0]
 8009a08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a0a:	881b      	ldrh	r3, [r3, #0]
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a16:	b29a      	uxth	r2, r3
 8009a18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a1a:	801a      	strh	r2, [r3, #0]
 8009a1c:	e048      	b.n	8009ab0 <USB_EPStartXfer+0xc82>
 8009a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a22:	085b      	lsrs	r3, r3, #1
 8009a24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a2c:	f003 0301 	and.w	r3, r3, #1
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d004      	beq.n	8009a3e <USB_EPStartXfer+0xc10>
 8009a34:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009a38:	3301      	adds	r3, #1
 8009a3a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009a3e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	029b      	lsls	r3, r3, #10
 8009a46:	b29a      	uxth	r2, r3
 8009a48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a4a:	801a      	strh	r2, [r3, #0]
 8009a4c:	e030      	b.n	8009ab0 <USB_EPStartXfer+0xc82>
 8009a4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	785b      	ldrb	r3, [r3, #1]
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d128      	bne.n	8009ab0 <USB_EPStartXfer+0xc82>
 8009a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009a6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a82:	4413      	add	r3, r2
 8009a84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009a88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	00da      	lsls	r2, r3, #3
 8009a96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a9a:	4413      	add	r3, r2
 8009a9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009aa0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009aa8:	b29a      	uxth	r2, r3
 8009aaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009aae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	891b      	ldrh	r3, [r3, #8]
 8009abc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	6959      	ldr	r1, [r3, #20]
 8009acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009ad6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009ada:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009ade:	6800      	ldr	r0, [r0, #0]
 8009ae0:	f000 fe15 	bl	800a70e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ae8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009af2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	4413      	add	r3, r2
 8009afe:	881b      	ldrh	r3, [r3, #0]
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b0a:	817b      	strh	r3, [r7, #10]
 8009b0c:	897b      	ldrh	r3, [r7, #10]
 8009b0e:	f083 0310 	eor.w	r3, r3, #16
 8009b12:	817b      	strh	r3, [r7, #10]
 8009b14:	897b      	ldrh	r3, [r7, #10]
 8009b16:	f083 0320 	eor.w	r3, r3, #32
 8009b1a:	817b      	strh	r3, [r7, #10]
 8009b1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	441a      	add	r2, r3
 8009b36:	897b      	ldrh	r3, [r7, #10]
 8009b38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	8013      	strh	r3, [r2, #0]
 8009b4c:	f000 bc9f 	b.w	800a48e <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	7b1b      	ldrb	r3, [r3, #12]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	f040 80ae 	bne.w	8009cbe <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	699a      	ldr	r2, [r3, #24]
 8009b6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d917      	bls.n	8009bae <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8009b7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8009b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	699a      	ldr	r2, [r3, #24]
 8009b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b9e:	1ad2      	subs	r2, r2, r3
 8009ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	619a      	str	r2, [r3, #24]
 8009bac:	e00e      	b.n	8009bcc <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8009bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	699b      	ldr	r3, [r3, #24]
 8009bba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8009bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	461a      	mov	r2, r3
 8009bec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009bf0:	4413      	add	r3, r2
 8009bf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	00da      	lsls	r2, r3, #3
 8009c04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009c08:	4413      	add	r3, r2
 8009c0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009c0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c16:	2b3e      	cmp	r3, #62	; 0x3e
 8009c18:	d91d      	bls.n	8009c56 <USB_EPStartXfer+0xe28>
 8009c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c1e:	095b      	lsrs	r3, r3, #5
 8009c20:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c28:	f003 031f 	and.w	r3, r3, #31
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d104      	bne.n	8009c3a <USB_EPStartXfer+0xe0c>
 8009c30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009c34:	3b01      	subs	r3, #1
 8009c36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009c3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	029b      	lsls	r3, r3, #10
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c4c:	b29a      	uxth	r2, r3
 8009c4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c52:	801a      	strh	r2, [r3, #0]
 8009c54:	e3e1      	b.n	800a41a <USB_EPStartXfer+0x15ec>
 8009c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d116      	bne.n	8009c8c <USB_EPStartXfer+0xe5e>
 8009c5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c62:	881b      	ldrh	r3, [r3, #0]
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009c6a:	b29a      	uxth	r2, r3
 8009c6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c70:	801a      	strh	r2, [r3, #0]
 8009c72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c76:	881b      	ldrh	r3, [r3, #0]
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c82:	b29a      	uxth	r2, r3
 8009c84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c88:	801a      	strh	r2, [r3, #0]
 8009c8a:	e3c6      	b.n	800a41a <USB_EPStartXfer+0x15ec>
 8009c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c90:	085b      	lsrs	r3, r3, #1
 8009c92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c9a:	f003 0301 	and.w	r3, r3, #1
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d004      	beq.n	8009cac <USB_EPStartXfer+0xe7e>
 8009ca2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009cac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	029b      	lsls	r3, r3, #10
 8009cb4:	b29a      	uxth	r2, r3
 8009cb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009cba:	801a      	strh	r2, [r3, #0]
 8009cbc:	e3ad      	b.n	800a41a <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	78db      	ldrb	r3, [r3, #3]
 8009cca:	2b02      	cmp	r3, #2
 8009ccc:	f040 8200 	bne.w	800a0d0 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	785b      	ldrb	r3, [r3, #1]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	f040 8091 	bne.w	8009e04 <USB_EPStartXfer+0xfd6>
 8009ce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ce6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cf4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	461a      	mov	r2, r3
 8009d02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d06:	4413      	add	r3, r2
 8009d08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	00da      	lsls	r2, r3, #3
 8009d1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d1e:	4413      	add	r3, r2
 8009d20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009d24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009d28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	691b      	ldr	r3, [r3, #16]
 8009d34:	2b3e      	cmp	r3, #62	; 0x3e
 8009d36:	d925      	bls.n	8009d84 <USB_EPStartXfer+0xf56>
 8009d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	095b      	lsrs	r3, r3, #5
 8009d46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	691b      	ldr	r3, [r3, #16]
 8009d56:	f003 031f 	and.w	r3, r3, #31
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d104      	bne.n	8009d68 <USB_EPStartXfer+0xf3a>
 8009d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d62:	3b01      	subs	r3, #1
 8009d64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	029b      	lsls	r3, r3, #10
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d80:	801a      	strh	r2, [r3, #0]
 8009d82:	e074      	b.n	8009e6e <USB_EPStartXfer+0x1040>
 8009d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	691b      	ldr	r3, [r3, #16]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d116      	bne.n	8009dc2 <USB_EPStartXfer+0xf94>
 8009d94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009d98:	881b      	ldrh	r3, [r3, #0]
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009da0:	b29a      	uxth	r2, r3
 8009da2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009da6:	801a      	strh	r2, [r3, #0]
 8009da8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009dac:	881b      	ldrh	r3, [r3, #0]
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009db4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009dbe:	801a      	strh	r2, [r3, #0]
 8009dc0:	e055      	b.n	8009e6e <USB_EPStartXfer+0x1040>
 8009dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	691b      	ldr	r3, [r3, #16]
 8009dce:	085b      	lsrs	r3, r3, #1
 8009dd0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	691b      	ldr	r3, [r3, #16]
 8009de0:	f003 0301 	and.w	r3, r3, #1
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d004      	beq.n	8009df2 <USB_EPStartXfer+0xfc4>
 8009de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dec:	3301      	adds	r3, #1
 8009dee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	029b      	lsls	r3, r3, #10
 8009dfa:	b29a      	uxth	r2, r3
 8009dfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009e00:	801a      	strh	r2, [r3, #0]
 8009e02:	e034      	b.n	8009e6e <USB_EPStartXfer+0x1040>
 8009e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	785b      	ldrb	r3, [r3, #1]
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d12c      	bne.n	8009e6e <USB_EPStartXfer+0x1040>
 8009e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	461a      	mov	r2, r3
 8009e34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009e38:	4413      	add	r3, r2
 8009e3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	00da      	lsls	r2, r3, #3
 8009e4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009e50:	4413      	add	r3, r2
 8009e52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009e56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	691b      	ldr	r3, [r3, #16]
 8009e66:	b29a      	uxth	r2, r3
 8009e68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009e6c:	801a      	strh	r2, [r3, #0]
 8009e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	785b      	ldrb	r3, [r3, #1]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	f040 8091 	bne.w	8009fb0 <USB_EPStartXfer+0x1182>
 8009e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009e9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ea0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	461a      	mov	r2, r3
 8009eae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009eb2:	4413      	add	r3, r2
 8009eb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	00da      	lsls	r2, r3, #3
 8009ec6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009eca:	4413      	add	r3, r2
 8009ecc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009ed0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ed8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	691b      	ldr	r3, [r3, #16]
 8009ee0:	2b3e      	cmp	r3, #62	; 0x3e
 8009ee2:	d925      	bls.n	8009f30 <USB_EPStartXfer+0x1102>
 8009ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ee8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	691b      	ldr	r3, [r3, #16]
 8009ef0:	095b      	lsrs	r3, r3, #5
 8009ef2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009efa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	691b      	ldr	r3, [r3, #16]
 8009f02:	f003 031f 	and.w	r3, r3, #31
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d104      	bne.n	8009f14 <USB_EPStartXfer+0x10e6>
 8009f0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f0e:	3b01      	subs	r3, #1
 8009f10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	029b      	lsls	r3, r3, #10
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f26:	b29a      	uxth	r2, r3
 8009f28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f2c:	801a      	strh	r2, [r3, #0]
 8009f2e:	e06d      	b.n	800a00c <USB_EPStartXfer+0x11de>
 8009f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	691b      	ldr	r3, [r3, #16]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d116      	bne.n	8009f6e <USB_EPStartXfer+0x1140>
 8009f40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f44:	881b      	ldrh	r3, [r3, #0]
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f4c:	b29a      	uxth	r2, r3
 8009f4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f52:	801a      	strh	r2, [r3, #0]
 8009f54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f58:	881b      	ldrh	r3, [r3, #0]
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f64:	b29a      	uxth	r2, r3
 8009f66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f6a:	801a      	strh	r2, [r3, #0]
 8009f6c:	e04e      	b.n	800a00c <USB_EPStartXfer+0x11de>
 8009f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	691b      	ldr	r3, [r3, #16]
 8009f7a:	085b      	lsrs	r3, r3, #1
 8009f7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009f80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	691b      	ldr	r3, [r3, #16]
 8009f8c:	f003 0301 	and.w	r3, r3, #1
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d004      	beq.n	8009f9e <USB_EPStartXfer+0x1170>
 8009f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f98:	3301      	adds	r3, #1
 8009f9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	029b      	lsls	r3, r3, #10
 8009fa6:	b29a      	uxth	r2, r3
 8009fa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009fac:	801a      	strh	r2, [r3, #0]
 8009fae:	e02d      	b.n	800a00c <USB_EPStartXfer+0x11de>
 8009fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	785b      	ldrb	r3, [r3, #1]
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d125      	bne.n	800a00c <USB_EPStartXfer+0x11de>
 8009fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009fd6:	4413      	add	r3, r2
 8009fd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	00da      	lsls	r2, r3, #3
 8009fea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009fee:	4413      	add	r3, r2
 8009ff0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009ff4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	691b      	ldr	r3, [r3, #16]
 800a004:	b29a      	uxth	r2, r3
 800a006:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a00a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a00c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a010:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	69db      	ldr	r3, [r3, #28]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	f000 81fe 	beq.w	800a41a <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a01e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a022:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a02c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	4413      	add	r3, r2
 800a038:	881b      	ldrh	r3, [r3, #0]
 800a03a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a03e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a046:	2b00      	cmp	r3, #0
 800a048:	d005      	beq.n	800a056 <USB_EPStartXfer+0x1228>
 800a04a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a04e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a052:	2b00      	cmp	r3, #0
 800a054:	d10d      	bne.n	800a072 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a056:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a05a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a05e:	2b00      	cmp	r3, #0
 800a060:	f040 81db 	bne.w	800a41a <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a064:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	f040 81d4 	bne.w	800a41a <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a076:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a080:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	781b      	ldrb	r3, [r3, #0]
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	4413      	add	r3, r2
 800a08c:	881b      	ldrh	r3, [r3, #0]
 800a08e:	b29b      	uxth	r3, r3
 800a090:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a098:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800a09c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	009b      	lsls	r3, r3, #2
 800a0b4:	441a      	add	r2, r3
 800a0b6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800a0ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	8013      	strh	r3, [r2, #0]
 800a0ce:	e1a4      	b.n	800a41a <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a0d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	78db      	ldrb	r3, [r3, #3]
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	f040 819a 	bne.w	800a416 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a0e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	699a      	ldr	r2, [r3, #24]
 800a0ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	691b      	ldr	r3, [r3, #16]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d917      	bls.n	800a12e <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800a0fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	691b      	ldr	r3, [r3, #16]
 800a10a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800a10e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a112:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	699a      	ldr	r2, [r3, #24]
 800a11a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a11e:	1ad2      	subs	r2, r2, r3
 800a120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	619a      	str	r2, [r3, #24]
 800a12c:	e00e      	b.n	800a14c <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800a12e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	699b      	ldr	r3, [r3, #24]
 800a13a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800a13e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	2200      	movs	r2, #0
 800a14a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a14c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	785b      	ldrb	r3, [r3, #1]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d178      	bne.n	800a24e <USB_EPStartXfer+0x1420>
 800a15c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a160:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a16a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a16e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a178:	b29b      	uxth	r3, r3
 800a17a:	461a      	mov	r2, r3
 800a17c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a180:	4413      	add	r3, r2
 800a182:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a18a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	00da      	lsls	r2, r3, #3
 800a194:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a198:	4413      	add	r3, r2
 800a19a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a19e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a1a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1a6:	2b3e      	cmp	r3, #62	; 0x3e
 800a1a8:	d91d      	bls.n	800a1e6 <USB_EPStartXfer+0x13b8>
 800a1aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1ae:	095b      	lsrs	r3, r3, #5
 800a1b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a1b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1b8:	f003 031f 	and.w	r3, r3, #31
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d104      	bne.n	800a1ca <USB_EPStartXfer+0x139c>
 800a1c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a1ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	029b      	lsls	r3, r3, #10
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1dc:	b29a      	uxth	r2, r3
 800a1de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a1e2:	801a      	strh	r2, [r3, #0]
 800a1e4:	e064      	b.n	800a2b0 <USB_EPStartXfer+0x1482>
 800a1e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d116      	bne.n	800a21c <USB_EPStartXfer+0x13ee>
 800a1ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a1f2:	881b      	ldrh	r3, [r3, #0]
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a1fa:	b29a      	uxth	r2, r3
 800a1fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a200:	801a      	strh	r2, [r3, #0]
 800a202:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a206:	881b      	ldrh	r3, [r3, #0]
 800a208:	b29b      	uxth	r3, r3
 800a20a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a20e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a212:	b29a      	uxth	r2, r3
 800a214:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a218:	801a      	strh	r2, [r3, #0]
 800a21a:	e049      	b.n	800a2b0 <USB_EPStartXfer+0x1482>
 800a21c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a220:	085b      	lsrs	r3, r3, #1
 800a222:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a22a:	f003 0301 	and.w	r3, r3, #1
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d004      	beq.n	800a23c <USB_EPStartXfer+0x140e>
 800a232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a236:	3301      	adds	r3, #1
 800a238:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a23c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a240:	b29b      	uxth	r3, r3
 800a242:	029b      	lsls	r3, r3, #10
 800a244:	b29a      	uxth	r2, r3
 800a246:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a24a:	801a      	strh	r2, [r3, #0]
 800a24c:	e030      	b.n	800a2b0 <USB_EPStartXfer+0x1482>
 800a24e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a252:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	785b      	ldrb	r3, [r3, #1]
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d128      	bne.n	800a2b0 <USB_EPStartXfer+0x1482>
 800a25e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a262:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a26c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a270:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	461a      	mov	r2, r3
 800a27e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a282:	4413      	add	r3, r2
 800a284:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a28c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	00da      	lsls	r2, r3, #3
 800a296:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a29a:	4413      	add	r3, r2
 800a29c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a2a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a2a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2a8:	b29a      	uxth	r2, r3
 800a2aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a2ae:	801a      	strh	r2, [r3, #0]
 800a2b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a2be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	785b      	ldrb	r3, [r3, #1]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d178      	bne.n	800a3c0 <USB_EPStartXfer+0x1592>
 800a2ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a2dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a2f2:	4413      	add	r3, r2
 800a2f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a2f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	00da      	lsls	r2, r3, #3
 800a306:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a30a:	4413      	add	r3, r2
 800a30c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a310:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a314:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a318:	2b3e      	cmp	r3, #62	; 0x3e
 800a31a:	d91d      	bls.n	800a358 <USB_EPStartXfer+0x152a>
 800a31c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a320:	095b      	lsrs	r3, r3, #5
 800a322:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a32a:	f003 031f 	and.w	r3, r3, #31
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d104      	bne.n	800a33c <USB_EPStartXfer+0x150e>
 800a332:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a336:	3b01      	subs	r3, #1
 800a338:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a33c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a340:	b29b      	uxth	r3, r3
 800a342:	029b      	lsls	r3, r3, #10
 800a344:	b29b      	uxth	r3, r3
 800a346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a34a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a34e:	b29a      	uxth	r2, r3
 800a350:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a354:	801a      	strh	r2, [r3, #0]
 800a356:	e060      	b.n	800a41a <USB_EPStartXfer+0x15ec>
 800a358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d116      	bne.n	800a38e <USB_EPStartXfer+0x1560>
 800a360:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a364:	881b      	ldrh	r3, [r3, #0]
 800a366:	b29b      	uxth	r3, r3
 800a368:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a36c:	b29a      	uxth	r2, r3
 800a36e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a372:	801a      	strh	r2, [r3, #0]
 800a374:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a378:	881b      	ldrh	r3, [r3, #0]
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a384:	b29a      	uxth	r2, r3
 800a386:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a38a:	801a      	strh	r2, [r3, #0]
 800a38c:	e045      	b.n	800a41a <USB_EPStartXfer+0x15ec>
 800a38e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a392:	085b      	lsrs	r3, r3, #1
 800a394:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a398:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a39c:	f003 0301 	and.w	r3, r3, #1
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d004      	beq.n	800a3ae <USB_EPStartXfer+0x1580>
 800a3a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a3ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	029b      	lsls	r3, r3, #10
 800a3b6:	b29a      	uxth	r2, r3
 800a3b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a3bc:	801a      	strh	r2, [r3, #0]
 800a3be:	e02c      	b.n	800a41a <USB_EPStartXfer+0x15ec>
 800a3c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	785b      	ldrb	r3, [r3, #1]
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d124      	bne.n	800a41a <USB_EPStartXfer+0x15ec>
 800a3d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a3e6:	4413      	add	r3, r2
 800a3e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a3ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	00da      	lsls	r2, r3, #3
 800a3fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a3fe:	4413      	add	r3, r2
 800a400:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a404:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a40c:	b29a      	uxth	r2, r3
 800a40e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a412:	801a      	strh	r2, [r3, #0]
 800a414:	e001      	b.n	800a41a <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800a416:	2301      	movs	r3, #1
 800a418:	e03a      	b.n	800a490 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a41a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a41e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a422:	681a      	ldr	r2, [r3, #0]
 800a424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	4413      	add	r3, r2
 800a434:	881b      	ldrh	r3, [r3, #0]
 800a436:	b29b      	uxth	r3, r3
 800a438:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a43c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a440:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a444:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a448:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a44c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a450:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a454:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a458:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a45c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a460:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a46a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	441a      	add	r2, r3
 800a476:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a47a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a47e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a48e:	2300      	movs	r3, #0
}
 800a490:	4618      	mov	r0, r3
 800a492:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a49a:	b480      	push	{r7}
 800a49c:	b085      	sub	sp, #20
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
 800a4a2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	785b      	ldrb	r3, [r3, #1]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d020      	beq.n	800a4ee <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	4413      	add	r3, r2
 800a4b6:	881b      	ldrh	r3, [r3, #0]
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4c2:	81bb      	strh	r3, [r7, #12]
 800a4c4:	89bb      	ldrh	r3, [r7, #12]
 800a4c6:	f083 0310 	eor.w	r3, r3, #16
 800a4ca:	81bb      	strh	r3, [r7, #12]
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	441a      	add	r2, r3
 800a4d6:	89bb      	ldrh	r3, [r7, #12]
 800a4d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	8013      	strh	r3, [r2, #0]
 800a4ec:	e01f      	b.n	800a52e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	009b      	lsls	r3, r3, #2
 800a4f6:	4413      	add	r3, r2
 800a4f8:	881b      	ldrh	r3, [r3, #0]
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a504:	81fb      	strh	r3, [r7, #14]
 800a506:	89fb      	ldrh	r3, [r7, #14]
 800a508:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a50c:	81fb      	strh	r3, [r7, #14]
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	441a      	add	r2, r3
 800a518:	89fb      	ldrh	r3, [r7, #14]
 800a51a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a51e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a52e:	2300      	movs	r3, #0
}
 800a530:	4618      	mov	r0, r3
 800a532:	3714      	adds	r7, #20
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b087      	sub	sp, #28
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	7b1b      	ldrb	r3, [r3, #12]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	f040 809d 	bne.w	800a68a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	785b      	ldrb	r3, [r3, #1]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d04c      	beq.n	800a5f2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	781b      	ldrb	r3, [r3, #0]
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	4413      	add	r3, r2
 800a562:	881b      	ldrh	r3, [r3, #0]
 800a564:	823b      	strh	r3, [r7, #16]
 800a566:	8a3b      	ldrh	r3, [r7, #16]
 800a568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d01b      	beq.n	800a5a8 <USB_EPClearStall+0x6c>
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	4413      	add	r3, r2
 800a57a:	881b      	ldrh	r3, [r3, #0]
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a586:	81fb      	strh	r3, [r7, #14]
 800a588:	687a      	ldr	r2, [r7, #4]
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	441a      	add	r2, r3
 800a592:	89fb      	ldrh	r3, [r7, #14]
 800a594:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a598:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a59c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	78db      	ldrb	r3, [r3, #3]
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d06c      	beq.n	800a68a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a5b0:	687a      	ldr	r2, [r7, #4]
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	4413      	add	r3, r2
 800a5ba:	881b      	ldrh	r3, [r3, #0]
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5c6:	81bb      	strh	r3, [r7, #12]
 800a5c8:	89bb      	ldrh	r3, [r7, #12]
 800a5ca:	f083 0320 	eor.w	r3, r3, #32
 800a5ce:	81bb      	strh	r3, [r7, #12]
 800a5d0:	687a      	ldr	r2, [r7, #4]
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	441a      	add	r2, r3
 800a5da:	89bb      	ldrh	r3, [r7, #12]
 800a5dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	8013      	strh	r3, [r2, #0]
 800a5f0:	e04b      	b.n	800a68a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	009b      	lsls	r3, r3, #2
 800a5fa:	4413      	add	r3, r2
 800a5fc:	881b      	ldrh	r3, [r3, #0]
 800a5fe:	82fb      	strh	r3, [r7, #22]
 800a600:	8afb      	ldrh	r3, [r7, #22]
 800a602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a606:	2b00      	cmp	r3, #0
 800a608:	d01b      	beq.n	800a642 <USB_EPClearStall+0x106>
 800a60a:	687a      	ldr	r2, [r7, #4]
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	781b      	ldrb	r3, [r3, #0]
 800a610:	009b      	lsls	r3, r3, #2
 800a612:	4413      	add	r3, r2
 800a614:	881b      	ldrh	r3, [r3, #0]
 800a616:	b29b      	uxth	r3, r3
 800a618:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a61c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a620:	82bb      	strh	r3, [r7, #20]
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	441a      	add	r2, r3
 800a62c:	8abb      	ldrh	r3, [r7, #20]
 800a62e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a636:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a63a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a63e:	b29b      	uxth	r3, r3
 800a640:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	781b      	ldrb	r3, [r3, #0]
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	4413      	add	r3, r2
 800a64c:	881b      	ldrh	r3, [r3, #0]
 800a64e:	b29b      	uxth	r3, r3
 800a650:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a658:	827b      	strh	r3, [r7, #18]
 800a65a:	8a7b      	ldrh	r3, [r7, #18]
 800a65c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a660:	827b      	strh	r3, [r7, #18]
 800a662:	8a7b      	ldrh	r3, [r7, #18]
 800a664:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a668:	827b      	strh	r3, [r7, #18]
 800a66a:	687a      	ldr	r2, [r7, #4]
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	441a      	add	r2, r3
 800a674:	8a7b      	ldrh	r3, [r7, #18]
 800a676:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a67a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a67e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a686:	b29b      	uxth	r3, r3
 800a688:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	371c      	adds	r7, #28
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a6a4:	78fb      	ldrb	r3, [r7, #3]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d103      	bne.n	800a6b2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2280      	movs	r2, #128	; 0x80
 800a6ae:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a6b2:	2300      	movs	r3, #0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	370c      	adds	r7, #12
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr

0800a6c0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6d8:	b29a      	uxth	r2, r3
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a6e0:	2300      	movs	r3, #0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	370c      	adds	r7, #12
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr

0800a6ee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a6ee:	b480      	push	{r7}
 800a6f0:	b085      	sub	sp, #20
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a6fc:	b29b      	uxth	r3, r3
 800a6fe:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a700:	68fb      	ldr	r3, [r7, #12]
}
 800a702:	4618      	mov	r0, r3
 800a704:	3714      	adds	r7, #20
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr

0800a70e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a70e:	b480      	push	{r7}
 800a710:	b08d      	sub	sp, #52	; 0x34
 800a712:	af00      	add	r7, sp, #0
 800a714:	60f8      	str	r0, [r7, #12]
 800a716:	60b9      	str	r1, [r7, #8]
 800a718:	4611      	mov	r1, r2
 800a71a:	461a      	mov	r2, r3
 800a71c:	460b      	mov	r3, r1
 800a71e:	80fb      	strh	r3, [r7, #6]
 800a720:	4613      	mov	r3, r2
 800a722:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a724:	88bb      	ldrh	r3, [r7, #4]
 800a726:	3301      	adds	r3, #1
 800a728:	085b      	lsrs	r3, r3, #1
 800a72a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a734:	88fa      	ldrh	r2, [r7, #6]
 800a736:	69fb      	ldr	r3, [r7, #28]
 800a738:	4413      	add	r3, r2
 800a73a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a73e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a740:	6a3b      	ldr	r3, [r7, #32]
 800a742:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a744:	e01b      	b.n	800a77e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800a746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74e:	3301      	adds	r3, #1
 800a750:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	b29b      	uxth	r3, r3
 800a758:	021b      	lsls	r3, r3, #8
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	461a      	mov	r2, r3
 800a75e:	69bb      	ldr	r3, [r7, #24]
 800a760:	4313      	orrs	r3, r2
 800a762:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	b29a      	uxth	r2, r3
 800a768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76e:	3302      	adds	r3, #2
 800a770:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a774:	3301      	adds	r3, #1
 800a776:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a77a:	3b01      	subs	r3, #1
 800a77c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a780:	2b00      	cmp	r3, #0
 800a782:	d1e0      	bne.n	800a746 <USB_WritePMA+0x38>
  }
}
 800a784:	bf00      	nop
 800a786:	bf00      	nop
 800a788:	3734      	adds	r7, #52	; 0x34
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr

0800a792 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a792:	b480      	push	{r7}
 800a794:	b08b      	sub	sp, #44	; 0x2c
 800a796:	af00      	add	r7, sp, #0
 800a798:	60f8      	str	r0, [r7, #12]
 800a79a:	60b9      	str	r1, [r7, #8]
 800a79c:	4611      	mov	r1, r2
 800a79e:	461a      	mov	r2, r3
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	80fb      	strh	r3, [r7, #6]
 800a7a4:	4613      	mov	r3, r2
 800a7a6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a7a8:	88bb      	ldrh	r3, [r7, #4]
 800a7aa:	085b      	lsrs	r3, r3, #1
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a7b8:	88fa      	ldrh	r2, [r7, #6]
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	4413      	add	r3, r2
 800a7be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a7c2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a7c4:	69bb      	ldr	r3, [r7, #24]
 800a7c6:	627b      	str	r3, [r7, #36]	; 0x24
 800a7c8:	e018      	b.n	800a7fc <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a7ca:	6a3b      	ldr	r3, [r7, #32]
 800a7cc:	881b      	ldrh	r3, [r3, #0]
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a7d2:	6a3b      	ldr	r3, [r7, #32]
 800a7d4:	3302      	adds	r3, #2
 800a7d6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	b2da      	uxtb	r2, r3
 800a7dc:	69fb      	ldr	r3, [r7, #28]
 800a7de:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a7e0:	69fb      	ldr	r3, [r7, #28]
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	0a1b      	lsrs	r3, r3, #8
 800a7ea:	b2da      	uxtb	r2, r3
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a7f0:	69fb      	ldr	r3, [r7, #28]
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800a7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f8:	3b01      	subs	r3, #1
 800a7fa:	627b      	str	r3, [r7, #36]	; 0x24
 800a7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d1e3      	bne.n	800a7ca <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a802:	88bb      	ldrh	r3, [r7, #4]
 800a804:	f003 0301 	and.w	r3, r3, #1
 800a808:	b29b      	uxth	r3, r3
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d007      	beq.n	800a81e <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800a80e:	6a3b      	ldr	r3, [r7, #32]
 800a810:	881b      	ldrh	r3, [r3, #0]
 800a812:	b29b      	uxth	r3, r3
 800a814:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	b2da      	uxtb	r2, r3
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	701a      	strb	r2, [r3, #0]
  }
}
 800a81e:	bf00      	nop
 800a820:	372c      	adds	r7, #44	; 0x2c
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr

0800a82a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b084      	sub	sp, #16
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
 800a832:	460b      	mov	r3, r1
 800a834:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a836:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a83a:	f002 f8c1 	bl	800c9c0 <USBD_static_malloc>
 800a83e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d105      	bne.n	800a852 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2200      	movs	r2, #0
 800a84a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a84e:	2302      	movs	r3, #2
 800a850:	e066      	b.n	800a920 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	68fa      	ldr	r2, [r7, #12]
 800a856:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	7c1b      	ldrb	r3, [r3, #16]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d119      	bne.n	800a896 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a862:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a866:	2202      	movs	r2, #2
 800a868:	2181      	movs	r1, #129	; 0x81
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f001 ff4d 	bl	800c70a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2201      	movs	r2, #1
 800a874:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a876:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a87a:	2202      	movs	r2, #2
 800a87c:	2101      	movs	r1, #1
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f001 ff43 	bl	800c70a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2201      	movs	r2, #1
 800a888:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2210      	movs	r2, #16
 800a890:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a894:	e016      	b.n	800a8c4 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a896:	2340      	movs	r3, #64	; 0x40
 800a898:	2202      	movs	r2, #2
 800a89a:	2181      	movs	r1, #129	; 0x81
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f001 ff34 	bl	800c70a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a8a8:	2340      	movs	r3, #64	; 0x40
 800a8aa:	2202      	movs	r2, #2
 800a8ac:	2101      	movs	r1, #1
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f001 ff2b 	bl	800c70a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2210      	movs	r2, #16
 800a8c0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a8c4:	2308      	movs	r3, #8
 800a8c6:	2203      	movs	r2, #3
 800a8c8:	2182      	movs	r1, #130	; 0x82
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f001 ff1d 	bl	800c70a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	7c1b      	ldrb	r3, [r3, #16]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d109      	bne.n	800a90e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a900:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a904:	2101      	movs	r1, #1
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f001 ffef 	bl	800c8ea <USBD_LL_PrepareReceive>
 800a90c:	e007      	b.n	800a91e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a914:	2340      	movs	r3, #64	; 0x40
 800a916:	2101      	movs	r1, #1
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f001 ffe6 	bl	800c8ea <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a91e:	2300      	movs	r3, #0
}
 800a920:	4618      	mov	r0, r3
 800a922:	3710      	adds	r7, #16
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b082      	sub	sp, #8
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	460b      	mov	r3, r1
 800a932:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a934:	2181      	movs	r1, #129	; 0x81
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f001 ff0d 	bl	800c756 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2200      	movs	r2, #0
 800a940:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a942:	2101      	movs	r1, #1
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f001 ff06 	bl	800c756 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a952:	2182      	movs	r1, #130	; 0x82
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f001 fefe 	bl	800c756 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2200      	movs	r2, #0
 800a966:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a970:	2b00      	cmp	r3, #0
 800a972:	d00e      	beq.n	800a992 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a984:	4618      	mov	r0, r3
 800a986:	f002 f829 	bl	800c9dc <USBD_static_free>
    pdev->pClassData = NULL;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2200      	movs	r2, #0
 800a98e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a992:	2300      	movs	r3, #0
}
 800a994:	4618      	mov	r0, r3
 800a996:	3708      	adds	r7, #8
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b086      	sub	sp, #24
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a9ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d101      	bne.n	800a9c4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a9c0:	2303      	movs	r3, #3
 800a9c2:	e0af      	b.n	800ab24 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d03f      	beq.n	800aa50 <USBD_CDC_Setup+0xb4>
 800a9d0:	2b20      	cmp	r3, #32
 800a9d2:	f040 809f 	bne.w	800ab14 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	88db      	ldrh	r3, [r3, #6]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d02e      	beq.n	800aa3c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	b25b      	sxtb	r3, r3
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	da16      	bge.n	800aa16 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	683a      	ldr	r2, [r7, #0]
 800a9f2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a9f4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a9f6:	683a      	ldr	r2, [r7, #0]
 800a9f8:	88d2      	ldrh	r2, [r2, #6]
 800a9fa:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	88db      	ldrh	r3, [r3, #6]
 800aa00:	2b07      	cmp	r3, #7
 800aa02:	bf28      	it	cs
 800aa04:	2307      	movcs	r3, #7
 800aa06:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	89fa      	ldrh	r2, [r7, #14]
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f001 fa9f 	bl	800bf52 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800aa14:	e085      	b.n	800ab22 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	785a      	ldrb	r2, [r3, #1]
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	88db      	ldrh	r3, [r3, #6]
 800aa24:	b2da      	uxtb	r2, r3
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800aa2c:	6939      	ldr	r1, [r7, #16]
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	88db      	ldrh	r3, [r3, #6]
 800aa32:	461a      	mov	r2, r3
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f001 fab8 	bl	800bfaa <USBD_CtlPrepareRx>
      break;
 800aa3a:	e072      	b.n	800ab22 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	683a      	ldr	r2, [r7, #0]
 800aa46:	7850      	ldrb	r0, [r2, #1]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	6839      	ldr	r1, [r7, #0]
 800aa4c:	4798      	blx	r3
      break;
 800aa4e:	e068      	b.n	800ab22 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	785b      	ldrb	r3, [r3, #1]
 800aa54:	2b0b      	cmp	r3, #11
 800aa56:	d852      	bhi.n	800aafe <USBD_CDC_Setup+0x162>
 800aa58:	a201      	add	r2, pc, #4	; (adr r2, 800aa60 <USBD_CDC_Setup+0xc4>)
 800aa5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa5e:	bf00      	nop
 800aa60:	0800aa91 	.word	0x0800aa91
 800aa64:	0800ab0d 	.word	0x0800ab0d
 800aa68:	0800aaff 	.word	0x0800aaff
 800aa6c:	0800aaff 	.word	0x0800aaff
 800aa70:	0800aaff 	.word	0x0800aaff
 800aa74:	0800aaff 	.word	0x0800aaff
 800aa78:	0800aaff 	.word	0x0800aaff
 800aa7c:	0800aaff 	.word	0x0800aaff
 800aa80:	0800aaff 	.word	0x0800aaff
 800aa84:	0800aaff 	.word	0x0800aaff
 800aa88:	0800aabb 	.word	0x0800aabb
 800aa8c:	0800aae5 	.word	0x0800aae5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	2b03      	cmp	r3, #3
 800aa9a:	d107      	bne.n	800aaac <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800aa9c:	f107 030a 	add.w	r3, r7, #10
 800aaa0:	2202      	movs	r2, #2
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f001 fa54 	bl	800bf52 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aaaa:	e032      	b.n	800ab12 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800aaac:	6839      	ldr	r1, [r7, #0]
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f001 f9de 	bl	800be70 <USBD_CtlError>
            ret = USBD_FAIL;
 800aab4:	2303      	movs	r3, #3
 800aab6:	75fb      	strb	r3, [r7, #23]
          break;
 800aab8:	e02b      	b.n	800ab12 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	2b03      	cmp	r3, #3
 800aac4:	d107      	bne.n	800aad6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800aac6:	f107 030d 	add.w	r3, r7, #13
 800aaca:	2201      	movs	r2, #1
 800aacc:	4619      	mov	r1, r3
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f001 fa3f 	bl	800bf52 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aad4:	e01d      	b.n	800ab12 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800aad6:	6839      	ldr	r1, [r7, #0]
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f001 f9c9 	bl	800be70 <USBD_CtlError>
            ret = USBD_FAIL;
 800aade:	2303      	movs	r3, #3
 800aae0:	75fb      	strb	r3, [r7, #23]
          break;
 800aae2:	e016      	b.n	800ab12 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	2b03      	cmp	r3, #3
 800aaee:	d00f      	beq.n	800ab10 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800aaf0:	6839      	ldr	r1, [r7, #0]
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f001 f9bc 	bl	800be70 <USBD_CtlError>
            ret = USBD_FAIL;
 800aaf8:	2303      	movs	r3, #3
 800aafa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aafc:	e008      	b.n	800ab10 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aafe:	6839      	ldr	r1, [r7, #0]
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f001 f9b5 	bl	800be70 <USBD_CtlError>
          ret = USBD_FAIL;
 800ab06:	2303      	movs	r3, #3
 800ab08:	75fb      	strb	r3, [r7, #23]
          break;
 800ab0a:	e002      	b.n	800ab12 <USBD_CDC_Setup+0x176>
          break;
 800ab0c:	bf00      	nop
 800ab0e:	e008      	b.n	800ab22 <USBD_CDC_Setup+0x186>
          break;
 800ab10:	bf00      	nop
      }
      break;
 800ab12:	e006      	b.n	800ab22 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800ab14:	6839      	ldr	r1, [r7, #0]
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f001 f9aa 	bl	800be70 <USBD_CtlError>
      ret = USBD_FAIL;
 800ab1c:	2303      	movs	r3, #3
 800ab1e:	75fb      	strb	r3, [r7, #23]
      break;
 800ab20:	bf00      	nop
  }

  return (uint8_t)ret;
 800ab22:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3718      	adds	r7, #24
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b084      	sub	sp, #16
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	460b      	mov	r3, r1
 800ab36:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ab3e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d101      	bne.n	800ab4e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ab4a:	2303      	movs	r3, #3
 800ab4c:	e04f      	b.n	800abee <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab54:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ab56:	78fa      	ldrb	r2, [r7, #3]
 800ab58:	6879      	ldr	r1, [r7, #4]
 800ab5a:	4613      	mov	r3, r2
 800ab5c:	009b      	lsls	r3, r3, #2
 800ab5e:	4413      	add	r3, r2
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	440b      	add	r3, r1
 800ab64:	3318      	adds	r3, #24
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d029      	beq.n	800abc0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ab6c:	78fa      	ldrb	r2, [r7, #3]
 800ab6e:	6879      	ldr	r1, [r7, #4]
 800ab70:	4613      	mov	r3, r2
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	4413      	add	r3, r2
 800ab76:	009b      	lsls	r3, r3, #2
 800ab78:	440b      	add	r3, r1
 800ab7a:	3318      	adds	r3, #24
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	78f9      	ldrb	r1, [r7, #3]
 800ab80:	68f8      	ldr	r0, [r7, #12]
 800ab82:	460b      	mov	r3, r1
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	440b      	add	r3, r1
 800ab88:	00db      	lsls	r3, r3, #3
 800ab8a:	4403      	add	r3, r0
 800ab8c:	3338      	adds	r3, #56	; 0x38
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	fbb2 f1f3 	udiv	r1, r2, r3
 800ab94:	fb01 f303 	mul.w	r3, r1, r3
 800ab98:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d110      	bne.n	800abc0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ab9e:	78fa      	ldrb	r2, [r7, #3]
 800aba0:	6879      	ldr	r1, [r7, #4]
 800aba2:	4613      	mov	r3, r2
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	4413      	add	r3, r2
 800aba8:	009b      	lsls	r3, r3, #2
 800abaa:	440b      	add	r3, r1
 800abac:	3318      	adds	r3, #24
 800abae:	2200      	movs	r2, #0
 800abb0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800abb2:	78f9      	ldrb	r1, [r7, #3]
 800abb4:	2300      	movs	r3, #0
 800abb6:	2200      	movs	r2, #0
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f001 fe75 	bl	800c8a8 <USBD_LL_Transmit>
 800abbe:	e015      	b.n	800abec <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	2200      	movs	r2, #0
 800abc4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abce:	691b      	ldr	r3, [r3, #16]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d00b      	beq.n	800abec <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abda:	691b      	ldr	r3, [r3, #16]
 800abdc:	68ba      	ldr	r2, [r7, #8]
 800abde:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800abe2:	68ba      	ldr	r2, [r7, #8]
 800abe4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800abe8:	78fa      	ldrb	r2, [r7, #3]
 800abea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800abec:	2300      	movs	r3, #0
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3710      	adds	r7, #16
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}

0800abf6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800abf6:	b580      	push	{r7, lr}
 800abf8:	b084      	sub	sp, #16
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
 800abfe:	460b      	mov	r3, r1
 800ac00:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac08:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d101      	bne.n	800ac18 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ac14:	2303      	movs	r3, #3
 800ac16:	e015      	b.n	800ac44 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ac18:	78fb      	ldrb	r3, [r7, #3]
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f001 fe85 	bl	800c92c <USBD_LL_GetRxDataSize>
 800ac22:	4602      	mov	r2, r0
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac30:	68db      	ldr	r3, [r3, #12]
 800ac32:	68fa      	ldr	r2, [r7, #12]
 800ac34:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ac3e:	4611      	mov	r1, r2
 800ac40:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ac42:	2300      	movs	r3, #0
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3710      	adds	r7, #16
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac5a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d101      	bne.n	800ac66 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800ac62:	2303      	movs	r3, #3
 800ac64:	e01b      	b.n	800ac9e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d015      	beq.n	800ac9c <USBD_CDC_EP0_RxReady+0x50>
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ac76:	2bff      	cmp	r3, #255	; 0xff
 800ac78:	d010      	beq.n	800ac9c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac80:	689b      	ldr	r3, [r3, #8]
 800ac82:	68fa      	ldr	r2, [r7, #12]
 800ac84:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800ac88:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ac8a:	68fa      	ldr	r2, [r7, #12]
 800ac8c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ac90:	b292      	uxth	r2, r2
 800ac92:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	22ff      	movs	r2, #255	; 0xff
 800ac98:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ac9c:	2300      	movs	r3, #0
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3710      	adds	r7, #16
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
	...

0800aca8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b083      	sub	sp, #12
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2243      	movs	r2, #67	; 0x43
 800acb4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800acb6:	4b03      	ldr	r3, [pc, #12]	; (800acc4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800acb8:	4618      	mov	r0, r3
 800acba:	370c      	adds	r7, #12
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr
 800acc4:	20002768 	.word	0x20002768

0800acc8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800acc8:	b480      	push	{r7}
 800acca:	b083      	sub	sp, #12
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2243      	movs	r2, #67	; 0x43
 800acd4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800acd6:	4b03      	ldr	r3, [pc, #12]	; (800ace4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800acd8:	4618      	mov	r0, r3
 800acda:	370c      	adds	r7, #12
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr
 800ace4:	20002724 	.word	0x20002724

0800ace8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ace8:	b480      	push	{r7}
 800acea:	b083      	sub	sp, #12
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2243      	movs	r2, #67	; 0x43
 800acf4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800acf6:	4b03      	ldr	r3, [pc, #12]	; (800ad04 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	370c      	adds	r7, #12
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr
 800ad04:	200027ac 	.word	0x200027ac

0800ad08 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	220a      	movs	r2, #10
 800ad14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ad16:	4b03      	ldr	r3, [pc, #12]	; (800ad24 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	370c      	adds	r7, #12
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr
 800ad24:	200026e0 	.word	0x200026e0

0800ad28 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d101      	bne.n	800ad3c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ad38:	2303      	movs	r3, #3
 800ad3a:	e004      	b.n	800ad46 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	683a      	ldr	r2, [r7, #0]
 800ad40:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800ad44:	2300      	movs	r3, #0
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	370c      	adds	r7, #12
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr

0800ad52 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ad52:	b480      	push	{r7}
 800ad54:	b087      	sub	sp, #28
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	60f8      	str	r0, [r7, #12]
 800ad5a:	60b9      	str	r1, [r7, #8]
 800ad5c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad64:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d101      	bne.n	800ad70 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ad6c:	2303      	movs	r3, #3
 800ad6e:	e008      	b.n	800ad82 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	68ba      	ldr	r2, [r7, #8]
 800ad74:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ad80:	2300      	movs	r3, #0
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	371c      	adds	r7, #28
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr

0800ad8e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ad8e:	b480      	push	{r7}
 800ad90:	b085      	sub	sp, #20
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
 800ad96:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad9e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d101      	bne.n	800adaa <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800ada6:	2303      	movs	r3, #3
 800ada8:	e004      	b.n	800adb4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	683a      	ldr	r2, [r7, #0]
 800adae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800adb2:	2300      	movs	r3, #0
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3714      	adds	r7, #20
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr

0800adc0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b084      	sub	sp, #16
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800adce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800add6:	2b00      	cmp	r3, #0
 800add8:	d101      	bne.n	800adde <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800adda:	2303      	movs	r3, #3
 800addc:	e016      	b.n	800ae0c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	7c1b      	ldrb	r3, [r3, #16]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d109      	bne.n	800adfa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800adec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800adf0:	2101      	movs	r1, #1
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f001 fd79 	bl	800c8ea <USBD_LL_PrepareReceive>
 800adf8:	e007      	b.n	800ae0a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae00:	2340      	movs	r3, #64	; 0x40
 800ae02:	2101      	movs	r1, #1
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f001 fd70 	bl	800c8ea <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ae0a:	2300      	movs	r3, #0
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3710      	adds	r7, #16
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b086      	sub	sp, #24
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	4613      	mov	r3, r2
 800ae20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d101      	bne.n	800ae2c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ae28:	2303      	movs	r3, #3
 800ae2a:	e01f      	b.n	800ae6c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2200      	movs	r2, #0
 800ae38:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d003      	beq.n	800ae52 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	68ba      	ldr	r2, [r7, #8]
 800ae4e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2201      	movs	r2, #1
 800ae56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	79fa      	ldrb	r2, [r7, #7]
 800ae5e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ae60:	68f8      	ldr	r0, [r7, #12]
 800ae62:	f001 fbd7 	bl	800c614 <USBD_LL_Init>
 800ae66:	4603      	mov	r3, r0
 800ae68:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ae6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3718      	adds	r7, #24
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b084      	sub	sp, #16
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d101      	bne.n	800ae8c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ae88:	2303      	movs	r3, #3
 800ae8a:	e016      	b.n	800aeba <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	683a      	ldr	r2, [r7, #0]
 800ae90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d00b      	beq.n	800aeb8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea8:	f107 020e 	add.w	r2, r7, #14
 800aeac:	4610      	mov	r0, r2
 800aeae:	4798      	blx	r3
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800aeb8:	2300      	movs	r3, #0
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3710      	adds	r7, #16
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}

0800aec2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aec2:	b580      	push	{r7, lr}
 800aec4:	b082      	sub	sp, #8
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f001 fc02 	bl	800c6d4 <USBD_LL_Start>
 800aed0:	4603      	mov	r3, r0
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3708      	adds	r7, #8
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800aeda:	b480      	push	{r7}
 800aedc:	b083      	sub	sp, #12
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aee2:	2300      	movs	r3, #0
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	370c      	adds	r7, #12
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr

0800aef0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b084      	sub	sp, #16
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	460b      	mov	r3, r1
 800aefa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800aefc:	2303      	movs	r3, #3
 800aefe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af06:	2b00      	cmp	r3, #0
 800af08:	d009      	beq.n	800af1e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	78fa      	ldrb	r2, [r7, #3]
 800af14:	4611      	mov	r1, r2
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	4798      	blx	r3
 800af1a:	4603      	mov	r3, r0
 800af1c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800af1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af20:	4618      	mov	r0, r3
 800af22:	3710      	adds	r7, #16
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	460b      	mov	r3, r1
 800af32:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d007      	beq.n	800af4e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	78fa      	ldrb	r2, [r7, #3]
 800af48:	4611      	mov	r1, r2
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	4798      	blx	r3
  }

  return USBD_OK;
 800af4e:	2300      	movs	r3, #0
}
 800af50:	4618      	mov	r0, r3
 800af52:	3708      	adds	r7, #8
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800af68:	6839      	ldr	r1, [r7, #0]
 800af6a:	4618      	mov	r0, r3
 800af6c:	f000 ff46 	bl	800bdfc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800af7e:	461a      	mov	r2, r3
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800af8c:	f003 031f 	and.w	r3, r3, #31
 800af90:	2b02      	cmp	r3, #2
 800af92:	d01a      	beq.n	800afca <USBD_LL_SetupStage+0x72>
 800af94:	2b02      	cmp	r3, #2
 800af96:	d822      	bhi.n	800afde <USBD_LL_SetupStage+0x86>
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d002      	beq.n	800afa2 <USBD_LL_SetupStage+0x4a>
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d00a      	beq.n	800afb6 <USBD_LL_SetupStage+0x5e>
 800afa0:	e01d      	b.n	800afde <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800afa8:	4619      	mov	r1, r3
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 f9ee 	bl	800b38c <USBD_StdDevReq>
 800afb0:	4603      	mov	r3, r0
 800afb2:	73fb      	strb	r3, [r7, #15]
      break;
 800afb4:	e020      	b.n	800aff8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800afbc:	4619      	mov	r1, r3
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 fa52 	bl	800b468 <USBD_StdItfReq>
 800afc4:	4603      	mov	r3, r0
 800afc6:	73fb      	strb	r3, [r7, #15]
      break;
 800afc8:	e016      	b.n	800aff8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800afd0:	4619      	mov	r1, r3
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f000 fa91 	bl	800b4fa <USBD_StdEPReq>
 800afd8:	4603      	mov	r3, r0
 800afda:	73fb      	strb	r3, [r7, #15]
      break;
 800afdc:	e00c      	b.n	800aff8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800afe4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	4619      	mov	r1, r3
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f001 fbd1 	bl	800c794 <USBD_LL_StallEP>
 800aff2:	4603      	mov	r3, r0
 800aff4:	73fb      	strb	r3, [r7, #15]
      break;
 800aff6:	bf00      	nop
  }

  return ret;
 800aff8:	7bfb      	ldrb	r3, [r7, #15]
}
 800affa:	4618      	mov	r0, r3
 800affc:	3710      	adds	r7, #16
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}

0800b002 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b002:	b580      	push	{r7, lr}
 800b004:	b086      	sub	sp, #24
 800b006:	af00      	add	r7, sp, #0
 800b008:	60f8      	str	r0, [r7, #12]
 800b00a:	460b      	mov	r3, r1
 800b00c:	607a      	str	r2, [r7, #4]
 800b00e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b010:	7afb      	ldrb	r3, [r7, #11]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d138      	bne.n	800b088 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b01c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b024:	2b03      	cmp	r3, #3
 800b026:	d14a      	bne.n	800b0be <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	689a      	ldr	r2, [r3, #8]
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	68db      	ldr	r3, [r3, #12]
 800b030:	429a      	cmp	r2, r3
 800b032:	d913      	bls.n	800b05c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	689a      	ldr	r2, [r3, #8]
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	1ad2      	subs	r2, r2, r3
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	68da      	ldr	r2, [r3, #12]
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	4293      	cmp	r3, r2
 800b04c:	bf28      	it	cs
 800b04e:	4613      	movcs	r3, r2
 800b050:	461a      	mov	r2, r3
 800b052:	6879      	ldr	r1, [r7, #4]
 800b054:	68f8      	ldr	r0, [r7, #12]
 800b056:	f000 ffc5 	bl	800bfe4 <USBD_CtlContinueRx>
 800b05a:	e030      	b.n	800b0be <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b062:	b2db      	uxtb	r3, r3
 800b064:	2b03      	cmp	r3, #3
 800b066:	d10b      	bne.n	800b080 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b06e:	691b      	ldr	r3, [r3, #16]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d005      	beq.n	800b080 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b07a:	691b      	ldr	r3, [r3, #16]
 800b07c:	68f8      	ldr	r0, [r7, #12]
 800b07e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b080:	68f8      	ldr	r0, [r7, #12]
 800b082:	f000 ffc0 	bl	800c006 <USBD_CtlSendStatus>
 800b086:	e01a      	b.n	800b0be <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	2b03      	cmp	r3, #3
 800b092:	d114      	bne.n	800b0be <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b09a:	699b      	ldr	r3, [r3, #24]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d00e      	beq.n	800b0be <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0a6:	699b      	ldr	r3, [r3, #24]
 800b0a8:	7afa      	ldrb	r2, [r7, #11]
 800b0aa:	4611      	mov	r1, r2
 800b0ac:	68f8      	ldr	r0, [r7, #12]
 800b0ae:	4798      	blx	r3
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b0b4:	7dfb      	ldrb	r3, [r7, #23]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d001      	beq.n	800b0be <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b0ba:	7dfb      	ldrb	r3, [r7, #23]
 800b0bc:	e000      	b.n	800b0c0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b0be:	2300      	movs	r3, #0
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3718      	adds	r7, #24
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b086      	sub	sp, #24
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	60f8      	str	r0, [r7, #12]
 800b0d0:	460b      	mov	r3, r1
 800b0d2:	607a      	str	r2, [r7, #4]
 800b0d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b0d6:	7afb      	ldrb	r3, [r7, #11]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d16b      	bne.n	800b1b4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	3314      	adds	r3, #20
 800b0e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b0e8:	2b02      	cmp	r3, #2
 800b0ea:	d156      	bne.n	800b19a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	689a      	ldr	r2, [r3, #8]
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	68db      	ldr	r3, [r3, #12]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d914      	bls.n	800b122 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	689a      	ldr	r2, [r3, #8]
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	68db      	ldr	r3, [r3, #12]
 800b100:	1ad2      	subs	r2, r2, r3
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	689b      	ldr	r3, [r3, #8]
 800b10a:	461a      	mov	r2, r3
 800b10c:	6879      	ldr	r1, [r7, #4]
 800b10e:	68f8      	ldr	r0, [r7, #12]
 800b110:	f000 ff3a 	bl	800bf88 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b114:	2300      	movs	r3, #0
 800b116:	2200      	movs	r2, #0
 800b118:	2100      	movs	r1, #0
 800b11a:	68f8      	ldr	r0, [r7, #12]
 800b11c:	f001 fbe5 	bl	800c8ea <USBD_LL_PrepareReceive>
 800b120:	e03b      	b.n	800b19a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	68da      	ldr	r2, [r3, #12]
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	689b      	ldr	r3, [r3, #8]
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d11c      	bne.n	800b168 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	685a      	ldr	r2, [r3, #4]
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b136:	429a      	cmp	r2, r3
 800b138:	d316      	bcc.n	800b168 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	685a      	ldr	r2, [r3, #4]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b144:	429a      	cmp	r2, r3
 800b146:	d20f      	bcs.n	800b168 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b148:	2200      	movs	r2, #0
 800b14a:	2100      	movs	r1, #0
 800b14c:	68f8      	ldr	r0, [r7, #12]
 800b14e:	f000 ff1b 	bl	800bf88 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2200      	movs	r2, #0
 800b156:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b15a:	2300      	movs	r3, #0
 800b15c:	2200      	movs	r2, #0
 800b15e:	2100      	movs	r1, #0
 800b160:	68f8      	ldr	r0, [r7, #12]
 800b162:	f001 fbc2 	bl	800c8ea <USBD_LL_PrepareReceive>
 800b166:	e018      	b.n	800b19a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b16e:	b2db      	uxtb	r3, r3
 800b170:	2b03      	cmp	r3, #3
 800b172:	d10b      	bne.n	800b18c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b17a:	68db      	ldr	r3, [r3, #12]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d005      	beq.n	800b18c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	68f8      	ldr	r0, [r7, #12]
 800b18a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b18c:	2180      	movs	r1, #128	; 0x80
 800b18e:	68f8      	ldr	r0, [r7, #12]
 800b190:	f001 fb00 	bl	800c794 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b194:	68f8      	ldr	r0, [r7, #12]
 800b196:	f000 ff49 	bl	800c02c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d122      	bne.n	800b1ea <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b1a4:	68f8      	ldr	r0, [r7, #12]
 800b1a6:	f7ff fe98 	bl	800aeda <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b1b2:	e01a      	b.n	800b1ea <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1ba:	b2db      	uxtb	r3, r3
 800b1bc:	2b03      	cmp	r3, #3
 800b1be:	d114      	bne.n	800b1ea <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1c6:	695b      	ldr	r3, [r3, #20]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d00e      	beq.n	800b1ea <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1d2:	695b      	ldr	r3, [r3, #20]
 800b1d4:	7afa      	ldrb	r2, [r7, #11]
 800b1d6:	4611      	mov	r1, r2
 800b1d8:	68f8      	ldr	r0, [r7, #12]
 800b1da:	4798      	blx	r3
 800b1dc:	4603      	mov	r3, r0
 800b1de:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b1e0:	7dfb      	ldrb	r3, [r7, #23]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d001      	beq.n	800b1ea <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b1e6:	7dfb      	ldrb	r3, [r7, #23]
 800b1e8:	e000      	b.n	800b1ec <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b1ea:	2300      	movs	r3, #0
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3718      	adds	r7, #24
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2201      	movs	r2, #1
 800b200:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2200      	movs	r2, #0
 800b208:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2200      	movs	r2, #0
 800b210:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2200      	movs	r2, #0
 800b216:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b220:	2b00      	cmp	r3, #0
 800b222:	d101      	bne.n	800b228 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b224:	2303      	movs	r3, #3
 800b226:	e02f      	b.n	800b288 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d00f      	beq.n	800b252 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d009      	beq.n	800b252 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	687a      	ldr	r2, [r7, #4]
 800b248:	6852      	ldr	r2, [r2, #4]
 800b24a:	b2d2      	uxtb	r2, r2
 800b24c:	4611      	mov	r1, r2
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b252:	2340      	movs	r3, #64	; 0x40
 800b254:	2200      	movs	r2, #0
 800b256:	2100      	movs	r1, #0
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f001 fa56 	bl	800c70a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2201      	movs	r2, #1
 800b262:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2240      	movs	r2, #64	; 0x40
 800b26a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b26e:	2340      	movs	r3, #64	; 0x40
 800b270:	2200      	movs	r2, #0
 800b272:	2180      	movs	r1, #128	; 0x80
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f001 fa48 	bl	800c70a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2201      	movs	r2, #1
 800b27e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2240      	movs	r2, #64	; 0x40
 800b284:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b286:	2300      	movs	r3, #0
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3708      	adds	r7, #8
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b290:	b480      	push	{r7}
 800b292:	b083      	sub	sp, #12
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	460b      	mov	r3, r1
 800b29a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	78fa      	ldrb	r2, [r7, #3]
 800b2a0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b2a2:	2300      	movs	r3, #0
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	370c      	adds	r7, #12
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr

0800b2b0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b083      	sub	sp, #12
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2be:	b2da      	uxtb	r2, r3
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2204      	movs	r2, #4
 800b2ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b2ce:	2300      	movs	r3, #0
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	370c      	adds	r7, #12
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr

0800b2dc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b083      	sub	sp, #12
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	2b04      	cmp	r3, #4
 800b2ee:	d106      	bne.n	800b2fe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b2f6:	b2da      	uxtb	r2, r3
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b2fe:	2300      	movs	r3, #0
}
 800b300:	4618      	mov	r0, r3
 800b302:	370c      	adds	r7, #12
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr

0800b30c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b082      	sub	sp, #8
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d101      	bne.n	800b322 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b31e:	2303      	movs	r3, #3
 800b320:	e012      	b.n	800b348 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b328:	b2db      	uxtb	r3, r3
 800b32a:	2b03      	cmp	r3, #3
 800b32c:	d10b      	bne.n	800b346 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b334:	69db      	ldr	r3, [r3, #28]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d005      	beq.n	800b346 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b340:	69db      	ldr	r3, [r3, #28]
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b346:	2300      	movs	r3, #0
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3708      	adds	r7, #8
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b350:	b480      	push	{r7}
 800b352:	b087      	sub	sp, #28
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	3301      	adds	r3, #1
 800b366:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b36e:	8a3b      	ldrh	r3, [r7, #16]
 800b370:	021b      	lsls	r3, r3, #8
 800b372:	b21a      	sxth	r2, r3
 800b374:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b378:	4313      	orrs	r3, r2
 800b37a:	b21b      	sxth	r3, r3
 800b37c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b37e:	89fb      	ldrh	r3, [r7, #14]
}
 800b380:	4618      	mov	r0, r3
 800b382:	371c      	adds	r7, #28
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b084      	sub	sp, #16
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b396:	2300      	movs	r3, #0
 800b398:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	781b      	ldrb	r3, [r3, #0]
 800b39e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b3a2:	2b40      	cmp	r3, #64	; 0x40
 800b3a4:	d005      	beq.n	800b3b2 <USBD_StdDevReq+0x26>
 800b3a6:	2b40      	cmp	r3, #64	; 0x40
 800b3a8:	d853      	bhi.n	800b452 <USBD_StdDevReq+0xc6>
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d00b      	beq.n	800b3c6 <USBD_StdDevReq+0x3a>
 800b3ae:	2b20      	cmp	r3, #32
 800b3b0:	d14f      	bne.n	800b452 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3b8:	689b      	ldr	r3, [r3, #8]
 800b3ba:	6839      	ldr	r1, [r7, #0]
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	4798      	blx	r3
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	73fb      	strb	r3, [r7, #15]
      break;
 800b3c4:	e04a      	b.n	800b45c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	785b      	ldrb	r3, [r3, #1]
 800b3ca:	2b09      	cmp	r3, #9
 800b3cc:	d83b      	bhi.n	800b446 <USBD_StdDevReq+0xba>
 800b3ce:	a201      	add	r2, pc, #4	; (adr r2, 800b3d4 <USBD_StdDevReq+0x48>)
 800b3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3d4:	0800b429 	.word	0x0800b429
 800b3d8:	0800b43d 	.word	0x0800b43d
 800b3dc:	0800b447 	.word	0x0800b447
 800b3e0:	0800b433 	.word	0x0800b433
 800b3e4:	0800b447 	.word	0x0800b447
 800b3e8:	0800b407 	.word	0x0800b407
 800b3ec:	0800b3fd 	.word	0x0800b3fd
 800b3f0:	0800b447 	.word	0x0800b447
 800b3f4:	0800b41f 	.word	0x0800b41f
 800b3f8:	0800b411 	.word	0x0800b411
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b3fc:	6839      	ldr	r1, [r7, #0]
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f000 f9de 	bl	800b7c0 <USBD_GetDescriptor>
          break;
 800b404:	e024      	b.n	800b450 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b406:	6839      	ldr	r1, [r7, #0]
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 fb6d 	bl	800bae8 <USBD_SetAddress>
          break;
 800b40e:	e01f      	b.n	800b450 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b410:	6839      	ldr	r1, [r7, #0]
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 fbac 	bl	800bb70 <USBD_SetConfig>
 800b418:	4603      	mov	r3, r0
 800b41a:	73fb      	strb	r3, [r7, #15]
          break;
 800b41c:	e018      	b.n	800b450 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b41e:	6839      	ldr	r1, [r7, #0]
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 fc4b 	bl	800bcbc <USBD_GetConfig>
          break;
 800b426:	e013      	b.n	800b450 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b428:	6839      	ldr	r1, [r7, #0]
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 fc7c 	bl	800bd28 <USBD_GetStatus>
          break;
 800b430:	e00e      	b.n	800b450 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b432:	6839      	ldr	r1, [r7, #0]
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f000 fcab 	bl	800bd90 <USBD_SetFeature>
          break;
 800b43a:	e009      	b.n	800b450 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b43c:	6839      	ldr	r1, [r7, #0]
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 fcba 	bl	800bdb8 <USBD_ClrFeature>
          break;
 800b444:	e004      	b.n	800b450 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b446:	6839      	ldr	r1, [r7, #0]
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f000 fd11 	bl	800be70 <USBD_CtlError>
          break;
 800b44e:	bf00      	nop
      }
      break;
 800b450:	e004      	b.n	800b45c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b452:	6839      	ldr	r1, [r7, #0]
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f000 fd0b 	bl	800be70 <USBD_CtlError>
      break;
 800b45a:	bf00      	nop
  }

  return ret;
 800b45c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3710      	adds	r7, #16
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop

0800b468 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b472:	2300      	movs	r3, #0
 800b474:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b47e:	2b40      	cmp	r3, #64	; 0x40
 800b480:	d005      	beq.n	800b48e <USBD_StdItfReq+0x26>
 800b482:	2b40      	cmp	r3, #64	; 0x40
 800b484:	d82f      	bhi.n	800b4e6 <USBD_StdItfReq+0x7e>
 800b486:	2b00      	cmp	r3, #0
 800b488:	d001      	beq.n	800b48e <USBD_StdItfReq+0x26>
 800b48a:	2b20      	cmp	r3, #32
 800b48c:	d12b      	bne.n	800b4e6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b494:	b2db      	uxtb	r3, r3
 800b496:	3b01      	subs	r3, #1
 800b498:	2b02      	cmp	r3, #2
 800b49a:	d81d      	bhi.n	800b4d8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	889b      	ldrh	r3, [r3, #4]
 800b4a0:	b2db      	uxtb	r3, r3
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d813      	bhi.n	800b4ce <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4ac:	689b      	ldr	r3, [r3, #8]
 800b4ae:	6839      	ldr	r1, [r7, #0]
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	4798      	blx	r3
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	88db      	ldrh	r3, [r3, #6]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d110      	bne.n	800b4e2 <USBD_StdItfReq+0x7a>
 800b4c0:	7bfb      	ldrb	r3, [r7, #15]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d10d      	bne.n	800b4e2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f000 fd9d 	bl	800c006 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b4cc:	e009      	b.n	800b4e2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b4ce:	6839      	ldr	r1, [r7, #0]
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f000 fccd 	bl	800be70 <USBD_CtlError>
          break;
 800b4d6:	e004      	b.n	800b4e2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b4d8:	6839      	ldr	r1, [r7, #0]
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f000 fcc8 	bl	800be70 <USBD_CtlError>
          break;
 800b4e0:	e000      	b.n	800b4e4 <USBD_StdItfReq+0x7c>
          break;
 800b4e2:	bf00      	nop
      }
      break;
 800b4e4:	e004      	b.n	800b4f0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b4e6:	6839      	ldr	r1, [r7, #0]
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f000 fcc1 	bl	800be70 <USBD_CtlError>
      break;
 800b4ee:	bf00      	nop
  }

  return ret;
 800b4f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3710      	adds	r7, #16
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}

0800b4fa <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4fa:	b580      	push	{r7, lr}
 800b4fc:	b084      	sub	sp, #16
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
 800b502:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b504:	2300      	movs	r3, #0
 800b506:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	889b      	ldrh	r3, [r3, #4]
 800b50c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b516:	2b40      	cmp	r3, #64	; 0x40
 800b518:	d007      	beq.n	800b52a <USBD_StdEPReq+0x30>
 800b51a:	2b40      	cmp	r3, #64	; 0x40
 800b51c:	f200 8145 	bhi.w	800b7aa <USBD_StdEPReq+0x2b0>
 800b520:	2b00      	cmp	r3, #0
 800b522:	d00c      	beq.n	800b53e <USBD_StdEPReq+0x44>
 800b524:	2b20      	cmp	r3, #32
 800b526:	f040 8140 	bne.w	800b7aa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b530:	689b      	ldr	r3, [r3, #8]
 800b532:	6839      	ldr	r1, [r7, #0]
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	4798      	blx	r3
 800b538:	4603      	mov	r3, r0
 800b53a:	73fb      	strb	r3, [r7, #15]
      break;
 800b53c:	e13a      	b.n	800b7b4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	785b      	ldrb	r3, [r3, #1]
 800b542:	2b03      	cmp	r3, #3
 800b544:	d007      	beq.n	800b556 <USBD_StdEPReq+0x5c>
 800b546:	2b03      	cmp	r3, #3
 800b548:	f300 8129 	bgt.w	800b79e <USBD_StdEPReq+0x2a4>
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d07f      	beq.n	800b650 <USBD_StdEPReq+0x156>
 800b550:	2b01      	cmp	r3, #1
 800b552:	d03c      	beq.n	800b5ce <USBD_StdEPReq+0xd4>
 800b554:	e123      	b.n	800b79e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	2b02      	cmp	r3, #2
 800b560:	d002      	beq.n	800b568 <USBD_StdEPReq+0x6e>
 800b562:	2b03      	cmp	r3, #3
 800b564:	d016      	beq.n	800b594 <USBD_StdEPReq+0x9a>
 800b566:	e02c      	b.n	800b5c2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b568:	7bbb      	ldrb	r3, [r7, #14]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d00d      	beq.n	800b58a <USBD_StdEPReq+0x90>
 800b56e:	7bbb      	ldrb	r3, [r7, #14]
 800b570:	2b80      	cmp	r3, #128	; 0x80
 800b572:	d00a      	beq.n	800b58a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b574:	7bbb      	ldrb	r3, [r7, #14]
 800b576:	4619      	mov	r1, r3
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f001 f90b 	bl	800c794 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b57e:	2180      	movs	r1, #128	; 0x80
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f001 f907 	bl	800c794 <USBD_LL_StallEP>
 800b586:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b588:	e020      	b.n	800b5cc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b58a:	6839      	ldr	r1, [r7, #0]
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f000 fc6f 	bl	800be70 <USBD_CtlError>
              break;
 800b592:	e01b      	b.n	800b5cc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	885b      	ldrh	r3, [r3, #2]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d10e      	bne.n	800b5ba <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b59c:	7bbb      	ldrb	r3, [r7, #14]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d00b      	beq.n	800b5ba <USBD_StdEPReq+0xc0>
 800b5a2:	7bbb      	ldrb	r3, [r7, #14]
 800b5a4:	2b80      	cmp	r3, #128	; 0x80
 800b5a6:	d008      	beq.n	800b5ba <USBD_StdEPReq+0xc0>
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	88db      	ldrh	r3, [r3, #6]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d104      	bne.n	800b5ba <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b5b0:	7bbb      	ldrb	r3, [r7, #14]
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f001 f8ed 	bl	800c794 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 fd23 	bl	800c006 <USBD_CtlSendStatus>

              break;
 800b5c0:	e004      	b.n	800b5cc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b5c2:	6839      	ldr	r1, [r7, #0]
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f000 fc53 	bl	800be70 <USBD_CtlError>
              break;
 800b5ca:	bf00      	nop
          }
          break;
 800b5cc:	e0ec      	b.n	800b7a8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5d4:	b2db      	uxtb	r3, r3
 800b5d6:	2b02      	cmp	r3, #2
 800b5d8:	d002      	beq.n	800b5e0 <USBD_StdEPReq+0xe6>
 800b5da:	2b03      	cmp	r3, #3
 800b5dc:	d016      	beq.n	800b60c <USBD_StdEPReq+0x112>
 800b5de:	e030      	b.n	800b642 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b5e0:	7bbb      	ldrb	r3, [r7, #14]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d00d      	beq.n	800b602 <USBD_StdEPReq+0x108>
 800b5e6:	7bbb      	ldrb	r3, [r7, #14]
 800b5e8:	2b80      	cmp	r3, #128	; 0x80
 800b5ea:	d00a      	beq.n	800b602 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b5ec:	7bbb      	ldrb	r3, [r7, #14]
 800b5ee:	4619      	mov	r1, r3
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f001 f8cf 	bl	800c794 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b5f6:	2180      	movs	r1, #128	; 0x80
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f001 f8cb 	bl	800c794 <USBD_LL_StallEP>
 800b5fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b600:	e025      	b.n	800b64e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b602:	6839      	ldr	r1, [r7, #0]
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f000 fc33 	bl	800be70 <USBD_CtlError>
              break;
 800b60a:	e020      	b.n	800b64e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	885b      	ldrh	r3, [r3, #2]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d11b      	bne.n	800b64c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b614:	7bbb      	ldrb	r3, [r7, #14]
 800b616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d004      	beq.n	800b628 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b61e:	7bbb      	ldrb	r3, [r7, #14]
 800b620:	4619      	mov	r1, r3
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f001 f8d5 	bl	800c7d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 fcec 	bl	800c006 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b634:	689b      	ldr	r3, [r3, #8]
 800b636:	6839      	ldr	r1, [r7, #0]
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	4798      	blx	r3
 800b63c:	4603      	mov	r3, r0
 800b63e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b640:	e004      	b.n	800b64c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b642:	6839      	ldr	r1, [r7, #0]
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f000 fc13 	bl	800be70 <USBD_CtlError>
              break;
 800b64a:	e000      	b.n	800b64e <USBD_StdEPReq+0x154>
              break;
 800b64c:	bf00      	nop
          }
          break;
 800b64e:	e0ab      	b.n	800b7a8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b656:	b2db      	uxtb	r3, r3
 800b658:	2b02      	cmp	r3, #2
 800b65a:	d002      	beq.n	800b662 <USBD_StdEPReq+0x168>
 800b65c:	2b03      	cmp	r3, #3
 800b65e:	d032      	beq.n	800b6c6 <USBD_StdEPReq+0x1cc>
 800b660:	e097      	b.n	800b792 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b662:	7bbb      	ldrb	r3, [r7, #14]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d007      	beq.n	800b678 <USBD_StdEPReq+0x17e>
 800b668:	7bbb      	ldrb	r3, [r7, #14]
 800b66a:	2b80      	cmp	r3, #128	; 0x80
 800b66c:	d004      	beq.n	800b678 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b66e:	6839      	ldr	r1, [r7, #0]
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f000 fbfd 	bl	800be70 <USBD_CtlError>
                break;
 800b676:	e091      	b.n	800b79c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b678:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	da0b      	bge.n	800b698 <USBD_StdEPReq+0x19e>
 800b680:	7bbb      	ldrb	r3, [r7, #14]
 800b682:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b686:	4613      	mov	r3, r2
 800b688:	009b      	lsls	r3, r3, #2
 800b68a:	4413      	add	r3, r2
 800b68c:	009b      	lsls	r3, r3, #2
 800b68e:	3310      	adds	r3, #16
 800b690:	687a      	ldr	r2, [r7, #4]
 800b692:	4413      	add	r3, r2
 800b694:	3304      	adds	r3, #4
 800b696:	e00b      	b.n	800b6b0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b698:	7bbb      	ldrb	r3, [r7, #14]
 800b69a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b69e:	4613      	mov	r3, r2
 800b6a0:	009b      	lsls	r3, r3, #2
 800b6a2:	4413      	add	r3, r2
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b6aa:	687a      	ldr	r2, [r7, #4]
 800b6ac:	4413      	add	r3, r2
 800b6ae:	3304      	adds	r3, #4
 800b6b0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	2202      	movs	r2, #2
 800b6bc:	4619      	mov	r1, r3
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 fc47 	bl	800bf52 <USBD_CtlSendData>
              break;
 800b6c4:	e06a      	b.n	800b79c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b6c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	da11      	bge.n	800b6f2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b6ce:	7bbb      	ldrb	r3, [r7, #14]
 800b6d0:	f003 020f 	and.w	r2, r3, #15
 800b6d4:	6879      	ldr	r1, [r7, #4]
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	009b      	lsls	r3, r3, #2
 800b6da:	4413      	add	r3, r2
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	440b      	add	r3, r1
 800b6e0:	3324      	adds	r3, #36	; 0x24
 800b6e2:	881b      	ldrh	r3, [r3, #0]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d117      	bne.n	800b718 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b6e8:	6839      	ldr	r1, [r7, #0]
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 fbc0 	bl	800be70 <USBD_CtlError>
                  break;
 800b6f0:	e054      	b.n	800b79c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b6f2:	7bbb      	ldrb	r3, [r7, #14]
 800b6f4:	f003 020f 	and.w	r2, r3, #15
 800b6f8:	6879      	ldr	r1, [r7, #4]
 800b6fa:	4613      	mov	r3, r2
 800b6fc:	009b      	lsls	r3, r3, #2
 800b6fe:	4413      	add	r3, r2
 800b700:	009b      	lsls	r3, r3, #2
 800b702:	440b      	add	r3, r1
 800b704:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b708:	881b      	ldrh	r3, [r3, #0]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d104      	bne.n	800b718 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b70e:	6839      	ldr	r1, [r7, #0]
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f000 fbad 	bl	800be70 <USBD_CtlError>
                  break;
 800b716:	e041      	b.n	800b79c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b718:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	da0b      	bge.n	800b738 <USBD_StdEPReq+0x23e>
 800b720:	7bbb      	ldrb	r3, [r7, #14]
 800b722:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b726:	4613      	mov	r3, r2
 800b728:	009b      	lsls	r3, r3, #2
 800b72a:	4413      	add	r3, r2
 800b72c:	009b      	lsls	r3, r3, #2
 800b72e:	3310      	adds	r3, #16
 800b730:	687a      	ldr	r2, [r7, #4]
 800b732:	4413      	add	r3, r2
 800b734:	3304      	adds	r3, #4
 800b736:	e00b      	b.n	800b750 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b738:	7bbb      	ldrb	r3, [r7, #14]
 800b73a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b73e:	4613      	mov	r3, r2
 800b740:	009b      	lsls	r3, r3, #2
 800b742:	4413      	add	r3, r2
 800b744:	009b      	lsls	r3, r3, #2
 800b746:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	4413      	add	r3, r2
 800b74e:	3304      	adds	r3, #4
 800b750:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b752:	7bbb      	ldrb	r3, [r7, #14]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d002      	beq.n	800b75e <USBD_StdEPReq+0x264>
 800b758:	7bbb      	ldrb	r3, [r7, #14]
 800b75a:	2b80      	cmp	r3, #128	; 0x80
 800b75c:	d103      	bne.n	800b766 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	2200      	movs	r2, #0
 800b762:	601a      	str	r2, [r3, #0]
 800b764:	e00e      	b.n	800b784 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b766:	7bbb      	ldrb	r3, [r7, #14]
 800b768:	4619      	mov	r1, r3
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f001 f850 	bl	800c810 <USBD_LL_IsStallEP>
 800b770:	4603      	mov	r3, r0
 800b772:	2b00      	cmp	r3, #0
 800b774:	d003      	beq.n	800b77e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	2201      	movs	r2, #1
 800b77a:	601a      	str	r2, [r3, #0]
 800b77c:	e002      	b.n	800b784 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	2200      	movs	r2, #0
 800b782:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	2202      	movs	r2, #2
 800b788:	4619      	mov	r1, r3
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f000 fbe1 	bl	800bf52 <USBD_CtlSendData>
              break;
 800b790:	e004      	b.n	800b79c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b792:	6839      	ldr	r1, [r7, #0]
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 fb6b 	bl	800be70 <USBD_CtlError>
              break;
 800b79a:	bf00      	nop
          }
          break;
 800b79c:	e004      	b.n	800b7a8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b79e:	6839      	ldr	r1, [r7, #0]
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f000 fb65 	bl	800be70 <USBD_CtlError>
          break;
 800b7a6:	bf00      	nop
      }
      break;
 800b7a8:	e004      	b.n	800b7b4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b7aa:	6839      	ldr	r1, [r7, #0]
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 fb5f 	bl	800be70 <USBD_CtlError>
      break;
 800b7b2:	bf00      	nop
  }

  return ret;
 800b7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3710      	adds	r7, #16
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
	...

0800b7c0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b084      	sub	sp, #16
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	885b      	ldrh	r3, [r3, #2]
 800b7da:	0a1b      	lsrs	r3, r3, #8
 800b7dc:	b29b      	uxth	r3, r3
 800b7de:	3b01      	subs	r3, #1
 800b7e0:	2b0e      	cmp	r3, #14
 800b7e2:	f200 8152 	bhi.w	800ba8a <USBD_GetDescriptor+0x2ca>
 800b7e6:	a201      	add	r2, pc, #4	; (adr r2, 800b7ec <USBD_GetDescriptor+0x2c>)
 800b7e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ec:	0800b85d 	.word	0x0800b85d
 800b7f0:	0800b875 	.word	0x0800b875
 800b7f4:	0800b8b5 	.word	0x0800b8b5
 800b7f8:	0800ba8b 	.word	0x0800ba8b
 800b7fc:	0800ba8b 	.word	0x0800ba8b
 800b800:	0800ba2b 	.word	0x0800ba2b
 800b804:	0800ba57 	.word	0x0800ba57
 800b808:	0800ba8b 	.word	0x0800ba8b
 800b80c:	0800ba8b 	.word	0x0800ba8b
 800b810:	0800ba8b 	.word	0x0800ba8b
 800b814:	0800ba8b 	.word	0x0800ba8b
 800b818:	0800ba8b 	.word	0x0800ba8b
 800b81c:	0800ba8b 	.word	0x0800ba8b
 800b820:	0800ba8b 	.word	0x0800ba8b
 800b824:	0800b829 	.word	0x0800b829
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b82e:	69db      	ldr	r3, [r3, #28]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d00b      	beq.n	800b84c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b83a:	69db      	ldr	r3, [r3, #28]
 800b83c:	687a      	ldr	r2, [r7, #4]
 800b83e:	7c12      	ldrb	r2, [r2, #16]
 800b840:	f107 0108 	add.w	r1, r7, #8
 800b844:	4610      	mov	r0, r2
 800b846:	4798      	blx	r3
 800b848:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b84a:	e126      	b.n	800ba9a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b84c:	6839      	ldr	r1, [r7, #0]
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f000 fb0e 	bl	800be70 <USBD_CtlError>
        err++;
 800b854:	7afb      	ldrb	r3, [r7, #11]
 800b856:	3301      	adds	r3, #1
 800b858:	72fb      	strb	r3, [r7, #11]
      break;
 800b85a:	e11e      	b.n	800ba9a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	7c12      	ldrb	r2, [r2, #16]
 800b868:	f107 0108 	add.w	r1, r7, #8
 800b86c:	4610      	mov	r0, r2
 800b86e:	4798      	blx	r3
 800b870:	60f8      	str	r0, [r7, #12]
      break;
 800b872:	e112      	b.n	800ba9a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	7c1b      	ldrb	r3, [r3, #16]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d10d      	bne.n	800b898 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b884:	f107 0208 	add.w	r2, r7, #8
 800b888:	4610      	mov	r0, r2
 800b88a:	4798      	blx	r3
 800b88c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	3301      	adds	r3, #1
 800b892:	2202      	movs	r2, #2
 800b894:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b896:	e100      	b.n	800ba9a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8a0:	f107 0208 	add.w	r2, r7, #8
 800b8a4:	4610      	mov	r0, r2
 800b8a6:	4798      	blx	r3
 800b8a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	3301      	adds	r3, #1
 800b8ae:	2202      	movs	r2, #2
 800b8b0:	701a      	strb	r2, [r3, #0]
      break;
 800b8b2:	e0f2      	b.n	800ba9a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	885b      	ldrh	r3, [r3, #2]
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	2b05      	cmp	r3, #5
 800b8bc:	f200 80ac 	bhi.w	800ba18 <USBD_GetDescriptor+0x258>
 800b8c0:	a201      	add	r2, pc, #4	; (adr r2, 800b8c8 <USBD_GetDescriptor+0x108>)
 800b8c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c6:	bf00      	nop
 800b8c8:	0800b8e1 	.word	0x0800b8e1
 800b8cc:	0800b915 	.word	0x0800b915
 800b8d0:	0800b949 	.word	0x0800b949
 800b8d4:	0800b97d 	.word	0x0800b97d
 800b8d8:	0800b9b1 	.word	0x0800b9b1
 800b8dc:	0800b9e5 	.word	0x0800b9e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8e6:	685b      	ldr	r3, [r3, #4]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d00b      	beq.n	800b904 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	687a      	ldr	r2, [r7, #4]
 800b8f6:	7c12      	ldrb	r2, [r2, #16]
 800b8f8:	f107 0108 	add.w	r1, r7, #8
 800b8fc:	4610      	mov	r0, r2
 800b8fe:	4798      	blx	r3
 800b900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b902:	e091      	b.n	800ba28 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b904:	6839      	ldr	r1, [r7, #0]
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 fab2 	bl	800be70 <USBD_CtlError>
            err++;
 800b90c:	7afb      	ldrb	r3, [r7, #11]
 800b90e:	3301      	adds	r3, #1
 800b910:	72fb      	strb	r3, [r7, #11]
          break;
 800b912:	e089      	b.n	800ba28 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b91a:	689b      	ldr	r3, [r3, #8]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d00b      	beq.n	800b938 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b926:	689b      	ldr	r3, [r3, #8]
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	7c12      	ldrb	r2, [r2, #16]
 800b92c:	f107 0108 	add.w	r1, r7, #8
 800b930:	4610      	mov	r0, r2
 800b932:	4798      	blx	r3
 800b934:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b936:	e077      	b.n	800ba28 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b938:	6839      	ldr	r1, [r7, #0]
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f000 fa98 	bl	800be70 <USBD_CtlError>
            err++;
 800b940:	7afb      	ldrb	r3, [r7, #11]
 800b942:	3301      	adds	r3, #1
 800b944:	72fb      	strb	r3, [r7, #11]
          break;
 800b946:	e06f      	b.n	800ba28 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b94e:	68db      	ldr	r3, [r3, #12]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d00b      	beq.n	800b96c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b95a:	68db      	ldr	r3, [r3, #12]
 800b95c:	687a      	ldr	r2, [r7, #4]
 800b95e:	7c12      	ldrb	r2, [r2, #16]
 800b960:	f107 0108 	add.w	r1, r7, #8
 800b964:	4610      	mov	r0, r2
 800b966:	4798      	blx	r3
 800b968:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b96a:	e05d      	b.n	800ba28 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b96c:	6839      	ldr	r1, [r7, #0]
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f000 fa7e 	bl	800be70 <USBD_CtlError>
            err++;
 800b974:	7afb      	ldrb	r3, [r7, #11]
 800b976:	3301      	adds	r3, #1
 800b978:	72fb      	strb	r3, [r7, #11]
          break;
 800b97a:	e055      	b.n	800ba28 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b982:	691b      	ldr	r3, [r3, #16]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d00b      	beq.n	800b9a0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b98e:	691b      	ldr	r3, [r3, #16]
 800b990:	687a      	ldr	r2, [r7, #4]
 800b992:	7c12      	ldrb	r2, [r2, #16]
 800b994:	f107 0108 	add.w	r1, r7, #8
 800b998:	4610      	mov	r0, r2
 800b99a:	4798      	blx	r3
 800b99c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b99e:	e043      	b.n	800ba28 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b9a0:	6839      	ldr	r1, [r7, #0]
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 fa64 	bl	800be70 <USBD_CtlError>
            err++;
 800b9a8:	7afb      	ldrb	r3, [r7, #11]
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	72fb      	strb	r3, [r7, #11]
          break;
 800b9ae:	e03b      	b.n	800ba28 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9b6:	695b      	ldr	r3, [r3, #20]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d00b      	beq.n	800b9d4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9c2:	695b      	ldr	r3, [r3, #20]
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	7c12      	ldrb	r2, [r2, #16]
 800b9c8:	f107 0108 	add.w	r1, r7, #8
 800b9cc:	4610      	mov	r0, r2
 800b9ce:	4798      	blx	r3
 800b9d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9d2:	e029      	b.n	800ba28 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b9d4:	6839      	ldr	r1, [r7, #0]
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f000 fa4a 	bl	800be70 <USBD_CtlError>
            err++;
 800b9dc:	7afb      	ldrb	r3, [r7, #11]
 800b9de:	3301      	adds	r3, #1
 800b9e0:	72fb      	strb	r3, [r7, #11]
          break;
 800b9e2:	e021      	b.n	800ba28 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9ea:	699b      	ldr	r3, [r3, #24]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d00b      	beq.n	800ba08 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9f6:	699b      	ldr	r3, [r3, #24]
 800b9f8:	687a      	ldr	r2, [r7, #4]
 800b9fa:	7c12      	ldrb	r2, [r2, #16]
 800b9fc:	f107 0108 	add.w	r1, r7, #8
 800ba00:	4610      	mov	r0, r2
 800ba02:	4798      	blx	r3
 800ba04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ba06:	e00f      	b.n	800ba28 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ba08:	6839      	ldr	r1, [r7, #0]
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f000 fa30 	bl	800be70 <USBD_CtlError>
            err++;
 800ba10:	7afb      	ldrb	r3, [r7, #11]
 800ba12:	3301      	adds	r3, #1
 800ba14:	72fb      	strb	r3, [r7, #11]
          break;
 800ba16:	e007      	b.n	800ba28 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ba18:	6839      	ldr	r1, [r7, #0]
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f000 fa28 	bl	800be70 <USBD_CtlError>
          err++;
 800ba20:	7afb      	ldrb	r3, [r7, #11]
 800ba22:	3301      	adds	r3, #1
 800ba24:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800ba26:	bf00      	nop
      }
      break;
 800ba28:	e037      	b.n	800ba9a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	7c1b      	ldrb	r3, [r3, #16]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d109      	bne.n	800ba46 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba3a:	f107 0208 	add.w	r2, r7, #8
 800ba3e:	4610      	mov	r0, r2
 800ba40:	4798      	blx	r3
 800ba42:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba44:	e029      	b.n	800ba9a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ba46:	6839      	ldr	r1, [r7, #0]
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f000 fa11 	bl	800be70 <USBD_CtlError>
        err++;
 800ba4e:	7afb      	ldrb	r3, [r7, #11]
 800ba50:	3301      	adds	r3, #1
 800ba52:	72fb      	strb	r3, [r7, #11]
      break;
 800ba54:	e021      	b.n	800ba9a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	7c1b      	ldrb	r3, [r3, #16]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d10d      	bne.n	800ba7a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba66:	f107 0208 	add.w	r2, r7, #8
 800ba6a:	4610      	mov	r0, r2
 800ba6c:	4798      	blx	r3
 800ba6e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	3301      	adds	r3, #1
 800ba74:	2207      	movs	r2, #7
 800ba76:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba78:	e00f      	b.n	800ba9a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ba7a:	6839      	ldr	r1, [r7, #0]
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f000 f9f7 	bl	800be70 <USBD_CtlError>
        err++;
 800ba82:	7afb      	ldrb	r3, [r7, #11]
 800ba84:	3301      	adds	r3, #1
 800ba86:	72fb      	strb	r3, [r7, #11]
      break;
 800ba88:	e007      	b.n	800ba9a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ba8a:	6839      	ldr	r1, [r7, #0]
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 f9ef 	bl	800be70 <USBD_CtlError>
      err++;
 800ba92:	7afb      	ldrb	r3, [r7, #11]
 800ba94:	3301      	adds	r3, #1
 800ba96:	72fb      	strb	r3, [r7, #11]
      break;
 800ba98:	bf00      	nop
  }

  if (err != 0U)
 800ba9a:	7afb      	ldrb	r3, [r7, #11]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d11e      	bne.n	800bade <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	88db      	ldrh	r3, [r3, #6]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d016      	beq.n	800bad6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800baa8:	893b      	ldrh	r3, [r7, #8]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d00e      	beq.n	800bacc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	88da      	ldrh	r2, [r3, #6]
 800bab2:	893b      	ldrh	r3, [r7, #8]
 800bab4:	4293      	cmp	r3, r2
 800bab6:	bf28      	it	cs
 800bab8:	4613      	movcs	r3, r2
 800baba:	b29b      	uxth	r3, r3
 800babc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800babe:	893b      	ldrh	r3, [r7, #8]
 800bac0:	461a      	mov	r2, r3
 800bac2:	68f9      	ldr	r1, [r7, #12]
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 fa44 	bl	800bf52 <USBD_CtlSendData>
 800baca:	e009      	b.n	800bae0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bacc:	6839      	ldr	r1, [r7, #0]
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 f9ce 	bl	800be70 <USBD_CtlError>
 800bad4:	e004      	b.n	800bae0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f000 fa95 	bl	800c006 <USBD_CtlSendStatus>
 800badc:	e000      	b.n	800bae0 <USBD_GetDescriptor+0x320>
    return;
 800bade:	bf00      	nop
  }
}
 800bae0:	3710      	adds	r7, #16
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
 800bae6:	bf00      	nop

0800bae8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	889b      	ldrh	r3, [r3, #4]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d131      	bne.n	800bb5e <USBD_SetAddress+0x76>
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	88db      	ldrh	r3, [r3, #6]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d12d      	bne.n	800bb5e <USBD_SetAddress+0x76>
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	885b      	ldrh	r3, [r3, #2]
 800bb06:	2b7f      	cmp	r3, #127	; 0x7f
 800bb08:	d829      	bhi.n	800bb5e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	885b      	ldrh	r3, [r3, #2]
 800bb0e:	b2db      	uxtb	r3, r3
 800bb10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb14:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb1c:	b2db      	uxtb	r3, r3
 800bb1e:	2b03      	cmp	r3, #3
 800bb20:	d104      	bne.n	800bb2c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bb22:	6839      	ldr	r1, [r7, #0]
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f000 f9a3 	bl	800be70 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb2a:	e01d      	b.n	800bb68 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	7bfa      	ldrb	r2, [r7, #15]
 800bb30:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bb34:	7bfb      	ldrb	r3, [r7, #15]
 800bb36:	4619      	mov	r1, r3
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f000 fe96 	bl	800c86a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 fa61 	bl	800c006 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bb44:	7bfb      	ldrb	r3, [r7, #15]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d004      	beq.n	800bb54 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2202      	movs	r2, #2
 800bb4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb52:	e009      	b.n	800bb68 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2201      	movs	r2, #1
 800bb58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb5c:	e004      	b.n	800bb68 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bb5e:	6839      	ldr	r1, [r7, #0]
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f000 f985 	bl	800be70 <USBD_CtlError>
  }
}
 800bb66:	bf00      	nop
 800bb68:	bf00      	nop
 800bb6a:	3710      	adds	r7, #16
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b084      	sub	sp, #16
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	885b      	ldrh	r3, [r3, #2]
 800bb82:	b2da      	uxtb	r2, r3
 800bb84:	4b4c      	ldr	r3, [pc, #304]	; (800bcb8 <USBD_SetConfig+0x148>)
 800bb86:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bb88:	4b4b      	ldr	r3, [pc, #300]	; (800bcb8 <USBD_SetConfig+0x148>)
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	2b01      	cmp	r3, #1
 800bb8e:	d905      	bls.n	800bb9c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bb90:	6839      	ldr	r1, [r7, #0]
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 f96c 	bl	800be70 <USBD_CtlError>
    return USBD_FAIL;
 800bb98:	2303      	movs	r3, #3
 800bb9a:	e088      	b.n	800bcae <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bba2:	b2db      	uxtb	r3, r3
 800bba4:	2b02      	cmp	r3, #2
 800bba6:	d002      	beq.n	800bbae <USBD_SetConfig+0x3e>
 800bba8:	2b03      	cmp	r3, #3
 800bbaa:	d025      	beq.n	800bbf8 <USBD_SetConfig+0x88>
 800bbac:	e071      	b.n	800bc92 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bbae:	4b42      	ldr	r3, [pc, #264]	; (800bcb8 <USBD_SetConfig+0x148>)
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d01c      	beq.n	800bbf0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800bbb6:	4b40      	ldr	r3, [pc, #256]	; (800bcb8 <USBD_SetConfig+0x148>)
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	461a      	mov	r2, r3
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bbc0:	4b3d      	ldr	r3, [pc, #244]	; (800bcb8 <USBD_SetConfig+0x148>)
 800bbc2:	781b      	ldrb	r3, [r3, #0]
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f7ff f992 	bl	800aef0 <USBD_SetClassConfig>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bbd0:	7bfb      	ldrb	r3, [r7, #15]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d004      	beq.n	800bbe0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800bbd6:	6839      	ldr	r1, [r7, #0]
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f000 f949 	bl	800be70 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bbde:	e065      	b.n	800bcac <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f000 fa10 	bl	800c006 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2203      	movs	r2, #3
 800bbea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bbee:	e05d      	b.n	800bcac <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f000 fa08 	bl	800c006 <USBD_CtlSendStatus>
      break;
 800bbf6:	e059      	b.n	800bcac <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bbf8:	4b2f      	ldr	r3, [pc, #188]	; (800bcb8 <USBD_SetConfig+0x148>)
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d112      	bne.n	800bc26 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2202      	movs	r2, #2
 800bc04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bc08:	4b2b      	ldr	r3, [pc, #172]	; (800bcb8 <USBD_SetConfig+0x148>)
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bc12:	4b29      	ldr	r3, [pc, #164]	; (800bcb8 <USBD_SetConfig+0x148>)
 800bc14:	781b      	ldrb	r3, [r3, #0]
 800bc16:	4619      	mov	r1, r3
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f7ff f985 	bl	800af28 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f000 f9f1 	bl	800c006 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bc24:	e042      	b.n	800bcac <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800bc26:	4b24      	ldr	r3, [pc, #144]	; (800bcb8 <USBD_SetConfig+0x148>)
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d02a      	beq.n	800bc8a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f7ff f973 	bl	800af28 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bc42:	4b1d      	ldr	r3, [pc, #116]	; (800bcb8 <USBD_SetConfig+0x148>)
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	461a      	mov	r2, r3
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bc4c:	4b1a      	ldr	r3, [pc, #104]	; (800bcb8 <USBD_SetConfig+0x148>)
 800bc4e:	781b      	ldrb	r3, [r3, #0]
 800bc50:	4619      	mov	r1, r3
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f7ff f94c 	bl	800aef0 <USBD_SetClassConfig>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bc5c:	7bfb      	ldrb	r3, [r7, #15]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d00f      	beq.n	800bc82 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800bc62:	6839      	ldr	r1, [r7, #0]
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f000 f903 	bl	800be70 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	b2db      	uxtb	r3, r3
 800bc70:	4619      	mov	r1, r3
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f7ff f958 	bl	800af28 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2202      	movs	r2, #2
 800bc7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bc80:	e014      	b.n	800bcac <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f000 f9bf 	bl	800c006 <USBD_CtlSendStatus>
      break;
 800bc88:	e010      	b.n	800bcac <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f000 f9bb 	bl	800c006 <USBD_CtlSendStatus>
      break;
 800bc90:	e00c      	b.n	800bcac <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800bc92:	6839      	ldr	r1, [r7, #0]
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f000 f8eb 	bl	800be70 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bc9a:	4b07      	ldr	r3, [pc, #28]	; (800bcb8 <USBD_SetConfig+0x148>)
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	4619      	mov	r1, r3
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f7ff f941 	bl	800af28 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bca6:	2303      	movs	r3, #3
 800bca8:	73fb      	strb	r3, [r7, #15]
      break;
 800bcaa:	bf00      	nop
  }

  return ret;
 800bcac:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3710      	adds	r7, #16
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	20002be0 	.word	0x20002be0

0800bcbc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b082      	sub	sp, #8
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	88db      	ldrh	r3, [r3, #6]
 800bcca:	2b01      	cmp	r3, #1
 800bccc:	d004      	beq.n	800bcd8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bcce:	6839      	ldr	r1, [r7, #0]
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f000 f8cd 	bl	800be70 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bcd6:	e023      	b.n	800bd20 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcde:	b2db      	uxtb	r3, r3
 800bce0:	2b02      	cmp	r3, #2
 800bce2:	dc02      	bgt.n	800bcea <USBD_GetConfig+0x2e>
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	dc03      	bgt.n	800bcf0 <USBD_GetConfig+0x34>
 800bce8:	e015      	b.n	800bd16 <USBD_GetConfig+0x5a>
 800bcea:	2b03      	cmp	r3, #3
 800bcec:	d00b      	beq.n	800bd06 <USBD_GetConfig+0x4a>
 800bcee:	e012      	b.n	800bd16 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	3308      	adds	r3, #8
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f000 f927 	bl	800bf52 <USBD_CtlSendData>
        break;
 800bd04:	e00c      	b.n	800bd20 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	3304      	adds	r3, #4
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f000 f91f 	bl	800bf52 <USBD_CtlSendData>
        break;
 800bd14:	e004      	b.n	800bd20 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bd16:	6839      	ldr	r1, [r7, #0]
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f000 f8a9 	bl	800be70 <USBD_CtlError>
        break;
 800bd1e:	bf00      	nop
}
 800bd20:	bf00      	nop
 800bd22:	3708      	adds	r7, #8
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b082      	sub	sp, #8
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
 800bd30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd38:	b2db      	uxtb	r3, r3
 800bd3a:	3b01      	subs	r3, #1
 800bd3c:	2b02      	cmp	r3, #2
 800bd3e:	d81e      	bhi.n	800bd7e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	88db      	ldrh	r3, [r3, #6]
 800bd44:	2b02      	cmp	r3, #2
 800bd46:	d004      	beq.n	800bd52 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bd48:	6839      	ldr	r1, [r7, #0]
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f000 f890 	bl	800be70 <USBD_CtlError>
        break;
 800bd50:	e01a      	b.n	800bd88 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2201      	movs	r2, #1
 800bd56:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d005      	beq.n	800bd6e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	68db      	ldr	r3, [r3, #12]
 800bd66:	f043 0202 	orr.w	r2, r3, #2
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	330c      	adds	r3, #12
 800bd72:	2202      	movs	r2, #2
 800bd74:	4619      	mov	r1, r3
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f000 f8eb 	bl	800bf52 <USBD_CtlSendData>
      break;
 800bd7c:	e004      	b.n	800bd88 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bd7e:	6839      	ldr	r1, [r7, #0]
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f000 f875 	bl	800be70 <USBD_CtlError>
      break;
 800bd86:	bf00      	nop
  }
}
 800bd88:	bf00      	nop
 800bd8a:	3708      	adds	r7, #8
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b082      	sub	sp, #8
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	885b      	ldrh	r3, [r3, #2]
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	d106      	bne.n	800bdb0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2201      	movs	r2, #1
 800bda6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f000 f92b 	bl	800c006 <USBD_CtlSendStatus>
  }
}
 800bdb0:	bf00      	nop
 800bdb2:	3708      	adds	r7, #8
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}

0800bdb8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdc8:	b2db      	uxtb	r3, r3
 800bdca:	3b01      	subs	r3, #1
 800bdcc:	2b02      	cmp	r3, #2
 800bdce:	d80b      	bhi.n	800bde8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	885b      	ldrh	r3, [r3, #2]
 800bdd4:	2b01      	cmp	r3, #1
 800bdd6:	d10c      	bne.n	800bdf2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2200      	movs	r2, #0
 800bddc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f000 f910 	bl	800c006 <USBD_CtlSendStatus>
      }
      break;
 800bde6:	e004      	b.n	800bdf2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bde8:	6839      	ldr	r1, [r7, #0]
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f000 f840 	bl	800be70 <USBD_CtlError>
      break;
 800bdf0:	e000      	b.n	800bdf4 <USBD_ClrFeature+0x3c>
      break;
 800bdf2:	bf00      	nop
  }
}
 800bdf4:	bf00      	nop
 800bdf6:	3708      	adds	r7, #8
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}

0800bdfc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b084      	sub	sp, #16
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	781a      	ldrb	r2, [r3, #0]
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	3301      	adds	r3, #1
 800be16:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	781a      	ldrb	r2, [r3, #0]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	3301      	adds	r3, #1
 800be24:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800be26:	68f8      	ldr	r0, [r7, #12]
 800be28:	f7ff fa92 	bl	800b350 <SWAPBYTE>
 800be2c:	4603      	mov	r3, r0
 800be2e:	461a      	mov	r2, r3
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	3301      	adds	r3, #1
 800be38:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	3301      	adds	r3, #1
 800be3e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800be40:	68f8      	ldr	r0, [r7, #12]
 800be42:	f7ff fa85 	bl	800b350 <SWAPBYTE>
 800be46:	4603      	mov	r3, r0
 800be48:	461a      	mov	r2, r3
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	3301      	adds	r3, #1
 800be52:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	3301      	adds	r3, #1
 800be58:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800be5a:	68f8      	ldr	r0, [r7, #12]
 800be5c:	f7ff fa78 	bl	800b350 <SWAPBYTE>
 800be60:	4603      	mov	r3, r0
 800be62:	461a      	mov	r2, r3
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	80da      	strh	r2, [r3, #6]
}
 800be68:	bf00      	nop
 800be6a:	3710      	adds	r7, #16
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}

0800be70 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800be7a:	2180      	movs	r1, #128	; 0x80
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f000 fc89 	bl	800c794 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800be82:	2100      	movs	r1, #0
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f000 fc85 	bl	800c794 <USBD_LL_StallEP>
}
 800be8a:	bf00      	nop
 800be8c:	3708      	adds	r7, #8
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}

0800be92 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800be92:	b580      	push	{r7, lr}
 800be94:	b086      	sub	sp, #24
 800be96:	af00      	add	r7, sp, #0
 800be98:	60f8      	str	r0, [r7, #12]
 800be9a:	60b9      	str	r1, [r7, #8]
 800be9c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800be9e:	2300      	movs	r3, #0
 800bea0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d036      	beq.n	800bf16 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800beac:	6938      	ldr	r0, [r7, #16]
 800beae:	f000 f836 	bl	800bf1e <USBD_GetLen>
 800beb2:	4603      	mov	r3, r0
 800beb4:	3301      	adds	r3, #1
 800beb6:	b29b      	uxth	r3, r3
 800beb8:	005b      	lsls	r3, r3, #1
 800beba:	b29a      	uxth	r2, r3
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bec0:	7dfb      	ldrb	r3, [r7, #23]
 800bec2:	68ba      	ldr	r2, [r7, #8]
 800bec4:	4413      	add	r3, r2
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	7812      	ldrb	r2, [r2, #0]
 800beca:	701a      	strb	r2, [r3, #0]
  idx++;
 800becc:	7dfb      	ldrb	r3, [r7, #23]
 800bece:	3301      	adds	r3, #1
 800bed0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bed2:	7dfb      	ldrb	r3, [r7, #23]
 800bed4:	68ba      	ldr	r2, [r7, #8]
 800bed6:	4413      	add	r3, r2
 800bed8:	2203      	movs	r2, #3
 800beda:	701a      	strb	r2, [r3, #0]
  idx++;
 800bedc:	7dfb      	ldrb	r3, [r7, #23]
 800bede:	3301      	adds	r3, #1
 800bee0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bee2:	e013      	b.n	800bf0c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bee4:	7dfb      	ldrb	r3, [r7, #23]
 800bee6:	68ba      	ldr	r2, [r7, #8]
 800bee8:	4413      	add	r3, r2
 800beea:	693a      	ldr	r2, [r7, #16]
 800beec:	7812      	ldrb	r2, [r2, #0]
 800beee:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	3301      	adds	r3, #1
 800bef4:	613b      	str	r3, [r7, #16]
    idx++;
 800bef6:	7dfb      	ldrb	r3, [r7, #23]
 800bef8:	3301      	adds	r3, #1
 800befa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800befc:	7dfb      	ldrb	r3, [r7, #23]
 800befe:	68ba      	ldr	r2, [r7, #8]
 800bf00:	4413      	add	r3, r2
 800bf02:	2200      	movs	r2, #0
 800bf04:	701a      	strb	r2, [r3, #0]
    idx++;
 800bf06:	7dfb      	ldrb	r3, [r7, #23]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d1e7      	bne.n	800bee4 <USBD_GetString+0x52>
 800bf14:	e000      	b.n	800bf18 <USBD_GetString+0x86>
    return;
 800bf16:	bf00      	nop
  }
}
 800bf18:	3718      	adds	r7, #24
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}

0800bf1e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bf1e:	b480      	push	{r7}
 800bf20:	b085      	sub	sp, #20
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bf26:	2300      	movs	r3, #0
 800bf28:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bf2e:	e005      	b.n	800bf3c <USBD_GetLen+0x1e>
  {
    len++;
 800bf30:	7bfb      	ldrb	r3, [r7, #15]
 800bf32:	3301      	adds	r3, #1
 800bf34:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	3301      	adds	r3, #1
 800bf3a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	781b      	ldrb	r3, [r3, #0]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d1f5      	bne.n	800bf30 <USBD_GetLen+0x12>
  }

  return len;
 800bf44:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3714      	adds	r7, #20
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf50:	4770      	bx	lr

0800bf52 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bf52:	b580      	push	{r7, lr}
 800bf54:	b084      	sub	sp, #16
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	60f8      	str	r0, [r7, #12]
 800bf5a:	60b9      	str	r1, [r7, #8]
 800bf5c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2202      	movs	r2, #2
 800bf62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	687a      	ldr	r2, [r7, #4]
 800bf6a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	68ba      	ldr	r2, [r7, #8]
 800bf76:	2100      	movs	r1, #0
 800bf78:	68f8      	ldr	r0, [r7, #12]
 800bf7a:	f000 fc95 	bl	800c8a8 <USBD_LL_Transmit>

  return USBD_OK;
 800bf7e:	2300      	movs	r3, #0
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3710      	adds	r7, #16
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}

0800bf88 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b084      	sub	sp, #16
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	60f8      	str	r0, [r7, #12]
 800bf90:	60b9      	str	r1, [r7, #8]
 800bf92:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	68ba      	ldr	r2, [r7, #8]
 800bf98:	2100      	movs	r1, #0
 800bf9a:	68f8      	ldr	r0, [r7, #12]
 800bf9c:	f000 fc84 	bl	800c8a8 <USBD_LL_Transmit>

  return USBD_OK;
 800bfa0:	2300      	movs	r3, #0
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3710      	adds	r7, #16
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}

0800bfaa <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bfaa:	b580      	push	{r7, lr}
 800bfac:	b084      	sub	sp, #16
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	60f8      	str	r0, [r7, #12]
 800bfb2:	60b9      	str	r1, [r7, #8]
 800bfb4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2203      	movs	r2, #3
 800bfba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	687a      	ldr	r2, [r7, #4]
 800bfc2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	687a      	ldr	r2, [r7, #4]
 800bfca:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	68ba      	ldr	r2, [r7, #8]
 800bfd2:	2100      	movs	r1, #0
 800bfd4:	68f8      	ldr	r0, [r7, #12]
 800bfd6:	f000 fc88 	bl	800c8ea <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bfda:	2300      	movs	r3, #0
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3710      	adds	r7, #16
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b084      	sub	sp, #16
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	60f8      	str	r0, [r7, #12]
 800bfec:	60b9      	str	r1, [r7, #8]
 800bfee:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	68ba      	ldr	r2, [r7, #8]
 800bff4:	2100      	movs	r1, #0
 800bff6:	68f8      	ldr	r0, [r7, #12]
 800bff8:	f000 fc77 	bl	800c8ea <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bffc:	2300      	movs	r3, #0
}
 800bffe:	4618      	mov	r0, r3
 800c000:	3710      	adds	r7, #16
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}

0800c006 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c006:	b580      	push	{r7, lr}
 800c008:	b082      	sub	sp, #8
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2204      	movs	r2, #4
 800c012:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c016:	2300      	movs	r3, #0
 800c018:	2200      	movs	r2, #0
 800c01a:	2100      	movs	r1, #0
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f000 fc43 	bl	800c8a8 <USBD_LL_Transmit>

  return USBD_OK;
 800c022:	2300      	movs	r3, #0
}
 800c024:	4618      	mov	r0, r3
 800c026:	3708      	adds	r7, #8
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b082      	sub	sp, #8
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2205      	movs	r2, #5
 800c038:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c03c:	2300      	movs	r3, #0
 800c03e:	2200      	movs	r2, #0
 800c040:	2100      	movs	r1, #0
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 fc51 	bl	800c8ea <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c048:	2300      	movs	r3, #0
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3708      	adds	r7, #8
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
	...

0800c054 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800c058:	2200      	movs	r2, #0
 800c05a:	4912      	ldr	r1, [pc, #72]	; (800c0a4 <MX_USB_Device_Init+0x50>)
 800c05c:	4812      	ldr	r0, [pc, #72]	; (800c0a8 <MX_USB_Device_Init+0x54>)
 800c05e:	f7fe fed9 	bl	800ae14 <USBD_Init>
 800c062:	4603      	mov	r3, r0
 800c064:	2b00      	cmp	r3, #0
 800c066:	d001      	beq.n	800c06c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800c068:	f7f5 fa20 	bl	80014ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800c06c:	490f      	ldr	r1, [pc, #60]	; (800c0ac <MX_USB_Device_Init+0x58>)
 800c06e:	480e      	ldr	r0, [pc, #56]	; (800c0a8 <MX_USB_Device_Init+0x54>)
 800c070:	f7fe ff00 	bl	800ae74 <USBD_RegisterClass>
 800c074:	4603      	mov	r3, r0
 800c076:	2b00      	cmp	r3, #0
 800c078:	d001      	beq.n	800c07e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800c07a:	f7f5 fa17 	bl	80014ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800c07e:	490c      	ldr	r1, [pc, #48]	; (800c0b0 <MX_USB_Device_Init+0x5c>)
 800c080:	4809      	ldr	r0, [pc, #36]	; (800c0a8 <MX_USB_Device_Init+0x54>)
 800c082:	f7fe fe51 	bl	800ad28 <USBD_CDC_RegisterInterface>
 800c086:	4603      	mov	r3, r0
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d001      	beq.n	800c090 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800c08c:	f7f5 fa0e 	bl	80014ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800c090:	4805      	ldr	r0, [pc, #20]	; (800c0a8 <MX_USB_Device_Init+0x54>)
 800c092:	f7fe ff16 	bl	800aec2 <USBD_Start>
 800c096:	4603      	mov	r3, r0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d001      	beq.n	800c0a0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800c09c:	f7f5 fa06 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800c0a0:	bf00      	nop
 800c0a2:	bd80      	pop	{r7, pc}
 800c0a4:	20002804 	.word	0x20002804
 800c0a8:	20002be4 	.word	0x20002be4
 800c0ac:	200026ec 	.word	0x200026ec
 800c0b0:	200027f0 	.word	0x200027f0

0800c0b4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	4905      	ldr	r1, [pc, #20]	; (800c0d0 <CDC_Init_FS+0x1c>)
 800c0bc:	4805      	ldr	r0, [pc, #20]	; (800c0d4 <CDC_Init_FS+0x20>)
 800c0be:	f7fe fe48 	bl	800ad52 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c0c2:	4905      	ldr	r1, [pc, #20]	; (800c0d8 <CDC_Init_FS+0x24>)
 800c0c4:	4803      	ldr	r0, [pc, #12]	; (800c0d4 <CDC_Init_FS+0x20>)
 800c0c6:	f7fe fe62 	bl	800ad8e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c0ca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	bd80      	pop	{r7, pc}
 800c0d0:	200036b4 	.word	0x200036b4
 800c0d4:	20002be4 	.word	0x20002be4
 800c0d8:	20002eb4 	.word	0x20002eb4

0800c0dc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c0e0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ea:	4770      	bx	lr

0800c0ec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b083      	sub	sp, #12
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	6039      	str	r1, [r7, #0]
 800c0f6:	71fb      	strb	r3, [r7, #7]
 800c0f8:	4613      	mov	r3, r2
 800c0fa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c0fc:	79fb      	ldrb	r3, [r7, #7]
 800c0fe:	2b23      	cmp	r3, #35	; 0x23
 800c100:	d84a      	bhi.n	800c198 <CDC_Control_FS+0xac>
 800c102:	a201      	add	r2, pc, #4	; (adr r2, 800c108 <CDC_Control_FS+0x1c>)
 800c104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c108:	0800c199 	.word	0x0800c199
 800c10c:	0800c199 	.word	0x0800c199
 800c110:	0800c199 	.word	0x0800c199
 800c114:	0800c199 	.word	0x0800c199
 800c118:	0800c199 	.word	0x0800c199
 800c11c:	0800c199 	.word	0x0800c199
 800c120:	0800c199 	.word	0x0800c199
 800c124:	0800c199 	.word	0x0800c199
 800c128:	0800c199 	.word	0x0800c199
 800c12c:	0800c199 	.word	0x0800c199
 800c130:	0800c199 	.word	0x0800c199
 800c134:	0800c199 	.word	0x0800c199
 800c138:	0800c199 	.word	0x0800c199
 800c13c:	0800c199 	.word	0x0800c199
 800c140:	0800c199 	.word	0x0800c199
 800c144:	0800c199 	.word	0x0800c199
 800c148:	0800c199 	.word	0x0800c199
 800c14c:	0800c199 	.word	0x0800c199
 800c150:	0800c199 	.word	0x0800c199
 800c154:	0800c199 	.word	0x0800c199
 800c158:	0800c199 	.word	0x0800c199
 800c15c:	0800c199 	.word	0x0800c199
 800c160:	0800c199 	.word	0x0800c199
 800c164:	0800c199 	.word	0x0800c199
 800c168:	0800c199 	.word	0x0800c199
 800c16c:	0800c199 	.word	0x0800c199
 800c170:	0800c199 	.word	0x0800c199
 800c174:	0800c199 	.word	0x0800c199
 800c178:	0800c199 	.word	0x0800c199
 800c17c:	0800c199 	.word	0x0800c199
 800c180:	0800c199 	.word	0x0800c199
 800c184:	0800c199 	.word	0x0800c199
 800c188:	0800c199 	.word	0x0800c199
 800c18c:	0800c199 	.word	0x0800c199
 800c190:	0800c199 	.word	0x0800c199
 800c194:	0800c199 	.word	0x0800c199
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c198:	bf00      	nop
  }

  return (USBD_OK);
 800c19a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	370c      	adds	r7, #12
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr

0800c1a8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b084      	sub	sp, #16
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  input_received_flag = 1;
 800c1b2:	4b11      	ldr	r3, [pc, #68]	; (800c1f8 <CDC_Receive_FS+0x50>)
 800c1b4:	2201      	movs	r2, #1
 800c1b6:	701a      	strb	r2, [r3, #0]
  memset (UserRxBufferFS, '\0', APP_RX_DATA_SIZE);  // clear the buffer
 800c1b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c1bc:	2100      	movs	r1, #0
 800c1be:	480f      	ldr	r0, [pc, #60]	; (800c1fc <CDC_Receive_FS+0x54>)
 800c1c0:	f000 fc80 	bl	800cac4 <memset>
  uint8_t len = (uint8_t) Len;
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	73fb      	strb	r3, [r7, #15]
  memcpy(UserRxBufferFS, Buf, len);  // copy the data to the buffer
 800c1c8:	7bfb      	ldrb	r3, [r7, #15]
 800c1ca:	461a      	mov	r2, r3
 800c1cc:	6879      	ldr	r1, [r7, #4]
 800c1ce:	480b      	ldr	r0, [pc, #44]	; (800c1fc <CDC_Receive_FS+0x54>)
 800c1d0:	f000 fc6a 	bl	800caa8 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 800c1d4:	7bfb      	ldrb	r3, [r7, #15]
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	2100      	movs	r1, #0
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 fc72 	bl	800cac4 <memset>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c1e0:	6879      	ldr	r1, [r7, #4]
 800c1e2:	4807      	ldr	r0, [pc, #28]	; (800c200 <CDC_Receive_FS+0x58>)
 800c1e4:	f7fe fdd3 	bl	800ad8e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c1e8:	4805      	ldr	r0, [pc, #20]	; (800c200 <CDC_Receive_FS+0x58>)
 800c1ea:	f7fe fde9 	bl	800adc0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c1ee:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	3710      	adds	r7, #16
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}
 800c1f8:	20003eb4 	.word	0x20003eb4
 800c1fc:	20002eb4 	.word	0x20002eb4
 800c200:	20002be4 	.word	0x20002be4

0800c204 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c204:	b480      	push	{r7}
 800c206:	b087      	sub	sp, #28
 800c208:	af00      	add	r7, sp, #0
 800c20a:	60f8      	str	r0, [r7, #12]
 800c20c:	60b9      	str	r1, [r7, #8]
 800c20e:	4613      	mov	r3, r2
 800c210:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c212:	2300      	movs	r3, #0
 800c214:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c216:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	371c      	adds	r7, #28
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr
	...

0800c228 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c228:	b480      	push	{r7}
 800c22a:	b083      	sub	sp, #12
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	4603      	mov	r3, r0
 800c230:	6039      	str	r1, [r7, #0]
 800c232:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	2212      	movs	r2, #18
 800c238:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800c23a:	4b03      	ldr	r3, [pc, #12]	; (800c248 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	370c      	adds	r7, #12
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr
 800c248:	20002824 	.word	0x20002824

0800c24c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b083      	sub	sp, #12
 800c250:	af00      	add	r7, sp, #0
 800c252:	4603      	mov	r3, r0
 800c254:	6039      	str	r1, [r7, #0]
 800c256:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	2204      	movs	r2, #4
 800c25c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c25e:	4b03      	ldr	r3, [pc, #12]	; (800c26c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800c260:	4618      	mov	r0, r3
 800c262:	370c      	adds	r7, #12
 800c264:	46bd      	mov	sp, r7
 800c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26a:	4770      	bx	lr
 800c26c:	20002838 	.word	0x20002838

0800c270 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
 800c276:	4603      	mov	r3, r0
 800c278:	6039      	str	r1, [r7, #0]
 800c27a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c27c:	79fb      	ldrb	r3, [r7, #7]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d105      	bne.n	800c28e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c282:	683a      	ldr	r2, [r7, #0]
 800c284:	4907      	ldr	r1, [pc, #28]	; (800c2a4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800c286:	4808      	ldr	r0, [pc, #32]	; (800c2a8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800c288:	f7ff fe03 	bl	800be92 <USBD_GetString>
 800c28c:	e004      	b.n	800c298 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c28e:	683a      	ldr	r2, [r7, #0]
 800c290:	4904      	ldr	r1, [pc, #16]	; (800c2a4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800c292:	4805      	ldr	r0, [pc, #20]	; (800c2a8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800c294:	f7ff fdfd 	bl	800be92 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c298:	4b02      	ldr	r3, [pc, #8]	; (800c2a4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	3708      	adds	r7, #8
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}
 800c2a2:	bf00      	nop
 800c2a4:	20003eb8 	.word	0x20003eb8
 800c2a8:	0800f510 	.word	0x0800f510

0800c2ac <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b082      	sub	sp, #8
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	6039      	str	r1, [r7, #0]
 800c2b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c2b8:	683a      	ldr	r2, [r7, #0]
 800c2ba:	4904      	ldr	r1, [pc, #16]	; (800c2cc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800c2bc:	4804      	ldr	r0, [pc, #16]	; (800c2d0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800c2be:	f7ff fde8 	bl	800be92 <USBD_GetString>
  return USBD_StrDesc;
 800c2c2:	4b02      	ldr	r3, [pc, #8]	; (800c2cc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3708      	adds	r7, #8
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}
 800c2cc:	20003eb8 	.word	0x20003eb8
 800c2d0:	0800f528 	.word	0x0800f528

0800c2d4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b082      	sub	sp, #8
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	4603      	mov	r3, r0
 800c2dc:	6039      	str	r1, [r7, #0]
 800c2de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	221a      	movs	r2, #26
 800c2e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c2e6:	f000 f843 	bl	800c370 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800c2ea:	4b02      	ldr	r3, [pc, #8]	; (800c2f4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3708      	adds	r7, #8
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}
 800c2f4:	2000283c 	.word	0x2000283c

0800c2f8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	4603      	mov	r3, r0
 800c300:	6039      	str	r1, [r7, #0]
 800c302:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c304:	79fb      	ldrb	r3, [r7, #7]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d105      	bne.n	800c316 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c30a:	683a      	ldr	r2, [r7, #0]
 800c30c:	4907      	ldr	r1, [pc, #28]	; (800c32c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c30e:	4808      	ldr	r0, [pc, #32]	; (800c330 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c310:	f7ff fdbf 	bl	800be92 <USBD_GetString>
 800c314:	e004      	b.n	800c320 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c316:	683a      	ldr	r2, [r7, #0]
 800c318:	4904      	ldr	r1, [pc, #16]	; (800c32c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c31a:	4805      	ldr	r0, [pc, #20]	; (800c330 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c31c:	f7ff fdb9 	bl	800be92 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c320:	4b02      	ldr	r3, [pc, #8]	; (800c32c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800c322:	4618      	mov	r0, r3
 800c324:	3708      	adds	r7, #8
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	20003eb8 	.word	0x20003eb8
 800c330:	0800f53c 	.word	0x0800f53c

0800c334 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b082      	sub	sp, #8
 800c338:	af00      	add	r7, sp, #0
 800c33a:	4603      	mov	r3, r0
 800c33c:	6039      	str	r1, [r7, #0]
 800c33e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c340:	79fb      	ldrb	r3, [r7, #7]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d105      	bne.n	800c352 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c346:	683a      	ldr	r2, [r7, #0]
 800c348:	4907      	ldr	r1, [pc, #28]	; (800c368 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c34a:	4808      	ldr	r0, [pc, #32]	; (800c36c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c34c:	f7ff fda1 	bl	800be92 <USBD_GetString>
 800c350:	e004      	b.n	800c35c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c352:	683a      	ldr	r2, [r7, #0]
 800c354:	4904      	ldr	r1, [pc, #16]	; (800c368 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c356:	4805      	ldr	r0, [pc, #20]	; (800c36c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c358:	f7ff fd9b 	bl	800be92 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c35c:	4b02      	ldr	r3, [pc, #8]	; (800c368 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3708      	adds	r7, #8
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	20003eb8 	.word	0x20003eb8
 800c36c:	0800f548 	.word	0x0800f548

0800c370 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b084      	sub	sp, #16
 800c374:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c376:	4b0f      	ldr	r3, [pc, #60]	; (800c3b4 <Get_SerialNum+0x44>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c37c:	4b0e      	ldr	r3, [pc, #56]	; (800c3b8 <Get_SerialNum+0x48>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c382:	4b0e      	ldr	r3, [pc, #56]	; (800c3bc <Get_SerialNum+0x4c>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c388:	68fa      	ldr	r2, [r7, #12]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	4413      	add	r3, r2
 800c38e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d009      	beq.n	800c3aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c396:	2208      	movs	r2, #8
 800c398:	4909      	ldr	r1, [pc, #36]	; (800c3c0 <Get_SerialNum+0x50>)
 800c39a:	68f8      	ldr	r0, [r7, #12]
 800c39c:	f000 f814 	bl	800c3c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c3a0:	2204      	movs	r2, #4
 800c3a2:	4908      	ldr	r1, [pc, #32]	; (800c3c4 <Get_SerialNum+0x54>)
 800c3a4:	68b8      	ldr	r0, [r7, #8]
 800c3a6:	f000 f80f 	bl	800c3c8 <IntToUnicode>
  }
}
 800c3aa:	bf00      	nop
 800c3ac:	3710      	adds	r7, #16
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}
 800c3b2:	bf00      	nop
 800c3b4:	1fff7590 	.word	0x1fff7590
 800c3b8:	1fff7594 	.word	0x1fff7594
 800c3bc:	1fff7598 	.word	0x1fff7598
 800c3c0:	2000283e 	.word	0x2000283e
 800c3c4:	2000284e 	.word	0x2000284e

0800c3c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b087      	sub	sp, #28
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	60f8      	str	r0, [r7, #12]
 800c3d0:	60b9      	str	r1, [r7, #8]
 800c3d2:	4613      	mov	r3, r2
 800c3d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c3da:	2300      	movs	r3, #0
 800c3dc:	75fb      	strb	r3, [r7, #23]
 800c3de:	e027      	b.n	800c430 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	0f1b      	lsrs	r3, r3, #28
 800c3e4:	2b09      	cmp	r3, #9
 800c3e6:	d80b      	bhi.n	800c400 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	0f1b      	lsrs	r3, r3, #28
 800c3ec:	b2da      	uxtb	r2, r3
 800c3ee:	7dfb      	ldrb	r3, [r7, #23]
 800c3f0:	005b      	lsls	r3, r3, #1
 800c3f2:	4619      	mov	r1, r3
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	440b      	add	r3, r1
 800c3f8:	3230      	adds	r2, #48	; 0x30
 800c3fa:	b2d2      	uxtb	r2, r2
 800c3fc:	701a      	strb	r2, [r3, #0]
 800c3fe:	e00a      	b.n	800c416 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	0f1b      	lsrs	r3, r3, #28
 800c404:	b2da      	uxtb	r2, r3
 800c406:	7dfb      	ldrb	r3, [r7, #23]
 800c408:	005b      	lsls	r3, r3, #1
 800c40a:	4619      	mov	r1, r3
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	440b      	add	r3, r1
 800c410:	3237      	adds	r2, #55	; 0x37
 800c412:	b2d2      	uxtb	r2, r2
 800c414:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	011b      	lsls	r3, r3, #4
 800c41a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c41c:	7dfb      	ldrb	r3, [r7, #23]
 800c41e:	005b      	lsls	r3, r3, #1
 800c420:	3301      	adds	r3, #1
 800c422:	68ba      	ldr	r2, [r7, #8]
 800c424:	4413      	add	r3, r2
 800c426:	2200      	movs	r2, #0
 800c428:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c42a:	7dfb      	ldrb	r3, [r7, #23]
 800c42c:	3301      	adds	r3, #1
 800c42e:	75fb      	strb	r3, [r7, #23]
 800c430:	7dfa      	ldrb	r2, [r7, #23]
 800c432:	79fb      	ldrb	r3, [r7, #7]
 800c434:	429a      	cmp	r2, r3
 800c436:	d3d3      	bcc.n	800c3e0 <IntToUnicode+0x18>
  }
}
 800c438:	bf00      	nop
 800c43a:	bf00      	nop
 800c43c:	371c      	adds	r7, #28
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr
	...

0800c448 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b098      	sub	sp, #96	; 0x60
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c450:	f107 030c 	add.w	r3, r7, #12
 800c454:	2254      	movs	r2, #84	; 0x54
 800c456:	2100      	movs	r1, #0
 800c458:	4618      	mov	r0, r3
 800c45a:	f000 fb33 	bl	800cac4 <memset>
  if(pcdHandle->Instance==USB)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	4a15      	ldr	r2, [pc, #84]	; (800c4b8 <HAL_PCD_MspInit+0x70>)
 800c464:	4293      	cmp	r3, r2
 800c466:	d122      	bne.n	800c4ae <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c468:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c46c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800c46e:	2300      	movs	r3, #0
 800c470:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c472:	f107 030c 	add.w	r3, r7, #12
 800c476:	4618      	mov	r0, r3
 800c478:	f7fa f95e 	bl	8006738 <HAL_RCCEx_PeriphCLKConfig>
 800c47c:	4603      	mov	r3, r0
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d001      	beq.n	800c486 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800c482:	f7f5 f813 	bl	80014ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c486:	4b0d      	ldr	r3, [pc, #52]	; (800c4bc <HAL_PCD_MspInit+0x74>)
 800c488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c48a:	4a0c      	ldr	r2, [pc, #48]	; (800c4bc <HAL_PCD_MspInit+0x74>)
 800c48c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c490:	6593      	str	r3, [r2, #88]	; 0x58
 800c492:	4b0a      	ldr	r3, [pc, #40]	; (800c4bc <HAL_PCD_MspInit+0x74>)
 800c494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c496:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c49a:	60bb      	str	r3, [r7, #8]
 800c49c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800c49e:	2200      	movs	r2, #0
 800c4a0:	2100      	movs	r1, #0
 800c4a2:	2014      	movs	r0, #20
 800c4a4:	f7f6 fd25 	bl	8002ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800c4a8:	2014      	movs	r0, #20
 800c4aa:	f7f6 fd3c 	bl	8002f26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c4ae:	bf00      	nop
 800c4b0:	3760      	adds	r7, #96	; 0x60
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	40005c00 	.word	0x40005c00
 800c4bc:	40021000 	.word	0x40021000

0800c4c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	4610      	mov	r0, r2
 800c4d8:	f7fe fd3e 	bl	800af58 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800c4dc:	bf00      	nop
 800c4de:	3708      	adds	r7, #8
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}

0800c4e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b082      	sub	sp, #8
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800c4f6:	78fa      	ldrb	r2, [r7, #3]
 800c4f8:	6879      	ldr	r1, [r7, #4]
 800c4fa:	4613      	mov	r3, r2
 800c4fc:	009b      	lsls	r3, r3, #2
 800c4fe:	4413      	add	r3, r2
 800c500:	00db      	lsls	r3, r3, #3
 800c502:	440b      	add	r3, r1
 800c504:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c508:	681a      	ldr	r2, [r3, #0]
 800c50a:	78fb      	ldrb	r3, [r7, #3]
 800c50c:	4619      	mov	r1, r3
 800c50e:	f7fe fd78 	bl	800b002 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800c512:	bf00      	nop
 800c514:	3708      	adds	r7, #8
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}

0800c51a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c51a:	b580      	push	{r7, lr}
 800c51c:	b082      	sub	sp, #8
 800c51e:	af00      	add	r7, sp, #0
 800c520:	6078      	str	r0, [r7, #4]
 800c522:	460b      	mov	r3, r1
 800c524:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800c52c:	78fa      	ldrb	r2, [r7, #3]
 800c52e:	6879      	ldr	r1, [r7, #4]
 800c530:	4613      	mov	r3, r2
 800c532:	009b      	lsls	r3, r3, #2
 800c534:	4413      	add	r3, r2
 800c536:	00db      	lsls	r3, r3, #3
 800c538:	440b      	add	r3, r1
 800c53a:	333c      	adds	r3, #60	; 0x3c
 800c53c:	681a      	ldr	r2, [r3, #0]
 800c53e:	78fb      	ldrb	r3, [r7, #3]
 800c540:	4619      	mov	r1, r3
 800c542:	f7fe fdc1 	bl	800b0c8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800c546:	bf00      	nop
 800c548:	3708      	adds	r7, #8
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}

0800c54e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c54e:	b580      	push	{r7, lr}
 800c550:	b082      	sub	sp, #8
 800c552:	af00      	add	r7, sp, #0
 800c554:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c55c:	4618      	mov	r0, r3
 800c55e:	f7fe fed5 	bl	800b30c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800c562:	bf00      	nop
 800c564:	3708      	adds	r7, #8
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}

0800c56a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b084      	sub	sp, #16
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c572:	2301      	movs	r3, #1
 800c574:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	689b      	ldr	r3, [r3, #8]
 800c57a:	2b02      	cmp	r3, #2
 800c57c:	d001      	beq.n	800c582 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c57e:	f7f4 ff95 	bl	80014ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c588:	7bfa      	ldrb	r2, [r7, #15]
 800c58a:	4611      	mov	r1, r2
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7fe fe7f 	bl	800b290 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c598:	4618      	mov	r0, r3
 800c59a:	f7fe fe2b 	bl	800b1f4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800c59e:	bf00      	nop
 800c5a0:	3710      	adds	r7, #16
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
	...

0800c5a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b082      	sub	sp, #8
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f7fe fe7a 	bl	800b2b0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	699b      	ldr	r3, [r3, #24]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d005      	beq.n	800c5d0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c5c4:	4b04      	ldr	r3, [pc, #16]	; (800c5d8 <HAL_PCD_SuspendCallback+0x30>)
 800c5c6:	691b      	ldr	r3, [r3, #16]
 800c5c8:	4a03      	ldr	r2, [pc, #12]	; (800c5d8 <HAL_PCD_SuspendCallback+0x30>)
 800c5ca:	f043 0306 	orr.w	r3, r3, #6
 800c5ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800c5d0:	bf00      	nop
 800c5d2:	3708      	adds	r7, #8
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}
 800c5d8:	e000ed00 	.word	0xe000ed00

0800c5dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	699b      	ldr	r3, [r3, #24]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d007      	beq.n	800c5fc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c5ec:	4b08      	ldr	r3, [pc, #32]	; (800c610 <HAL_PCD_ResumeCallback+0x34>)
 800c5ee:	691b      	ldr	r3, [r3, #16]
 800c5f0:	4a07      	ldr	r2, [pc, #28]	; (800c610 <HAL_PCD_ResumeCallback+0x34>)
 800c5f2:	f023 0306 	bic.w	r3, r3, #6
 800c5f6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c5f8:	f000 f9fa 	bl	800c9f0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c602:	4618      	mov	r0, r3
 800c604:	f7fe fe6a 	bl	800b2dc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800c608:	bf00      	nop
 800c60a:	3708      	adds	r7, #8
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}
 800c610:	e000ed00 	.word	0xe000ed00

0800c614 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b082      	sub	sp, #8
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800c61c:	4a2b      	ldr	r2, [pc, #172]	; (800c6cc <USBD_LL_Init+0xb8>)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	4a29      	ldr	r2, [pc, #164]	; (800c6cc <USBD_LL_Init+0xb8>)
 800c628:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800c62c:	4b27      	ldr	r3, [pc, #156]	; (800c6cc <USBD_LL_Init+0xb8>)
 800c62e:	4a28      	ldr	r2, [pc, #160]	; (800c6d0 <USBD_LL_Init+0xbc>)
 800c630:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c632:	4b26      	ldr	r3, [pc, #152]	; (800c6cc <USBD_LL_Init+0xb8>)
 800c634:	2208      	movs	r2, #8
 800c636:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c638:	4b24      	ldr	r3, [pc, #144]	; (800c6cc <USBD_LL_Init+0xb8>)
 800c63a:	2202      	movs	r2, #2
 800c63c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c63e:	4b23      	ldr	r3, [pc, #140]	; (800c6cc <USBD_LL_Init+0xb8>)
 800c640:	2202      	movs	r2, #2
 800c642:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800c644:	4b21      	ldr	r3, [pc, #132]	; (800c6cc <USBD_LL_Init+0xb8>)
 800c646:	2200      	movs	r2, #0
 800c648:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c64a:	4b20      	ldr	r3, [pc, #128]	; (800c6cc <USBD_LL_Init+0xb8>)
 800c64c:	2200      	movs	r2, #0
 800c64e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c650:	4b1e      	ldr	r3, [pc, #120]	; (800c6cc <USBD_LL_Init+0xb8>)
 800c652:	2200      	movs	r2, #0
 800c654:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c656:	4b1d      	ldr	r3, [pc, #116]	; (800c6cc <USBD_LL_Init+0xb8>)
 800c658:	2200      	movs	r2, #0
 800c65a:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c65c:	481b      	ldr	r0, [pc, #108]	; (800c6cc <USBD_LL_Init+0xb8>)
 800c65e:	f7f7 fd90 	bl	8004182 <HAL_PCD_Init>
 800c662:	4603      	mov	r3, r0
 800c664:	2b00      	cmp	r3, #0
 800c666:	d001      	beq.n	800c66c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800c668:	f7f4 ff20 	bl	80014ac <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c672:	2318      	movs	r3, #24
 800c674:	2200      	movs	r2, #0
 800c676:	2100      	movs	r1, #0
 800c678:	f7f9 fa49 	bl	8005b0e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c682:	2358      	movs	r3, #88	; 0x58
 800c684:	2200      	movs	r2, #0
 800c686:	2180      	movs	r1, #128	; 0x80
 800c688:	f7f9 fa41 	bl	8005b0e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c692:	23c0      	movs	r3, #192	; 0xc0
 800c694:	2200      	movs	r2, #0
 800c696:	2181      	movs	r1, #129	; 0x81
 800c698:	f7f9 fa39 	bl	8005b0e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c6a2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	2101      	movs	r1, #1
 800c6aa:	f7f9 fa30 	bl	8005b0e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c6b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	2182      	movs	r1, #130	; 0x82
 800c6bc:	f7f9 fa27 	bl	8005b0e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c6c0:	2300      	movs	r3, #0
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3708      	adds	r7, #8
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}
 800c6ca:	bf00      	nop
 800c6cc:	200040b8 	.word	0x200040b8
 800c6d0:	40005c00 	.word	0x40005c00

0800c6d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b084      	sub	sp, #16
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f7f7 fe2e 	bl	800434c <HAL_PCD_Start>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6f4:	7bfb      	ldrb	r3, [r7, #15]
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f000 f980 	bl	800c9fc <USBD_Get_USB_Status>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c700:	7bbb      	ldrb	r3, [r7, #14]
}
 800c702:	4618      	mov	r0, r3
 800c704:	3710      	adds	r7, #16
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}

0800c70a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c70a:	b580      	push	{r7, lr}
 800c70c:	b084      	sub	sp, #16
 800c70e:	af00      	add	r7, sp, #0
 800c710:	6078      	str	r0, [r7, #4]
 800c712:	4608      	mov	r0, r1
 800c714:	4611      	mov	r1, r2
 800c716:	461a      	mov	r2, r3
 800c718:	4603      	mov	r3, r0
 800c71a:	70fb      	strb	r3, [r7, #3]
 800c71c:	460b      	mov	r3, r1
 800c71e:	70bb      	strb	r3, [r7, #2]
 800c720:	4613      	mov	r3, r2
 800c722:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c724:	2300      	movs	r3, #0
 800c726:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c728:	2300      	movs	r3, #0
 800c72a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c732:	78bb      	ldrb	r3, [r7, #2]
 800c734:	883a      	ldrh	r2, [r7, #0]
 800c736:	78f9      	ldrb	r1, [r7, #3]
 800c738:	f7f7 ff76 	bl	8004628 <HAL_PCD_EP_Open>
 800c73c:	4603      	mov	r3, r0
 800c73e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c740:	7bfb      	ldrb	r3, [r7, #15]
 800c742:	4618      	mov	r0, r3
 800c744:	f000 f95a 	bl	800c9fc <USBD_Get_USB_Status>
 800c748:	4603      	mov	r3, r0
 800c74a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c74c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3710      	adds	r7, #16
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}

0800c756 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c756:	b580      	push	{r7, lr}
 800c758:	b084      	sub	sp, #16
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	6078      	str	r0, [r7, #4]
 800c75e:	460b      	mov	r3, r1
 800c760:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c762:	2300      	movs	r3, #0
 800c764:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c766:	2300      	movs	r3, #0
 800c768:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c770:	78fa      	ldrb	r2, [r7, #3]
 800c772:	4611      	mov	r1, r2
 800c774:	4618      	mov	r0, r3
 800c776:	f7f7 ffbd 	bl	80046f4 <HAL_PCD_EP_Close>
 800c77a:	4603      	mov	r3, r0
 800c77c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c77e:	7bfb      	ldrb	r3, [r7, #15]
 800c780:	4618      	mov	r0, r3
 800c782:	f000 f93b 	bl	800c9fc <USBD_Get_USB_Status>
 800c786:	4603      	mov	r3, r0
 800c788:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c78a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3710      	adds	r7, #16
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b084      	sub	sp, #16
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	460b      	mov	r3, r1
 800c79e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c7ae:	78fa      	ldrb	r2, [r7, #3]
 800c7b0:	4611      	mov	r1, r2
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7f8 f87e 	bl	80048b4 <HAL_PCD_EP_SetStall>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7bc:	7bfb      	ldrb	r3, [r7, #15]
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f000 f91c 	bl	800c9fc <USBD_Get_USB_Status>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3710      	adds	r7, #16
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}

0800c7d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7d2:	b580      	push	{r7, lr}
 800c7d4:	b084      	sub	sp, #16
 800c7d6:	af00      	add	r7, sp, #0
 800c7d8:	6078      	str	r0, [r7, #4]
 800c7da:	460b      	mov	r3, r1
 800c7dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c7ec:	78fa      	ldrb	r2, [r7, #3]
 800c7ee:	4611      	mov	r1, r2
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7f8 f8b1 	bl	8004958 <HAL_PCD_EP_ClrStall>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7fa:	7bfb      	ldrb	r3, [r7, #15]
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f000 f8fd 	bl	800c9fc <USBD_Get_USB_Status>
 800c802:	4603      	mov	r3, r0
 800c804:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c806:	7bbb      	ldrb	r3, [r7, #14]
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3710      	adds	r7, #16
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}

0800c810 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c810:	b480      	push	{r7}
 800c812:	b085      	sub	sp, #20
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
 800c818:	460b      	mov	r3, r1
 800c81a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c822:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c824:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	da0c      	bge.n	800c846 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c82c:	78fb      	ldrb	r3, [r7, #3]
 800c82e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c832:	68f9      	ldr	r1, [r7, #12]
 800c834:	1c5a      	adds	r2, r3, #1
 800c836:	4613      	mov	r3, r2
 800c838:	009b      	lsls	r3, r3, #2
 800c83a:	4413      	add	r3, r2
 800c83c:	00db      	lsls	r3, r3, #3
 800c83e:	440b      	add	r3, r1
 800c840:	3302      	adds	r3, #2
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	e00b      	b.n	800c85e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c846:	78fb      	ldrb	r3, [r7, #3]
 800c848:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c84c:	68f9      	ldr	r1, [r7, #12]
 800c84e:	4613      	mov	r3, r2
 800c850:	009b      	lsls	r3, r3, #2
 800c852:	4413      	add	r3, r2
 800c854:	00db      	lsls	r3, r3, #3
 800c856:	440b      	add	r3, r1
 800c858:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c85c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3714      	adds	r7, #20
 800c862:	46bd      	mov	sp, r7
 800c864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c868:	4770      	bx	lr

0800c86a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c86a:	b580      	push	{r7, lr}
 800c86c:	b084      	sub	sp, #16
 800c86e:	af00      	add	r7, sp, #0
 800c870:	6078      	str	r0, [r7, #4]
 800c872:	460b      	mov	r3, r1
 800c874:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c876:	2300      	movs	r3, #0
 800c878:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c87a:	2300      	movs	r3, #0
 800c87c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c884:	78fa      	ldrb	r2, [r7, #3]
 800c886:	4611      	mov	r1, r2
 800c888:	4618      	mov	r0, r3
 800c88a:	f7f7 fea8 	bl	80045de <HAL_PCD_SetAddress>
 800c88e:	4603      	mov	r3, r0
 800c890:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c892:	7bfb      	ldrb	r3, [r7, #15]
 800c894:	4618      	mov	r0, r3
 800c896:	f000 f8b1 	bl	800c9fc <USBD_Get_USB_Status>
 800c89a:	4603      	mov	r3, r0
 800c89c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c89e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3710      	adds	r7, #16
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b086      	sub	sp, #24
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	607a      	str	r2, [r7, #4]
 800c8b2:	603b      	str	r3, [r7, #0]
 800c8b4:	460b      	mov	r3, r1
 800c8b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c8c6:	7af9      	ldrb	r1, [r7, #11]
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	687a      	ldr	r2, [r7, #4]
 800c8cc:	f7f7 ffaf 	bl	800482e <HAL_PCD_EP_Transmit>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8d4:	7dfb      	ldrb	r3, [r7, #23]
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f000 f890 	bl	800c9fc <USBD_Get_USB_Status>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c8e0:	7dbb      	ldrb	r3, [r7, #22]
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	3718      	adds	r7, #24
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}

0800c8ea <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c8ea:	b580      	push	{r7, lr}
 800c8ec:	b086      	sub	sp, #24
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	60f8      	str	r0, [r7, #12]
 800c8f2:	607a      	str	r2, [r7, #4]
 800c8f4:	603b      	str	r3, [r7, #0]
 800c8f6:	460b      	mov	r3, r1
 800c8f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8fe:	2300      	movs	r3, #0
 800c900:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c908:	7af9      	ldrb	r1, [r7, #11]
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	687a      	ldr	r2, [r7, #4]
 800c90e:	f7f7 ff39 	bl	8004784 <HAL_PCD_EP_Receive>
 800c912:	4603      	mov	r3, r0
 800c914:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c916:	7dfb      	ldrb	r3, [r7, #23]
 800c918:	4618      	mov	r0, r3
 800c91a:	f000 f86f 	bl	800c9fc <USBD_Get_USB_Status>
 800c91e:	4603      	mov	r3, r0
 800c920:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c922:	7dbb      	ldrb	r3, [r7, #22]
}
 800c924:	4618      	mov	r0, r3
 800c926:	3718      	adds	r7, #24
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}

0800c92c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
 800c934:	460b      	mov	r3, r1
 800c936:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c93e:	78fa      	ldrb	r2, [r7, #3]
 800c940:	4611      	mov	r1, r2
 800c942:	4618      	mov	r0, r3
 800c944:	f7f7 ff5b 	bl	80047fe <HAL_PCD_EP_GetRxCount>
 800c948:	4603      	mov	r3, r0
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	3708      	adds	r7, #8
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}
	...

0800c954 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b082      	sub	sp, #8
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	460b      	mov	r3, r1
 800c95e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800c960:	78fb      	ldrb	r3, [r7, #3]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d002      	beq.n	800c96c <HAL_PCDEx_LPM_Callback+0x18>
 800c966:	2b01      	cmp	r3, #1
 800c968:	d013      	beq.n	800c992 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800c96a:	e023      	b.n	800c9b4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	699b      	ldr	r3, [r3, #24]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d007      	beq.n	800c984 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c974:	f000 f83c 	bl	800c9f0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c978:	4b10      	ldr	r3, [pc, #64]	; (800c9bc <HAL_PCDEx_LPM_Callback+0x68>)
 800c97a:	691b      	ldr	r3, [r3, #16]
 800c97c:	4a0f      	ldr	r2, [pc, #60]	; (800c9bc <HAL_PCDEx_LPM_Callback+0x68>)
 800c97e:	f023 0306 	bic.w	r3, r3, #6
 800c982:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c98a:	4618      	mov	r0, r3
 800c98c:	f7fe fca6 	bl	800b2dc <USBD_LL_Resume>
    break;
 800c990:	e010      	b.n	800c9b4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c998:	4618      	mov	r0, r3
 800c99a:	f7fe fc89 	bl	800b2b0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	699b      	ldr	r3, [r3, #24]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d005      	beq.n	800c9b2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c9a6:	4b05      	ldr	r3, [pc, #20]	; (800c9bc <HAL_PCDEx_LPM_Callback+0x68>)
 800c9a8:	691b      	ldr	r3, [r3, #16]
 800c9aa:	4a04      	ldr	r2, [pc, #16]	; (800c9bc <HAL_PCDEx_LPM_Callback+0x68>)
 800c9ac:	f043 0306 	orr.w	r3, r3, #6
 800c9b0:	6113      	str	r3, [r2, #16]
    break;
 800c9b2:	bf00      	nop
}
 800c9b4:	bf00      	nop
 800c9b6:	3708      	adds	r7, #8
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}
 800c9bc:	e000ed00 	.word	0xe000ed00

0800c9c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b083      	sub	sp, #12
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c9c8:	4b03      	ldr	r3, [pc, #12]	; (800c9d8 <USBD_static_malloc+0x18>)
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	370c      	adds	r7, #12
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d4:	4770      	bx	lr
 800c9d6:	bf00      	nop
 800c9d8:	200043ac 	.word	0x200043ac

0800c9dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b083      	sub	sp, #12
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]

}
 800c9e4:	bf00      	nop
 800c9e6:	370c      	adds	r7, #12
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr

0800c9f0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c9f4:	f7f4 f9e6 	bl	8000dc4 <SystemClock_Config>
}
 800c9f8:	bf00      	nop
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c9fc:	b480      	push	{r7}
 800c9fe:	b085      	sub	sp, #20
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	4603      	mov	r3, r0
 800ca04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca06:	2300      	movs	r3, #0
 800ca08:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ca0a:	79fb      	ldrb	r3, [r7, #7]
 800ca0c:	2b03      	cmp	r3, #3
 800ca0e:	d817      	bhi.n	800ca40 <USBD_Get_USB_Status+0x44>
 800ca10:	a201      	add	r2, pc, #4	; (adr r2, 800ca18 <USBD_Get_USB_Status+0x1c>)
 800ca12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca16:	bf00      	nop
 800ca18:	0800ca29 	.word	0x0800ca29
 800ca1c:	0800ca2f 	.word	0x0800ca2f
 800ca20:	0800ca35 	.word	0x0800ca35
 800ca24:	0800ca3b 	.word	0x0800ca3b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	73fb      	strb	r3, [r7, #15]
    break;
 800ca2c:	e00b      	b.n	800ca46 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ca2e:	2303      	movs	r3, #3
 800ca30:	73fb      	strb	r3, [r7, #15]
    break;
 800ca32:	e008      	b.n	800ca46 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ca34:	2301      	movs	r3, #1
 800ca36:	73fb      	strb	r3, [r7, #15]
    break;
 800ca38:	e005      	b.n	800ca46 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ca3a:	2303      	movs	r3, #3
 800ca3c:	73fb      	strb	r3, [r7, #15]
    break;
 800ca3e:	e002      	b.n	800ca46 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ca40:	2303      	movs	r3, #3
 800ca42:	73fb      	strb	r3, [r7, #15]
    break;
 800ca44:	bf00      	nop
  }
  return usb_status;
 800ca46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3714      	adds	r7, #20
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca52:	4770      	bx	lr

0800ca54 <__errno>:
 800ca54:	4b01      	ldr	r3, [pc, #4]	; (800ca5c <__errno+0x8>)
 800ca56:	6818      	ldr	r0, [r3, #0]
 800ca58:	4770      	bx	lr
 800ca5a:	bf00      	nop
 800ca5c:	20002858 	.word	0x20002858

0800ca60 <__libc_init_array>:
 800ca60:	b570      	push	{r4, r5, r6, lr}
 800ca62:	4d0d      	ldr	r5, [pc, #52]	; (800ca98 <__libc_init_array+0x38>)
 800ca64:	4c0d      	ldr	r4, [pc, #52]	; (800ca9c <__libc_init_array+0x3c>)
 800ca66:	1b64      	subs	r4, r4, r5
 800ca68:	10a4      	asrs	r4, r4, #2
 800ca6a:	2600      	movs	r6, #0
 800ca6c:	42a6      	cmp	r6, r4
 800ca6e:	d109      	bne.n	800ca84 <__libc_init_array+0x24>
 800ca70:	4d0b      	ldr	r5, [pc, #44]	; (800caa0 <__libc_init_array+0x40>)
 800ca72:	4c0c      	ldr	r4, [pc, #48]	; (800caa4 <__libc_init_array+0x44>)
 800ca74:	f002 fd36 	bl	800f4e4 <_init>
 800ca78:	1b64      	subs	r4, r4, r5
 800ca7a:	10a4      	asrs	r4, r4, #2
 800ca7c:	2600      	movs	r6, #0
 800ca7e:	42a6      	cmp	r6, r4
 800ca80:	d105      	bne.n	800ca8e <__libc_init_array+0x2e>
 800ca82:	bd70      	pop	{r4, r5, r6, pc}
 800ca84:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca88:	4798      	blx	r3
 800ca8a:	3601      	adds	r6, #1
 800ca8c:	e7ee      	b.n	800ca6c <__libc_init_array+0xc>
 800ca8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca92:	4798      	blx	r3
 800ca94:	3601      	adds	r6, #1
 800ca96:	e7f2      	b.n	800ca7e <__libc_init_array+0x1e>
 800ca98:	0800f944 	.word	0x0800f944
 800ca9c:	0800f944 	.word	0x0800f944
 800caa0:	0800f944 	.word	0x0800f944
 800caa4:	0800f948 	.word	0x0800f948

0800caa8 <memcpy>:
 800caa8:	440a      	add	r2, r1
 800caaa:	4291      	cmp	r1, r2
 800caac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cab0:	d100      	bne.n	800cab4 <memcpy+0xc>
 800cab2:	4770      	bx	lr
 800cab4:	b510      	push	{r4, lr}
 800cab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800caba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cabe:	4291      	cmp	r1, r2
 800cac0:	d1f9      	bne.n	800cab6 <memcpy+0xe>
 800cac2:	bd10      	pop	{r4, pc}

0800cac4 <memset>:
 800cac4:	4402      	add	r2, r0
 800cac6:	4603      	mov	r3, r0
 800cac8:	4293      	cmp	r3, r2
 800caca:	d100      	bne.n	800cace <memset+0xa>
 800cacc:	4770      	bx	lr
 800cace:	f803 1b01 	strb.w	r1, [r3], #1
 800cad2:	e7f9      	b.n	800cac8 <memset+0x4>

0800cad4 <__cvt>:
 800cad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cad8:	ec55 4b10 	vmov	r4, r5, d0
 800cadc:	2d00      	cmp	r5, #0
 800cade:	460e      	mov	r6, r1
 800cae0:	4619      	mov	r1, r3
 800cae2:	462b      	mov	r3, r5
 800cae4:	bfbb      	ittet	lt
 800cae6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800caea:	461d      	movlt	r5, r3
 800caec:	2300      	movge	r3, #0
 800caee:	232d      	movlt	r3, #45	; 0x2d
 800caf0:	700b      	strb	r3, [r1, #0]
 800caf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800caf4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800caf8:	4691      	mov	r9, r2
 800cafa:	f023 0820 	bic.w	r8, r3, #32
 800cafe:	bfbc      	itt	lt
 800cb00:	4622      	movlt	r2, r4
 800cb02:	4614      	movlt	r4, r2
 800cb04:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cb08:	d005      	beq.n	800cb16 <__cvt+0x42>
 800cb0a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cb0e:	d100      	bne.n	800cb12 <__cvt+0x3e>
 800cb10:	3601      	adds	r6, #1
 800cb12:	2102      	movs	r1, #2
 800cb14:	e000      	b.n	800cb18 <__cvt+0x44>
 800cb16:	2103      	movs	r1, #3
 800cb18:	ab03      	add	r3, sp, #12
 800cb1a:	9301      	str	r3, [sp, #4]
 800cb1c:	ab02      	add	r3, sp, #8
 800cb1e:	9300      	str	r3, [sp, #0]
 800cb20:	ec45 4b10 	vmov	d0, r4, r5
 800cb24:	4653      	mov	r3, sl
 800cb26:	4632      	mov	r2, r6
 800cb28:	f000 fcca 	bl	800d4c0 <_dtoa_r>
 800cb2c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cb30:	4607      	mov	r7, r0
 800cb32:	d102      	bne.n	800cb3a <__cvt+0x66>
 800cb34:	f019 0f01 	tst.w	r9, #1
 800cb38:	d022      	beq.n	800cb80 <__cvt+0xac>
 800cb3a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cb3e:	eb07 0906 	add.w	r9, r7, r6
 800cb42:	d110      	bne.n	800cb66 <__cvt+0x92>
 800cb44:	783b      	ldrb	r3, [r7, #0]
 800cb46:	2b30      	cmp	r3, #48	; 0x30
 800cb48:	d10a      	bne.n	800cb60 <__cvt+0x8c>
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	4620      	mov	r0, r4
 800cb50:	4629      	mov	r1, r5
 800cb52:	f7f3 ffe1 	bl	8000b18 <__aeabi_dcmpeq>
 800cb56:	b918      	cbnz	r0, 800cb60 <__cvt+0x8c>
 800cb58:	f1c6 0601 	rsb	r6, r6, #1
 800cb5c:	f8ca 6000 	str.w	r6, [sl]
 800cb60:	f8da 3000 	ldr.w	r3, [sl]
 800cb64:	4499      	add	r9, r3
 800cb66:	2200      	movs	r2, #0
 800cb68:	2300      	movs	r3, #0
 800cb6a:	4620      	mov	r0, r4
 800cb6c:	4629      	mov	r1, r5
 800cb6e:	f7f3 ffd3 	bl	8000b18 <__aeabi_dcmpeq>
 800cb72:	b108      	cbz	r0, 800cb78 <__cvt+0xa4>
 800cb74:	f8cd 900c 	str.w	r9, [sp, #12]
 800cb78:	2230      	movs	r2, #48	; 0x30
 800cb7a:	9b03      	ldr	r3, [sp, #12]
 800cb7c:	454b      	cmp	r3, r9
 800cb7e:	d307      	bcc.n	800cb90 <__cvt+0xbc>
 800cb80:	9b03      	ldr	r3, [sp, #12]
 800cb82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb84:	1bdb      	subs	r3, r3, r7
 800cb86:	4638      	mov	r0, r7
 800cb88:	6013      	str	r3, [r2, #0]
 800cb8a:	b004      	add	sp, #16
 800cb8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb90:	1c59      	adds	r1, r3, #1
 800cb92:	9103      	str	r1, [sp, #12]
 800cb94:	701a      	strb	r2, [r3, #0]
 800cb96:	e7f0      	b.n	800cb7a <__cvt+0xa6>

0800cb98 <__exponent>:
 800cb98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	2900      	cmp	r1, #0
 800cb9e:	bfb8      	it	lt
 800cba0:	4249      	neglt	r1, r1
 800cba2:	f803 2b02 	strb.w	r2, [r3], #2
 800cba6:	bfb4      	ite	lt
 800cba8:	222d      	movlt	r2, #45	; 0x2d
 800cbaa:	222b      	movge	r2, #43	; 0x2b
 800cbac:	2909      	cmp	r1, #9
 800cbae:	7042      	strb	r2, [r0, #1]
 800cbb0:	dd2a      	ble.n	800cc08 <__exponent+0x70>
 800cbb2:	f10d 0407 	add.w	r4, sp, #7
 800cbb6:	46a4      	mov	ip, r4
 800cbb8:	270a      	movs	r7, #10
 800cbba:	46a6      	mov	lr, r4
 800cbbc:	460a      	mov	r2, r1
 800cbbe:	fb91 f6f7 	sdiv	r6, r1, r7
 800cbc2:	fb07 1516 	mls	r5, r7, r6, r1
 800cbc6:	3530      	adds	r5, #48	; 0x30
 800cbc8:	2a63      	cmp	r2, #99	; 0x63
 800cbca:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800cbce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cbd2:	4631      	mov	r1, r6
 800cbd4:	dcf1      	bgt.n	800cbba <__exponent+0x22>
 800cbd6:	3130      	adds	r1, #48	; 0x30
 800cbd8:	f1ae 0502 	sub.w	r5, lr, #2
 800cbdc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cbe0:	1c44      	adds	r4, r0, #1
 800cbe2:	4629      	mov	r1, r5
 800cbe4:	4561      	cmp	r1, ip
 800cbe6:	d30a      	bcc.n	800cbfe <__exponent+0x66>
 800cbe8:	f10d 0209 	add.w	r2, sp, #9
 800cbec:	eba2 020e 	sub.w	r2, r2, lr
 800cbf0:	4565      	cmp	r5, ip
 800cbf2:	bf88      	it	hi
 800cbf4:	2200      	movhi	r2, #0
 800cbf6:	4413      	add	r3, r2
 800cbf8:	1a18      	subs	r0, r3, r0
 800cbfa:	b003      	add	sp, #12
 800cbfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc02:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cc06:	e7ed      	b.n	800cbe4 <__exponent+0x4c>
 800cc08:	2330      	movs	r3, #48	; 0x30
 800cc0a:	3130      	adds	r1, #48	; 0x30
 800cc0c:	7083      	strb	r3, [r0, #2]
 800cc0e:	70c1      	strb	r1, [r0, #3]
 800cc10:	1d03      	adds	r3, r0, #4
 800cc12:	e7f1      	b.n	800cbf8 <__exponent+0x60>

0800cc14 <_printf_float>:
 800cc14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc18:	ed2d 8b02 	vpush	{d8}
 800cc1c:	b08d      	sub	sp, #52	; 0x34
 800cc1e:	460c      	mov	r4, r1
 800cc20:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cc24:	4616      	mov	r6, r2
 800cc26:	461f      	mov	r7, r3
 800cc28:	4605      	mov	r5, r0
 800cc2a:	f001 fa37 	bl	800e09c <_localeconv_r>
 800cc2e:	f8d0 a000 	ldr.w	sl, [r0]
 800cc32:	4650      	mov	r0, sl
 800cc34:	f7f3 faf4 	bl	8000220 <strlen>
 800cc38:	2300      	movs	r3, #0
 800cc3a:	930a      	str	r3, [sp, #40]	; 0x28
 800cc3c:	6823      	ldr	r3, [r4, #0]
 800cc3e:	9305      	str	r3, [sp, #20]
 800cc40:	f8d8 3000 	ldr.w	r3, [r8]
 800cc44:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cc48:	3307      	adds	r3, #7
 800cc4a:	f023 0307 	bic.w	r3, r3, #7
 800cc4e:	f103 0208 	add.w	r2, r3, #8
 800cc52:	f8c8 2000 	str.w	r2, [r8]
 800cc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cc5e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cc62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cc66:	9307      	str	r3, [sp, #28]
 800cc68:	f8cd 8018 	str.w	r8, [sp, #24]
 800cc6c:	ee08 0a10 	vmov	s16, r0
 800cc70:	4b9f      	ldr	r3, [pc, #636]	; (800cef0 <_printf_float+0x2dc>)
 800cc72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc7a:	f7f3 ff7f 	bl	8000b7c <__aeabi_dcmpun>
 800cc7e:	bb88      	cbnz	r0, 800cce4 <_printf_float+0xd0>
 800cc80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc84:	4b9a      	ldr	r3, [pc, #616]	; (800cef0 <_printf_float+0x2dc>)
 800cc86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc8a:	f7f3 ff59 	bl	8000b40 <__aeabi_dcmple>
 800cc8e:	bb48      	cbnz	r0, 800cce4 <_printf_float+0xd0>
 800cc90:	2200      	movs	r2, #0
 800cc92:	2300      	movs	r3, #0
 800cc94:	4640      	mov	r0, r8
 800cc96:	4649      	mov	r1, r9
 800cc98:	f7f3 ff48 	bl	8000b2c <__aeabi_dcmplt>
 800cc9c:	b110      	cbz	r0, 800cca4 <_printf_float+0x90>
 800cc9e:	232d      	movs	r3, #45	; 0x2d
 800cca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cca4:	4b93      	ldr	r3, [pc, #588]	; (800cef4 <_printf_float+0x2e0>)
 800cca6:	4894      	ldr	r0, [pc, #592]	; (800cef8 <_printf_float+0x2e4>)
 800cca8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ccac:	bf94      	ite	ls
 800ccae:	4698      	movls	r8, r3
 800ccb0:	4680      	movhi	r8, r0
 800ccb2:	2303      	movs	r3, #3
 800ccb4:	6123      	str	r3, [r4, #16]
 800ccb6:	9b05      	ldr	r3, [sp, #20]
 800ccb8:	f023 0204 	bic.w	r2, r3, #4
 800ccbc:	6022      	str	r2, [r4, #0]
 800ccbe:	f04f 0900 	mov.w	r9, #0
 800ccc2:	9700      	str	r7, [sp, #0]
 800ccc4:	4633      	mov	r3, r6
 800ccc6:	aa0b      	add	r2, sp, #44	; 0x2c
 800ccc8:	4621      	mov	r1, r4
 800ccca:	4628      	mov	r0, r5
 800cccc:	f000 f9d8 	bl	800d080 <_printf_common>
 800ccd0:	3001      	adds	r0, #1
 800ccd2:	f040 8090 	bne.w	800cdf6 <_printf_float+0x1e2>
 800ccd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ccda:	b00d      	add	sp, #52	; 0x34
 800ccdc:	ecbd 8b02 	vpop	{d8}
 800cce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cce4:	4642      	mov	r2, r8
 800cce6:	464b      	mov	r3, r9
 800cce8:	4640      	mov	r0, r8
 800ccea:	4649      	mov	r1, r9
 800ccec:	f7f3 ff46 	bl	8000b7c <__aeabi_dcmpun>
 800ccf0:	b140      	cbz	r0, 800cd04 <_printf_float+0xf0>
 800ccf2:	464b      	mov	r3, r9
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	bfbc      	itt	lt
 800ccf8:	232d      	movlt	r3, #45	; 0x2d
 800ccfa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ccfe:	487f      	ldr	r0, [pc, #508]	; (800cefc <_printf_float+0x2e8>)
 800cd00:	4b7f      	ldr	r3, [pc, #508]	; (800cf00 <_printf_float+0x2ec>)
 800cd02:	e7d1      	b.n	800cca8 <_printf_float+0x94>
 800cd04:	6863      	ldr	r3, [r4, #4]
 800cd06:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cd0a:	9206      	str	r2, [sp, #24]
 800cd0c:	1c5a      	adds	r2, r3, #1
 800cd0e:	d13f      	bne.n	800cd90 <_printf_float+0x17c>
 800cd10:	2306      	movs	r3, #6
 800cd12:	6063      	str	r3, [r4, #4]
 800cd14:	9b05      	ldr	r3, [sp, #20]
 800cd16:	6861      	ldr	r1, [r4, #4]
 800cd18:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	9303      	str	r3, [sp, #12]
 800cd20:	ab0a      	add	r3, sp, #40	; 0x28
 800cd22:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cd26:	ab09      	add	r3, sp, #36	; 0x24
 800cd28:	ec49 8b10 	vmov	d0, r8, r9
 800cd2c:	9300      	str	r3, [sp, #0]
 800cd2e:	6022      	str	r2, [r4, #0]
 800cd30:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cd34:	4628      	mov	r0, r5
 800cd36:	f7ff fecd 	bl	800cad4 <__cvt>
 800cd3a:	9b06      	ldr	r3, [sp, #24]
 800cd3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd3e:	2b47      	cmp	r3, #71	; 0x47
 800cd40:	4680      	mov	r8, r0
 800cd42:	d108      	bne.n	800cd56 <_printf_float+0x142>
 800cd44:	1cc8      	adds	r0, r1, #3
 800cd46:	db02      	blt.n	800cd4e <_printf_float+0x13a>
 800cd48:	6863      	ldr	r3, [r4, #4]
 800cd4a:	4299      	cmp	r1, r3
 800cd4c:	dd41      	ble.n	800cdd2 <_printf_float+0x1be>
 800cd4e:	f1ab 0b02 	sub.w	fp, fp, #2
 800cd52:	fa5f fb8b 	uxtb.w	fp, fp
 800cd56:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cd5a:	d820      	bhi.n	800cd9e <_printf_float+0x18a>
 800cd5c:	3901      	subs	r1, #1
 800cd5e:	465a      	mov	r2, fp
 800cd60:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cd64:	9109      	str	r1, [sp, #36]	; 0x24
 800cd66:	f7ff ff17 	bl	800cb98 <__exponent>
 800cd6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd6c:	1813      	adds	r3, r2, r0
 800cd6e:	2a01      	cmp	r2, #1
 800cd70:	4681      	mov	r9, r0
 800cd72:	6123      	str	r3, [r4, #16]
 800cd74:	dc02      	bgt.n	800cd7c <_printf_float+0x168>
 800cd76:	6822      	ldr	r2, [r4, #0]
 800cd78:	07d2      	lsls	r2, r2, #31
 800cd7a:	d501      	bpl.n	800cd80 <_printf_float+0x16c>
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	6123      	str	r3, [r4, #16]
 800cd80:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d09c      	beq.n	800ccc2 <_printf_float+0xae>
 800cd88:	232d      	movs	r3, #45	; 0x2d
 800cd8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd8e:	e798      	b.n	800ccc2 <_printf_float+0xae>
 800cd90:	9a06      	ldr	r2, [sp, #24]
 800cd92:	2a47      	cmp	r2, #71	; 0x47
 800cd94:	d1be      	bne.n	800cd14 <_printf_float+0x100>
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d1bc      	bne.n	800cd14 <_printf_float+0x100>
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	e7b9      	b.n	800cd12 <_printf_float+0xfe>
 800cd9e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cda2:	d118      	bne.n	800cdd6 <_printf_float+0x1c2>
 800cda4:	2900      	cmp	r1, #0
 800cda6:	6863      	ldr	r3, [r4, #4]
 800cda8:	dd0b      	ble.n	800cdc2 <_printf_float+0x1ae>
 800cdaa:	6121      	str	r1, [r4, #16]
 800cdac:	b913      	cbnz	r3, 800cdb4 <_printf_float+0x1a0>
 800cdae:	6822      	ldr	r2, [r4, #0]
 800cdb0:	07d0      	lsls	r0, r2, #31
 800cdb2:	d502      	bpl.n	800cdba <_printf_float+0x1a6>
 800cdb4:	3301      	adds	r3, #1
 800cdb6:	440b      	add	r3, r1
 800cdb8:	6123      	str	r3, [r4, #16]
 800cdba:	65a1      	str	r1, [r4, #88]	; 0x58
 800cdbc:	f04f 0900 	mov.w	r9, #0
 800cdc0:	e7de      	b.n	800cd80 <_printf_float+0x16c>
 800cdc2:	b913      	cbnz	r3, 800cdca <_printf_float+0x1b6>
 800cdc4:	6822      	ldr	r2, [r4, #0]
 800cdc6:	07d2      	lsls	r2, r2, #31
 800cdc8:	d501      	bpl.n	800cdce <_printf_float+0x1ba>
 800cdca:	3302      	adds	r3, #2
 800cdcc:	e7f4      	b.n	800cdb8 <_printf_float+0x1a4>
 800cdce:	2301      	movs	r3, #1
 800cdd0:	e7f2      	b.n	800cdb8 <_printf_float+0x1a4>
 800cdd2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cdd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdd8:	4299      	cmp	r1, r3
 800cdda:	db05      	blt.n	800cde8 <_printf_float+0x1d4>
 800cddc:	6823      	ldr	r3, [r4, #0]
 800cdde:	6121      	str	r1, [r4, #16]
 800cde0:	07d8      	lsls	r0, r3, #31
 800cde2:	d5ea      	bpl.n	800cdba <_printf_float+0x1a6>
 800cde4:	1c4b      	adds	r3, r1, #1
 800cde6:	e7e7      	b.n	800cdb8 <_printf_float+0x1a4>
 800cde8:	2900      	cmp	r1, #0
 800cdea:	bfd4      	ite	le
 800cdec:	f1c1 0202 	rsble	r2, r1, #2
 800cdf0:	2201      	movgt	r2, #1
 800cdf2:	4413      	add	r3, r2
 800cdf4:	e7e0      	b.n	800cdb8 <_printf_float+0x1a4>
 800cdf6:	6823      	ldr	r3, [r4, #0]
 800cdf8:	055a      	lsls	r2, r3, #21
 800cdfa:	d407      	bmi.n	800ce0c <_printf_float+0x1f8>
 800cdfc:	6923      	ldr	r3, [r4, #16]
 800cdfe:	4642      	mov	r2, r8
 800ce00:	4631      	mov	r1, r6
 800ce02:	4628      	mov	r0, r5
 800ce04:	47b8      	blx	r7
 800ce06:	3001      	adds	r0, #1
 800ce08:	d12c      	bne.n	800ce64 <_printf_float+0x250>
 800ce0a:	e764      	b.n	800ccd6 <_printf_float+0xc2>
 800ce0c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ce10:	f240 80e0 	bls.w	800cfd4 <_printf_float+0x3c0>
 800ce14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ce18:	2200      	movs	r2, #0
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	f7f3 fe7c 	bl	8000b18 <__aeabi_dcmpeq>
 800ce20:	2800      	cmp	r0, #0
 800ce22:	d034      	beq.n	800ce8e <_printf_float+0x27a>
 800ce24:	4a37      	ldr	r2, [pc, #220]	; (800cf04 <_printf_float+0x2f0>)
 800ce26:	2301      	movs	r3, #1
 800ce28:	4631      	mov	r1, r6
 800ce2a:	4628      	mov	r0, r5
 800ce2c:	47b8      	blx	r7
 800ce2e:	3001      	adds	r0, #1
 800ce30:	f43f af51 	beq.w	800ccd6 <_printf_float+0xc2>
 800ce34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	db02      	blt.n	800ce42 <_printf_float+0x22e>
 800ce3c:	6823      	ldr	r3, [r4, #0]
 800ce3e:	07d8      	lsls	r0, r3, #31
 800ce40:	d510      	bpl.n	800ce64 <_printf_float+0x250>
 800ce42:	ee18 3a10 	vmov	r3, s16
 800ce46:	4652      	mov	r2, sl
 800ce48:	4631      	mov	r1, r6
 800ce4a:	4628      	mov	r0, r5
 800ce4c:	47b8      	blx	r7
 800ce4e:	3001      	adds	r0, #1
 800ce50:	f43f af41 	beq.w	800ccd6 <_printf_float+0xc2>
 800ce54:	f04f 0800 	mov.w	r8, #0
 800ce58:	f104 091a 	add.w	r9, r4, #26
 800ce5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce5e:	3b01      	subs	r3, #1
 800ce60:	4543      	cmp	r3, r8
 800ce62:	dc09      	bgt.n	800ce78 <_printf_float+0x264>
 800ce64:	6823      	ldr	r3, [r4, #0]
 800ce66:	079b      	lsls	r3, r3, #30
 800ce68:	f100 8105 	bmi.w	800d076 <_printf_float+0x462>
 800ce6c:	68e0      	ldr	r0, [r4, #12]
 800ce6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce70:	4298      	cmp	r0, r3
 800ce72:	bfb8      	it	lt
 800ce74:	4618      	movlt	r0, r3
 800ce76:	e730      	b.n	800ccda <_printf_float+0xc6>
 800ce78:	2301      	movs	r3, #1
 800ce7a:	464a      	mov	r2, r9
 800ce7c:	4631      	mov	r1, r6
 800ce7e:	4628      	mov	r0, r5
 800ce80:	47b8      	blx	r7
 800ce82:	3001      	adds	r0, #1
 800ce84:	f43f af27 	beq.w	800ccd6 <_printf_float+0xc2>
 800ce88:	f108 0801 	add.w	r8, r8, #1
 800ce8c:	e7e6      	b.n	800ce5c <_printf_float+0x248>
 800ce8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	dc39      	bgt.n	800cf08 <_printf_float+0x2f4>
 800ce94:	4a1b      	ldr	r2, [pc, #108]	; (800cf04 <_printf_float+0x2f0>)
 800ce96:	2301      	movs	r3, #1
 800ce98:	4631      	mov	r1, r6
 800ce9a:	4628      	mov	r0, r5
 800ce9c:	47b8      	blx	r7
 800ce9e:	3001      	adds	r0, #1
 800cea0:	f43f af19 	beq.w	800ccd6 <_printf_float+0xc2>
 800cea4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cea8:	4313      	orrs	r3, r2
 800ceaa:	d102      	bne.n	800ceb2 <_printf_float+0x29e>
 800ceac:	6823      	ldr	r3, [r4, #0]
 800ceae:	07d9      	lsls	r1, r3, #31
 800ceb0:	d5d8      	bpl.n	800ce64 <_printf_float+0x250>
 800ceb2:	ee18 3a10 	vmov	r3, s16
 800ceb6:	4652      	mov	r2, sl
 800ceb8:	4631      	mov	r1, r6
 800ceba:	4628      	mov	r0, r5
 800cebc:	47b8      	blx	r7
 800cebe:	3001      	adds	r0, #1
 800cec0:	f43f af09 	beq.w	800ccd6 <_printf_float+0xc2>
 800cec4:	f04f 0900 	mov.w	r9, #0
 800cec8:	f104 0a1a 	add.w	sl, r4, #26
 800cecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cece:	425b      	negs	r3, r3
 800ced0:	454b      	cmp	r3, r9
 800ced2:	dc01      	bgt.n	800ced8 <_printf_float+0x2c4>
 800ced4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ced6:	e792      	b.n	800cdfe <_printf_float+0x1ea>
 800ced8:	2301      	movs	r3, #1
 800ceda:	4652      	mov	r2, sl
 800cedc:	4631      	mov	r1, r6
 800cede:	4628      	mov	r0, r5
 800cee0:	47b8      	blx	r7
 800cee2:	3001      	adds	r0, #1
 800cee4:	f43f aef7 	beq.w	800ccd6 <_printf_float+0xc2>
 800cee8:	f109 0901 	add.w	r9, r9, #1
 800ceec:	e7ee      	b.n	800cecc <_printf_float+0x2b8>
 800ceee:	bf00      	nop
 800cef0:	7fefffff 	.word	0x7fefffff
 800cef4:	0800f56c 	.word	0x0800f56c
 800cef8:	0800f570 	.word	0x0800f570
 800cefc:	0800f578 	.word	0x0800f578
 800cf00:	0800f574 	.word	0x0800f574
 800cf04:	0800f57c 	.word	0x0800f57c
 800cf08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	bfa8      	it	ge
 800cf10:	461a      	movge	r2, r3
 800cf12:	2a00      	cmp	r2, #0
 800cf14:	4691      	mov	r9, r2
 800cf16:	dc37      	bgt.n	800cf88 <_printf_float+0x374>
 800cf18:	f04f 0b00 	mov.w	fp, #0
 800cf1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf20:	f104 021a 	add.w	r2, r4, #26
 800cf24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cf26:	9305      	str	r3, [sp, #20]
 800cf28:	eba3 0309 	sub.w	r3, r3, r9
 800cf2c:	455b      	cmp	r3, fp
 800cf2e:	dc33      	bgt.n	800cf98 <_printf_float+0x384>
 800cf30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf34:	429a      	cmp	r2, r3
 800cf36:	db3b      	blt.n	800cfb0 <_printf_float+0x39c>
 800cf38:	6823      	ldr	r3, [r4, #0]
 800cf3a:	07da      	lsls	r2, r3, #31
 800cf3c:	d438      	bmi.n	800cfb0 <_printf_float+0x39c>
 800cf3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf40:	9a05      	ldr	r2, [sp, #20]
 800cf42:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cf44:	1a9a      	subs	r2, r3, r2
 800cf46:	eba3 0901 	sub.w	r9, r3, r1
 800cf4a:	4591      	cmp	r9, r2
 800cf4c:	bfa8      	it	ge
 800cf4e:	4691      	movge	r9, r2
 800cf50:	f1b9 0f00 	cmp.w	r9, #0
 800cf54:	dc35      	bgt.n	800cfc2 <_printf_float+0x3ae>
 800cf56:	f04f 0800 	mov.w	r8, #0
 800cf5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf5e:	f104 0a1a 	add.w	sl, r4, #26
 800cf62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf66:	1a9b      	subs	r3, r3, r2
 800cf68:	eba3 0309 	sub.w	r3, r3, r9
 800cf6c:	4543      	cmp	r3, r8
 800cf6e:	f77f af79 	ble.w	800ce64 <_printf_float+0x250>
 800cf72:	2301      	movs	r3, #1
 800cf74:	4652      	mov	r2, sl
 800cf76:	4631      	mov	r1, r6
 800cf78:	4628      	mov	r0, r5
 800cf7a:	47b8      	blx	r7
 800cf7c:	3001      	adds	r0, #1
 800cf7e:	f43f aeaa 	beq.w	800ccd6 <_printf_float+0xc2>
 800cf82:	f108 0801 	add.w	r8, r8, #1
 800cf86:	e7ec      	b.n	800cf62 <_printf_float+0x34e>
 800cf88:	4613      	mov	r3, r2
 800cf8a:	4631      	mov	r1, r6
 800cf8c:	4642      	mov	r2, r8
 800cf8e:	4628      	mov	r0, r5
 800cf90:	47b8      	blx	r7
 800cf92:	3001      	adds	r0, #1
 800cf94:	d1c0      	bne.n	800cf18 <_printf_float+0x304>
 800cf96:	e69e      	b.n	800ccd6 <_printf_float+0xc2>
 800cf98:	2301      	movs	r3, #1
 800cf9a:	4631      	mov	r1, r6
 800cf9c:	4628      	mov	r0, r5
 800cf9e:	9205      	str	r2, [sp, #20]
 800cfa0:	47b8      	blx	r7
 800cfa2:	3001      	adds	r0, #1
 800cfa4:	f43f ae97 	beq.w	800ccd6 <_printf_float+0xc2>
 800cfa8:	9a05      	ldr	r2, [sp, #20]
 800cfaa:	f10b 0b01 	add.w	fp, fp, #1
 800cfae:	e7b9      	b.n	800cf24 <_printf_float+0x310>
 800cfb0:	ee18 3a10 	vmov	r3, s16
 800cfb4:	4652      	mov	r2, sl
 800cfb6:	4631      	mov	r1, r6
 800cfb8:	4628      	mov	r0, r5
 800cfba:	47b8      	blx	r7
 800cfbc:	3001      	adds	r0, #1
 800cfbe:	d1be      	bne.n	800cf3e <_printf_float+0x32a>
 800cfc0:	e689      	b.n	800ccd6 <_printf_float+0xc2>
 800cfc2:	9a05      	ldr	r2, [sp, #20]
 800cfc4:	464b      	mov	r3, r9
 800cfc6:	4442      	add	r2, r8
 800cfc8:	4631      	mov	r1, r6
 800cfca:	4628      	mov	r0, r5
 800cfcc:	47b8      	blx	r7
 800cfce:	3001      	adds	r0, #1
 800cfd0:	d1c1      	bne.n	800cf56 <_printf_float+0x342>
 800cfd2:	e680      	b.n	800ccd6 <_printf_float+0xc2>
 800cfd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cfd6:	2a01      	cmp	r2, #1
 800cfd8:	dc01      	bgt.n	800cfde <_printf_float+0x3ca>
 800cfda:	07db      	lsls	r3, r3, #31
 800cfdc:	d538      	bpl.n	800d050 <_printf_float+0x43c>
 800cfde:	2301      	movs	r3, #1
 800cfe0:	4642      	mov	r2, r8
 800cfe2:	4631      	mov	r1, r6
 800cfe4:	4628      	mov	r0, r5
 800cfe6:	47b8      	blx	r7
 800cfe8:	3001      	adds	r0, #1
 800cfea:	f43f ae74 	beq.w	800ccd6 <_printf_float+0xc2>
 800cfee:	ee18 3a10 	vmov	r3, s16
 800cff2:	4652      	mov	r2, sl
 800cff4:	4631      	mov	r1, r6
 800cff6:	4628      	mov	r0, r5
 800cff8:	47b8      	blx	r7
 800cffa:	3001      	adds	r0, #1
 800cffc:	f43f ae6b 	beq.w	800ccd6 <_printf_float+0xc2>
 800d000:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d004:	2200      	movs	r2, #0
 800d006:	2300      	movs	r3, #0
 800d008:	f7f3 fd86 	bl	8000b18 <__aeabi_dcmpeq>
 800d00c:	b9d8      	cbnz	r0, 800d046 <_printf_float+0x432>
 800d00e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d010:	f108 0201 	add.w	r2, r8, #1
 800d014:	3b01      	subs	r3, #1
 800d016:	4631      	mov	r1, r6
 800d018:	4628      	mov	r0, r5
 800d01a:	47b8      	blx	r7
 800d01c:	3001      	adds	r0, #1
 800d01e:	d10e      	bne.n	800d03e <_printf_float+0x42a>
 800d020:	e659      	b.n	800ccd6 <_printf_float+0xc2>
 800d022:	2301      	movs	r3, #1
 800d024:	4652      	mov	r2, sl
 800d026:	4631      	mov	r1, r6
 800d028:	4628      	mov	r0, r5
 800d02a:	47b8      	blx	r7
 800d02c:	3001      	adds	r0, #1
 800d02e:	f43f ae52 	beq.w	800ccd6 <_printf_float+0xc2>
 800d032:	f108 0801 	add.w	r8, r8, #1
 800d036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d038:	3b01      	subs	r3, #1
 800d03a:	4543      	cmp	r3, r8
 800d03c:	dcf1      	bgt.n	800d022 <_printf_float+0x40e>
 800d03e:	464b      	mov	r3, r9
 800d040:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d044:	e6dc      	b.n	800ce00 <_printf_float+0x1ec>
 800d046:	f04f 0800 	mov.w	r8, #0
 800d04a:	f104 0a1a 	add.w	sl, r4, #26
 800d04e:	e7f2      	b.n	800d036 <_printf_float+0x422>
 800d050:	2301      	movs	r3, #1
 800d052:	4642      	mov	r2, r8
 800d054:	e7df      	b.n	800d016 <_printf_float+0x402>
 800d056:	2301      	movs	r3, #1
 800d058:	464a      	mov	r2, r9
 800d05a:	4631      	mov	r1, r6
 800d05c:	4628      	mov	r0, r5
 800d05e:	47b8      	blx	r7
 800d060:	3001      	adds	r0, #1
 800d062:	f43f ae38 	beq.w	800ccd6 <_printf_float+0xc2>
 800d066:	f108 0801 	add.w	r8, r8, #1
 800d06a:	68e3      	ldr	r3, [r4, #12]
 800d06c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d06e:	1a5b      	subs	r3, r3, r1
 800d070:	4543      	cmp	r3, r8
 800d072:	dcf0      	bgt.n	800d056 <_printf_float+0x442>
 800d074:	e6fa      	b.n	800ce6c <_printf_float+0x258>
 800d076:	f04f 0800 	mov.w	r8, #0
 800d07a:	f104 0919 	add.w	r9, r4, #25
 800d07e:	e7f4      	b.n	800d06a <_printf_float+0x456>

0800d080 <_printf_common>:
 800d080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d084:	4616      	mov	r6, r2
 800d086:	4699      	mov	r9, r3
 800d088:	688a      	ldr	r2, [r1, #8]
 800d08a:	690b      	ldr	r3, [r1, #16]
 800d08c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d090:	4293      	cmp	r3, r2
 800d092:	bfb8      	it	lt
 800d094:	4613      	movlt	r3, r2
 800d096:	6033      	str	r3, [r6, #0]
 800d098:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d09c:	4607      	mov	r7, r0
 800d09e:	460c      	mov	r4, r1
 800d0a0:	b10a      	cbz	r2, 800d0a6 <_printf_common+0x26>
 800d0a2:	3301      	adds	r3, #1
 800d0a4:	6033      	str	r3, [r6, #0]
 800d0a6:	6823      	ldr	r3, [r4, #0]
 800d0a8:	0699      	lsls	r1, r3, #26
 800d0aa:	bf42      	ittt	mi
 800d0ac:	6833      	ldrmi	r3, [r6, #0]
 800d0ae:	3302      	addmi	r3, #2
 800d0b0:	6033      	strmi	r3, [r6, #0]
 800d0b2:	6825      	ldr	r5, [r4, #0]
 800d0b4:	f015 0506 	ands.w	r5, r5, #6
 800d0b8:	d106      	bne.n	800d0c8 <_printf_common+0x48>
 800d0ba:	f104 0a19 	add.w	sl, r4, #25
 800d0be:	68e3      	ldr	r3, [r4, #12]
 800d0c0:	6832      	ldr	r2, [r6, #0]
 800d0c2:	1a9b      	subs	r3, r3, r2
 800d0c4:	42ab      	cmp	r3, r5
 800d0c6:	dc26      	bgt.n	800d116 <_printf_common+0x96>
 800d0c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d0cc:	1e13      	subs	r3, r2, #0
 800d0ce:	6822      	ldr	r2, [r4, #0]
 800d0d0:	bf18      	it	ne
 800d0d2:	2301      	movne	r3, #1
 800d0d4:	0692      	lsls	r2, r2, #26
 800d0d6:	d42b      	bmi.n	800d130 <_printf_common+0xb0>
 800d0d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d0dc:	4649      	mov	r1, r9
 800d0de:	4638      	mov	r0, r7
 800d0e0:	47c0      	blx	r8
 800d0e2:	3001      	adds	r0, #1
 800d0e4:	d01e      	beq.n	800d124 <_printf_common+0xa4>
 800d0e6:	6823      	ldr	r3, [r4, #0]
 800d0e8:	68e5      	ldr	r5, [r4, #12]
 800d0ea:	6832      	ldr	r2, [r6, #0]
 800d0ec:	f003 0306 	and.w	r3, r3, #6
 800d0f0:	2b04      	cmp	r3, #4
 800d0f2:	bf08      	it	eq
 800d0f4:	1aad      	subeq	r5, r5, r2
 800d0f6:	68a3      	ldr	r3, [r4, #8]
 800d0f8:	6922      	ldr	r2, [r4, #16]
 800d0fa:	bf0c      	ite	eq
 800d0fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d100:	2500      	movne	r5, #0
 800d102:	4293      	cmp	r3, r2
 800d104:	bfc4      	itt	gt
 800d106:	1a9b      	subgt	r3, r3, r2
 800d108:	18ed      	addgt	r5, r5, r3
 800d10a:	2600      	movs	r6, #0
 800d10c:	341a      	adds	r4, #26
 800d10e:	42b5      	cmp	r5, r6
 800d110:	d11a      	bne.n	800d148 <_printf_common+0xc8>
 800d112:	2000      	movs	r0, #0
 800d114:	e008      	b.n	800d128 <_printf_common+0xa8>
 800d116:	2301      	movs	r3, #1
 800d118:	4652      	mov	r2, sl
 800d11a:	4649      	mov	r1, r9
 800d11c:	4638      	mov	r0, r7
 800d11e:	47c0      	blx	r8
 800d120:	3001      	adds	r0, #1
 800d122:	d103      	bne.n	800d12c <_printf_common+0xac>
 800d124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d12c:	3501      	adds	r5, #1
 800d12e:	e7c6      	b.n	800d0be <_printf_common+0x3e>
 800d130:	18e1      	adds	r1, r4, r3
 800d132:	1c5a      	adds	r2, r3, #1
 800d134:	2030      	movs	r0, #48	; 0x30
 800d136:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d13a:	4422      	add	r2, r4
 800d13c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d140:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d144:	3302      	adds	r3, #2
 800d146:	e7c7      	b.n	800d0d8 <_printf_common+0x58>
 800d148:	2301      	movs	r3, #1
 800d14a:	4622      	mov	r2, r4
 800d14c:	4649      	mov	r1, r9
 800d14e:	4638      	mov	r0, r7
 800d150:	47c0      	blx	r8
 800d152:	3001      	adds	r0, #1
 800d154:	d0e6      	beq.n	800d124 <_printf_common+0xa4>
 800d156:	3601      	adds	r6, #1
 800d158:	e7d9      	b.n	800d10e <_printf_common+0x8e>
	...

0800d15c <_printf_i>:
 800d15c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d160:	7e0f      	ldrb	r7, [r1, #24]
 800d162:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d164:	2f78      	cmp	r7, #120	; 0x78
 800d166:	4691      	mov	r9, r2
 800d168:	4680      	mov	r8, r0
 800d16a:	460c      	mov	r4, r1
 800d16c:	469a      	mov	sl, r3
 800d16e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d172:	d807      	bhi.n	800d184 <_printf_i+0x28>
 800d174:	2f62      	cmp	r7, #98	; 0x62
 800d176:	d80a      	bhi.n	800d18e <_printf_i+0x32>
 800d178:	2f00      	cmp	r7, #0
 800d17a:	f000 80d8 	beq.w	800d32e <_printf_i+0x1d2>
 800d17e:	2f58      	cmp	r7, #88	; 0x58
 800d180:	f000 80a3 	beq.w	800d2ca <_printf_i+0x16e>
 800d184:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d188:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d18c:	e03a      	b.n	800d204 <_printf_i+0xa8>
 800d18e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d192:	2b15      	cmp	r3, #21
 800d194:	d8f6      	bhi.n	800d184 <_printf_i+0x28>
 800d196:	a101      	add	r1, pc, #4	; (adr r1, 800d19c <_printf_i+0x40>)
 800d198:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d19c:	0800d1f5 	.word	0x0800d1f5
 800d1a0:	0800d209 	.word	0x0800d209
 800d1a4:	0800d185 	.word	0x0800d185
 800d1a8:	0800d185 	.word	0x0800d185
 800d1ac:	0800d185 	.word	0x0800d185
 800d1b0:	0800d185 	.word	0x0800d185
 800d1b4:	0800d209 	.word	0x0800d209
 800d1b8:	0800d185 	.word	0x0800d185
 800d1bc:	0800d185 	.word	0x0800d185
 800d1c0:	0800d185 	.word	0x0800d185
 800d1c4:	0800d185 	.word	0x0800d185
 800d1c8:	0800d315 	.word	0x0800d315
 800d1cc:	0800d239 	.word	0x0800d239
 800d1d0:	0800d2f7 	.word	0x0800d2f7
 800d1d4:	0800d185 	.word	0x0800d185
 800d1d8:	0800d185 	.word	0x0800d185
 800d1dc:	0800d337 	.word	0x0800d337
 800d1e0:	0800d185 	.word	0x0800d185
 800d1e4:	0800d239 	.word	0x0800d239
 800d1e8:	0800d185 	.word	0x0800d185
 800d1ec:	0800d185 	.word	0x0800d185
 800d1f0:	0800d2ff 	.word	0x0800d2ff
 800d1f4:	682b      	ldr	r3, [r5, #0]
 800d1f6:	1d1a      	adds	r2, r3, #4
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	602a      	str	r2, [r5, #0]
 800d1fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d200:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d204:	2301      	movs	r3, #1
 800d206:	e0a3      	b.n	800d350 <_printf_i+0x1f4>
 800d208:	6820      	ldr	r0, [r4, #0]
 800d20a:	6829      	ldr	r1, [r5, #0]
 800d20c:	0606      	lsls	r6, r0, #24
 800d20e:	f101 0304 	add.w	r3, r1, #4
 800d212:	d50a      	bpl.n	800d22a <_printf_i+0xce>
 800d214:	680e      	ldr	r6, [r1, #0]
 800d216:	602b      	str	r3, [r5, #0]
 800d218:	2e00      	cmp	r6, #0
 800d21a:	da03      	bge.n	800d224 <_printf_i+0xc8>
 800d21c:	232d      	movs	r3, #45	; 0x2d
 800d21e:	4276      	negs	r6, r6
 800d220:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d224:	485e      	ldr	r0, [pc, #376]	; (800d3a0 <_printf_i+0x244>)
 800d226:	230a      	movs	r3, #10
 800d228:	e019      	b.n	800d25e <_printf_i+0x102>
 800d22a:	680e      	ldr	r6, [r1, #0]
 800d22c:	602b      	str	r3, [r5, #0]
 800d22e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d232:	bf18      	it	ne
 800d234:	b236      	sxthne	r6, r6
 800d236:	e7ef      	b.n	800d218 <_printf_i+0xbc>
 800d238:	682b      	ldr	r3, [r5, #0]
 800d23a:	6820      	ldr	r0, [r4, #0]
 800d23c:	1d19      	adds	r1, r3, #4
 800d23e:	6029      	str	r1, [r5, #0]
 800d240:	0601      	lsls	r1, r0, #24
 800d242:	d501      	bpl.n	800d248 <_printf_i+0xec>
 800d244:	681e      	ldr	r6, [r3, #0]
 800d246:	e002      	b.n	800d24e <_printf_i+0xf2>
 800d248:	0646      	lsls	r6, r0, #25
 800d24a:	d5fb      	bpl.n	800d244 <_printf_i+0xe8>
 800d24c:	881e      	ldrh	r6, [r3, #0]
 800d24e:	4854      	ldr	r0, [pc, #336]	; (800d3a0 <_printf_i+0x244>)
 800d250:	2f6f      	cmp	r7, #111	; 0x6f
 800d252:	bf0c      	ite	eq
 800d254:	2308      	moveq	r3, #8
 800d256:	230a      	movne	r3, #10
 800d258:	2100      	movs	r1, #0
 800d25a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d25e:	6865      	ldr	r5, [r4, #4]
 800d260:	60a5      	str	r5, [r4, #8]
 800d262:	2d00      	cmp	r5, #0
 800d264:	bfa2      	ittt	ge
 800d266:	6821      	ldrge	r1, [r4, #0]
 800d268:	f021 0104 	bicge.w	r1, r1, #4
 800d26c:	6021      	strge	r1, [r4, #0]
 800d26e:	b90e      	cbnz	r6, 800d274 <_printf_i+0x118>
 800d270:	2d00      	cmp	r5, #0
 800d272:	d04d      	beq.n	800d310 <_printf_i+0x1b4>
 800d274:	4615      	mov	r5, r2
 800d276:	fbb6 f1f3 	udiv	r1, r6, r3
 800d27a:	fb03 6711 	mls	r7, r3, r1, r6
 800d27e:	5dc7      	ldrb	r7, [r0, r7]
 800d280:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d284:	4637      	mov	r7, r6
 800d286:	42bb      	cmp	r3, r7
 800d288:	460e      	mov	r6, r1
 800d28a:	d9f4      	bls.n	800d276 <_printf_i+0x11a>
 800d28c:	2b08      	cmp	r3, #8
 800d28e:	d10b      	bne.n	800d2a8 <_printf_i+0x14c>
 800d290:	6823      	ldr	r3, [r4, #0]
 800d292:	07de      	lsls	r6, r3, #31
 800d294:	d508      	bpl.n	800d2a8 <_printf_i+0x14c>
 800d296:	6923      	ldr	r3, [r4, #16]
 800d298:	6861      	ldr	r1, [r4, #4]
 800d29a:	4299      	cmp	r1, r3
 800d29c:	bfde      	ittt	le
 800d29e:	2330      	movle	r3, #48	; 0x30
 800d2a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d2a4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d2a8:	1b52      	subs	r2, r2, r5
 800d2aa:	6122      	str	r2, [r4, #16]
 800d2ac:	f8cd a000 	str.w	sl, [sp]
 800d2b0:	464b      	mov	r3, r9
 800d2b2:	aa03      	add	r2, sp, #12
 800d2b4:	4621      	mov	r1, r4
 800d2b6:	4640      	mov	r0, r8
 800d2b8:	f7ff fee2 	bl	800d080 <_printf_common>
 800d2bc:	3001      	adds	r0, #1
 800d2be:	d14c      	bne.n	800d35a <_printf_i+0x1fe>
 800d2c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2c4:	b004      	add	sp, #16
 800d2c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2ca:	4835      	ldr	r0, [pc, #212]	; (800d3a0 <_printf_i+0x244>)
 800d2cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d2d0:	6829      	ldr	r1, [r5, #0]
 800d2d2:	6823      	ldr	r3, [r4, #0]
 800d2d4:	f851 6b04 	ldr.w	r6, [r1], #4
 800d2d8:	6029      	str	r1, [r5, #0]
 800d2da:	061d      	lsls	r5, r3, #24
 800d2dc:	d514      	bpl.n	800d308 <_printf_i+0x1ac>
 800d2de:	07df      	lsls	r7, r3, #31
 800d2e0:	bf44      	itt	mi
 800d2e2:	f043 0320 	orrmi.w	r3, r3, #32
 800d2e6:	6023      	strmi	r3, [r4, #0]
 800d2e8:	b91e      	cbnz	r6, 800d2f2 <_printf_i+0x196>
 800d2ea:	6823      	ldr	r3, [r4, #0]
 800d2ec:	f023 0320 	bic.w	r3, r3, #32
 800d2f0:	6023      	str	r3, [r4, #0]
 800d2f2:	2310      	movs	r3, #16
 800d2f4:	e7b0      	b.n	800d258 <_printf_i+0xfc>
 800d2f6:	6823      	ldr	r3, [r4, #0]
 800d2f8:	f043 0320 	orr.w	r3, r3, #32
 800d2fc:	6023      	str	r3, [r4, #0]
 800d2fe:	2378      	movs	r3, #120	; 0x78
 800d300:	4828      	ldr	r0, [pc, #160]	; (800d3a4 <_printf_i+0x248>)
 800d302:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d306:	e7e3      	b.n	800d2d0 <_printf_i+0x174>
 800d308:	0659      	lsls	r1, r3, #25
 800d30a:	bf48      	it	mi
 800d30c:	b2b6      	uxthmi	r6, r6
 800d30e:	e7e6      	b.n	800d2de <_printf_i+0x182>
 800d310:	4615      	mov	r5, r2
 800d312:	e7bb      	b.n	800d28c <_printf_i+0x130>
 800d314:	682b      	ldr	r3, [r5, #0]
 800d316:	6826      	ldr	r6, [r4, #0]
 800d318:	6961      	ldr	r1, [r4, #20]
 800d31a:	1d18      	adds	r0, r3, #4
 800d31c:	6028      	str	r0, [r5, #0]
 800d31e:	0635      	lsls	r5, r6, #24
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	d501      	bpl.n	800d328 <_printf_i+0x1cc>
 800d324:	6019      	str	r1, [r3, #0]
 800d326:	e002      	b.n	800d32e <_printf_i+0x1d2>
 800d328:	0670      	lsls	r0, r6, #25
 800d32a:	d5fb      	bpl.n	800d324 <_printf_i+0x1c8>
 800d32c:	8019      	strh	r1, [r3, #0]
 800d32e:	2300      	movs	r3, #0
 800d330:	6123      	str	r3, [r4, #16]
 800d332:	4615      	mov	r5, r2
 800d334:	e7ba      	b.n	800d2ac <_printf_i+0x150>
 800d336:	682b      	ldr	r3, [r5, #0]
 800d338:	1d1a      	adds	r2, r3, #4
 800d33a:	602a      	str	r2, [r5, #0]
 800d33c:	681d      	ldr	r5, [r3, #0]
 800d33e:	6862      	ldr	r2, [r4, #4]
 800d340:	2100      	movs	r1, #0
 800d342:	4628      	mov	r0, r5
 800d344:	f7f2 ff74 	bl	8000230 <memchr>
 800d348:	b108      	cbz	r0, 800d34e <_printf_i+0x1f2>
 800d34a:	1b40      	subs	r0, r0, r5
 800d34c:	6060      	str	r0, [r4, #4]
 800d34e:	6863      	ldr	r3, [r4, #4]
 800d350:	6123      	str	r3, [r4, #16]
 800d352:	2300      	movs	r3, #0
 800d354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d358:	e7a8      	b.n	800d2ac <_printf_i+0x150>
 800d35a:	6923      	ldr	r3, [r4, #16]
 800d35c:	462a      	mov	r2, r5
 800d35e:	4649      	mov	r1, r9
 800d360:	4640      	mov	r0, r8
 800d362:	47d0      	blx	sl
 800d364:	3001      	adds	r0, #1
 800d366:	d0ab      	beq.n	800d2c0 <_printf_i+0x164>
 800d368:	6823      	ldr	r3, [r4, #0]
 800d36a:	079b      	lsls	r3, r3, #30
 800d36c:	d413      	bmi.n	800d396 <_printf_i+0x23a>
 800d36e:	68e0      	ldr	r0, [r4, #12]
 800d370:	9b03      	ldr	r3, [sp, #12]
 800d372:	4298      	cmp	r0, r3
 800d374:	bfb8      	it	lt
 800d376:	4618      	movlt	r0, r3
 800d378:	e7a4      	b.n	800d2c4 <_printf_i+0x168>
 800d37a:	2301      	movs	r3, #1
 800d37c:	4632      	mov	r2, r6
 800d37e:	4649      	mov	r1, r9
 800d380:	4640      	mov	r0, r8
 800d382:	47d0      	blx	sl
 800d384:	3001      	adds	r0, #1
 800d386:	d09b      	beq.n	800d2c0 <_printf_i+0x164>
 800d388:	3501      	adds	r5, #1
 800d38a:	68e3      	ldr	r3, [r4, #12]
 800d38c:	9903      	ldr	r1, [sp, #12]
 800d38e:	1a5b      	subs	r3, r3, r1
 800d390:	42ab      	cmp	r3, r5
 800d392:	dcf2      	bgt.n	800d37a <_printf_i+0x21e>
 800d394:	e7eb      	b.n	800d36e <_printf_i+0x212>
 800d396:	2500      	movs	r5, #0
 800d398:	f104 0619 	add.w	r6, r4, #25
 800d39c:	e7f5      	b.n	800d38a <_printf_i+0x22e>
 800d39e:	bf00      	nop
 800d3a0:	0800f57e 	.word	0x0800f57e
 800d3a4:	0800f58f 	.word	0x0800f58f

0800d3a8 <quorem>:
 800d3a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3ac:	6903      	ldr	r3, [r0, #16]
 800d3ae:	690c      	ldr	r4, [r1, #16]
 800d3b0:	42a3      	cmp	r3, r4
 800d3b2:	4607      	mov	r7, r0
 800d3b4:	f2c0 8081 	blt.w	800d4ba <quorem+0x112>
 800d3b8:	3c01      	subs	r4, #1
 800d3ba:	f101 0814 	add.w	r8, r1, #20
 800d3be:	f100 0514 	add.w	r5, r0, #20
 800d3c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d3c6:	9301      	str	r3, [sp, #4]
 800d3c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d3cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d3d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d3dc:	fbb2 f6f3 	udiv	r6, r2, r3
 800d3e0:	d331      	bcc.n	800d446 <quorem+0x9e>
 800d3e2:	f04f 0e00 	mov.w	lr, #0
 800d3e6:	4640      	mov	r0, r8
 800d3e8:	46ac      	mov	ip, r5
 800d3ea:	46f2      	mov	sl, lr
 800d3ec:	f850 2b04 	ldr.w	r2, [r0], #4
 800d3f0:	b293      	uxth	r3, r2
 800d3f2:	fb06 e303 	mla	r3, r6, r3, lr
 800d3f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d3fa:	b29b      	uxth	r3, r3
 800d3fc:	ebaa 0303 	sub.w	r3, sl, r3
 800d400:	f8dc a000 	ldr.w	sl, [ip]
 800d404:	0c12      	lsrs	r2, r2, #16
 800d406:	fa13 f38a 	uxtah	r3, r3, sl
 800d40a:	fb06 e202 	mla	r2, r6, r2, lr
 800d40e:	9300      	str	r3, [sp, #0]
 800d410:	9b00      	ldr	r3, [sp, #0]
 800d412:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d416:	b292      	uxth	r2, r2
 800d418:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d41c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d420:	f8bd 3000 	ldrh.w	r3, [sp]
 800d424:	4581      	cmp	r9, r0
 800d426:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d42a:	f84c 3b04 	str.w	r3, [ip], #4
 800d42e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d432:	d2db      	bcs.n	800d3ec <quorem+0x44>
 800d434:	f855 300b 	ldr.w	r3, [r5, fp]
 800d438:	b92b      	cbnz	r3, 800d446 <quorem+0x9e>
 800d43a:	9b01      	ldr	r3, [sp, #4]
 800d43c:	3b04      	subs	r3, #4
 800d43e:	429d      	cmp	r5, r3
 800d440:	461a      	mov	r2, r3
 800d442:	d32e      	bcc.n	800d4a2 <quorem+0xfa>
 800d444:	613c      	str	r4, [r7, #16]
 800d446:	4638      	mov	r0, r7
 800d448:	f001 f8b6 	bl	800e5b8 <__mcmp>
 800d44c:	2800      	cmp	r0, #0
 800d44e:	db24      	blt.n	800d49a <quorem+0xf2>
 800d450:	3601      	adds	r6, #1
 800d452:	4628      	mov	r0, r5
 800d454:	f04f 0c00 	mov.w	ip, #0
 800d458:	f858 2b04 	ldr.w	r2, [r8], #4
 800d45c:	f8d0 e000 	ldr.w	lr, [r0]
 800d460:	b293      	uxth	r3, r2
 800d462:	ebac 0303 	sub.w	r3, ip, r3
 800d466:	0c12      	lsrs	r2, r2, #16
 800d468:	fa13 f38e 	uxtah	r3, r3, lr
 800d46c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d470:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d474:	b29b      	uxth	r3, r3
 800d476:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d47a:	45c1      	cmp	r9, r8
 800d47c:	f840 3b04 	str.w	r3, [r0], #4
 800d480:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d484:	d2e8      	bcs.n	800d458 <quorem+0xb0>
 800d486:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d48a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d48e:	b922      	cbnz	r2, 800d49a <quorem+0xf2>
 800d490:	3b04      	subs	r3, #4
 800d492:	429d      	cmp	r5, r3
 800d494:	461a      	mov	r2, r3
 800d496:	d30a      	bcc.n	800d4ae <quorem+0x106>
 800d498:	613c      	str	r4, [r7, #16]
 800d49a:	4630      	mov	r0, r6
 800d49c:	b003      	add	sp, #12
 800d49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4a2:	6812      	ldr	r2, [r2, #0]
 800d4a4:	3b04      	subs	r3, #4
 800d4a6:	2a00      	cmp	r2, #0
 800d4a8:	d1cc      	bne.n	800d444 <quorem+0x9c>
 800d4aa:	3c01      	subs	r4, #1
 800d4ac:	e7c7      	b.n	800d43e <quorem+0x96>
 800d4ae:	6812      	ldr	r2, [r2, #0]
 800d4b0:	3b04      	subs	r3, #4
 800d4b2:	2a00      	cmp	r2, #0
 800d4b4:	d1f0      	bne.n	800d498 <quorem+0xf0>
 800d4b6:	3c01      	subs	r4, #1
 800d4b8:	e7eb      	b.n	800d492 <quorem+0xea>
 800d4ba:	2000      	movs	r0, #0
 800d4bc:	e7ee      	b.n	800d49c <quorem+0xf4>
	...

0800d4c0 <_dtoa_r>:
 800d4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4c4:	ed2d 8b04 	vpush	{d8-d9}
 800d4c8:	ec57 6b10 	vmov	r6, r7, d0
 800d4cc:	b093      	sub	sp, #76	; 0x4c
 800d4ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d4d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d4d4:	9106      	str	r1, [sp, #24]
 800d4d6:	ee10 aa10 	vmov	sl, s0
 800d4da:	4604      	mov	r4, r0
 800d4dc:	9209      	str	r2, [sp, #36]	; 0x24
 800d4de:	930c      	str	r3, [sp, #48]	; 0x30
 800d4e0:	46bb      	mov	fp, r7
 800d4e2:	b975      	cbnz	r5, 800d502 <_dtoa_r+0x42>
 800d4e4:	2010      	movs	r0, #16
 800d4e6:	f000 fddd 	bl	800e0a4 <malloc>
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	6260      	str	r0, [r4, #36]	; 0x24
 800d4ee:	b920      	cbnz	r0, 800d4fa <_dtoa_r+0x3a>
 800d4f0:	4ba7      	ldr	r3, [pc, #668]	; (800d790 <_dtoa_r+0x2d0>)
 800d4f2:	21ea      	movs	r1, #234	; 0xea
 800d4f4:	48a7      	ldr	r0, [pc, #668]	; (800d794 <_dtoa_r+0x2d4>)
 800d4f6:	f001 fa67 	bl	800e9c8 <__assert_func>
 800d4fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d4fe:	6005      	str	r5, [r0, #0]
 800d500:	60c5      	str	r5, [r0, #12]
 800d502:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d504:	6819      	ldr	r1, [r3, #0]
 800d506:	b151      	cbz	r1, 800d51e <_dtoa_r+0x5e>
 800d508:	685a      	ldr	r2, [r3, #4]
 800d50a:	604a      	str	r2, [r1, #4]
 800d50c:	2301      	movs	r3, #1
 800d50e:	4093      	lsls	r3, r2
 800d510:	608b      	str	r3, [r1, #8]
 800d512:	4620      	mov	r0, r4
 800d514:	f000 fe0e 	bl	800e134 <_Bfree>
 800d518:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d51a:	2200      	movs	r2, #0
 800d51c:	601a      	str	r2, [r3, #0]
 800d51e:	1e3b      	subs	r3, r7, #0
 800d520:	bfaa      	itet	ge
 800d522:	2300      	movge	r3, #0
 800d524:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d528:	f8c8 3000 	strge.w	r3, [r8]
 800d52c:	4b9a      	ldr	r3, [pc, #616]	; (800d798 <_dtoa_r+0x2d8>)
 800d52e:	bfbc      	itt	lt
 800d530:	2201      	movlt	r2, #1
 800d532:	f8c8 2000 	strlt.w	r2, [r8]
 800d536:	ea33 030b 	bics.w	r3, r3, fp
 800d53a:	d11b      	bne.n	800d574 <_dtoa_r+0xb4>
 800d53c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d53e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d542:	6013      	str	r3, [r2, #0]
 800d544:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d548:	4333      	orrs	r3, r6
 800d54a:	f000 8592 	beq.w	800e072 <_dtoa_r+0xbb2>
 800d54e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d550:	b963      	cbnz	r3, 800d56c <_dtoa_r+0xac>
 800d552:	4b92      	ldr	r3, [pc, #584]	; (800d79c <_dtoa_r+0x2dc>)
 800d554:	e022      	b.n	800d59c <_dtoa_r+0xdc>
 800d556:	4b92      	ldr	r3, [pc, #584]	; (800d7a0 <_dtoa_r+0x2e0>)
 800d558:	9301      	str	r3, [sp, #4]
 800d55a:	3308      	adds	r3, #8
 800d55c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d55e:	6013      	str	r3, [r2, #0]
 800d560:	9801      	ldr	r0, [sp, #4]
 800d562:	b013      	add	sp, #76	; 0x4c
 800d564:	ecbd 8b04 	vpop	{d8-d9}
 800d568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d56c:	4b8b      	ldr	r3, [pc, #556]	; (800d79c <_dtoa_r+0x2dc>)
 800d56e:	9301      	str	r3, [sp, #4]
 800d570:	3303      	adds	r3, #3
 800d572:	e7f3      	b.n	800d55c <_dtoa_r+0x9c>
 800d574:	2200      	movs	r2, #0
 800d576:	2300      	movs	r3, #0
 800d578:	4650      	mov	r0, sl
 800d57a:	4659      	mov	r1, fp
 800d57c:	f7f3 facc 	bl	8000b18 <__aeabi_dcmpeq>
 800d580:	ec4b ab19 	vmov	d9, sl, fp
 800d584:	4680      	mov	r8, r0
 800d586:	b158      	cbz	r0, 800d5a0 <_dtoa_r+0xe0>
 800d588:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d58a:	2301      	movs	r3, #1
 800d58c:	6013      	str	r3, [r2, #0]
 800d58e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d590:	2b00      	cmp	r3, #0
 800d592:	f000 856b 	beq.w	800e06c <_dtoa_r+0xbac>
 800d596:	4883      	ldr	r0, [pc, #524]	; (800d7a4 <_dtoa_r+0x2e4>)
 800d598:	6018      	str	r0, [r3, #0]
 800d59a:	1e43      	subs	r3, r0, #1
 800d59c:	9301      	str	r3, [sp, #4]
 800d59e:	e7df      	b.n	800d560 <_dtoa_r+0xa0>
 800d5a0:	ec4b ab10 	vmov	d0, sl, fp
 800d5a4:	aa10      	add	r2, sp, #64	; 0x40
 800d5a6:	a911      	add	r1, sp, #68	; 0x44
 800d5a8:	4620      	mov	r0, r4
 800d5aa:	f001 f8ab 	bl	800e704 <__d2b>
 800d5ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d5b2:	ee08 0a10 	vmov	s16, r0
 800d5b6:	2d00      	cmp	r5, #0
 800d5b8:	f000 8084 	beq.w	800d6c4 <_dtoa_r+0x204>
 800d5bc:	ee19 3a90 	vmov	r3, s19
 800d5c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d5c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d5c8:	4656      	mov	r6, sl
 800d5ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d5ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d5d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d5d6:	4b74      	ldr	r3, [pc, #464]	; (800d7a8 <_dtoa_r+0x2e8>)
 800d5d8:	2200      	movs	r2, #0
 800d5da:	4630      	mov	r0, r6
 800d5dc:	4639      	mov	r1, r7
 800d5de:	f7f2 fe7b 	bl	80002d8 <__aeabi_dsub>
 800d5e2:	a365      	add	r3, pc, #404	; (adr r3, 800d778 <_dtoa_r+0x2b8>)
 800d5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e8:	f7f3 f82e 	bl	8000648 <__aeabi_dmul>
 800d5ec:	a364      	add	r3, pc, #400	; (adr r3, 800d780 <_dtoa_r+0x2c0>)
 800d5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f2:	f7f2 fe73 	bl	80002dc <__adddf3>
 800d5f6:	4606      	mov	r6, r0
 800d5f8:	4628      	mov	r0, r5
 800d5fa:	460f      	mov	r7, r1
 800d5fc:	f7f2 ffba 	bl	8000574 <__aeabi_i2d>
 800d600:	a361      	add	r3, pc, #388	; (adr r3, 800d788 <_dtoa_r+0x2c8>)
 800d602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d606:	f7f3 f81f 	bl	8000648 <__aeabi_dmul>
 800d60a:	4602      	mov	r2, r0
 800d60c:	460b      	mov	r3, r1
 800d60e:	4630      	mov	r0, r6
 800d610:	4639      	mov	r1, r7
 800d612:	f7f2 fe63 	bl	80002dc <__adddf3>
 800d616:	4606      	mov	r6, r0
 800d618:	460f      	mov	r7, r1
 800d61a:	f7f3 fac5 	bl	8000ba8 <__aeabi_d2iz>
 800d61e:	2200      	movs	r2, #0
 800d620:	9000      	str	r0, [sp, #0]
 800d622:	2300      	movs	r3, #0
 800d624:	4630      	mov	r0, r6
 800d626:	4639      	mov	r1, r7
 800d628:	f7f3 fa80 	bl	8000b2c <__aeabi_dcmplt>
 800d62c:	b150      	cbz	r0, 800d644 <_dtoa_r+0x184>
 800d62e:	9800      	ldr	r0, [sp, #0]
 800d630:	f7f2 ffa0 	bl	8000574 <__aeabi_i2d>
 800d634:	4632      	mov	r2, r6
 800d636:	463b      	mov	r3, r7
 800d638:	f7f3 fa6e 	bl	8000b18 <__aeabi_dcmpeq>
 800d63c:	b910      	cbnz	r0, 800d644 <_dtoa_r+0x184>
 800d63e:	9b00      	ldr	r3, [sp, #0]
 800d640:	3b01      	subs	r3, #1
 800d642:	9300      	str	r3, [sp, #0]
 800d644:	9b00      	ldr	r3, [sp, #0]
 800d646:	2b16      	cmp	r3, #22
 800d648:	d85a      	bhi.n	800d700 <_dtoa_r+0x240>
 800d64a:	9a00      	ldr	r2, [sp, #0]
 800d64c:	4b57      	ldr	r3, [pc, #348]	; (800d7ac <_dtoa_r+0x2ec>)
 800d64e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d656:	ec51 0b19 	vmov	r0, r1, d9
 800d65a:	f7f3 fa67 	bl	8000b2c <__aeabi_dcmplt>
 800d65e:	2800      	cmp	r0, #0
 800d660:	d050      	beq.n	800d704 <_dtoa_r+0x244>
 800d662:	9b00      	ldr	r3, [sp, #0]
 800d664:	3b01      	subs	r3, #1
 800d666:	9300      	str	r3, [sp, #0]
 800d668:	2300      	movs	r3, #0
 800d66a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d66c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d66e:	1b5d      	subs	r5, r3, r5
 800d670:	1e6b      	subs	r3, r5, #1
 800d672:	9305      	str	r3, [sp, #20]
 800d674:	bf45      	ittet	mi
 800d676:	f1c5 0301 	rsbmi	r3, r5, #1
 800d67a:	9304      	strmi	r3, [sp, #16]
 800d67c:	2300      	movpl	r3, #0
 800d67e:	2300      	movmi	r3, #0
 800d680:	bf4c      	ite	mi
 800d682:	9305      	strmi	r3, [sp, #20]
 800d684:	9304      	strpl	r3, [sp, #16]
 800d686:	9b00      	ldr	r3, [sp, #0]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	db3d      	blt.n	800d708 <_dtoa_r+0x248>
 800d68c:	9b05      	ldr	r3, [sp, #20]
 800d68e:	9a00      	ldr	r2, [sp, #0]
 800d690:	920a      	str	r2, [sp, #40]	; 0x28
 800d692:	4413      	add	r3, r2
 800d694:	9305      	str	r3, [sp, #20]
 800d696:	2300      	movs	r3, #0
 800d698:	9307      	str	r3, [sp, #28]
 800d69a:	9b06      	ldr	r3, [sp, #24]
 800d69c:	2b09      	cmp	r3, #9
 800d69e:	f200 8089 	bhi.w	800d7b4 <_dtoa_r+0x2f4>
 800d6a2:	2b05      	cmp	r3, #5
 800d6a4:	bfc4      	itt	gt
 800d6a6:	3b04      	subgt	r3, #4
 800d6a8:	9306      	strgt	r3, [sp, #24]
 800d6aa:	9b06      	ldr	r3, [sp, #24]
 800d6ac:	f1a3 0302 	sub.w	r3, r3, #2
 800d6b0:	bfcc      	ite	gt
 800d6b2:	2500      	movgt	r5, #0
 800d6b4:	2501      	movle	r5, #1
 800d6b6:	2b03      	cmp	r3, #3
 800d6b8:	f200 8087 	bhi.w	800d7ca <_dtoa_r+0x30a>
 800d6bc:	e8df f003 	tbb	[pc, r3]
 800d6c0:	59383a2d 	.word	0x59383a2d
 800d6c4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d6c8:	441d      	add	r5, r3
 800d6ca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d6ce:	2b20      	cmp	r3, #32
 800d6d0:	bfc1      	itttt	gt
 800d6d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d6d6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d6da:	fa0b f303 	lslgt.w	r3, fp, r3
 800d6de:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d6e2:	bfda      	itte	le
 800d6e4:	f1c3 0320 	rsble	r3, r3, #32
 800d6e8:	fa06 f003 	lslle.w	r0, r6, r3
 800d6ec:	4318      	orrgt	r0, r3
 800d6ee:	f7f2 ff31 	bl	8000554 <__aeabi_ui2d>
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	4606      	mov	r6, r0
 800d6f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d6fa:	3d01      	subs	r5, #1
 800d6fc:	930e      	str	r3, [sp, #56]	; 0x38
 800d6fe:	e76a      	b.n	800d5d6 <_dtoa_r+0x116>
 800d700:	2301      	movs	r3, #1
 800d702:	e7b2      	b.n	800d66a <_dtoa_r+0x1aa>
 800d704:	900b      	str	r0, [sp, #44]	; 0x2c
 800d706:	e7b1      	b.n	800d66c <_dtoa_r+0x1ac>
 800d708:	9b04      	ldr	r3, [sp, #16]
 800d70a:	9a00      	ldr	r2, [sp, #0]
 800d70c:	1a9b      	subs	r3, r3, r2
 800d70e:	9304      	str	r3, [sp, #16]
 800d710:	4253      	negs	r3, r2
 800d712:	9307      	str	r3, [sp, #28]
 800d714:	2300      	movs	r3, #0
 800d716:	930a      	str	r3, [sp, #40]	; 0x28
 800d718:	e7bf      	b.n	800d69a <_dtoa_r+0x1da>
 800d71a:	2300      	movs	r3, #0
 800d71c:	9308      	str	r3, [sp, #32]
 800d71e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d720:	2b00      	cmp	r3, #0
 800d722:	dc55      	bgt.n	800d7d0 <_dtoa_r+0x310>
 800d724:	2301      	movs	r3, #1
 800d726:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d72a:	461a      	mov	r2, r3
 800d72c:	9209      	str	r2, [sp, #36]	; 0x24
 800d72e:	e00c      	b.n	800d74a <_dtoa_r+0x28a>
 800d730:	2301      	movs	r3, #1
 800d732:	e7f3      	b.n	800d71c <_dtoa_r+0x25c>
 800d734:	2300      	movs	r3, #0
 800d736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d738:	9308      	str	r3, [sp, #32]
 800d73a:	9b00      	ldr	r3, [sp, #0]
 800d73c:	4413      	add	r3, r2
 800d73e:	9302      	str	r3, [sp, #8]
 800d740:	3301      	adds	r3, #1
 800d742:	2b01      	cmp	r3, #1
 800d744:	9303      	str	r3, [sp, #12]
 800d746:	bfb8      	it	lt
 800d748:	2301      	movlt	r3, #1
 800d74a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d74c:	2200      	movs	r2, #0
 800d74e:	6042      	str	r2, [r0, #4]
 800d750:	2204      	movs	r2, #4
 800d752:	f102 0614 	add.w	r6, r2, #20
 800d756:	429e      	cmp	r6, r3
 800d758:	6841      	ldr	r1, [r0, #4]
 800d75a:	d93d      	bls.n	800d7d8 <_dtoa_r+0x318>
 800d75c:	4620      	mov	r0, r4
 800d75e:	f000 fca9 	bl	800e0b4 <_Balloc>
 800d762:	9001      	str	r0, [sp, #4]
 800d764:	2800      	cmp	r0, #0
 800d766:	d13b      	bne.n	800d7e0 <_dtoa_r+0x320>
 800d768:	4b11      	ldr	r3, [pc, #68]	; (800d7b0 <_dtoa_r+0x2f0>)
 800d76a:	4602      	mov	r2, r0
 800d76c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d770:	e6c0      	b.n	800d4f4 <_dtoa_r+0x34>
 800d772:	2301      	movs	r3, #1
 800d774:	e7df      	b.n	800d736 <_dtoa_r+0x276>
 800d776:	bf00      	nop
 800d778:	636f4361 	.word	0x636f4361
 800d77c:	3fd287a7 	.word	0x3fd287a7
 800d780:	8b60c8b3 	.word	0x8b60c8b3
 800d784:	3fc68a28 	.word	0x3fc68a28
 800d788:	509f79fb 	.word	0x509f79fb
 800d78c:	3fd34413 	.word	0x3fd34413
 800d790:	0800f5ad 	.word	0x0800f5ad
 800d794:	0800f5c4 	.word	0x0800f5c4
 800d798:	7ff00000 	.word	0x7ff00000
 800d79c:	0800f5a9 	.word	0x0800f5a9
 800d7a0:	0800f5a0 	.word	0x0800f5a0
 800d7a4:	0800f57d 	.word	0x0800f57d
 800d7a8:	3ff80000 	.word	0x3ff80000
 800d7ac:	0800f6b8 	.word	0x0800f6b8
 800d7b0:	0800f61f 	.word	0x0800f61f
 800d7b4:	2501      	movs	r5, #1
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	9306      	str	r3, [sp, #24]
 800d7ba:	9508      	str	r5, [sp, #32]
 800d7bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	2312      	movs	r3, #18
 800d7c8:	e7b0      	b.n	800d72c <_dtoa_r+0x26c>
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	9308      	str	r3, [sp, #32]
 800d7ce:	e7f5      	b.n	800d7bc <_dtoa_r+0x2fc>
 800d7d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d7d6:	e7b8      	b.n	800d74a <_dtoa_r+0x28a>
 800d7d8:	3101      	adds	r1, #1
 800d7da:	6041      	str	r1, [r0, #4]
 800d7dc:	0052      	lsls	r2, r2, #1
 800d7de:	e7b8      	b.n	800d752 <_dtoa_r+0x292>
 800d7e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7e2:	9a01      	ldr	r2, [sp, #4]
 800d7e4:	601a      	str	r2, [r3, #0]
 800d7e6:	9b03      	ldr	r3, [sp, #12]
 800d7e8:	2b0e      	cmp	r3, #14
 800d7ea:	f200 809d 	bhi.w	800d928 <_dtoa_r+0x468>
 800d7ee:	2d00      	cmp	r5, #0
 800d7f0:	f000 809a 	beq.w	800d928 <_dtoa_r+0x468>
 800d7f4:	9b00      	ldr	r3, [sp, #0]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	dd32      	ble.n	800d860 <_dtoa_r+0x3a0>
 800d7fa:	4ab7      	ldr	r2, [pc, #732]	; (800dad8 <_dtoa_r+0x618>)
 800d7fc:	f003 030f 	and.w	r3, r3, #15
 800d800:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d804:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d808:	9b00      	ldr	r3, [sp, #0]
 800d80a:	05d8      	lsls	r0, r3, #23
 800d80c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d810:	d516      	bpl.n	800d840 <_dtoa_r+0x380>
 800d812:	4bb2      	ldr	r3, [pc, #712]	; (800dadc <_dtoa_r+0x61c>)
 800d814:	ec51 0b19 	vmov	r0, r1, d9
 800d818:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d81c:	f7f3 f83e 	bl	800089c <__aeabi_ddiv>
 800d820:	f007 070f 	and.w	r7, r7, #15
 800d824:	4682      	mov	sl, r0
 800d826:	468b      	mov	fp, r1
 800d828:	2503      	movs	r5, #3
 800d82a:	4eac      	ldr	r6, [pc, #688]	; (800dadc <_dtoa_r+0x61c>)
 800d82c:	b957      	cbnz	r7, 800d844 <_dtoa_r+0x384>
 800d82e:	4642      	mov	r2, r8
 800d830:	464b      	mov	r3, r9
 800d832:	4650      	mov	r0, sl
 800d834:	4659      	mov	r1, fp
 800d836:	f7f3 f831 	bl	800089c <__aeabi_ddiv>
 800d83a:	4682      	mov	sl, r0
 800d83c:	468b      	mov	fp, r1
 800d83e:	e028      	b.n	800d892 <_dtoa_r+0x3d2>
 800d840:	2502      	movs	r5, #2
 800d842:	e7f2      	b.n	800d82a <_dtoa_r+0x36a>
 800d844:	07f9      	lsls	r1, r7, #31
 800d846:	d508      	bpl.n	800d85a <_dtoa_r+0x39a>
 800d848:	4640      	mov	r0, r8
 800d84a:	4649      	mov	r1, r9
 800d84c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d850:	f7f2 fefa 	bl	8000648 <__aeabi_dmul>
 800d854:	3501      	adds	r5, #1
 800d856:	4680      	mov	r8, r0
 800d858:	4689      	mov	r9, r1
 800d85a:	107f      	asrs	r7, r7, #1
 800d85c:	3608      	adds	r6, #8
 800d85e:	e7e5      	b.n	800d82c <_dtoa_r+0x36c>
 800d860:	f000 809b 	beq.w	800d99a <_dtoa_r+0x4da>
 800d864:	9b00      	ldr	r3, [sp, #0]
 800d866:	4f9d      	ldr	r7, [pc, #628]	; (800dadc <_dtoa_r+0x61c>)
 800d868:	425e      	negs	r6, r3
 800d86a:	4b9b      	ldr	r3, [pc, #620]	; (800dad8 <_dtoa_r+0x618>)
 800d86c:	f006 020f 	and.w	r2, r6, #15
 800d870:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d878:	ec51 0b19 	vmov	r0, r1, d9
 800d87c:	f7f2 fee4 	bl	8000648 <__aeabi_dmul>
 800d880:	1136      	asrs	r6, r6, #4
 800d882:	4682      	mov	sl, r0
 800d884:	468b      	mov	fp, r1
 800d886:	2300      	movs	r3, #0
 800d888:	2502      	movs	r5, #2
 800d88a:	2e00      	cmp	r6, #0
 800d88c:	d17a      	bne.n	800d984 <_dtoa_r+0x4c4>
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d1d3      	bne.n	800d83a <_dtoa_r+0x37a>
 800d892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d894:	2b00      	cmp	r3, #0
 800d896:	f000 8082 	beq.w	800d99e <_dtoa_r+0x4de>
 800d89a:	4b91      	ldr	r3, [pc, #580]	; (800dae0 <_dtoa_r+0x620>)
 800d89c:	2200      	movs	r2, #0
 800d89e:	4650      	mov	r0, sl
 800d8a0:	4659      	mov	r1, fp
 800d8a2:	f7f3 f943 	bl	8000b2c <__aeabi_dcmplt>
 800d8a6:	2800      	cmp	r0, #0
 800d8a8:	d079      	beq.n	800d99e <_dtoa_r+0x4de>
 800d8aa:	9b03      	ldr	r3, [sp, #12]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d076      	beq.n	800d99e <_dtoa_r+0x4de>
 800d8b0:	9b02      	ldr	r3, [sp, #8]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	dd36      	ble.n	800d924 <_dtoa_r+0x464>
 800d8b6:	9b00      	ldr	r3, [sp, #0]
 800d8b8:	4650      	mov	r0, sl
 800d8ba:	4659      	mov	r1, fp
 800d8bc:	1e5f      	subs	r7, r3, #1
 800d8be:	2200      	movs	r2, #0
 800d8c0:	4b88      	ldr	r3, [pc, #544]	; (800dae4 <_dtoa_r+0x624>)
 800d8c2:	f7f2 fec1 	bl	8000648 <__aeabi_dmul>
 800d8c6:	9e02      	ldr	r6, [sp, #8]
 800d8c8:	4682      	mov	sl, r0
 800d8ca:	468b      	mov	fp, r1
 800d8cc:	3501      	adds	r5, #1
 800d8ce:	4628      	mov	r0, r5
 800d8d0:	f7f2 fe50 	bl	8000574 <__aeabi_i2d>
 800d8d4:	4652      	mov	r2, sl
 800d8d6:	465b      	mov	r3, fp
 800d8d8:	f7f2 feb6 	bl	8000648 <__aeabi_dmul>
 800d8dc:	4b82      	ldr	r3, [pc, #520]	; (800dae8 <_dtoa_r+0x628>)
 800d8de:	2200      	movs	r2, #0
 800d8e0:	f7f2 fcfc 	bl	80002dc <__adddf3>
 800d8e4:	46d0      	mov	r8, sl
 800d8e6:	46d9      	mov	r9, fp
 800d8e8:	4682      	mov	sl, r0
 800d8ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d8ee:	2e00      	cmp	r6, #0
 800d8f0:	d158      	bne.n	800d9a4 <_dtoa_r+0x4e4>
 800d8f2:	4b7e      	ldr	r3, [pc, #504]	; (800daec <_dtoa_r+0x62c>)
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	4640      	mov	r0, r8
 800d8f8:	4649      	mov	r1, r9
 800d8fa:	f7f2 fced 	bl	80002d8 <__aeabi_dsub>
 800d8fe:	4652      	mov	r2, sl
 800d900:	465b      	mov	r3, fp
 800d902:	4680      	mov	r8, r0
 800d904:	4689      	mov	r9, r1
 800d906:	f7f3 f92f 	bl	8000b68 <__aeabi_dcmpgt>
 800d90a:	2800      	cmp	r0, #0
 800d90c:	f040 8295 	bne.w	800de3a <_dtoa_r+0x97a>
 800d910:	4652      	mov	r2, sl
 800d912:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d916:	4640      	mov	r0, r8
 800d918:	4649      	mov	r1, r9
 800d91a:	f7f3 f907 	bl	8000b2c <__aeabi_dcmplt>
 800d91e:	2800      	cmp	r0, #0
 800d920:	f040 8289 	bne.w	800de36 <_dtoa_r+0x976>
 800d924:	ec5b ab19 	vmov	sl, fp, d9
 800d928:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	f2c0 8148 	blt.w	800dbc0 <_dtoa_r+0x700>
 800d930:	9a00      	ldr	r2, [sp, #0]
 800d932:	2a0e      	cmp	r2, #14
 800d934:	f300 8144 	bgt.w	800dbc0 <_dtoa_r+0x700>
 800d938:	4b67      	ldr	r3, [pc, #412]	; (800dad8 <_dtoa_r+0x618>)
 800d93a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d93e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d944:	2b00      	cmp	r3, #0
 800d946:	f280 80d5 	bge.w	800daf4 <_dtoa_r+0x634>
 800d94a:	9b03      	ldr	r3, [sp, #12]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	f300 80d1 	bgt.w	800daf4 <_dtoa_r+0x634>
 800d952:	f040 826f 	bne.w	800de34 <_dtoa_r+0x974>
 800d956:	4b65      	ldr	r3, [pc, #404]	; (800daec <_dtoa_r+0x62c>)
 800d958:	2200      	movs	r2, #0
 800d95a:	4640      	mov	r0, r8
 800d95c:	4649      	mov	r1, r9
 800d95e:	f7f2 fe73 	bl	8000648 <__aeabi_dmul>
 800d962:	4652      	mov	r2, sl
 800d964:	465b      	mov	r3, fp
 800d966:	f7f3 f8f5 	bl	8000b54 <__aeabi_dcmpge>
 800d96a:	9e03      	ldr	r6, [sp, #12]
 800d96c:	4637      	mov	r7, r6
 800d96e:	2800      	cmp	r0, #0
 800d970:	f040 8245 	bne.w	800ddfe <_dtoa_r+0x93e>
 800d974:	9d01      	ldr	r5, [sp, #4]
 800d976:	2331      	movs	r3, #49	; 0x31
 800d978:	f805 3b01 	strb.w	r3, [r5], #1
 800d97c:	9b00      	ldr	r3, [sp, #0]
 800d97e:	3301      	adds	r3, #1
 800d980:	9300      	str	r3, [sp, #0]
 800d982:	e240      	b.n	800de06 <_dtoa_r+0x946>
 800d984:	07f2      	lsls	r2, r6, #31
 800d986:	d505      	bpl.n	800d994 <_dtoa_r+0x4d4>
 800d988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d98c:	f7f2 fe5c 	bl	8000648 <__aeabi_dmul>
 800d990:	3501      	adds	r5, #1
 800d992:	2301      	movs	r3, #1
 800d994:	1076      	asrs	r6, r6, #1
 800d996:	3708      	adds	r7, #8
 800d998:	e777      	b.n	800d88a <_dtoa_r+0x3ca>
 800d99a:	2502      	movs	r5, #2
 800d99c:	e779      	b.n	800d892 <_dtoa_r+0x3d2>
 800d99e:	9f00      	ldr	r7, [sp, #0]
 800d9a0:	9e03      	ldr	r6, [sp, #12]
 800d9a2:	e794      	b.n	800d8ce <_dtoa_r+0x40e>
 800d9a4:	9901      	ldr	r1, [sp, #4]
 800d9a6:	4b4c      	ldr	r3, [pc, #304]	; (800dad8 <_dtoa_r+0x618>)
 800d9a8:	4431      	add	r1, r6
 800d9aa:	910d      	str	r1, [sp, #52]	; 0x34
 800d9ac:	9908      	ldr	r1, [sp, #32]
 800d9ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d9b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d9b6:	2900      	cmp	r1, #0
 800d9b8:	d043      	beq.n	800da42 <_dtoa_r+0x582>
 800d9ba:	494d      	ldr	r1, [pc, #308]	; (800daf0 <_dtoa_r+0x630>)
 800d9bc:	2000      	movs	r0, #0
 800d9be:	f7f2 ff6d 	bl	800089c <__aeabi_ddiv>
 800d9c2:	4652      	mov	r2, sl
 800d9c4:	465b      	mov	r3, fp
 800d9c6:	f7f2 fc87 	bl	80002d8 <__aeabi_dsub>
 800d9ca:	9d01      	ldr	r5, [sp, #4]
 800d9cc:	4682      	mov	sl, r0
 800d9ce:	468b      	mov	fp, r1
 800d9d0:	4649      	mov	r1, r9
 800d9d2:	4640      	mov	r0, r8
 800d9d4:	f7f3 f8e8 	bl	8000ba8 <__aeabi_d2iz>
 800d9d8:	4606      	mov	r6, r0
 800d9da:	f7f2 fdcb 	bl	8000574 <__aeabi_i2d>
 800d9de:	4602      	mov	r2, r0
 800d9e0:	460b      	mov	r3, r1
 800d9e2:	4640      	mov	r0, r8
 800d9e4:	4649      	mov	r1, r9
 800d9e6:	f7f2 fc77 	bl	80002d8 <__aeabi_dsub>
 800d9ea:	3630      	adds	r6, #48	; 0x30
 800d9ec:	f805 6b01 	strb.w	r6, [r5], #1
 800d9f0:	4652      	mov	r2, sl
 800d9f2:	465b      	mov	r3, fp
 800d9f4:	4680      	mov	r8, r0
 800d9f6:	4689      	mov	r9, r1
 800d9f8:	f7f3 f898 	bl	8000b2c <__aeabi_dcmplt>
 800d9fc:	2800      	cmp	r0, #0
 800d9fe:	d163      	bne.n	800dac8 <_dtoa_r+0x608>
 800da00:	4642      	mov	r2, r8
 800da02:	464b      	mov	r3, r9
 800da04:	4936      	ldr	r1, [pc, #216]	; (800dae0 <_dtoa_r+0x620>)
 800da06:	2000      	movs	r0, #0
 800da08:	f7f2 fc66 	bl	80002d8 <__aeabi_dsub>
 800da0c:	4652      	mov	r2, sl
 800da0e:	465b      	mov	r3, fp
 800da10:	f7f3 f88c 	bl	8000b2c <__aeabi_dcmplt>
 800da14:	2800      	cmp	r0, #0
 800da16:	f040 80b5 	bne.w	800db84 <_dtoa_r+0x6c4>
 800da1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da1c:	429d      	cmp	r5, r3
 800da1e:	d081      	beq.n	800d924 <_dtoa_r+0x464>
 800da20:	4b30      	ldr	r3, [pc, #192]	; (800dae4 <_dtoa_r+0x624>)
 800da22:	2200      	movs	r2, #0
 800da24:	4650      	mov	r0, sl
 800da26:	4659      	mov	r1, fp
 800da28:	f7f2 fe0e 	bl	8000648 <__aeabi_dmul>
 800da2c:	4b2d      	ldr	r3, [pc, #180]	; (800dae4 <_dtoa_r+0x624>)
 800da2e:	4682      	mov	sl, r0
 800da30:	468b      	mov	fp, r1
 800da32:	4640      	mov	r0, r8
 800da34:	4649      	mov	r1, r9
 800da36:	2200      	movs	r2, #0
 800da38:	f7f2 fe06 	bl	8000648 <__aeabi_dmul>
 800da3c:	4680      	mov	r8, r0
 800da3e:	4689      	mov	r9, r1
 800da40:	e7c6      	b.n	800d9d0 <_dtoa_r+0x510>
 800da42:	4650      	mov	r0, sl
 800da44:	4659      	mov	r1, fp
 800da46:	f7f2 fdff 	bl	8000648 <__aeabi_dmul>
 800da4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da4c:	9d01      	ldr	r5, [sp, #4]
 800da4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800da50:	4682      	mov	sl, r0
 800da52:	468b      	mov	fp, r1
 800da54:	4649      	mov	r1, r9
 800da56:	4640      	mov	r0, r8
 800da58:	f7f3 f8a6 	bl	8000ba8 <__aeabi_d2iz>
 800da5c:	4606      	mov	r6, r0
 800da5e:	f7f2 fd89 	bl	8000574 <__aeabi_i2d>
 800da62:	3630      	adds	r6, #48	; 0x30
 800da64:	4602      	mov	r2, r0
 800da66:	460b      	mov	r3, r1
 800da68:	4640      	mov	r0, r8
 800da6a:	4649      	mov	r1, r9
 800da6c:	f7f2 fc34 	bl	80002d8 <__aeabi_dsub>
 800da70:	f805 6b01 	strb.w	r6, [r5], #1
 800da74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da76:	429d      	cmp	r5, r3
 800da78:	4680      	mov	r8, r0
 800da7a:	4689      	mov	r9, r1
 800da7c:	f04f 0200 	mov.w	r2, #0
 800da80:	d124      	bne.n	800dacc <_dtoa_r+0x60c>
 800da82:	4b1b      	ldr	r3, [pc, #108]	; (800daf0 <_dtoa_r+0x630>)
 800da84:	4650      	mov	r0, sl
 800da86:	4659      	mov	r1, fp
 800da88:	f7f2 fc28 	bl	80002dc <__adddf3>
 800da8c:	4602      	mov	r2, r0
 800da8e:	460b      	mov	r3, r1
 800da90:	4640      	mov	r0, r8
 800da92:	4649      	mov	r1, r9
 800da94:	f7f3 f868 	bl	8000b68 <__aeabi_dcmpgt>
 800da98:	2800      	cmp	r0, #0
 800da9a:	d173      	bne.n	800db84 <_dtoa_r+0x6c4>
 800da9c:	4652      	mov	r2, sl
 800da9e:	465b      	mov	r3, fp
 800daa0:	4913      	ldr	r1, [pc, #76]	; (800daf0 <_dtoa_r+0x630>)
 800daa2:	2000      	movs	r0, #0
 800daa4:	f7f2 fc18 	bl	80002d8 <__aeabi_dsub>
 800daa8:	4602      	mov	r2, r0
 800daaa:	460b      	mov	r3, r1
 800daac:	4640      	mov	r0, r8
 800daae:	4649      	mov	r1, r9
 800dab0:	f7f3 f83c 	bl	8000b2c <__aeabi_dcmplt>
 800dab4:	2800      	cmp	r0, #0
 800dab6:	f43f af35 	beq.w	800d924 <_dtoa_r+0x464>
 800daba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dabc:	1e6b      	subs	r3, r5, #1
 800dabe:	930f      	str	r3, [sp, #60]	; 0x3c
 800dac0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dac4:	2b30      	cmp	r3, #48	; 0x30
 800dac6:	d0f8      	beq.n	800daba <_dtoa_r+0x5fa>
 800dac8:	9700      	str	r7, [sp, #0]
 800daca:	e049      	b.n	800db60 <_dtoa_r+0x6a0>
 800dacc:	4b05      	ldr	r3, [pc, #20]	; (800dae4 <_dtoa_r+0x624>)
 800dace:	f7f2 fdbb 	bl	8000648 <__aeabi_dmul>
 800dad2:	4680      	mov	r8, r0
 800dad4:	4689      	mov	r9, r1
 800dad6:	e7bd      	b.n	800da54 <_dtoa_r+0x594>
 800dad8:	0800f6b8 	.word	0x0800f6b8
 800dadc:	0800f690 	.word	0x0800f690
 800dae0:	3ff00000 	.word	0x3ff00000
 800dae4:	40240000 	.word	0x40240000
 800dae8:	401c0000 	.word	0x401c0000
 800daec:	40140000 	.word	0x40140000
 800daf0:	3fe00000 	.word	0x3fe00000
 800daf4:	9d01      	ldr	r5, [sp, #4]
 800daf6:	4656      	mov	r6, sl
 800daf8:	465f      	mov	r7, fp
 800dafa:	4642      	mov	r2, r8
 800dafc:	464b      	mov	r3, r9
 800dafe:	4630      	mov	r0, r6
 800db00:	4639      	mov	r1, r7
 800db02:	f7f2 fecb 	bl	800089c <__aeabi_ddiv>
 800db06:	f7f3 f84f 	bl	8000ba8 <__aeabi_d2iz>
 800db0a:	4682      	mov	sl, r0
 800db0c:	f7f2 fd32 	bl	8000574 <__aeabi_i2d>
 800db10:	4642      	mov	r2, r8
 800db12:	464b      	mov	r3, r9
 800db14:	f7f2 fd98 	bl	8000648 <__aeabi_dmul>
 800db18:	4602      	mov	r2, r0
 800db1a:	460b      	mov	r3, r1
 800db1c:	4630      	mov	r0, r6
 800db1e:	4639      	mov	r1, r7
 800db20:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800db24:	f7f2 fbd8 	bl	80002d8 <__aeabi_dsub>
 800db28:	f805 6b01 	strb.w	r6, [r5], #1
 800db2c:	9e01      	ldr	r6, [sp, #4]
 800db2e:	9f03      	ldr	r7, [sp, #12]
 800db30:	1bae      	subs	r6, r5, r6
 800db32:	42b7      	cmp	r7, r6
 800db34:	4602      	mov	r2, r0
 800db36:	460b      	mov	r3, r1
 800db38:	d135      	bne.n	800dba6 <_dtoa_r+0x6e6>
 800db3a:	f7f2 fbcf 	bl	80002dc <__adddf3>
 800db3e:	4642      	mov	r2, r8
 800db40:	464b      	mov	r3, r9
 800db42:	4606      	mov	r6, r0
 800db44:	460f      	mov	r7, r1
 800db46:	f7f3 f80f 	bl	8000b68 <__aeabi_dcmpgt>
 800db4a:	b9d0      	cbnz	r0, 800db82 <_dtoa_r+0x6c2>
 800db4c:	4642      	mov	r2, r8
 800db4e:	464b      	mov	r3, r9
 800db50:	4630      	mov	r0, r6
 800db52:	4639      	mov	r1, r7
 800db54:	f7f2 ffe0 	bl	8000b18 <__aeabi_dcmpeq>
 800db58:	b110      	cbz	r0, 800db60 <_dtoa_r+0x6a0>
 800db5a:	f01a 0f01 	tst.w	sl, #1
 800db5e:	d110      	bne.n	800db82 <_dtoa_r+0x6c2>
 800db60:	4620      	mov	r0, r4
 800db62:	ee18 1a10 	vmov	r1, s16
 800db66:	f000 fae5 	bl	800e134 <_Bfree>
 800db6a:	2300      	movs	r3, #0
 800db6c:	9800      	ldr	r0, [sp, #0]
 800db6e:	702b      	strb	r3, [r5, #0]
 800db70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db72:	3001      	adds	r0, #1
 800db74:	6018      	str	r0, [r3, #0]
 800db76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db78:	2b00      	cmp	r3, #0
 800db7a:	f43f acf1 	beq.w	800d560 <_dtoa_r+0xa0>
 800db7e:	601d      	str	r5, [r3, #0]
 800db80:	e4ee      	b.n	800d560 <_dtoa_r+0xa0>
 800db82:	9f00      	ldr	r7, [sp, #0]
 800db84:	462b      	mov	r3, r5
 800db86:	461d      	mov	r5, r3
 800db88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db8c:	2a39      	cmp	r2, #57	; 0x39
 800db8e:	d106      	bne.n	800db9e <_dtoa_r+0x6de>
 800db90:	9a01      	ldr	r2, [sp, #4]
 800db92:	429a      	cmp	r2, r3
 800db94:	d1f7      	bne.n	800db86 <_dtoa_r+0x6c6>
 800db96:	9901      	ldr	r1, [sp, #4]
 800db98:	2230      	movs	r2, #48	; 0x30
 800db9a:	3701      	adds	r7, #1
 800db9c:	700a      	strb	r2, [r1, #0]
 800db9e:	781a      	ldrb	r2, [r3, #0]
 800dba0:	3201      	adds	r2, #1
 800dba2:	701a      	strb	r2, [r3, #0]
 800dba4:	e790      	b.n	800dac8 <_dtoa_r+0x608>
 800dba6:	4ba6      	ldr	r3, [pc, #664]	; (800de40 <_dtoa_r+0x980>)
 800dba8:	2200      	movs	r2, #0
 800dbaa:	f7f2 fd4d 	bl	8000648 <__aeabi_dmul>
 800dbae:	2200      	movs	r2, #0
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	4606      	mov	r6, r0
 800dbb4:	460f      	mov	r7, r1
 800dbb6:	f7f2 ffaf 	bl	8000b18 <__aeabi_dcmpeq>
 800dbba:	2800      	cmp	r0, #0
 800dbbc:	d09d      	beq.n	800dafa <_dtoa_r+0x63a>
 800dbbe:	e7cf      	b.n	800db60 <_dtoa_r+0x6a0>
 800dbc0:	9a08      	ldr	r2, [sp, #32]
 800dbc2:	2a00      	cmp	r2, #0
 800dbc4:	f000 80d7 	beq.w	800dd76 <_dtoa_r+0x8b6>
 800dbc8:	9a06      	ldr	r2, [sp, #24]
 800dbca:	2a01      	cmp	r2, #1
 800dbcc:	f300 80ba 	bgt.w	800dd44 <_dtoa_r+0x884>
 800dbd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dbd2:	2a00      	cmp	r2, #0
 800dbd4:	f000 80b2 	beq.w	800dd3c <_dtoa_r+0x87c>
 800dbd8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dbdc:	9e07      	ldr	r6, [sp, #28]
 800dbde:	9d04      	ldr	r5, [sp, #16]
 800dbe0:	9a04      	ldr	r2, [sp, #16]
 800dbe2:	441a      	add	r2, r3
 800dbe4:	9204      	str	r2, [sp, #16]
 800dbe6:	9a05      	ldr	r2, [sp, #20]
 800dbe8:	2101      	movs	r1, #1
 800dbea:	441a      	add	r2, r3
 800dbec:	4620      	mov	r0, r4
 800dbee:	9205      	str	r2, [sp, #20]
 800dbf0:	f000 fb58 	bl	800e2a4 <__i2b>
 800dbf4:	4607      	mov	r7, r0
 800dbf6:	2d00      	cmp	r5, #0
 800dbf8:	dd0c      	ble.n	800dc14 <_dtoa_r+0x754>
 800dbfa:	9b05      	ldr	r3, [sp, #20]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	dd09      	ble.n	800dc14 <_dtoa_r+0x754>
 800dc00:	42ab      	cmp	r3, r5
 800dc02:	9a04      	ldr	r2, [sp, #16]
 800dc04:	bfa8      	it	ge
 800dc06:	462b      	movge	r3, r5
 800dc08:	1ad2      	subs	r2, r2, r3
 800dc0a:	9204      	str	r2, [sp, #16]
 800dc0c:	9a05      	ldr	r2, [sp, #20]
 800dc0e:	1aed      	subs	r5, r5, r3
 800dc10:	1ad3      	subs	r3, r2, r3
 800dc12:	9305      	str	r3, [sp, #20]
 800dc14:	9b07      	ldr	r3, [sp, #28]
 800dc16:	b31b      	cbz	r3, 800dc60 <_dtoa_r+0x7a0>
 800dc18:	9b08      	ldr	r3, [sp, #32]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	f000 80af 	beq.w	800dd7e <_dtoa_r+0x8be>
 800dc20:	2e00      	cmp	r6, #0
 800dc22:	dd13      	ble.n	800dc4c <_dtoa_r+0x78c>
 800dc24:	4639      	mov	r1, r7
 800dc26:	4632      	mov	r2, r6
 800dc28:	4620      	mov	r0, r4
 800dc2a:	f000 fbfb 	bl	800e424 <__pow5mult>
 800dc2e:	ee18 2a10 	vmov	r2, s16
 800dc32:	4601      	mov	r1, r0
 800dc34:	4607      	mov	r7, r0
 800dc36:	4620      	mov	r0, r4
 800dc38:	f000 fb4a 	bl	800e2d0 <__multiply>
 800dc3c:	ee18 1a10 	vmov	r1, s16
 800dc40:	4680      	mov	r8, r0
 800dc42:	4620      	mov	r0, r4
 800dc44:	f000 fa76 	bl	800e134 <_Bfree>
 800dc48:	ee08 8a10 	vmov	s16, r8
 800dc4c:	9b07      	ldr	r3, [sp, #28]
 800dc4e:	1b9a      	subs	r2, r3, r6
 800dc50:	d006      	beq.n	800dc60 <_dtoa_r+0x7a0>
 800dc52:	ee18 1a10 	vmov	r1, s16
 800dc56:	4620      	mov	r0, r4
 800dc58:	f000 fbe4 	bl	800e424 <__pow5mult>
 800dc5c:	ee08 0a10 	vmov	s16, r0
 800dc60:	2101      	movs	r1, #1
 800dc62:	4620      	mov	r0, r4
 800dc64:	f000 fb1e 	bl	800e2a4 <__i2b>
 800dc68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	4606      	mov	r6, r0
 800dc6e:	f340 8088 	ble.w	800dd82 <_dtoa_r+0x8c2>
 800dc72:	461a      	mov	r2, r3
 800dc74:	4601      	mov	r1, r0
 800dc76:	4620      	mov	r0, r4
 800dc78:	f000 fbd4 	bl	800e424 <__pow5mult>
 800dc7c:	9b06      	ldr	r3, [sp, #24]
 800dc7e:	2b01      	cmp	r3, #1
 800dc80:	4606      	mov	r6, r0
 800dc82:	f340 8081 	ble.w	800dd88 <_dtoa_r+0x8c8>
 800dc86:	f04f 0800 	mov.w	r8, #0
 800dc8a:	6933      	ldr	r3, [r6, #16]
 800dc8c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dc90:	6918      	ldr	r0, [r3, #16]
 800dc92:	f000 fab7 	bl	800e204 <__hi0bits>
 800dc96:	f1c0 0020 	rsb	r0, r0, #32
 800dc9a:	9b05      	ldr	r3, [sp, #20]
 800dc9c:	4418      	add	r0, r3
 800dc9e:	f010 001f 	ands.w	r0, r0, #31
 800dca2:	f000 8092 	beq.w	800ddca <_dtoa_r+0x90a>
 800dca6:	f1c0 0320 	rsb	r3, r0, #32
 800dcaa:	2b04      	cmp	r3, #4
 800dcac:	f340 808a 	ble.w	800ddc4 <_dtoa_r+0x904>
 800dcb0:	f1c0 001c 	rsb	r0, r0, #28
 800dcb4:	9b04      	ldr	r3, [sp, #16]
 800dcb6:	4403      	add	r3, r0
 800dcb8:	9304      	str	r3, [sp, #16]
 800dcba:	9b05      	ldr	r3, [sp, #20]
 800dcbc:	4403      	add	r3, r0
 800dcbe:	4405      	add	r5, r0
 800dcc0:	9305      	str	r3, [sp, #20]
 800dcc2:	9b04      	ldr	r3, [sp, #16]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	dd07      	ble.n	800dcd8 <_dtoa_r+0x818>
 800dcc8:	ee18 1a10 	vmov	r1, s16
 800dccc:	461a      	mov	r2, r3
 800dcce:	4620      	mov	r0, r4
 800dcd0:	f000 fc02 	bl	800e4d8 <__lshift>
 800dcd4:	ee08 0a10 	vmov	s16, r0
 800dcd8:	9b05      	ldr	r3, [sp, #20]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	dd05      	ble.n	800dcea <_dtoa_r+0x82a>
 800dcde:	4631      	mov	r1, r6
 800dce0:	461a      	mov	r2, r3
 800dce2:	4620      	mov	r0, r4
 800dce4:	f000 fbf8 	bl	800e4d8 <__lshift>
 800dce8:	4606      	mov	r6, r0
 800dcea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d06e      	beq.n	800ddce <_dtoa_r+0x90e>
 800dcf0:	ee18 0a10 	vmov	r0, s16
 800dcf4:	4631      	mov	r1, r6
 800dcf6:	f000 fc5f 	bl	800e5b8 <__mcmp>
 800dcfa:	2800      	cmp	r0, #0
 800dcfc:	da67      	bge.n	800ddce <_dtoa_r+0x90e>
 800dcfe:	9b00      	ldr	r3, [sp, #0]
 800dd00:	3b01      	subs	r3, #1
 800dd02:	ee18 1a10 	vmov	r1, s16
 800dd06:	9300      	str	r3, [sp, #0]
 800dd08:	220a      	movs	r2, #10
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	4620      	mov	r0, r4
 800dd0e:	f000 fa33 	bl	800e178 <__multadd>
 800dd12:	9b08      	ldr	r3, [sp, #32]
 800dd14:	ee08 0a10 	vmov	s16, r0
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	f000 81b1 	beq.w	800e080 <_dtoa_r+0xbc0>
 800dd1e:	2300      	movs	r3, #0
 800dd20:	4639      	mov	r1, r7
 800dd22:	220a      	movs	r2, #10
 800dd24:	4620      	mov	r0, r4
 800dd26:	f000 fa27 	bl	800e178 <__multadd>
 800dd2a:	9b02      	ldr	r3, [sp, #8]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	4607      	mov	r7, r0
 800dd30:	f300 808e 	bgt.w	800de50 <_dtoa_r+0x990>
 800dd34:	9b06      	ldr	r3, [sp, #24]
 800dd36:	2b02      	cmp	r3, #2
 800dd38:	dc51      	bgt.n	800ddde <_dtoa_r+0x91e>
 800dd3a:	e089      	b.n	800de50 <_dtoa_r+0x990>
 800dd3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dd42:	e74b      	b.n	800dbdc <_dtoa_r+0x71c>
 800dd44:	9b03      	ldr	r3, [sp, #12]
 800dd46:	1e5e      	subs	r6, r3, #1
 800dd48:	9b07      	ldr	r3, [sp, #28]
 800dd4a:	42b3      	cmp	r3, r6
 800dd4c:	bfbf      	itttt	lt
 800dd4e:	9b07      	ldrlt	r3, [sp, #28]
 800dd50:	9607      	strlt	r6, [sp, #28]
 800dd52:	1af2      	sublt	r2, r6, r3
 800dd54:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800dd56:	bfb6      	itet	lt
 800dd58:	189b      	addlt	r3, r3, r2
 800dd5a:	1b9e      	subge	r6, r3, r6
 800dd5c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800dd5e:	9b03      	ldr	r3, [sp, #12]
 800dd60:	bfb8      	it	lt
 800dd62:	2600      	movlt	r6, #0
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	bfb7      	itett	lt
 800dd68:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800dd6c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800dd70:	1a9d      	sublt	r5, r3, r2
 800dd72:	2300      	movlt	r3, #0
 800dd74:	e734      	b.n	800dbe0 <_dtoa_r+0x720>
 800dd76:	9e07      	ldr	r6, [sp, #28]
 800dd78:	9d04      	ldr	r5, [sp, #16]
 800dd7a:	9f08      	ldr	r7, [sp, #32]
 800dd7c:	e73b      	b.n	800dbf6 <_dtoa_r+0x736>
 800dd7e:	9a07      	ldr	r2, [sp, #28]
 800dd80:	e767      	b.n	800dc52 <_dtoa_r+0x792>
 800dd82:	9b06      	ldr	r3, [sp, #24]
 800dd84:	2b01      	cmp	r3, #1
 800dd86:	dc18      	bgt.n	800ddba <_dtoa_r+0x8fa>
 800dd88:	f1ba 0f00 	cmp.w	sl, #0
 800dd8c:	d115      	bne.n	800ddba <_dtoa_r+0x8fa>
 800dd8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd92:	b993      	cbnz	r3, 800ddba <_dtoa_r+0x8fa>
 800dd94:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dd98:	0d1b      	lsrs	r3, r3, #20
 800dd9a:	051b      	lsls	r3, r3, #20
 800dd9c:	b183      	cbz	r3, 800ddc0 <_dtoa_r+0x900>
 800dd9e:	9b04      	ldr	r3, [sp, #16]
 800dda0:	3301      	adds	r3, #1
 800dda2:	9304      	str	r3, [sp, #16]
 800dda4:	9b05      	ldr	r3, [sp, #20]
 800dda6:	3301      	adds	r3, #1
 800dda8:	9305      	str	r3, [sp, #20]
 800ddaa:	f04f 0801 	mov.w	r8, #1
 800ddae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	f47f af6a 	bne.w	800dc8a <_dtoa_r+0x7ca>
 800ddb6:	2001      	movs	r0, #1
 800ddb8:	e76f      	b.n	800dc9a <_dtoa_r+0x7da>
 800ddba:	f04f 0800 	mov.w	r8, #0
 800ddbe:	e7f6      	b.n	800ddae <_dtoa_r+0x8ee>
 800ddc0:	4698      	mov	r8, r3
 800ddc2:	e7f4      	b.n	800ddae <_dtoa_r+0x8ee>
 800ddc4:	f43f af7d 	beq.w	800dcc2 <_dtoa_r+0x802>
 800ddc8:	4618      	mov	r0, r3
 800ddca:	301c      	adds	r0, #28
 800ddcc:	e772      	b.n	800dcb4 <_dtoa_r+0x7f4>
 800ddce:	9b03      	ldr	r3, [sp, #12]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	dc37      	bgt.n	800de44 <_dtoa_r+0x984>
 800ddd4:	9b06      	ldr	r3, [sp, #24]
 800ddd6:	2b02      	cmp	r3, #2
 800ddd8:	dd34      	ble.n	800de44 <_dtoa_r+0x984>
 800ddda:	9b03      	ldr	r3, [sp, #12]
 800dddc:	9302      	str	r3, [sp, #8]
 800ddde:	9b02      	ldr	r3, [sp, #8]
 800dde0:	b96b      	cbnz	r3, 800ddfe <_dtoa_r+0x93e>
 800dde2:	4631      	mov	r1, r6
 800dde4:	2205      	movs	r2, #5
 800dde6:	4620      	mov	r0, r4
 800dde8:	f000 f9c6 	bl	800e178 <__multadd>
 800ddec:	4601      	mov	r1, r0
 800ddee:	4606      	mov	r6, r0
 800ddf0:	ee18 0a10 	vmov	r0, s16
 800ddf4:	f000 fbe0 	bl	800e5b8 <__mcmp>
 800ddf8:	2800      	cmp	r0, #0
 800ddfa:	f73f adbb 	bgt.w	800d974 <_dtoa_r+0x4b4>
 800ddfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de00:	9d01      	ldr	r5, [sp, #4]
 800de02:	43db      	mvns	r3, r3
 800de04:	9300      	str	r3, [sp, #0]
 800de06:	f04f 0800 	mov.w	r8, #0
 800de0a:	4631      	mov	r1, r6
 800de0c:	4620      	mov	r0, r4
 800de0e:	f000 f991 	bl	800e134 <_Bfree>
 800de12:	2f00      	cmp	r7, #0
 800de14:	f43f aea4 	beq.w	800db60 <_dtoa_r+0x6a0>
 800de18:	f1b8 0f00 	cmp.w	r8, #0
 800de1c:	d005      	beq.n	800de2a <_dtoa_r+0x96a>
 800de1e:	45b8      	cmp	r8, r7
 800de20:	d003      	beq.n	800de2a <_dtoa_r+0x96a>
 800de22:	4641      	mov	r1, r8
 800de24:	4620      	mov	r0, r4
 800de26:	f000 f985 	bl	800e134 <_Bfree>
 800de2a:	4639      	mov	r1, r7
 800de2c:	4620      	mov	r0, r4
 800de2e:	f000 f981 	bl	800e134 <_Bfree>
 800de32:	e695      	b.n	800db60 <_dtoa_r+0x6a0>
 800de34:	2600      	movs	r6, #0
 800de36:	4637      	mov	r7, r6
 800de38:	e7e1      	b.n	800ddfe <_dtoa_r+0x93e>
 800de3a:	9700      	str	r7, [sp, #0]
 800de3c:	4637      	mov	r7, r6
 800de3e:	e599      	b.n	800d974 <_dtoa_r+0x4b4>
 800de40:	40240000 	.word	0x40240000
 800de44:	9b08      	ldr	r3, [sp, #32]
 800de46:	2b00      	cmp	r3, #0
 800de48:	f000 80ca 	beq.w	800dfe0 <_dtoa_r+0xb20>
 800de4c:	9b03      	ldr	r3, [sp, #12]
 800de4e:	9302      	str	r3, [sp, #8]
 800de50:	2d00      	cmp	r5, #0
 800de52:	dd05      	ble.n	800de60 <_dtoa_r+0x9a0>
 800de54:	4639      	mov	r1, r7
 800de56:	462a      	mov	r2, r5
 800de58:	4620      	mov	r0, r4
 800de5a:	f000 fb3d 	bl	800e4d8 <__lshift>
 800de5e:	4607      	mov	r7, r0
 800de60:	f1b8 0f00 	cmp.w	r8, #0
 800de64:	d05b      	beq.n	800df1e <_dtoa_r+0xa5e>
 800de66:	6879      	ldr	r1, [r7, #4]
 800de68:	4620      	mov	r0, r4
 800de6a:	f000 f923 	bl	800e0b4 <_Balloc>
 800de6e:	4605      	mov	r5, r0
 800de70:	b928      	cbnz	r0, 800de7e <_dtoa_r+0x9be>
 800de72:	4b87      	ldr	r3, [pc, #540]	; (800e090 <_dtoa_r+0xbd0>)
 800de74:	4602      	mov	r2, r0
 800de76:	f240 21ea 	movw	r1, #746	; 0x2ea
 800de7a:	f7ff bb3b 	b.w	800d4f4 <_dtoa_r+0x34>
 800de7e:	693a      	ldr	r2, [r7, #16]
 800de80:	3202      	adds	r2, #2
 800de82:	0092      	lsls	r2, r2, #2
 800de84:	f107 010c 	add.w	r1, r7, #12
 800de88:	300c      	adds	r0, #12
 800de8a:	f7fe fe0d 	bl	800caa8 <memcpy>
 800de8e:	2201      	movs	r2, #1
 800de90:	4629      	mov	r1, r5
 800de92:	4620      	mov	r0, r4
 800de94:	f000 fb20 	bl	800e4d8 <__lshift>
 800de98:	9b01      	ldr	r3, [sp, #4]
 800de9a:	f103 0901 	add.w	r9, r3, #1
 800de9e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800dea2:	4413      	add	r3, r2
 800dea4:	9305      	str	r3, [sp, #20]
 800dea6:	f00a 0301 	and.w	r3, sl, #1
 800deaa:	46b8      	mov	r8, r7
 800deac:	9304      	str	r3, [sp, #16]
 800deae:	4607      	mov	r7, r0
 800deb0:	4631      	mov	r1, r6
 800deb2:	ee18 0a10 	vmov	r0, s16
 800deb6:	f7ff fa77 	bl	800d3a8 <quorem>
 800deba:	4641      	mov	r1, r8
 800debc:	9002      	str	r0, [sp, #8]
 800debe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dec2:	ee18 0a10 	vmov	r0, s16
 800dec6:	f000 fb77 	bl	800e5b8 <__mcmp>
 800deca:	463a      	mov	r2, r7
 800decc:	9003      	str	r0, [sp, #12]
 800dece:	4631      	mov	r1, r6
 800ded0:	4620      	mov	r0, r4
 800ded2:	f000 fb8d 	bl	800e5f0 <__mdiff>
 800ded6:	68c2      	ldr	r2, [r0, #12]
 800ded8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800dedc:	4605      	mov	r5, r0
 800dede:	bb02      	cbnz	r2, 800df22 <_dtoa_r+0xa62>
 800dee0:	4601      	mov	r1, r0
 800dee2:	ee18 0a10 	vmov	r0, s16
 800dee6:	f000 fb67 	bl	800e5b8 <__mcmp>
 800deea:	4602      	mov	r2, r0
 800deec:	4629      	mov	r1, r5
 800deee:	4620      	mov	r0, r4
 800def0:	9207      	str	r2, [sp, #28]
 800def2:	f000 f91f 	bl	800e134 <_Bfree>
 800def6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800defa:	ea43 0102 	orr.w	r1, r3, r2
 800defe:	9b04      	ldr	r3, [sp, #16]
 800df00:	430b      	orrs	r3, r1
 800df02:	464d      	mov	r5, r9
 800df04:	d10f      	bne.n	800df26 <_dtoa_r+0xa66>
 800df06:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800df0a:	d02a      	beq.n	800df62 <_dtoa_r+0xaa2>
 800df0c:	9b03      	ldr	r3, [sp, #12]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	dd02      	ble.n	800df18 <_dtoa_r+0xa58>
 800df12:	9b02      	ldr	r3, [sp, #8]
 800df14:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800df18:	f88b a000 	strb.w	sl, [fp]
 800df1c:	e775      	b.n	800de0a <_dtoa_r+0x94a>
 800df1e:	4638      	mov	r0, r7
 800df20:	e7ba      	b.n	800de98 <_dtoa_r+0x9d8>
 800df22:	2201      	movs	r2, #1
 800df24:	e7e2      	b.n	800deec <_dtoa_r+0xa2c>
 800df26:	9b03      	ldr	r3, [sp, #12]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	db04      	blt.n	800df36 <_dtoa_r+0xa76>
 800df2c:	9906      	ldr	r1, [sp, #24]
 800df2e:	430b      	orrs	r3, r1
 800df30:	9904      	ldr	r1, [sp, #16]
 800df32:	430b      	orrs	r3, r1
 800df34:	d122      	bne.n	800df7c <_dtoa_r+0xabc>
 800df36:	2a00      	cmp	r2, #0
 800df38:	ddee      	ble.n	800df18 <_dtoa_r+0xa58>
 800df3a:	ee18 1a10 	vmov	r1, s16
 800df3e:	2201      	movs	r2, #1
 800df40:	4620      	mov	r0, r4
 800df42:	f000 fac9 	bl	800e4d8 <__lshift>
 800df46:	4631      	mov	r1, r6
 800df48:	ee08 0a10 	vmov	s16, r0
 800df4c:	f000 fb34 	bl	800e5b8 <__mcmp>
 800df50:	2800      	cmp	r0, #0
 800df52:	dc03      	bgt.n	800df5c <_dtoa_r+0xa9c>
 800df54:	d1e0      	bne.n	800df18 <_dtoa_r+0xa58>
 800df56:	f01a 0f01 	tst.w	sl, #1
 800df5a:	d0dd      	beq.n	800df18 <_dtoa_r+0xa58>
 800df5c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800df60:	d1d7      	bne.n	800df12 <_dtoa_r+0xa52>
 800df62:	2339      	movs	r3, #57	; 0x39
 800df64:	f88b 3000 	strb.w	r3, [fp]
 800df68:	462b      	mov	r3, r5
 800df6a:	461d      	mov	r5, r3
 800df6c:	3b01      	subs	r3, #1
 800df6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800df72:	2a39      	cmp	r2, #57	; 0x39
 800df74:	d071      	beq.n	800e05a <_dtoa_r+0xb9a>
 800df76:	3201      	adds	r2, #1
 800df78:	701a      	strb	r2, [r3, #0]
 800df7a:	e746      	b.n	800de0a <_dtoa_r+0x94a>
 800df7c:	2a00      	cmp	r2, #0
 800df7e:	dd07      	ble.n	800df90 <_dtoa_r+0xad0>
 800df80:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800df84:	d0ed      	beq.n	800df62 <_dtoa_r+0xaa2>
 800df86:	f10a 0301 	add.w	r3, sl, #1
 800df8a:	f88b 3000 	strb.w	r3, [fp]
 800df8e:	e73c      	b.n	800de0a <_dtoa_r+0x94a>
 800df90:	9b05      	ldr	r3, [sp, #20]
 800df92:	f809 ac01 	strb.w	sl, [r9, #-1]
 800df96:	4599      	cmp	r9, r3
 800df98:	d047      	beq.n	800e02a <_dtoa_r+0xb6a>
 800df9a:	ee18 1a10 	vmov	r1, s16
 800df9e:	2300      	movs	r3, #0
 800dfa0:	220a      	movs	r2, #10
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	f000 f8e8 	bl	800e178 <__multadd>
 800dfa8:	45b8      	cmp	r8, r7
 800dfaa:	ee08 0a10 	vmov	s16, r0
 800dfae:	f04f 0300 	mov.w	r3, #0
 800dfb2:	f04f 020a 	mov.w	r2, #10
 800dfb6:	4641      	mov	r1, r8
 800dfb8:	4620      	mov	r0, r4
 800dfba:	d106      	bne.n	800dfca <_dtoa_r+0xb0a>
 800dfbc:	f000 f8dc 	bl	800e178 <__multadd>
 800dfc0:	4680      	mov	r8, r0
 800dfc2:	4607      	mov	r7, r0
 800dfc4:	f109 0901 	add.w	r9, r9, #1
 800dfc8:	e772      	b.n	800deb0 <_dtoa_r+0x9f0>
 800dfca:	f000 f8d5 	bl	800e178 <__multadd>
 800dfce:	4639      	mov	r1, r7
 800dfd0:	4680      	mov	r8, r0
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	220a      	movs	r2, #10
 800dfd6:	4620      	mov	r0, r4
 800dfd8:	f000 f8ce 	bl	800e178 <__multadd>
 800dfdc:	4607      	mov	r7, r0
 800dfde:	e7f1      	b.n	800dfc4 <_dtoa_r+0xb04>
 800dfe0:	9b03      	ldr	r3, [sp, #12]
 800dfe2:	9302      	str	r3, [sp, #8]
 800dfe4:	9d01      	ldr	r5, [sp, #4]
 800dfe6:	ee18 0a10 	vmov	r0, s16
 800dfea:	4631      	mov	r1, r6
 800dfec:	f7ff f9dc 	bl	800d3a8 <quorem>
 800dff0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dff4:	9b01      	ldr	r3, [sp, #4]
 800dff6:	f805 ab01 	strb.w	sl, [r5], #1
 800dffa:	1aea      	subs	r2, r5, r3
 800dffc:	9b02      	ldr	r3, [sp, #8]
 800dffe:	4293      	cmp	r3, r2
 800e000:	dd09      	ble.n	800e016 <_dtoa_r+0xb56>
 800e002:	ee18 1a10 	vmov	r1, s16
 800e006:	2300      	movs	r3, #0
 800e008:	220a      	movs	r2, #10
 800e00a:	4620      	mov	r0, r4
 800e00c:	f000 f8b4 	bl	800e178 <__multadd>
 800e010:	ee08 0a10 	vmov	s16, r0
 800e014:	e7e7      	b.n	800dfe6 <_dtoa_r+0xb26>
 800e016:	9b02      	ldr	r3, [sp, #8]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	bfc8      	it	gt
 800e01c:	461d      	movgt	r5, r3
 800e01e:	9b01      	ldr	r3, [sp, #4]
 800e020:	bfd8      	it	le
 800e022:	2501      	movle	r5, #1
 800e024:	441d      	add	r5, r3
 800e026:	f04f 0800 	mov.w	r8, #0
 800e02a:	ee18 1a10 	vmov	r1, s16
 800e02e:	2201      	movs	r2, #1
 800e030:	4620      	mov	r0, r4
 800e032:	f000 fa51 	bl	800e4d8 <__lshift>
 800e036:	4631      	mov	r1, r6
 800e038:	ee08 0a10 	vmov	s16, r0
 800e03c:	f000 fabc 	bl	800e5b8 <__mcmp>
 800e040:	2800      	cmp	r0, #0
 800e042:	dc91      	bgt.n	800df68 <_dtoa_r+0xaa8>
 800e044:	d102      	bne.n	800e04c <_dtoa_r+0xb8c>
 800e046:	f01a 0f01 	tst.w	sl, #1
 800e04a:	d18d      	bne.n	800df68 <_dtoa_r+0xaa8>
 800e04c:	462b      	mov	r3, r5
 800e04e:	461d      	mov	r5, r3
 800e050:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e054:	2a30      	cmp	r2, #48	; 0x30
 800e056:	d0fa      	beq.n	800e04e <_dtoa_r+0xb8e>
 800e058:	e6d7      	b.n	800de0a <_dtoa_r+0x94a>
 800e05a:	9a01      	ldr	r2, [sp, #4]
 800e05c:	429a      	cmp	r2, r3
 800e05e:	d184      	bne.n	800df6a <_dtoa_r+0xaaa>
 800e060:	9b00      	ldr	r3, [sp, #0]
 800e062:	3301      	adds	r3, #1
 800e064:	9300      	str	r3, [sp, #0]
 800e066:	2331      	movs	r3, #49	; 0x31
 800e068:	7013      	strb	r3, [r2, #0]
 800e06a:	e6ce      	b.n	800de0a <_dtoa_r+0x94a>
 800e06c:	4b09      	ldr	r3, [pc, #36]	; (800e094 <_dtoa_r+0xbd4>)
 800e06e:	f7ff ba95 	b.w	800d59c <_dtoa_r+0xdc>
 800e072:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e074:	2b00      	cmp	r3, #0
 800e076:	f47f aa6e 	bne.w	800d556 <_dtoa_r+0x96>
 800e07a:	4b07      	ldr	r3, [pc, #28]	; (800e098 <_dtoa_r+0xbd8>)
 800e07c:	f7ff ba8e 	b.w	800d59c <_dtoa_r+0xdc>
 800e080:	9b02      	ldr	r3, [sp, #8]
 800e082:	2b00      	cmp	r3, #0
 800e084:	dcae      	bgt.n	800dfe4 <_dtoa_r+0xb24>
 800e086:	9b06      	ldr	r3, [sp, #24]
 800e088:	2b02      	cmp	r3, #2
 800e08a:	f73f aea8 	bgt.w	800ddde <_dtoa_r+0x91e>
 800e08e:	e7a9      	b.n	800dfe4 <_dtoa_r+0xb24>
 800e090:	0800f61f 	.word	0x0800f61f
 800e094:	0800f57c 	.word	0x0800f57c
 800e098:	0800f5a0 	.word	0x0800f5a0

0800e09c <_localeconv_r>:
 800e09c:	4800      	ldr	r0, [pc, #0]	; (800e0a0 <_localeconv_r+0x4>)
 800e09e:	4770      	bx	lr
 800e0a0:	200029ac 	.word	0x200029ac

0800e0a4 <malloc>:
 800e0a4:	4b02      	ldr	r3, [pc, #8]	; (800e0b0 <malloc+0xc>)
 800e0a6:	4601      	mov	r1, r0
 800e0a8:	6818      	ldr	r0, [r3, #0]
 800e0aa:	f000 bc09 	b.w	800e8c0 <_malloc_r>
 800e0ae:	bf00      	nop
 800e0b0:	20002858 	.word	0x20002858

0800e0b4 <_Balloc>:
 800e0b4:	b570      	push	{r4, r5, r6, lr}
 800e0b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e0b8:	4604      	mov	r4, r0
 800e0ba:	460d      	mov	r5, r1
 800e0bc:	b976      	cbnz	r6, 800e0dc <_Balloc+0x28>
 800e0be:	2010      	movs	r0, #16
 800e0c0:	f7ff fff0 	bl	800e0a4 <malloc>
 800e0c4:	4602      	mov	r2, r0
 800e0c6:	6260      	str	r0, [r4, #36]	; 0x24
 800e0c8:	b920      	cbnz	r0, 800e0d4 <_Balloc+0x20>
 800e0ca:	4b18      	ldr	r3, [pc, #96]	; (800e12c <_Balloc+0x78>)
 800e0cc:	4818      	ldr	r0, [pc, #96]	; (800e130 <_Balloc+0x7c>)
 800e0ce:	2166      	movs	r1, #102	; 0x66
 800e0d0:	f000 fc7a 	bl	800e9c8 <__assert_func>
 800e0d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e0d8:	6006      	str	r6, [r0, #0]
 800e0da:	60c6      	str	r6, [r0, #12]
 800e0dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e0de:	68f3      	ldr	r3, [r6, #12]
 800e0e0:	b183      	cbz	r3, 800e104 <_Balloc+0x50>
 800e0e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e0e4:	68db      	ldr	r3, [r3, #12]
 800e0e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e0ea:	b9b8      	cbnz	r0, 800e11c <_Balloc+0x68>
 800e0ec:	2101      	movs	r1, #1
 800e0ee:	fa01 f605 	lsl.w	r6, r1, r5
 800e0f2:	1d72      	adds	r2, r6, #5
 800e0f4:	0092      	lsls	r2, r2, #2
 800e0f6:	4620      	mov	r0, r4
 800e0f8:	f000 fb60 	bl	800e7bc <_calloc_r>
 800e0fc:	b160      	cbz	r0, 800e118 <_Balloc+0x64>
 800e0fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e102:	e00e      	b.n	800e122 <_Balloc+0x6e>
 800e104:	2221      	movs	r2, #33	; 0x21
 800e106:	2104      	movs	r1, #4
 800e108:	4620      	mov	r0, r4
 800e10a:	f000 fb57 	bl	800e7bc <_calloc_r>
 800e10e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e110:	60f0      	str	r0, [r6, #12]
 800e112:	68db      	ldr	r3, [r3, #12]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d1e4      	bne.n	800e0e2 <_Balloc+0x2e>
 800e118:	2000      	movs	r0, #0
 800e11a:	bd70      	pop	{r4, r5, r6, pc}
 800e11c:	6802      	ldr	r2, [r0, #0]
 800e11e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e122:	2300      	movs	r3, #0
 800e124:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e128:	e7f7      	b.n	800e11a <_Balloc+0x66>
 800e12a:	bf00      	nop
 800e12c:	0800f5ad 	.word	0x0800f5ad
 800e130:	0800f630 	.word	0x0800f630

0800e134 <_Bfree>:
 800e134:	b570      	push	{r4, r5, r6, lr}
 800e136:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e138:	4605      	mov	r5, r0
 800e13a:	460c      	mov	r4, r1
 800e13c:	b976      	cbnz	r6, 800e15c <_Bfree+0x28>
 800e13e:	2010      	movs	r0, #16
 800e140:	f7ff ffb0 	bl	800e0a4 <malloc>
 800e144:	4602      	mov	r2, r0
 800e146:	6268      	str	r0, [r5, #36]	; 0x24
 800e148:	b920      	cbnz	r0, 800e154 <_Bfree+0x20>
 800e14a:	4b09      	ldr	r3, [pc, #36]	; (800e170 <_Bfree+0x3c>)
 800e14c:	4809      	ldr	r0, [pc, #36]	; (800e174 <_Bfree+0x40>)
 800e14e:	218a      	movs	r1, #138	; 0x8a
 800e150:	f000 fc3a 	bl	800e9c8 <__assert_func>
 800e154:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e158:	6006      	str	r6, [r0, #0]
 800e15a:	60c6      	str	r6, [r0, #12]
 800e15c:	b13c      	cbz	r4, 800e16e <_Bfree+0x3a>
 800e15e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e160:	6862      	ldr	r2, [r4, #4]
 800e162:	68db      	ldr	r3, [r3, #12]
 800e164:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e168:	6021      	str	r1, [r4, #0]
 800e16a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e16e:	bd70      	pop	{r4, r5, r6, pc}
 800e170:	0800f5ad 	.word	0x0800f5ad
 800e174:	0800f630 	.word	0x0800f630

0800e178 <__multadd>:
 800e178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e17c:	690d      	ldr	r5, [r1, #16]
 800e17e:	4607      	mov	r7, r0
 800e180:	460c      	mov	r4, r1
 800e182:	461e      	mov	r6, r3
 800e184:	f101 0c14 	add.w	ip, r1, #20
 800e188:	2000      	movs	r0, #0
 800e18a:	f8dc 3000 	ldr.w	r3, [ip]
 800e18e:	b299      	uxth	r1, r3
 800e190:	fb02 6101 	mla	r1, r2, r1, r6
 800e194:	0c1e      	lsrs	r6, r3, #16
 800e196:	0c0b      	lsrs	r3, r1, #16
 800e198:	fb02 3306 	mla	r3, r2, r6, r3
 800e19c:	b289      	uxth	r1, r1
 800e19e:	3001      	adds	r0, #1
 800e1a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e1a4:	4285      	cmp	r5, r0
 800e1a6:	f84c 1b04 	str.w	r1, [ip], #4
 800e1aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e1ae:	dcec      	bgt.n	800e18a <__multadd+0x12>
 800e1b0:	b30e      	cbz	r6, 800e1f6 <__multadd+0x7e>
 800e1b2:	68a3      	ldr	r3, [r4, #8]
 800e1b4:	42ab      	cmp	r3, r5
 800e1b6:	dc19      	bgt.n	800e1ec <__multadd+0x74>
 800e1b8:	6861      	ldr	r1, [r4, #4]
 800e1ba:	4638      	mov	r0, r7
 800e1bc:	3101      	adds	r1, #1
 800e1be:	f7ff ff79 	bl	800e0b4 <_Balloc>
 800e1c2:	4680      	mov	r8, r0
 800e1c4:	b928      	cbnz	r0, 800e1d2 <__multadd+0x5a>
 800e1c6:	4602      	mov	r2, r0
 800e1c8:	4b0c      	ldr	r3, [pc, #48]	; (800e1fc <__multadd+0x84>)
 800e1ca:	480d      	ldr	r0, [pc, #52]	; (800e200 <__multadd+0x88>)
 800e1cc:	21b5      	movs	r1, #181	; 0xb5
 800e1ce:	f000 fbfb 	bl	800e9c8 <__assert_func>
 800e1d2:	6922      	ldr	r2, [r4, #16]
 800e1d4:	3202      	adds	r2, #2
 800e1d6:	f104 010c 	add.w	r1, r4, #12
 800e1da:	0092      	lsls	r2, r2, #2
 800e1dc:	300c      	adds	r0, #12
 800e1de:	f7fe fc63 	bl	800caa8 <memcpy>
 800e1e2:	4621      	mov	r1, r4
 800e1e4:	4638      	mov	r0, r7
 800e1e6:	f7ff ffa5 	bl	800e134 <_Bfree>
 800e1ea:	4644      	mov	r4, r8
 800e1ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e1f0:	3501      	adds	r5, #1
 800e1f2:	615e      	str	r6, [r3, #20]
 800e1f4:	6125      	str	r5, [r4, #16]
 800e1f6:	4620      	mov	r0, r4
 800e1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1fc:	0800f61f 	.word	0x0800f61f
 800e200:	0800f630 	.word	0x0800f630

0800e204 <__hi0bits>:
 800e204:	0c03      	lsrs	r3, r0, #16
 800e206:	041b      	lsls	r3, r3, #16
 800e208:	b9d3      	cbnz	r3, 800e240 <__hi0bits+0x3c>
 800e20a:	0400      	lsls	r0, r0, #16
 800e20c:	2310      	movs	r3, #16
 800e20e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e212:	bf04      	itt	eq
 800e214:	0200      	lsleq	r0, r0, #8
 800e216:	3308      	addeq	r3, #8
 800e218:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e21c:	bf04      	itt	eq
 800e21e:	0100      	lsleq	r0, r0, #4
 800e220:	3304      	addeq	r3, #4
 800e222:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e226:	bf04      	itt	eq
 800e228:	0080      	lsleq	r0, r0, #2
 800e22a:	3302      	addeq	r3, #2
 800e22c:	2800      	cmp	r0, #0
 800e22e:	db05      	blt.n	800e23c <__hi0bits+0x38>
 800e230:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e234:	f103 0301 	add.w	r3, r3, #1
 800e238:	bf08      	it	eq
 800e23a:	2320      	moveq	r3, #32
 800e23c:	4618      	mov	r0, r3
 800e23e:	4770      	bx	lr
 800e240:	2300      	movs	r3, #0
 800e242:	e7e4      	b.n	800e20e <__hi0bits+0xa>

0800e244 <__lo0bits>:
 800e244:	6803      	ldr	r3, [r0, #0]
 800e246:	f013 0207 	ands.w	r2, r3, #7
 800e24a:	4601      	mov	r1, r0
 800e24c:	d00b      	beq.n	800e266 <__lo0bits+0x22>
 800e24e:	07da      	lsls	r2, r3, #31
 800e250:	d423      	bmi.n	800e29a <__lo0bits+0x56>
 800e252:	0798      	lsls	r0, r3, #30
 800e254:	bf49      	itett	mi
 800e256:	085b      	lsrmi	r3, r3, #1
 800e258:	089b      	lsrpl	r3, r3, #2
 800e25a:	2001      	movmi	r0, #1
 800e25c:	600b      	strmi	r3, [r1, #0]
 800e25e:	bf5c      	itt	pl
 800e260:	600b      	strpl	r3, [r1, #0]
 800e262:	2002      	movpl	r0, #2
 800e264:	4770      	bx	lr
 800e266:	b298      	uxth	r0, r3
 800e268:	b9a8      	cbnz	r0, 800e296 <__lo0bits+0x52>
 800e26a:	0c1b      	lsrs	r3, r3, #16
 800e26c:	2010      	movs	r0, #16
 800e26e:	b2da      	uxtb	r2, r3
 800e270:	b90a      	cbnz	r2, 800e276 <__lo0bits+0x32>
 800e272:	3008      	adds	r0, #8
 800e274:	0a1b      	lsrs	r3, r3, #8
 800e276:	071a      	lsls	r2, r3, #28
 800e278:	bf04      	itt	eq
 800e27a:	091b      	lsreq	r3, r3, #4
 800e27c:	3004      	addeq	r0, #4
 800e27e:	079a      	lsls	r2, r3, #30
 800e280:	bf04      	itt	eq
 800e282:	089b      	lsreq	r3, r3, #2
 800e284:	3002      	addeq	r0, #2
 800e286:	07da      	lsls	r2, r3, #31
 800e288:	d403      	bmi.n	800e292 <__lo0bits+0x4e>
 800e28a:	085b      	lsrs	r3, r3, #1
 800e28c:	f100 0001 	add.w	r0, r0, #1
 800e290:	d005      	beq.n	800e29e <__lo0bits+0x5a>
 800e292:	600b      	str	r3, [r1, #0]
 800e294:	4770      	bx	lr
 800e296:	4610      	mov	r0, r2
 800e298:	e7e9      	b.n	800e26e <__lo0bits+0x2a>
 800e29a:	2000      	movs	r0, #0
 800e29c:	4770      	bx	lr
 800e29e:	2020      	movs	r0, #32
 800e2a0:	4770      	bx	lr
	...

0800e2a4 <__i2b>:
 800e2a4:	b510      	push	{r4, lr}
 800e2a6:	460c      	mov	r4, r1
 800e2a8:	2101      	movs	r1, #1
 800e2aa:	f7ff ff03 	bl	800e0b4 <_Balloc>
 800e2ae:	4602      	mov	r2, r0
 800e2b0:	b928      	cbnz	r0, 800e2be <__i2b+0x1a>
 800e2b2:	4b05      	ldr	r3, [pc, #20]	; (800e2c8 <__i2b+0x24>)
 800e2b4:	4805      	ldr	r0, [pc, #20]	; (800e2cc <__i2b+0x28>)
 800e2b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e2ba:	f000 fb85 	bl	800e9c8 <__assert_func>
 800e2be:	2301      	movs	r3, #1
 800e2c0:	6144      	str	r4, [r0, #20]
 800e2c2:	6103      	str	r3, [r0, #16]
 800e2c4:	bd10      	pop	{r4, pc}
 800e2c6:	bf00      	nop
 800e2c8:	0800f61f 	.word	0x0800f61f
 800e2cc:	0800f630 	.word	0x0800f630

0800e2d0 <__multiply>:
 800e2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2d4:	4691      	mov	r9, r2
 800e2d6:	690a      	ldr	r2, [r1, #16]
 800e2d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	bfb8      	it	lt
 800e2e0:	460b      	movlt	r3, r1
 800e2e2:	460c      	mov	r4, r1
 800e2e4:	bfbc      	itt	lt
 800e2e6:	464c      	movlt	r4, r9
 800e2e8:	4699      	movlt	r9, r3
 800e2ea:	6927      	ldr	r7, [r4, #16]
 800e2ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e2f0:	68a3      	ldr	r3, [r4, #8]
 800e2f2:	6861      	ldr	r1, [r4, #4]
 800e2f4:	eb07 060a 	add.w	r6, r7, sl
 800e2f8:	42b3      	cmp	r3, r6
 800e2fa:	b085      	sub	sp, #20
 800e2fc:	bfb8      	it	lt
 800e2fe:	3101      	addlt	r1, #1
 800e300:	f7ff fed8 	bl	800e0b4 <_Balloc>
 800e304:	b930      	cbnz	r0, 800e314 <__multiply+0x44>
 800e306:	4602      	mov	r2, r0
 800e308:	4b44      	ldr	r3, [pc, #272]	; (800e41c <__multiply+0x14c>)
 800e30a:	4845      	ldr	r0, [pc, #276]	; (800e420 <__multiply+0x150>)
 800e30c:	f240 115d 	movw	r1, #349	; 0x15d
 800e310:	f000 fb5a 	bl	800e9c8 <__assert_func>
 800e314:	f100 0514 	add.w	r5, r0, #20
 800e318:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e31c:	462b      	mov	r3, r5
 800e31e:	2200      	movs	r2, #0
 800e320:	4543      	cmp	r3, r8
 800e322:	d321      	bcc.n	800e368 <__multiply+0x98>
 800e324:	f104 0314 	add.w	r3, r4, #20
 800e328:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e32c:	f109 0314 	add.w	r3, r9, #20
 800e330:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e334:	9202      	str	r2, [sp, #8]
 800e336:	1b3a      	subs	r2, r7, r4
 800e338:	3a15      	subs	r2, #21
 800e33a:	f022 0203 	bic.w	r2, r2, #3
 800e33e:	3204      	adds	r2, #4
 800e340:	f104 0115 	add.w	r1, r4, #21
 800e344:	428f      	cmp	r7, r1
 800e346:	bf38      	it	cc
 800e348:	2204      	movcc	r2, #4
 800e34a:	9201      	str	r2, [sp, #4]
 800e34c:	9a02      	ldr	r2, [sp, #8]
 800e34e:	9303      	str	r3, [sp, #12]
 800e350:	429a      	cmp	r2, r3
 800e352:	d80c      	bhi.n	800e36e <__multiply+0x9e>
 800e354:	2e00      	cmp	r6, #0
 800e356:	dd03      	ble.n	800e360 <__multiply+0x90>
 800e358:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d05a      	beq.n	800e416 <__multiply+0x146>
 800e360:	6106      	str	r6, [r0, #16]
 800e362:	b005      	add	sp, #20
 800e364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e368:	f843 2b04 	str.w	r2, [r3], #4
 800e36c:	e7d8      	b.n	800e320 <__multiply+0x50>
 800e36e:	f8b3 a000 	ldrh.w	sl, [r3]
 800e372:	f1ba 0f00 	cmp.w	sl, #0
 800e376:	d024      	beq.n	800e3c2 <__multiply+0xf2>
 800e378:	f104 0e14 	add.w	lr, r4, #20
 800e37c:	46a9      	mov	r9, r5
 800e37e:	f04f 0c00 	mov.w	ip, #0
 800e382:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e386:	f8d9 1000 	ldr.w	r1, [r9]
 800e38a:	fa1f fb82 	uxth.w	fp, r2
 800e38e:	b289      	uxth	r1, r1
 800e390:	fb0a 110b 	mla	r1, sl, fp, r1
 800e394:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e398:	f8d9 2000 	ldr.w	r2, [r9]
 800e39c:	4461      	add	r1, ip
 800e39e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e3a2:	fb0a c20b 	mla	r2, sl, fp, ip
 800e3a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e3aa:	b289      	uxth	r1, r1
 800e3ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e3b0:	4577      	cmp	r7, lr
 800e3b2:	f849 1b04 	str.w	r1, [r9], #4
 800e3b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e3ba:	d8e2      	bhi.n	800e382 <__multiply+0xb2>
 800e3bc:	9a01      	ldr	r2, [sp, #4]
 800e3be:	f845 c002 	str.w	ip, [r5, r2]
 800e3c2:	9a03      	ldr	r2, [sp, #12]
 800e3c4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e3c8:	3304      	adds	r3, #4
 800e3ca:	f1b9 0f00 	cmp.w	r9, #0
 800e3ce:	d020      	beq.n	800e412 <__multiply+0x142>
 800e3d0:	6829      	ldr	r1, [r5, #0]
 800e3d2:	f104 0c14 	add.w	ip, r4, #20
 800e3d6:	46ae      	mov	lr, r5
 800e3d8:	f04f 0a00 	mov.w	sl, #0
 800e3dc:	f8bc b000 	ldrh.w	fp, [ip]
 800e3e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e3e4:	fb09 220b 	mla	r2, r9, fp, r2
 800e3e8:	4492      	add	sl, r2
 800e3ea:	b289      	uxth	r1, r1
 800e3ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e3f0:	f84e 1b04 	str.w	r1, [lr], #4
 800e3f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e3f8:	f8be 1000 	ldrh.w	r1, [lr]
 800e3fc:	0c12      	lsrs	r2, r2, #16
 800e3fe:	fb09 1102 	mla	r1, r9, r2, r1
 800e402:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e406:	4567      	cmp	r7, ip
 800e408:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e40c:	d8e6      	bhi.n	800e3dc <__multiply+0x10c>
 800e40e:	9a01      	ldr	r2, [sp, #4]
 800e410:	50a9      	str	r1, [r5, r2]
 800e412:	3504      	adds	r5, #4
 800e414:	e79a      	b.n	800e34c <__multiply+0x7c>
 800e416:	3e01      	subs	r6, #1
 800e418:	e79c      	b.n	800e354 <__multiply+0x84>
 800e41a:	bf00      	nop
 800e41c:	0800f61f 	.word	0x0800f61f
 800e420:	0800f630 	.word	0x0800f630

0800e424 <__pow5mult>:
 800e424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e428:	4615      	mov	r5, r2
 800e42a:	f012 0203 	ands.w	r2, r2, #3
 800e42e:	4606      	mov	r6, r0
 800e430:	460f      	mov	r7, r1
 800e432:	d007      	beq.n	800e444 <__pow5mult+0x20>
 800e434:	4c25      	ldr	r4, [pc, #148]	; (800e4cc <__pow5mult+0xa8>)
 800e436:	3a01      	subs	r2, #1
 800e438:	2300      	movs	r3, #0
 800e43a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e43e:	f7ff fe9b 	bl	800e178 <__multadd>
 800e442:	4607      	mov	r7, r0
 800e444:	10ad      	asrs	r5, r5, #2
 800e446:	d03d      	beq.n	800e4c4 <__pow5mult+0xa0>
 800e448:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e44a:	b97c      	cbnz	r4, 800e46c <__pow5mult+0x48>
 800e44c:	2010      	movs	r0, #16
 800e44e:	f7ff fe29 	bl	800e0a4 <malloc>
 800e452:	4602      	mov	r2, r0
 800e454:	6270      	str	r0, [r6, #36]	; 0x24
 800e456:	b928      	cbnz	r0, 800e464 <__pow5mult+0x40>
 800e458:	4b1d      	ldr	r3, [pc, #116]	; (800e4d0 <__pow5mult+0xac>)
 800e45a:	481e      	ldr	r0, [pc, #120]	; (800e4d4 <__pow5mult+0xb0>)
 800e45c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e460:	f000 fab2 	bl	800e9c8 <__assert_func>
 800e464:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e468:	6004      	str	r4, [r0, #0]
 800e46a:	60c4      	str	r4, [r0, #12]
 800e46c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e470:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e474:	b94c      	cbnz	r4, 800e48a <__pow5mult+0x66>
 800e476:	f240 2171 	movw	r1, #625	; 0x271
 800e47a:	4630      	mov	r0, r6
 800e47c:	f7ff ff12 	bl	800e2a4 <__i2b>
 800e480:	2300      	movs	r3, #0
 800e482:	f8c8 0008 	str.w	r0, [r8, #8]
 800e486:	4604      	mov	r4, r0
 800e488:	6003      	str	r3, [r0, #0]
 800e48a:	f04f 0900 	mov.w	r9, #0
 800e48e:	07eb      	lsls	r3, r5, #31
 800e490:	d50a      	bpl.n	800e4a8 <__pow5mult+0x84>
 800e492:	4639      	mov	r1, r7
 800e494:	4622      	mov	r2, r4
 800e496:	4630      	mov	r0, r6
 800e498:	f7ff ff1a 	bl	800e2d0 <__multiply>
 800e49c:	4639      	mov	r1, r7
 800e49e:	4680      	mov	r8, r0
 800e4a0:	4630      	mov	r0, r6
 800e4a2:	f7ff fe47 	bl	800e134 <_Bfree>
 800e4a6:	4647      	mov	r7, r8
 800e4a8:	106d      	asrs	r5, r5, #1
 800e4aa:	d00b      	beq.n	800e4c4 <__pow5mult+0xa0>
 800e4ac:	6820      	ldr	r0, [r4, #0]
 800e4ae:	b938      	cbnz	r0, 800e4c0 <__pow5mult+0x9c>
 800e4b0:	4622      	mov	r2, r4
 800e4b2:	4621      	mov	r1, r4
 800e4b4:	4630      	mov	r0, r6
 800e4b6:	f7ff ff0b 	bl	800e2d0 <__multiply>
 800e4ba:	6020      	str	r0, [r4, #0]
 800e4bc:	f8c0 9000 	str.w	r9, [r0]
 800e4c0:	4604      	mov	r4, r0
 800e4c2:	e7e4      	b.n	800e48e <__pow5mult+0x6a>
 800e4c4:	4638      	mov	r0, r7
 800e4c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4ca:	bf00      	nop
 800e4cc:	0800f780 	.word	0x0800f780
 800e4d0:	0800f5ad 	.word	0x0800f5ad
 800e4d4:	0800f630 	.word	0x0800f630

0800e4d8 <__lshift>:
 800e4d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4dc:	460c      	mov	r4, r1
 800e4de:	6849      	ldr	r1, [r1, #4]
 800e4e0:	6923      	ldr	r3, [r4, #16]
 800e4e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e4e6:	68a3      	ldr	r3, [r4, #8]
 800e4e8:	4607      	mov	r7, r0
 800e4ea:	4691      	mov	r9, r2
 800e4ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e4f0:	f108 0601 	add.w	r6, r8, #1
 800e4f4:	42b3      	cmp	r3, r6
 800e4f6:	db0b      	blt.n	800e510 <__lshift+0x38>
 800e4f8:	4638      	mov	r0, r7
 800e4fa:	f7ff fddb 	bl	800e0b4 <_Balloc>
 800e4fe:	4605      	mov	r5, r0
 800e500:	b948      	cbnz	r0, 800e516 <__lshift+0x3e>
 800e502:	4602      	mov	r2, r0
 800e504:	4b2a      	ldr	r3, [pc, #168]	; (800e5b0 <__lshift+0xd8>)
 800e506:	482b      	ldr	r0, [pc, #172]	; (800e5b4 <__lshift+0xdc>)
 800e508:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e50c:	f000 fa5c 	bl	800e9c8 <__assert_func>
 800e510:	3101      	adds	r1, #1
 800e512:	005b      	lsls	r3, r3, #1
 800e514:	e7ee      	b.n	800e4f4 <__lshift+0x1c>
 800e516:	2300      	movs	r3, #0
 800e518:	f100 0114 	add.w	r1, r0, #20
 800e51c:	f100 0210 	add.w	r2, r0, #16
 800e520:	4618      	mov	r0, r3
 800e522:	4553      	cmp	r3, sl
 800e524:	db37      	blt.n	800e596 <__lshift+0xbe>
 800e526:	6920      	ldr	r0, [r4, #16]
 800e528:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e52c:	f104 0314 	add.w	r3, r4, #20
 800e530:	f019 091f 	ands.w	r9, r9, #31
 800e534:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e538:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e53c:	d02f      	beq.n	800e59e <__lshift+0xc6>
 800e53e:	f1c9 0e20 	rsb	lr, r9, #32
 800e542:	468a      	mov	sl, r1
 800e544:	f04f 0c00 	mov.w	ip, #0
 800e548:	681a      	ldr	r2, [r3, #0]
 800e54a:	fa02 f209 	lsl.w	r2, r2, r9
 800e54e:	ea42 020c 	orr.w	r2, r2, ip
 800e552:	f84a 2b04 	str.w	r2, [sl], #4
 800e556:	f853 2b04 	ldr.w	r2, [r3], #4
 800e55a:	4298      	cmp	r0, r3
 800e55c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e560:	d8f2      	bhi.n	800e548 <__lshift+0x70>
 800e562:	1b03      	subs	r3, r0, r4
 800e564:	3b15      	subs	r3, #21
 800e566:	f023 0303 	bic.w	r3, r3, #3
 800e56a:	3304      	adds	r3, #4
 800e56c:	f104 0215 	add.w	r2, r4, #21
 800e570:	4290      	cmp	r0, r2
 800e572:	bf38      	it	cc
 800e574:	2304      	movcc	r3, #4
 800e576:	f841 c003 	str.w	ip, [r1, r3]
 800e57a:	f1bc 0f00 	cmp.w	ip, #0
 800e57e:	d001      	beq.n	800e584 <__lshift+0xac>
 800e580:	f108 0602 	add.w	r6, r8, #2
 800e584:	3e01      	subs	r6, #1
 800e586:	4638      	mov	r0, r7
 800e588:	612e      	str	r6, [r5, #16]
 800e58a:	4621      	mov	r1, r4
 800e58c:	f7ff fdd2 	bl	800e134 <_Bfree>
 800e590:	4628      	mov	r0, r5
 800e592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e596:	f842 0f04 	str.w	r0, [r2, #4]!
 800e59a:	3301      	adds	r3, #1
 800e59c:	e7c1      	b.n	800e522 <__lshift+0x4a>
 800e59e:	3904      	subs	r1, #4
 800e5a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800e5a8:	4298      	cmp	r0, r3
 800e5aa:	d8f9      	bhi.n	800e5a0 <__lshift+0xc8>
 800e5ac:	e7ea      	b.n	800e584 <__lshift+0xac>
 800e5ae:	bf00      	nop
 800e5b0:	0800f61f 	.word	0x0800f61f
 800e5b4:	0800f630 	.word	0x0800f630

0800e5b8 <__mcmp>:
 800e5b8:	b530      	push	{r4, r5, lr}
 800e5ba:	6902      	ldr	r2, [r0, #16]
 800e5bc:	690c      	ldr	r4, [r1, #16]
 800e5be:	1b12      	subs	r2, r2, r4
 800e5c0:	d10e      	bne.n	800e5e0 <__mcmp+0x28>
 800e5c2:	f100 0314 	add.w	r3, r0, #20
 800e5c6:	3114      	adds	r1, #20
 800e5c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e5cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e5d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e5d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e5d8:	42a5      	cmp	r5, r4
 800e5da:	d003      	beq.n	800e5e4 <__mcmp+0x2c>
 800e5dc:	d305      	bcc.n	800e5ea <__mcmp+0x32>
 800e5de:	2201      	movs	r2, #1
 800e5e0:	4610      	mov	r0, r2
 800e5e2:	bd30      	pop	{r4, r5, pc}
 800e5e4:	4283      	cmp	r3, r0
 800e5e6:	d3f3      	bcc.n	800e5d0 <__mcmp+0x18>
 800e5e8:	e7fa      	b.n	800e5e0 <__mcmp+0x28>
 800e5ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e5ee:	e7f7      	b.n	800e5e0 <__mcmp+0x28>

0800e5f0 <__mdiff>:
 800e5f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5f4:	460c      	mov	r4, r1
 800e5f6:	4606      	mov	r6, r0
 800e5f8:	4611      	mov	r1, r2
 800e5fa:	4620      	mov	r0, r4
 800e5fc:	4690      	mov	r8, r2
 800e5fe:	f7ff ffdb 	bl	800e5b8 <__mcmp>
 800e602:	1e05      	subs	r5, r0, #0
 800e604:	d110      	bne.n	800e628 <__mdiff+0x38>
 800e606:	4629      	mov	r1, r5
 800e608:	4630      	mov	r0, r6
 800e60a:	f7ff fd53 	bl	800e0b4 <_Balloc>
 800e60e:	b930      	cbnz	r0, 800e61e <__mdiff+0x2e>
 800e610:	4b3a      	ldr	r3, [pc, #232]	; (800e6fc <__mdiff+0x10c>)
 800e612:	4602      	mov	r2, r0
 800e614:	f240 2132 	movw	r1, #562	; 0x232
 800e618:	4839      	ldr	r0, [pc, #228]	; (800e700 <__mdiff+0x110>)
 800e61a:	f000 f9d5 	bl	800e9c8 <__assert_func>
 800e61e:	2301      	movs	r3, #1
 800e620:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e624:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e628:	bfa4      	itt	ge
 800e62a:	4643      	movge	r3, r8
 800e62c:	46a0      	movge	r8, r4
 800e62e:	4630      	mov	r0, r6
 800e630:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e634:	bfa6      	itte	ge
 800e636:	461c      	movge	r4, r3
 800e638:	2500      	movge	r5, #0
 800e63a:	2501      	movlt	r5, #1
 800e63c:	f7ff fd3a 	bl	800e0b4 <_Balloc>
 800e640:	b920      	cbnz	r0, 800e64c <__mdiff+0x5c>
 800e642:	4b2e      	ldr	r3, [pc, #184]	; (800e6fc <__mdiff+0x10c>)
 800e644:	4602      	mov	r2, r0
 800e646:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e64a:	e7e5      	b.n	800e618 <__mdiff+0x28>
 800e64c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e650:	6926      	ldr	r6, [r4, #16]
 800e652:	60c5      	str	r5, [r0, #12]
 800e654:	f104 0914 	add.w	r9, r4, #20
 800e658:	f108 0514 	add.w	r5, r8, #20
 800e65c:	f100 0e14 	add.w	lr, r0, #20
 800e660:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e664:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e668:	f108 0210 	add.w	r2, r8, #16
 800e66c:	46f2      	mov	sl, lr
 800e66e:	2100      	movs	r1, #0
 800e670:	f859 3b04 	ldr.w	r3, [r9], #4
 800e674:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e678:	fa1f f883 	uxth.w	r8, r3
 800e67c:	fa11 f18b 	uxtah	r1, r1, fp
 800e680:	0c1b      	lsrs	r3, r3, #16
 800e682:	eba1 0808 	sub.w	r8, r1, r8
 800e686:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e68a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e68e:	fa1f f888 	uxth.w	r8, r8
 800e692:	1419      	asrs	r1, r3, #16
 800e694:	454e      	cmp	r6, r9
 800e696:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e69a:	f84a 3b04 	str.w	r3, [sl], #4
 800e69e:	d8e7      	bhi.n	800e670 <__mdiff+0x80>
 800e6a0:	1b33      	subs	r3, r6, r4
 800e6a2:	3b15      	subs	r3, #21
 800e6a4:	f023 0303 	bic.w	r3, r3, #3
 800e6a8:	3304      	adds	r3, #4
 800e6aa:	3415      	adds	r4, #21
 800e6ac:	42a6      	cmp	r6, r4
 800e6ae:	bf38      	it	cc
 800e6b0:	2304      	movcc	r3, #4
 800e6b2:	441d      	add	r5, r3
 800e6b4:	4473      	add	r3, lr
 800e6b6:	469e      	mov	lr, r3
 800e6b8:	462e      	mov	r6, r5
 800e6ba:	4566      	cmp	r6, ip
 800e6bc:	d30e      	bcc.n	800e6dc <__mdiff+0xec>
 800e6be:	f10c 0203 	add.w	r2, ip, #3
 800e6c2:	1b52      	subs	r2, r2, r5
 800e6c4:	f022 0203 	bic.w	r2, r2, #3
 800e6c8:	3d03      	subs	r5, #3
 800e6ca:	45ac      	cmp	ip, r5
 800e6cc:	bf38      	it	cc
 800e6ce:	2200      	movcc	r2, #0
 800e6d0:	441a      	add	r2, r3
 800e6d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e6d6:	b17b      	cbz	r3, 800e6f8 <__mdiff+0x108>
 800e6d8:	6107      	str	r7, [r0, #16]
 800e6da:	e7a3      	b.n	800e624 <__mdiff+0x34>
 800e6dc:	f856 8b04 	ldr.w	r8, [r6], #4
 800e6e0:	fa11 f288 	uxtah	r2, r1, r8
 800e6e4:	1414      	asrs	r4, r2, #16
 800e6e6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e6ea:	b292      	uxth	r2, r2
 800e6ec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e6f0:	f84e 2b04 	str.w	r2, [lr], #4
 800e6f4:	1421      	asrs	r1, r4, #16
 800e6f6:	e7e0      	b.n	800e6ba <__mdiff+0xca>
 800e6f8:	3f01      	subs	r7, #1
 800e6fa:	e7ea      	b.n	800e6d2 <__mdiff+0xe2>
 800e6fc:	0800f61f 	.word	0x0800f61f
 800e700:	0800f630 	.word	0x0800f630

0800e704 <__d2b>:
 800e704:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e708:	4689      	mov	r9, r1
 800e70a:	2101      	movs	r1, #1
 800e70c:	ec57 6b10 	vmov	r6, r7, d0
 800e710:	4690      	mov	r8, r2
 800e712:	f7ff fccf 	bl	800e0b4 <_Balloc>
 800e716:	4604      	mov	r4, r0
 800e718:	b930      	cbnz	r0, 800e728 <__d2b+0x24>
 800e71a:	4602      	mov	r2, r0
 800e71c:	4b25      	ldr	r3, [pc, #148]	; (800e7b4 <__d2b+0xb0>)
 800e71e:	4826      	ldr	r0, [pc, #152]	; (800e7b8 <__d2b+0xb4>)
 800e720:	f240 310a 	movw	r1, #778	; 0x30a
 800e724:	f000 f950 	bl	800e9c8 <__assert_func>
 800e728:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e72c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e730:	bb35      	cbnz	r5, 800e780 <__d2b+0x7c>
 800e732:	2e00      	cmp	r6, #0
 800e734:	9301      	str	r3, [sp, #4]
 800e736:	d028      	beq.n	800e78a <__d2b+0x86>
 800e738:	4668      	mov	r0, sp
 800e73a:	9600      	str	r6, [sp, #0]
 800e73c:	f7ff fd82 	bl	800e244 <__lo0bits>
 800e740:	9900      	ldr	r1, [sp, #0]
 800e742:	b300      	cbz	r0, 800e786 <__d2b+0x82>
 800e744:	9a01      	ldr	r2, [sp, #4]
 800e746:	f1c0 0320 	rsb	r3, r0, #32
 800e74a:	fa02 f303 	lsl.w	r3, r2, r3
 800e74e:	430b      	orrs	r3, r1
 800e750:	40c2      	lsrs	r2, r0
 800e752:	6163      	str	r3, [r4, #20]
 800e754:	9201      	str	r2, [sp, #4]
 800e756:	9b01      	ldr	r3, [sp, #4]
 800e758:	61a3      	str	r3, [r4, #24]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	bf14      	ite	ne
 800e75e:	2202      	movne	r2, #2
 800e760:	2201      	moveq	r2, #1
 800e762:	6122      	str	r2, [r4, #16]
 800e764:	b1d5      	cbz	r5, 800e79c <__d2b+0x98>
 800e766:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e76a:	4405      	add	r5, r0
 800e76c:	f8c9 5000 	str.w	r5, [r9]
 800e770:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e774:	f8c8 0000 	str.w	r0, [r8]
 800e778:	4620      	mov	r0, r4
 800e77a:	b003      	add	sp, #12
 800e77c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e780:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e784:	e7d5      	b.n	800e732 <__d2b+0x2e>
 800e786:	6161      	str	r1, [r4, #20]
 800e788:	e7e5      	b.n	800e756 <__d2b+0x52>
 800e78a:	a801      	add	r0, sp, #4
 800e78c:	f7ff fd5a 	bl	800e244 <__lo0bits>
 800e790:	9b01      	ldr	r3, [sp, #4]
 800e792:	6163      	str	r3, [r4, #20]
 800e794:	2201      	movs	r2, #1
 800e796:	6122      	str	r2, [r4, #16]
 800e798:	3020      	adds	r0, #32
 800e79a:	e7e3      	b.n	800e764 <__d2b+0x60>
 800e79c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e7a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e7a4:	f8c9 0000 	str.w	r0, [r9]
 800e7a8:	6918      	ldr	r0, [r3, #16]
 800e7aa:	f7ff fd2b 	bl	800e204 <__hi0bits>
 800e7ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e7b2:	e7df      	b.n	800e774 <__d2b+0x70>
 800e7b4:	0800f61f 	.word	0x0800f61f
 800e7b8:	0800f630 	.word	0x0800f630

0800e7bc <_calloc_r>:
 800e7bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e7be:	fba1 2402 	umull	r2, r4, r1, r2
 800e7c2:	b94c      	cbnz	r4, 800e7d8 <_calloc_r+0x1c>
 800e7c4:	4611      	mov	r1, r2
 800e7c6:	9201      	str	r2, [sp, #4]
 800e7c8:	f000 f87a 	bl	800e8c0 <_malloc_r>
 800e7cc:	9a01      	ldr	r2, [sp, #4]
 800e7ce:	4605      	mov	r5, r0
 800e7d0:	b930      	cbnz	r0, 800e7e0 <_calloc_r+0x24>
 800e7d2:	4628      	mov	r0, r5
 800e7d4:	b003      	add	sp, #12
 800e7d6:	bd30      	pop	{r4, r5, pc}
 800e7d8:	220c      	movs	r2, #12
 800e7da:	6002      	str	r2, [r0, #0]
 800e7dc:	2500      	movs	r5, #0
 800e7de:	e7f8      	b.n	800e7d2 <_calloc_r+0x16>
 800e7e0:	4621      	mov	r1, r4
 800e7e2:	f7fe f96f 	bl	800cac4 <memset>
 800e7e6:	e7f4      	b.n	800e7d2 <_calloc_r+0x16>

0800e7e8 <_free_r>:
 800e7e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e7ea:	2900      	cmp	r1, #0
 800e7ec:	d044      	beq.n	800e878 <_free_r+0x90>
 800e7ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7f2:	9001      	str	r0, [sp, #4]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	f1a1 0404 	sub.w	r4, r1, #4
 800e7fa:	bfb8      	it	lt
 800e7fc:	18e4      	addlt	r4, r4, r3
 800e7fe:	f000 f925 	bl	800ea4c <__malloc_lock>
 800e802:	4a1e      	ldr	r2, [pc, #120]	; (800e87c <_free_r+0x94>)
 800e804:	9801      	ldr	r0, [sp, #4]
 800e806:	6813      	ldr	r3, [r2, #0]
 800e808:	b933      	cbnz	r3, 800e818 <_free_r+0x30>
 800e80a:	6063      	str	r3, [r4, #4]
 800e80c:	6014      	str	r4, [r2, #0]
 800e80e:	b003      	add	sp, #12
 800e810:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e814:	f000 b920 	b.w	800ea58 <__malloc_unlock>
 800e818:	42a3      	cmp	r3, r4
 800e81a:	d908      	bls.n	800e82e <_free_r+0x46>
 800e81c:	6825      	ldr	r5, [r4, #0]
 800e81e:	1961      	adds	r1, r4, r5
 800e820:	428b      	cmp	r3, r1
 800e822:	bf01      	itttt	eq
 800e824:	6819      	ldreq	r1, [r3, #0]
 800e826:	685b      	ldreq	r3, [r3, #4]
 800e828:	1949      	addeq	r1, r1, r5
 800e82a:	6021      	streq	r1, [r4, #0]
 800e82c:	e7ed      	b.n	800e80a <_free_r+0x22>
 800e82e:	461a      	mov	r2, r3
 800e830:	685b      	ldr	r3, [r3, #4]
 800e832:	b10b      	cbz	r3, 800e838 <_free_r+0x50>
 800e834:	42a3      	cmp	r3, r4
 800e836:	d9fa      	bls.n	800e82e <_free_r+0x46>
 800e838:	6811      	ldr	r1, [r2, #0]
 800e83a:	1855      	adds	r5, r2, r1
 800e83c:	42a5      	cmp	r5, r4
 800e83e:	d10b      	bne.n	800e858 <_free_r+0x70>
 800e840:	6824      	ldr	r4, [r4, #0]
 800e842:	4421      	add	r1, r4
 800e844:	1854      	adds	r4, r2, r1
 800e846:	42a3      	cmp	r3, r4
 800e848:	6011      	str	r1, [r2, #0]
 800e84a:	d1e0      	bne.n	800e80e <_free_r+0x26>
 800e84c:	681c      	ldr	r4, [r3, #0]
 800e84e:	685b      	ldr	r3, [r3, #4]
 800e850:	6053      	str	r3, [r2, #4]
 800e852:	4421      	add	r1, r4
 800e854:	6011      	str	r1, [r2, #0]
 800e856:	e7da      	b.n	800e80e <_free_r+0x26>
 800e858:	d902      	bls.n	800e860 <_free_r+0x78>
 800e85a:	230c      	movs	r3, #12
 800e85c:	6003      	str	r3, [r0, #0]
 800e85e:	e7d6      	b.n	800e80e <_free_r+0x26>
 800e860:	6825      	ldr	r5, [r4, #0]
 800e862:	1961      	adds	r1, r4, r5
 800e864:	428b      	cmp	r3, r1
 800e866:	bf04      	itt	eq
 800e868:	6819      	ldreq	r1, [r3, #0]
 800e86a:	685b      	ldreq	r3, [r3, #4]
 800e86c:	6063      	str	r3, [r4, #4]
 800e86e:	bf04      	itt	eq
 800e870:	1949      	addeq	r1, r1, r5
 800e872:	6021      	streq	r1, [r4, #0]
 800e874:	6054      	str	r4, [r2, #4]
 800e876:	e7ca      	b.n	800e80e <_free_r+0x26>
 800e878:	b003      	add	sp, #12
 800e87a:	bd30      	pop	{r4, r5, pc}
 800e87c:	200045cc 	.word	0x200045cc

0800e880 <sbrk_aligned>:
 800e880:	b570      	push	{r4, r5, r6, lr}
 800e882:	4e0e      	ldr	r6, [pc, #56]	; (800e8bc <sbrk_aligned+0x3c>)
 800e884:	460c      	mov	r4, r1
 800e886:	6831      	ldr	r1, [r6, #0]
 800e888:	4605      	mov	r5, r0
 800e88a:	b911      	cbnz	r1, 800e892 <sbrk_aligned+0x12>
 800e88c:	f000 f88c 	bl	800e9a8 <_sbrk_r>
 800e890:	6030      	str	r0, [r6, #0]
 800e892:	4621      	mov	r1, r4
 800e894:	4628      	mov	r0, r5
 800e896:	f000 f887 	bl	800e9a8 <_sbrk_r>
 800e89a:	1c43      	adds	r3, r0, #1
 800e89c:	d00a      	beq.n	800e8b4 <sbrk_aligned+0x34>
 800e89e:	1cc4      	adds	r4, r0, #3
 800e8a0:	f024 0403 	bic.w	r4, r4, #3
 800e8a4:	42a0      	cmp	r0, r4
 800e8a6:	d007      	beq.n	800e8b8 <sbrk_aligned+0x38>
 800e8a8:	1a21      	subs	r1, r4, r0
 800e8aa:	4628      	mov	r0, r5
 800e8ac:	f000 f87c 	bl	800e9a8 <_sbrk_r>
 800e8b0:	3001      	adds	r0, #1
 800e8b2:	d101      	bne.n	800e8b8 <sbrk_aligned+0x38>
 800e8b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	bd70      	pop	{r4, r5, r6, pc}
 800e8bc:	200045d0 	.word	0x200045d0

0800e8c0 <_malloc_r>:
 800e8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8c4:	1ccd      	adds	r5, r1, #3
 800e8c6:	f025 0503 	bic.w	r5, r5, #3
 800e8ca:	3508      	adds	r5, #8
 800e8cc:	2d0c      	cmp	r5, #12
 800e8ce:	bf38      	it	cc
 800e8d0:	250c      	movcc	r5, #12
 800e8d2:	2d00      	cmp	r5, #0
 800e8d4:	4607      	mov	r7, r0
 800e8d6:	db01      	blt.n	800e8dc <_malloc_r+0x1c>
 800e8d8:	42a9      	cmp	r1, r5
 800e8da:	d905      	bls.n	800e8e8 <_malloc_r+0x28>
 800e8dc:	230c      	movs	r3, #12
 800e8de:	603b      	str	r3, [r7, #0]
 800e8e0:	2600      	movs	r6, #0
 800e8e2:	4630      	mov	r0, r6
 800e8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8e8:	4e2e      	ldr	r6, [pc, #184]	; (800e9a4 <_malloc_r+0xe4>)
 800e8ea:	f000 f8af 	bl	800ea4c <__malloc_lock>
 800e8ee:	6833      	ldr	r3, [r6, #0]
 800e8f0:	461c      	mov	r4, r3
 800e8f2:	bb34      	cbnz	r4, 800e942 <_malloc_r+0x82>
 800e8f4:	4629      	mov	r1, r5
 800e8f6:	4638      	mov	r0, r7
 800e8f8:	f7ff ffc2 	bl	800e880 <sbrk_aligned>
 800e8fc:	1c43      	adds	r3, r0, #1
 800e8fe:	4604      	mov	r4, r0
 800e900:	d14d      	bne.n	800e99e <_malloc_r+0xde>
 800e902:	6834      	ldr	r4, [r6, #0]
 800e904:	4626      	mov	r6, r4
 800e906:	2e00      	cmp	r6, #0
 800e908:	d140      	bne.n	800e98c <_malloc_r+0xcc>
 800e90a:	6823      	ldr	r3, [r4, #0]
 800e90c:	4631      	mov	r1, r6
 800e90e:	4638      	mov	r0, r7
 800e910:	eb04 0803 	add.w	r8, r4, r3
 800e914:	f000 f848 	bl	800e9a8 <_sbrk_r>
 800e918:	4580      	cmp	r8, r0
 800e91a:	d13a      	bne.n	800e992 <_malloc_r+0xd2>
 800e91c:	6821      	ldr	r1, [r4, #0]
 800e91e:	3503      	adds	r5, #3
 800e920:	1a6d      	subs	r5, r5, r1
 800e922:	f025 0503 	bic.w	r5, r5, #3
 800e926:	3508      	adds	r5, #8
 800e928:	2d0c      	cmp	r5, #12
 800e92a:	bf38      	it	cc
 800e92c:	250c      	movcc	r5, #12
 800e92e:	4629      	mov	r1, r5
 800e930:	4638      	mov	r0, r7
 800e932:	f7ff ffa5 	bl	800e880 <sbrk_aligned>
 800e936:	3001      	adds	r0, #1
 800e938:	d02b      	beq.n	800e992 <_malloc_r+0xd2>
 800e93a:	6823      	ldr	r3, [r4, #0]
 800e93c:	442b      	add	r3, r5
 800e93e:	6023      	str	r3, [r4, #0]
 800e940:	e00e      	b.n	800e960 <_malloc_r+0xa0>
 800e942:	6822      	ldr	r2, [r4, #0]
 800e944:	1b52      	subs	r2, r2, r5
 800e946:	d41e      	bmi.n	800e986 <_malloc_r+0xc6>
 800e948:	2a0b      	cmp	r2, #11
 800e94a:	d916      	bls.n	800e97a <_malloc_r+0xba>
 800e94c:	1961      	adds	r1, r4, r5
 800e94e:	42a3      	cmp	r3, r4
 800e950:	6025      	str	r5, [r4, #0]
 800e952:	bf18      	it	ne
 800e954:	6059      	strne	r1, [r3, #4]
 800e956:	6863      	ldr	r3, [r4, #4]
 800e958:	bf08      	it	eq
 800e95a:	6031      	streq	r1, [r6, #0]
 800e95c:	5162      	str	r2, [r4, r5]
 800e95e:	604b      	str	r3, [r1, #4]
 800e960:	4638      	mov	r0, r7
 800e962:	f104 060b 	add.w	r6, r4, #11
 800e966:	f000 f877 	bl	800ea58 <__malloc_unlock>
 800e96a:	f026 0607 	bic.w	r6, r6, #7
 800e96e:	1d23      	adds	r3, r4, #4
 800e970:	1af2      	subs	r2, r6, r3
 800e972:	d0b6      	beq.n	800e8e2 <_malloc_r+0x22>
 800e974:	1b9b      	subs	r3, r3, r6
 800e976:	50a3      	str	r3, [r4, r2]
 800e978:	e7b3      	b.n	800e8e2 <_malloc_r+0x22>
 800e97a:	6862      	ldr	r2, [r4, #4]
 800e97c:	42a3      	cmp	r3, r4
 800e97e:	bf0c      	ite	eq
 800e980:	6032      	streq	r2, [r6, #0]
 800e982:	605a      	strne	r2, [r3, #4]
 800e984:	e7ec      	b.n	800e960 <_malloc_r+0xa0>
 800e986:	4623      	mov	r3, r4
 800e988:	6864      	ldr	r4, [r4, #4]
 800e98a:	e7b2      	b.n	800e8f2 <_malloc_r+0x32>
 800e98c:	4634      	mov	r4, r6
 800e98e:	6876      	ldr	r6, [r6, #4]
 800e990:	e7b9      	b.n	800e906 <_malloc_r+0x46>
 800e992:	230c      	movs	r3, #12
 800e994:	603b      	str	r3, [r7, #0]
 800e996:	4638      	mov	r0, r7
 800e998:	f000 f85e 	bl	800ea58 <__malloc_unlock>
 800e99c:	e7a1      	b.n	800e8e2 <_malloc_r+0x22>
 800e99e:	6025      	str	r5, [r4, #0]
 800e9a0:	e7de      	b.n	800e960 <_malloc_r+0xa0>
 800e9a2:	bf00      	nop
 800e9a4:	200045cc 	.word	0x200045cc

0800e9a8 <_sbrk_r>:
 800e9a8:	b538      	push	{r3, r4, r5, lr}
 800e9aa:	4d06      	ldr	r5, [pc, #24]	; (800e9c4 <_sbrk_r+0x1c>)
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	4604      	mov	r4, r0
 800e9b0:	4608      	mov	r0, r1
 800e9b2:	602b      	str	r3, [r5, #0]
 800e9b4:	f7f2 ffb4 	bl	8001920 <_sbrk>
 800e9b8:	1c43      	adds	r3, r0, #1
 800e9ba:	d102      	bne.n	800e9c2 <_sbrk_r+0x1a>
 800e9bc:	682b      	ldr	r3, [r5, #0]
 800e9be:	b103      	cbz	r3, 800e9c2 <_sbrk_r+0x1a>
 800e9c0:	6023      	str	r3, [r4, #0]
 800e9c2:	bd38      	pop	{r3, r4, r5, pc}
 800e9c4:	200045d4 	.word	0x200045d4

0800e9c8 <__assert_func>:
 800e9c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e9ca:	4614      	mov	r4, r2
 800e9cc:	461a      	mov	r2, r3
 800e9ce:	4b09      	ldr	r3, [pc, #36]	; (800e9f4 <__assert_func+0x2c>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	4605      	mov	r5, r0
 800e9d4:	68d8      	ldr	r0, [r3, #12]
 800e9d6:	b14c      	cbz	r4, 800e9ec <__assert_func+0x24>
 800e9d8:	4b07      	ldr	r3, [pc, #28]	; (800e9f8 <__assert_func+0x30>)
 800e9da:	9100      	str	r1, [sp, #0]
 800e9dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e9e0:	4906      	ldr	r1, [pc, #24]	; (800e9fc <__assert_func+0x34>)
 800e9e2:	462b      	mov	r3, r5
 800e9e4:	f000 f80e 	bl	800ea04 <fiprintf>
 800e9e8:	f000 fa64 	bl	800eeb4 <abort>
 800e9ec:	4b04      	ldr	r3, [pc, #16]	; (800ea00 <__assert_func+0x38>)
 800e9ee:	461c      	mov	r4, r3
 800e9f0:	e7f3      	b.n	800e9da <__assert_func+0x12>
 800e9f2:	bf00      	nop
 800e9f4:	20002858 	.word	0x20002858
 800e9f8:	0800f78c 	.word	0x0800f78c
 800e9fc:	0800f799 	.word	0x0800f799
 800ea00:	0800f7c7 	.word	0x0800f7c7

0800ea04 <fiprintf>:
 800ea04:	b40e      	push	{r1, r2, r3}
 800ea06:	b503      	push	{r0, r1, lr}
 800ea08:	4601      	mov	r1, r0
 800ea0a:	ab03      	add	r3, sp, #12
 800ea0c:	4805      	ldr	r0, [pc, #20]	; (800ea24 <fiprintf+0x20>)
 800ea0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea12:	6800      	ldr	r0, [r0, #0]
 800ea14:	9301      	str	r3, [sp, #4]
 800ea16:	f000 f84f 	bl	800eab8 <_vfiprintf_r>
 800ea1a:	b002      	add	sp, #8
 800ea1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea20:	b003      	add	sp, #12
 800ea22:	4770      	bx	lr
 800ea24:	20002858 	.word	0x20002858

0800ea28 <__ascii_mbtowc>:
 800ea28:	b082      	sub	sp, #8
 800ea2a:	b901      	cbnz	r1, 800ea2e <__ascii_mbtowc+0x6>
 800ea2c:	a901      	add	r1, sp, #4
 800ea2e:	b142      	cbz	r2, 800ea42 <__ascii_mbtowc+0x1a>
 800ea30:	b14b      	cbz	r3, 800ea46 <__ascii_mbtowc+0x1e>
 800ea32:	7813      	ldrb	r3, [r2, #0]
 800ea34:	600b      	str	r3, [r1, #0]
 800ea36:	7812      	ldrb	r2, [r2, #0]
 800ea38:	1e10      	subs	r0, r2, #0
 800ea3a:	bf18      	it	ne
 800ea3c:	2001      	movne	r0, #1
 800ea3e:	b002      	add	sp, #8
 800ea40:	4770      	bx	lr
 800ea42:	4610      	mov	r0, r2
 800ea44:	e7fb      	b.n	800ea3e <__ascii_mbtowc+0x16>
 800ea46:	f06f 0001 	mvn.w	r0, #1
 800ea4a:	e7f8      	b.n	800ea3e <__ascii_mbtowc+0x16>

0800ea4c <__malloc_lock>:
 800ea4c:	4801      	ldr	r0, [pc, #4]	; (800ea54 <__malloc_lock+0x8>)
 800ea4e:	f000 bbf1 	b.w	800f234 <__retarget_lock_acquire_recursive>
 800ea52:	bf00      	nop
 800ea54:	200045d8 	.word	0x200045d8

0800ea58 <__malloc_unlock>:
 800ea58:	4801      	ldr	r0, [pc, #4]	; (800ea60 <__malloc_unlock+0x8>)
 800ea5a:	f000 bbec 	b.w	800f236 <__retarget_lock_release_recursive>
 800ea5e:	bf00      	nop
 800ea60:	200045d8 	.word	0x200045d8

0800ea64 <__sfputc_r>:
 800ea64:	6893      	ldr	r3, [r2, #8]
 800ea66:	3b01      	subs	r3, #1
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	b410      	push	{r4}
 800ea6c:	6093      	str	r3, [r2, #8]
 800ea6e:	da08      	bge.n	800ea82 <__sfputc_r+0x1e>
 800ea70:	6994      	ldr	r4, [r2, #24]
 800ea72:	42a3      	cmp	r3, r4
 800ea74:	db01      	blt.n	800ea7a <__sfputc_r+0x16>
 800ea76:	290a      	cmp	r1, #10
 800ea78:	d103      	bne.n	800ea82 <__sfputc_r+0x1e>
 800ea7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea7e:	f000 b94b 	b.w	800ed18 <__swbuf_r>
 800ea82:	6813      	ldr	r3, [r2, #0]
 800ea84:	1c58      	adds	r0, r3, #1
 800ea86:	6010      	str	r0, [r2, #0]
 800ea88:	7019      	strb	r1, [r3, #0]
 800ea8a:	4608      	mov	r0, r1
 800ea8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea90:	4770      	bx	lr

0800ea92 <__sfputs_r>:
 800ea92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea94:	4606      	mov	r6, r0
 800ea96:	460f      	mov	r7, r1
 800ea98:	4614      	mov	r4, r2
 800ea9a:	18d5      	adds	r5, r2, r3
 800ea9c:	42ac      	cmp	r4, r5
 800ea9e:	d101      	bne.n	800eaa4 <__sfputs_r+0x12>
 800eaa0:	2000      	movs	r0, #0
 800eaa2:	e007      	b.n	800eab4 <__sfputs_r+0x22>
 800eaa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eaa8:	463a      	mov	r2, r7
 800eaaa:	4630      	mov	r0, r6
 800eaac:	f7ff ffda 	bl	800ea64 <__sfputc_r>
 800eab0:	1c43      	adds	r3, r0, #1
 800eab2:	d1f3      	bne.n	800ea9c <__sfputs_r+0xa>
 800eab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eab8 <_vfiprintf_r>:
 800eab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eabc:	460d      	mov	r5, r1
 800eabe:	b09d      	sub	sp, #116	; 0x74
 800eac0:	4614      	mov	r4, r2
 800eac2:	4698      	mov	r8, r3
 800eac4:	4606      	mov	r6, r0
 800eac6:	b118      	cbz	r0, 800ead0 <_vfiprintf_r+0x18>
 800eac8:	6983      	ldr	r3, [r0, #24]
 800eaca:	b90b      	cbnz	r3, 800ead0 <_vfiprintf_r+0x18>
 800eacc:	f000 fb14 	bl	800f0f8 <__sinit>
 800ead0:	4b89      	ldr	r3, [pc, #548]	; (800ecf8 <_vfiprintf_r+0x240>)
 800ead2:	429d      	cmp	r5, r3
 800ead4:	d11b      	bne.n	800eb0e <_vfiprintf_r+0x56>
 800ead6:	6875      	ldr	r5, [r6, #4]
 800ead8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eada:	07d9      	lsls	r1, r3, #31
 800eadc:	d405      	bmi.n	800eaea <_vfiprintf_r+0x32>
 800eade:	89ab      	ldrh	r3, [r5, #12]
 800eae0:	059a      	lsls	r2, r3, #22
 800eae2:	d402      	bmi.n	800eaea <_vfiprintf_r+0x32>
 800eae4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eae6:	f000 fba5 	bl	800f234 <__retarget_lock_acquire_recursive>
 800eaea:	89ab      	ldrh	r3, [r5, #12]
 800eaec:	071b      	lsls	r3, r3, #28
 800eaee:	d501      	bpl.n	800eaf4 <_vfiprintf_r+0x3c>
 800eaf0:	692b      	ldr	r3, [r5, #16]
 800eaf2:	b9eb      	cbnz	r3, 800eb30 <_vfiprintf_r+0x78>
 800eaf4:	4629      	mov	r1, r5
 800eaf6:	4630      	mov	r0, r6
 800eaf8:	f000 f96e 	bl	800edd8 <__swsetup_r>
 800eafc:	b1c0      	cbz	r0, 800eb30 <_vfiprintf_r+0x78>
 800eafe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb00:	07dc      	lsls	r4, r3, #31
 800eb02:	d50e      	bpl.n	800eb22 <_vfiprintf_r+0x6a>
 800eb04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb08:	b01d      	add	sp, #116	; 0x74
 800eb0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb0e:	4b7b      	ldr	r3, [pc, #492]	; (800ecfc <_vfiprintf_r+0x244>)
 800eb10:	429d      	cmp	r5, r3
 800eb12:	d101      	bne.n	800eb18 <_vfiprintf_r+0x60>
 800eb14:	68b5      	ldr	r5, [r6, #8]
 800eb16:	e7df      	b.n	800ead8 <_vfiprintf_r+0x20>
 800eb18:	4b79      	ldr	r3, [pc, #484]	; (800ed00 <_vfiprintf_r+0x248>)
 800eb1a:	429d      	cmp	r5, r3
 800eb1c:	bf08      	it	eq
 800eb1e:	68f5      	ldreq	r5, [r6, #12]
 800eb20:	e7da      	b.n	800ead8 <_vfiprintf_r+0x20>
 800eb22:	89ab      	ldrh	r3, [r5, #12]
 800eb24:	0598      	lsls	r0, r3, #22
 800eb26:	d4ed      	bmi.n	800eb04 <_vfiprintf_r+0x4c>
 800eb28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb2a:	f000 fb84 	bl	800f236 <__retarget_lock_release_recursive>
 800eb2e:	e7e9      	b.n	800eb04 <_vfiprintf_r+0x4c>
 800eb30:	2300      	movs	r3, #0
 800eb32:	9309      	str	r3, [sp, #36]	; 0x24
 800eb34:	2320      	movs	r3, #32
 800eb36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eb3a:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb3e:	2330      	movs	r3, #48	; 0x30
 800eb40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ed04 <_vfiprintf_r+0x24c>
 800eb44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eb48:	f04f 0901 	mov.w	r9, #1
 800eb4c:	4623      	mov	r3, r4
 800eb4e:	469a      	mov	sl, r3
 800eb50:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb54:	b10a      	cbz	r2, 800eb5a <_vfiprintf_r+0xa2>
 800eb56:	2a25      	cmp	r2, #37	; 0x25
 800eb58:	d1f9      	bne.n	800eb4e <_vfiprintf_r+0x96>
 800eb5a:	ebba 0b04 	subs.w	fp, sl, r4
 800eb5e:	d00b      	beq.n	800eb78 <_vfiprintf_r+0xc0>
 800eb60:	465b      	mov	r3, fp
 800eb62:	4622      	mov	r2, r4
 800eb64:	4629      	mov	r1, r5
 800eb66:	4630      	mov	r0, r6
 800eb68:	f7ff ff93 	bl	800ea92 <__sfputs_r>
 800eb6c:	3001      	adds	r0, #1
 800eb6e:	f000 80aa 	beq.w	800ecc6 <_vfiprintf_r+0x20e>
 800eb72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb74:	445a      	add	r2, fp
 800eb76:	9209      	str	r2, [sp, #36]	; 0x24
 800eb78:	f89a 3000 	ldrb.w	r3, [sl]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	f000 80a2 	beq.w	800ecc6 <_vfiprintf_r+0x20e>
 800eb82:	2300      	movs	r3, #0
 800eb84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eb88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb8c:	f10a 0a01 	add.w	sl, sl, #1
 800eb90:	9304      	str	r3, [sp, #16]
 800eb92:	9307      	str	r3, [sp, #28]
 800eb94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb98:	931a      	str	r3, [sp, #104]	; 0x68
 800eb9a:	4654      	mov	r4, sl
 800eb9c:	2205      	movs	r2, #5
 800eb9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eba2:	4858      	ldr	r0, [pc, #352]	; (800ed04 <_vfiprintf_r+0x24c>)
 800eba4:	f7f1 fb44 	bl	8000230 <memchr>
 800eba8:	9a04      	ldr	r2, [sp, #16]
 800ebaa:	b9d8      	cbnz	r0, 800ebe4 <_vfiprintf_r+0x12c>
 800ebac:	06d1      	lsls	r1, r2, #27
 800ebae:	bf44      	itt	mi
 800ebb0:	2320      	movmi	r3, #32
 800ebb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ebb6:	0713      	lsls	r3, r2, #28
 800ebb8:	bf44      	itt	mi
 800ebba:	232b      	movmi	r3, #43	; 0x2b
 800ebbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ebc0:	f89a 3000 	ldrb.w	r3, [sl]
 800ebc4:	2b2a      	cmp	r3, #42	; 0x2a
 800ebc6:	d015      	beq.n	800ebf4 <_vfiprintf_r+0x13c>
 800ebc8:	9a07      	ldr	r2, [sp, #28]
 800ebca:	4654      	mov	r4, sl
 800ebcc:	2000      	movs	r0, #0
 800ebce:	f04f 0c0a 	mov.w	ip, #10
 800ebd2:	4621      	mov	r1, r4
 800ebd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ebd8:	3b30      	subs	r3, #48	; 0x30
 800ebda:	2b09      	cmp	r3, #9
 800ebdc:	d94e      	bls.n	800ec7c <_vfiprintf_r+0x1c4>
 800ebde:	b1b0      	cbz	r0, 800ec0e <_vfiprintf_r+0x156>
 800ebe0:	9207      	str	r2, [sp, #28]
 800ebe2:	e014      	b.n	800ec0e <_vfiprintf_r+0x156>
 800ebe4:	eba0 0308 	sub.w	r3, r0, r8
 800ebe8:	fa09 f303 	lsl.w	r3, r9, r3
 800ebec:	4313      	orrs	r3, r2
 800ebee:	9304      	str	r3, [sp, #16]
 800ebf0:	46a2      	mov	sl, r4
 800ebf2:	e7d2      	b.n	800eb9a <_vfiprintf_r+0xe2>
 800ebf4:	9b03      	ldr	r3, [sp, #12]
 800ebf6:	1d19      	adds	r1, r3, #4
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	9103      	str	r1, [sp, #12]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	bfbb      	ittet	lt
 800ec00:	425b      	neglt	r3, r3
 800ec02:	f042 0202 	orrlt.w	r2, r2, #2
 800ec06:	9307      	strge	r3, [sp, #28]
 800ec08:	9307      	strlt	r3, [sp, #28]
 800ec0a:	bfb8      	it	lt
 800ec0c:	9204      	strlt	r2, [sp, #16]
 800ec0e:	7823      	ldrb	r3, [r4, #0]
 800ec10:	2b2e      	cmp	r3, #46	; 0x2e
 800ec12:	d10c      	bne.n	800ec2e <_vfiprintf_r+0x176>
 800ec14:	7863      	ldrb	r3, [r4, #1]
 800ec16:	2b2a      	cmp	r3, #42	; 0x2a
 800ec18:	d135      	bne.n	800ec86 <_vfiprintf_r+0x1ce>
 800ec1a:	9b03      	ldr	r3, [sp, #12]
 800ec1c:	1d1a      	adds	r2, r3, #4
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	9203      	str	r2, [sp, #12]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	bfb8      	it	lt
 800ec26:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ec2a:	3402      	adds	r4, #2
 800ec2c:	9305      	str	r3, [sp, #20]
 800ec2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ed14 <_vfiprintf_r+0x25c>
 800ec32:	7821      	ldrb	r1, [r4, #0]
 800ec34:	2203      	movs	r2, #3
 800ec36:	4650      	mov	r0, sl
 800ec38:	f7f1 fafa 	bl	8000230 <memchr>
 800ec3c:	b140      	cbz	r0, 800ec50 <_vfiprintf_r+0x198>
 800ec3e:	2340      	movs	r3, #64	; 0x40
 800ec40:	eba0 000a 	sub.w	r0, r0, sl
 800ec44:	fa03 f000 	lsl.w	r0, r3, r0
 800ec48:	9b04      	ldr	r3, [sp, #16]
 800ec4a:	4303      	orrs	r3, r0
 800ec4c:	3401      	adds	r4, #1
 800ec4e:	9304      	str	r3, [sp, #16]
 800ec50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec54:	482c      	ldr	r0, [pc, #176]	; (800ed08 <_vfiprintf_r+0x250>)
 800ec56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ec5a:	2206      	movs	r2, #6
 800ec5c:	f7f1 fae8 	bl	8000230 <memchr>
 800ec60:	2800      	cmp	r0, #0
 800ec62:	d03f      	beq.n	800ece4 <_vfiprintf_r+0x22c>
 800ec64:	4b29      	ldr	r3, [pc, #164]	; (800ed0c <_vfiprintf_r+0x254>)
 800ec66:	bb1b      	cbnz	r3, 800ecb0 <_vfiprintf_r+0x1f8>
 800ec68:	9b03      	ldr	r3, [sp, #12]
 800ec6a:	3307      	adds	r3, #7
 800ec6c:	f023 0307 	bic.w	r3, r3, #7
 800ec70:	3308      	adds	r3, #8
 800ec72:	9303      	str	r3, [sp, #12]
 800ec74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec76:	443b      	add	r3, r7
 800ec78:	9309      	str	r3, [sp, #36]	; 0x24
 800ec7a:	e767      	b.n	800eb4c <_vfiprintf_r+0x94>
 800ec7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec80:	460c      	mov	r4, r1
 800ec82:	2001      	movs	r0, #1
 800ec84:	e7a5      	b.n	800ebd2 <_vfiprintf_r+0x11a>
 800ec86:	2300      	movs	r3, #0
 800ec88:	3401      	adds	r4, #1
 800ec8a:	9305      	str	r3, [sp, #20]
 800ec8c:	4619      	mov	r1, r3
 800ec8e:	f04f 0c0a 	mov.w	ip, #10
 800ec92:	4620      	mov	r0, r4
 800ec94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec98:	3a30      	subs	r2, #48	; 0x30
 800ec9a:	2a09      	cmp	r2, #9
 800ec9c:	d903      	bls.n	800eca6 <_vfiprintf_r+0x1ee>
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d0c5      	beq.n	800ec2e <_vfiprintf_r+0x176>
 800eca2:	9105      	str	r1, [sp, #20]
 800eca4:	e7c3      	b.n	800ec2e <_vfiprintf_r+0x176>
 800eca6:	fb0c 2101 	mla	r1, ip, r1, r2
 800ecaa:	4604      	mov	r4, r0
 800ecac:	2301      	movs	r3, #1
 800ecae:	e7f0      	b.n	800ec92 <_vfiprintf_r+0x1da>
 800ecb0:	ab03      	add	r3, sp, #12
 800ecb2:	9300      	str	r3, [sp, #0]
 800ecb4:	462a      	mov	r2, r5
 800ecb6:	4b16      	ldr	r3, [pc, #88]	; (800ed10 <_vfiprintf_r+0x258>)
 800ecb8:	a904      	add	r1, sp, #16
 800ecba:	4630      	mov	r0, r6
 800ecbc:	f7fd ffaa 	bl	800cc14 <_printf_float>
 800ecc0:	4607      	mov	r7, r0
 800ecc2:	1c78      	adds	r0, r7, #1
 800ecc4:	d1d6      	bne.n	800ec74 <_vfiprintf_r+0x1bc>
 800ecc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ecc8:	07d9      	lsls	r1, r3, #31
 800ecca:	d405      	bmi.n	800ecd8 <_vfiprintf_r+0x220>
 800eccc:	89ab      	ldrh	r3, [r5, #12]
 800ecce:	059a      	lsls	r2, r3, #22
 800ecd0:	d402      	bmi.n	800ecd8 <_vfiprintf_r+0x220>
 800ecd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ecd4:	f000 faaf 	bl	800f236 <__retarget_lock_release_recursive>
 800ecd8:	89ab      	ldrh	r3, [r5, #12]
 800ecda:	065b      	lsls	r3, r3, #25
 800ecdc:	f53f af12 	bmi.w	800eb04 <_vfiprintf_r+0x4c>
 800ece0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ece2:	e711      	b.n	800eb08 <_vfiprintf_r+0x50>
 800ece4:	ab03      	add	r3, sp, #12
 800ece6:	9300      	str	r3, [sp, #0]
 800ece8:	462a      	mov	r2, r5
 800ecea:	4b09      	ldr	r3, [pc, #36]	; (800ed10 <_vfiprintf_r+0x258>)
 800ecec:	a904      	add	r1, sp, #16
 800ecee:	4630      	mov	r0, r6
 800ecf0:	f7fe fa34 	bl	800d15c <_printf_i>
 800ecf4:	e7e4      	b.n	800ecc0 <_vfiprintf_r+0x208>
 800ecf6:	bf00      	nop
 800ecf8:	0800f904 	.word	0x0800f904
 800ecfc:	0800f924 	.word	0x0800f924
 800ed00:	0800f8e4 	.word	0x0800f8e4
 800ed04:	0800f7d2 	.word	0x0800f7d2
 800ed08:	0800f7dc 	.word	0x0800f7dc
 800ed0c:	0800cc15 	.word	0x0800cc15
 800ed10:	0800ea93 	.word	0x0800ea93
 800ed14:	0800f7d8 	.word	0x0800f7d8

0800ed18 <__swbuf_r>:
 800ed18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed1a:	460e      	mov	r6, r1
 800ed1c:	4614      	mov	r4, r2
 800ed1e:	4605      	mov	r5, r0
 800ed20:	b118      	cbz	r0, 800ed2a <__swbuf_r+0x12>
 800ed22:	6983      	ldr	r3, [r0, #24]
 800ed24:	b90b      	cbnz	r3, 800ed2a <__swbuf_r+0x12>
 800ed26:	f000 f9e7 	bl	800f0f8 <__sinit>
 800ed2a:	4b21      	ldr	r3, [pc, #132]	; (800edb0 <__swbuf_r+0x98>)
 800ed2c:	429c      	cmp	r4, r3
 800ed2e:	d12b      	bne.n	800ed88 <__swbuf_r+0x70>
 800ed30:	686c      	ldr	r4, [r5, #4]
 800ed32:	69a3      	ldr	r3, [r4, #24]
 800ed34:	60a3      	str	r3, [r4, #8]
 800ed36:	89a3      	ldrh	r3, [r4, #12]
 800ed38:	071a      	lsls	r2, r3, #28
 800ed3a:	d52f      	bpl.n	800ed9c <__swbuf_r+0x84>
 800ed3c:	6923      	ldr	r3, [r4, #16]
 800ed3e:	b36b      	cbz	r3, 800ed9c <__swbuf_r+0x84>
 800ed40:	6923      	ldr	r3, [r4, #16]
 800ed42:	6820      	ldr	r0, [r4, #0]
 800ed44:	1ac0      	subs	r0, r0, r3
 800ed46:	6963      	ldr	r3, [r4, #20]
 800ed48:	b2f6      	uxtb	r6, r6
 800ed4a:	4283      	cmp	r3, r0
 800ed4c:	4637      	mov	r7, r6
 800ed4e:	dc04      	bgt.n	800ed5a <__swbuf_r+0x42>
 800ed50:	4621      	mov	r1, r4
 800ed52:	4628      	mov	r0, r5
 800ed54:	f000 f93c 	bl	800efd0 <_fflush_r>
 800ed58:	bb30      	cbnz	r0, 800eda8 <__swbuf_r+0x90>
 800ed5a:	68a3      	ldr	r3, [r4, #8]
 800ed5c:	3b01      	subs	r3, #1
 800ed5e:	60a3      	str	r3, [r4, #8]
 800ed60:	6823      	ldr	r3, [r4, #0]
 800ed62:	1c5a      	adds	r2, r3, #1
 800ed64:	6022      	str	r2, [r4, #0]
 800ed66:	701e      	strb	r6, [r3, #0]
 800ed68:	6963      	ldr	r3, [r4, #20]
 800ed6a:	3001      	adds	r0, #1
 800ed6c:	4283      	cmp	r3, r0
 800ed6e:	d004      	beq.n	800ed7a <__swbuf_r+0x62>
 800ed70:	89a3      	ldrh	r3, [r4, #12]
 800ed72:	07db      	lsls	r3, r3, #31
 800ed74:	d506      	bpl.n	800ed84 <__swbuf_r+0x6c>
 800ed76:	2e0a      	cmp	r6, #10
 800ed78:	d104      	bne.n	800ed84 <__swbuf_r+0x6c>
 800ed7a:	4621      	mov	r1, r4
 800ed7c:	4628      	mov	r0, r5
 800ed7e:	f000 f927 	bl	800efd0 <_fflush_r>
 800ed82:	b988      	cbnz	r0, 800eda8 <__swbuf_r+0x90>
 800ed84:	4638      	mov	r0, r7
 800ed86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed88:	4b0a      	ldr	r3, [pc, #40]	; (800edb4 <__swbuf_r+0x9c>)
 800ed8a:	429c      	cmp	r4, r3
 800ed8c:	d101      	bne.n	800ed92 <__swbuf_r+0x7a>
 800ed8e:	68ac      	ldr	r4, [r5, #8]
 800ed90:	e7cf      	b.n	800ed32 <__swbuf_r+0x1a>
 800ed92:	4b09      	ldr	r3, [pc, #36]	; (800edb8 <__swbuf_r+0xa0>)
 800ed94:	429c      	cmp	r4, r3
 800ed96:	bf08      	it	eq
 800ed98:	68ec      	ldreq	r4, [r5, #12]
 800ed9a:	e7ca      	b.n	800ed32 <__swbuf_r+0x1a>
 800ed9c:	4621      	mov	r1, r4
 800ed9e:	4628      	mov	r0, r5
 800eda0:	f000 f81a 	bl	800edd8 <__swsetup_r>
 800eda4:	2800      	cmp	r0, #0
 800eda6:	d0cb      	beq.n	800ed40 <__swbuf_r+0x28>
 800eda8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800edac:	e7ea      	b.n	800ed84 <__swbuf_r+0x6c>
 800edae:	bf00      	nop
 800edb0:	0800f904 	.word	0x0800f904
 800edb4:	0800f924 	.word	0x0800f924
 800edb8:	0800f8e4 	.word	0x0800f8e4

0800edbc <__ascii_wctomb>:
 800edbc:	b149      	cbz	r1, 800edd2 <__ascii_wctomb+0x16>
 800edbe:	2aff      	cmp	r2, #255	; 0xff
 800edc0:	bf85      	ittet	hi
 800edc2:	238a      	movhi	r3, #138	; 0x8a
 800edc4:	6003      	strhi	r3, [r0, #0]
 800edc6:	700a      	strbls	r2, [r1, #0]
 800edc8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800edcc:	bf98      	it	ls
 800edce:	2001      	movls	r0, #1
 800edd0:	4770      	bx	lr
 800edd2:	4608      	mov	r0, r1
 800edd4:	4770      	bx	lr
	...

0800edd8 <__swsetup_r>:
 800edd8:	4b32      	ldr	r3, [pc, #200]	; (800eea4 <__swsetup_r+0xcc>)
 800edda:	b570      	push	{r4, r5, r6, lr}
 800eddc:	681d      	ldr	r5, [r3, #0]
 800edde:	4606      	mov	r6, r0
 800ede0:	460c      	mov	r4, r1
 800ede2:	b125      	cbz	r5, 800edee <__swsetup_r+0x16>
 800ede4:	69ab      	ldr	r3, [r5, #24]
 800ede6:	b913      	cbnz	r3, 800edee <__swsetup_r+0x16>
 800ede8:	4628      	mov	r0, r5
 800edea:	f000 f985 	bl	800f0f8 <__sinit>
 800edee:	4b2e      	ldr	r3, [pc, #184]	; (800eea8 <__swsetup_r+0xd0>)
 800edf0:	429c      	cmp	r4, r3
 800edf2:	d10f      	bne.n	800ee14 <__swsetup_r+0x3c>
 800edf4:	686c      	ldr	r4, [r5, #4]
 800edf6:	89a3      	ldrh	r3, [r4, #12]
 800edf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800edfc:	0719      	lsls	r1, r3, #28
 800edfe:	d42c      	bmi.n	800ee5a <__swsetup_r+0x82>
 800ee00:	06dd      	lsls	r5, r3, #27
 800ee02:	d411      	bmi.n	800ee28 <__swsetup_r+0x50>
 800ee04:	2309      	movs	r3, #9
 800ee06:	6033      	str	r3, [r6, #0]
 800ee08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ee0c:	81a3      	strh	r3, [r4, #12]
 800ee0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee12:	e03e      	b.n	800ee92 <__swsetup_r+0xba>
 800ee14:	4b25      	ldr	r3, [pc, #148]	; (800eeac <__swsetup_r+0xd4>)
 800ee16:	429c      	cmp	r4, r3
 800ee18:	d101      	bne.n	800ee1e <__swsetup_r+0x46>
 800ee1a:	68ac      	ldr	r4, [r5, #8]
 800ee1c:	e7eb      	b.n	800edf6 <__swsetup_r+0x1e>
 800ee1e:	4b24      	ldr	r3, [pc, #144]	; (800eeb0 <__swsetup_r+0xd8>)
 800ee20:	429c      	cmp	r4, r3
 800ee22:	bf08      	it	eq
 800ee24:	68ec      	ldreq	r4, [r5, #12]
 800ee26:	e7e6      	b.n	800edf6 <__swsetup_r+0x1e>
 800ee28:	0758      	lsls	r0, r3, #29
 800ee2a:	d512      	bpl.n	800ee52 <__swsetup_r+0x7a>
 800ee2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee2e:	b141      	cbz	r1, 800ee42 <__swsetup_r+0x6a>
 800ee30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee34:	4299      	cmp	r1, r3
 800ee36:	d002      	beq.n	800ee3e <__swsetup_r+0x66>
 800ee38:	4630      	mov	r0, r6
 800ee3a:	f7ff fcd5 	bl	800e7e8 <_free_r>
 800ee3e:	2300      	movs	r3, #0
 800ee40:	6363      	str	r3, [r4, #52]	; 0x34
 800ee42:	89a3      	ldrh	r3, [r4, #12]
 800ee44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ee48:	81a3      	strh	r3, [r4, #12]
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	6063      	str	r3, [r4, #4]
 800ee4e:	6923      	ldr	r3, [r4, #16]
 800ee50:	6023      	str	r3, [r4, #0]
 800ee52:	89a3      	ldrh	r3, [r4, #12]
 800ee54:	f043 0308 	orr.w	r3, r3, #8
 800ee58:	81a3      	strh	r3, [r4, #12]
 800ee5a:	6923      	ldr	r3, [r4, #16]
 800ee5c:	b94b      	cbnz	r3, 800ee72 <__swsetup_r+0x9a>
 800ee5e:	89a3      	ldrh	r3, [r4, #12]
 800ee60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ee64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee68:	d003      	beq.n	800ee72 <__swsetup_r+0x9a>
 800ee6a:	4621      	mov	r1, r4
 800ee6c:	4630      	mov	r0, r6
 800ee6e:	f000 fa09 	bl	800f284 <__smakebuf_r>
 800ee72:	89a0      	ldrh	r0, [r4, #12]
 800ee74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee78:	f010 0301 	ands.w	r3, r0, #1
 800ee7c:	d00a      	beq.n	800ee94 <__swsetup_r+0xbc>
 800ee7e:	2300      	movs	r3, #0
 800ee80:	60a3      	str	r3, [r4, #8]
 800ee82:	6963      	ldr	r3, [r4, #20]
 800ee84:	425b      	negs	r3, r3
 800ee86:	61a3      	str	r3, [r4, #24]
 800ee88:	6923      	ldr	r3, [r4, #16]
 800ee8a:	b943      	cbnz	r3, 800ee9e <__swsetup_r+0xc6>
 800ee8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ee90:	d1ba      	bne.n	800ee08 <__swsetup_r+0x30>
 800ee92:	bd70      	pop	{r4, r5, r6, pc}
 800ee94:	0781      	lsls	r1, r0, #30
 800ee96:	bf58      	it	pl
 800ee98:	6963      	ldrpl	r3, [r4, #20]
 800ee9a:	60a3      	str	r3, [r4, #8]
 800ee9c:	e7f4      	b.n	800ee88 <__swsetup_r+0xb0>
 800ee9e:	2000      	movs	r0, #0
 800eea0:	e7f7      	b.n	800ee92 <__swsetup_r+0xba>
 800eea2:	bf00      	nop
 800eea4:	20002858 	.word	0x20002858
 800eea8:	0800f904 	.word	0x0800f904
 800eeac:	0800f924 	.word	0x0800f924
 800eeb0:	0800f8e4 	.word	0x0800f8e4

0800eeb4 <abort>:
 800eeb4:	b508      	push	{r3, lr}
 800eeb6:	2006      	movs	r0, #6
 800eeb8:	f000 fa4c 	bl	800f354 <raise>
 800eebc:	2001      	movs	r0, #1
 800eebe:	f7f2 fcb7 	bl	8001830 <_exit>
	...

0800eec4 <__sflush_r>:
 800eec4:	898a      	ldrh	r2, [r1, #12]
 800eec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eeca:	4605      	mov	r5, r0
 800eecc:	0710      	lsls	r0, r2, #28
 800eece:	460c      	mov	r4, r1
 800eed0:	d458      	bmi.n	800ef84 <__sflush_r+0xc0>
 800eed2:	684b      	ldr	r3, [r1, #4]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	dc05      	bgt.n	800eee4 <__sflush_r+0x20>
 800eed8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	dc02      	bgt.n	800eee4 <__sflush_r+0x20>
 800eede:	2000      	movs	r0, #0
 800eee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eee4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eee6:	2e00      	cmp	r6, #0
 800eee8:	d0f9      	beq.n	800eede <__sflush_r+0x1a>
 800eeea:	2300      	movs	r3, #0
 800eeec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eef0:	682f      	ldr	r7, [r5, #0]
 800eef2:	602b      	str	r3, [r5, #0]
 800eef4:	d032      	beq.n	800ef5c <__sflush_r+0x98>
 800eef6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eef8:	89a3      	ldrh	r3, [r4, #12]
 800eefa:	075a      	lsls	r2, r3, #29
 800eefc:	d505      	bpl.n	800ef0a <__sflush_r+0x46>
 800eefe:	6863      	ldr	r3, [r4, #4]
 800ef00:	1ac0      	subs	r0, r0, r3
 800ef02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ef04:	b10b      	cbz	r3, 800ef0a <__sflush_r+0x46>
 800ef06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ef08:	1ac0      	subs	r0, r0, r3
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	4602      	mov	r2, r0
 800ef0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef10:	6a21      	ldr	r1, [r4, #32]
 800ef12:	4628      	mov	r0, r5
 800ef14:	47b0      	blx	r6
 800ef16:	1c43      	adds	r3, r0, #1
 800ef18:	89a3      	ldrh	r3, [r4, #12]
 800ef1a:	d106      	bne.n	800ef2a <__sflush_r+0x66>
 800ef1c:	6829      	ldr	r1, [r5, #0]
 800ef1e:	291d      	cmp	r1, #29
 800ef20:	d82c      	bhi.n	800ef7c <__sflush_r+0xb8>
 800ef22:	4a2a      	ldr	r2, [pc, #168]	; (800efcc <__sflush_r+0x108>)
 800ef24:	40ca      	lsrs	r2, r1
 800ef26:	07d6      	lsls	r6, r2, #31
 800ef28:	d528      	bpl.n	800ef7c <__sflush_r+0xb8>
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	6062      	str	r2, [r4, #4]
 800ef2e:	04d9      	lsls	r1, r3, #19
 800ef30:	6922      	ldr	r2, [r4, #16]
 800ef32:	6022      	str	r2, [r4, #0]
 800ef34:	d504      	bpl.n	800ef40 <__sflush_r+0x7c>
 800ef36:	1c42      	adds	r2, r0, #1
 800ef38:	d101      	bne.n	800ef3e <__sflush_r+0x7a>
 800ef3a:	682b      	ldr	r3, [r5, #0]
 800ef3c:	b903      	cbnz	r3, 800ef40 <__sflush_r+0x7c>
 800ef3e:	6560      	str	r0, [r4, #84]	; 0x54
 800ef40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef42:	602f      	str	r7, [r5, #0]
 800ef44:	2900      	cmp	r1, #0
 800ef46:	d0ca      	beq.n	800eede <__sflush_r+0x1a>
 800ef48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef4c:	4299      	cmp	r1, r3
 800ef4e:	d002      	beq.n	800ef56 <__sflush_r+0x92>
 800ef50:	4628      	mov	r0, r5
 800ef52:	f7ff fc49 	bl	800e7e8 <_free_r>
 800ef56:	2000      	movs	r0, #0
 800ef58:	6360      	str	r0, [r4, #52]	; 0x34
 800ef5a:	e7c1      	b.n	800eee0 <__sflush_r+0x1c>
 800ef5c:	6a21      	ldr	r1, [r4, #32]
 800ef5e:	2301      	movs	r3, #1
 800ef60:	4628      	mov	r0, r5
 800ef62:	47b0      	blx	r6
 800ef64:	1c41      	adds	r1, r0, #1
 800ef66:	d1c7      	bne.n	800eef8 <__sflush_r+0x34>
 800ef68:	682b      	ldr	r3, [r5, #0]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d0c4      	beq.n	800eef8 <__sflush_r+0x34>
 800ef6e:	2b1d      	cmp	r3, #29
 800ef70:	d001      	beq.n	800ef76 <__sflush_r+0xb2>
 800ef72:	2b16      	cmp	r3, #22
 800ef74:	d101      	bne.n	800ef7a <__sflush_r+0xb6>
 800ef76:	602f      	str	r7, [r5, #0]
 800ef78:	e7b1      	b.n	800eede <__sflush_r+0x1a>
 800ef7a:	89a3      	ldrh	r3, [r4, #12]
 800ef7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef80:	81a3      	strh	r3, [r4, #12]
 800ef82:	e7ad      	b.n	800eee0 <__sflush_r+0x1c>
 800ef84:	690f      	ldr	r7, [r1, #16]
 800ef86:	2f00      	cmp	r7, #0
 800ef88:	d0a9      	beq.n	800eede <__sflush_r+0x1a>
 800ef8a:	0793      	lsls	r3, r2, #30
 800ef8c:	680e      	ldr	r6, [r1, #0]
 800ef8e:	bf08      	it	eq
 800ef90:	694b      	ldreq	r3, [r1, #20]
 800ef92:	600f      	str	r7, [r1, #0]
 800ef94:	bf18      	it	ne
 800ef96:	2300      	movne	r3, #0
 800ef98:	eba6 0807 	sub.w	r8, r6, r7
 800ef9c:	608b      	str	r3, [r1, #8]
 800ef9e:	f1b8 0f00 	cmp.w	r8, #0
 800efa2:	dd9c      	ble.n	800eede <__sflush_r+0x1a>
 800efa4:	6a21      	ldr	r1, [r4, #32]
 800efa6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800efa8:	4643      	mov	r3, r8
 800efaa:	463a      	mov	r2, r7
 800efac:	4628      	mov	r0, r5
 800efae:	47b0      	blx	r6
 800efb0:	2800      	cmp	r0, #0
 800efb2:	dc06      	bgt.n	800efc2 <__sflush_r+0xfe>
 800efb4:	89a3      	ldrh	r3, [r4, #12]
 800efb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efba:	81a3      	strh	r3, [r4, #12]
 800efbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800efc0:	e78e      	b.n	800eee0 <__sflush_r+0x1c>
 800efc2:	4407      	add	r7, r0
 800efc4:	eba8 0800 	sub.w	r8, r8, r0
 800efc8:	e7e9      	b.n	800ef9e <__sflush_r+0xda>
 800efca:	bf00      	nop
 800efcc:	20400001 	.word	0x20400001

0800efd0 <_fflush_r>:
 800efd0:	b538      	push	{r3, r4, r5, lr}
 800efd2:	690b      	ldr	r3, [r1, #16]
 800efd4:	4605      	mov	r5, r0
 800efd6:	460c      	mov	r4, r1
 800efd8:	b913      	cbnz	r3, 800efe0 <_fflush_r+0x10>
 800efda:	2500      	movs	r5, #0
 800efdc:	4628      	mov	r0, r5
 800efde:	bd38      	pop	{r3, r4, r5, pc}
 800efe0:	b118      	cbz	r0, 800efea <_fflush_r+0x1a>
 800efe2:	6983      	ldr	r3, [r0, #24]
 800efe4:	b90b      	cbnz	r3, 800efea <_fflush_r+0x1a>
 800efe6:	f000 f887 	bl	800f0f8 <__sinit>
 800efea:	4b14      	ldr	r3, [pc, #80]	; (800f03c <_fflush_r+0x6c>)
 800efec:	429c      	cmp	r4, r3
 800efee:	d11b      	bne.n	800f028 <_fflush_r+0x58>
 800eff0:	686c      	ldr	r4, [r5, #4]
 800eff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d0ef      	beq.n	800efda <_fflush_r+0xa>
 800effa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800effc:	07d0      	lsls	r0, r2, #31
 800effe:	d404      	bmi.n	800f00a <_fflush_r+0x3a>
 800f000:	0599      	lsls	r1, r3, #22
 800f002:	d402      	bmi.n	800f00a <_fflush_r+0x3a>
 800f004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f006:	f000 f915 	bl	800f234 <__retarget_lock_acquire_recursive>
 800f00a:	4628      	mov	r0, r5
 800f00c:	4621      	mov	r1, r4
 800f00e:	f7ff ff59 	bl	800eec4 <__sflush_r>
 800f012:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f014:	07da      	lsls	r2, r3, #31
 800f016:	4605      	mov	r5, r0
 800f018:	d4e0      	bmi.n	800efdc <_fflush_r+0xc>
 800f01a:	89a3      	ldrh	r3, [r4, #12]
 800f01c:	059b      	lsls	r3, r3, #22
 800f01e:	d4dd      	bmi.n	800efdc <_fflush_r+0xc>
 800f020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f022:	f000 f908 	bl	800f236 <__retarget_lock_release_recursive>
 800f026:	e7d9      	b.n	800efdc <_fflush_r+0xc>
 800f028:	4b05      	ldr	r3, [pc, #20]	; (800f040 <_fflush_r+0x70>)
 800f02a:	429c      	cmp	r4, r3
 800f02c:	d101      	bne.n	800f032 <_fflush_r+0x62>
 800f02e:	68ac      	ldr	r4, [r5, #8]
 800f030:	e7df      	b.n	800eff2 <_fflush_r+0x22>
 800f032:	4b04      	ldr	r3, [pc, #16]	; (800f044 <_fflush_r+0x74>)
 800f034:	429c      	cmp	r4, r3
 800f036:	bf08      	it	eq
 800f038:	68ec      	ldreq	r4, [r5, #12]
 800f03a:	e7da      	b.n	800eff2 <_fflush_r+0x22>
 800f03c:	0800f904 	.word	0x0800f904
 800f040:	0800f924 	.word	0x0800f924
 800f044:	0800f8e4 	.word	0x0800f8e4

0800f048 <std>:
 800f048:	2300      	movs	r3, #0
 800f04a:	b510      	push	{r4, lr}
 800f04c:	4604      	mov	r4, r0
 800f04e:	e9c0 3300 	strd	r3, r3, [r0]
 800f052:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f056:	6083      	str	r3, [r0, #8]
 800f058:	8181      	strh	r1, [r0, #12]
 800f05a:	6643      	str	r3, [r0, #100]	; 0x64
 800f05c:	81c2      	strh	r2, [r0, #14]
 800f05e:	6183      	str	r3, [r0, #24]
 800f060:	4619      	mov	r1, r3
 800f062:	2208      	movs	r2, #8
 800f064:	305c      	adds	r0, #92	; 0x5c
 800f066:	f7fd fd2d 	bl	800cac4 <memset>
 800f06a:	4b05      	ldr	r3, [pc, #20]	; (800f080 <std+0x38>)
 800f06c:	6263      	str	r3, [r4, #36]	; 0x24
 800f06e:	4b05      	ldr	r3, [pc, #20]	; (800f084 <std+0x3c>)
 800f070:	62a3      	str	r3, [r4, #40]	; 0x28
 800f072:	4b05      	ldr	r3, [pc, #20]	; (800f088 <std+0x40>)
 800f074:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f076:	4b05      	ldr	r3, [pc, #20]	; (800f08c <std+0x44>)
 800f078:	6224      	str	r4, [r4, #32]
 800f07a:	6323      	str	r3, [r4, #48]	; 0x30
 800f07c:	bd10      	pop	{r4, pc}
 800f07e:	bf00      	nop
 800f080:	0800f38d 	.word	0x0800f38d
 800f084:	0800f3af 	.word	0x0800f3af
 800f088:	0800f3e7 	.word	0x0800f3e7
 800f08c:	0800f40b 	.word	0x0800f40b

0800f090 <_cleanup_r>:
 800f090:	4901      	ldr	r1, [pc, #4]	; (800f098 <_cleanup_r+0x8>)
 800f092:	f000 b8af 	b.w	800f1f4 <_fwalk_reent>
 800f096:	bf00      	nop
 800f098:	0800efd1 	.word	0x0800efd1

0800f09c <__sfmoreglue>:
 800f09c:	b570      	push	{r4, r5, r6, lr}
 800f09e:	2268      	movs	r2, #104	; 0x68
 800f0a0:	1e4d      	subs	r5, r1, #1
 800f0a2:	4355      	muls	r5, r2
 800f0a4:	460e      	mov	r6, r1
 800f0a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f0aa:	f7ff fc09 	bl	800e8c0 <_malloc_r>
 800f0ae:	4604      	mov	r4, r0
 800f0b0:	b140      	cbz	r0, 800f0c4 <__sfmoreglue+0x28>
 800f0b2:	2100      	movs	r1, #0
 800f0b4:	e9c0 1600 	strd	r1, r6, [r0]
 800f0b8:	300c      	adds	r0, #12
 800f0ba:	60a0      	str	r0, [r4, #8]
 800f0bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f0c0:	f7fd fd00 	bl	800cac4 <memset>
 800f0c4:	4620      	mov	r0, r4
 800f0c6:	bd70      	pop	{r4, r5, r6, pc}

0800f0c8 <__sfp_lock_acquire>:
 800f0c8:	4801      	ldr	r0, [pc, #4]	; (800f0d0 <__sfp_lock_acquire+0x8>)
 800f0ca:	f000 b8b3 	b.w	800f234 <__retarget_lock_acquire_recursive>
 800f0ce:	bf00      	nop
 800f0d0:	200045d9 	.word	0x200045d9

0800f0d4 <__sfp_lock_release>:
 800f0d4:	4801      	ldr	r0, [pc, #4]	; (800f0dc <__sfp_lock_release+0x8>)
 800f0d6:	f000 b8ae 	b.w	800f236 <__retarget_lock_release_recursive>
 800f0da:	bf00      	nop
 800f0dc:	200045d9 	.word	0x200045d9

0800f0e0 <__sinit_lock_acquire>:
 800f0e0:	4801      	ldr	r0, [pc, #4]	; (800f0e8 <__sinit_lock_acquire+0x8>)
 800f0e2:	f000 b8a7 	b.w	800f234 <__retarget_lock_acquire_recursive>
 800f0e6:	bf00      	nop
 800f0e8:	200045da 	.word	0x200045da

0800f0ec <__sinit_lock_release>:
 800f0ec:	4801      	ldr	r0, [pc, #4]	; (800f0f4 <__sinit_lock_release+0x8>)
 800f0ee:	f000 b8a2 	b.w	800f236 <__retarget_lock_release_recursive>
 800f0f2:	bf00      	nop
 800f0f4:	200045da 	.word	0x200045da

0800f0f8 <__sinit>:
 800f0f8:	b510      	push	{r4, lr}
 800f0fa:	4604      	mov	r4, r0
 800f0fc:	f7ff fff0 	bl	800f0e0 <__sinit_lock_acquire>
 800f100:	69a3      	ldr	r3, [r4, #24]
 800f102:	b11b      	cbz	r3, 800f10c <__sinit+0x14>
 800f104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f108:	f7ff bff0 	b.w	800f0ec <__sinit_lock_release>
 800f10c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f110:	6523      	str	r3, [r4, #80]	; 0x50
 800f112:	4b13      	ldr	r3, [pc, #76]	; (800f160 <__sinit+0x68>)
 800f114:	4a13      	ldr	r2, [pc, #76]	; (800f164 <__sinit+0x6c>)
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	62a2      	str	r2, [r4, #40]	; 0x28
 800f11a:	42a3      	cmp	r3, r4
 800f11c:	bf04      	itt	eq
 800f11e:	2301      	moveq	r3, #1
 800f120:	61a3      	streq	r3, [r4, #24]
 800f122:	4620      	mov	r0, r4
 800f124:	f000 f820 	bl	800f168 <__sfp>
 800f128:	6060      	str	r0, [r4, #4]
 800f12a:	4620      	mov	r0, r4
 800f12c:	f000 f81c 	bl	800f168 <__sfp>
 800f130:	60a0      	str	r0, [r4, #8]
 800f132:	4620      	mov	r0, r4
 800f134:	f000 f818 	bl	800f168 <__sfp>
 800f138:	2200      	movs	r2, #0
 800f13a:	60e0      	str	r0, [r4, #12]
 800f13c:	2104      	movs	r1, #4
 800f13e:	6860      	ldr	r0, [r4, #4]
 800f140:	f7ff ff82 	bl	800f048 <std>
 800f144:	68a0      	ldr	r0, [r4, #8]
 800f146:	2201      	movs	r2, #1
 800f148:	2109      	movs	r1, #9
 800f14a:	f7ff ff7d 	bl	800f048 <std>
 800f14e:	68e0      	ldr	r0, [r4, #12]
 800f150:	2202      	movs	r2, #2
 800f152:	2112      	movs	r1, #18
 800f154:	f7ff ff78 	bl	800f048 <std>
 800f158:	2301      	movs	r3, #1
 800f15a:	61a3      	str	r3, [r4, #24]
 800f15c:	e7d2      	b.n	800f104 <__sinit+0xc>
 800f15e:	bf00      	nop
 800f160:	0800f568 	.word	0x0800f568
 800f164:	0800f091 	.word	0x0800f091

0800f168 <__sfp>:
 800f168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f16a:	4607      	mov	r7, r0
 800f16c:	f7ff ffac 	bl	800f0c8 <__sfp_lock_acquire>
 800f170:	4b1e      	ldr	r3, [pc, #120]	; (800f1ec <__sfp+0x84>)
 800f172:	681e      	ldr	r6, [r3, #0]
 800f174:	69b3      	ldr	r3, [r6, #24]
 800f176:	b913      	cbnz	r3, 800f17e <__sfp+0x16>
 800f178:	4630      	mov	r0, r6
 800f17a:	f7ff ffbd 	bl	800f0f8 <__sinit>
 800f17e:	3648      	adds	r6, #72	; 0x48
 800f180:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f184:	3b01      	subs	r3, #1
 800f186:	d503      	bpl.n	800f190 <__sfp+0x28>
 800f188:	6833      	ldr	r3, [r6, #0]
 800f18a:	b30b      	cbz	r3, 800f1d0 <__sfp+0x68>
 800f18c:	6836      	ldr	r6, [r6, #0]
 800f18e:	e7f7      	b.n	800f180 <__sfp+0x18>
 800f190:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f194:	b9d5      	cbnz	r5, 800f1cc <__sfp+0x64>
 800f196:	4b16      	ldr	r3, [pc, #88]	; (800f1f0 <__sfp+0x88>)
 800f198:	60e3      	str	r3, [r4, #12]
 800f19a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f19e:	6665      	str	r5, [r4, #100]	; 0x64
 800f1a0:	f000 f847 	bl	800f232 <__retarget_lock_init_recursive>
 800f1a4:	f7ff ff96 	bl	800f0d4 <__sfp_lock_release>
 800f1a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f1ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f1b0:	6025      	str	r5, [r4, #0]
 800f1b2:	61a5      	str	r5, [r4, #24]
 800f1b4:	2208      	movs	r2, #8
 800f1b6:	4629      	mov	r1, r5
 800f1b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f1bc:	f7fd fc82 	bl	800cac4 <memset>
 800f1c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f1c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f1c8:	4620      	mov	r0, r4
 800f1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1cc:	3468      	adds	r4, #104	; 0x68
 800f1ce:	e7d9      	b.n	800f184 <__sfp+0x1c>
 800f1d0:	2104      	movs	r1, #4
 800f1d2:	4638      	mov	r0, r7
 800f1d4:	f7ff ff62 	bl	800f09c <__sfmoreglue>
 800f1d8:	4604      	mov	r4, r0
 800f1da:	6030      	str	r0, [r6, #0]
 800f1dc:	2800      	cmp	r0, #0
 800f1de:	d1d5      	bne.n	800f18c <__sfp+0x24>
 800f1e0:	f7ff ff78 	bl	800f0d4 <__sfp_lock_release>
 800f1e4:	230c      	movs	r3, #12
 800f1e6:	603b      	str	r3, [r7, #0]
 800f1e8:	e7ee      	b.n	800f1c8 <__sfp+0x60>
 800f1ea:	bf00      	nop
 800f1ec:	0800f568 	.word	0x0800f568
 800f1f0:	ffff0001 	.word	0xffff0001

0800f1f4 <_fwalk_reent>:
 800f1f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1f8:	4606      	mov	r6, r0
 800f1fa:	4688      	mov	r8, r1
 800f1fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f200:	2700      	movs	r7, #0
 800f202:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f206:	f1b9 0901 	subs.w	r9, r9, #1
 800f20a:	d505      	bpl.n	800f218 <_fwalk_reent+0x24>
 800f20c:	6824      	ldr	r4, [r4, #0]
 800f20e:	2c00      	cmp	r4, #0
 800f210:	d1f7      	bne.n	800f202 <_fwalk_reent+0xe>
 800f212:	4638      	mov	r0, r7
 800f214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f218:	89ab      	ldrh	r3, [r5, #12]
 800f21a:	2b01      	cmp	r3, #1
 800f21c:	d907      	bls.n	800f22e <_fwalk_reent+0x3a>
 800f21e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f222:	3301      	adds	r3, #1
 800f224:	d003      	beq.n	800f22e <_fwalk_reent+0x3a>
 800f226:	4629      	mov	r1, r5
 800f228:	4630      	mov	r0, r6
 800f22a:	47c0      	blx	r8
 800f22c:	4307      	orrs	r7, r0
 800f22e:	3568      	adds	r5, #104	; 0x68
 800f230:	e7e9      	b.n	800f206 <_fwalk_reent+0x12>

0800f232 <__retarget_lock_init_recursive>:
 800f232:	4770      	bx	lr

0800f234 <__retarget_lock_acquire_recursive>:
 800f234:	4770      	bx	lr

0800f236 <__retarget_lock_release_recursive>:
 800f236:	4770      	bx	lr

0800f238 <__swhatbuf_r>:
 800f238:	b570      	push	{r4, r5, r6, lr}
 800f23a:	460e      	mov	r6, r1
 800f23c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f240:	2900      	cmp	r1, #0
 800f242:	b096      	sub	sp, #88	; 0x58
 800f244:	4614      	mov	r4, r2
 800f246:	461d      	mov	r5, r3
 800f248:	da08      	bge.n	800f25c <__swhatbuf_r+0x24>
 800f24a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f24e:	2200      	movs	r2, #0
 800f250:	602a      	str	r2, [r5, #0]
 800f252:	061a      	lsls	r2, r3, #24
 800f254:	d410      	bmi.n	800f278 <__swhatbuf_r+0x40>
 800f256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f25a:	e00e      	b.n	800f27a <__swhatbuf_r+0x42>
 800f25c:	466a      	mov	r2, sp
 800f25e:	f000 f8fb 	bl	800f458 <_fstat_r>
 800f262:	2800      	cmp	r0, #0
 800f264:	dbf1      	blt.n	800f24a <__swhatbuf_r+0x12>
 800f266:	9a01      	ldr	r2, [sp, #4]
 800f268:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f26c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f270:	425a      	negs	r2, r3
 800f272:	415a      	adcs	r2, r3
 800f274:	602a      	str	r2, [r5, #0]
 800f276:	e7ee      	b.n	800f256 <__swhatbuf_r+0x1e>
 800f278:	2340      	movs	r3, #64	; 0x40
 800f27a:	2000      	movs	r0, #0
 800f27c:	6023      	str	r3, [r4, #0]
 800f27e:	b016      	add	sp, #88	; 0x58
 800f280:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f284 <__smakebuf_r>:
 800f284:	898b      	ldrh	r3, [r1, #12]
 800f286:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f288:	079d      	lsls	r5, r3, #30
 800f28a:	4606      	mov	r6, r0
 800f28c:	460c      	mov	r4, r1
 800f28e:	d507      	bpl.n	800f2a0 <__smakebuf_r+0x1c>
 800f290:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f294:	6023      	str	r3, [r4, #0]
 800f296:	6123      	str	r3, [r4, #16]
 800f298:	2301      	movs	r3, #1
 800f29a:	6163      	str	r3, [r4, #20]
 800f29c:	b002      	add	sp, #8
 800f29e:	bd70      	pop	{r4, r5, r6, pc}
 800f2a0:	ab01      	add	r3, sp, #4
 800f2a2:	466a      	mov	r2, sp
 800f2a4:	f7ff ffc8 	bl	800f238 <__swhatbuf_r>
 800f2a8:	9900      	ldr	r1, [sp, #0]
 800f2aa:	4605      	mov	r5, r0
 800f2ac:	4630      	mov	r0, r6
 800f2ae:	f7ff fb07 	bl	800e8c0 <_malloc_r>
 800f2b2:	b948      	cbnz	r0, 800f2c8 <__smakebuf_r+0x44>
 800f2b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2b8:	059a      	lsls	r2, r3, #22
 800f2ba:	d4ef      	bmi.n	800f29c <__smakebuf_r+0x18>
 800f2bc:	f023 0303 	bic.w	r3, r3, #3
 800f2c0:	f043 0302 	orr.w	r3, r3, #2
 800f2c4:	81a3      	strh	r3, [r4, #12]
 800f2c6:	e7e3      	b.n	800f290 <__smakebuf_r+0xc>
 800f2c8:	4b0d      	ldr	r3, [pc, #52]	; (800f300 <__smakebuf_r+0x7c>)
 800f2ca:	62b3      	str	r3, [r6, #40]	; 0x28
 800f2cc:	89a3      	ldrh	r3, [r4, #12]
 800f2ce:	6020      	str	r0, [r4, #0]
 800f2d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2d4:	81a3      	strh	r3, [r4, #12]
 800f2d6:	9b00      	ldr	r3, [sp, #0]
 800f2d8:	6163      	str	r3, [r4, #20]
 800f2da:	9b01      	ldr	r3, [sp, #4]
 800f2dc:	6120      	str	r0, [r4, #16]
 800f2de:	b15b      	cbz	r3, 800f2f8 <__smakebuf_r+0x74>
 800f2e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f2e4:	4630      	mov	r0, r6
 800f2e6:	f000 f8c9 	bl	800f47c <_isatty_r>
 800f2ea:	b128      	cbz	r0, 800f2f8 <__smakebuf_r+0x74>
 800f2ec:	89a3      	ldrh	r3, [r4, #12]
 800f2ee:	f023 0303 	bic.w	r3, r3, #3
 800f2f2:	f043 0301 	orr.w	r3, r3, #1
 800f2f6:	81a3      	strh	r3, [r4, #12]
 800f2f8:	89a0      	ldrh	r0, [r4, #12]
 800f2fa:	4305      	orrs	r5, r0
 800f2fc:	81a5      	strh	r5, [r4, #12]
 800f2fe:	e7cd      	b.n	800f29c <__smakebuf_r+0x18>
 800f300:	0800f091 	.word	0x0800f091

0800f304 <_raise_r>:
 800f304:	291f      	cmp	r1, #31
 800f306:	b538      	push	{r3, r4, r5, lr}
 800f308:	4604      	mov	r4, r0
 800f30a:	460d      	mov	r5, r1
 800f30c:	d904      	bls.n	800f318 <_raise_r+0x14>
 800f30e:	2316      	movs	r3, #22
 800f310:	6003      	str	r3, [r0, #0]
 800f312:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f316:	bd38      	pop	{r3, r4, r5, pc}
 800f318:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f31a:	b112      	cbz	r2, 800f322 <_raise_r+0x1e>
 800f31c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f320:	b94b      	cbnz	r3, 800f336 <_raise_r+0x32>
 800f322:	4620      	mov	r0, r4
 800f324:	f000 f830 	bl	800f388 <_getpid_r>
 800f328:	462a      	mov	r2, r5
 800f32a:	4601      	mov	r1, r0
 800f32c:	4620      	mov	r0, r4
 800f32e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f332:	f000 b817 	b.w	800f364 <_kill_r>
 800f336:	2b01      	cmp	r3, #1
 800f338:	d00a      	beq.n	800f350 <_raise_r+0x4c>
 800f33a:	1c59      	adds	r1, r3, #1
 800f33c:	d103      	bne.n	800f346 <_raise_r+0x42>
 800f33e:	2316      	movs	r3, #22
 800f340:	6003      	str	r3, [r0, #0]
 800f342:	2001      	movs	r0, #1
 800f344:	e7e7      	b.n	800f316 <_raise_r+0x12>
 800f346:	2400      	movs	r4, #0
 800f348:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f34c:	4628      	mov	r0, r5
 800f34e:	4798      	blx	r3
 800f350:	2000      	movs	r0, #0
 800f352:	e7e0      	b.n	800f316 <_raise_r+0x12>

0800f354 <raise>:
 800f354:	4b02      	ldr	r3, [pc, #8]	; (800f360 <raise+0xc>)
 800f356:	4601      	mov	r1, r0
 800f358:	6818      	ldr	r0, [r3, #0]
 800f35a:	f7ff bfd3 	b.w	800f304 <_raise_r>
 800f35e:	bf00      	nop
 800f360:	20002858 	.word	0x20002858

0800f364 <_kill_r>:
 800f364:	b538      	push	{r3, r4, r5, lr}
 800f366:	4d07      	ldr	r5, [pc, #28]	; (800f384 <_kill_r+0x20>)
 800f368:	2300      	movs	r3, #0
 800f36a:	4604      	mov	r4, r0
 800f36c:	4608      	mov	r0, r1
 800f36e:	4611      	mov	r1, r2
 800f370:	602b      	str	r3, [r5, #0]
 800f372:	f7f2 fa4d 	bl	8001810 <_kill>
 800f376:	1c43      	adds	r3, r0, #1
 800f378:	d102      	bne.n	800f380 <_kill_r+0x1c>
 800f37a:	682b      	ldr	r3, [r5, #0]
 800f37c:	b103      	cbz	r3, 800f380 <_kill_r+0x1c>
 800f37e:	6023      	str	r3, [r4, #0]
 800f380:	bd38      	pop	{r3, r4, r5, pc}
 800f382:	bf00      	nop
 800f384:	200045d4 	.word	0x200045d4

0800f388 <_getpid_r>:
 800f388:	f7f2 ba3a 	b.w	8001800 <_getpid>

0800f38c <__sread>:
 800f38c:	b510      	push	{r4, lr}
 800f38e:	460c      	mov	r4, r1
 800f390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f394:	f000 f894 	bl	800f4c0 <_read_r>
 800f398:	2800      	cmp	r0, #0
 800f39a:	bfab      	itete	ge
 800f39c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f39e:	89a3      	ldrhlt	r3, [r4, #12]
 800f3a0:	181b      	addge	r3, r3, r0
 800f3a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f3a6:	bfac      	ite	ge
 800f3a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800f3aa:	81a3      	strhlt	r3, [r4, #12]
 800f3ac:	bd10      	pop	{r4, pc}

0800f3ae <__swrite>:
 800f3ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3b2:	461f      	mov	r7, r3
 800f3b4:	898b      	ldrh	r3, [r1, #12]
 800f3b6:	05db      	lsls	r3, r3, #23
 800f3b8:	4605      	mov	r5, r0
 800f3ba:	460c      	mov	r4, r1
 800f3bc:	4616      	mov	r6, r2
 800f3be:	d505      	bpl.n	800f3cc <__swrite+0x1e>
 800f3c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3c4:	2302      	movs	r3, #2
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	f000 f868 	bl	800f49c <_lseek_r>
 800f3cc:	89a3      	ldrh	r3, [r4, #12]
 800f3ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f3d6:	81a3      	strh	r3, [r4, #12]
 800f3d8:	4632      	mov	r2, r6
 800f3da:	463b      	mov	r3, r7
 800f3dc:	4628      	mov	r0, r5
 800f3de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f3e2:	f000 b817 	b.w	800f414 <_write_r>

0800f3e6 <__sseek>:
 800f3e6:	b510      	push	{r4, lr}
 800f3e8:	460c      	mov	r4, r1
 800f3ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3ee:	f000 f855 	bl	800f49c <_lseek_r>
 800f3f2:	1c43      	adds	r3, r0, #1
 800f3f4:	89a3      	ldrh	r3, [r4, #12]
 800f3f6:	bf15      	itete	ne
 800f3f8:	6560      	strne	r0, [r4, #84]	; 0x54
 800f3fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f3fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f402:	81a3      	strheq	r3, [r4, #12]
 800f404:	bf18      	it	ne
 800f406:	81a3      	strhne	r3, [r4, #12]
 800f408:	bd10      	pop	{r4, pc}

0800f40a <__sclose>:
 800f40a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f40e:	f000 b813 	b.w	800f438 <_close_r>
	...

0800f414 <_write_r>:
 800f414:	b538      	push	{r3, r4, r5, lr}
 800f416:	4d07      	ldr	r5, [pc, #28]	; (800f434 <_write_r+0x20>)
 800f418:	4604      	mov	r4, r0
 800f41a:	4608      	mov	r0, r1
 800f41c:	4611      	mov	r1, r2
 800f41e:	2200      	movs	r2, #0
 800f420:	602a      	str	r2, [r5, #0]
 800f422:	461a      	mov	r2, r3
 800f424:	f7f2 fa2b 	bl	800187e <_write>
 800f428:	1c43      	adds	r3, r0, #1
 800f42a:	d102      	bne.n	800f432 <_write_r+0x1e>
 800f42c:	682b      	ldr	r3, [r5, #0]
 800f42e:	b103      	cbz	r3, 800f432 <_write_r+0x1e>
 800f430:	6023      	str	r3, [r4, #0]
 800f432:	bd38      	pop	{r3, r4, r5, pc}
 800f434:	200045d4 	.word	0x200045d4

0800f438 <_close_r>:
 800f438:	b538      	push	{r3, r4, r5, lr}
 800f43a:	4d06      	ldr	r5, [pc, #24]	; (800f454 <_close_r+0x1c>)
 800f43c:	2300      	movs	r3, #0
 800f43e:	4604      	mov	r4, r0
 800f440:	4608      	mov	r0, r1
 800f442:	602b      	str	r3, [r5, #0]
 800f444:	f7f2 fa37 	bl	80018b6 <_close>
 800f448:	1c43      	adds	r3, r0, #1
 800f44a:	d102      	bne.n	800f452 <_close_r+0x1a>
 800f44c:	682b      	ldr	r3, [r5, #0]
 800f44e:	b103      	cbz	r3, 800f452 <_close_r+0x1a>
 800f450:	6023      	str	r3, [r4, #0]
 800f452:	bd38      	pop	{r3, r4, r5, pc}
 800f454:	200045d4 	.word	0x200045d4

0800f458 <_fstat_r>:
 800f458:	b538      	push	{r3, r4, r5, lr}
 800f45a:	4d07      	ldr	r5, [pc, #28]	; (800f478 <_fstat_r+0x20>)
 800f45c:	2300      	movs	r3, #0
 800f45e:	4604      	mov	r4, r0
 800f460:	4608      	mov	r0, r1
 800f462:	4611      	mov	r1, r2
 800f464:	602b      	str	r3, [r5, #0]
 800f466:	f7f2 fa32 	bl	80018ce <_fstat>
 800f46a:	1c43      	adds	r3, r0, #1
 800f46c:	d102      	bne.n	800f474 <_fstat_r+0x1c>
 800f46e:	682b      	ldr	r3, [r5, #0]
 800f470:	b103      	cbz	r3, 800f474 <_fstat_r+0x1c>
 800f472:	6023      	str	r3, [r4, #0]
 800f474:	bd38      	pop	{r3, r4, r5, pc}
 800f476:	bf00      	nop
 800f478:	200045d4 	.word	0x200045d4

0800f47c <_isatty_r>:
 800f47c:	b538      	push	{r3, r4, r5, lr}
 800f47e:	4d06      	ldr	r5, [pc, #24]	; (800f498 <_isatty_r+0x1c>)
 800f480:	2300      	movs	r3, #0
 800f482:	4604      	mov	r4, r0
 800f484:	4608      	mov	r0, r1
 800f486:	602b      	str	r3, [r5, #0]
 800f488:	f7f2 fa31 	bl	80018ee <_isatty>
 800f48c:	1c43      	adds	r3, r0, #1
 800f48e:	d102      	bne.n	800f496 <_isatty_r+0x1a>
 800f490:	682b      	ldr	r3, [r5, #0]
 800f492:	b103      	cbz	r3, 800f496 <_isatty_r+0x1a>
 800f494:	6023      	str	r3, [r4, #0]
 800f496:	bd38      	pop	{r3, r4, r5, pc}
 800f498:	200045d4 	.word	0x200045d4

0800f49c <_lseek_r>:
 800f49c:	b538      	push	{r3, r4, r5, lr}
 800f49e:	4d07      	ldr	r5, [pc, #28]	; (800f4bc <_lseek_r+0x20>)
 800f4a0:	4604      	mov	r4, r0
 800f4a2:	4608      	mov	r0, r1
 800f4a4:	4611      	mov	r1, r2
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	602a      	str	r2, [r5, #0]
 800f4aa:	461a      	mov	r2, r3
 800f4ac:	f7f2 fa2a 	bl	8001904 <_lseek>
 800f4b0:	1c43      	adds	r3, r0, #1
 800f4b2:	d102      	bne.n	800f4ba <_lseek_r+0x1e>
 800f4b4:	682b      	ldr	r3, [r5, #0]
 800f4b6:	b103      	cbz	r3, 800f4ba <_lseek_r+0x1e>
 800f4b8:	6023      	str	r3, [r4, #0]
 800f4ba:	bd38      	pop	{r3, r4, r5, pc}
 800f4bc:	200045d4 	.word	0x200045d4

0800f4c0 <_read_r>:
 800f4c0:	b538      	push	{r3, r4, r5, lr}
 800f4c2:	4d07      	ldr	r5, [pc, #28]	; (800f4e0 <_read_r+0x20>)
 800f4c4:	4604      	mov	r4, r0
 800f4c6:	4608      	mov	r0, r1
 800f4c8:	4611      	mov	r1, r2
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	602a      	str	r2, [r5, #0]
 800f4ce:	461a      	mov	r2, r3
 800f4d0:	f7f2 f9b8 	bl	8001844 <_read>
 800f4d4:	1c43      	adds	r3, r0, #1
 800f4d6:	d102      	bne.n	800f4de <_read_r+0x1e>
 800f4d8:	682b      	ldr	r3, [r5, #0]
 800f4da:	b103      	cbz	r3, 800f4de <_read_r+0x1e>
 800f4dc:	6023      	str	r3, [r4, #0]
 800f4de:	bd38      	pop	{r3, r4, r5, pc}
 800f4e0:	200045d4 	.word	0x200045d4

0800f4e4 <_init>:
 800f4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4e6:	bf00      	nop
 800f4e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4ea:	bc08      	pop	{r3}
 800f4ec:	469e      	mov	lr, r3
 800f4ee:	4770      	bx	lr

0800f4f0 <_fini>:
 800f4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4f2:	bf00      	nop
 800f4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4f6:	bc08      	pop	{r3}
 800f4f8:	469e      	mov	lr, r3
 800f4fa:	4770      	bx	lr
