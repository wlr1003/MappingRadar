
radar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000106dc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  080108c0  080108c0  000208c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010d04  08010d04  00032a28  2**0
                  CONTENTS
  4 .ARM          00000000  08010d04  08010d04  00032a28  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010d04  08010d04  00032a28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010d04  08010d04  00020d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010d08  08010d08  00020d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002a28  20000000  08010d0c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021dc  20002a28  08013734  00032a28  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c04  08013734  00034c04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00032a28  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029416  00000000  00000000  00032a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000485a  00000000  00000000  0005be6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023f0  00000000  00000000  000606c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021e8  00000000  00000000  00062ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027b0a  00000000  00000000  00064ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002399c  00000000  00000000  0008c7aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9e92  00000000  00000000  000b0146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a9fd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aa84  00000000  00000000  001aa028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20002a28 	.word	0x20002a28
 80001fc:	00000000 	.word	0x00000000
 8000200:	080108a4 	.word	0x080108a4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20002a2c 	.word	0x20002a2c
 800021c:	080108a4 	.word	0x080108a4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <lsm6dsl_read_reg>:
  *
  */
int32_t __weak lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b087      	sub	sp, #28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	607a      	str	r2, [r7, #4]
 8000c02:	461a      	mov	r2, r3
 8000c04:	460b      	mov	r3, r1
 8000c06:	72fb      	strb	r3, [r7, #11]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	685c      	ldr	r4, [r3, #4]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	68d8      	ldr	r0, [r3, #12]
 8000c14:	893b      	ldrh	r3, [r7, #8]
 8000c16:	7af9      	ldrb	r1, [r7, #11]
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	47a0      	blx	r4
 8000c1c:	6178      	str	r0, [r7, #20]

  return ret;
 8000c1e:	697b      	ldr	r3, [r7, #20]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	371c      	adds	r7, #28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd90      	pop	{r4, r7, pc}

08000c28 <lsm6dsl_write_reg>:
  *
  */
int32_t __weak lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8000c28:	b590      	push	{r4, r7, lr}
 8000c2a:	b087      	sub	sp, #28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	607a      	str	r2, [r7, #4]
 8000c32:	461a      	mov	r2, r3
 8000c34:	460b      	mov	r3, r1
 8000c36:	72fb      	strb	r3, [r7, #11]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	681c      	ldr	r4, [r3, #0]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	68d8      	ldr	r0, [r3, #12]
 8000c44:	893b      	ldrh	r3, [r7, #8]
 8000c46:	7af9      	ldrb	r1, [r7, #11]
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	47a0      	blx	r4
 8000c4c:	6178      	str	r0, [r7, #20]

  return ret;
 8000c4e:	697b      	ldr	r3, [r7, #20]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	371c      	adds	r7, #28
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd90      	pop	{r4, r7, pc}

08000c58 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8000c62:	2301      	movs	r3, #1
 8000c64:	683a      	ldr	r2, [r7, #0]
 8000c66:	210f      	movs	r1, #15
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f7ff ffc5 	bl	8000bf8 <lsm6dsl_read_reg>
 8000c6e:	60f8      	str	r0, [r7, #12]

  return ret;
 8000c70:	68fb      	ldr	r3, [r7, #12]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b084      	sub	sp, #16
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
 8000c82:	460b      	mov	r3, r1
 8000c84:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8000c86:	f107 0208 	add.w	r2, r7, #8
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	2112      	movs	r1, #18
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ffb2 	bl	8000bf8 <lsm6dsl_read_reg>
 8000c94:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d10f      	bne.n	8000cbc <lsm6dsl_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 8000c9c:	78fb      	ldrb	r3, [r7, #3]
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	7a3b      	ldrb	r3, [r7, #8]
 8000ca6:	f362 0300 	bfi	r3, r2, #0, #1
 8000caa:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8000cac:	f107 0208 	add.w	r2, r7, #8
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	2112      	movs	r1, #18
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f7ff ffb7 	bl	8000c28 <lsm6dsl_write_reg>
 8000cba:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b084      	sub	sp, #16
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
 8000cce:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8000cd0:	f107 0208 	add.w	r2, r7, #8
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	2112      	movs	r1, #18
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff ff8d 	bl	8000bf8 <lsm6dsl_read_reg>
 8000cde:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8000ce0:	7a3b      	ldrb	r3, [r7, #8]
 8000ce2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	461a      	mov	r2, r3
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	701a      	strb	r2, [r3, #0]

  return ret;
 8000cee:	68fb      	ldr	r3, [r7, #12]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
input_received_flag = 0;
 8000cfe:	4b32      	ldr	r3, [pc, #200]	; (8000dc8 <main+0xd0>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
// initialize command struct
control user_input;
user_input.mode_instructed = 'r'; // r:range, s:speed
 8000d04:	2372      	movs	r3, #114	; 0x72
 8000d06:	75bb      	strb	r3, [r7, #22]
user_input.mode_running = 'x'; // x:none
 8000d08:	2378      	movs	r3, #120	; 0x78
 8000d0a:	75fb      	strb	r3, [r7, #23]
user_input.run_time_sec=0; // length of time in seconds to operate
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	82bb      	strh	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d10:	f000 fff7 	bl	8001d02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d14:	f000 f86a 	bl	8000dec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d18:	f000 fad6 	bl	80012c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d1c:	f000 faa2 	bl	8001264 <MX_DMA_Init>
  MX_ADC1_Init();
 8000d20:	f000 f8b0 	bl	8000e84 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000d24:	f000 f928 	bl	8000f78 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000d28:	f000 fa4e 	bl	80011c8 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000d2c:	f000 f95e 	bl	8000fec <MX_SPI1_Init>
  MX_USB_Device_Init();
 8000d30:	f00c fb4a 	bl	800d3c8 <MX_USB_Device_Init>
  MX_TIM1_Init();
 8000d34:	f000 f998 	bl	8001068 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  set_VCO_input_DAC(&user_input); // starts timer and sets dac output used for VCO
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f000 fc65 	bl	800160c <set_VCO_input_DAC>
  HAL_TIM_Base_Start(&htim1); // start timer 1 for adc1 conversion for radar mixer o/p
 8000d42:	4822      	ldr	r0, [pc, #136]	; (8000dcc <main+0xd4>)
 8000d44:	f007 fabc 	bl	80082c0 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3); // sets output compare for timer1, sets PA10 to toggle on timer1 register reload (40kHz)
 8000d48:	2108      	movs	r1, #8
 8000d4a:	4820      	ldr	r0, [pc, #128]	; (8000dcc <main+0xd4>)
 8000d4c:	f007 fbb0 	bl	80084b0 <HAL_TIM_OC_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_dma_buf_mixer_out, DMA_BUF_LEN); // start the adc with dma
 8000d50:	22c8      	movs	r2, #200	; 0xc8
 8000d52:	491f      	ldr	r1, [pc, #124]	; (8000dd0 <main+0xd8>)
 8000d54:	481f      	ldr	r0, [pc, #124]	; (8000dd4 <main+0xdc>)
 8000d56:	f001 fc4b 	bl	80025f0 <HAL_ADC_Start_DMA>

  /* initialize accelerometer/gyroscope on lsm6dsl */
  stmdev_ctx_t dev_ctx;
  dev_ctx.write_reg = platform_write;
 8000d5a:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <main+0xe0>)
 8000d5c:	607b      	str	r3, [r7, #4]
  dev_ctx.read_reg = platform_read;
 8000d5e:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <main+0xe4>)
 8000d60:	60bb      	str	r3, [r7, #8]
  /* Check device ID */
    whoamI = 0;
 8000d62:	4b1f      	ldr	r3, [pc, #124]	; (8000de0 <main+0xe8>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
    lsm6dsl_device_id_get(&dev_ctx, &whoamI);
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	491d      	ldr	r1, [pc, #116]	; (8000de0 <main+0xe8>)
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ff73 	bl	8000c58 <lsm6dsl_device_id_get>

    if ( whoamI != LSM6DSL_ID )
 8000d72:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <main+0xe8>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b6a      	cmp	r3, #106	; 0x6a
 8000d78:	d000      	beq.n	8000d7c <main+0x84>
      while (1) /*manage here device not found */
 8000d7a:	e7fe      	b.n	8000d7a <main+0x82>
      {

      }
    /* Restore default configuration */
    lsm6dsl_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	2101      	movs	r1, #1
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff7a 	bl	8000c7a <lsm6dsl_reset_set>

    do {
      lsm6dsl_reset_get(&dev_ctx, &rst);
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	4916      	ldr	r1, [pc, #88]	; (8000de4 <main+0xec>)
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff ff9b 	bl	8000cc6 <lsm6dsl_reset_get>
    } while (rst);
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <main+0xec>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d1f6      	bne.n	8000d86 <main+0x8e>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (input_received_flag)
 8000d98:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <main+0xd0>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d00e      	beq.n	8000dbe <main+0xc6>
	  {
	 	    	process_input(&UserRxBufferFS,&user_input);
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4619      	mov	r1, r3
 8000da6:	4810      	ldr	r0, [pc, #64]	; (8000de8 <main+0xf0>)
 8000da8:	f000 fbb0 	bl	800150c <process_input>
	 	    	set_VCO_input_DAC(&user_input);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 fc2b 	bl	800160c <set_VCO_input_DAC>
	 	    	//perform_trial(&user_input);
	 	        input_received_flag=0;
 8000db6:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <main+0xd0>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]
 8000dbc:	e7ec      	b.n	8000d98 <main+0xa0>
	  }
	  else
	  {
	 	    	HAL_Delay(250);
 8000dbe:	20fa      	movs	r0, #250	; 0xfa
 8000dc0:	f001 f810 	bl	8001de4 <HAL_Delay>
	  if (input_received_flag)
 8000dc4:	e7e8      	b.n	8000d98 <main+0xa0>
 8000dc6:	bf00      	nop
 8000dc8:	200044dc 	.word	0x200044dc
 8000dcc:	20002be8 	.word	0x20002be8
 8000dd0:	20002c80 	.word	0x20002c80
 8000dd4:	20002a44 	.word	0x20002a44
 8000dd8:	080013e9 	.word	0x080013e9
 8000ddc:	08001441 	.word	0x08001441
 8000de0:	20002e10 	.word	0x20002e10
 8000de4:	20002e11 	.word	0x20002e11
 8000de8:	200034dc 	.word	0x200034dc

08000dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b094      	sub	sp, #80	; 0x50
 8000df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df2:	f107 0318 	add.w	r3, r7, #24
 8000df6:	2238      	movs	r2, #56	; 0x38
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f00d f842 	bl	800de84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f005 fa86 	bl	8006320 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000e14:	2321      	movs	r3, #33	; 0x21
 8000e16:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e1c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e22:	2302      	movs	r3, #2
 8000e24:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e26:	2303      	movs	r3, #3
 8000e28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8000e2e:	232a      	movs	r3, #42	; 0x2a
 8000e30:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV12;
 8000e32:	230c      	movs	r3, #12
 8000e34:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000e36:	2306      	movs	r3, #6
 8000e38:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3e:	f107 0318 	add.w	r3, r7, #24
 8000e42:	4618      	mov	r0, r3
 8000e44:	f005 fb10 	bl	8006468 <HAL_RCC_OscConfig>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e4e:	f000 fc29 	bl	80016a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e52:	230f      	movs	r3, #15
 8000e54:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e56:	2303      	movs	r3, #3
 8000e58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f005 fe13 	bl	8006a98 <HAL_RCC_ClockConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000e78:	f000 fc14 	bl	80016a4 <Error_Handler>
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	3750      	adds	r7, #80	; 0x50
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08c      	sub	sp, #48	; 0x30
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	2220      	movs	r2, #32
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f00c fff1 	bl	800de84 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ea2:	4b33      	ldr	r3, [pc, #204]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000ea4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ea8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000eaa:	4b31      	ldr	r3, [pc, #196]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000eac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000eb0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb2:	4b2f      	ldr	r3, [pc, #188]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eb8:	4b2d      	ldr	r3, [pc, #180]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000ebe:	4b2c      	ldr	r3, [pc, #176]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ec4:	4b2a      	ldr	r3, [pc, #168]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eca:	4b29      	ldr	r3, [pc, #164]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000ecc:	2204      	movs	r2, #4
 8000ece:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ed0:	4b27      	ldr	r3, [pc, #156]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ed6:	4b26      	ldr	r3, [pc, #152]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000edc:	4b24      	ldr	r3, [pc, #144]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ee2:	4b23      	ldr	r3, [pc, #140]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000eea:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000eec:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000ef0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ef2:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000ef4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ef8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000efa:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f02:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f08:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f10:	4817      	ldr	r0, [pc, #92]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000f12:	f001 f9ab 	bl	800226c <HAL_ADC_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000f1c:	f000 fbc2 	bl	80016a4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f20:	2300      	movs	r3, #0
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4811      	ldr	r0, [pc, #68]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000f2c:	f002 f99a 	bl	8003264 <HAL_ADCEx_MultiModeConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000f36:	f000 fbb5 	bl	80016a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <MX_ADC1_Init+0xf0>)
 8000f3c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f3e:	2306      	movs	r3, #6
 8000f40:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f46:	237f      	movs	r3, #127	; 0x7f
 8000f48:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	4619      	mov	r1, r3
 8000f56:	4806      	ldr	r0, [pc, #24]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000f58:	f001 fc28 	bl	80027ac <HAL_ADC_ConfigChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000f62:	f000 fb9f 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f66:	bf00      	nop
 8000f68:	3730      	adds	r7, #48	; 0x30
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20002a44 	.word	0x20002a44
 8000f74:	04300002 	.word	0x04300002

08000f78 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08c      	sub	sp, #48	; 0x30
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f7e:	463b      	mov	r3, r7
 8000f80:	2230      	movs	r2, #48	; 0x30
 8000f82:	2100      	movs	r1, #0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f00c ff7d 	bl	800de84 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000f8a:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <MX_DAC1_Init+0x6c>)
 8000f8c:	4a16      	ldr	r2, [pc, #88]	; (8000fe8 <MX_DAC1_Init+0x70>)
 8000f8e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000f90:	4814      	ldr	r0, [pc, #80]	; (8000fe4 <MX_DAC1_Init+0x6c>)
 8000f92:	f002 fb7e 	bl	8003692 <HAL_DAC_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000f9c:	f000 fb82 	bl	80016a4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000fb0:	2312      	movs	r3, #18
 8000fb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4806      	ldr	r0, [pc, #24]	; (8000fe4 <MX_DAC1_Init+0x6c>)
 8000fcc:	f002 fd54 	bl	8003a78 <HAL_DAC_ConfigChannel>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000fd6:	f000 fb65 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	3730      	adds	r7, #48	; 0x30
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20002b10 	.word	0x20002b10
 8000fe8:	50000800 	.word	0x50000800

08000fec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <MX_SPI1_Init+0x74>)
 8000ff2:	4a1c      	ldr	r2, [pc, #112]	; (8001064 <MX_SPI1_Init+0x78>)
 8000ff4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <MX_SPI1_Init+0x74>)
 8000ff8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ffc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ffe:	4b18      	ldr	r3, [pc, #96]	; (8001060 <MX_SPI1_Init+0x74>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001004:	4b16      	ldr	r3, [pc, #88]	; (8001060 <MX_SPI1_Init+0x74>)
 8001006:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800100a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <MX_SPI1_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001012:	4b13      	ldr	r3, [pc, #76]	; (8001060 <MX_SPI1_Init+0x74>)
 8001014:	2200      	movs	r2, #0
 8001016:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <MX_SPI1_Init+0x74>)
 800101a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800101e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <MX_SPI1_Init+0x74>)
 8001022:	2220      	movs	r2, #32
 8001024:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <MX_SPI1_Init+0x74>)
 8001028:	2200      	movs	r2, #0
 800102a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <MX_SPI1_Init+0x74>)
 800102e:	2200      	movs	r2, #0
 8001030:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <MX_SPI1_Init+0x74>)
 8001034:	2200      	movs	r2, #0
 8001036:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <MX_SPI1_Init+0x74>)
 800103a:	2207      	movs	r2, #7
 800103c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <MX_SPI1_Init+0x74>)
 8001040:	2200      	movs	r2, #0
 8001042:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <MX_SPI1_Init+0x74>)
 8001046:	2200      	movs	r2, #0
 8001048:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_SPI1_Init+0x74>)
 800104c:	f006 f95e 	bl	800730c <HAL_SPI_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001056:	f000 fb25 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20002b84 	.word	0x20002b84
 8001064:	40013000 	.word	0x40013000

08001068 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b09c      	sub	sp, #112	; 0x70
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800106e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800107c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001088:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
 8001098:	615a      	str	r2, [r3, #20]
 800109a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	2234      	movs	r2, #52	; 0x34
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f00c feee 	bl	800de84 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010a8:	4b45      	ldr	r3, [pc, #276]	; (80011c0 <MX_TIM1_Init+0x158>)
 80010aa:	4a46      	ldr	r2, [pc, #280]	; (80011c4 <MX_TIM1_Init+0x15c>)
 80010ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 42000-1;
 80010ae:	4b44      	ldr	r3, [pc, #272]	; (80011c0 <MX_TIM1_Init+0x158>)
 80010b0:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80010b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b6:	4b42      	ldr	r3, [pc, #264]	; (80011c0 <MX_TIM1_Init+0x158>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 80010bc:	4b40      	ldr	r3, [pc, #256]	; (80011c0 <MX_TIM1_Init+0x158>)
 80010be:	2209      	movs	r2, #9
 80010c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c2:	4b3f      	ldr	r3, [pc, #252]	; (80011c0 <MX_TIM1_Init+0x158>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010c8:	4b3d      	ldr	r3, [pc, #244]	; (80011c0 <MX_TIM1_Init+0x158>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ce:	4b3c      	ldr	r3, [pc, #240]	; (80011c0 <MX_TIM1_Init+0x158>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010d4:	483a      	ldr	r0, [pc, #232]	; (80011c0 <MX_TIM1_Init+0x158>)
 80010d6:	f007 f89b 	bl	8008210 <HAL_TIM_Base_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80010e0:	f000 fae0 	bl	80016a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010ea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010ee:	4619      	mov	r1, r3
 80010f0:	4833      	ldr	r0, [pc, #204]	; (80011c0 <MX_TIM1_Init+0x158>)
 80010f2:	f007 fb69 	bl	80087c8 <HAL_TIM_ConfigClockSource>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80010fc:	f000 fad2 	bl	80016a4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001100:	482f      	ldr	r0, [pc, #188]	; (80011c0 <MX_TIM1_Init+0x158>)
 8001102:	f007 f974 	bl	80083ee <HAL_TIM_OC_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800110c:	f000 faca 	bl	80016a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001110:	2320      	movs	r3, #32
 8001112:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001114:	2300      	movs	r3, #0
 8001116:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001118:	2300      	movs	r3, #0
 800111a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800111c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001120:	4619      	mov	r1, r3
 8001122:	4827      	ldr	r0, [pc, #156]	; (80011c0 <MX_TIM1_Init+0x158>)
 8001124:	f008 f8f0 	bl	8009308 <HAL_TIMEx_MasterConfigSynchronization>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800112e:	f000 fab9 	bl	80016a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001132:	2330      	movs	r3, #48	; 0x30
 8001134:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800113a:	2300      	movs	r3, #0
 800113c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800113e:	2300      	movs	r3, #0
 8001140:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001142:	2300      	movs	r3, #0
 8001144:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001146:	2300      	movs	r3, #0
 8001148:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800114a:	2300      	movs	r3, #0
 800114c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800114e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001152:	2208      	movs	r2, #8
 8001154:	4619      	mov	r1, r3
 8001156:	481a      	ldr	r0, [pc, #104]	; (80011c0 <MX_TIM1_Init+0x158>)
 8001158:	f007 fabc 	bl	80086d4 <HAL_TIM_OC_ConfigChannel>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001162:	f000 fa9f 	bl	80016a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800117a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800117e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001184:	2300      	movs	r3, #0
 8001186:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001188:	2300      	movs	r3, #0
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800118c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001190:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001196:	2300      	movs	r3, #0
 8001198:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800119a:	2300      	movs	r3, #0
 800119c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	4619      	mov	r1, r3
 80011a2:	4807      	ldr	r0, [pc, #28]	; (80011c0 <MX_TIM1_Init+0x158>)
 80011a4:	f008 f946 	bl	8009434 <HAL_TIMEx_ConfigBreakDeadTime>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80011ae:	f000 fa79 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011b2:	4803      	ldr	r0, [pc, #12]	; (80011c0 <MX_TIM1_Init+0x158>)
 80011b4:	f000 fc0c 	bl	80019d0 <HAL_TIM_MspPostInit>

}
 80011b8:	bf00      	nop
 80011ba:	3770      	adds	r7, #112	; 0x70
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20002be8 	.word	0x20002be8
 80011c4:	40012c00 	.word	0x40012c00

080011c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ce:	f107 0310 	add.w	r3, r7, #16
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011e6:	4b1d      	ldr	r3, [pc, #116]	; (800125c <MX_TIM2_Init+0x94>)
 80011e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 255;
 80011ee:	4b1b      	ldr	r3, [pc, #108]	; (800125c <MX_TIM2_Init+0x94>)
 80011f0:	22ff      	movs	r2, #255	; 0xff
 80011f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <MX_TIM2_Init+0x94>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6.5204999E7;
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <MX_TIM2_Init+0x94>)
 80011fc:	4a18      	ldr	r2, [pc, #96]	; (8001260 <MX_TIM2_Init+0x98>)
 80011fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <MX_TIM2_Init+0x94>)
 8001202:	2200      	movs	r2, #0
 8001204:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <MX_TIM2_Init+0x94>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800120c:	4813      	ldr	r0, [pc, #76]	; (800125c <MX_TIM2_Init+0x94>)
 800120e:	f006 ffff 	bl	8008210 <HAL_TIM_Base_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001218:	f000 fa44 	bl	80016a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800121c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001220:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001222:	f107 0310 	add.w	r3, r7, #16
 8001226:	4619      	mov	r1, r3
 8001228:	480c      	ldr	r0, [pc, #48]	; (800125c <MX_TIM2_Init+0x94>)
 800122a:	f007 facd 	bl	80087c8 <HAL_TIM_ConfigClockSource>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001234:	f000 fa36 	bl	80016a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001238:	2320      	movs	r3, #32
 800123a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	4619      	mov	r1, r3
 8001244:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_TIM2_Init+0x94>)
 8001246:	f008 f85f 	bl	8009308 <HAL_TIMEx_MasterConfigSynchronization>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001250:	f000 fa28 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	3720      	adds	r7, #32
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20002c34 	.word	0x20002c34
 8001260:	03e2f307 	.word	0x03e2f307

08001264 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800126a:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <MX_DMA_Init+0x60>)
 800126c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800126e:	4a15      	ldr	r2, [pc, #84]	; (80012c4 <MX_DMA_Init+0x60>)
 8001270:	f043 0304 	orr.w	r3, r3, #4
 8001274:	6493      	str	r3, [r2, #72]	; 0x48
 8001276:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <MX_DMA_Init+0x60>)
 8001278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <MX_DMA_Init+0x60>)
 8001284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001286:	4a0f      	ldr	r2, [pc, #60]	; (80012c4 <MX_DMA_Init+0x60>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6493      	str	r3, [r2, #72]	; 0x48
 800128e:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <MX_DMA_Init+0x60>)
 8001290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2100      	movs	r1, #0
 800129e:	200b      	movs	r0, #11
 80012a0:	f002 f9c3 	bl	800362a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012a4:	200b      	movs	r0, #11
 80012a6:	f002 f9da 	bl	800365e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	200c      	movs	r0, #12
 80012b0:	f002 f9bb 	bl	800362a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80012b4:	200c      	movs	r0, #12
 80012b6:	f002 f9d2 	bl	800365e <HAL_NVIC_EnableIRQ>

}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40021000 	.word	0x40021000

080012c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ce:	f107 030c 	add.w	r3, r7, #12
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
 80012dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012de:	4b40      	ldr	r3, [pc, #256]	; (80013e0 <MX_GPIO_Init+0x118>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	4a3f      	ldr	r2, [pc, #252]	; (80013e0 <MX_GPIO_Init+0x118>)
 80012e4:	f043 0320 	orr.w	r3, r3, #32
 80012e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ea:	4b3d      	ldr	r3, [pc, #244]	; (80013e0 <MX_GPIO_Init+0x118>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	f003 0320 	and.w	r3, r3, #32
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	4b3a      	ldr	r3, [pc, #232]	; (80013e0 <MX_GPIO_Init+0x118>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	4a39      	ldr	r2, [pc, #228]	; (80013e0 <MX_GPIO_Init+0x118>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001302:	4b37      	ldr	r3, [pc, #220]	; (80013e0 <MX_GPIO_Init+0x118>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	4b34      	ldr	r3, [pc, #208]	; (80013e0 <MX_GPIO_Init+0x118>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	4a33      	ldr	r2, [pc, #204]	; (80013e0 <MX_GPIO_Init+0x118>)
 8001314:	f043 0302 	orr.w	r3, r3, #2
 8001318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131a:	4b31      	ldr	r3, [pc, #196]	; (80013e0 <MX_GPIO_Init+0x118>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800132c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001330:	f003 fa88 	bl	8004844 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001334:	2303      	movs	r3, #3
 8001336:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001338:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800133c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001342:	f107 030c 	add.w	r3, r7, #12
 8001346:	4619      	mov	r1, r3
 8001348:	4826      	ldr	r0, [pc, #152]	; (80013e4 <MX_GPIO_Init+0x11c>)
 800134a:	f003 f8f9 	bl	8004540 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800134e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001352:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001354:	2312      	movs	r3, #18
 8001356:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2300      	movs	r3, #0
 800135e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8001360:	2302      	movs	r3, #2
 8001362:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	f107 030c 	add.w	r3, r7, #12
 8001368:	4619      	mov	r1, r3
 800136a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136e:	f003 f8e7 	bl	8004540 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001372:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001376:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001378:	2312      	movs	r3, #18
 800137a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001384:	2304      	movs	r3, #4
 8001386:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	4619      	mov	r1, r3
 800138e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001392:	f003 f8d5 	bl	8004540 <HAL_GPIO_Init>

  /*Configure GPIO pin : LSM6DSL_ncs_Pin */
  GPIO_InitStruct.Pin = LSM6DSL_ncs_Pin;
 8001396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800139a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139c:	2301      	movs	r3, #1
 800139e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LSM6DSL_ncs_GPIO_Port, &GPIO_InitStruct);
 80013a8:	f107 030c 	add.w	r3, r7, #12
 80013ac:	4619      	mov	r1, r3
 80013ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b2:	f003 f8c5 	bl	8004540 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	2006      	movs	r0, #6
 80013bc:	f002 f935 	bl	800362a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013c0:	2006      	movs	r0, #6
 80013c2:	f002 f94c 	bl	800365e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2100      	movs	r1, #0
 80013ca:	2007      	movs	r0, #7
 80013cc:	f002 f92d 	bl	800362a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80013d0:	2007      	movs	r0, #7
 80013d2:	f002 f944 	bl	800365e <HAL_NVIC_EnableIRQ>

}
 80013d6:	bf00      	nop
 80013d8:	3720      	adds	r7, #32
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40021000 	.word	0x40021000
 80013e4:	48000400 	.word	0x48000400

080013e8 <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	607a      	str	r2, [r7, #4]
 80013f2:	461a      	mov	r2, r3
 80013f4:	460b      	mov	r3, r1
 80013f6:	72fb      	strb	r3, [r7, #11]
 80013f8:	4613      	mov	r3, r2
 80013fa:	813b      	strh	r3, [r7, #8]
  HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001402:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001406:	f003 fa1d 	bl	8004844 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 800140a:	f107 010b 	add.w	r1, r7, #11
 800140e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001412:	2201      	movs	r2, #1
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f006 f824 	bl	8007462 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
 800141a:	893a      	ldrh	r2, [r7, #8]
 800141c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	f006 f81d 	bl	8007462 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_SET);
 8001428:	2201      	movs	r2, #1
 800142a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800142e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001432:	f003 fa07 	bl	8004844 <HAL_GPIO_WritePin>
  return 0;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	461a      	mov	r2, r3
 800144c:	460b      	mov	r3, r1
 800144e:	72fb      	strb	r3, [r7, #11]
 8001450:	4613      	mov	r3, r2
 8001452:	813b      	strh	r3, [r7, #8]
	uint8_t tx_data[2];
	tx_data[0] = 0x80 | reg;
 8001454:	7afb      	ldrb	r3, [r7, #11]
 8001456:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800145a:	b2db      	uxtb	r3, r3
 800145c:	753b      	strb	r3, [r7, #20]
	tx_data[1] = 0x00;
 800145e:	2300      	movs	r3, #0
 8001460:	757b      	strb	r3, [r7, #21]
	// Reset the complete flag
	spi_complete_flag = 0;
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <platform_read+0x68>)
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
	// Start the SPI transfer
	HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800146e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001472:	f003 f9e7 	bl	8004844 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, tx_data, bufp, len);
 8001476:	893b      	ldrh	r3, [r7, #8]
 8001478:	f107 0114 	add.w	r1, r7, #20
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	480b      	ldr	r0, [pc, #44]	; (80014ac <platform_read+0x6c>)
 8001480:	f006 f95e 	bl	8007740 <HAL_SPI_TransmitReceive_DMA>
//	  {
//	    /* Transfer error in transmission process */
//	    Error_Handler();
//	  }
	// Wait for the transfer to complete
	while(!spi_complete_flag);
 8001484:	bf00      	nop
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <platform_read+0x68>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0fa      	beq.n	8001486 <platform_read+0x46>

	HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_SET);
 8001490:	2201      	movs	r2, #1
 8001492:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149a:	f003 f9d3 	bl	8004844 <HAL_GPIO_WritePin>
  return 0;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	200031fc 	.word	0x200031fc
 80014ac:	20002b84 	.word	0x20002b84

080014b0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	memcpy(tx_buffer,adc1_dma_buf_mixer_out[DMA_BUF_LEN/2-1],DMA_BUF_LEN/2);
 80014b8:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <HAL_ADC_ConvCpltCallback+0x28>)
 80014ba:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 80014be:	2264      	movs	r2, #100	; 0x64
 80014c0:	4619      	mov	r1, r3
 80014c2:	4806      	ldr	r0, [pc, #24]	; (80014dc <HAL_ADC_ConvCpltCallback+0x2c>)
 80014c4:	f00c fcd0 	bl	800de68 <memcpy>
	CDC_Transmit_FS(tx_buffer, DMA_BUF_LEN/2);
 80014c8:	2164      	movs	r1, #100	; 0x64
 80014ca:	4804      	ldr	r0, [pc, #16]	; (80014dc <HAL_ADC_ConvCpltCallback+0x2c>)
 80014cc:	f00c f854 	bl	800d578 <CDC_Transmit_FS>

}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20002c80 	.word	0x20002c80
 80014dc:	20002e14 	.word	0x20002e14

080014e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	memcpy(tx_buffer,adc1_dma_buf_mixer_out,DMA_BUF_LEN/2);
 80014e8:	2264      	movs	r2, #100	; 0x64
 80014ea:	4906      	ldr	r1, [pc, #24]	; (8001504 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 80014ec:	4806      	ldr	r0, [pc, #24]	; (8001508 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 80014ee:	f00c fcbb 	bl	800de68 <memcpy>
	CDC_Transmit_FS(tx_buffer, DMA_BUF_LEN/2);
 80014f2:	2164      	movs	r1, #100	; 0x64
 80014f4:	4804      	ldr	r0, [pc, #16]	; (8001508 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 80014f6:	f00c f83f 	bl	800d578 <CDC_Transmit_FS>
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20002c80 	.word	0x20002c80
 8001508:	20002e14 	.word	0x20002e14

0800150c <process_input>:
 * process the input received over usb to extract the operating mode and the time of operation
 *
 * @param arr    user input array
 * @param pCommand command struct to return mode and time
*/
void process_input(const uint8_t *arr, control *pControl) {
 800150c:	b480      	push	{r7}
 800150e:	b089      	sub	sp, #36	; 0x24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
    uint8_t mode[]={'m','o','d','e',':'};
 8001516:	4a3b      	ldr	r2, [pc, #236]	; (8001604 <process_input+0xf8>)
 8001518:	f107 0310 	add.w	r3, r7, #16
 800151c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001520:	6018      	str	r0, [r3, #0]
 8001522:	3304      	adds	r3, #4
 8001524:	7019      	strb	r1, [r3, #0]
    uint8_t time[] = {'t','i','m','e',':'};
 8001526:	4a38      	ldr	r2, [pc, #224]	; (8001608 <process_input+0xfc>)
 8001528:	f107 0308 	add.w	r3, r7, #8
 800152c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001530:	6018      	str	r0, [r3, #0]
 8001532:	3304      	adds	r3, #4
 8001534:	7019      	strb	r1, [r3, #0]
    int i = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
    int j = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	61bb      	str	r3, [r7, #24]
    // check input to ensure "mode:" is received
    while (arr[i]==mode[i]) {
 800153e:	e002      	b.n	8001546 <process_input+0x3a>
        i++;
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	3301      	adds	r3, #1
 8001544:	61fb      	str	r3, [r7, #28]
    while (arr[i]==mode[i]) {
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	4413      	add	r3, r2
 800154c:	781a      	ldrb	r2, [r3, #0]
 800154e:	f107 0110 	add.w	r1, r7, #16
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	440b      	add	r3, r1
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	429a      	cmp	r2, r3
 800155a:	d0f1      	beq.n	8001540 <process_input+0x34>
    }
    // set mode in command
    pControl->mode_instructed=arr[i];
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	781a      	ldrb	r2, [r3, #0]
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	709a      	strb	r2, [r3, #2]
    // move index past command for mode and '\n'
    while (arr[i]!='t') {
 8001568:	e002      	b.n	8001570 <process_input+0x64>
        i++;
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3301      	adds	r3, #1
 800156e:	61fb      	str	r3, [r7, #28]
    while (arr[i]!='t') {
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b74      	cmp	r3, #116	; 0x74
 800157a:	d1f6      	bne.n	800156a <process_input+0x5e>
    }
    // check input to ensure "time:" is received
    while (arr[i]==time[j]) {
 800157c:	e005      	b.n	800158a <process_input+0x7e>
        i++;
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3301      	adds	r3, #1
 8001582:	61fb      	str	r3, [r7, #28]
        j++;
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	3301      	adds	r3, #1
 8001588:	61bb      	str	r3, [r7, #24]
    while (arr[i]==time[j]) {
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	4413      	add	r3, r2
 8001590:	781a      	ldrb	r2, [r3, #0]
 8001592:	f107 0108 	add.w	r1, r7, #8
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	440b      	add	r3, r1
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	429a      	cmp	r2, r3
 800159e:	d0ee      	beq.n	800157e <process_input+0x72>
    }
    // set j to index one past first digit of command for time
    j=i+1;
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	3301      	adds	r3, #1
 80015a4:	61bb      	str	r3, [r7, #24]
    // get index of last digit
    while (arr[j]!='\n') {
 80015a6:	e002      	b.n	80015ae <process_input+0xa2>
        j++;
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	3301      	adds	r3, #1
 80015ac:	61bb      	str	r3, [r7, #24]
    while (arr[j]!='\n') {
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	4413      	add	r3, r2
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b0a      	cmp	r3, #10
 80015b8:	d1f6      	bne.n	80015a8 <process_input+0x9c>
    }
    // set runt time to zero
    pControl->run_time_sec=0;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2200      	movs	r2, #0
 80015be:	801a      	strh	r2, [r3, #0]
    // add each digits value,
    // *10 to shift current value left one digit for adding next digit
    // -48 converts from ascii to int
    while (i < j) {
 80015c0:	e014      	b.n	80015ec <process_input+0xe0>
        pControl->run_time_sec=(pControl->run_time_sec*10)+arr[i]-48;
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	0092      	lsls	r2, r2, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	440b      	add	r3, r1
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	b29b      	uxth	r3, r3
 80015da:	4413      	add	r3, r2
 80015dc:	b29b      	uxth	r3, r3
 80015de:	3b30      	subs	r3, #48	; 0x30
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	801a      	strh	r2, [r3, #0]
        i++;
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3301      	adds	r3, #1
 80015ea:	61fb      	str	r3, [r7, #28]
    while (i < j) {
 80015ec:	69fa      	ldr	r2, [r7, #28]
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	dbe6      	blt.n	80015c2 <process_input+0xb6>
    }
}
 80015f4:	bf00      	nop
 80015f6:	bf00      	nop
 80015f8:	3724      	adds	r7, #36	; 0x24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	080108c0 	.word	0x080108c0
 8001608:	080108c8 	.word	0x080108c8

0800160c <set_VCO_input_DAC>:


void set_VCO_input_DAC(control *ctrl_ptr) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af02      	add	r7, sp, #8
 8001612:	6078      	str	r0, [r7, #4]
	// if currently running is as instructed, return
	if (ctrl_ptr->mode_running==ctrl_ptr->mode_instructed) {
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	78da      	ldrb	r2, [r3, #3]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	789b      	ldrb	r3, [r3, #2]
 800161c:	429a      	cmp	r2, r3
 800161e:	d035      	beq.n	800168c <set_VCO_input_DAC+0x80>
		return;
	}

	  /* Set DAC_CH_1 to CTune or VTune based on user input for mode, defaults to range(r)*/
	if (ctrl_ptr->mode_instructed=='r')
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	789b      	ldrb	r3, [r3, #2]
 8001624:	2b72      	cmp	r3, #114	; 0x72
 8001626:	d117      	bne.n	8001658 <set_VCO_input_DAC+0x4c>
	{
		// if currently running in other mode, turn it off
		if (ctrl_ptr->mode_running=='s') {
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	78db      	ldrb	r3, [r3, #3]
 800162c:	2b73      	cmp	r3, #115	; 0x73
 800162e:	d103      	bne.n	8001638 <set_VCO_input_DAC+0x2c>
			HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
 8001630:	2100      	movs	r1, #0
 8001632:	4818      	ldr	r0, [pc, #96]	; (8001694 <set_VCO_input_DAC+0x88>)
 8001634:	f002 f8a2 	bl	800377c <HAL_DAC_Stop>
		}
		// turn on dac using dma and timer 2
		HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,(uint32_t*)VTune,2484,DAC_ALIGN_12B_R);
 8001638:	2300      	movs	r3, #0
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	f640 13b4 	movw	r3, #2484	; 0x9b4
 8001640:	4a15      	ldr	r2, [pc, #84]	; (8001698 <set_VCO_input_DAC+0x8c>)
 8001642:	2100      	movs	r1, #0
 8001644:	4813      	ldr	r0, [pc, #76]	; (8001694 <set_VCO_input_DAC+0x88>)
 8001646:	f002 f8b7 	bl	80037b8 <HAL_DAC_Start_DMA>
		HAL_TIM_Base_Start(&htim2);
 800164a:	4814      	ldr	r0, [pc, #80]	; (800169c <set_VCO_input_DAC+0x90>)
 800164c:	f006 fe38 	bl	80082c0 <HAL_TIM_Base_Start>
		ctrl_ptr->mode_running='r';
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2272      	movs	r2, #114	; 0x72
 8001654:	70da      	strb	r2, [r3, #3]
 8001656:	e01a      	b.n	800168e <set_VCO_input_DAC+0x82>
	}
	else
	{
		if (ctrl_ptr->mode_running=='r') {
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	78db      	ldrb	r3, [r3, #3]
 800165c:	2b72      	cmp	r3, #114	; 0x72
 800165e:	d106      	bne.n	800166e <set_VCO_input_DAC+0x62>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001660:	2100      	movs	r1, #0
 8001662:	480c      	ldr	r0, [pc, #48]	; (8001694 <set_VCO_input_DAC+0x88>)
 8001664:	f002 f976 	bl	8003954 <HAL_DAC_Stop_DMA>
			HAL_TIM_Base_Stop(&htim2);
 8001668:	480c      	ldr	r0, [pc, #48]	; (800169c <set_VCO_input_DAC+0x90>)
 800166a:	f006 fe99 	bl	80083a0 <HAL_TIM_Base_Stop>

		}
		HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800166e:	2100      	movs	r1, #0
 8001670:	4808      	ldr	r0, [pc, #32]	; (8001694 <set_VCO_input_DAC+0x88>)
 8001672:	f002 f830 	bl	80036d6 <HAL_DAC_Start>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, CTune);
 8001676:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <set_VCO_input_DAC+0x94>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2200      	movs	r2, #0
 800167c:	2100      	movs	r1, #0
 800167e:	4805      	ldr	r0, [pc, #20]	; (8001694 <set_VCO_input_DAC+0x88>)
 8001680:	f002 f9b3 	bl	80039ea <HAL_DAC_SetValue>
		ctrl_ptr->mode_running='s';
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2273      	movs	r2, #115	; 0x73
 8001688:	70da      	strb	r2, [r3, #3]
 800168a:	e000      	b.n	800168e <set_VCO_input_DAC+0x82>
		return;
 800168c:	bf00      	nop
	}
}
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20002b10 	.word	0x20002b10
 8001698:	20000004 	.word	0x20000004
 800169c:	20002c34 	.word	0x20002c34
 80016a0:	20000000 	.word	0x20000000

080016a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a8:	b672      	cpsid	i
}
 80016aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ac:	e7fe      	b.n	80016ac <Error_Handler+0x8>
	...

080016b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b6:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <HAL_MspInit+0x44>)
 80016b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ba:	4a0e      	ldr	r2, [pc, #56]	; (80016f4 <HAL_MspInit+0x44>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6613      	str	r3, [r2, #96]	; 0x60
 80016c2:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <HAL_MspInit+0x44>)
 80016c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_MspInit+0x44>)
 80016d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d2:	4a08      	ldr	r2, [pc, #32]	; (80016f4 <HAL_MspInit+0x44>)
 80016d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d8:	6593      	str	r3, [r2, #88]	; 0x58
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_MspInit+0x44>)
 80016dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e2:	603b      	str	r3, [r7, #0]
 80016e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40021000 	.word	0x40021000

080016f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b09e      	sub	sp, #120	; 0x78
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001710:	f107 0310 	add.w	r3, r7, #16
 8001714:	2254      	movs	r2, #84	; 0x54
 8001716:	2100      	movs	r1, #0
 8001718:	4618      	mov	r0, r3
 800171a:	f00c fbb3 	bl	800de84 <memset>
  if(hadc->Instance==ADC1)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001726:	d15f      	bne.n	80017e8 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001728:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800172c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 800172e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001732:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001734:	f107 0310 	add.w	r3, r7, #16
 8001738:	4618      	mov	r0, r3
 800173a:	f005 fb99 	bl	8006e70 <HAL_RCCEx_PeriphCLKConfig>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001744:	f7ff ffae 	bl	80016a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001748:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <HAL_ADC_MspInit+0xf8>)
 800174a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174c:	4a28      	ldr	r2, [pc, #160]	; (80017f0 <HAL_ADC_MspInit+0xf8>)
 800174e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001752:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001754:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <HAL_ADC_MspInit+0xf8>)
 8001756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001758:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001760:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <HAL_ADC_MspInit+0xf8>)
 8001762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001764:	4a22      	ldr	r2, [pc, #136]	; (80017f0 <HAL_ADC_MspInit+0xf8>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800176c:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <HAL_ADC_MspInit+0xf8>)
 800176e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = mixer_op_filtered_Pin;
 8001778:	2301      	movs	r3, #1
 800177a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800177c:	2303      	movs	r3, #3
 800177e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(mixer_op_filtered_GPIO_Port, &GPIO_InitStruct);
 8001784:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001788:	4619      	mov	r1, r3
 800178a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178e:	f002 fed7 	bl	8004540 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <HAL_ADC_MspInit+0xfc>)
 8001794:	4a18      	ldr	r2, [pc, #96]	; (80017f8 <HAL_ADC_MspInit+0x100>)
 8001796:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001798:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <HAL_ADC_MspInit+0xfc>)
 800179a:	2205      	movs	r2, #5
 800179c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <HAL_ADC_MspInit+0xfc>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <HAL_ADC_MspInit+0xfc>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017aa:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <HAL_ADC_MspInit+0xfc>)
 80017ac:	2280      	movs	r2, #128	; 0x80
 80017ae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017b0:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <HAL_ADC_MspInit+0xfc>)
 80017b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017b6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017b8:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <HAL_ADC_MspInit+0xfc>)
 80017ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017be:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <HAL_ADC_MspInit+0xfc>)
 80017c2:	2220      	movs	r2, #32
 80017c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_ADC_MspInit+0xfc>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017cc:	4809      	ldr	r0, [pc, #36]	; (80017f4 <HAL_ADC_MspInit+0xfc>)
 80017ce:	f002 fb85 	bl	8003edc <HAL_DMA_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80017d8:	f7ff ff64 	bl	80016a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a05      	ldr	r2, [pc, #20]	; (80017f4 <HAL_ADC_MspInit+0xfc>)
 80017e0:	655a      	str	r2, [r3, #84]	; 0x54
 80017e2:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <HAL_ADC_MspInit+0xfc>)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017e8:	bf00      	nop
 80017ea:	3778      	adds	r7, #120	; 0x78
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40021000 	.word	0x40021000
 80017f4:	20002ab0 	.word	0x20002ab0
 80017f8:	4002001c 	.word	0x4002001c

080017fc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	; 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a2b      	ldr	r2, [pc, #172]	; (80018c8 <HAL_DAC_MspInit+0xcc>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d150      	bne.n	80018c0 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800181e:	4b2b      	ldr	r3, [pc, #172]	; (80018cc <HAL_DAC_MspInit+0xd0>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	4a2a      	ldr	r2, [pc, #168]	; (80018cc <HAL_DAC_MspInit+0xd0>)
 8001824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182a:	4b28      	ldr	r3, [pc, #160]	; (80018cc <HAL_DAC_MspInit+0xd0>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001836:	4b25      	ldr	r3, [pc, #148]	; (80018cc <HAL_DAC_MspInit+0xd0>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	4a24      	ldr	r2, [pc, #144]	; (80018cc <HAL_DAC_MspInit+0xd0>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001842:	4b22      	ldr	r3, [pc, #136]	; (80018cc <HAL_DAC_MspInit+0xd0>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800184e:	2310      	movs	r3, #16
 8001850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001852:	2303      	movs	r3, #3
 8001854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185a:	f107 0314 	add.w	r3, r7, #20
 800185e:	4619      	mov	r1, r3
 8001860:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001864:	f002 fe6c 	bl	8004540 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8001868:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <HAL_DAC_MspInit+0xd4>)
 800186a:	4a1a      	ldr	r2, [pc, #104]	; (80018d4 <HAL_DAC_MspInit+0xd8>)
 800186c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800186e:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <HAL_DAC_MspInit+0xd4>)
 8001870:	2206      	movs	r2, #6
 8001872:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001874:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <HAL_DAC_MspInit+0xd4>)
 8001876:	2210      	movs	r2, #16
 8001878:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <HAL_DAC_MspInit+0xd4>)
 800187c:	2200      	movs	r2, #0
 800187e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001880:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <HAL_DAC_MspInit+0xd4>)
 8001882:	2280      	movs	r2, #128	; 0x80
 8001884:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001886:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <HAL_DAC_MspInit+0xd4>)
 8001888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800188c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800188e:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <HAL_DAC_MspInit+0xd4>)
 8001890:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001894:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001896:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <HAL_DAC_MspInit+0xd4>)
 8001898:	2220      	movs	r2, #32
 800189a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <HAL_DAC_MspInit+0xd4>)
 800189e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80018a4:	480a      	ldr	r0, [pc, #40]	; (80018d0 <HAL_DAC_MspInit+0xd4>)
 80018a6:	f002 fb19 	bl	8003edc <HAL_DMA_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 80018b0:	f7ff fef8 	bl	80016a4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a06      	ldr	r2, [pc, #24]	; (80018d0 <HAL_DAC_MspInit+0xd4>)
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	4a05      	ldr	r2, [pc, #20]	; (80018d0 <HAL_DAC_MspInit+0xd4>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80018c0:	bf00      	nop
 80018c2:	3728      	adds	r7, #40	; 0x28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	50000800 	.word	0x50000800
 80018cc:	40021000 	.word	0x40021000
 80018d0:	20002b24 	.word	0x20002b24
 80018d4:	40020008 	.word	0x40020008

080018d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	; 0x28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a1b      	ldr	r2, [pc, #108]	; (8001964 <HAL_SPI_MspInit+0x8c>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d130      	bne.n	800195c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018fa:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <HAL_SPI_MspInit+0x90>)
 80018fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fe:	4a1a      	ldr	r2, [pc, #104]	; (8001968 <HAL_SPI_MspInit+0x90>)
 8001900:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001904:	6613      	str	r3, [r2, #96]	; 0x60
 8001906:	4b18      	ldr	r3, [pc, #96]	; (8001968 <HAL_SPI_MspInit+0x90>)
 8001908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_SPI_MspInit+0x90>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001916:	4a14      	ldr	r2, [pc, #80]	; (8001968 <HAL_SPI_MspInit+0x90>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800191e:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_SPI_MspInit+0x90>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800192a:	23e0      	movs	r3, #224	; 0xe0
 800192c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001936:	2300      	movs	r3, #0
 8001938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800193a:	2305      	movs	r3, #5
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	4619      	mov	r1, r3
 8001944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001948:	f002 fdfa 	bl	8004540 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800194c:	2200      	movs	r2, #0
 800194e:	2100      	movs	r1, #0
 8001950:	2023      	movs	r0, #35	; 0x23
 8001952:	f001 fe6a 	bl	800362a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001956:	2023      	movs	r0, #35	; 0x23
 8001958:	f001 fe81 	bl	800365e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800195c:	bf00      	nop
 800195e:	3728      	adds	r7, #40	; 0x28
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40013000 	.word	0x40013000
 8001968:	40021000 	.word	0x40021000

0800196c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a13      	ldr	r2, [pc, #76]	; (80019c8 <HAL_TIM_Base_MspInit+0x5c>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d10c      	bne.n	8001998 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800197e:	4b13      	ldr	r3, [pc, #76]	; (80019cc <HAL_TIM_Base_MspInit+0x60>)
 8001980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001982:	4a12      	ldr	r2, [pc, #72]	; (80019cc <HAL_TIM_Base_MspInit+0x60>)
 8001984:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001988:	6613      	str	r3, [r2, #96]	; 0x60
 800198a:	4b10      	ldr	r3, [pc, #64]	; (80019cc <HAL_TIM_Base_MspInit+0x60>)
 800198c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800198e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001996:	e010      	b.n	80019ba <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019a0:	d10b      	bne.n	80019ba <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <HAL_TIM_Base_MspInit+0x60>)
 80019a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a6:	4a09      	ldr	r2, [pc, #36]	; (80019cc <HAL_TIM_Base_MspInit+0x60>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6593      	str	r3, [r2, #88]	; 0x58
 80019ae:	4b07      	ldr	r3, [pc, #28]	; (80019cc <HAL_TIM_Base_MspInit+0x60>)
 80019b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]
}
 80019ba:	bf00      	nop
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40012c00 	.word	0x40012c00
 80019cc:	40021000 	.word	0x40021000

080019d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 030c 	add.w	r3, r7, #12
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a12      	ldr	r2, [pc, #72]	; (8001a38 <HAL_TIM_MspPostInit+0x68>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d11d      	bne.n	8001a2e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f2:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <HAL_TIM_MspPostInit+0x6c>)
 80019f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f6:	4a11      	ldr	r2, [pc, #68]	; (8001a3c <HAL_TIM_MspPostInit+0x6c>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019fe:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <HAL_TIM_MspPostInit+0x6c>)
 8001a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a10:	2302      	movs	r3, #2
 8001a12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001a1c:	2306      	movs	r3, #6
 8001a1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a20:	f107 030c 	add.w	r3, r7, #12
 8001a24:	4619      	mov	r1, r3
 8001a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a2a:	f002 fd89 	bl	8004540 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a2e:	bf00      	nop
 8001a30:	3720      	adds	r7, #32
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40012c00 	.word	0x40012c00
 8001a3c:	40021000 	.word	0x40021000

08001a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <NMI_Handler+0x4>

08001a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a4a:	e7fe      	b.n	8001a4a <HardFault_Handler+0x4>

08001a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <MemManage_Handler+0x4>

08001a52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a56:	e7fe      	b.n	8001a56 <BusFault_Handler+0x4>

08001a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <UsageFault_Handler+0x4>

08001a5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a8c:	f000 f98c 	bl	8001da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001a98:	2001      	movs	r0, #1
 8001a9a:	f002 feeb 	bl	8004874 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001aa6:	2002      	movs	r0, #2
 8001aa8:	f002 fee4 	bl	8004874 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <DMA1_Channel1_IRQHandler+0x10>)
 8001ab6:	f002 fbf4 	bl	80042a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20002b24 	.word	0x20002b24

08001ac4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ac8:	4802      	ldr	r0, [pc, #8]	; (8001ad4 <DMA1_Channel2_IRQHandler+0x10>)
 8001aca:	f002 fbea 	bl	80042a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20002ab0 	.word	0x20002ab0

08001ad8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <USB_LP_IRQHandler+0x10>)
 8001ade:	f002 fff3 	bl	8004ac8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200046e0 	.word	0x200046e0

08001aec <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001af0:	4802      	ldr	r0, [pc, #8]	; (8001afc <SPI1_IRQHandler+0x10>)
 8001af2:	f005 ffb1 	bl	8007a58 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20002b84 	.word	0x20002b84

08001b00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
	return 1;
 8001b04:	2301      	movs	r3, #1
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <_kill>:

int _kill(int pid, int sig)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b1a:	f00c f97b 	bl	800de14 <__errno>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2216      	movs	r2, #22
 8001b22:	601a      	str	r2, [r3, #0]
	return -1;
 8001b24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <_exit>:

void _exit (int status)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff ffe7 	bl	8001b10 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b42:	e7fe      	b.n	8001b42 <_exit+0x12>

08001b44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	e00a      	b.n	8001b6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b56:	f3af 8000 	nop.w
 8001b5a:	4601      	mov	r1, r0
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	60ba      	str	r2, [r7, #8]
 8001b62:	b2ca      	uxtb	r2, r1
 8001b64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	dbf0      	blt.n	8001b56 <_read+0x12>
	}

return len;
 8001b74:	687b      	ldr	r3, [r7, #4]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b086      	sub	sp, #24
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	60f8      	str	r0, [r7, #12]
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	e009      	b.n	8001ba4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	60ba      	str	r2, [r7, #8]
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	dbf1      	blt.n	8001b90 <_write+0x12>
	}
	return len;
 8001bac:	687b      	ldr	r3, [r7, #4]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <_close>:

int _close(int file)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
	return -1;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bde:	605a      	str	r2, [r3, #4]
	return 0;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <_isatty>:

int _isatty(int file)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
	return 1;
 8001bf6:	2301      	movs	r3, #1
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
	return 0;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
	...

08001c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c28:	4a14      	ldr	r2, [pc, #80]	; (8001c7c <_sbrk+0x5c>)
 8001c2a:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <_sbrk+0x60>)
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c34:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <_sbrk+0x64>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d102      	bne.n	8001c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <_sbrk+0x64>)
 8001c3e:	4a12      	ldr	r2, [pc, #72]	; (8001c88 <_sbrk+0x68>)
 8001c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <_sbrk+0x64>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d207      	bcs.n	8001c60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c50:	f00c f8e0 	bl	800de14 <__errno>
 8001c54:	4603      	mov	r3, r0
 8001c56:	220c      	movs	r2, #12
 8001c58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c5e:	e009      	b.n	8001c74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c60:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <_sbrk+0x64>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c66:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <_sbrk+0x64>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	4a05      	ldr	r2, [pc, #20]	; (8001c84 <_sbrk+0x64>)
 8001c70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c72:	68fb      	ldr	r3, [r7, #12]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20020000 	.word	0x20020000
 8001c80:	00000400 	.word	0x00000400
 8001c84:	20003200 	.word	0x20003200
 8001c88:	20004c08 	.word	0x20004c08

08001c8c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <SystemInit+0x20>)
 8001c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c96:	4a05      	ldr	r2, [pc, #20]	; (8001cac <SystemInit+0x20>)
 8001c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cb0:	480d      	ldr	r0, [pc, #52]	; (8001ce8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cb2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cb4:	480d      	ldr	r0, [pc, #52]	; (8001cec <LoopForever+0x6>)
  ldr r1, =_edata
 8001cb6:	490e      	ldr	r1, [pc, #56]	; (8001cf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cb8:	4a0e      	ldr	r2, [pc, #56]	; (8001cf4 <LoopForever+0xe>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001cbc:	e002      	b.n	8001cc4 <LoopCopyDataInit>

08001cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cc2:	3304      	adds	r3, #4

08001cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc8:	d3f9      	bcc.n	8001cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cca:	4a0b      	ldr	r2, [pc, #44]	; (8001cf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ccc:	4c0b      	ldr	r4, [pc, #44]	; (8001cfc <LoopForever+0x16>)
  movs r3, #0
 8001cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd0:	e001      	b.n	8001cd6 <LoopFillZerobss>

08001cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd4:	3204      	adds	r2, #4

08001cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd8:	d3fb      	bcc.n	8001cd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cda:	f7ff ffd7 	bl	8001c8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cde:	f00c f89f 	bl	800de20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ce2:	f7ff f809 	bl	8000cf8 <main>

08001ce6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ce6:	e7fe      	b.n	8001ce6 <LoopForever>
  ldr   r0, =_estack
 8001ce8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf0:	20002a28 	.word	0x20002a28
  ldr r2, =_sidata
 8001cf4:	08010d0c 	.word	0x08010d0c
  ldr r2, =_sbss
 8001cf8:	20002a28 	.word	0x20002a28
  ldr r4, =_ebss
 8001cfc:	20004c04 	.word	0x20004c04

08001d00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d00:	e7fe      	b.n	8001d00 <ADC1_2_IRQHandler>

08001d02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d0c:	2003      	movs	r0, #3
 8001d0e:	f001 fc81 	bl	8003614 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d12:	200f      	movs	r0, #15
 8001d14:	f000 f80e 	bl	8001d34 <HAL_InitTick>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d002      	beq.n	8001d24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	71fb      	strb	r3, [r7, #7]
 8001d22:	e001      	b.n	8001d28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d24:	f7ff fcc4 	bl	80016b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d28:	79fb      	ldrb	r3, [r7, #7]

}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d40:	4b16      	ldr	r3, [pc, #88]	; (8001d9c <HAL_InitTick+0x68>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d022      	beq.n	8001d8e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d48:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <HAL_InitTick+0x6c>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <HAL_InitTick+0x68>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d54:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f001 fc8c 	bl	800367a <HAL_SYSTICK_Config>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10f      	bne.n	8001d88 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b0f      	cmp	r3, #15
 8001d6c:	d809      	bhi.n	8001d82 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	6879      	ldr	r1, [r7, #4]
 8001d72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d76:	f001 fc58 	bl	800362a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d7a:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <HAL_InitTick+0x70>)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6013      	str	r3, [r2, #0]
 8001d80:	e007      	b.n	8001d92 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	73fb      	strb	r3, [r7, #15]
 8001d86:	e004      	b.n	8001d92 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	73fb      	strb	r3, [r7, #15]
 8001d8c:	e001      	b.n	8001d92 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	200026dc 	.word	0x200026dc
 8001da0:	200026d4 	.word	0x200026d4
 8001da4:	200026d8 	.word	0x200026d8

08001da8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <HAL_IncTick+0x1c>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <HAL_IncTick+0x20>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4413      	add	r3, r2
 8001db6:	4a03      	ldr	r2, [pc, #12]	; (8001dc4 <HAL_IncTick+0x1c>)
 8001db8:	6013      	str	r3, [r2, #0]
}
 8001dba:	bf00      	nop
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	20003204 	.word	0x20003204
 8001dc8:	200026dc 	.word	0x200026dc

08001dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd0:	4b03      	ldr	r3, [pc, #12]	; (8001de0 <HAL_GetTick+0x14>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	20003204 	.word	0x20003204

08001de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dec:	f7ff ffee 	bl	8001dcc <HAL_GetTick>
 8001df0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dfc:	d004      	beq.n	8001e08 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <HAL_Delay+0x40>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	4413      	add	r3, r2
 8001e06:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e08:	bf00      	nop
 8001e0a:	f7ff ffdf 	bl	8001dcc <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d8f7      	bhi.n	8001e0a <HAL_Delay+0x26>
  {
  }
}
 8001e1a:	bf00      	nop
 8001e1c:	bf00      	nop
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	200026dc 	.word	0x200026dc

08001e28 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	609a      	str	r2, [r3, #8]
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	609a      	str	r2, [r3, #8]
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b087      	sub	sp, #28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
 8001e9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	3360      	adds	r3, #96	; 0x60
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <LL_ADC_SetOffset+0x44>)
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ec8:	bf00      	nop
 8001eca:	371c      	adds	r7, #28
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	03fff000 	.word	0x03fff000

08001ed8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3360      	adds	r3, #96	; 0x60
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b087      	sub	sp, #28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	3360      	adds	r3, #96	; 0x60
 8001f14:	461a      	mov	r2, r3
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f2e:	bf00      	nop
 8001f30:	371c      	adds	r7, #28
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b087      	sub	sp, #28
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	3360      	adds	r3, #96	; 0x60
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001f64:	bf00      	nop
 8001f66:	371c      	adds	r7, #28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b087      	sub	sp, #28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	3360      	adds	r3, #96	; 0x60
 8001f80:	461a      	mov	r2, r3
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	431a      	orrs	r2, r3
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001f9a:	bf00      	nop
 8001f9c:	371c      	adds	r7, #28
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	615a      	str	r2, [r3, #20]
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e000      	b.n	8001fe6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b087      	sub	sp, #28
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	60f8      	str	r0, [r7, #12]
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	3330      	adds	r3, #48	; 0x30
 8002002:	461a      	mov	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	0a1b      	lsrs	r3, r3, #8
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	f003 030c 	and.w	r3, r3, #12
 800200e:	4413      	add	r3, r2
 8002010:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	f003 031f 	and.w	r3, r3, #31
 800201c:	211f      	movs	r1, #31
 800201e:	fa01 f303 	lsl.w	r3, r1, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	401a      	ands	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	0e9b      	lsrs	r3, r3, #26
 800202a:	f003 011f 	and.w	r1, r3, #31
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	f003 031f 	and.w	r3, r3, #31
 8002034:	fa01 f303 	lsl.w	r3, r1, r3
 8002038:	431a      	orrs	r2, r3
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800203e:	bf00      	nop
 8002040:	371c      	adds	r7, #28
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800204a:	b480      	push	{r7}
 800204c:	b087      	sub	sp, #28
 800204e:	af00      	add	r7, sp, #0
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	3314      	adds	r3, #20
 800205a:	461a      	mov	r2, r3
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	0e5b      	lsrs	r3, r3, #25
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	4413      	add	r3, r2
 8002068:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	0d1b      	lsrs	r3, r3, #20
 8002072:	f003 031f 	and.w	r3, r3, #31
 8002076:	2107      	movs	r1, #7
 8002078:	fa01 f303 	lsl.w	r3, r1, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	401a      	ands	r2, r3
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	0d1b      	lsrs	r3, r3, #20
 8002084:	f003 031f 	and.w	r3, r3, #31
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	fa01 f303 	lsl.w	r3, r1, r3
 800208e:	431a      	orrs	r2, r3
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002094:	bf00      	nop
 8002096:	371c      	adds	r7, #28
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a0f      	ldr	r2, [pc, #60]	; (80020ec <LL_ADC_SetChannelSingleDiff+0x4c>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d10a      	bne.n	80020ca <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c0:	431a      	orrs	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80020c8:	e00a      	b.n	80020e0 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d6:	43db      	mvns	r3, r3
 80020d8:	401a      	ands	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80020e0:	bf00      	nop
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	407f0000 	.word	0x407f0000

080020f0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 031f 	and.w	r3, r3, #31
}
 8002100:	4618      	mov	r0, r3
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800211c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6093      	str	r3, [r2, #8]
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002144:	d101      	bne.n	800214a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002168:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800216c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002190:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002194:	d101      	bne.n	800219a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021bc:	f043 0201 	orr.w	r2, r3, #1
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d101      	bne.n	80021e8 <LL_ADC_IsEnabled+0x18>
 80021e4:	2301      	movs	r3, #1
 80021e6:	e000      	b.n	80021ea <LL_ADC_IsEnabled+0x1a>
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002206:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800220a:	f043 0204 	orr.w	r2, r3, #4
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	2b04      	cmp	r3, #4
 8002230:	d101      	bne.n	8002236 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b08      	cmp	r3, #8
 8002256:	d101      	bne.n	800225c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002258:	2301      	movs	r3, #1
 800225a:	e000      	b.n	800225e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
	...

0800226c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800226c:	b590      	push	{r4, r7, lr}
 800226e:	b089      	sub	sp, #36	; 0x24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002274:	2300      	movs	r3, #0
 8002276:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002278:	2300      	movs	r3, #0
 800227a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e1af      	b.n	80025e6 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002290:	2b00      	cmp	r3, #0
 8002292:	d109      	bne.n	80022a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff fa2f 	bl	80016f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff ff3f 	bl	8002130 <LL_ADC_IsDeepPowerDownEnabled>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d004      	beq.n	80022c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ff25 	bl	800210c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff ff5a 	bl	8002180 <LL_ADC_IsInternalRegulatorEnabled>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d115      	bne.n	80022fe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff ff3e 	bl	8002158 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022dc:	4b9f      	ldr	r3, [pc, #636]	; (800255c <HAL_ADC_Init+0x2f0>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	099b      	lsrs	r3, r3, #6
 80022e2:	4a9f      	ldr	r2, [pc, #636]	; (8002560 <HAL_ADC_Init+0x2f4>)
 80022e4:	fba2 2303 	umull	r2, r3, r2, r3
 80022e8:	099b      	lsrs	r3, r3, #6
 80022ea:	3301      	adds	r3, #1
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022f0:	e002      	b.n	80022f8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	3b01      	subs	r3, #1
 80022f6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f9      	bne.n	80022f2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff ff3c 	bl	8002180 <LL_ADC_IsInternalRegulatorEnabled>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10d      	bne.n	800232a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002312:	f043 0210 	orr.w	r2, r3, #16
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800231e:	f043 0201 	orr.w	r2, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff ff75 	bl	800221e <LL_ADC_REG_IsConversionOngoing>
 8002334:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233a:	f003 0310 	and.w	r3, r3, #16
 800233e:	2b00      	cmp	r3, #0
 8002340:	f040 8148 	bne.w	80025d4 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	2b00      	cmp	r3, #0
 8002348:	f040 8144 	bne.w	80025d4 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002350:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002354:	f043 0202 	orr.w	r2, r3, #2
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff35 	bl	80021d0 <LL_ADC_IsEnabled>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d141      	bne.n	80023f0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002374:	d004      	beq.n	8002380 <HAL_ADC_Init+0x114>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a7a      	ldr	r2, [pc, #488]	; (8002564 <HAL_ADC_Init+0x2f8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d10f      	bne.n	80023a0 <HAL_ADC_Init+0x134>
 8002380:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002384:	f7ff ff24 	bl	80021d0 <LL_ADC_IsEnabled>
 8002388:	4604      	mov	r4, r0
 800238a:	4876      	ldr	r0, [pc, #472]	; (8002564 <HAL_ADC_Init+0x2f8>)
 800238c:	f7ff ff20 	bl	80021d0 <LL_ADC_IsEnabled>
 8002390:	4603      	mov	r3, r0
 8002392:	4323      	orrs	r3, r4
 8002394:	2b00      	cmp	r3, #0
 8002396:	bf0c      	ite	eq
 8002398:	2301      	moveq	r3, #1
 800239a:	2300      	movne	r3, #0
 800239c:	b2db      	uxtb	r3, r3
 800239e:	e012      	b.n	80023c6 <HAL_ADC_Init+0x15a>
 80023a0:	4871      	ldr	r0, [pc, #452]	; (8002568 <HAL_ADC_Init+0x2fc>)
 80023a2:	f7ff ff15 	bl	80021d0 <LL_ADC_IsEnabled>
 80023a6:	4604      	mov	r4, r0
 80023a8:	4870      	ldr	r0, [pc, #448]	; (800256c <HAL_ADC_Init+0x300>)
 80023aa:	f7ff ff11 	bl	80021d0 <LL_ADC_IsEnabled>
 80023ae:	4603      	mov	r3, r0
 80023b0:	431c      	orrs	r4, r3
 80023b2:	486f      	ldr	r0, [pc, #444]	; (8002570 <HAL_ADC_Init+0x304>)
 80023b4:	f7ff ff0c 	bl	80021d0 <LL_ADC_IsEnabled>
 80023b8:	4603      	mov	r3, r0
 80023ba:	4323      	orrs	r3, r4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	bf0c      	ite	eq
 80023c0:	2301      	moveq	r3, #1
 80023c2:	2300      	movne	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d012      	beq.n	80023f0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023d2:	d004      	beq.n	80023de <HAL_ADC_Init+0x172>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a62      	ldr	r2, [pc, #392]	; (8002564 <HAL_ADC_Init+0x2f8>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d101      	bne.n	80023e2 <HAL_ADC_Init+0x176>
 80023de:	4a65      	ldr	r2, [pc, #404]	; (8002574 <HAL_ADC_Init+0x308>)
 80023e0:	e000      	b.n	80023e4 <HAL_ADC_Init+0x178>
 80023e2:	4a65      	ldr	r2, [pc, #404]	; (8002578 <HAL_ADC_Init+0x30c>)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	4619      	mov	r1, r3
 80023ea:	4610      	mov	r0, r2
 80023ec:	f7ff fd1c 	bl	8001e28 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	7f5b      	ldrb	r3, [r3, #29]
 80023f4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023fa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002400:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002406:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800240e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800241a:	2b01      	cmp	r3, #1
 800241c:	d106      	bne.n	800242c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002422:	3b01      	subs	r3, #1
 8002424:	045b      	lsls	r3, r3, #17
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002430:	2b00      	cmp	r3, #0
 8002432:	d009      	beq.n	8002448 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002438:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002440:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	4b4b      	ldr	r3, [pc, #300]	; (800257c <HAL_ADC_Init+0x310>)
 8002450:	4013      	ands	r3, r2
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6812      	ldr	r2, [r2, #0]
 8002456:	69b9      	ldr	r1, [r7, #24]
 8002458:	430b      	orrs	r3, r1
 800245a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fed1 	bl	800221e <LL_ADC_REG_IsConversionOngoing>
 800247c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fede 	bl	8002244 <LL_ADC_INJ_IsConversionOngoing>
 8002488:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d17f      	bne.n	8002590 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d17c      	bne.n	8002590 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800249a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024a2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024b2:	f023 0302 	bic.w	r3, r3, #2
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6812      	ldr	r2, [r2, #0]
 80024ba:	69b9      	ldr	r1, [r7, #24]
 80024bc:	430b      	orrs	r3, r1
 80024be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d017      	beq.n	80024f8 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	691a      	ldr	r2, [r3, #16]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80024d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80024e0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6911      	ldr	r1, [r2, #16]
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	430b      	orrs	r3, r1
 80024f2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80024f6:	e013      	b.n	8002520 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002506:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002518:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800251c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002526:	2b01      	cmp	r3, #1
 8002528:	d12a      	bne.n	8002580 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002534:	f023 0304 	bic.w	r3, r3, #4
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002540:	4311      	orrs	r1, r2
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002546:	4311      	orrs	r1, r2
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800254c:	430a      	orrs	r2, r1
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f042 0201 	orr.w	r2, r2, #1
 8002558:	611a      	str	r2, [r3, #16]
 800255a:	e019      	b.n	8002590 <HAL_ADC_Init+0x324>
 800255c:	200026d4 	.word	0x200026d4
 8002560:	053e2d63 	.word	0x053e2d63
 8002564:	50000100 	.word	0x50000100
 8002568:	50000400 	.word	0x50000400
 800256c:	50000500 	.word	0x50000500
 8002570:	50000600 	.word	0x50000600
 8002574:	50000300 	.word	0x50000300
 8002578:	50000700 	.word	0x50000700
 800257c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0201 	bic.w	r2, r2, #1
 800258e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d10c      	bne.n	80025b2 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f023 010f 	bic.w	r1, r3, #15
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	1e5a      	subs	r2, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	631a      	str	r2, [r3, #48]	; 0x30
 80025b0:	e007      	b.n	80025c2 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 020f 	bic.w	r2, r2, #15
 80025c0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c6:	f023 0303 	bic.w	r3, r3, #3
 80025ca:	f043 0201 	orr.w	r2, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80025d2:	e007      	b.n	80025e4 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d8:	f043 0210 	orr.w	r2, r3, #16
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80025e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3724      	adds	r7, #36	; 0x24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd90      	pop	{r4, r7, pc}
 80025ee:	bf00      	nop

080025f0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002604:	d004      	beq.n	8002610 <HAL_ADC_Start_DMA+0x20>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a5a      	ldr	r2, [pc, #360]	; (8002774 <HAL_ADC_Start_DMA+0x184>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d101      	bne.n	8002614 <HAL_ADC_Start_DMA+0x24>
 8002610:	4b59      	ldr	r3, [pc, #356]	; (8002778 <HAL_ADC_Start_DMA+0x188>)
 8002612:	e000      	b.n	8002616 <HAL_ADC_Start_DMA+0x26>
 8002614:	4b59      	ldr	r3, [pc, #356]	; (800277c <HAL_ADC_Start_DMA+0x18c>)
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fd6a 	bl	80020f0 <LL_ADC_GetMultimode>
 800261c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fdfb 	bl	800221e <LL_ADC_REG_IsConversionOngoing>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	f040 809b 	bne.w	8002766 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002636:	2b01      	cmp	r3, #1
 8002638:	d101      	bne.n	800263e <HAL_ADC_Start_DMA+0x4e>
 800263a:	2302      	movs	r3, #2
 800263c:	e096      	b.n	800276c <HAL_ADC_Start_DMA+0x17c>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a4d      	ldr	r2, [pc, #308]	; (8002780 <HAL_ADC_Start_DMA+0x190>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d008      	beq.n	8002662 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d005      	beq.n	8002662 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	2b05      	cmp	r3, #5
 800265a:	d002      	beq.n	8002662 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	2b09      	cmp	r3, #9
 8002660:	d17a      	bne.n	8002758 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f000 fce2 	bl	800302c <ADC_Enable>
 8002668:	4603      	mov	r3, r0
 800266a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800266c:	7dfb      	ldrb	r3, [r7, #23]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d16d      	bne.n	800274e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002676:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800267a:	f023 0301 	bic.w	r3, r3, #1
 800267e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a3a      	ldr	r2, [pc, #232]	; (8002774 <HAL_ADC_Start_DMA+0x184>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d009      	beq.n	80026a4 <HAL_ADC_Start_DMA+0xb4>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a3b      	ldr	r2, [pc, #236]	; (8002784 <HAL_ADC_Start_DMA+0x194>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d002      	beq.n	80026a0 <HAL_ADC_Start_DMA+0xb0>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	e003      	b.n	80026a8 <HAL_ADC_Start_DMA+0xb8>
 80026a0:	4b39      	ldr	r3, [pc, #228]	; (8002788 <HAL_ADC_Start_DMA+0x198>)
 80026a2:	e001      	b.n	80026a8 <HAL_ADC_Start_DMA+0xb8>
 80026a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d002      	beq.n	80026b6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d105      	bne.n	80026c2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d006      	beq.n	80026dc <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d2:	f023 0206 	bic.w	r2, r3, #6
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	661a      	str	r2, [r3, #96]	; 0x60
 80026da:	e002      	b.n	80026e2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e6:	4a29      	ldr	r2, [pc, #164]	; (800278c <HAL_ADC_Start_DMA+0x19c>)
 80026e8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ee:	4a28      	ldr	r2, [pc, #160]	; (8002790 <HAL_ADC_Start_DMA+0x1a0>)
 80026f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f6:	4a27      	ldr	r2, [pc, #156]	; (8002794 <HAL_ADC_Start_DMA+0x1a4>)
 80026f8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	221c      	movs	r2, #28
 8002700:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f042 0210 	orr.w	r2, r2, #16
 8002718:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f042 0201 	orr.w	r2, r2, #1
 8002728:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	3340      	adds	r3, #64	; 0x40
 8002734:	4619      	mov	r1, r3
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f001 fc77 	bl	800402c <HAL_DMA_Start_IT>
 800273e:	4603      	mov	r3, r0
 8002740:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff fd55 	bl	80021f6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800274c:	e00d      	b.n	800276a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002756:	e008      	b.n	800276a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002764:	e001      	b.n	800276a <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002766:	2302      	movs	r3, #2
 8002768:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800276a:	7dfb      	ldrb	r3, [r7, #23]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	50000100 	.word	0x50000100
 8002778:	50000300 	.word	0x50000300
 800277c:	50000700 	.word	0x50000700
 8002780:	50000600 	.word	0x50000600
 8002784:	50000500 	.word	0x50000500
 8002788:	50000400 	.word	0x50000400
 800278c:	080030f1 	.word	0x080030f1
 8002790:	080031c9 	.word	0x080031c9
 8002794:	080031e5 	.word	0x080031e5

08002798 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b0b6      	sub	sp, #216	; 0xd8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027b6:	2300      	movs	r3, #0
 80027b8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d102      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x24>
 80027ca:	2302      	movs	r3, #2
 80027cc:	f000 bc13 	b.w	8002ff6 <HAL_ADC_ConfigChannel+0x84a>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff fd1e 	bl	800221e <LL_ADC_REG_IsConversionOngoing>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f040 83f3 	bne.w	8002fd0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6818      	ldr	r0, [r3, #0]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	6859      	ldr	r1, [r3, #4]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	f7ff fbfb 	bl	8001ff2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff fd0c 	bl	800221e <LL_ADC_REG_IsConversionOngoing>
 8002806:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff fd18 	bl	8002244 <LL_ADC_INJ_IsConversionOngoing>
 8002814:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002818:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800281c:	2b00      	cmp	r3, #0
 800281e:	f040 81d9 	bne.w	8002bd4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002822:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002826:	2b00      	cmp	r3, #0
 8002828:	f040 81d4 	bne.w	8002bd4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002834:	d10f      	bne.n	8002856 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6818      	ldr	r0, [r3, #0]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2200      	movs	r2, #0
 8002840:	4619      	mov	r1, r3
 8002842:	f7ff fc02 	bl	800204a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff fba9 	bl	8001fa6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002854:	e00e      	b.n	8002874 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6818      	ldr	r0, [r3, #0]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	6819      	ldr	r1, [r3, #0]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	461a      	mov	r2, r3
 8002864:	f7ff fbf1 	bl	800204a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2100      	movs	r1, #0
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff fb99 	bl	8001fa6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	695a      	ldr	r2, [r3, #20]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	08db      	lsrs	r3, r3, #3
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	2b04      	cmp	r3, #4
 8002894:	d022      	beq.n	80028dc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	6919      	ldr	r1, [r3, #16]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028a6:	f7ff faf3 	bl	8001e90 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	6919      	ldr	r1, [r3, #16]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	461a      	mov	r2, r3
 80028b8:	f7ff fb3f 	bl	8001f3a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6818      	ldr	r0, [r3, #0]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	6919      	ldr	r1, [r3, #16]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	7f1b      	ldrb	r3, [r3, #28]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d102      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x126>
 80028cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028d0:	e000      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x128>
 80028d2:	2300      	movs	r3, #0
 80028d4:	461a      	mov	r2, r3
 80028d6:	f7ff fb4b 	bl	8001f70 <LL_ADC_SetOffsetSaturation>
 80028da:	e17b      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2100      	movs	r1, #0
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff faf8 	bl	8001ed8 <LL_ADC_GetOffsetChannel>
 80028e8:	4603      	mov	r3, r0
 80028ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10a      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x15c>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2100      	movs	r1, #0
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff faed 	bl	8001ed8 <LL_ADC_GetOffsetChannel>
 80028fe:	4603      	mov	r3, r0
 8002900:	0e9b      	lsrs	r3, r3, #26
 8002902:	f003 021f 	and.w	r2, r3, #31
 8002906:	e01e      	b.n	8002946 <HAL_ADC_ConfigChannel+0x19a>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2100      	movs	r1, #0
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff fae2 	bl	8001ed8 <LL_ADC_GetOffsetChannel>
 8002914:	4603      	mov	r3, r0
 8002916:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002926:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800292a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800292e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002936:	2320      	movs	r3, #32
 8002938:	e004      	b.n	8002944 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800293a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800293e:	fab3 f383 	clz	r3, r3
 8002942:	b2db      	uxtb	r3, r3
 8002944:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800294e:	2b00      	cmp	r3, #0
 8002950:	d105      	bne.n	800295e <HAL_ADC_ConfigChannel+0x1b2>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	0e9b      	lsrs	r3, r3, #26
 8002958:	f003 031f 	and.w	r3, r3, #31
 800295c:	e018      	b.n	8002990 <HAL_ADC_ConfigChannel+0x1e4>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800296a:	fa93 f3a3 	rbit	r3, r3
 800296e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002972:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002976:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800297a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002982:	2320      	movs	r3, #32
 8002984:	e004      	b.n	8002990 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002986:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800298a:	fab3 f383 	clz	r3, r3
 800298e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002990:	429a      	cmp	r2, r3
 8002992:	d106      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2200      	movs	r2, #0
 800299a:	2100      	movs	r1, #0
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff fab1 	bl	8001f04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2101      	movs	r1, #1
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff fa95 	bl	8001ed8 <LL_ADC_GetOffsetChannel>
 80029ae:	4603      	mov	r3, r0
 80029b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10a      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x222>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2101      	movs	r1, #1
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff fa8a 	bl	8001ed8 <LL_ADC_GetOffsetChannel>
 80029c4:	4603      	mov	r3, r0
 80029c6:	0e9b      	lsrs	r3, r3, #26
 80029c8:	f003 021f 	and.w	r2, r3, #31
 80029cc:	e01e      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x260>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2101      	movs	r1, #1
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff fa7f 	bl	8001ed8 <LL_ADC_GetOffsetChannel>
 80029da:	4603      	mov	r3, r0
 80029dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80029e4:	fa93 f3a3 	rbit	r3, r3
 80029e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80029ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80029f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80029fc:	2320      	movs	r3, #32
 80029fe:	e004      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002a00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a04:	fab3 f383 	clz	r3, r3
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d105      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x278>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	0e9b      	lsrs	r3, r3, #26
 8002a1e:	f003 031f 	and.w	r3, r3, #31
 8002a22:	e018      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x2aa>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a30:	fa93 f3a3 	rbit	r3, r3
 8002a34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002a38:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002a40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002a48:	2320      	movs	r3, #32
 8002a4a:	e004      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002a4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a50:	fab3 f383 	clz	r3, r3
 8002a54:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d106      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2101      	movs	r1, #1
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff fa4e 	bl	8001f04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2102      	movs	r1, #2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff fa32 	bl	8001ed8 <LL_ADC_GetOffsetChannel>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10a      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x2e8>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2102      	movs	r1, #2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff fa27 	bl	8001ed8 <LL_ADC_GetOffsetChannel>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	0e9b      	lsrs	r3, r3, #26
 8002a8e:	f003 021f 	and.w	r2, r3, #31
 8002a92:	e01e      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x326>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2102      	movs	r1, #2
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff fa1c 	bl	8001ed8 <LL_ADC_GetOffsetChannel>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002ab2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ab6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002aba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002ac2:	2320      	movs	r3, #32
 8002ac4:	e004      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002ac6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002aca:	fab3 f383 	clz	r3, r3
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d105      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x33e>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	0e9b      	lsrs	r3, r3, #26
 8002ae4:	f003 031f 	and.w	r3, r3, #31
 8002ae8:	e016      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x36c>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002af6:	fa93 f3a3 	rbit	r3, r3
 8002afa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002afc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002afe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002b02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002b0a:	2320      	movs	r3, #32
 8002b0c:	e004      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002b0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b12:	fab3 f383 	clz	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d106      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2200      	movs	r2, #0
 8002b22:	2102      	movs	r1, #2
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff f9ed 	bl	8001f04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2103      	movs	r1, #3
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff f9d1 	bl	8001ed8 <LL_ADC_GetOffsetChannel>
 8002b36:	4603      	mov	r3, r0
 8002b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10a      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x3aa>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2103      	movs	r1, #3
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff f9c6 	bl	8001ed8 <LL_ADC_GetOffsetChannel>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	0e9b      	lsrs	r3, r3, #26
 8002b50:	f003 021f 	and.w	r2, r3, #31
 8002b54:	e017      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x3da>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2103      	movs	r1, #3
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff f9bb 	bl	8001ed8 <LL_ADC_GetOffsetChannel>
 8002b62:	4603      	mov	r3, r0
 8002b64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b68:	fa93 f3a3 	rbit	r3, r3
 8002b6c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002b6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b70:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002b72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002b78:	2320      	movs	r3, #32
 8002b7a:	e003      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002b7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b7e:	fab3 f383 	clz	r3, r3
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d105      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x3f2>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	0e9b      	lsrs	r3, r3, #26
 8002b98:	f003 031f 	and.w	r3, r3, #31
 8002b9c:	e011      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x416>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ba6:	fa93 f3a3 	rbit	r3, r3
 8002baa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002bac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002bb6:	2320      	movs	r3, #32
 8002bb8:	e003      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bbc:	fab3 f383 	clz	r3, r3
 8002bc0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d106      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2103      	movs	r1, #3
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff f998 	bl	8001f04 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff faf9 	bl	80021d0 <LL_ADC_IsEnabled>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f040 813d 	bne.w	8002e60 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6818      	ldr	r0, [r3, #0]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	6819      	ldr	r1, [r3, #0]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	f7ff fa54 	bl	80020a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	4aa2      	ldr	r2, [pc, #648]	; (8002e88 <HAL_ADC_ConfigChannel+0x6dc>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	f040 812e 	bne.w	8002e60 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10b      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x480>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	0e9b      	lsrs	r3, r3, #26
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	f003 031f 	and.w	r3, r3, #31
 8002c20:	2b09      	cmp	r3, #9
 8002c22:	bf94      	ite	ls
 8002c24:	2301      	movls	r3, #1
 8002c26:	2300      	movhi	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	e019      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x4b4>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c34:	fa93 f3a3 	rbit	r3, r3
 8002c38:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002c3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c3c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002c3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002c44:	2320      	movs	r3, #32
 8002c46:	e003      	b.n	8002c50 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002c48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c4a:	fab3 f383 	clz	r3, r3
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	3301      	adds	r3, #1
 8002c52:	f003 031f 	and.w	r3, r3, #31
 8002c56:	2b09      	cmp	r3, #9
 8002c58:	bf94      	ite	ls
 8002c5a:	2301      	movls	r3, #1
 8002c5c:	2300      	movhi	r3, #0
 8002c5e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d079      	beq.n	8002d58 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d107      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x4d4>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	0e9b      	lsrs	r3, r3, #26
 8002c76:	3301      	adds	r3, #1
 8002c78:	069b      	lsls	r3, r3, #26
 8002c7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c7e:	e015      	b.n	8002cac <HAL_ADC_ConfigChannel+0x500>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c88:	fa93 f3a3 	rbit	r3, r3
 8002c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c90:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002c98:	2320      	movs	r3, #32
 8002c9a:	e003      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c9e:	fab3 f383 	clz	r3, r3
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	069b      	lsls	r3, r3, #26
 8002ca8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d109      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x520>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	0e9b      	lsrs	r3, r3, #26
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	f003 031f 	and.w	r3, r3, #31
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cca:	e017      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x550>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cd4:	fa93 f3a3 	rbit	r3, r3
 8002cd8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cdc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002ce4:	2320      	movs	r3, #32
 8002ce6:	e003      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cea:	fab3 f383 	clz	r3, r3
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	f003 031f 	and.w	r3, r3, #31
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfc:	ea42 0103 	orr.w	r1, r2, r3
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10a      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x576>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	0e9b      	lsrs	r3, r3, #26
 8002d12:	3301      	adds	r3, #1
 8002d14:	f003 021f 	and.w	r2, r3, #31
 8002d18:	4613      	mov	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	4413      	add	r3, r2
 8002d1e:	051b      	lsls	r3, r3, #20
 8002d20:	e018      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x5a8>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d32:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002d3a:	2320      	movs	r3, #32
 8002d3c:	e003      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d40:	fab3 f383 	clz	r3, r3
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	3301      	adds	r3, #1
 8002d48:	f003 021f 	and.w	r2, r3, #31
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4413      	add	r3, r2
 8002d52:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d54:	430b      	orrs	r3, r1
 8002d56:	e07e      	b.n	8002e56 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d107      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x5c8>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	0e9b      	lsrs	r3, r3, #26
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	069b      	lsls	r3, r3, #26
 8002d6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d72:	e015      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x5f4>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7c:	fa93 f3a3 	rbit	r3, r3
 8002d80:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d84:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002d8c:	2320      	movs	r3, #32
 8002d8e:	e003      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d92:	fab3 f383 	clz	r3, r3
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	3301      	adds	r3, #1
 8002d9a:	069b      	lsls	r3, r3, #26
 8002d9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d109      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x614>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	0e9b      	lsrs	r3, r3, #26
 8002db2:	3301      	adds	r3, #1
 8002db4:	f003 031f 	and.w	r3, r3, #31
 8002db8:	2101      	movs	r1, #1
 8002dba:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbe:	e017      	b.n	8002df0 <HAL_ADC_ConfigChannel+0x644>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	fa93 f3a3 	rbit	r3, r3
 8002dcc:	61fb      	str	r3, [r7, #28]
  return result;
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002dd8:	2320      	movs	r3, #32
 8002dda:	e003      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	fab3 f383 	clz	r3, r3
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	3301      	adds	r3, #1
 8002de6:	f003 031f 	and.w	r3, r3, #31
 8002dea:	2101      	movs	r1, #1
 8002dec:	fa01 f303 	lsl.w	r3, r1, r3
 8002df0:	ea42 0103 	orr.w	r1, r2, r3
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10d      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x670>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	0e9b      	lsrs	r3, r3, #26
 8002e06:	3301      	adds	r3, #1
 8002e08:	f003 021f 	and.w	r2, r3, #31
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	4413      	add	r3, r2
 8002e12:	3b1e      	subs	r3, #30
 8002e14:	051b      	lsls	r3, r3, #20
 8002e16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e1a:	e01b      	b.n	8002e54 <HAL_ADC_ConfigChannel+0x6a8>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	fa93 f3a3 	rbit	r3, r3
 8002e28:	613b      	str	r3, [r7, #16]
  return result;
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002e34:	2320      	movs	r3, #32
 8002e36:	e003      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	fab3 f383 	clz	r3, r3
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	3301      	adds	r3, #1
 8002e42:	f003 021f 	and.w	r2, r3, #31
 8002e46:	4613      	mov	r3, r2
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3b1e      	subs	r3, #30
 8002e4e:	051b      	lsls	r3, r3, #20
 8002e50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e54:	430b      	orrs	r3, r1
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	6892      	ldr	r2, [r2, #8]
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	f7ff f8f5 	bl	800204a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <HAL_ADC_ConfigChannel+0x6e0>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 80be 	beq.w	8002fea <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e76:	d004      	beq.n	8002e82 <HAL_ADC_ConfigChannel+0x6d6>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a04      	ldr	r2, [pc, #16]	; (8002e90 <HAL_ADC_ConfigChannel+0x6e4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d10a      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x6ec>
 8002e82:	4b04      	ldr	r3, [pc, #16]	; (8002e94 <HAL_ADC_ConfigChannel+0x6e8>)
 8002e84:	e009      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x6ee>
 8002e86:	bf00      	nop
 8002e88:	407f0000 	.word	0x407f0000
 8002e8c:	80080000 	.word	0x80080000
 8002e90:	50000100 	.word	0x50000100
 8002e94:	50000300 	.word	0x50000300
 8002e98:	4b59      	ldr	r3, [pc, #356]	; (8003000 <HAL_ADC_ConfigChannel+0x854>)
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fe ffea 	bl	8001e74 <LL_ADC_GetCommonPathInternalCh>
 8002ea0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a56      	ldr	r2, [pc, #344]	; (8003004 <HAL_ADC_ConfigChannel+0x858>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d004      	beq.n	8002eb8 <HAL_ADC_ConfigChannel+0x70c>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a55      	ldr	r2, [pc, #340]	; (8003008 <HAL_ADC_ConfigChannel+0x85c>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d13a      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002eb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ebc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d134      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ecc:	d005      	beq.n	8002eda <HAL_ADC_ConfigChannel+0x72e>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a4e      	ldr	r2, [pc, #312]	; (800300c <HAL_ADC_ConfigChannel+0x860>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	f040 8085 	bne.w	8002fe4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ee2:	d004      	beq.n	8002eee <HAL_ADC_ConfigChannel+0x742>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a49      	ldr	r2, [pc, #292]	; (8003010 <HAL_ADC_ConfigChannel+0x864>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d101      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x746>
 8002eee:	4a49      	ldr	r2, [pc, #292]	; (8003014 <HAL_ADC_ConfigChannel+0x868>)
 8002ef0:	e000      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x748>
 8002ef2:	4a43      	ldr	r2, [pc, #268]	; (8003000 <HAL_ADC_ConfigChannel+0x854>)
 8002ef4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ef8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002efc:	4619      	mov	r1, r3
 8002efe:	4610      	mov	r0, r2
 8002f00:	f7fe ffa5 	bl	8001e4e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f04:	4b44      	ldr	r3, [pc, #272]	; (8003018 <HAL_ADC_ConfigChannel+0x86c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	099b      	lsrs	r3, r3, #6
 8002f0a:	4a44      	ldr	r2, [pc, #272]	; (800301c <HAL_ADC_ConfigChannel+0x870>)
 8002f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f10:	099b      	lsrs	r3, r3, #6
 8002f12:	1c5a      	adds	r2, r3, #1
 8002f14:	4613      	mov	r3, r2
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f1e:	e002      	b.n	8002f26 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1f9      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f2c:	e05a      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a3b      	ldr	r2, [pc, #236]	; (8003020 <HAL_ADC_ConfigChannel+0x874>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d125      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x7d8>
 8002f38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d11f      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a31      	ldr	r2, [pc, #196]	; (8003010 <HAL_ADC_ConfigChannel+0x864>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d104      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x7ac>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a34      	ldr	r2, [pc, #208]	; (8003024 <HAL_ADC_ConfigChannel+0x878>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d047      	beq.n	8002fe8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f60:	d004      	beq.n	8002f6c <HAL_ADC_ConfigChannel+0x7c0>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a2a      	ldr	r2, [pc, #168]	; (8003010 <HAL_ADC_ConfigChannel+0x864>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d101      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x7c4>
 8002f6c:	4a29      	ldr	r2, [pc, #164]	; (8003014 <HAL_ADC_ConfigChannel+0x868>)
 8002f6e:	e000      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x7c6>
 8002f70:	4a23      	ldr	r2, [pc, #140]	; (8003000 <HAL_ADC_ConfigChannel+0x854>)
 8002f72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4610      	mov	r0, r2
 8002f7e:	f7fe ff66 	bl	8001e4e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f82:	e031      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a27      	ldr	r2, [pc, #156]	; (8003028 <HAL_ADC_ConfigChannel+0x87c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d12d      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d127      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a1c      	ldr	r2, [pc, #112]	; (8003010 <HAL_ADC_ConfigChannel+0x864>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d022      	beq.n	8002fea <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fac:	d004      	beq.n	8002fb8 <HAL_ADC_ConfigChannel+0x80c>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a17      	ldr	r2, [pc, #92]	; (8003010 <HAL_ADC_ConfigChannel+0x864>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d101      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x810>
 8002fb8:	4a16      	ldr	r2, [pc, #88]	; (8003014 <HAL_ADC_ConfigChannel+0x868>)
 8002fba:	e000      	b.n	8002fbe <HAL_ADC_ConfigChannel+0x812>
 8002fbc:	4a10      	ldr	r2, [pc, #64]	; (8003000 <HAL_ADC_ConfigChannel+0x854>)
 8002fbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fc2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4610      	mov	r0, r2
 8002fca:	f7fe ff40 	bl	8001e4e <LL_ADC_SetCommonPathInternalCh>
 8002fce:	e00c      	b.n	8002fea <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd4:	f043 0220 	orr.w	r2, r3, #32
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002fe2:	e002      	b.n	8002fea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fe4:	bf00      	nop
 8002fe6:	e000      	b.n	8002fea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fe8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ff2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	37d8      	adds	r7, #216	; 0xd8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	50000700 	.word	0x50000700
 8003004:	c3210000 	.word	0xc3210000
 8003008:	90c00010 	.word	0x90c00010
 800300c:	50000600 	.word	0x50000600
 8003010:	50000100 	.word	0x50000100
 8003014:	50000300 	.word	0x50000300
 8003018:	200026d4 	.word	0x200026d4
 800301c:	053e2d63 	.word	0x053e2d63
 8003020:	c7520000 	.word	0xc7520000
 8003024:	50000500 	.word	0x50000500
 8003028:	cb840000 	.word	0xcb840000

0800302c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff f8c9 	bl	80021d0 <LL_ADC_IsEnabled>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d14d      	bne.n	80030e0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	4b28      	ldr	r3, [pc, #160]	; (80030ec <ADC_Enable+0xc0>)
 800304c:	4013      	ands	r3, r2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00d      	beq.n	800306e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003056:	f043 0210 	orr.w	r2, r3, #16
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003062:	f043 0201 	orr.w	r2, r3, #1
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e039      	b.n	80030e2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff f898 	bl	80021a8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003078:	f7fe fea8 	bl	8001dcc <HAL_GetTick>
 800307c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800307e:	e028      	b.n	80030d2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff f8a3 	bl	80021d0 <LL_ADC_IsEnabled>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d104      	bne.n	800309a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff f887 	bl	80021a8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800309a:	f7fe fe97 	bl	8001dcc <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d914      	bls.n	80030d2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d00d      	beq.n	80030d2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ba:	f043 0210 	orr.w	r2, r3, #16
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c6:	f043 0201 	orr.w	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e007      	b.n	80030e2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d1cf      	bne.n	8003080 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	8000003f 	.word	0x8000003f

080030f0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003102:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003106:	2b00      	cmp	r3, #0
 8003108:	d14b      	bne.n	80031a2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	2b00      	cmp	r3, #0
 8003122:	d021      	beq.n	8003168 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f7fe ff4f 	bl	8001fcc <LL_ADC_REG_IsTriggerSourceSWStart>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d032      	beq.n	800319a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d12b      	bne.n	800319a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003146:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003152:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d11f      	bne.n	800319a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315e:	f043 0201 	orr.w	r2, r3, #1
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	65da      	str	r2, [r3, #92]	; 0x5c
 8003166:	e018      	b.n	800319a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d111      	bne.n	800319a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003186:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d105      	bne.n	800319a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003192:	f043 0201 	orr.w	r2, r3, #1
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f7fe f988 	bl	80014b0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031a0:	e00e      	b.n	80031c0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a6:	f003 0310 	and.w	r3, r3, #16
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f7ff faf2 	bl	8002798 <HAL_ADC_ErrorCallback>
}
 80031b4:	e004      	b.n	80031c0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	4798      	blx	r3
}
 80031c0:	bf00      	nop
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f7fe f982 	bl	80014e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031dc:	bf00      	nop
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003202:	f043 0204 	orr.w	r2, r3, #4
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f7ff fac4 	bl	8002798 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003210:	bf00      	nop
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <LL_ADC_IsEnabled>:
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <LL_ADC_IsEnabled+0x18>
 800322c:	2301      	movs	r3, #1
 800322e:	e000      	b.n	8003232 <LL_ADC_IsEnabled+0x1a>
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <LL_ADC_REG_IsConversionOngoing>:
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 0304 	and.w	r3, r3, #4
 800324e:	2b04      	cmp	r3, #4
 8003250:	d101      	bne.n	8003256 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003264:	b590      	push	{r4, r7, lr}
 8003266:	b0a1      	sub	sp, #132	; 0x84
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800326e:	2300      	movs	r3, #0
 8003270:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800327a:	2b01      	cmp	r3, #1
 800327c:	d101      	bne.n	8003282 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800327e:	2302      	movs	r3, #2
 8003280:	e0e7      	b.n	8003452 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800328a:	2300      	movs	r3, #0
 800328c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800328e:	2300      	movs	r3, #0
 8003290:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800329a:	d102      	bne.n	80032a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800329c:	4b6f      	ldr	r3, [pc, #444]	; (800345c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800329e:	60bb      	str	r3, [r7, #8]
 80032a0:	e009      	b.n	80032b6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a6e      	ldr	r2, [pc, #440]	; (8003460 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d102      	bne.n	80032b2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80032ac:	4b6d      	ldr	r3, [pc, #436]	; (8003464 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80032ae:	60bb      	str	r3, [r7, #8]
 80032b0:	e001      	b.n	80032b6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80032b2:	2300      	movs	r3, #0
 80032b4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10b      	bne.n	80032d4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c0:	f043 0220 	orr.w	r2, r3, #32
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e0be      	b.n	8003452 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff ffb1 	bl	800323e <LL_ADC_REG_IsConversionOngoing>
 80032dc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff ffab 	bl	800323e <LL_ADC_REG_IsConversionOngoing>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f040 80a0 	bne.w	8003430 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80032f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f040 809c 	bne.w	8003430 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003300:	d004      	beq.n	800330c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a55      	ldr	r2, [pc, #340]	; (800345c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d101      	bne.n	8003310 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800330c:	4b56      	ldr	r3, [pc, #344]	; (8003468 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800330e:	e000      	b.n	8003312 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003310:	4b56      	ldr	r3, [pc, #344]	; (800346c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003312:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d04b      	beq.n	80033b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800331c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	6859      	ldr	r1, [r3, #4]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800332e:	035b      	lsls	r3, r3, #13
 8003330:	430b      	orrs	r3, r1
 8003332:	431a      	orrs	r2, r3
 8003334:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003336:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003340:	d004      	beq.n	800334c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a45      	ldr	r2, [pc, #276]	; (800345c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d10f      	bne.n	800336c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800334c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003350:	f7ff ff62 	bl	8003218 <LL_ADC_IsEnabled>
 8003354:	4604      	mov	r4, r0
 8003356:	4841      	ldr	r0, [pc, #260]	; (800345c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003358:	f7ff ff5e 	bl	8003218 <LL_ADC_IsEnabled>
 800335c:	4603      	mov	r3, r0
 800335e:	4323      	orrs	r3, r4
 8003360:	2b00      	cmp	r3, #0
 8003362:	bf0c      	ite	eq
 8003364:	2301      	moveq	r3, #1
 8003366:	2300      	movne	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	e012      	b.n	8003392 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800336c:	483c      	ldr	r0, [pc, #240]	; (8003460 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800336e:	f7ff ff53 	bl	8003218 <LL_ADC_IsEnabled>
 8003372:	4604      	mov	r4, r0
 8003374:	483b      	ldr	r0, [pc, #236]	; (8003464 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003376:	f7ff ff4f 	bl	8003218 <LL_ADC_IsEnabled>
 800337a:	4603      	mov	r3, r0
 800337c:	431c      	orrs	r4, r3
 800337e:	483c      	ldr	r0, [pc, #240]	; (8003470 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003380:	f7ff ff4a 	bl	8003218 <LL_ADC_IsEnabled>
 8003384:	4603      	mov	r3, r0
 8003386:	4323      	orrs	r3, r4
 8003388:	2b00      	cmp	r3, #0
 800338a:	bf0c      	ite	eq
 800338c:	2301      	moveq	r3, #1
 800338e:	2300      	movne	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d056      	beq.n	8003444 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003396:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800339e:	f023 030f 	bic.w	r3, r3, #15
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	6811      	ldr	r1, [r2, #0]
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	6892      	ldr	r2, [r2, #8]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	431a      	orrs	r2, r3
 80033ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033b0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033b2:	e047      	b.n	8003444 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80033b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033be:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033c8:	d004      	beq.n	80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a23      	ldr	r2, [pc, #140]	; (800345c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d10f      	bne.n	80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80033d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80033d8:	f7ff ff1e 	bl	8003218 <LL_ADC_IsEnabled>
 80033dc:	4604      	mov	r4, r0
 80033de:	481f      	ldr	r0, [pc, #124]	; (800345c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033e0:	f7ff ff1a 	bl	8003218 <LL_ADC_IsEnabled>
 80033e4:	4603      	mov	r3, r0
 80033e6:	4323      	orrs	r3, r4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	e012      	b.n	800341a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80033f4:	481a      	ldr	r0, [pc, #104]	; (8003460 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80033f6:	f7ff ff0f 	bl	8003218 <LL_ADC_IsEnabled>
 80033fa:	4604      	mov	r4, r0
 80033fc:	4819      	ldr	r0, [pc, #100]	; (8003464 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80033fe:	f7ff ff0b 	bl	8003218 <LL_ADC_IsEnabled>
 8003402:	4603      	mov	r3, r0
 8003404:	431c      	orrs	r4, r3
 8003406:	481a      	ldr	r0, [pc, #104]	; (8003470 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003408:	f7ff ff06 	bl	8003218 <LL_ADC_IsEnabled>
 800340c:	4603      	mov	r3, r0
 800340e:	4323      	orrs	r3, r4
 8003410:	2b00      	cmp	r3, #0
 8003412:	bf0c      	ite	eq
 8003414:	2301      	moveq	r3, #1
 8003416:	2300      	movne	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d012      	beq.n	8003444 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800341e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003426:	f023 030f 	bic.w	r3, r3, #15
 800342a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800342c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800342e:	e009      	b.n	8003444 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003434:	f043 0220 	orr.w	r2, r3, #32
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003442:	e000      	b.n	8003446 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003444:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800344e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003452:	4618      	mov	r0, r3
 8003454:	3784      	adds	r7, #132	; 0x84
 8003456:	46bd      	mov	sp, r7
 8003458:	bd90      	pop	{r4, r7, pc}
 800345a:	bf00      	nop
 800345c:	50000100 	.word	0x50000100
 8003460:	50000400 	.word	0x50000400
 8003464:	50000500 	.word	0x50000500
 8003468:	50000300 	.word	0x50000300
 800346c:	50000700 	.word	0x50000700
 8003470:	50000600 	.word	0x50000600

08003474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003484:	4b0c      	ldr	r3, [pc, #48]	; (80034b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003490:	4013      	ands	r3, r2
 8003492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800349c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034a6:	4a04      	ldr	r2, [pc, #16]	; (80034b8 <__NVIC_SetPriorityGrouping+0x44>)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	60d3      	str	r3, [r2, #12]
}
 80034ac:	bf00      	nop
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	e000ed00 	.word	0xe000ed00

080034bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034c0:	4b04      	ldr	r3, [pc, #16]	; (80034d4 <__NVIC_GetPriorityGrouping+0x18>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	0a1b      	lsrs	r3, r3, #8
 80034c6:	f003 0307 	and.w	r3, r3, #7
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	e000ed00 	.word	0xe000ed00

080034d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	db0b      	blt.n	8003502 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ea:	79fb      	ldrb	r3, [r7, #7]
 80034ec:	f003 021f 	and.w	r2, r3, #31
 80034f0:	4907      	ldr	r1, [pc, #28]	; (8003510 <__NVIC_EnableIRQ+0x38>)
 80034f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f6:	095b      	lsrs	r3, r3, #5
 80034f8:	2001      	movs	r0, #1
 80034fa:	fa00 f202 	lsl.w	r2, r0, r2
 80034fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	e000e100 	.word	0xe000e100

08003514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	6039      	str	r1, [r7, #0]
 800351e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003524:	2b00      	cmp	r3, #0
 8003526:	db0a      	blt.n	800353e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	b2da      	uxtb	r2, r3
 800352c:	490c      	ldr	r1, [pc, #48]	; (8003560 <__NVIC_SetPriority+0x4c>)
 800352e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003532:	0112      	lsls	r2, r2, #4
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	440b      	add	r3, r1
 8003538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800353c:	e00a      	b.n	8003554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	b2da      	uxtb	r2, r3
 8003542:	4908      	ldr	r1, [pc, #32]	; (8003564 <__NVIC_SetPriority+0x50>)
 8003544:	79fb      	ldrb	r3, [r7, #7]
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	3b04      	subs	r3, #4
 800354c:	0112      	lsls	r2, r2, #4
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	440b      	add	r3, r1
 8003552:	761a      	strb	r2, [r3, #24]
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	e000e100 	.word	0xe000e100
 8003564:	e000ed00 	.word	0xe000ed00

08003568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003568:	b480      	push	{r7}
 800356a:	b089      	sub	sp, #36	; 0x24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f1c3 0307 	rsb	r3, r3, #7
 8003582:	2b04      	cmp	r3, #4
 8003584:	bf28      	it	cs
 8003586:	2304      	movcs	r3, #4
 8003588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	3304      	adds	r3, #4
 800358e:	2b06      	cmp	r3, #6
 8003590:	d902      	bls.n	8003598 <NVIC_EncodePriority+0x30>
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	3b03      	subs	r3, #3
 8003596:	e000      	b.n	800359a <NVIC_EncodePriority+0x32>
 8003598:	2300      	movs	r3, #0
 800359a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800359c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	43da      	mvns	r2, r3
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	401a      	ands	r2, r3
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ba:	43d9      	mvns	r1, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c0:	4313      	orrs	r3, r2
         );
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3724      	adds	r7, #36	; 0x24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
	...

080035d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3b01      	subs	r3, #1
 80035dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035e0:	d301      	bcc.n	80035e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035e2:	2301      	movs	r3, #1
 80035e4:	e00f      	b.n	8003606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035e6:	4a0a      	ldr	r2, [pc, #40]	; (8003610 <SysTick_Config+0x40>)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ee:	210f      	movs	r1, #15
 80035f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035f4:	f7ff ff8e 	bl	8003514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035f8:	4b05      	ldr	r3, [pc, #20]	; (8003610 <SysTick_Config+0x40>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035fe:	4b04      	ldr	r3, [pc, #16]	; (8003610 <SysTick_Config+0x40>)
 8003600:	2207      	movs	r2, #7
 8003602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	e000e010 	.word	0xe000e010

08003614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f7ff ff29 	bl	8003474 <__NVIC_SetPriorityGrouping>
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b086      	sub	sp, #24
 800362e:	af00      	add	r7, sp, #0
 8003630:	4603      	mov	r3, r0
 8003632:	60b9      	str	r1, [r7, #8]
 8003634:	607a      	str	r2, [r7, #4]
 8003636:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003638:	f7ff ff40 	bl	80034bc <__NVIC_GetPriorityGrouping>
 800363c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	68b9      	ldr	r1, [r7, #8]
 8003642:	6978      	ldr	r0, [r7, #20]
 8003644:	f7ff ff90 	bl	8003568 <NVIC_EncodePriority>
 8003648:	4602      	mov	r2, r0
 800364a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800364e:	4611      	mov	r1, r2
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff ff5f 	bl	8003514 <__NVIC_SetPriority>
}
 8003656:	bf00      	nop
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b082      	sub	sp, #8
 8003662:	af00      	add	r7, sp, #0
 8003664:	4603      	mov	r3, r0
 8003666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff ff33 	bl	80034d8 <__NVIC_EnableIRQ>
}
 8003672:	bf00      	nop
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b082      	sub	sp, #8
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7ff ffa4 	bl	80035d0 <SysTick_Config>
 8003688:	4603      	mov	r3, r0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e014      	b.n	80036ce <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	791b      	ldrb	r3, [r3, #4]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d105      	bne.n	80036ba <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7fe f8a1 	bl	80017fc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2202      	movs	r2, #2
 80036be:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	795b      	ldrb	r3, [r3, #5]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_DAC_Start+0x16>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e043      	b.n	8003774 <HAL_DAC_Start+0x9e>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2202      	movs	r2, #2
 80036f6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6819      	ldr	r1, [r3, #0]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	f003 0310 	and.w	r3, r3, #16
 8003704:	2201      	movs	r2, #1
 8003706:	409a      	lsls	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8003710:	2001      	movs	r0, #1
 8003712:	f7fe fb67 	bl	8001de4 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10f      	bne.n	800373c <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8003726:	2b02      	cmp	r3, #2
 8003728:	d11d      	bne.n	8003766 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f042 0201 	orr.w	r2, r2, #1
 8003738:	605a      	str	r2, [r3, #4]
 800373a:	e014      	b.n	8003766 <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	f003 0310 	and.w	r3, r3, #16
 800374c:	2102      	movs	r1, #2
 800374e:	fa01 f303 	lsl.w	r3, r1, r3
 8003752:	429a      	cmp	r2, r3
 8003754:	d107      	bne.n	8003766 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f042 0202 	orr.w	r2, r2, #2
 8003764:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_DAC_Stop>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6819      	ldr	r1, [r3, #0]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	f003 0310 	and.w	r3, r3, #16
 8003792:	2201      	movs	r2, #1
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	43da      	mvns	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	400a      	ands	r2, r1
 80037a0:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 80037a2:	2001      	movs	r0, #1
 80037a4:	f7fe fb1e 	bl	8001de4 <HAL_Delay>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
 80037c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80037c6:	2300      	movs	r3, #0
 80037c8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	795b      	ldrb	r3, [r3, #5]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d101      	bne.n	80037d6 <HAL_DAC_Start_DMA+0x1e>
 80037d2:	2302      	movs	r3, #2
 80037d4:	e0ae      	b.n	8003934 <HAL_DAC_Start_DMA+0x17c>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2201      	movs	r2, #1
 80037da:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2202      	movs	r2, #2
 80037e0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d12f      	bne.n	8003848 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	4a53      	ldr	r2, [pc, #332]	; (800393c <HAL_DAC_Start_DMA+0x184>)
 80037ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	4a52      	ldr	r2, [pc, #328]	; (8003940 <HAL_DAC_Start_DMA+0x188>)
 80037f6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	4a51      	ldr	r2, [pc, #324]	; (8003944 <HAL_DAC_Start_DMA+0x18c>)
 80037fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800380e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	2b08      	cmp	r3, #8
 8003814:	d013      	beq.n	800383e <HAL_DAC_Start_DMA+0x86>
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	2b08      	cmp	r3, #8
 800381a:	d845      	bhi.n	80038a8 <HAL_DAC_Start_DMA+0xf0>
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_DAC_Start_DMA+0x72>
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	2b04      	cmp	r3, #4
 8003826:	d005      	beq.n	8003834 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003828:	e03e      	b.n	80038a8 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	3308      	adds	r3, #8
 8003830:	613b      	str	r3, [r7, #16]
        break;
 8003832:	e03c      	b.n	80038ae <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	330c      	adds	r3, #12
 800383a:	613b      	str	r3, [r7, #16]
        break;
 800383c:	e037      	b.n	80038ae <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	3310      	adds	r3, #16
 8003844:	613b      	str	r3, [r7, #16]
        break;
 8003846:	e032      	b.n	80038ae <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4a3e      	ldr	r2, [pc, #248]	; (8003948 <HAL_DAC_Start_DMA+0x190>)
 800384e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	4a3d      	ldr	r2, [pc, #244]	; (800394c <HAL_DAC_Start_DMA+0x194>)
 8003856:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	4a3c      	ldr	r2, [pc, #240]	; (8003950 <HAL_DAC_Start_DMA+0x198>)
 800385e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800386e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	2b08      	cmp	r3, #8
 8003874:	d013      	beq.n	800389e <HAL_DAC_Start_DMA+0xe6>
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	2b08      	cmp	r3, #8
 800387a:	d817      	bhi.n	80038ac <HAL_DAC_Start_DMA+0xf4>
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_DAC_Start_DMA+0xd2>
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	2b04      	cmp	r3, #4
 8003886:	d005      	beq.n	8003894 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003888:	e010      	b.n	80038ac <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	3314      	adds	r3, #20
 8003890:	613b      	str	r3, [r7, #16]
        break;
 8003892:	e00c      	b.n	80038ae <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3318      	adds	r3, #24
 800389a:	613b      	str	r3, [r7, #16]
        break;
 800389c:	e007      	b.n	80038ae <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	331c      	adds	r3, #28
 80038a4:	613b      	str	r3, [r7, #16]
        break;
 80038a6:	e002      	b.n	80038ae <HAL_DAC_Start_DMA+0xf6>
        break;
 80038a8:	bf00      	nop
 80038aa:	e000      	b.n	80038ae <HAL_DAC_Start_DMA+0xf6>
        break;
 80038ac:	bf00      	nop
    }
  }


  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d111      	bne.n	80038d8 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038c2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6898      	ldr	r0, [r3, #8]
 80038c8:	6879      	ldr	r1, [r7, #4]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	f000 fbad 	bl	800402c <HAL_DMA_Start_IT>
 80038d2:	4603      	mov	r3, r0
 80038d4:	75fb      	strb	r3, [r7, #23]
 80038d6:	e010      	b.n	80038fa <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80038e6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	68d8      	ldr	r0, [r3, #12]
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	f000 fb9b 	bl	800402c <HAL_DMA_Start_IT>
 80038f6:	4603      	mov	r3, r0
 80038f8:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003900:	7dfb      	ldrb	r3, [r7, #23]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10f      	bne.n	8003926 <HAL_DAC_Start_DMA+0x16e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6819      	ldr	r1, [r3, #0]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	f003 0310 	and.w	r3, r3, #16
 8003912:	2201      	movs	r2, #1
 8003914:	409a      	lsls	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 800391e:	2001      	movs	r0, #1
 8003920:	f7fe fa60 	bl	8001de4 <HAL_Delay>
 8003924:	e005      	b.n	8003932 <HAL_DAC_Start_DMA+0x17a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	f043 0204 	orr.w	r2, r3, #4
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003932:	7dfb      	ldrb	r3, [r7, #23]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	08003dc9 	.word	0x08003dc9
 8003940:	08003deb 	.word	0x08003deb
 8003944:	08003e07 	.word	0x08003e07
 8003948:	08003e71 	.word	0x08003e71
 800394c:	08003e93 	.word	0x08003e93
 8003950:	08003eaf 	.word	0x08003eaf

08003954 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6819      	ldr	r1, [r3, #0]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	f003 0310 	and.w	r3, r3, #16
 800396a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	43da      	mvns	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	400a      	ands	r2, r1
 800397a:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6819      	ldr	r1, [r3, #0]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	f003 0310 	and.w	r3, r3, #16
 8003988:	2201      	movs	r2, #1
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	43da      	mvns	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	400a      	ands	r2, r1
 8003996:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8003998:	2001      	movs	r0, #1
 800399a:	f7fe fa23 	bl	8001de4 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10d      	bne.n	80039c0 <HAL_DAC_Stop_DMA+0x6c>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f000 fbba 	bl	8004122 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	e00c      	b.n	80039da <HAL_DAC_Stop_DMA+0x86>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 fbac 	bl	8004122 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80039d8:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b087      	sub	sp, #28
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	60f8      	str	r0, [r7, #12]
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	607a      	str	r2, [r7, #4]
 80039f6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d105      	bne.n	8003a1a <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4413      	add	r3, r2
 8003a14:	3308      	adds	r3, #8
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	e004      	b.n	8003a24 <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4413      	add	r3, r2
 8003a20:	3314      	adds	r3, #20
 8003a22:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	461a      	mov	r2, r3
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	371c      	adds	r7, #28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
	...

08003a78 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08a      	sub	sp, #40	; 0x28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	795b      	ldrb	r3, [r3, #5]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d101      	bne.n	8003a90 <HAL_DAC_ConfigChannel+0x18>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e192      	b.n	8003db6 <HAL_DAC_ConfigChannel+0x33e>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2201      	movs	r2, #1
 8003a94:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2202      	movs	r2, #2
 8003a9a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	2b04      	cmp	r3, #4
 8003aa2:	d174      	bne.n	8003b8e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003aa4:	f7fe f992 	bl	8001dcc <HAL_GetTick>
 8003aa8:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d134      	bne.n	8003b1a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003ab0:	e011      	b.n	8003ad6 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003ab2:	f7fe f98b 	bl	8001dcc <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d90a      	bls.n	8003ad6 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	f043 0208 	orr.w	r2, r3, #8
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2203      	movs	r2, #3
 8003ad0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e16f      	b.n	8003db6 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003adc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1e6      	bne.n	8003ab2 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	f7fe f97d 	bl	8001de4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003af2:	641a      	str	r2, [r3, #64]	; 0x40
 8003af4:	e01e      	b.n	8003b34 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003af6:	f7fe f969 	bl	8001dcc <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d90a      	bls.n	8003b1a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	f043 0208 	orr.w	r2, r3, #8
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2203      	movs	r2, #3
 8003b14:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e14d      	b.n	8003db6 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	dbe8      	blt.n	8003af6 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003b24:	2001      	movs	r0, #1
 8003b26:	f7fe f95d 	bl	8001de4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b32:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f003 0310 	and.w	r3, r3, #16
 8003b40:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003b44:	fa01 f303 	lsl.w	r3, r1, r3
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	ea02 0103 	and.w	r1, r2, r3
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f003 0310 	and.w	r3, r3, #16
 8003b58:	409a      	lsls	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f003 0310 	and.w	r3, r3, #16
 8003b6e:	21ff      	movs	r1, #255	; 0xff
 8003b70:	fa01 f303 	lsl.w	r3, r1, r3
 8003b74:	43db      	mvns	r3, r3
 8003b76:	ea02 0103 	and.w	r1, r2, r3
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f003 0310 	and.w	r3, r3, #16
 8003b84:	409a      	lsls	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d11d      	bne.n	8003bd2 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	221f      	movs	r2, #31
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	43db      	mvns	r3, r3
 8003bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bae:	4013      	ands	r3, r2
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f003 0310 	and.w	r3, r3, #16
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f003 0310 	and.w	r3, r3, #16
 8003be0:	2207      	movs	r2, #7
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	43db      	mvns	r3, r3
 8003be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bea:	4013      	ands	r3, r2
 8003bec:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d102      	bne.n	8003bfc <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	623b      	str	r3, [r7, #32]
 8003bfa:	e00f      	b.n	8003c1c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d102      	bne.n	8003c0a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003c04:	2301      	movs	r3, #1
 8003c06:	623b      	str	r3, [r7, #32]
 8003c08:	e008      	b.n	8003c1c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d102      	bne.n	8003c18 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003c12:	2301      	movs	r3, #1
 8003c14:	623b      	str	r3, [r7, #32]
 8003c16:	e001      	b.n	8003c1c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	6a3a      	ldr	r2, [r7, #32]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f003 0310 	and.w	r3, r3, #16
 8003c32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c36:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3a:	43db      	mvns	r3, r3
 8003c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c3e:	4013      	ands	r3, r2
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	791b      	ldrb	r3, [r3, #4]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d102      	bne.n	8003c50 <HAL_DAC_ConfigChannel+0x1d8>
 8003c4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c4e:	e000      	b.n	8003c52 <HAL_DAC_ConfigChannel+0x1da>
 8003c50:	2300      	movs	r3, #0
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f003 0310 	and.w	r3, r3, #16
 8003c5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c62:	fa02 f303 	lsl.w	r3, r2, r3
 8003c66:	43db      	mvns	r3, r3
 8003c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	795b      	ldrb	r3, [r3, #5]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d102      	bne.n	8003c7c <HAL_DAC_ConfigChannel+0x204>
 8003c76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c7a:	e000      	b.n	8003c7e <HAL_DAC_ConfigChannel+0x206>
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d114      	bne.n	8003cbe <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003c94:	f003 f89c 	bl	8006dd0 <HAL_RCC_GetHCLKFreq>
 8003c98:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	4a48      	ldr	r2, [pc, #288]	; (8003dc0 <HAL_DAC_ConfigChannel+0x348>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d904      	bls.n	8003cac <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8003caa:	e00f      	b.n	8003ccc <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	4a45      	ldr	r2, [pc, #276]	; (8003dc4 <HAL_DAC_ConfigChannel+0x34c>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d90a      	bls.n	8003cca <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
 8003cbc:	e006      	b.n	8003ccc <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc8:	e000      	b.n	8003ccc <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003cca:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f003 0310 	and.w	r3, r3, #16
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6819      	ldr	r1, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f003 0310 	and.w	r3, r3, #16
 8003cf2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	43da      	mvns	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	400a      	ands	r2, r1
 8003d02:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f003 0310 	and.w	r3, r3, #16
 8003d12:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	43db      	mvns	r3, r3
 8003d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1e:	4013      	ands	r3, r2
 8003d20:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f003 0310 	and.w	r3, r3, #16
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d36:	4313      	orrs	r3, r2
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d40:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6819      	ldr	r1, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f003 0310 	and.w	r3, r3, #16
 8003d4e:	22c0      	movs	r2, #192	; 0xc0
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	43da      	mvns	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	400a      	ands	r2, r1
 8003d5c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	089b      	lsrs	r3, r3, #2
 8003d64:	f003 030f 	and.w	r3, r3, #15
 8003d68:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	089b      	lsrs	r3, r3, #2
 8003d70:	021b      	lsls	r3, r3, #8
 8003d72:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f003 0310 	and.w	r3, r3, #16
 8003d88:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d90:	43db      	mvns	r3, r3
 8003d92:	ea02 0103 	and.w	r1, r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f003 0310 	and.w	r3, r3, #16
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	409a      	lsls	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2201      	movs	r2, #1
 8003dac:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3728      	adds	r7, #40	; 0x28
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	09896800 	.word	0x09896800
 8003dc4:	04c4b400 	.word	0x04c4b400

08003dc8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f7ff fe2f 	bl	8003a3a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2201      	movs	r2, #1
 8003de0:	711a      	strb	r2, [r3, #4]
}
 8003de2:	bf00      	nop
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b084      	sub	sp, #16
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f7ff fe28 	bl	8003a4e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003dfe:	bf00      	nop
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b084      	sub	sp, #16
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	f043 0204 	orr.w	r2, r3, #4
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f7ff fe1e 	bl	8003a62 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	711a      	strb	r2, [r3, #4]
}
 8003e2c:	bf00      	nop
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f7ff ffd8 	bl	8003e34 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2201      	movs	r2, #1
 8003e88:	711a      	strb	r2, [r3, #4]
}
 8003e8a:	bf00      	nop
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b084      	sub	sp, #16
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f7ff ffd1 	bl	8003e48 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003ea6:	bf00      	nop
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b084      	sub	sp, #16
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	f043 0204 	orr.w	r2, r3, #4
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f7ff ffc7 	bl	8003e5c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	711a      	strb	r2, [r3, #4]
}
 8003ed4:	bf00      	nop
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e08d      	b.n	800400a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	4b47      	ldr	r3, [pc, #284]	; (8004014 <HAL_DMA_Init+0x138>)
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d80f      	bhi.n	8003f1a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	4b45      	ldr	r3, [pc, #276]	; (8004018 <HAL_DMA_Init+0x13c>)
 8003f02:	4413      	add	r3, r2
 8003f04:	4a45      	ldr	r2, [pc, #276]	; (800401c <HAL_DMA_Init+0x140>)
 8003f06:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0a:	091b      	lsrs	r3, r3, #4
 8003f0c:	009a      	lsls	r2, r3, #2
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a42      	ldr	r2, [pc, #264]	; (8004020 <HAL_DMA_Init+0x144>)
 8003f16:	641a      	str	r2, [r3, #64]	; 0x40
 8003f18:	e00e      	b.n	8003f38 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	4b40      	ldr	r3, [pc, #256]	; (8004024 <HAL_DMA_Init+0x148>)
 8003f22:	4413      	add	r3, r2
 8003f24:	4a3d      	ldr	r2, [pc, #244]	; (800401c <HAL_DMA_Init+0x140>)
 8003f26:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2a:	091b      	lsrs	r3, r3, #4
 8003f2c:	009a      	lsls	r2, r3, #2
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a3c      	ldr	r2, [pc, #240]	; (8004028 <HAL_DMA_Init+0x14c>)
 8003f36:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f52:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003f5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 fa76 	bl	800447c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f98:	d102      	bne.n	8003fa0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003fb4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d010      	beq.n	8003fe0 <HAL_DMA_Init+0x104>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d80c      	bhi.n	8003fe0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fa96 	bl	80044f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003fdc:	605a      	str	r2, [r3, #4]
 8003fde:	e008      	b.n	8003ff2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	40020407 	.word	0x40020407
 8004018:	bffdfff8 	.word	0xbffdfff8
 800401c:	cccccccd 	.word	0xcccccccd
 8004020:	40020000 	.word	0x40020000
 8004024:	bffdfbf8 	.word	0xbffdfbf8
 8004028:	40020400 	.word	0x40020400

0800402c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800403a:	2300      	movs	r3, #0
 800403c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004044:	2b01      	cmp	r3, #1
 8004046:	d101      	bne.n	800404c <HAL_DMA_Start_IT+0x20>
 8004048:	2302      	movs	r3, #2
 800404a:	e066      	b.n	800411a <HAL_DMA_Start_IT+0xee>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b01      	cmp	r3, #1
 800405e:	d155      	bne.n	800410c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0201 	bic.w	r2, r2, #1
 800407c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	68b9      	ldr	r1, [r7, #8]
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 f9bb 	bl	8004400 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	2b00      	cmp	r3, #0
 8004090:	d008      	beq.n	80040a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 020e 	orr.w	r2, r2, #14
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	e00f      	b.n	80040c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 0204 	bic.w	r2, r2, #4
 80040b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 020a 	orr.w	r2, r2, #10
 80040c2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d007      	beq.n	80040e2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040e0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d007      	beq.n	80040fa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040f8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f042 0201 	orr.w	r2, r2, #1
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	e005      	b.n	8004118 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004114:	2302      	movs	r3, #2
 8004116:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004118:	7dfb      	ldrb	r3, [r7, #23]
}
 800411a:	4618      	mov	r0, r3
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004122:	b480      	push	{r7}
 8004124:	b085      	sub	sp, #20
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800412a:	2300      	movs	r3, #0
 800412c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d005      	beq.n	8004146 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2204      	movs	r2, #4
 800413e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	73fb      	strb	r3, [r7, #15]
 8004144:	e037      	b.n	80041b6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 020e 	bic.w	r2, r2, #14
 8004154:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004160:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004164:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0201 	bic.w	r2, r2, #1
 8004174:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417a:	f003 021f 	and.w	r2, r3, #31
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	2101      	movs	r1, #1
 8004184:	fa01 f202 	lsl.w	r2, r1, r2
 8004188:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004192:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00c      	beq.n	80041b6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041aa:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80041b4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041dc:	2300      	movs	r3, #0
 80041de:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d00d      	beq.n	8004208 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2204      	movs	r2, #4
 80041f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	73fb      	strb	r3, [r7, #15]
 8004206:	e047      	b.n	8004298 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 020e 	bic.w	r2, r2, #14
 8004216:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0201 	bic.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004232:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004236:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423c:	f003 021f 	and.w	r2, r3, #31
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004244:	2101      	movs	r1, #1
 8004246:	fa01 f202 	lsl.w	r2, r1, r2
 800424a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004254:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00c      	beq.n	8004278 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004268:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800426c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004276:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	4798      	blx	r3
    }
  }
  return status;
 8004298:	7bfb      	ldrb	r3, [r7, #15]
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042be:	f003 031f 	and.w	r3, r3, #31
 80042c2:	2204      	movs	r2, #4
 80042c4:	409a      	lsls	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	4013      	ands	r3, r2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d026      	beq.n	800431c <HAL_DMA_IRQHandler+0x7a>
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d021      	beq.n	800431c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0320 	and.w	r3, r3, #32
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d107      	bne.n	80042f6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0204 	bic.w	r2, r2, #4
 80042f4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fa:	f003 021f 	and.w	r2, r3, #31
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	2104      	movs	r1, #4
 8004304:	fa01 f202 	lsl.w	r2, r1, r2
 8004308:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430e:	2b00      	cmp	r3, #0
 8004310:	d071      	beq.n	80043f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800431a:	e06c      	b.n	80043f6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004320:	f003 031f 	and.w	r3, r3, #31
 8004324:	2202      	movs	r2, #2
 8004326:	409a      	lsls	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4013      	ands	r3, r2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d02e      	beq.n	800438e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d029      	beq.n	800438e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0320 	and.w	r3, r3, #32
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10b      	bne.n	8004360 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 020a 	bic.w	r2, r2, #10
 8004356:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004364:	f003 021f 	and.w	r2, r3, #31
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436c:	2102      	movs	r1, #2
 800436e:	fa01 f202 	lsl.w	r2, r1, r2
 8004372:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	2b00      	cmp	r3, #0
 8004382:	d038      	beq.n	80043f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800438c:	e033      	b.n	80043f6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004392:	f003 031f 	and.w	r3, r3, #31
 8004396:	2208      	movs	r2, #8
 8004398:	409a      	lsls	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	4013      	ands	r3, r2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d02a      	beq.n	80043f8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d025      	beq.n	80043f8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 020e 	bic.w	r2, r2, #14
 80043ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c0:	f003 021f 	and.w	r2, r3, #31
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c8:	2101      	movs	r1, #1
 80043ca:	fa01 f202 	lsl.w	r2, r1, r2
 80043ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d004      	beq.n	80043f8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80043f6:	bf00      	nop
 80043f8:	bf00      	nop
}
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004416:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441c:	2b00      	cmp	r3, #0
 800441e:	d004      	beq.n	800442a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004428:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442e:	f003 021f 	and.w	r2, r3, #31
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	2101      	movs	r1, #1
 8004438:	fa01 f202 	lsl.w	r2, r1, r2
 800443c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	2b10      	cmp	r3, #16
 800444c:	d108      	bne.n	8004460 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800445e:	e007      	b.n	8004470 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	60da      	str	r2, [r3, #12]
}
 8004470:	bf00      	nop
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800447c:	b480      	push	{r7}
 800447e:	b087      	sub	sp, #28
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	461a      	mov	r2, r3
 800448a:	4b16      	ldr	r3, [pc, #88]	; (80044e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800448c:	429a      	cmp	r2, r3
 800448e:	d802      	bhi.n	8004496 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004490:	4b15      	ldr	r3, [pc, #84]	; (80044e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004492:	617b      	str	r3, [r7, #20]
 8004494:	e001      	b.n	800449a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004496:	4b15      	ldr	r3, [pc, #84]	; (80044ec <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004498:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	3b08      	subs	r3, #8
 80044a6:	4a12      	ldr	r2, [pc, #72]	; (80044f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80044a8:	fba2 2303 	umull	r2, r3, r2, r3
 80044ac:	091b      	lsrs	r3, r3, #4
 80044ae:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b4:	089b      	lsrs	r3, r3, #2
 80044b6:	009a      	lsls	r2, r3, #2
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	4413      	add	r3, r2
 80044bc:	461a      	mov	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a0b      	ldr	r2, [pc, #44]	; (80044f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80044c6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f003 031f 	and.w	r3, r3, #31
 80044ce:	2201      	movs	r2, #1
 80044d0:	409a      	lsls	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80044d6:	bf00      	nop
 80044d8:	371c      	adds	r7, #28
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	40020407 	.word	0x40020407
 80044e8:	40020800 	.word	0x40020800
 80044ec:	40020820 	.word	0x40020820
 80044f0:	cccccccd 	.word	0xcccccccd
 80044f4:	40020880 	.word	0x40020880

080044f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800450c:	4413      	add	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	461a      	mov	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a08      	ldr	r2, [pc, #32]	; (800453c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800451a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	3b01      	subs	r3, #1
 8004520:	f003 031f 	and.w	r3, r3, #31
 8004524:	2201      	movs	r2, #1
 8004526:	409a      	lsls	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800452c:	bf00      	nop
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	1000823f 	.word	0x1000823f
 800453c:	40020940 	.word	0x40020940

08004540 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004540:	b480      	push	{r7}
 8004542:	b087      	sub	sp, #28
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800454a:	2300      	movs	r3, #0
 800454c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800454e:	e15a      	b.n	8004806 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	2101      	movs	r1, #1
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	fa01 f303 	lsl.w	r3, r1, r3
 800455c:	4013      	ands	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 814c 	beq.w	8004800 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f003 0303 	and.w	r3, r3, #3
 8004570:	2b01      	cmp	r3, #1
 8004572:	d005      	beq.n	8004580 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800457c:	2b02      	cmp	r3, #2
 800457e:	d130      	bne.n	80045e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	005b      	lsls	r3, r3, #1
 800458a:	2203      	movs	r2, #3
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	43db      	mvns	r3, r3
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	4013      	ands	r3, r2
 8004596:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	68da      	ldr	r2, [r3, #12]
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045b6:	2201      	movs	r2, #1
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	43db      	mvns	r3, r3
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	4013      	ands	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	091b      	lsrs	r3, r3, #4
 80045cc:	f003 0201 	and.w	r2, r3, #1
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	fa02 f303 	lsl.w	r3, r2, r3
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	4313      	orrs	r3, r2
 80045da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	d017      	beq.n	800461e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	2203      	movs	r2, #3
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	43db      	mvns	r3, r3
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	4013      	ands	r3, r2
 8004604:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	fa02 f303 	lsl.w	r3, r2, r3
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	4313      	orrs	r3, r2
 8004616:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d123      	bne.n	8004672 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	08da      	lsrs	r2, r3, #3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	3208      	adds	r2, #8
 8004632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004636:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	220f      	movs	r2, #15
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	43db      	mvns	r3, r3
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4013      	ands	r3, r2
 800464c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	691a      	ldr	r2, [r3, #16]
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	fa02 f303 	lsl.w	r3, r2, r3
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	4313      	orrs	r3, r2
 8004662:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	08da      	lsrs	r2, r3, #3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3208      	adds	r2, #8
 800466c:	6939      	ldr	r1, [r7, #16]
 800466e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	2203      	movs	r2, #3
 800467e:	fa02 f303 	lsl.w	r3, r2, r3
 8004682:	43db      	mvns	r3, r3
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	4013      	ands	r3, r2
 8004688:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f003 0203 	and.w	r2, r3, #3
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	4313      	orrs	r3, r2
 800469e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f000 80a6 	beq.w	8004800 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046b4:	4b5b      	ldr	r3, [pc, #364]	; (8004824 <HAL_GPIO_Init+0x2e4>)
 80046b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b8:	4a5a      	ldr	r2, [pc, #360]	; (8004824 <HAL_GPIO_Init+0x2e4>)
 80046ba:	f043 0301 	orr.w	r3, r3, #1
 80046be:	6613      	str	r3, [r2, #96]	; 0x60
 80046c0:	4b58      	ldr	r3, [pc, #352]	; (8004824 <HAL_GPIO_Init+0x2e4>)
 80046c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	60bb      	str	r3, [r7, #8]
 80046ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046cc:	4a56      	ldr	r2, [pc, #344]	; (8004828 <HAL_GPIO_Init+0x2e8>)
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	089b      	lsrs	r3, r3, #2
 80046d2:	3302      	adds	r3, #2
 80046d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f003 0303 	and.w	r3, r3, #3
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	220f      	movs	r2, #15
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	43db      	mvns	r3, r3
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	4013      	ands	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80046f6:	d01f      	beq.n	8004738 <HAL_GPIO_Init+0x1f8>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a4c      	ldr	r2, [pc, #304]	; (800482c <HAL_GPIO_Init+0x2ec>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d019      	beq.n	8004734 <HAL_GPIO_Init+0x1f4>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a4b      	ldr	r2, [pc, #300]	; (8004830 <HAL_GPIO_Init+0x2f0>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d013      	beq.n	8004730 <HAL_GPIO_Init+0x1f0>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a4a      	ldr	r2, [pc, #296]	; (8004834 <HAL_GPIO_Init+0x2f4>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d00d      	beq.n	800472c <HAL_GPIO_Init+0x1ec>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a49      	ldr	r2, [pc, #292]	; (8004838 <HAL_GPIO_Init+0x2f8>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d007      	beq.n	8004728 <HAL_GPIO_Init+0x1e8>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a48      	ldr	r2, [pc, #288]	; (800483c <HAL_GPIO_Init+0x2fc>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d101      	bne.n	8004724 <HAL_GPIO_Init+0x1e4>
 8004720:	2305      	movs	r3, #5
 8004722:	e00a      	b.n	800473a <HAL_GPIO_Init+0x1fa>
 8004724:	2306      	movs	r3, #6
 8004726:	e008      	b.n	800473a <HAL_GPIO_Init+0x1fa>
 8004728:	2304      	movs	r3, #4
 800472a:	e006      	b.n	800473a <HAL_GPIO_Init+0x1fa>
 800472c:	2303      	movs	r3, #3
 800472e:	e004      	b.n	800473a <HAL_GPIO_Init+0x1fa>
 8004730:	2302      	movs	r3, #2
 8004732:	e002      	b.n	800473a <HAL_GPIO_Init+0x1fa>
 8004734:	2301      	movs	r3, #1
 8004736:	e000      	b.n	800473a <HAL_GPIO_Init+0x1fa>
 8004738:	2300      	movs	r3, #0
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	f002 0203 	and.w	r2, r2, #3
 8004740:	0092      	lsls	r2, r2, #2
 8004742:	4093      	lsls	r3, r2
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	4313      	orrs	r3, r2
 8004748:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800474a:	4937      	ldr	r1, [pc, #220]	; (8004828 <HAL_GPIO_Init+0x2e8>)
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	089b      	lsrs	r3, r3, #2
 8004750:	3302      	adds	r3, #2
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004758:	4b39      	ldr	r3, [pc, #228]	; (8004840 <HAL_GPIO_Init+0x300>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	43db      	mvns	r3, r3
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	4013      	ands	r3, r2
 8004766:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4313      	orrs	r3, r2
 800477a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800477c:	4a30      	ldr	r2, [pc, #192]	; (8004840 <HAL_GPIO_Init+0x300>)
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004782:	4b2f      	ldr	r3, [pc, #188]	; (8004840 <HAL_GPIO_Init+0x300>)
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	43db      	mvns	r3, r3
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	4013      	ands	r3, r2
 8004790:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047a6:	4a26      	ldr	r2, [pc, #152]	; (8004840 <HAL_GPIO_Init+0x300>)
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80047ac:	4b24      	ldr	r3, [pc, #144]	; (8004840 <HAL_GPIO_Init+0x300>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	43db      	mvns	r3, r3
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	4013      	ands	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80047d0:	4a1b      	ldr	r2, [pc, #108]	; (8004840 <HAL_GPIO_Init+0x300>)
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80047d6:	4b1a      	ldr	r3, [pc, #104]	; (8004840 <HAL_GPIO_Init+0x300>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	43db      	mvns	r3, r3
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	4013      	ands	r3, r2
 80047e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047fa:	4a11      	ldr	r2, [pc, #68]	; (8004840 <HAL_GPIO_Init+0x300>)
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	3301      	adds	r3, #1
 8004804:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	fa22 f303 	lsr.w	r3, r2, r3
 8004810:	2b00      	cmp	r3, #0
 8004812:	f47f ae9d 	bne.w	8004550 <HAL_GPIO_Init+0x10>
  }
}
 8004816:	bf00      	nop
 8004818:	bf00      	nop
 800481a:	371c      	adds	r7, #28
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	40021000 	.word	0x40021000
 8004828:	40010000 	.word	0x40010000
 800482c:	48000400 	.word	0x48000400
 8004830:	48000800 	.word	0x48000800
 8004834:	48000c00 	.word	0x48000c00
 8004838:	48001000 	.word	0x48001000
 800483c:	48001400 	.word	0x48001400
 8004840:	40010400 	.word	0x40010400

08004844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	460b      	mov	r3, r1
 800484e:	807b      	strh	r3, [r7, #2]
 8004850:	4613      	mov	r3, r2
 8004852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004854:	787b      	ldrb	r3, [r7, #1]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800485a:	887a      	ldrh	r2, [r7, #2]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004860:	e002      	b.n	8004868 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004862:	887a      	ldrh	r2, [r7, #2]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	4603      	mov	r3, r0
 800487c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800487e:	4b08      	ldr	r3, [pc, #32]	; (80048a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004880:	695a      	ldr	r2, [r3, #20]
 8004882:	88fb      	ldrh	r3, [r7, #6]
 8004884:	4013      	ands	r3, r2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d006      	beq.n	8004898 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800488a:	4a05      	ldr	r2, [pc, #20]	; (80048a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800488c:	88fb      	ldrh	r3, [r7, #6]
 800488e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004890:	88fb      	ldrh	r3, [r7, #6]
 8004892:	4618      	mov	r0, r3
 8004894:	f000 f806 	bl	80048a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004898:	bf00      	nop
 800489a:	3708      	adds	r7, #8
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40010400 	.word	0x40010400

080048a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	4603      	mov	r3, r0
 80048ac:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80048ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048bc:	b08b      	sub	sp, #44	; 0x2c
 80048be:	af06      	add	r7, sp, #24
 80048c0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e0d7      	b.n	8004a7c <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d106      	bne.n	80048e6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f008 ff91 	bl	800d808 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2203      	movs	r2, #3
 80048ea:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f004 fe67 	bl	80095c6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048f8:	2300      	movs	r3, #0
 80048fa:	73fb      	strb	r3, [r7, #15]
 80048fc:	e04c      	b.n	8004998 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80048fe:	7bfb      	ldrb	r3, [r7, #15]
 8004900:	6879      	ldr	r1, [r7, #4]
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	4613      	mov	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	00db      	lsls	r3, r3, #3
 800490c:	440b      	add	r3, r1
 800490e:	3301      	adds	r3, #1
 8004910:	2201      	movs	r2, #1
 8004912:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004914:	7bfb      	ldrb	r3, [r7, #15]
 8004916:	6879      	ldr	r1, [r7, #4]
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	4613      	mov	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4413      	add	r3, r2
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	440b      	add	r3, r1
 8004924:	7bfa      	ldrb	r2, [r7, #15]
 8004926:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004928:	7bfa      	ldrb	r2, [r7, #15]
 800492a:	7bfb      	ldrb	r3, [r7, #15]
 800492c:	b298      	uxth	r0, r3
 800492e:	6879      	ldr	r1, [r7, #4]
 8004930:	4613      	mov	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	440b      	add	r3, r1
 800493a:	3336      	adds	r3, #54	; 0x36
 800493c:	4602      	mov	r2, r0
 800493e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004940:	7bfb      	ldrb	r3, [r7, #15]
 8004942:	6879      	ldr	r1, [r7, #4]
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	4613      	mov	r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4413      	add	r3, r2
 800494c:	00db      	lsls	r3, r3, #3
 800494e:	440b      	add	r3, r1
 8004950:	3303      	adds	r3, #3
 8004952:	2200      	movs	r2, #0
 8004954:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004956:	7bfa      	ldrb	r2, [r7, #15]
 8004958:	6879      	ldr	r1, [r7, #4]
 800495a:	4613      	mov	r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	00db      	lsls	r3, r3, #3
 8004962:	440b      	add	r3, r1
 8004964:	3338      	adds	r3, #56	; 0x38
 8004966:	2200      	movs	r2, #0
 8004968:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800496a:	7bfa      	ldrb	r2, [r7, #15]
 800496c:	6879      	ldr	r1, [r7, #4]
 800496e:	4613      	mov	r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	4413      	add	r3, r2
 8004974:	00db      	lsls	r3, r3, #3
 8004976:	440b      	add	r3, r1
 8004978:	333c      	adds	r3, #60	; 0x3c
 800497a:	2200      	movs	r2, #0
 800497c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800497e:	7bfa      	ldrb	r2, [r7, #15]
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	4613      	mov	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	440b      	add	r3, r1
 800498c:	3340      	adds	r3, #64	; 0x40
 800498e:	2200      	movs	r2, #0
 8004990:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004992:	7bfb      	ldrb	r3, [r7, #15]
 8004994:	3301      	adds	r3, #1
 8004996:	73fb      	strb	r3, [r7, #15]
 8004998:	7bfa      	ldrb	r2, [r7, #15]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d3ad      	bcc.n	80048fe <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049a2:	2300      	movs	r3, #0
 80049a4:	73fb      	strb	r3, [r7, #15]
 80049a6:	e044      	b.n	8004a32 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80049a8:	7bfa      	ldrb	r2, [r7, #15]
 80049aa:	6879      	ldr	r1, [r7, #4]
 80049ac:	4613      	mov	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	440b      	add	r3, r1
 80049b6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80049ba:	2200      	movs	r2, #0
 80049bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80049be:	7bfa      	ldrb	r2, [r7, #15]
 80049c0:	6879      	ldr	r1, [r7, #4]
 80049c2:	4613      	mov	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	440b      	add	r3, r1
 80049cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80049d0:	7bfa      	ldrb	r2, [r7, #15]
 80049d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80049d4:	7bfa      	ldrb	r2, [r7, #15]
 80049d6:	6879      	ldr	r1, [r7, #4]
 80049d8:	4613      	mov	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	440b      	add	r3, r1
 80049e2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80049e6:	2200      	movs	r2, #0
 80049e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80049ea:	7bfa      	ldrb	r2, [r7, #15]
 80049ec:	6879      	ldr	r1, [r7, #4]
 80049ee:	4613      	mov	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	440b      	add	r3, r1
 80049f8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a00:	7bfa      	ldrb	r2, [r7, #15]
 8004a02:	6879      	ldr	r1, [r7, #4]
 8004a04:	4613      	mov	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	440b      	add	r3, r1
 8004a0e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a16:	7bfa      	ldrb	r2, [r7, #15]
 8004a18:	6879      	ldr	r1, [r7, #4]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4413      	add	r3, r2
 8004a20:	00db      	lsls	r3, r3, #3
 8004a22:	440b      	add	r3, r1
 8004a24:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	73fb      	strb	r3, [r7, #15]
 8004a32:	7bfa      	ldrb	r2, [r7, #15]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d3b5      	bcc.n	80049a8 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	603b      	str	r3, [r7, #0]
 8004a42:	687e      	ldr	r6, [r7, #4]
 8004a44:	466d      	mov	r5, sp
 8004a46:	f106 0410 	add.w	r4, r6, #16
 8004a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	602b      	str	r3, [r5, #0]
 8004a52:	1d33      	adds	r3, r6, #4
 8004a54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a56:	6838      	ldr	r0, [r7, #0]
 8004a58:	f004 fdd0 	bl	80095fc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	69db      	ldr	r3, [r3, #28]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d102      	bne.n	8004a7a <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f001 fc29 	bl	80062cc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a84 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d101      	bne.n	8004a9a <HAL_PCD_Start+0x16>
 8004a96:	2302      	movs	r3, #2
 8004a98:	e012      	b.n	8004ac0 <HAL_PCD_Start+0x3c>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f004 fd76 	bl	8009598 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f006 ff8f 	bl	800b9d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f006 ff94 	bl	800ba02 <USB_ReadInterrupts>
 8004ada:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 fb26 	bl	8005138 <PCD_EP_ISR_Handler>

    return;
 8004aec:	e110      	b.n	8004d10 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d013      	beq.n	8004b20 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b0a:	b292      	uxth	r2, r2
 8004b0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f008 ff0a 	bl	800d92a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004b16:	2100      	movs	r1, #0
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 f8fc 	bl	8004d16 <HAL_PCD_SetAddress>

    return;
 8004b1e:	e0f7      	b.n	8004d10 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00c      	beq.n	8004b44 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b3c:	b292      	uxth	r2, r2
 8004b3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004b42:	e0e5      	b.n	8004d10 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00c      	beq.n	8004b68 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b60:	b292      	uxth	r2, r2
 8004b62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004b66:	e0d3      	b.n	8004d10 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d034      	beq.n	8004bdc <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0204 	bic.w	r2, r2, #4
 8004b84:	b292      	uxth	r2, r2
 8004b86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0208 	bic.w	r2, r2, #8
 8004b9c:	b292      	uxth	r2, r2
 8004b9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d107      	bne.n	8004bbc <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f009 f8ac 	bl	800dd14 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f008 feed 	bl	800d99c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004bd4:	b292      	uxth	r2, r2
 8004bd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004bda:	e099      	b.n	8004d10 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d027      	beq.n	8004c36 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f042 0208 	orr.w	r2, r2, #8
 8004bf8:	b292      	uxth	r2, r2
 8004bfa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c10:	b292      	uxth	r2, r2
 8004c12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f042 0204 	orr.w	r2, r2, #4
 8004c28:	b292      	uxth	r2, r2
 8004c2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f008 fe9a 	bl	800d968 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004c34:	e06c      	b.n	8004d10 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d040      	beq.n	8004cc2 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c52:	b292      	uxth	r2, r2
 8004c54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d12b      	bne.n	8004cba <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f042 0204 	orr.w	r2, r2, #4
 8004c74:	b292      	uxth	r2, r2
 8004c76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f042 0208 	orr.w	r2, r2, #8
 8004c8c:	b292      	uxth	r2, r2
 8004c8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	089b      	lsrs	r3, r3, #2
 8004ca6:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f009 f82e 	bl	800dd14 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004cb8:	e02a      	b.n	8004d10 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f008 fe54 	bl	800d968 <HAL_PCD_SuspendCallback>
    return;
 8004cc0:	e026      	b.n	8004d10 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00f      	beq.n	8004cec <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004cde:	b292      	uxth	r2, r2
 8004ce0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f008 fe12 	bl	800d90e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004cea:	e011      	b.n	8004d10 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00c      	beq.n	8004d10 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d08:	b292      	uxth	r2, r2
 8004d0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004d0e:	bf00      	nop
  }
}
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b082      	sub	sp, #8
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
 8004d1e:	460b      	mov	r3, r1
 8004d20:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d101      	bne.n	8004d30 <HAL_PCD_SetAddress+0x1a>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	e013      	b.n	8004d58 <HAL_PCD_SetAddress+0x42>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	78fa      	ldrb	r2, [r7, #3]
 8004d3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	78fa      	ldrb	r2, [r7, #3]
 8004d46:	4611      	mov	r1, r2
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f006 fe2f 	bl	800b9ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3708      	adds	r7, #8
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	4608      	mov	r0, r1
 8004d6a:	4611      	mov	r1, r2
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	4603      	mov	r3, r0
 8004d70:	70fb      	strb	r3, [r7, #3]
 8004d72:	460b      	mov	r3, r1
 8004d74:	803b      	strh	r3, [r7, #0]
 8004d76:	4613      	mov	r3, r2
 8004d78:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	da0e      	bge.n	8004da4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d86:	78fb      	ldrb	r3, [r7, #3]
 8004d88:	f003 0307 	and.w	r3, r3, #7
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	4613      	mov	r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4413      	add	r3, r2
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	4413      	add	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	705a      	strb	r2, [r3, #1]
 8004da2:	e00e      	b.n	8004dc2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004da4:	78fb      	ldrb	r3, [r7, #3]
 8004da6:	f003 0207 	and.w	r2, r3, #7
 8004daa:	4613      	mov	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	00db      	lsls	r3, r3, #3
 8004db2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	4413      	add	r3, r2
 8004dba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004dc2:	78fb      	ldrb	r3, [r7, #3]
 8004dc4:	f003 0307 	and.w	r3, r3, #7
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004dce:	883a      	ldrh	r2, [r7, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	78ba      	ldrb	r2, [r7, #2]
 8004dd8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	785b      	ldrb	r3, [r3, #1]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d004      	beq.n	8004dec <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004dec:	78bb      	ldrb	r3, [r7, #2]
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d102      	bne.n	8004df8 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d101      	bne.n	8004e06 <HAL_PCD_EP_Open+0xa6>
 8004e02:	2302      	movs	r3, #2
 8004e04:	e00e      	b.n	8004e24 <HAL_PCD_EP_Open+0xc4>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68f9      	ldr	r1, [r7, #12]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f004 fc13 	bl	8009640 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004e22:	7afb      	ldrb	r3, [r7, #11]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	460b      	mov	r3, r1
 8004e36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	da0e      	bge.n	8004e5e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e40:	78fb      	ldrb	r3, [r7, #3]
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	1c5a      	adds	r2, r3, #1
 8004e48:	4613      	mov	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4413      	add	r3, r2
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	4413      	add	r3, r2
 8004e54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	705a      	strb	r2, [r3, #1]
 8004e5c:	e00e      	b.n	8004e7c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e5e:	78fb      	ldrb	r3, [r7, #3]
 8004e60:	f003 0207 	and.w	r2, r3, #7
 8004e64:	4613      	mov	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	4413      	add	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004e7c:	78fb      	ldrb	r3, [r7, #3]
 8004e7e:	f003 0307 	and.w	r3, r3, #7
 8004e82:	b2da      	uxtb	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d101      	bne.n	8004e96 <HAL_PCD_EP_Close+0x6a>
 8004e92:	2302      	movs	r3, #2
 8004e94:	e00e      	b.n	8004eb4 <HAL_PCD_EP_Close+0x88>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68f9      	ldr	r1, [r7, #12]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f004 ff5f 	bl	8009d68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	607a      	str	r2, [r7, #4]
 8004ec6:	603b      	str	r3, [r7, #0]
 8004ec8:	460b      	mov	r3, r1
 8004eca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ecc:	7afb      	ldrb	r3, [r7, #11]
 8004ece:	f003 0207 	and.w	r2, r3, #7
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	00db      	lsls	r3, r3, #3
 8004eda:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004efc:	7afb      	ldrb	r3, [r7, #11]
 8004efe:	f003 0307 	and.w	r3, r3, #7
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f08:	7afb      	ldrb	r3, [r7, #11]
 8004f0a:	f003 0307 	and.w	r3, r3, #7
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d106      	bne.n	8004f20 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6979      	ldr	r1, [r7, #20]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f005 f912 	bl	800a142 <USB_EPStartXfer>
 8004f1e:	e005      	b.n	8004f2c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6979      	ldr	r1, [r7, #20]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f005 f90b 	bl	800a142 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
 8004f3e:	460b      	mov	r3, r1
 8004f40:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004f42:	78fb      	ldrb	r3, [r7, #3]
 8004f44:	f003 0207 	and.w	r2, r3, #7
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4413      	add	r3, r2
 8004f50:	00db      	lsls	r3, r3, #3
 8004f52:	440b      	add	r3, r1
 8004f54:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004f58:	681b      	ldr	r3, [r3, #0]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b086      	sub	sp, #24
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	60f8      	str	r0, [r7, #12]
 8004f6e:	607a      	str	r2, [r7, #4]
 8004f70:	603b      	str	r3, [r7, #0]
 8004f72:	460b      	mov	r3, r1
 8004f74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f76:	7afb      	ldrb	r3, [r7, #11]
 8004f78:	f003 0307 	and.w	r3, r3, #7
 8004f7c:	1c5a      	adds	r2, r3, #1
 8004f7e:	4613      	mov	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	4413      	add	r3, r2
 8004f8a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fb2:	7afb      	ldrb	r3, [r7, #11]
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004fbe:	7afb      	ldrb	r3, [r7, #11]
 8004fc0:	f003 0307 	and.w	r3, r3, #7
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d106      	bne.n	8004fd6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6979      	ldr	r1, [r7, #20]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f005 f8b7 	bl	800a142 <USB_EPStartXfer>
 8004fd4:	e005      	b.n	8004fe2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	6979      	ldr	r1, [r7, #20]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f005 f8b0 	bl	800a142 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3718      	adds	r7, #24
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004ff8:	78fb      	ldrb	r3, [r7, #3]
 8004ffa:	f003 0207 	and.w	r2, r3, #7
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	429a      	cmp	r2, r3
 8005004:	d901      	bls.n	800500a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e03e      	b.n	8005088 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800500a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800500e:	2b00      	cmp	r3, #0
 8005010:	da0e      	bge.n	8005030 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005012:	78fb      	ldrb	r3, [r7, #3]
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	1c5a      	adds	r2, r3, #1
 800501a:	4613      	mov	r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4413      	add	r3, r2
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	4413      	add	r3, r2
 8005026:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2201      	movs	r2, #1
 800502c:	705a      	strb	r2, [r3, #1]
 800502e:	e00c      	b.n	800504a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005030:	78fa      	ldrb	r2, [r7, #3]
 8005032:	4613      	mov	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	00db      	lsls	r3, r3, #3
 800503a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	4413      	add	r3, r2
 8005042:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2201      	movs	r2, #1
 800504e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005050:	78fb      	ldrb	r3, [r7, #3]
 8005052:	f003 0307 	and.w	r3, r3, #7
 8005056:	b2da      	uxtb	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005062:	2b01      	cmp	r3, #1
 8005064:	d101      	bne.n	800506a <HAL_PCD_EP_SetStall+0x7e>
 8005066:	2302      	movs	r3, #2
 8005068:	e00e      	b.n	8005088 <HAL_PCD_EP_SetStall+0x9c>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68f9      	ldr	r1, [r7, #12]
 8005078:	4618      	mov	r0, r3
 800507a:	f006 fb98 	bl	800b7ae <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	460b      	mov	r3, r1
 800509a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800509c:	78fb      	ldrb	r3, [r7, #3]
 800509e:	f003 020f 	and.w	r2, r3, #15
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d901      	bls.n	80050ae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e040      	b.n	8005130 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80050ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	da0e      	bge.n	80050d4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050b6:	78fb      	ldrb	r3, [r7, #3]
 80050b8:	f003 0307 	and.w	r3, r3, #7
 80050bc:	1c5a      	adds	r2, r3, #1
 80050be:	4613      	mov	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	00db      	lsls	r3, r3, #3
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	4413      	add	r3, r2
 80050ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2201      	movs	r2, #1
 80050d0:	705a      	strb	r2, [r3, #1]
 80050d2:	e00e      	b.n	80050f2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050d4:	78fb      	ldrb	r3, [r7, #3]
 80050d6:	f003 0207 	and.w	r2, r3, #7
 80050da:	4613      	mov	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4413      	add	r3, r2
 80050e0:	00db      	lsls	r3, r3, #3
 80050e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	4413      	add	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050f8:	78fb      	ldrb	r3, [r7, #3]
 80050fa:	f003 0307 	and.w	r3, r3, #7
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800510a:	2b01      	cmp	r3, #1
 800510c:	d101      	bne.n	8005112 <HAL_PCD_EP_ClrStall+0x82>
 800510e:	2302      	movs	r3, #2
 8005110:	e00e      	b.n	8005130 <HAL_PCD_EP_ClrStall+0xa0>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68f9      	ldr	r1, [r7, #12]
 8005120:	4618      	mov	r0, r3
 8005122:	f006 fb95 	bl	800b850 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b096      	sub	sp, #88	; 0x58
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005140:	e39c      	b.n	800587c <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800514a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800514e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005152:	b2db      	uxtb	r3, r3
 8005154:	f003 030f 	and.w	r3, r3, #15
 8005158:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800515c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005160:	2b00      	cmp	r3, #0
 8005162:	f040 815e 	bne.w	8005422 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005166:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800516a:	f003 0310 	and.w	r3, r3, #16
 800516e:	2b00      	cmp	r3, #0
 8005170:	d150      	bne.n	8005214 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	881b      	ldrh	r3, [r3, #0]
 8005178:	b29b      	uxth	r3, r3
 800517a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800517e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005182:	81fb      	strh	r3, [r7, #14]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	89fb      	ldrh	r3, [r7, #14]
 800518a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800518e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005192:	b29b      	uxth	r3, r3
 8005194:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	3328      	adds	r3, #40	; 0x28
 800519a:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	461a      	mov	r2, r3
 80051a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	4413      	add	r3, r2
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	6812      	ldr	r2, [r2, #0]
 80051b4:	4413      	add	r3, r2
 80051b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80051c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80051c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c6:	695a      	ldr	r2, [r3, #20]
 80051c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	441a      	add	r2, r3
 80051ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80051d2:	2100      	movs	r1, #0
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f008 fb80 	bl	800d8da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f000 834a 	beq.w	800587c <PCD_EP_ISR_Handler+0x744>
 80051e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f040 8345 	bne.w	800587c <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	b292      	uxth	r2, r2
 8005206:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005212:	e333      	b.n	800587c <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800521a:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	881b      	ldrh	r3, [r3, #0]
 8005222:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005226:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800522a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800522e:	2b00      	cmp	r3, #0
 8005230:	d032      	beq.n	8005298 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800523a:	b29b      	uxth	r3, r3
 800523c:	461a      	mov	r2, r3
 800523e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	4413      	add	r3, r2
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6812      	ldr	r2, [r2, #0]
 800524a:	4413      	add	r3, r2
 800524c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005258:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6818      	ldr	r0, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005266:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800526a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800526c:	b29b      	uxth	r3, r3
 800526e:	f006 fc1a 	bl	800baa6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	881b      	ldrh	r3, [r3, #0]
 8005278:	b29a      	uxth	r2, r3
 800527a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800527e:	4013      	ands	r3, r2
 8005280:	823b      	strh	r3, [r7, #16]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	8a3a      	ldrh	r2, [r7, #16]
 8005288:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800528c:	b292      	uxth	r2, r2
 800528e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f008 faf5 	bl	800d880 <HAL_PCD_SetupStageCallback>
 8005296:	e2f1      	b.n	800587c <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005298:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800529c:	2b00      	cmp	r3, #0
 800529e:	f280 82ed 	bge.w	800587c <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	881b      	ldrh	r3, [r3, #0]
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80052ae:	4013      	ands	r3, r2
 80052b0:	83fb      	strh	r3, [r7, #30]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	8bfa      	ldrh	r2, [r7, #30]
 80052b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052bc:	b292      	uxth	r2, r2
 80052be:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	461a      	mov	r2, r3
 80052cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	00db      	lsls	r3, r3, #3
 80052d2:	4413      	add	r3, r2
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	6812      	ldr	r2, [r2, #0]
 80052d8:	4413      	add	r3, r2
 80052da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80052de:	881b      	ldrh	r3, [r3, #0]
 80052e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80052e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052e6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80052e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ea:	69db      	ldr	r3, [r3, #28]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d019      	beq.n	8005324 <PCD_EP_ISR_Handler+0x1ec>
 80052f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f2:	695b      	ldr	r3, [r3, #20]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d015      	beq.n	8005324 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6818      	ldr	r0, [r3, #0]
 80052fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052fe:	6959      	ldr	r1, [r3, #20]
 8005300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005302:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005306:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005308:	b29b      	uxth	r3, r3
 800530a:	f006 fbcc 	bl	800baa6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800530e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005310:	695a      	ldr	r2, [r3, #20]
 8005312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	441a      	add	r2, r3
 8005318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800531a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800531c:	2100      	movs	r1, #0
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f008 fac0 	bl	800d8a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	881b      	ldrh	r3, [r3, #0]
 800532a:	b29b      	uxth	r3, r3
 800532c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005330:	2b00      	cmp	r3, #0
 8005332:	f040 82a3 	bne.w	800587c <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	61bb      	str	r3, [r7, #24]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005344:	b29b      	uxth	r3, r3
 8005346:	461a      	mov	r2, r3
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	4413      	add	r3, r2
 800534c:	61bb      	str	r3, [r7, #24]
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005354:	617b      	str	r3, [r7, #20]
 8005356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	2b3e      	cmp	r3, #62	; 0x3e
 800535c:	d918      	bls.n	8005390 <PCD_EP_ISR_Handler+0x258>
 800535e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	095b      	lsrs	r3, r3, #5
 8005364:	647b      	str	r3, [r7, #68]	; 0x44
 8005366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	f003 031f 	and.w	r3, r3, #31
 800536e:	2b00      	cmp	r3, #0
 8005370:	d102      	bne.n	8005378 <PCD_EP_ISR_Handler+0x240>
 8005372:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005374:	3b01      	subs	r3, #1
 8005376:	647b      	str	r3, [r7, #68]	; 0x44
 8005378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800537a:	b29b      	uxth	r3, r3
 800537c:	029b      	lsls	r3, r3, #10
 800537e:	b29b      	uxth	r3, r3
 8005380:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005384:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005388:	b29a      	uxth	r2, r3
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	801a      	strh	r2, [r3, #0]
 800538e:	e029      	b.n	80053e4 <PCD_EP_ISR_Handler+0x2ac>
 8005390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d112      	bne.n	80053be <PCD_EP_ISR_Handler+0x286>
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	881b      	ldrh	r3, [r3, #0]
 800539c:	b29b      	uxth	r3, r3
 800539e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	801a      	strh	r2, [r3, #0]
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	801a      	strh	r2, [r3, #0]
 80053bc:	e012      	b.n	80053e4 <PCD_EP_ISR_Handler+0x2ac>
 80053be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	085b      	lsrs	r3, r3, #1
 80053c4:	647b      	str	r3, [r7, #68]	; 0x44
 80053c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d002      	beq.n	80053d8 <PCD_EP_ISR_Handler+0x2a0>
 80053d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053d4:	3301      	adds	r3, #1
 80053d6:	647b      	str	r3, [r7, #68]	; 0x44
 80053d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053da:	b29b      	uxth	r3, r3
 80053dc:	029b      	lsls	r3, r3, #10
 80053de:	b29a      	uxth	r2, r3
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	881b      	ldrh	r3, [r3, #0]
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f4:	827b      	strh	r3, [r7, #18]
 80053f6:	8a7b      	ldrh	r3, [r7, #18]
 80053f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80053fc:	827b      	strh	r3, [r7, #18]
 80053fe:	8a7b      	ldrh	r3, [r7, #18]
 8005400:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005404:	827b      	strh	r3, [r7, #18]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	8a7b      	ldrh	r3, [r7, #18]
 800540c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005410:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800541c:	b29b      	uxth	r3, r3
 800541e:	8013      	strh	r3, [r2, #0]
 8005420:	e22c      	b.n	800587c <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	461a      	mov	r2, r3
 8005428:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005436:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800543a:	2b00      	cmp	r3, #0
 800543c:	f280 80f6 	bge.w	800562c <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	461a      	mov	r2, r3
 8005446:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	881b      	ldrh	r3, [r3, #0]
 8005450:	b29a      	uxth	r2, r3
 8005452:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005456:	4013      	ands	r3, r2
 8005458:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	461a      	mov	r2, r3
 8005462:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800546e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005472:	b292      	uxth	r2, r2
 8005474:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005476:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800547a:	4613      	mov	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	00db      	lsls	r3, r3, #3
 8005482:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	4413      	add	r3, r2
 800548a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800548c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800548e:	7b1b      	ldrb	r3, [r3, #12]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d123      	bne.n	80054dc <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800549c:	b29b      	uxth	r3, r3
 800549e:	461a      	mov	r2, r3
 80054a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	00db      	lsls	r3, r3, #3
 80054a6:	4413      	add	r3, r2
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6812      	ldr	r2, [r2, #0]
 80054ac:	4413      	add	r3, r2
 80054ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80054b2:	881b      	ldrh	r3, [r3, #0]
 80054b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054b8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80054bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 808e 	beq.w	80055e2 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6818      	ldr	r0, [r3, #0]
 80054ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054cc:	6959      	ldr	r1, [r3, #20]
 80054ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054d0:	88da      	ldrh	r2, [r3, #6]
 80054d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80054d6:	f006 fae6 	bl	800baa6 <USB_ReadPMA>
 80054da:	e082      	b.n	80055e2 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80054dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054de:	78db      	ldrb	r3, [r3, #3]
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d10a      	bne.n	80054fa <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80054e4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80054e8:	461a      	mov	r2, r3
 80054ea:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f9d3 	bl	8005898 <HAL_PCD_EP_DB_Receive>
 80054f2:	4603      	mov	r3, r0
 80054f4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80054f8:	e073      	b.n	80055e2 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	4413      	add	r3, r2
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	b29b      	uxth	r3, r3
 800550c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005514:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	461a      	mov	r2, r3
 800551e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	441a      	add	r2, r3
 8005526:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800552a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800552e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005536:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800553a:	b29b      	uxth	r3, r3
 800553c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	461a      	mov	r2, r3
 8005544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	b29b      	uxth	r3, r3
 8005550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d022      	beq.n	800559e <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005560:	b29b      	uxth	r3, r3
 8005562:	461a      	mov	r2, r3
 8005564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	00db      	lsls	r3, r3, #3
 800556a:	4413      	add	r3, r2
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	6812      	ldr	r2, [r2, #0]
 8005570:	4413      	add	r3, r2
 8005572:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005576:	881b      	ldrh	r3, [r3, #0]
 8005578:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800557c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8005580:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005584:	2b00      	cmp	r3, #0
 8005586:	d02c      	beq.n	80055e2 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6818      	ldr	r0, [r3, #0]
 800558c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800558e:	6959      	ldr	r1, [r3, #20]
 8005590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005592:	891a      	ldrh	r2, [r3, #8]
 8005594:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005598:	f006 fa85 	bl	800baa6 <USB_ReadPMA>
 800559c:	e021      	b.n	80055e2 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	461a      	mov	r2, r3
 80055aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	4413      	add	r3, r2
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6812      	ldr	r2, [r2, #0]
 80055b6:	4413      	add	r3, r2
 80055b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055c2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80055c6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d009      	beq.n	80055e2 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6818      	ldr	r0, [r3, #0]
 80055d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055d4:	6959      	ldr	r1, [r3, #20]
 80055d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055d8:	895a      	ldrh	r2, [r3, #10]
 80055da:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80055de:	f006 fa62 	bl	800baa6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80055e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055e4:	69da      	ldr	r2, [r3, #28]
 80055e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80055ea:	441a      	add	r2, r3
 80055ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80055f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055f2:	695a      	ldr	r2, [r3, #20]
 80055f4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80055f8:	441a      	add	r2, r3
 80055fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055fc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80055fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d005      	beq.n	8005612 <PCD_EP_ISR_Handler+0x4da>
 8005606:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800560a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	429a      	cmp	r2, r3
 8005610:	d206      	bcs.n	8005620 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	4619      	mov	r1, r3
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f008 f943 	bl	800d8a4 <HAL_PCD_DataOutStageCallback>
 800561e:	e005      	b.n	800562c <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005626:	4618      	mov	r0, r3
 8005628:	f004 fd8b 	bl	800a142 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800562c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 8121 	beq.w	800587c <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 800563a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800563e:	1c5a      	adds	r2, r3, #1
 8005640:	4613      	mov	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	00db      	lsls	r3, r3, #3
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	4413      	add	r3, r2
 800564c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	461a      	mov	r2, r3
 8005654:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	4413      	add	r3, r2
 800565c:	881b      	ldrh	r3, [r3, #0]
 800565e:	b29b      	uxth	r3, r3
 8005660:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005668:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	461a      	mov	r2, r3
 8005672:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	441a      	add	r2, r3
 800567a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800567e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005682:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005686:	b29b      	uxth	r3, r3
 8005688:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 800568a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800568c:	78db      	ldrb	r3, [r3, #3]
 800568e:	2b02      	cmp	r3, #2
 8005690:	f000 80a2 	beq.w	80057d8 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8005694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005696:	2200      	movs	r2, #0
 8005698:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800569a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800569c:	7b1b      	ldrb	r3, [r3, #12]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 8093 	beq.w	80057ca <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80056a4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80056a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d046      	beq.n	800573e <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80056b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056b2:	785b      	ldrb	r3, [r3, #1]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d126      	bne.n	8005706 <PCD_EP_ISR_Handler+0x5ce>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	627b      	str	r3, [r7, #36]	; 0x24
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	461a      	mov	r2, r3
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	4413      	add	r3, r2
 80056ce:	627b      	str	r3, [r7, #36]	; 0x24
 80056d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	00da      	lsls	r2, r3, #3
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	4413      	add	r3, r2
 80056da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80056de:	623b      	str	r3, [r7, #32]
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	881b      	ldrh	r3, [r3, #0]
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	801a      	strh	r2, [r3, #0]
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	881b      	ldrh	r3, [r3, #0]
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056fe:	b29a      	uxth	r2, r3
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	801a      	strh	r2, [r3, #0]
 8005704:	e061      	b.n	80057ca <PCD_EP_ISR_Handler+0x692>
 8005706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005708:	785b      	ldrb	r3, [r3, #1]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d15d      	bne.n	80057ca <PCD_EP_ISR_Handler+0x692>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800571c:	b29b      	uxth	r3, r3
 800571e:	461a      	mov	r2, r3
 8005720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005722:	4413      	add	r3, r2
 8005724:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	00da      	lsls	r2, r3, #3
 800572c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572e:	4413      	add	r3, r2
 8005730:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005734:	62bb      	str	r3, [r7, #40]	; 0x28
 8005736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005738:	2200      	movs	r2, #0
 800573a:	801a      	strh	r2, [r3, #0]
 800573c:	e045      	b.n	80057ca <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005746:	785b      	ldrb	r3, [r3, #1]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d126      	bne.n	800579a <PCD_EP_ISR_Handler+0x662>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	637b      	str	r3, [r7, #52]	; 0x34
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800575a:	b29b      	uxth	r3, r3
 800575c:	461a      	mov	r2, r3
 800575e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005760:	4413      	add	r3, r2
 8005762:	637b      	str	r3, [r7, #52]	; 0x34
 8005764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	00da      	lsls	r2, r3, #3
 800576a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576c:	4413      	add	r3, r2
 800576e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005772:	633b      	str	r3, [r7, #48]	; 0x30
 8005774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	b29b      	uxth	r3, r3
 800577a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800577e:	b29a      	uxth	r2, r3
 8005780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005782:	801a      	strh	r2, [r3, #0]
 8005784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005786:	881b      	ldrh	r3, [r3, #0]
 8005788:	b29b      	uxth	r3, r3
 800578a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800578e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005792:	b29a      	uxth	r2, r3
 8005794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005796:	801a      	strh	r2, [r3, #0]
 8005798:	e017      	b.n	80057ca <PCD_EP_ISR_Handler+0x692>
 800579a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800579c:	785b      	ldrb	r3, [r3, #1]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d113      	bne.n	80057ca <PCD_EP_ISR_Handler+0x692>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	461a      	mov	r2, r3
 80057ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057b0:	4413      	add	r3, r2
 80057b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	00da      	lsls	r2, r3, #3
 80057ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057bc:	4413      	add	r3, r2
 80057be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80057c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c6:	2200      	movs	r2, #0
 80057c8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80057ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	4619      	mov	r1, r3
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f008 f882 	bl	800d8da <HAL_PCD_DataInStageCallback>
 80057d6:	e051      	b.n	800587c <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80057d8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80057dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d144      	bne.n	800586e <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	461a      	mov	r2, r3
 80057f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	4413      	add	r3, r2
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	6812      	ldr	r2, [r2, #0]
 80057fc:	4413      	add	r3, r2
 80057fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005802:	881b      	ldrh	r3, [r3, #0]
 8005804:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005808:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800580c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800580e:	699a      	ldr	r2, [r3, #24]
 8005810:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005814:	429a      	cmp	r2, r3
 8005816:	d907      	bls.n	8005828 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8005818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800581a:	699a      	ldr	r2, [r3, #24]
 800581c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005820:	1ad2      	subs	r2, r2, r3
 8005822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005824:	619a      	str	r2, [r3, #24]
 8005826:	e002      	b.n	800582e <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8005828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800582a:	2200      	movs	r2, #0
 800582c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800582e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d106      	bne.n	8005844 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	4619      	mov	r1, r3
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f008 f84c 	bl	800d8da <HAL_PCD_DataInStageCallback>
 8005842:	e01b      	b.n	800587c <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005846:	695a      	ldr	r2, [r3, #20]
 8005848:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800584c:	441a      	add	r2, r3
 800584e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005850:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005854:	69da      	ldr	r2, [r3, #28]
 8005856:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800585a:	441a      	add	r2, r3
 800585c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800585e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005866:	4618      	mov	r0, r3
 8005868:	f004 fc6b 	bl	800a142 <USB_EPStartXfer>
 800586c:	e006      	b.n	800587c <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800586e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005872:	461a      	mov	r2, r3
 8005874:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f917 	bl	8005aaa <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005884:	b29b      	uxth	r3, r3
 8005886:	b21b      	sxth	r3, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	f6ff ac5a 	blt.w	8005142 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3758      	adds	r7, #88	; 0x58
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b088      	sub	sp, #32
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	4613      	mov	r3, r2
 80058a4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80058a6:	88fb      	ldrh	r3, [r7, #6]
 80058a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d07c      	beq.n	80059aa <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	461a      	mov	r2, r3
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	4413      	add	r3, r2
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	6812      	ldr	r2, [r2, #0]
 80058c8:	4413      	add	r3, r2
 80058ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80058ce:	881b      	ldrh	r3, [r3, #0]
 80058d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058d4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	699a      	ldr	r2, [r3, #24]
 80058da:	8b7b      	ldrh	r3, [r7, #26]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d306      	bcc.n	80058ee <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	699a      	ldr	r2, [r3, #24]
 80058e4:	8b7b      	ldrh	r3, [r7, #26]
 80058e6:	1ad2      	subs	r2, r2, r3
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	619a      	str	r2, [r3, #24]
 80058ec:	e002      	b.n	80058f4 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	2200      	movs	r2, #0
 80058f2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d123      	bne.n	8005944 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	461a      	mov	r2, r3
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	881b      	ldrh	r3, [r3, #0]
 800590c:	b29b      	uxth	r3, r3
 800590e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005916:	833b      	strh	r3, [r7, #24]
 8005918:	8b3b      	ldrh	r3, [r7, #24]
 800591a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800591e:	833b      	strh	r3, [r7, #24]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	461a      	mov	r2, r3
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	441a      	add	r2, r3
 800592e:	8b3b      	ldrh	r3, [r7, #24]
 8005930:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005934:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005938:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800593c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005940:	b29b      	uxth	r3, r3
 8005942:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005944:	88fb      	ldrh	r3, [r7, #6]
 8005946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594a:	2b00      	cmp	r3, #0
 800594c:	d01f      	beq.n	800598e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	461a      	mov	r2, r3
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4413      	add	r3, r2
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	b29b      	uxth	r3, r3
 8005960:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005968:	82fb      	strh	r3, [r7, #22]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	461a      	mov	r2, r3
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	441a      	add	r2, r3
 8005978:	8afb      	ldrh	r3, [r7, #22]
 800597a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800597e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005986:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800598a:	b29b      	uxth	r3, r3
 800598c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800598e:	8b7b      	ldrh	r3, [r7, #26]
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 8085 	beq.w	8005aa0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6818      	ldr	r0, [r3, #0]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	6959      	ldr	r1, [r3, #20]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	891a      	ldrh	r2, [r3, #8]
 80059a2:	8b7b      	ldrh	r3, [r7, #26]
 80059a4:	f006 f87f 	bl	800baa6 <USB_ReadPMA>
 80059a8:	e07a      	b.n	8005aa0 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	461a      	mov	r2, r3
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	4413      	add	r3, r2
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	6812      	ldr	r2, [r2, #0]
 80059c2:	4413      	add	r3, r2
 80059c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059ce:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	699a      	ldr	r2, [r3, #24]
 80059d4:	8b7b      	ldrh	r3, [r7, #26]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d306      	bcc.n	80059e8 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	699a      	ldr	r2, [r3, #24]
 80059de:	8b7b      	ldrh	r3, [r7, #26]
 80059e0:	1ad2      	subs	r2, r2, r3
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	619a      	str	r2, [r3, #24]
 80059e6:	e002      	b.n	80059ee <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	2200      	movs	r2, #0
 80059ec:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d123      	bne.n	8005a3e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	461a      	mov	r2, r3
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4413      	add	r3, r2
 8005a04:	881b      	ldrh	r3, [r3, #0]
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a10:	83fb      	strh	r3, [r7, #30]
 8005a12:	8bfb      	ldrh	r3, [r7, #30]
 8005a14:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a18:	83fb      	strh	r3, [r7, #30]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	441a      	add	r2, r3
 8005a28:	8bfb      	ldrh	r3, [r7, #30]
 8005a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005a3e:	88fb      	ldrh	r3, [r7, #6]
 8005a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d11f      	bne.n	8005a88 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	881b      	ldrh	r3, [r3, #0]
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a62:	83bb      	strh	r3, [r7, #28]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	461a      	mov	r2, r3
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	441a      	add	r2, r3
 8005a72:	8bbb      	ldrh	r3, [r7, #28]
 8005a74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005a88:	8b7b      	ldrh	r3, [r7, #26]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d008      	beq.n	8005aa0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6818      	ldr	r0, [r3, #0]
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	6959      	ldr	r1, [r3, #20]
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	895a      	ldrh	r2, [r3, #10]
 8005a9a:	8b7b      	ldrh	r3, [r7, #26]
 8005a9c:	f006 f803 	bl	800baa6 <USB_ReadPMA>
    }
  }

  return count;
 8005aa0:	8b7b      	ldrh	r3, [r7, #26]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3720      	adds	r7, #32
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b0a2      	sub	sp, #136	; 0x88
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	60f8      	str	r0, [r7, #12]
 8005ab2:	60b9      	str	r1, [r7, #8]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005ab8:	88fb      	ldrh	r3, [r7, #6]
 8005aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 81c5 	beq.w	8005e4e <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	461a      	mov	r2, r3
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	4413      	add	r3, r2
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	6812      	ldr	r2, [r2, #0]
 8005adc:	4413      	add	r3, r2
 8005ade:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ae2:	881b      	ldrh	r3, [r3, #0]
 8005ae4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ae8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	699a      	ldr	r2, [r3, #24]
 8005af0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d907      	bls.n	8005b08 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	699a      	ldr	r2, [r3, #24]
 8005afc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b00:	1ad2      	subs	r2, r2, r3
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	619a      	str	r2, [r3, #24]
 8005b06:	e002      	b.n	8005b0e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f040 80b9 	bne.w	8005c8a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	785b      	ldrb	r3, [r3, #1]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d126      	bne.n	8005b6e <HAL_PCD_EP_DB_Transmit+0xc4>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	461a      	mov	r2, r3
 8005b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b34:	4413      	add	r3, r2
 8005b36:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	00da      	lsls	r2, r3, #3
 8005b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b40:	4413      	add	r3, r2
 8005b42:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b46:	627b      	str	r3, [r7, #36]	; 0x24
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	881b      	ldrh	r3, [r3, #0]
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	801a      	strh	r2, [r3, #0]
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	881b      	ldrh	r3, [r3, #0]
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6a:	801a      	strh	r2, [r3, #0]
 8005b6c:	e01a      	b.n	8005ba4 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	785b      	ldrb	r3, [r3, #1]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d116      	bne.n	8005ba4 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	633b      	str	r3, [r7, #48]	; 0x30
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	461a      	mov	r2, r3
 8005b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8a:	4413      	add	r3, r2
 8005b8c:	633b      	str	r3, [r7, #48]	; 0x30
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	00da      	lsls	r2, r3, #3
 8005b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b96:	4413      	add	r3, r2
 8005b98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	623b      	str	r3, [r7, #32]
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	785b      	ldrb	r3, [r3, #1]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d126      	bne.n	8005c00 <HAL_PCD_EP_DB_Transmit+0x156>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	61bb      	str	r3, [r7, #24]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	61bb      	str	r3, [r7, #24]
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	00da      	lsls	r2, r3, #3
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005bd8:	617b      	str	r3, [r7, #20]
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	801a      	strh	r2, [r3, #0]
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	881b      	ldrh	r3, [r3, #0]
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	801a      	strh	r2, [r3, #0]
 8005bfe:	e017      	b.n	8005c30 <HAL_PCD_EP_DB_Transmit+0x186>
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	785b      	ldrb	r3, [r3, #1]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d113      	bne.n	8005c30 <HAL_PCD_EP_DB_Transmit+0x186>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	461a      	mov	r2, r3
 8005c14:	6a3b      	ldr	r3, [r7, #32]
 8005c16:	4413      	add	r3, r2
 8005c18:	623b      	str	r3, [r7, #32]
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	00da      	lsls	r2, r3, #3
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	4413      	add	r3, r2
 8005c24:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c28:	61fb      	str	r3, [r7, #28]
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	4619      	mov	r1, r3
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f007 fe4f 	bl	800d8da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005c3c:	88fb      	ldrh	r3, [r7, #6]
 8005c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 82d2 	beq.w	80061ec <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c62:	827b      	strh	r3, [r7, #18]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	461a      	mov	r2, r3
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	441a      	add	r2, r3
 8005c72:	8a7b      	ldrh	r3, [r7, #18]
 8005c74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	8013      	strh	r3, [r2, #0]
 8005c88:	e2b0      	b.n	80061ec <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005c8a:	88fb      	ldrh	r3, [r7, #6]
 8005c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d021      	beq.n	8005cd8 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	461a      	mov	r2, r3
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	881b      	ldrh	r3, [r3, #0]
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	441a      	add	r2, r3
 8005cc0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005cc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ccc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	f040 8284 	bne.w	80061ec <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	695a      	ldr	r2, [r3, #20]
 8005ce8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005cec:	441a      	add	r2, r3
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	69da      	ldr	r2, [r3, #28]
 8005cf6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005cfa:	441a      	add	r2, r3
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	6a1a      	ldr	r2, [r3, #32]
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d309      	bcc.n	8005d20 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	6a1a      	ldr	r2, [r3, #32]
 8005d16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d18:	1ad2      	subs	r2, r2, r3
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	621a      	str	r2, [r3, #32]
 8005d1e:	e015      	b.n	8005d4c <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d107      	bne.n	8005d38 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8005d28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d2c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005d36:	e009      	b.n	8005d4c <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	785b      	ldrb	r3, [r3, #1]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d155      	bne.n	8005e00 <HAL_PCD_EP_DB_Transmit+0x356>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	461a      	mov	r2, r3
 8005d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d68:	4413      	add	r3, r2
 8005d6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	00da      	lsls	r2, r3, #3
 8005d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d74:	4413      	add	r3, r2
 8005d76:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d7e:	2b3e      	cmp	r3, #62	; 0x3e
 8005d80:	d916      	bls.n	8005db0 <HAL_PCD_EP_DB_Transmit+0x306>
 8005d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d84:	095b      	lsrs	r3, r3, #5
 8005d86:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d8a:	f003 031f 	and.w	r3, r3, #31
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d102      	bne.n	8005d98 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8005d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d94:	3b01      	subs	r3, #1
 8005d96:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	029b      	lsls	r3, r3, #10
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005da4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dac:	801a      	strh	r2, [r3, #0]
 8005dae:	e043      	b.n	8005e38 <HAL_PCD_EP_DB_Transmit+0x38e>
 8005db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d112      	bne.n	8005ddc <HAL_PCD_EP_DB_Transmit+0x332>
 8005db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc4:	801a      	strh	r2, [r3, #0]
 8005dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd8:	801a      	strh	r2, [r3, #0]
 8005dda:	e02d      	b.n	8005e38 <HAL_PCD_EP_DB_Transmit+0x38e>
 8005ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dde:	085b      	lsrs	r3, r3, #1
 8005de0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d002      	beq.n	8005df2 <HAL_PCD_EP_DB_Transmit+0x348>
 8005dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dee:	3301      	adds	r3, #1
 8005df0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	029b      	lsls	r3, r3, #10
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dfc:	801a      	strh	r2, [r3, #0]
 8005dfe:	e01b      	b.n	8005e38 <HAL_PCD_EP_DB_Transmit+0x38e>
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	785b      	ldrb	r3, [r3, #1]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d117      	bne.n	8005e38 <HAL_PCD_EP_DB_Transmit+0x38e>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	643b      	str	r3, [r7, #64]	; 0x40
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	461a      	mov	r2, r3
 8005e1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e1c:	4413      	add	r3, r2
 8005e1e:	643b      	str	r3, [r7, #64]	; 0x40
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	00da      	lsls	r2, r3, #3
 8005e26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e28:	4413      	add	r3, r2
 8005e2a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e36:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6818      	ldr	r0, [r3, #0]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	6959      	ldr	r1, [r3, #20]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	891a      	ldrh	r2, [r3, #8]
 8005e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	f005 fdeb 	bl	800ba22 <USB_WritePMA>
 8005e4c:	e1ce      	b.n	80061ec <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	461a      	mov	r2, r3
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	00db      	lsls	r3, r3, #3
 8005e60:	4413      	add	r3, r2
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	6812      	ldr	r2, [r2, #0]
 8005e66:	4413      	add	r3, r2
 8005e68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e72:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	699a      	ldr	r2, [r3, #24]
 8005e7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d307      	bcc.n	8005e92 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	699a      	ldr	r2, [r3, #24]
 8005e86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005e8a:	1ad2      	subs	r2, r2, r3
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	619a      	str	r2, [r3, #24]
 8005e90:	e002      	b.n	8005e98 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	2200      	movs	r2, #0
 8005e96:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f040 80c4 	bne.w	800602a <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	785b      	ldrb	r3, [r3, #1]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d126      	bne.n	8005ef8 <HAL_PCD_EP_DB_Transmit+0x44e>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	66bb      	str	r3, [r7, #104]	; 0x68
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	461a      	mov	r2, r3
 8005ebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ebe:	4413      	add	r3, r2
 8005ec0:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	00da      	lsls	r2, r3, #3
 8005ec8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005eca:	4413      	add	r3, r2
 8005ecc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ed0:	667b      	str	r3, [r7, #100]	; 0x64
 8005ed2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ed4:	881b      	ldrh	r3, [r3, #0]
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ee0:	801a      	strh	r2, [r3, #0]
 8005ee2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ee4:	881b      	ldrh	r3, [r3, #0]
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ef4:	801a      	strh	r2, [r3, #0]
 8005ef6:	e01a      	b.n	8005f2e <HAL_PCD_EP_DB_Transmit+0x484>
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	785b      	ldrb	r3, [r3, #1]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d116      	bne.n	8005f2e <HAL_PCD_EP_DB_Transmit+0x484>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	673b      	str	r3, [r7, #112]	; 0x70
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	461a      	mov	r2, r3
 8005f12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f14:	4413      	add	r3, r2
 8005f16:	673b      	str	r3, [r7, #112]	; 0x70
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	00da      	lsls	r2, r3, #3
 8005f1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f20:	4413      	add	r3, r2
 8005f22:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	785b      	ldrb	r3, [r3, #1]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d12f      	bne.n	8005f9c <HAL_PCD_EP_DB_Transmit+0x4f2>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f54:	4413      	add	r3, r2
 8005f56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	00da      	lsls	r2, r3, #3
 8005f60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f64:	4413      	add	r3, r2
 8005f66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f72:	881b      	ldrh	r3, [r3, #0]
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f80:	801a      	strh	r2, [r3, #0]
 8005f82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f86:	881b      	ldrh	r3, [r3, #0]
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f98:	801a      	strh	r2, [r3, #0]
 8005f9a:	e017      	b.n	8005fcc <HAL_PCD_EP_DB_Transmit+0x522>
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	785b      	ldrb	r3, [r3, #1]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d113      	bne.n	8005fcc <HAL_PCD_EP_DB_Transmit+0x522>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	461a      	mov	r2, r3
 8005fb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fb2:	4413      	add	r3, r2
 8005fb4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	00da      	lsls	r2, r3, #3
 8005fbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005fc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fc8:	2200      	movs	r2, #0
 8005fca:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f007 fc81 	bl	800d8da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005fd8:	88fb      	ldrh	r3, [r7, #6]
 8005fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f040 8104 	bne.w	80061ec <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	461a      	mov	r2, r3
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4413      	add	r3, r2
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ffe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	441a      	add	r2, r3
 8006010:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800601c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006024:	b29b      	uxth	r3, r3
 8006026:	8013      	strh	r3, [r2, #0]
 8006028:	e0e0      	b.n	80061ec <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800602a:	88fb      	ldrh	r3, [r7, #6]
 800602c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d121      	bne.n	8006078 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	461a      	mov	r2, r3
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	881b      	ldrh	r3, [r3, #0]
 8006044:	b29b      	uxth	r3, r3
 8006046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800604a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	461a      	mov	r2, r3
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	441a      	add	r2, r3
 8006060:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006064:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006068:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800606c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006074:	b29b      	uxth	r3, r3
 8006076:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800607e:	2b01      	cmp	r3, #1
 8006080:	f040 80b4 	bne.w	80061ec <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	695a      	ldr	r2, [r3, #20]
 8006088:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800608c:	441a      	add	r2, r3
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	69da      	ldr	r2, [r3, #28]
 8006096:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800609a:	441a      	add	r2, r3
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	6a1a      	ldr	r2, [r3, #32]
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d309      	bcc.n	80060c0 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	6a1a      	ldr	r2, [r3, #32]
 80060b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060b8:	1ad2      	subs	r2, r2, r3
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	621a      	str	r2, [r3, #32]
 80060be:	e015      	b.n	80060ec <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d107      	bne.n	80060d8 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80060c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80060cc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80060d6:	e009      	b.n	80060ec <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	2200      	movs	r2, #0
 80060e2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	663b      	str	r3, [r7, #96]	; 0x60
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	785b      	ldrb	r3, [r3, #1]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d155      	bne.n	80061a6 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006108:	b29b      	uxth	r3, r3
 800610a:	461a      	mov	r2, r3
 800610c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800610e:	4413      	add	r3, r2
 8006110:	65bb      	str	r3, [r7, #88]	; 0x58
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	00da      	lsls	r2, r3, #3
 8006118:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800611a:	4413      	add	r3, r2
 800611c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006120:	657b      	str	r3, [r7, #84]	; 0x54
 8006122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006124:	2b3e      	cmp	r3, #62	; 0x3e
 8006126:	d916      	bls.n	8006156 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8006128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800612a:	095b      	lsrs	r3, r3, #5
 800612c:	677b      	str	r3, [r7, #116]	; 0x74
 800612e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006130:	f003 031f 	and.w	r3, r3, #31
 8006134:	2b00      	cmp	r3, #0
 8006136:	d102      	bne.n	800613e <HAL_PCD_EP_DB_Transmit+0x694>
 8006138:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800613a:	3b01      	subs	r3, #1
 800613c:	677b      	str	r3, [r7, #116]	; 0x74
 800613e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006140:	b29b      	uxth	r3, r3
 8006142:	029b      	lsls	r3, r3, #10
 8006144:	b29b      	uxth	r3, r3
 8006146:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800614a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800614e:	b29a      	uxth	r2, r3
 8006150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006152:	801a      	strh	r2, [r3, #0]
 8006154:	e040      	b.n	80061d8 <HAL_PCD_EP_DB_Transmit+0x72e>
 8006156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006158:	2b00      	cmp	r3, #0
 800615a:	d112      	bne.n	8006182 <HAL_PCD_EP_DB_Transmit+0x6d8>
 800615c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	b29b      	uxth	r3, r3
 8006162:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006166:	b29a      	uxth	r2, r3
 8006168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800616a:	801a      	strh	r2, [r3, #0]
 800616c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800616e:	881b      	ldrh	r3, [r3, #0]
 8006170:	b29b      	uxth	r3, r3
 8006172:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006176:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800617a:	b29a      	uxth	r2, r3
 800617c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800617e:	801a      	strh	r2, [r3, #0]
 8006180:	e02a      	b.n	80061d8 <HAL_PCD_EP_DB_Transmit+0x72e>
 8006182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006184:	085b      	lsrs	r3, r3, #1
 8006186:	677b      	str	r3, [r7, #116]	; 0x74
 8006188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	2b00      	cmp	r3, #0
 8006190:	d002      	beq.n	8006198 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8006192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006194:	3301      	adds	r3, #1
 8006196:	677b      	str	r3, [r7, #116]	; 0x74
 8006198:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800619a:	b29b      	uxth	r3, r3
 800619c:	029b      	lsls	r3, r3, #10
 800619e:	b29a      	uxth	r2, r3
 80061a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061a2:	801a      	strh	r2, [r3, #0]
 80061a4:	e018      	b.n	80061d8 <HAL_PCD_EP_DB_Transmit+0x72e>
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	785b      	ldrb	r3, [r3, #1]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d114      	bne.n	80061d8 <HAL_PCD_EP_DB_Transmit+0x72e>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	461a      	mov	r2, r3
 80061ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061bc:	4413      	add	r3, r2
 80061be:	663b      	str	r3, [r7, #96]	; 0x60
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	00da      	lsls	r2, r3, #3
 80061c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061c8:	4413      	add	r3, r2
 80061ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80061ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061d6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6818      	ldr	r0, [r3, #0]
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	6959      	ldr	r1, [r3, #20]
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	895a      	ldrh	r2, [r3, #10]
 80061e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	f005 fc1b 	bl	800ba22 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	461a      	mov	r2, r3
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006202:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006206:	823b      	strh	r3, [r7, #16]
 8006208:	8a3b      	ldrh	r3, [r7, #16]
 800620a:	f083 0310 	eor.w	r3, r3, #16
 800620e:	823b      	strh	r3, [r7, #16]
 8006210:	8a3b      	ldrh	r3, [r7, #16]
 8006212:	f083 0320 	eor.w	r3, r3, #32
 8006216:	823b      	strh	r3, [r7, #16]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	461a      	mov	r2, r3
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	441a      	add	r2, r3
 8006226:	8a3b      	ldrh	r3, [r7, #16]
 8006228:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800622c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006230:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006238:	b29b      	uxth	r3, r3
 800623a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3788      	adds	r7, #136	; 0x88
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006246:	b480      	push	{r7}
 8006248:	b087      	sub	sp, #28
 800624a:	af00      	add	r7, sp, #0
 800624c:	60f8      	str	r0, [r7, #12]
 800624e:	607b      	str	r3, [r7, #4]
 8006250:	460b      	mov	r3, r1
 8006252:	817b      	strh	r3, [r7, #10]
 8006254:	4613      	mov	r3, r2
 8006256:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006258:	897b      	ldrh	r3, [r7, #10]
 800625a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800625e:	b29b      	uxth	r3, r3
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00b      	beq.n	800627c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006264:	897b      	ldrh	r3, [r7, #10]
 8006266:	f003 0307 	and.w	r3, r3, #7
 800626a:	1c5a      	adds	r2, r3, #1
 800626c:	4613      	mov	r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	4413      	add	r3, r2
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	4413      	add	r3, r2
 8006278:	617b      	str	r3, [r7, #20]
 800627a:	e009      	b.n	8006290 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800627c:	897a      	ldrh	r2, [r7, #10]
 800627e:	4613      	mov	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	00db      	lsls	r3, r3, #3
 8006286:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	4413      	add	r3, r2
 800628e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006290:	893b      	ldrh	r3, [r7, #8]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d107      	bne.n	80062a6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	2200      	movs	r2, #0
 800629a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	b29a      	uxth	r2, r3
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	80da      	strh	r2, [r3, #6]
 80062a4:	e00b      	b.n	80062be <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	2201      	movs	r2, #1
 80062aa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	0c1b      	lsrs	r3, r3, #16
 80062b8:	b29a      	uxth	r2, r3
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	371c      	adds	r7, #28
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	f043 0301 	orr.w	r3, r3, #1
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006304:	b29b      	uxth	r3, r3
 8006306:	f043 0302 	orr.w	r3, r3, #2
 800630a:	b29a      	uxth	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d141      	bne.n	80063b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800632e:	4b4b      	ldr	r3, [pc, #300]	; (800645c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800633a:	d131      	bne.n	80063a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800633c:	4b47      	ldr	r3, [pc, #284]	; (800645c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800633e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006342:	4a46      	ldr	r2, [pc, #280]	; (800645c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006348:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800634c:	4b43      	ldr	r3, [pc, #268]	; (800645c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006354:	4a41      	ldr	r2, [pc, #260]	; (800645c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006356:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800635a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800635c:	4b40      	ldr	r3, [pc, #256]	; (8006460 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2232      	movs	r2, #50	; 0x32
 8006362:	fb02 f303 	mul.w	r3, r2, r3
 8006366:	4a3f      	ldr	r2, [pc, #252]	; (8006464 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006368:	fba2 2303 	umull	r2, r3, r2, r3
 800636c:	0c9b      	lsrs	r3, r3, #18
 800636e:	3301      	adds	r3, #1
 8006370:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006372:	e002      	b.n	800637a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	3b01      	subs	r3, #1
 8006378:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800637a:	4b38      	ldr	r3, [pc, #224]	; (800645c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006386:	d102      	bne.n	800638e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1f2      	bne.n	8006374 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800638e:	4b33      	ldr	r3, [pc, #204]	; (800645c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800639a:	d158      	bne.n	800644e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e057      	b.n	8006450 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80063a0:	4b2e      	ldr	r3, [pc, #184]	; (800645c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063a6:	4a2d      	ldr	r2, [pc, #180]	; (800645c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80063b0:	e04d      	b.n	800644e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063b8:	d141      	bne.n	800643e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80063ba:	4b28      	ldr	r3, [pc, #160]	; (800645c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80063c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063c6:	d131      	bne.n	800642c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80063c8:	4b24      	ldr	r3, [pc, #144]	; (800645c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063ce:	4a23      	ldr	r2, [pc, #140]	; (800645c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80063d8:	4b20      	ldr	r3, [pc, #128]	; (800645c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80063e0:	4a1e      	ldr	r2, [pc, #120]	; (800645c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80063e8:	4b1d      	ldr	r3, [pc, #116]	; (8006460 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2232      	movs	r2, #50	; 0x32
 80063ee:	fb02 f303 	mul.w	r3, r2, r3
 80063f2:	4a1c      	ldr	r2, [pc, #112]	; (8006464 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80063f4:	fba2 2303 	umull	r2, r3, r2, r3
 80063f8:	0c9b      	lsrs	r3, r3, #18
 80063fa:	3301      	adds	r3, #1
 80063fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063fe:	e002      	b.n	8006406 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	3b01      	subs	r3, #1
 8006404:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006406:	4b15      	ldr	r3, [pc, #84]	; (800645c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800640e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006412:	d102      	bne.n	800641a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1f2      	bne.n	8006400 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800641a:	4b10      	ldr	r3, [pc, #64]	; (800645c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006426:	d112      	bne.n	800644e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e011      	b.n	8006450 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800642c:	4b0b      	ldr	r3, [pc, #44]	; (800645c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800642e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006432:	4a0a      	ldr	r2, [pc, #40]	; (800645c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006438:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800643c:	e007      	b.n	800644e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800643e:	4b07      	ldr	r3, [pc, #28]	; (800645c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006446:	4a05      	ldr	r2, [pc, #20]	; (800645c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006448:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800644c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	40007000 	.word	0x40007000
 8006460:	200026d4 	.word	0x200026d4
 8006464:	431bde83 	.word	0x431bde83

08006468 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b088      	sub	sp, #32
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e306      	b.n	8006a88 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b00      	cmp	r3, #0
 8006484:	d075      	beq.n	8006572 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006486:	4b97      	ldr	r3, [pc, #604]	; (80066e4 <HAL_RCC_OscConfig+0x27c>)
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f003 030c 	and.w	r3, r3, #12
 800648e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006490:	4b94      	ldr	r3, [pc, #592]	; (80066e4 <HAL_RCC_OscConfig+0x27c>)
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	f003 0303 	and.w	r3, r3, #3
 8006498:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	2b0c      	cmp	r3, #12
 800649e:	d102      	bne.n	80064a6 <HAL_RCC_OscConfig+0x3e>
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	d002      	beq.n	80064ac <HAL_RCC_OscConfig+0x44>
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	2b08      	cmp	r3, #8
 80064aa:	d10b      	bne.n	80064c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064ac:	4b8d      	ldr	r3, [pc, #564]	; (80066e4 <HAL_RCC_OscConfig+0x27c>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d05b      	beq.n	8006570 <HAL_RCC_OscConfig+0x108>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d157      	bne.n	8006570 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e2e1      	b.n	8006a88 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064cc:	d106      	bne.n	80064dc <HAL_RCC_OscConfig+0x74>
 80064ce:	4b85      	ldr	r3, [pc, #532]	; (80066e4 <HAL_RCC_OscConfig+0x27c>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a84      	ldr	r2, [pc, #528]	; (80066e4 <HAL_RCC_OscConfig+0x27c>)
 80064d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064d8:	6013      	str	r3, [r2, #0]
 80064da:	e01d      	b.n	8006518 <HAL_RCC_OscConfig+0xb0>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064e4:	d10c      	bne.n	8006500 <HAL_RCC_OscConfig+0x98>
 80064e6:	4b7f      	ldr	r3, [pc, #508]	; (80066e4 <HAL_RCC_OscConfig+0x27c>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a7e      	ldr	r2, [pc, #504]	; (80066e4 <HAL_RCC_OscConfig+0x27c>)
 80064ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064f0:	6013      	str	r3, [r2, #0]
 80064f2:	4b7c      	ldr	r3, [pc, #496]	; (80066e4 <HAL_RCC_OscConfig+0x27c>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a7b      	ldr	r2, [pc, #492]	; (80066e4 <HAL_RCC_OscConfig+0x27c>)
 80064f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064fc:	6013      	str	r3, [r2, #0]
 80064fe:	e00b      	b.n	8006518 <HAL_RCC_OscConfig+0xb0>
 8006500:	4b78      	ldr	r3, [pc, #480]	; (80066e4 <HAL_RCC_OscConfig+0x27c>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a77      	ldr	r2, [pc, #476]	; (80066e4 <HAL_RCC_OscConfig+0x27c>)
 8006506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800650a:	6013      	str	r3, [r2, #0]
 800650c:	4b75      	ldr	r3, [pc, #468]	; (80066e4 <HAL_RCC_OscConfig+0x27c>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a74      	ldr	r2, [pc, #464]	; (80066e4 <HAL_RCC_OscConfig+0x27c>)
 8006512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d013      	beq.n	8006548 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006520:	f7fb fc54 	bl	8001dcc <HAL_GetTick>
 8006524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006526:	e008      	b.n	800653a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006528:	f7fb fc50 	bl	8001dcc <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b64      	cmp	r3, #100	; 0x64
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e2a6      	b.n	8006a88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800653a:	4b6a      	ldr	r3, [pc, #424]	; (80066e4 <HAL_RCC_OscConfig+0x27c>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d0f0      	beq.n	8006528 <HAL_RCC_OscConfig+0xc0>
 8006546:	e014      	b.n	8006572 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006548:	f7fb fc40 	bl	8001dcc <HAL_GetTick>
 800654c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800654e:	e008      	b.n	8006562 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006550:	f7fb fc3c 	bl	8001dcc <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	2b64      	cmp	r3, #100	; 0x64
 800655c:	d901      	bls.n	8006562 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e292      	b.n	8006a88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006562:	4b60      	ldr	r3, [pc, #384]	; (80066e4 <HAL_RCC_OscConfig+0x27c>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1f0      	bne.n	8006550 <HAL_RCC_OscConfig+0xe8>
 800656e:	e000      	b.n	8006572 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d075      	beq.n	800666a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800657e:	4b59      	ldr	r3, [pc, #356]	; (80066e4 <HAL_RCC_OscConfig+0x27c>)
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f003 030c 	and.w	r3, r3, #12
 8006586:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006588:	4b56      	ldr	r3, [pc, #344]	; (80066e4 <HAL_RCC_OscConfig+0x27c>)
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	f003 0303 	and.w	r3, r3, #3
 8006590:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	2b0c      	cmp	r3, #12
 8006596:	d102      	bne.n	800659e <HAL_RCC_OscConfig+0x136>
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	2b02      	cmp	r3, #2
 800659c:	d002      	beq.n	80065a4 <HAL_RCC_OscConfig+0x13c>
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	2b04      	cmp	r3, #4
 80065a2:	d11f      	bne.n	80065e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065a4:	4b4f      	ldr	r3, [pc, #316]	; (80066e4 <HAL_RCC_OscConfig+0x27c>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d005      	beq.n	80065bc <HAL_RCC_OscConfig+0x154>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e265      	b.n	8006a88 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065bc:	4b49      	ldr	r3, [pc, #292]	; (80066e4 <HAL_RCC_OscConfig+0x27c>)
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	061b      	lsls	r3, r3, #24
 80065ca:	4946      	ldr	r1, [pc, #280]	; (80066e4 <HAL_RCC_OscConfig+0x27c>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80065d0:	4b45      	ldr	r3, [pc, #276]	; (80066e8 <HAL_RCC_OscConfig+0x280>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7fb fbad 	bl	8001d34 <HAL_InitTick>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d043      	beq.n	8006668 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e251      	b.n	8006a88 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d023      	beq.n	8006634 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065ec:	4b3d      	ldr	r3, [pc, #244]	; (80066e4 <HAL_RCC_OscConfig+0x27c>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a3c      	ldr	r2, [pc, #240]	; (80066e4 <HAL_RCC_OscConfig+0x27c>)
 80065f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f8:	f7fb fbe8 	bl	8001dcc <HAL_GetTick>
 80065fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065fe:	e008      	b.n	8006612 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006600:	f7fb fbe4 	bl	8001dcc <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b02      	cmp	r3, #2
 800660c:	d901      	bls.n	8006612 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e23a      	b.n	8006a88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006612:	4b34      	ldr	r3, [pc, #208]	; (80066e4 <HAL_RCC_OscConfig+0x27c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800661a:	2b00      	cmp	r3, #0
 800661c:	d0f0      	beq.n	8006600 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800661e:	4b31      	ldr	r3, [pc, #196]	; (80066e4 <HAL_RCC_OscConfig+0x27c>)
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	061b      	lsls	r3, r3, #24
 800662c:	492d      	ldr	r1, [pc, #180]	; (80066e4 <HAL_RCC_OscConfig+0x27c>)
 800662e:	4313      	orrs	r3, r2
 8006630:	604b      	str	r3, [r1, #4]
 8006632:	e01a      	b.n	800666a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006634:	4b2b      	ldr	r3, [pc, #172]	; (80066e4 <HAL_RCC_OscConfig+0x27c>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a2a      	ldr	r2, [pc, #168]	; (80066e4 <HAL_RCC_OscConfig+0x27c>)
 800663a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800663e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006640:	f7fb fbc4 	bl	8001dcc <HAL_GetTick>
 8006644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006646:	e008      	b.n	800665a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006648:	f7fb fbc0 	bl	8001dcc <HAL_GetTick>
 800664c:	4602      	mov	r2, r0
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	2b02      	cmp	r3, #2
 8006654:	d901      	bls.n	800665a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e216      	b.n	8006a88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800665a:	4b22      	ldr	r3, [pc, #136]	; (80066e4 <HAL_RCC_OscConfig+0x27c>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1f0      	bne.n	8006648 <HAL_RCC_OscConfig+0x1e0>
 8006666:	e000      	b.n	800666a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006668:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 0308 	and.w	r3, r3, #8
 8006672:	2b00      	cmp	r3, #0
 8006674:	d041      	beq.n	80066fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d01c      	beq.n	80066b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800667e:	4b19      	ldr	r3, [pc, #100]	; (80066e4 <HAL_RCC_OscConfig+0x27c>)
 8006680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006684:	4a17      	ldr	r2, [pc, #92]	; (80066e4 <HAL_RCC_OscConfig+0x27c>)
 8006686:	f043 0301 	orr.w	r3, r3, #1
 800668a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800668e:	f7fb fb9d 	bl	8001dcc <HAL_GetTick>
 8006692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006694:	e008      	b.n	80066a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006696:	f7fb fb99 	bl	8001dcc <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d901      	bls.n	80066a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e1ef      	b.n	8006a88 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066a8:	4b0e      	ldr	r3, [pc, #56]	; (80066e4 <HAL_RCC_OscConfig+0x27c>)
 80066aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066ae:	f003 0302 	and.w	r3, r3, #2
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d0ef      	beq.n	8006696 <HAL_RCC_OscConfig+0x22e>
 80066b6:	e020      	b.n	80066fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066b8:	4b0a      	ldr	r3, [pc, #40]	; (80066e4 <HAL_RCC_OscConfig+0x27c>)
 80066ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066be:	4a09      	ldr	r2, [pc, #36]	; (80066e4 <HAL_RCC_OscConfig+0x27c>)
 80066c0:	f023 0301 	bic.w	r3, r3, #1
 80066c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066c8:	f7fb fb80 	bl	8001dcc <HAL_GetTick>
 80066cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80066ce:	e00d      	b.n	80066ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066d0:	f7fb fb7c 	bl	8001dcc <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d906      	bls.n	80066ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e1d2      	b.n	8006a88 <HAL_RCC_OscConfig+0x620>
 80066e2:	bf00      	nop
 80066e4:	40021000 	.word	0x40021000
 80066e8:	200026d8 	.word	0x200026d8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80066ec:	4b8c      	ldr	r3, [pc, #560]	; (8006920 <HAL_RCC_OscConfig+0x4b8>)
 80066ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1ea      	bne.n	80066d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0304 	and.w	r3, r3, #4
 8006702:	2b00      	cmp	r3, #0
 8006704:	f000 80a6 	beq.w	8006854 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006708:	2300      	movs	r3, #0
 800670a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800670c:	4b84      	ldr	r3, [pc, #528]	; (8006920 <HAL_RCC_OscConfig+0x4b8>)
 800670e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d101      	bne.n	800671c <HAL_RCC_OscConfig+0x2b4>
 8006718:	2301      	movs	r3, #1
 800671a:	e000      	b.n	800671e <HAL_RCC_OscConfig+0x2b6>
 800671c:	2300      	movs	r3, #0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00d      	beq.n	800673e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006722:	4b7f      	ldr	r3, [pc, #508]	; (8006920 <HAL_RCC_OscConfig+0x4b8>)
 8006724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006726:	4a7e      	ldr	r2, [pc, #504]	; (8006920 <HAL_RCC_OscConfig+0x4b8>)
 8006728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800672c:	6593      	str	r3, [r2, #88]	; 0x58
 800672e:	4b7c      	ldr	r3, [pc, #496]	; (8006920 <HAL_RCC_OscConfig+0x4b8>)
 8006730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006736:	60fb      	str	r3, [r7, #12]
 8006738:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800673a:	2301      	movs	r3, #1
 800673c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800673e:	4b79      	ldr	r3, [pc, #484]	; (8006924 <HAL_RCC_OscConfig+0x4bc>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006746:	2b00      	cmp	r3, #0
 8006748:	d118      	bne.n	800677c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800674a:	4b76      	ldr	r3, [pc, #472]	; (8006924 <HAL_RCC_OscConfig+0x4bc>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a75      	ldr	r2, [pc, #468]	; (8006924 <HAL_RCC_OscConfig+0x4bc>)
 8006750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006756:	f7fb fb39 	bl	8001dcc <HAL_GetTick>
 800675a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800675c:	e008      	b.n	8006770 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800675e:	f7fb fb35 	bl	8001dcc <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	2b02      	cmp	r3, #2
 800676a:	d901      	bls.n	8006770 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e18b      	b.n	8006a88 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006770:	4b6c      	ldr	r3, [pc, #432]	; (8006924 <HAL_RCC_OscConfig+0x4bc>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006778:	2b00      	cmp	r3, #0
 800677a:	d0f0      	beq.n	800675e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	2b01      	cmp	r3, #1
 8006782:	d108      	bne.n	8006796 <HAL_RCC_OscConfig+0x32e>
 8006784:	4b66      	ldr	r3, [pc, #408]	; (8006920 <HAL_RCC_OscConfig+0x4b8>)
 8006786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800678a:	4a65      	ldr	r2, [pc, #404]	; (8006920 <HAL_RCC_OscConfig+0x4b8>)
 800678c:	f043 0301 	orr.w	r3, r3, #1
 8006790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006794:	e024      	b.n	80067e0 <HAL_RCC_OscConfig+0x378>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	2b05      	cmp	r3, #5
 800679c:	d110      	bne.n	80067c0 <HAL_RCC_OscConfig+0x358>
 800679e:	4b60      	ldr	r3, [pc, #384]	; (8006920 <HAL_RCC_OscConfig+0x4b8>)
 80067a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a4:	4a5e      	ldr	r2, [pc, #376]	; (8006920 <HAL_RCC_OscConfig+0x4b8>)
 80067a6:	f043 0304 	orr.w	r3, r3, #4
 80067aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80067ae:	4b5c      	ldr	r3, [pc, #368]	; (8006920 <HAL_RCC_OscConfig+0x4b8>)
 80067b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067b4:	4a5a      	ldr	r2, [pc, #360]	; (8006920 <HAL_RCC_OscConfig+0x4b8>)
 80067b6:	f043 0301 	orr.w	r3, r3, #1
 80067ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80067be:	e00f      	b.n	80067e0 <HAL_RCC_OscConfig+0x378>
 80067c0:	4b57      	ldr	r3, [pc, #348]	; (8006920 <HAL_RCC_OscConfig+0x4b8>)
 80067c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c6:	4a56      	ldr	r2, [pc, #344]	; (8006920 <HAL_RCC_OscConfig+0x4b8>)
 80067c8:	f023 0301 	bic.w	r3, r3, #1
 80067cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80067d0:	4b53      	ldr	r3, [pc, #332]	; (8006920 <HAL_RCC_OscConfig+0x4b8>)
 80067d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067d6:	4a52      	ldr	r2, [pc, #328]	; (8006920 <HAL_RCC_OscConfig+0x4b8>)
 80067d8:	f023 0304 	bic.w	r3, r3, #4
 80067dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d016      	beq.n	8006816 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067e8:	f7fb faf0 	bl	8001dcc <HAL_GetTick>
 80067ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067ee:	e00a      	b.n	8006806 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067f0:	f7fb faec 	bl	8001dcc <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80067fe:	4293      	cmp	r3, r2
 8006800:	d901      	bls.n	8006806 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e140      	b.n	8006a88 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006806:	4b46      	ldr	r3, [pc, #280]	; (8006920 <HAL_RCC_OscConfig+0x4b8>)
 8006808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800680c:	f003 0302 	and.w	r3, r3, #2
 8006810:	2b00      	cmp	r3, #0
 8006812:	d0ed      	beq.n	80067f0 <HAL_RCC_OscConfig+0x388>
 8006814:	e015      	b.n	8006842 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006816:	f7fb fad9 	bl	8001dcc <HAL_GetTick>
 800681a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800681c:	e00a      	b.n	8006834 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800681e:	f7fb fad5 	bl	8001dcc <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	f241 3288 	movw	r2, #5000	; 0x1388
 800682c:	4293      	cmp	r3, r2
 800682e:	d901      	bls.n	8006834 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e129      	b.n	8006a88 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006834:	4b3a      	ldr	r3, [pc, #232]	; (8006920 <HAL_RCC_OscConfig+0x4b8>)
 8006836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800683a:	f003 0302 	and.w	r3, r3, #2
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1ed      	bne.n	800681e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006842:	7ffb      	ldrb	r3, [r7, #31]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d105      	bne.n	8006854 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006848:	4b35      	ldr	r3, [pc, #212]	; (8006920 <HAL_RCC_OscConfig+0x4b8>)
 800684a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800684c:	4a34      	ldr	r2, [pc, #208]	; (8006920 <HAL_RCC_OscConfig+0x4b8>)
 800684e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006852:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0320 	and.w	r3, r3, #32
 800685c:	2b00      	cmp	r3, #0
 800685e:	d03c      	beq.n	80068da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d01c      	beq.n	80068a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006868:	4b2d      	ldr	r3, [pc, #180]	; (8006920 <HAL_RCC_OscConfig+0x4b8>)
 800686a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800686e:	4a2c      	ldr	r2, [pc, #176]	; (8006920 <HAL_RCC_OscConfig+0x4b8>)
 8006870:	f043 0301 	orr.w	r3, r3, #1
 8006874:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006878:	f7fb faa8 	bl	8001dcc <HAL_GetTick>
 800687c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800687e:	e008      	b.n	8006892 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006880:	f7fb faa4 	bl	8001dcc <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b02      	cmp	r3, #2
 800688c:	d901      	bls.n	8006892 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e0fa      	b.n	8006a88 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006892:	4b23      	ldr	r3, [pc, #140]	; (8006920 <HAL_RCC_OscConfig+0x4b8>)
 8006894:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006898:	f003 0302 	and.w	r3, r3, #2
 800689c:	2b00      	cmp	r3, #0
 800689e:	d0ef      	beq.n	8006880 <HAL_RCC_OscConfig+0x418>
 80068a0:	e01b      	b.n	80068da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80068a2:	4b1f      	ldr	r3, [pc, #124]	; (8006920 <HAL_RCC_OscConfig+0x4b8>)
 80068a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068a8:	4a1d      	ldr	r2, [pc, #116]	; (8006920 <HAL_RCC_OscConfig+0x4b8>)
 80068aa:	f023 0301 	bic.w	r3, r3, #1
 80068ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068b2:	f7fb fa8b 	bl	8001dcc <HAL_GetTick>
 80068b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80068b8:	e008      	b.n	80068cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068ba:	f7fb fa87 	bl	8001dcc <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d901      	bls.n	80068cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e0dd      	b.n	8006a88 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80068cc:	4b14      	ldr	r3, [pc, #80]	; (8006920 <HAL_RCC_OscConfig+0x4b8>)
 80068ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068d2:	f003 0302 	and.w	r3, r3, #2
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1ef      	bne.n	80068ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	69db      	ldr	r3, [r3, #28]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f000 80d1 	beq.w	8006a86 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068e4:	4b0e      	ldr	r3, [pc, #56]	; (8006920 <HAL_RCC_OscConfig+0x4b8>)
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f003 030c 	and.w	r3, r3, #12
 80068ec:	2b0c      	cmp	r3, #12
 80068ee:	f000 808b 	beq.w	8006a08 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d15e      	bne.n	80069b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068fa:	4b09      	ldr	r3, [pc, #36]	; (8006920 <HAL_RCC_OscConfig+0x4b8>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a08      	ldr	r2, [pc, #32]	; (8006920 <HAL_RCC_OscConfig+0x4b8>)
 8006900:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006904:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006906:	f7fb fa61 	bl	8001dcc <HAL_GetTick>
 800690a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800690c:	e00c      	b.n	8006928 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800690e:	f7fb fa5d 	bl	8001dcc <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	2b02      	cmp	r3, #2
 800691a:	d905      	bls.n	8006928 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e0b3      	b.n	8006a88 <HAL_RCC_OscConfig+0x620>
 8006920:	40021000 	.word	0x40021000
 8006924:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006928:	4b59      	ldr	r3, [pc, #356]	; (8006a90 <HAL_RCC_OscConfig+0x628>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1ec      	bne.n	800690e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006934:	4b56      	ldr	r3, [pc, #344]	; (8006a90 <HAL_RCC_OscConfig+0x628>)
 8006936:	68da      	ldr	r2, [r3, #12]
 8006938:	4b56      	ldr	r3, [pc, #344]	; (8006a94 <HAL_RCC_OscConfig+0x62c>)
 800693a:	4013      	ands	r3, r2
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	6a11      	ldr	r1, [r2, #32]
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006944:	3a01      	subs	r2, #1
 8006946:	0112      	lsls	r2, r2, #4
 8006948:	4311      	orrs	r1, r2
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800694e:	0212      	lsls	r2, r2, #8
 8006950:	4311      	orrs	r1, r2
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006956:	0852      	lsrs	r2, r2, #1
 8006958:	3a01      	subs	r2, #1
 800695a:	0552      	lsls	r2, r2, #21
 800695c:	4311      	orrs	r1, r2
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006962:	0852      	lsrs	r2, r2, #1
 8006964:	3a01      	subs	r2, #1
 8006966:	0652      	lsls	r2, r2, #25
 8006968:	4311      	orrs	r1, r2
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800696e:	06d2      	lsls	r2, r2, #27
 8006970:	430a      	orrs	r2, r1
 8006972:	4947      	ldr	r1, [pc, #284]	; (8006a90 <HAL_RCC_OscConfig+0x628>)
 8006974:	4313      	orrs	r3, r2
 8006976:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006978:	4b45      	ldr	r3, [pc, #276]	; (8006a90 <HAL_RCC_OscConfig+0x628>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a44      	ldr	r2, [pc, #272]	; (8006a90 <HAL_RCC_OscConfig+0x628>)
 800697e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006982:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006984:	4b42      	ldr	r3, [pc, #264]	; (8006a90 <HAL_RCC_OscConfig+0x628>)
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	4a41      	ldr	r2, [pc, #260]	; (8006a90 <HAL_RCC_OscConfig+0x628>)
 800698a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800698e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006990:	f7fb fa1c 	bl	8001dcc <HAL_GetTick>
 8006994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006996:	e008      	b.n	80069aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006998:	f7fb fa18 	bl	8001dcc <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d901      	bls.n	80069aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e06e      	b.n	8006a88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069aa:	4b39      	ldr	r3, [pc, #228]	; (8006a90 <HAL_RCC_OscConfig+0x628>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d0f0      	beq.n	8006998 <HAL_RCC_OscConfig+0x530>
 80069b6:	e066      	b.n	8006a86 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069b8:	4b35      	ldr	r3, [pc, #212]	; (8006a90 <HAL_RCC_OscConfig+0x628>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a34      	ldr	r2, [pc, #208]	; (8006a90 <HAL_RCC_OscConfig+0x628>)
 80069be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069c2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80069c4:	4b32      	ldr	r3, [pc, #200]	; (8006a90 <HAL_RCC_OscConfig+0x628>)
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	4a31      	ldr	r2, [pc, #196]	; (8006a90 <HAL_RCC_OscConfig+0x628>)
 80069ca:	f023 0303 	bic.w	r3, r3, #3
 80069ce:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80069d0:	4b2f      	ldr	r3, [pc, #188]	; (8006a90 <HAL_RCC_OscConfig+0x628>)
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	4a2e      	ldr	r2, [pc, #184]	; (8006a90 <HAL_RCC_OscConfig+0x628>)
 80069d6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80069da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e0:	f7fb f9f4 	bl	8001dcc <HAL_GetTick>
 80069e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069e6:	e008      	b.n	80069fa <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069e8:	f7fb f9f0 	bl	8001dcc <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d901      	bls.n	80069fa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e046      	b.n	8006a88 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069fa:	4b25      	ldr	r3, [pc, #148]	; (8006a90 <HAL_RCC_OscConfig+0x628>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1f0      	bne.n	80069e8 <HAL_RCC_OscConfig+0x580>
 8006a06:	e03e      	b.n	8006a86 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	69db      	ldr	r3, [r3, #28]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d101      	bne.n	8006a14 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e039      	b.n	8006a88 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006a14:	4b1e      	ldr	r3, [pc, #120]	; (8006a90 <HAL_RCC_OscConfig+0x628>)
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f003 0203 	and.w	r2, r3, #3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a1b      	ldr	r3, [r3, #32]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d12c      	bne.n	8006a82 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a32:	3b01      	subs	r3, #1
 8006a34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d123      	bne.n	8006a82 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a44:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d11b      	bne.n	8006a82 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a54:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d113      	bne.n	8006a82 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a64:	085b      	lsrs	r3, r3, #1
 8006a66:	3b01      	subs	r3, #1
 8006a68:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d109      	bne.n	8006a82 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a78:	085b      	lsrs	r3, r3, #1
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d001      	beq.n	8006a86 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e000      	b.n	8006a88 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3720      	adds	r7, #32
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	40021000 	.word	0x40021000
 8006a94:	019f800c 	.word	0x019f800c

08006a98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d101      	bne.n	8006ab0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e11e      	b.n	8006cee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ab0:	4b91      	ldr	r3, [pc, #580]	; (8006cf8 <HAL_RCC_ClockConfig+0x260>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 030f 	and.w	r3, r3, #15
 8006ab8:	683a      	ldr	r2, [r7, #0]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d910      	bls.n	8006ae0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006abe:	4b8e      	ldr	r3, [pc, #568]	; (8006cf8 <HAL_RCC_ClockConfig+0x260>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f023 020f 	bic.w	r2, r3, #15
 8006ac6:	498c      	ldr	r1, [pc, #560]	; (8006cf8 <HAL_RCC_ClockConfig+0x260>)
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ace:	4b8a      	ldr	r3, [pc, #552]	; (8006cf8 <HAL_RCC_ClockConfig+0x260>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 030f 	and.w	r3, r3, #15
 8006ad6:	683a      	ldr	r2, [r7, #0]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d001      	beq.n	8006ae0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e106      	b.n	8006cee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d073      	beq.n	8006bd4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	2b03      	cmp	r3, #3
 8006af2:	d129      	bne.n	8006b48 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006af4:	4b81      	ldr	r3, [pc, #516]	; (8006cfc <HAL_RCC_ClockConfig+0x264>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e0f4      	b.n	8006cee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006b04:	f000 f970 	bl	8006de8 <RCC_GetSysClockFreqFromPLLSource>
 8006b08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	4a7c      	ldr	r2, [pc, #496]	; (8006d00 <HAL_RCC_ClockConfig+0x268>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d93f      	bls.n	8006b92 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006b12:	4b7a      	ldr	r3, [pc, #488]	; (8006cfc <HAL_RCC_ClockConfig+0x264>)
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d009      	beq.n	8006b32 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d033      	beq.n	8006b92 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d12f      	bne.n	8006b92 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006b32:	4b72      	ldr	r3, [pc, #456]	; (8006cfc <HAL_RCC_ClockConfig+0x264>)
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b3a:	4a70      	ldr	r2, [pc, #448]	; (8006cfc <HAL_RCC_ClockConfig+0x264>)
 8006b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b40:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006b42:	2380      	movs	r3, #128	; 0x80
 8006b44:	617b      	str	r3, [r7, #20]
 8006b46:	e024      	b.n	8006b92 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d107      	bne.n	8006b60 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b50:	4b6a      	ldr	r3, [pc, #424]	; (8006cfc <HAL_RCC_ClockConfig+0x264>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d109      	bne.n	8006b70 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e0c6      	b.n	8006cee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b60:	4b66      	ldr	r3, [pc, #408]	; (8006cfc <HAL_RCC_ClockConfig+0x264>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d101      	bne.n	8006b70 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e0be      	b.n	8006cee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006b70:	f000 f8ce 	bl	8006d10 <HAL_RCC_GetSysClockFreq>
 8006b74:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	4a61      	ldr	r2, [pc, #388]	; (8006d00 <HAL_RCC_ClockConfig+0x268>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d909      	bls.n	8006b92 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006b7e:	4b5f      	ldr	r3, [pc, #380]	; (8006cfc <HAL_RCC_ClockConfig+0x264>)
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b86:	4a5d      	ldr	r2, [pc, #372]	; (8006cfc <HAL_RCC_ClockConfig+0x264>)
 8006b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b8c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006b8e:	2380      	movs	r3, #128	; 0x80
 8006b90:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b92:	4b5a      	ldr	r3, [pc, #360]	; (8006cfc <HAL_RCC_ClockConfig+0x264>)
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f023 0203 	bic.w	r2, r3, #3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	4957      	ldr	r1, [pc, #348]	; (8006cfc <HAL_RCC_ClockConfig+0x264>)
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ba4:	f7fb f912 	bl	8001dcc <HAL_GetTick>
 8006ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006baa:	e00a      	b.n	8006bc2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bac:	f7fb f90e 	bl	8001dcc <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d901      	bls.n	8006bc2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e095      	b.n	8006cee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bc2:	4b4e      	ldr	r3, [pc, #312]	; (8006cfc <HAL_RCC_ClockConfig+0x264>)
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f003 020c 	and.w	r2, r3, #12
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d1eb      	bne.n	8006bac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0302 	and.w	r3, r3, #2
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d023      	beq.n	8006c28 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0304 	and.w	r3, r3, #4
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d005      	beq.n	8006bf8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bec:	4b43      	ldr	r3, [pc, #268]	; (8006cfc <HAL_RCC_ClockConfig+0x264>)
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	4a42      	ldr	r2, [pc, #264]	; (8006cfc <HAL_RCC_ClockConfig+0x264>)
 8006bf2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006bf6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0308 	and.w	r3, r3, #8
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d007      	beq.n	8006c14 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006c04:	4b3d      	ldr	r3, [pc, #244]	; (8006cfc <HAL_RCC_ClockConfig+0x264>)
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006c0c:	4a3b      	ldr	r2, [pc, #236]	; (8006cfc <HAL_RCC_ClockConfig+0x264>)
 8006c0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006c12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c14:	4b39      	ldr	r3, [pc, #228]	; (8006cfc <HAL_RCC_ClockConfig+0x264>)
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	4936      	ldr	r1, [pc, #216]	; (8006cfc <HAL_RCC_ClockConfig+0x264>)
 8006c22:	4313      	orrs	r3, r2
 8006c24:	608b      	str	r3, [r1, #8]
 8006c26:	e008      	b.n	8006c3a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	2b80      	cmp	r3, #128	; 0x80
 8006c2c:	d105      	bne.n	8006c3a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006c2e:	4b33      	ldr	r3, [pc, #204]	; (8006cfc <HAL_RCC_ClockConfig+0x264>)
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	4a32      	ldr	r2, [pc, #200]	; (8006cfc <HAL_RCC_ClockConfig+0x264>)
 8006c34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c38:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c3a:	4b2f      	ldr	r3, [pc, #188]	; (8006cf8 <HAL_RCC_ClockConfig+0x260>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 030f 	and.w	r3, r3, #15
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d21d      	bcs.n	8006c84 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c48:	4b2b      	ldr	r3, [pc, #172]	; (8006cf8 <HAL_RCC_ClockConfig+0x260>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f023 020f 	bic.w	r2, r3, #15
 8006c50:	4929      	ldr	r1, [pc, #164]	; (8006cf8 <HAL_RCC_ClockConfig+0x260>)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006c58:	f7fb f8b8 	bl	8001dcc <HAL_GetTick>
 8006c5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c5e:	e00a      	b.n	8006c76 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c60:	f7fb f8b4 	bl	8001dcc <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d901      	bls.n	8006c76 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e03b      	b.n	8006cee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c76:	4b20      	ldr	r3, [pc, #128]	; (8006cf8 <HAL_RCC_ClockConfig+0x260>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 030f 	and.w	r3, r3, #15
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d1ed      	bne.n	8006c60 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0304 	and.w	r3, r3, #4
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d008      	beq.n	8006ca2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c90:	4b1a      	ldr	r3, [pc, #104]	; (8006cfc <HAL_RCC_ClockConfig+0x264>)
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	4917      	ldr	r1, [pc, #92]	; (8006cfc <HAL_RCC_ClockConfig+0x264>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0308 	and.w	r3, r3, #8
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d009      	beq.n	8006cc2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cae:	4b13      	ldr	r3, [pc, #76]	; (8006cfc <HAL_RCC_ClockConfig+0x264>)
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	490f      	ldr	r1, [pc, #60]	; (8006cfc <HAL_RCC_ClockConfig+0x264>)
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006cc2:	f000 f825 	bl	8006d10 <HAL_RCC_GetSysClockFreq>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	4b0c      	ldr	r3, [pc, #48]	; (8006cfc <HAL_RCC_ClockConfig+0x264>)
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	091b      	lsrs	r3, r3, #4
 8006cce:	f003 030f 	and.w	r3, r3, #15
 8006cd2:	490c      	ldr	r1, [pc, #48]	; (8006d04 <HAL_RCC_ClockConfig+0x26c>)
 8006cd4:	5ccb      	ldrb	r3, [r1, r3]
 8006cd6:	f003 031f 	and.w	r3, r3, #31
 8006cda:	fa22 f303 	lsr.w	r3, r2, r3
 8006cde:	4a0a      	ldr	r2, [pc, #40]	; (8006d08 <HAL_RCC_ClockConfig+0x270>)
 8006ce0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006ce2:	4b0a      	ldr	r3, [pc, #40]	; (8006d0c <HAL_RCC_ClockConfig+0x274>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7fb f824 	bl	8001d34 <HAL_InitTick>
 8006cec:	4603      	mov	r3, r0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3718      	adds	r7, #24
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	40022000 	.word	0x40022000
 8006cfc:	40021000 	.word	0x40021000
 8006d00:	04c4b400 	.word	0x04c4b400
 8006d04:	08010918 	.word	0x08010918
 8006d08:	200026d4 	.word	0x200026d4
 8006d0c:	200026d8 	.word	0x200026d8

08006d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b087      	sub	sp, #28
 8006d14:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006d16:	4b2c      	ldr	r3, [pc, #176]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f003 030c 	and.w	r3, r3, #12
 8006d1e:	2b04      	cmp	r3, #4
 8006d20:	d102      	bne.n	8006d28 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006d22:	4b2a      	ldr	r3, [pc, #168]	; (8006dcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d24:	613b      	str	r3, [r7, #16]
 8006d26:	e047      	b.n	8006db8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006d28:	4b27      	ldr	r3, [pc, #156]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f003 030c 	and.w	r3, r3, #12
 8006d30:	2b08      	cmp	r3, #8
 8006d32:	d102      	bne.n	8006d3a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d34:	4b25      	ldr	r3, [pc, #148]	; (8006dcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d36:	613b      	str	r3, [r7, #16]
 8006d38:	e03e      	b.n	8006db8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006d3a:	4b23      	ldr	r3, [pc, #140]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	f003 030c 	and.w	r3, r3, #12
 8006d42:	2b0c      	cmp	r3, #12
 8006d44:	d136      	bne.n	8006db4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d46:	4b20      	ldr	r3, [pc, #128]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	f003 0303 	and.w	r3, r3, #3
 8006d4e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d50:	4b1d      	ldr	r3, [pc, #116]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	091b      	lsrs	r3, r3, #4
 8006d56:	f003 030f 	and.w	r3, r3, #15
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2b03      	cmp	r3, #3
 8006d62:	d10c      	bne.n	8006d7e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d64:	4a19      	ldr	r2, [pc, #100]	; (8006dcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d6c:	4a16      	ldr	r2, [pc, #88]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d6e:	68d2      	ldr	r2, [r2, #12]
 8006d70:	0a12      	lsrs	r2, r2, #8
 8006d72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006d76:	fb02 f303 	mul.w	r3, r2, r3
 8006d7a:	617b      	str	r3, [r7, #20]
      break;
 8006d7c:	e00c      	b.n	8006d98 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d7e:	4a13      	ldr	r2, [pc, #76]	; (8006dcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d86:	4a10      	ldr	r2, [pc, #64]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d88:	68d2      	ldr	r2, [r2, #12]
 8006d8a:	0a12      	lsrs	r2, r2, #8
 8006d8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006d90:	fb02 f303 	mul.w	r3, r2, r3
 8006d94:	617b      	str	r3, [r7, #20]
      break;
 8006d96:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006d98:	4b0b      	ldr	r3, [pc, #44]	; (8006dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	0e5b      	lsrs	r3, r3, #25
 8006d9e:	f003 0303 	and.w	r3, r3, #3
 8006da2:	3301      	adds	r3, #1
 8006da4:	005b      	lsls	r3, r3, #1
 8006da6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006da8:	697a      	ldr	r2, [r7, #20]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db0:	613b      	str	r3, [r7, #16]
 8006db2:	e001      	b.n	8006db8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006db4:	2300      	movs	r3, #0
 8006db6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006db8:	693b      	ldr	r3, [r7, #16]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	371c      	adds	r7, #28
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	40021000 	.word	0x40021000
 8006dcc:	00f42400 	.word	0x00f42400

08006dd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006dd4:	4b03      	ldr	r3, [pc, #12]	; (8006de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	200026d4 	.word	0x200026d4

08006de8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b087      	sub	sp, #28
 8006dec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006dee:	4b1e      	ldr	r3, [pc, #120]	; (8006e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	f003 0303 	and.w	r3, r3, #3
 8006df6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006df8:	4b1b      	ldr	r3, [pc, #108]	; (8006e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	091b      	lsrs	r3, r3, #4
 8006dfe:	f003 030f 	and.w	r3, r3, #15
 8006e02:	3301      	adds	r3, #1
 8006e04:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	2b03      	cmp	r3, #3
 8006e0a:	d10c      	bne.n	8006e26 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e0c:	4a17      	ldr	r2, [pc, #92]	; (8006e6c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e14:	4a14      	ldr	r2, [pc, #80]	; (8006e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e16:	68d2      	ldr	r2, [r2, #12]
 8006e18:	0a12      	lsrs	r2, r2, #8
 8006e1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006e1e:	fb02 f303 	mul.w	r3, r2, r3
 8006e22:	617b      	str	r3, [r7, #20]
    break;
 8006e24:	e00c      	b.n	8006e40 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e26:	4a11      	ldr	r2, [pc, #68]	; (8006e6c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e2e:	4a0e      	ldr	r2, [pc, #56]	; (8006e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e30:	68d2      	ldr	r2, [r2, #12]
 8006e32:	0a12      	lsrs	r2, r2, #8
 8006e34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006e38:	fb02 f303 	mul.w	r3, r2, r3
 8006e3c:	617b      	str	r3, [r7, #20]
    break;
 8006e3e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006e40:	4b09      	ldr	r3, [pc, #36]	; (8006e68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	0e5b      	lsrs	r3, r3, #25
 8006e46:	f003 0303 	and.w	r3, r3, #3
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	005b      	lsls	r3, r3, #1
 8006e4e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e58:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006e5a:	687b      	ldr	r3, [r7, #4]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	371c      	adds	r7, #28
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	40021000 	.word	0x40021000
 8006e6c:	00f42400 	.word	0x00f42400

08006e70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e78:	2300      	movs	r3, #0
 8006e7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f000 8098 	beq.w	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e92:	4b43      	ldr	r3, [pc, #268]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10d      	bne.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e9e:	4b40      	ldr	r3, [pc, #256]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ea2:	4a3f      	ldr	r2, [pc, #252]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ea8:	6593      	str	r3, [r2, #88]	; 0x58
 8006eaa:	4b3d      	ldr	r3, [pc, #244]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eb2:	60bb      	str	r3, [r7, #8]
 8006eb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006eba:	4b3a      	ldr	r3, [pc, #232]	; (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a39      	ldr	r2, [pc, #228]	; (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ec4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ec6:	f7fa ff81 	bl	8001dcc <HAL_GetTick>
 8006eca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ecc:	e009      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ece:	f7fa ff7d 	bl	8001dcc <HAL_GetTick>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d902      	bls.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	74fb      	strb	r3, [r7, #19]
        break;
 8006ee0:	e005      	b.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ee2:	4b30      	ldr	r3, [pc, #192]	; (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d0ef      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006eee:	7cfb      	ldrb	r3, [r7, #19]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d159      	bne.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006ef4:	4b2a      	ldr	r3, [pc, #168]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006efe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d01e      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d019      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006f10:	4b23      	ldr	r3, [pc, #140]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f1a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f1c:	4b20      	ldr	r3, [pc, #128]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f22:	4a1f      	ldr	r2, [pc, #124]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f2c:	4b1c      	ldr	r3, [pc, #112]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f32:	4a1b      	ldr	r2, [pc, #108]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006f3c:	4a18      	ldr	r2, [pc, #96]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f003 0301 	and.w	r3, r3, #1
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d016      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f4e:	f7fa ff3d 	bl	8001dcc <HAL_GetTick>
 8006f52:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f54:	e00b      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f56:	f7fa ff39 	bl	8001dcc <HAL_GetTick>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d902      	bls.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	74fb      	strb	r3, [r7, #19]
            break;
 8006f6c:	e006      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f6e:	4b0c      	ldr	r3, [pc, #48]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f74:	f003 0302 	and.w	r3, r3, #2
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d0ec      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006f7c:	7cfb      	ldrb	r3, [r7, #19]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10b      	bne.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f82:	4b07      	ldr	r3, [pc, #28]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f90:	4903      	ldr	r1, [pc, #12]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006f98:	e008      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f9a:	7cfb      	ldrb	r3, [r7, #19]
 8006f9c:	74bb      	strb	r3, [r7, #18]
 8006f9e:	e005      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006fa0:	40021000 	.word	0x40021000
 8006fa4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa8:	7cfb      	ldrb	r3, [r7, #19]
 8006faa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006fac:	7c7b      	ldrb	r3, [r7, #17]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d105      	bne.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fb2:	4ba7      	ldr	r3, [pc, #668]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb6:	4aa6      	ldr	r2, [pc, #664]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fbc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00a      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006fca:	4ba1      	ldr	r3, [pc, #644]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fd0:	f023 0203 	bic.w	r2, r3, #3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	499d      	ldr	r1, [pc, #628]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0302 	and.w	r3, r3, #2
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00a      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006fec:	4b98      	ldr	r3, [pc, #608]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ff2:	f023 020c 	bic.w	r2, r3, #12
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	4995      	ldr	r1, [pc, #596]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0304 	and.w	r3, r3, #4
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00a      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800700e:	4b90      	ldr	r3, [pc, #576]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007014:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	498c      	ldr	r1, [pc, #560]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800701e:	4313      	orrs	r3, r2
 8007020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0308 	and.w	r3, r3, #8
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00a      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007030:	4b87      	ldr	r3, [pc, #540]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007036:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	4984      	ldr	r1, [pc, #528]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007040:	4313      	orrs	r3, r2
 8007042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0310 	and.w	r3, r3, #16
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00a      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007052:	4b7f      	ldr	r3, [pc, #508]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007058:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	695b      	ldr	r3, [r3, #20]
 8007060:	497b      	ldr	r1, [pc, #492]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007062:	4313      	orrs	r3, r2
 8007064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0320 	and.w	r3, r3, #32
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00a      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007074:	4b76      	ldr	r3, [pc, #472]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800707a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	4973      	ldr	r1, [pc, #460]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007084:	4313      	orrs	r3, r2
 8007086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00a      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007096:	4b6e      	ldr	r3, [pc, #440]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800709c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	69db      	ldr	r3, [r3, #28]
 80070a4:	496a      	ldr	r1, [pc, #424]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00a      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80070b8:	4b65      	ldr	r3, [pc, #404]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	4962      	ldr	r1, [pc, #392]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00a      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80070da:	4b5d      	ldr	r3, [pc, #372]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e8:	4959      	ldr	r1, [pc, #356]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070ea:	4313      	orrs	r3, r2
 80070ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00a      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80070fc:	4b54      	ldr	r3, [pc, #336]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007102:	f023 0203 	bic.w	r2, r3, #3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710a:	4951      	ldr	r1, [pc, #324]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800710c:	4313      	orrs	r3, r2
 800710e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00a      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800711e:	4b4c      	ldr	r3, [pc, #304]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007124:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712c:	4948      	ldr	r1, [pc, #288]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800712e:	4313      	orrs	r3, r2
 8007130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800713c:	2b00      	cmp	r3, #0
 800713e:	d015      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007140:	4b43      	ldr	r3, [pc, #268]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007146:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714e:	4940      	ldr	r1, [pc, #256]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007150:	4313      	orrs	r3, r2
 8007152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800715e:	d105      	bne.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007160:	4b3b      	ldr	r3, [pc, #236]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	4a3a      	ldr	r2, [pc, #232]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007166:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800716a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007174:	2b00      	cmp	r3, #0
 8007176:	d015      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007178:	4b35      	ldr	r3, [pc, #212]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800717a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800717e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007186:	4932      	ldr	r1, [pc, #200]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007188:	4313      	orrs	r3, r2
 800718a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007192:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007196:	d105      	bne.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007198:	4b2d      	ldr	r3, [pc, #180]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	4a2c      	ldr	r2, [pc, #176]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800719e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071a2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d015      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80071b0:	4b27      	ldr	r3, [pc, #156]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071b6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071be:	4924      	ldr	r1, [pc, #144]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071c0:	4313      	orrs	r3, r2
 80071c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80071ce:	d105      	bne.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071d0:	4b1f      	ldr	r3, [pc, #124]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	4a1e      	ldr	r2, [pc, #120]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071da:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d015      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071e8:	4b19      	ldr	r3, [pc, #100]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f6:	4916      	ldr	r1, [pc, #88]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071f8:	4313      	orrs	r3, r2
 80071fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007202:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007206:	d105      	bne.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007208:	4b11      	ldr	r3, [pc, #68]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	4a10      	ldr	r2, [pc, #64]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800720e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007212:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d019      	beq.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007220:	4b0b      	ldr	r3, [pc, #44]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007226:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722e:	4908      	ldr	r1, [pc, #32]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007230:	4313      	orrs	r3, r2
 8007232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800723e:	d109      	bne.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007240:	4b03      	ldr	r3, [pc, #12]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	4a02      	ldr	r2, [pc, #8]	; (8007250 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007246:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800724a:	60d3      	str	r3, [r2, #12]
 800724c:	e002      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800724e:	bf00      	nop
 8007250:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800725c:	2b00      	cmp	r3, #0
 800725e:	d015      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007260:	4b29      	ldr	r3, [pc, #164]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007266:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800726e:	4926      	ldr	r1, [pc, #152]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007270:	4313      	orrs	r3, r2
 8007272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800727a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800727e:	d105      	bne.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007280:	4b21      	ldr	r3, [pc, #132]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	4a20      	ldr	r2, [pc, #128]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800728a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d015      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007298:	4b1b      	ldr	r3, [pc, #108]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800729a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800729e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072a6:	4918      	ldr	r1, [pc, #96]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072a8:	4313      	orrs	r3, r2
 80072aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b6:	d105      	bne.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80072b8:	4b13      	ldr	r3, [pc, #76]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	4a12      	ldr	r2, [pc, #72]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072c2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d015      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80072d0:	4b0d      	ldr	r3, [pc, #52]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072de:	490a      	ldr	r1, [pc, #40]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072ee:	d105      	bne.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072f0:	4b05      	ldr	r3, [pc, #20]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	4a04      	ldr	r2, [pc, #16]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80072fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3718      	adds	r7, #24
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	40021000 	.word	0x40021000

0800730c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d101      	bne.n	800731e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e09d      	b.n	800745a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007322:	2b00      	cmp	r3, #0
 8007324:	d108      	bne.n	8007338 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800732e:	d009      	beq.n	8007344 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	61da      	str	r2, [r3, #28]
 8007336:	e005      	b.n	8007344 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b00      	cmp	r3, #0
 8007354:	d106      	bne.n	8007364 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f7fa faba 	bl	80018d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2202      	movs	r2, #2
 8007368:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800737a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007384:	d902      	bls.n	800738c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007386:	2300      	movs	r3, #0
 8007388:	60fb      	str	r3, [r7, #12]
 800738a:	e002      	b.n	8007392 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800738c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007390:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800739a:	d007      	beq.n	80073ac <HAL_SPI_Init+0xa0>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073a4:	d002      	beq.n	80073ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80073bc:	431a      	orrs	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	f003 0302 	and.w	r3, r3, #2
 80073c6:	431a      	orrs	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	f003 0301 	and.w	r3, r3, #1
 80073d0:	431a      	orrs	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073da:	431a      	orrs	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	69db      	ldr	r3, [r3, #28]
 80073e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073e4:	431a      	orrs	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ee:	ea42 0103 	orr.w	r1, r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	0c1b      	lsrs	r3, r3, #16
 8007408:	f003 0204 	and.w	r2, r3, #4
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007410:	f003 0310 	and.w	r3, r3, #16
 8007414:	431a      	orrs	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800741a:	f003 0308 	and.w	r3, r3, #8
 800741e:	431a      	orrs	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007428:	ea42 0103 	orr.w	r1, r2, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	430a      	orrs	r2, r1
 8007438:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	69da      	ldr	r2, [r3, #28]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007448:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007462:	b580      	push	{r7, lr}
 8007464:	b088      	sub	sp, #32
 8007466:	af00      	add	r7, sp, #0
 8007468:	60f8      	str	r0, [r7, #12]
 800746a:	60b9      	str	r1, [r7, #8]
 800746c:	603b      	str	r3, [r7, #0]
 800746e:	4613      	mov	r3, r2
 8007470:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007472:	2300      	movs	r3, #0
 8007474:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800747c:	2b01      	cmp	r3, #1
 800747e:	d101      	bne.n	8007484 <HAL_SPI_Transmit+0x22>
 8007480:	2302      	movs	r3, #2
 8007482:	e158      	b.n	8007736 <HAL_SPI_Transmit+0x2d4>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800748c:	f7fa fc9e 	bl	8001dcc <HAL_GetTick>
 8007490:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007492:	88fb      	ldrh	r3, [r7, #6]
 8007494:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d002      	beq.n	80074a8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80074a2:	2302      	movs	r3, #2
 80074a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074a6:	e13d      	b.n	8007724 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d002      	beq.n	80074b4 <HAL_SPI_Transmit+0x52>
 80074ae:	88fb      	ldrh	r3, [r7, #6]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d102      	bne.n	80074ba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074b8:	e134      	b.n	8007724 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2203      	movs	r2, #3
 80074be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	68ba      	ldr	r2, [r7, #8]
 80074cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	88fa      	ldrh	r2, [r7, #6]
 80074d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	88fa      	ldrh	r2, [r7, #6]
 80074d8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007504:	d10f      	bne.n	8007526 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007514:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007524:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007530:	2b40      	cmp	r3, #64	; 0x40
 8007532:	d007      	beq.n	8007544 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007542:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800754c:	d94b      	bls.n	80075e6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d002      	beq.n	800755c <HAL_SPI_Transmit+0xfa>
 8007556:	8afb      	ldrh	r3, [r7, #22]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d13e      	bne.n	80075da <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007560:	881a      	ldrh	r2, [r3, #0]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756c:	1c9a      	adds	r2, r3, #2
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007576:	b29b      	uxth	r3, r3
 8007578:	3b01      	subs	r3, #1
 800757a:	b29a      	uxth	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007580:	e02b      	b.n	80075da <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	f003 0302 	and.w	r3, r3, #2
 800758c:	2b02      	cmp	r3, #2
 800758e:	d112      	bne.n	80075b6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007594:	881a      	ldrh	r2, [r3, #0]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a0:	1c9a      	adds	r2, r3, #2
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	3b01      	subs	r3, #1
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80075b4:	e011      	b.n	80075da <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075b6:	f7fa fc09 	bl	8001dcc <HAL_GetTick>
 80075ba:	4602      	mov	r2, r0
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	683a      	ldr	r2, [r7, #0]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d803      	bhi.n	80075ce <HAL_SPI_Transmit+0x16c>
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075cc:	d102      	bne.n	80075d4 <HAL_SPI_Transmit+0x172>
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d102      	bne.n	80075da <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80075d8:	e0a4      	b.n	8007724 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075de:	b29b      	uxth	r3, r3
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1ce      	bne.n	8007582 <HAL_SPI_Transmit+0x120>
 80075e4:	e07c      	b.n	80076e0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d002      	beq.n	80075f4 <HAL_SPI_Transmit+0x192>
 80075ee:	8afb      	ldrh	r3, [r7, #22]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d170      	bne.n	80076d6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d912      	bls.n	8007624 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007602:	881a      	ldrh	r2, [r3, #0]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760e:	1c9a      	adds	r2, r3, #2
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007618:	b29b      	uxth	r3, r3
 800761a:	3b02      	subs	r3, #2
 800761c:	b29a      	uxth	r2, r3
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007622:	e058      	b.n	80076d6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	330c      	adds	r3, #12
 800762e:	7812      	ldrb	r2, [r2, #0]
 8007630:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007636:	1c5a      	adds	r2, r3, #1
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007640:	b29b      	uxth	r3, r3
 8007642:	3b01      	subs	r3, #1
 8007644:	b29a      	uxth	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800764a:	e044      	b.n	80076d6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f003 0302 	and.w	r3, r3, #2
 8007656:	2b02      	cmp	r3, #2
 8007658:	d12b      	bne.n	80076b2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800765e:	b29b      	uxth	r3, r3
 8007660:	2b01      	cmp	r3, #1
 8007662:	d912      	bls.n	800768a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007668:	881a      	ldrh	r2, [r3, #0]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007674:	1c9a      	adds	r2, r3, #2
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800767e:	b29b      	uxth	r3, r3
 8007680:	3b02      	subs	r3, #2
 8007682:	b29a      	uxth	r2, r3
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007688:	e025      	b.n	80076d6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	330c      	adds	r3, #12
 8007694:	7812      	ldrb	r2, [r2, #0]
 8007696:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769c:	1c5a      	adds	r2, r3, #1
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	3b01      	subs	r3, #1
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80076b0:	e011      	b.n	80076d6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076b2:	f7fa fb8b 	bl	8001dcc <HAL_GetTick>
 80076b6:	4602      	mov	r2, r0
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	683a      	ldr	r2, [r7, #0]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d803      	bhi.n	80076ca <HAL_SPI_Transmit+0x268>
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076c8:	d102      	bne.n	80076d0 <HAL_SPI_Transmit+0x26e>
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d102      	bne.n	80076d6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80076d4:	e026      	b.n	8007724 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076da:	b29b      	uxth	r3, r3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1b5      	bne.n	800764c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076e0:	69ba      	ldr	r2, [r7, #24]
 80076e2:	6839      	ldr	r1, [r7, #0]
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f000 fd4d 	bl	8008184 <SPI_EndRxTxTransaction>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d002      	beq.n	80076f6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2220      	movs	r2, #32
 80076f4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d10a      	bne.n	8007714 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076fe:	2300      	movs	r3, #0
 8007700:	613b      	str	r3, [r7, #16]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	613b      	str	r3, [r7, #16]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	613b      	str	r3, [r7, #16]
 8007712:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007718:	2b00      	cmp	r3, #0
 800771a:	d002      	beq.n	8007722 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	77fb      	strb	r3, [r7, #31]
 8007720:	e000      	b.n	8007724 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007722:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007734:	7ffb      	ldrb	r3, [r7, #31]
}
 8007736:	4618      	mov	r0, r3
 8007738:	3720      	adds	r7, #32
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
	...

08007740 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
 800774c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007758:	2b01      	cmp	r3, #1
 800775a:	d101      	bne.n	8007760 <HAL_SPI_TransmitReceive_DMA+0x20>
 800775c:	2302      	movs	r3, #2
 800775e:	e16c      	b.n	8007a3a <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800776e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007776:	7dbb      	ldrb	r3, [r7, #22]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d00d      	beq.n	8007798 <HAL_SPI_TransmitReceive_DMA+0x58>
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007782:	d106      	bne.n	8007792 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d102      	bne.n	8007792 <HAL_SPI_TransmitReceive_DMA+0x52>
 800778c:	7dbb      	ldrb	r3, [r7, #22]
 800778e:	2b04      	cmp	r3, #4
 8007790:	d002      	beq.n	8007798 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8007792:	2302      	movs	r3, #2
 8007794:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007796:	e14b      	b.n	8007a30 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d005      	beq.n	80077aa <HAL_SPI_TransmitReceive_DMA+0x6a>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d002      	beq.n	80077aa <HAL_SPI_TransmitReceive_DMA+0x6a>
 80077a4:	887b      	ldrh	r3, [r7, #2]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d102      	bne.n	80077b0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80077ae:	e13f      	b.n	8007a30 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	2b04      	cmp	r3, #4
 80077ba:	d003      	beq.n	80077c4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2205      	movs	r2, #5
 80077c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2200      	movs	r2, #0
 80077c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	887a      	ldrh	r2, [r7, #2]
 80077d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	887a      	ldrh	r2, [r7, #2]
 80077da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	887a      	ldrh	r2, [r7, #2]
 80077e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	887a      	ldrh	r2, [r7, #2]
 80077ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	685a      	ldr	r2, [r3, #4]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800780c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007816:	d908      	bls.n	800782a <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	685a      	ldr	r2, [r3, #4]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007826:	605a      	str	r2, [r3, #4]
 8007828:	e06f      	b.n	800790a <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007838:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800783e:	699b      	ldr	r3, [r3, #24]
 8007840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007844:	d126      	bne.n	8007894 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800784a:	f003 0301 	and.w	r3, r3, #1
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10f      	bne.n	8007872 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	685a      	ldr	r2, [r3, #4]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007860:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007866:	b29b      	uxth	r3, r3
 8007868:	085b      	lsrs	r3, r3, #1
 800786a:	b29a      	uxth	r2, r3
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007870:	e010      	b.n	8007894 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007880:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007886:	b29b      	uxth	r3, r3
 8007888:	085b      	lsrs	r3, r3, #1
 800788a:	b29b      	uxth	r3, r3
 800788c:	3301      	adds	r3, #1
 800788e:	b29a      	uxth	r2, r3
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800789e:	d134      	bne.n	800790a <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	685a      	ldr	r2, [r3, #4]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80078ae:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	f003 0301 	and.w	r3, r3, #1
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d111      	bne.n	80078e4 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	685a      	ldr	r2, [r3, #4]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078ce:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	085b      	lsrs	r3, r3, #1
 80078da:	b29a      	uxth	r2, r3
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80078e2:	e012      	b.n	800790a <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	685a      	ldr	r2, [r3, #4]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078f2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	085b      	lsrs	r3, r3, #1
 80078fe:	b29b      	uxth	r3, r3
 8007900:	3301      	adds	r3, #1
 8007902:	b29a      	uxth	r2, r3
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b04      	cmp	r3, #4
 8007914:	d108      	bne.n	8007928 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800791a:	4a4a      	ldr	r2, [pc, #296]	; (8007a44 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800791c:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007922:	4a49      	ldr	r2, [pc, #292]	; (8007a48 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8007924:	62da      	str	r2, [r3, #44]	; 0x2c
 8007926:	e007      	b.n	8007938 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800792c:	4a47      	ldr	r2, [pc, #284]	; (8007a4c <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800792e:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007934:	4a46      	ldr	r2, [pc, #280]	; (8007a50 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8007936:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800793c:	4a45      	ldr	r2, [pc, #276]	; (8007a54 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800793e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007944:	2200      	movs	r2, #0
 8007946:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	330c      	adds	r3, #12
 8007952:	4619      	mov	r1, r3
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007958:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007960:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007962:	f7fc fb63 	bl	800402c <HAL_DMA_Start_IT>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00c      	beq.n	8007986 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007970:	f043 0210 	orr.w	r2, r3, #16
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8007984:	e054      	b.n	8007a30 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	685a      	ldr	r2, [r3, #4]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f042 0201 	orr.w	r2, r2, #1
 8007994:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800799a:	2200      	movs	r2, #0
 800799c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079a2:	2200      	movs	r2, #0
 80079a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079aa:	2200      	movs	r2, #0
 80079ac:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b2:	2200      	movs	r2, #0
 80079b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079be:	4619      	mov	r1, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	330c      	adds	r3, #12
 80079c6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079cc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80079ce:	f7fc fb2d 	bl	800402c <HAL_DMA_Start_IT>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00c      	beq.n	80079f2 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079dc:	f043 0210 	orr.w	r2, r3, #16
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80079f0:	e01e      	b.n	8007a30 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079fc:	2b40      	cmp	r3, #64	; 0x40
 80079fe:	d007      	beq.n	8007a10 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a0e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	685a      	ldr	r2, [r3, #4]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f042 0220 	orr.w	r2, r2, #32
 8007a1e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	685a      	ldr	r2, [r3, #4]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f042 0202 	orr.w	r2, r2, #2
 8007a2e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3718      	adds	r7, #24
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	08007df5 	.word	0x08007df5
 8007a48:	08007cbd 	.word	0x08007cbd
 8007a4c:	08007e11 	.word	0x08007e11
 8007a50:	08007d65 	.word	0x08007d65
 8007a54:	08007e2d 	.word	0x08007e2d

08007a58 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b088      	sub	sp, #32
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	099b      	lsrs	r3, r3, #6
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10f      	bne.n	8007a9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00a      	beq.n	8007a9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	099b      	lsrs	r3, r3, #6
 8007a8a:	f003 0301 	and.w	r3, r3, #1
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d004      	beq.n	8007a9c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	4798      	blx	r3
    return;
 8007a9a:	e0d7      	b.n	8007c4c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	085b      	lsrs	r3, r3, #1
 8007aa0:	f003 0301 	and.w	r3, r3, #1
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00a      	beq.n	8007abe <HAL_SPI_IRQHandler+0x66>
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	09db      	lsrs	r3, r3, #7
 8007aac:	f003 0301 	and.w	r3, r3, #1
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d004      	beq.n	8007abe <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	4798      	blx	r3
    return;
 8007abc:	e0c6      	b.n	8007c4c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	095b      	lsrs	r3, r3, #5
 8007ac2:	f003 0301 	and.w	r3, r3, #1
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d10c      	bne.n	8007ae4 <HAL_SPI_IRQHandler+0x8c>
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	099b      	lsrs	r3, r3, #6
 8007ace:	f003 0301 	and.w	r3, r3, #1
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d106      	bne.n	8007ae4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	0a1b      	lsrs	r3, r3, #8
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f000 80b4 	beq.w	8007c4c <HAL_SPI_IRQHandler+0x1f4>
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	095b      	lsrs	r3, r3, #5
 8007ae8:	f003 0301 	and.w	r3, r3, #1
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f000 80ad 	beq.w	8007c4c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	099b      	lsrs	r3, r3, #6
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d023      	beq.n	8007b46 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	2b03      	cmp	r3, #3
 8007b08:	d011      	beq.n	8007b2e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b0e:	f043 0204 	orr.w	r2, r3, #4
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b16:	2300      	movs	r3, #0
 8007b18:	617b      	str	r3, [r7, #20]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	617b      	str	r3, [r7, #20]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	617b      	str	r3, [r7, #20]
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	e00b      	b.n	8007b46 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b2e:	2300      	movs	r3, #0
 8007b30:	613b      	str	r3, [r7, #16]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	613b      	str	r3, [r7, #16]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	613b      	str	r3, [r7, #16]
 8007b42:	693b      	ldr	r3, [r7, #16]
        return;
 8007b44:	e082      	b.n	8007c4c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	095b      	lsrs	r3, r3, #5
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d014      	beq.n	8007b7c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b56:	f043 0201 	orr.w	r2, r3, #1
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007b5e:	2300      	movs	r3, #0
 8007b60:	60fb      	str	r3, [r7, #12]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	60fb      	str	r3, [r7, #12]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b78:	601a      	str	r2, [r3, #0]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	0a1b      	lsrs	r3, r3, #8
 8007b80:	f003 0301 	and.w	r3, r3, #1
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00c      	beq.n	8007ba2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b8c:	f043 0208 	orr.w	r2, r3, #8
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007b94:	2300      	movs	r3, #0
 8007b96:	60bb      	str	r3, [r7, #8]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	60bb      	str	r3, [r7, #8]
 8007ba0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d04f      	beq.n	8007c4a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	685a      	ldr	r2, [r3, #4]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007bb8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	f003 0302 	and.w	r3, r3, #2
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d104      	bne.n	8007bd6 <HAL_SPI_IRQHandler+0x17e>
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	f003 0301 	and.w	r3, r3, #1
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d034      	beq.n	8007c40 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f022 0203 	bic.w	r2, r2, #3
 8007be4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d011      	beq.n	8007c12 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bf2:	4a18      	ldr	r2, [pc, #96]	; (8007c54 <HAL_SPI_IRQHandler+0x1fc>)
 8007bf4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7fc faea 	bl	80041d4 <HAL_DMA_Abort_IT>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d005      	beq.n	8007c12 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d016      	beq.n	8007c48 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c1e:	4a0d      	ldr	r2, [pc, #52]	; (8007c54 <HAL_SPI_IRQHandler+0x1fc>)
 8007c20:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7fc fad4 	bl	80041d4 <HAL_DMA_Abort_IT>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00a      	beq.n	8007c48 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007c3e:	e003      	b.n	8007c48 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f831 	bl	8007ca8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007c46:	e000      	b.n	8007c4a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007c48:	bf00      	nop
    return;
 8007c4a:	bf00      	nop
  }
}
 8007c4c:	3720      	adds	r7, #32
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	08007e6d 	.word	0x08007e6d

08007c58 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007c74:	bf00      	nop
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc8:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cca:	f7fa f87f 	bl	8001dcc <HAL_GetTick>
 8007cce:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 0320 	and.w	r3, r3, #32
 8007cda:	2b20      	cmp	r3, #32
 8007cdc:	d03c      	beq.n	8007d58 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	685a      	ldr	r2, [r3, #4]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f022 0220 	bic.w	r2, r2, #32
 8007cec:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d10d      	bne.n	8007d12 <SPI_DMAReceiveCplt+0x56>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cfe:	d108      	bne.n	8007d12 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	685a      	ldr	r2, [r3, #4]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f022 0203 	bic.w	r2, r2, #3
 8007d0e:	605a      	str	r2, [r3, #4]
 8007d10:	e007      	b.n	8007d22 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	685a      	ldr	r2, [r3, #4]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f022 0201 	bic.w	r2, r2, #1
 8007d20:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007d22:	68ba      	ldr	r2, [r7, #8]
 8007d24:	2164      	movs	r1, #100	; 0x64
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	f000 f9d4 	bl	80080d4 <SPI_EndRxTransaction>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d002      	beq.n	8007d38 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2220      	movs	r2, #32
 8007d36:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d003      	beq.n	8007d58 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f7ff ffa9 	bl	8007ca8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007d56:	e002      	b.n	8007d5e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8007d58:	68f8      	ldr	r0, [r7, #12]
 8007d5a:	f7ff ff7d 	bl	8007c58 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d5e:	3710      	adds	r7, #16
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d70:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d72:	f7fa f82b 	bl	8001dcc <HAL_GetTick>
 8007d76:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 0320 	and.w	r3, r3, #32
 8007d82:	2b20      	cmp	r3, #32
 8007d84:	d030      	beq.n	8007de8 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	685a      	ldr	r2, [r3, #4]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f022 0220 	bic.w	r2, r2, #32
 8007d94:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007d96:	68ba      	ldr	r2, [r7, #8]
 8007d98:	2164      	movs	r1, #100	; 0x64
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	f000 f9f2 	bl	8008184 <SPI_EndRxTxTransaction>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d005      	beq.n	8007db2 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007daa:	f043 0220 	orr.w	r2, r3, #32
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	685a      	ldr	r2, [r3, #4]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f022 0203 	bic.w	r2, r2, #3
 8007dc0:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d003      	beq.n	8007de8 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007de0:	68f8      	ldr	r0, [r7, #12]
 8007de2:	f7ff ff61 	bl	8007ca8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007de6:	e002      	b.n	8007dee <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	f7ff ff3f 	bl	8007c6c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e00:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f7ff ff3c 	bl	8007c80 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e08:	bf00      	nop
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e1c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f7ff ff38 	bl	8007c94 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e24:	bf00      	nop
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e38:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	685a      	ldr	r2, [r3, #4]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f022 0203 	bic.w	r2, r2, #3
 8007e48:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e4e:	f043 0210 	orr.w	r2, r3, #16
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f7ff ff22 	bl	8007ca8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e64:	bf00      	nop
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e78:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f7ff ff0d 	bl	8007ca8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e8e:	bf00      	nop
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
	...

08007e98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b088      	sub	sp, #32
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	603b      	str	r3, [r7, #0]
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ea8:	f7f9 ff90 	bl	8001dcc <HAL_GetTick>
 8007eac:	4602      	mov	r2, r0
 8007eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb0:	1a9b      	subs	r3, r3, r2
 8007eb2:	683a      	ldr	r2, [r7, #0]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007eb8:	f7f9 ff88 	bl	8001dcc <HAL_GetTick>
 8007ebc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007ebe:	4b39      	ldr	r3, [pc, #228]	; (8007fa4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	015b      	lsls	r3, r3, #5
 8007ec4:	0d1b      	lsrs	r3, r3, #20
 8007ec6:	69fa      	ldr	r2, [r7, #28]
 8007ec8:	fb02 f303 	mul.w	r3, r2, r3
 8007ecc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ece:	e054      	b.n	8007f7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ed6:	d050      	beq.n	8007f7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ed8:	f7f9 ff78 	bl	8001dcc <HAL_GetTick>
 8007edc:	4602      	mov	r2, r0
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	69fa      	ldr	r2, [r7, #28]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d902      	bls.n	8007eee <SPI_WaitFlagStateUntilTimeout+0x56>
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d13d      	bne.n	8007f6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	685a      	ldr	r2, [r3, #4]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007efc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f06:	d111      	bne.n	8007f2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f10:	d004      	beq.n	8007f1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f1a:	d107      	bne.n	8007f2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f34:	d10f      	bne.n	8007f56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f44:	601a      	str	r2, [r3, #0]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007f66:	2303      	movs	r3, #3
 8007f68:	e017      	b.n	8007f9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d101      	bne.n	8007f74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007f70:	2300      	movs	r3, #0
 8007f72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	3b01      	subs	r3, #1
 8007f78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	689a      	ldr	r2, [r3, #8]
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	4013      	ands	r3, r2
 8007f84:	68ba      	ldr	r2, [r7, #8]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	bf0c      	ite	eq
 8007f8a:	2301      	moveq	r3, #1
 8007f8c:	2300      	movne	r3, #0
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	461a      	mov	r2, r3
 8007f92:	79fb      	ldrb	r3, [r7, #7]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d19b      	bne.n	8007ed0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3720      	adds	r7, #32
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	200026d4 	.word	0x200026d4

08007fa8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b08a      	sub	sp, #40	; 0x28
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	607a      	str	r2, [r7, #4]
 8007fb4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007fba:	f7f9 ff07 	bl	8001dcc <HAL_GetTick>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc2:	1a9b      	subs	r3, r3, r2
 8007fc4:	683a      	ldr	r2, [r7, #0]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007fca:	f7f9 feff 	bl	8001dcc <HAL_GetTick>
 8007fce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	330c      	adds	r3, #12
 8007fd6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007fd8:	4b3d      	ldr	r3, [pc, #244]	; (80080d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	4613      	mov	r3, r2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4413      	add	r3, r2
 8007fe2:	00da      	lsls	r2, r3, #3
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	0d1b      	lsrs	r3, r3, #20
 8007fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fea:	fb02 f303 	mul.w	r3, r2, r3
 8007fee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007ff0:	e060      	b.n	80080b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007ff8:	d107      	bne.n	800800a <SPI_WaitFifoStateUntilTimeout+0x62>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d104      	bne.n	800800a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	b2db      	uxtb	r3, r3
 8008006:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008008:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008010:	d050      	beq.n	80080b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008012:	f7f9 fedb 	bl	8001dcc <HAL_GetTick>
 8008016:	4602      	mov	r2, r0
 8008018:	6a3b      	ldr	r3, [r7, #32]
 800801a:	1ad3      	subs	r3, r2, r3
 800801c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800801e:	429a      	cmp	r2, r3
 8008020:	d902      	bls.n	8008028 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008024:	2b00      	cmp	r3, #0
 8008026:	d13d      	bne.n	80080a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	685a      	ldr	r2, [r3, #4]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008036:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008040:	d111      	bne.n	8008066 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800804a:	d004      	beq.n	8008056 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008054:	d107      	bne.n	8008066 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008064:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800806a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800806e:	d10f      	bne.n	8008090 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800807e:	601a      	str	r2, [r3, #0]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800808e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2200      	movs	r2, #0
 800809c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e010      	b.n	80080c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d101      	bne.n	80080ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80080aa:	2300      	movs	r3, #0
 80080ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	3b01      	subs	r3, #1
 80080b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	689a      	ldr	r2, [r3, #8]
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	4013      	ands	r3, r2
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d196      	bne.n	8007ff2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3728      	adds	r7, #40	; 0x28
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	200026d4 	.word	0x200026d4

080080d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b086      	sub	sp, #24
 80080d8:	af02      	add	r7, sp, #8
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080e8:	d111      	bne.n	800810e <SPI_EndRxTransaction+0x3a>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080f2:	d004      	beq.n	80080fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080fc:	d107      	bne.n	800810e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800810c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	9300      	str	r3, [sp, #0]
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	2200      	movs	r2, #0
 8008116:	2180      	movs	r1, #128	; 0x80
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f7ff febd 	bl	8007e98 <SPI_WaitFlagStateUntilTimeout>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d007      	beq.n	8008134 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008128:	f043 0220 	orr.w	r2, r3, #32
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008130:	2303      	movs	r3, #3
 8008132:	e023      	b.n	800817c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800813c:	d11d      	bne.n	800817a <SPI_EndRxTransaction+0xa6>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008146:	d004      	beq.n	8008152 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008150:	d113      	bne.n	800817a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	9300      	str	r3, [sp, #0]
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	2200      	movs	r2, #0
 800815a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f7ff ff22 	bl	8007fa8 <SPI_WaitFifoStateUntilTimeout>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d007      	beq.n	800817a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800816e:	f043 0220 	orr.w	r2, r3, #32
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008176:	2303      	movs	r3, #3
 8008178:	e000      	b.n	800817c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b086      	sub	sp, #24
 8008188:	af02      	add	r7, sp, #8
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	9300      	str	r3, [sp, #0]
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	2200      	movs	r2, #0
 8008198:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f7ff ff03 	bl	8007fa8 <SPI_WaitFifoStateUntilTimeout>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d007      	beq.n	80081b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081ac:	f043 0220 	orr.w	r2, r3, #32
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80081b4:	2303      	movs	r3, #3
 80081b6:	e027      	b.n	8008208 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	9300      	str	r3, [sp, #0]
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	2200      	movs	r2, #0
 80081c0:	2180      	movs	r1, #128	; 0x80
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f7ff fe68 	bl	8007e98 <SPI_WaitFlagStateUntilTimeout>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d007      	beq.n	80081de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081d2:	f043 0220 	orr.w	r2, r3, #32
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80081da:	2303      	movs	r3, #3
 80081dc:	e014      	b.n	8008208 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	9300      	str	r3, [sp, #0]
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f7ff fedc 	bl	8007fa8 <SPI_WaitFifoStateUntilTimeout>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d007      	beq.n	8008206 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081fa:	f043 0220 	orr.w	r2, r3, #32
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008202:	2303      	movs	r3, #3
 8008204:	e000      	b.n	8008208 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d101      	bne.n	8008222 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e049      	b.n	80082b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d106      	bne.n	800823c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f7f9 fb98 	bl	800196c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2202      	movs	r2, #2
 8008240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	3304      	adds	r3, #4
 800824c:	4619      	mov	r1, r3
 800824e:	4610      	mov	r0, r2
 8008250:	f000 fbc6 	bl	80089e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3708      	adds	r7, #8
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
	...

080082c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b085      	sub	sp, #20
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d001      	beq.n	80082d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	e04c      	b.n	8008372 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2202      	movs	r2, #2
 80082dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a26      	ldr	r2, [pc, #152]	; (8008380 <HAL_TIM_Base_Start+0xc0>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d022      	beq.n	8008330 <HAL_TIM_Base_Start+0x70>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082f2:	d01d      	beq.n	8008330 <HAL_TIM_Base_Start+0x70>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a22      	ldr	r2, [pc, #136]	; (8008384 <HAL_TIM_Base_Start+0xc4>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d018      	beq.n	8008330 <HAL_TIM_Base_Start+0x70>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a21      	ldr	r2, [pc, #132]	; (8008388 <HAL_TIM_Base_Start+0xc8>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d013      	beq.n	8008330 <HAL_TIM_Base_Start+0x70>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a1f      	ldr	r2, [pc, #124]	; (800838c <HAL_TIM_Base_Start+0xcc>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d00e      	beq.n	8008330 <HAL_TIM_Base_Start+0x70>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a1e      	ldr	r2, [pc, #120]	; (8008390 <HAL_TIM_Base_Start+0xd0>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d009      	beq.n	8008330 <HAL_TIM_Base_Start+0x70>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a1c      	ldr	r2, [pc, #112]	; (8008394 <HAL_TIM_Base_Start+0xd4>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d004      	beq.n	8008330 <HAL_TIM_Base_Start+0x70>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a1b      	ldr	r2, [pc, #108]	; (8008398 <HAL_TIM_Base_Start+0xd8>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d115      	bne.n	800835c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	689a      	ldr	r2, [r3, #8]
 8008336:	4b19      	ldr	r3, [pc, #100]	; (800839c <HAL_TIM_Base_Start+0xdc>)
 8008338:	4013      	ands	r3, r2
 800833a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2b06      	cmp	r3, #6
 8008340:	d015      	beq.n	800836e <HAL_TIM_Base_Start+0xae>
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008348:	d011      	beq.n	800836e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f042 0201 	orr.w	r2, r2, #1
 8008358:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800835a:	e008      	b.n	800836e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f042 0201 	orr.w	r2, r2, #1
 800836a:	601a      	str	r2, [r3, #0]
 800836c:	e000      	b.n	8008370 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800836e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008370:	2300      	movs	r3, #0
}
 8008372:	4618      	mov	r0, r3
 8008374:	3714      	adds	r7, #20
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	40012c00 	.word	0x40012c00
 8008384:	40000400 	.word	0x40000400
 8008388:	40000800 	.word	0x40000800
 800838c:	40000c00 	.word	0x40000c00
 8008390:	40013400 	.word	0x40013400
 8008394:	40014000 	.word	0x40014000
 8008398:	40015000 	.word	0x40015000
 800839c:	00010007 	.word	0x00010007

080083a0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6a1a      	ldr	r2, [r3, #32]
 80083ae:	f241 1311 	movw	r3, #4369	; 0x1111
 80083b2:	4013      	ands	r3, r2
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d10f      	bne.n	80083d8 <HAL_TIM_Base_Stop+0x38>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	6a1a      	ldr	r2, [r3, #32]
 80083be:	f244 4344 	movw	r3, #17476	; 0x4444
 80083c2:	4013      	ands	r3, r2
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d107      	bne.n	80083d8 <HAL_TIM_Base_Stop+0x38>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f022 0201 	bic.w	r2, r2, #1
 80083d6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	370c      	adds	r7, #12
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr

080083ee <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b082      	sub	sp, #8
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d101      	bne.n	8008400 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	e049      	b.n	8008494 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008406:	b2db      	uxtb	r3, r3
 8008408:	2b00      	cmp	r3, #0
 800840a:	d106      	bne.n	800841a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f841 	bl	800849c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2202      	movs	r2, #2
 800841e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	3304      	adds	r3, #4
 800842a:	4619      	mov	r1, r3
 800842c:	4610      	mov	r0, r2
 800842e:	f000 fad7 	bl	80089e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2201      	movs	r2, #1
 8008436:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2201      	movs	r2, #1
 800843e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2201      	movs	r2, #1
 8008446:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2201      	movs	r2, #1
 800844e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2201      	movs	r2, #1
 8008456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2201      	movs	r2, #1
 800845e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2201      	movs	r2, #1
 8008466:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2201      	movs	r2, #1
 800846e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2201      	movs	r2, #1
 800847e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2201      	movs	r2, #1
 8008486:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2201      	movs	r2, #1
 800848e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	3708      	adds	r7, #8
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80084a4:	bf00      	nop
 80084a6:	370c      	adds	r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d109      	bne.n	80084d4 <HAL_TIM_OC_Start+0x24>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	bf14      	ite	ne
 80084cc:	2301      	movne	r3, #1
 80084ce:	2300      	moveq	r3, #0
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	e03c      	b.n	800854e <HAL_TIM_OC_Start+0x9e>
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	2b04      	cmp	r3, #4
 80084d8:	d109      	bne.n	80084ee <HAL_TIM_OC_Start+0x3e>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	bf14      	ite	ne
 80084e6:	2301      	movne	r3, #1
 80084e8:	2300      	moveq	r3, #0
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	e02f      	b.n	800854e <HAL_TIM_OC_Start+0x9e>
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	2b08      	cmp	r3, #8
 80084f2:	d109      	bne.n	8008508 <HAL_TIM_OC_Start+0x58>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	bf14      	ite	ne
 8008500:	2301      	movne	r3, #1
 8008502:	2300      	moveq	r3, #0
 8008504:	b2db      	uxtb	r3, r3
 8008506:	e022      	b.n	800854e <HAL_TIM_OC_Start+0x9e>
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	2b0c      	cmp	r3, #12
 800850c:	d109      	bne.n	8008522 <HAL_TIM_OC_Start+0x72>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008514:	b2db      	uxtb	r3, r3
 8008516:	2b01      	cmp	r3, #1
 8008518:	bf14      	ite	ne
 800851a:	2301      	movne	r3, #1
 800851c:	2300      	moveq	r3, #0
 800851e:	b2db      	uxtb	r3, r3
 8008520:	e015      	b.n	800854e <HAL_TIM_OC_Start+0x9e>
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	2b10      	cmp	r3, #16
 8008526:	d109      	bne.n	800853c <HAL_TIM_OC_Start+0x8c>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800852e:	b2db      	uxtb	r3, r3
 8008530:	2b01      	cmp	r3, #1
 8008532:	bf14      	ite	ne
 8008534:	2301      	movne	r3, #1
 8008536:	2300      	moveq	r3, #0
 8008538:	b2db      	uxtb	r3, r3
 800853a:	e008      	b.n	800854e <HAL_TIM_OC_Start+0x9e>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008542:	b2db      	uxtb	r3, r3
 8008544:	2b01      	cmp	r3, #1
 8008546:	bf14      	ite	ne
 8008548:	2301      	movne	r3, #1
 800854a:	2300      	moveq	r3, #0
 800854c:	b2db      	uxtb	r3, r3
 800854e:	2b00      	cmp	r3, #0
 8008550:	d001      	beq.n	8008556 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	e0a6      	b.n	80086a4 <HAL_TIM_OC_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d104      	bne.n	8008566 <HAL_TIM_OC_Start+0xb6>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2202      	movs	r2, #2
 8008560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008564:	e023      	b.n	80085ae <HAL_TIM_OC_Start+0xfe>
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	2b04      	cmp	r3, #4
 800856a:	d104      	bne.n	8008576 <HAL_TIM_OC_Start+0xc6>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2202      	movs	r2, #2
 8008570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008574:	e01b      	b.n	80085ae <HAL_TIM_OC_Start+0xfe>
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	2b08      	cmp	r3, #8
 800857a:	d104      	bne.n	8008586 <HAL_TIM_OC_Start+0xd6>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2202      	movs	r2, #2
 8008580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008584:	e013      	b.n	80085ae <HAL_TIM_OC_Start+0xfe>
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	2b0c      	cmp	r3, #12
 800858a:	d104      	bne.n	8008596 <HAL_TIM_OC_Start+0xe6>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2202      	movs	r2, #2
 8008590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008594:	e00b      	b.n	80085ae <HAL_TIM_OC_Start+0xfe>
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	2b10      	cmp	r3, #16
 800859a:	d104      	bne.n	80085a6 <HAL_TIM_OC_Start+0xf6>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2202      	movs	r2, #2
 80085a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085a4:	e003      	b.n	80085ae <HAL_TIM_OC_Start+0xfe>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2202      	movs	r2, #2
 80085aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2201      	movs	r2, #1
 80085b4:	6839      	ldr	r1, [r7, #0]
 80085b6:	4618      	mov	r0, r3
 80085b8:	f000 fe80 	bl	80092bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a3a      	ldr	r2, [pc, #232]	; (80086ac <HAL_TIM_OC_Start+0x1fc>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d018      	beq.n	80085f8 <HAL_TIM_OC_Start+0x148>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a39      	ldr	r2, [pc, #228]	; (80086b0 <HAL_TIM_OC_Start+0x200>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d013      	beq.n	80085f8 <HAL_TIM_OC_Start+0x148>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a37      	ldr	r2, [pc, #220]	; (80086b4 <HAL_TIM_OC_Start+0x204>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d00e      	beq.n	80085f8 <HAL_TIM_OC_Start+0x148>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a36      	ldr	r2, [pc, #216]	; (80086b8 <HAL_TIM_OC_Start+0x208>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d009      	beq.n	80085f8 <HAL_TIM_OC_Start+0x148>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a34      	ldr	r2, [pc, #208]	; (80086bc <HAL_TIM_OC_Start+0x20c>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d004      	beq.n	80085f8 <HAL_TIM_OC_Start+0x148>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a33      	ldr	r2, [pc, #204]	; (80086c0 <HAL_TIM_OC_Start+0x210>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d101      	bne.n	80085fc <HAL_TIM_OC_Start+0x14c>
 80085f8:	2301      	movs	r3, #1
 80085fa:	e000      	b.n	80085fe <HAL_TIM_OC_Start+0x14e>
 80085fc:	2300      	movs	r3, #0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d007      	beq.n	8008612 <HAL_TIM_OC_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008610:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a25      	ldr	r2, [pc, #148]	; (80086ac <HAL_TIM_OC_Start+0x1fc>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d022      	beq.n	8008662 <HAL_TIM_OC_Start+0x1b2>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008624:	d01d      	beq.n	8008662 <HAL_TIM_OC_Start+0x1b2>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a26      	ldr	r2, [pc, #152]	; (80086c4 <HAL_TIM_OC_Start+0x214>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d018      	beq.n	8008662 <HAL_TIM_OC_Start+0x1b2>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a24      	ldr	r2, [pc, #144]	; (80086c8 <HAL_TIM_OC_Start+0x218>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d013      	beq.n	8008662 <HAL_TIM_OC_Start+0x1b2>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a23      	ldr	r2, [pc, #140]	; (80086cc <HAL_TIM_OC_Start+0x21c>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d00e      	beq.n	8008662 <HAL_TIM_OC_Start+0x1b2>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a19      	ldr	r2, [pc, #100]	; (80086b0 <HAL_TIM_OC_Start+0x200>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d009      	beq.n	8008662 <HAL_TIM_OC_Start+0x1b2>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a18      	ldr	r2, [pc, #96]	; (80086b4 <HAL_TIM_OC_Start+0x204>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d004      	beq.n	8008662 <HAL_TIM_OC_Start+0x1b2>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a18      	ldr	r2, [pc, #96]	; (80086c0 <HAL_TIM_OC_Start+0x210>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d115      	bne.n	800868e <HAL_TIM_OC_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	689a      	ldr	r2, [r3, #8]
 8008668:	4b19      	ldr	r3, [pc, #100]	; (80086d0 <HAL_TIM_OC_Start+0x220>)
 800866a:	4013      	ands	r3, r2
 800866c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2b06      	cmp	r3, #6
 8008672:	d015      	beq.n	80086a0 <HAL_TIM_OC_Start+0x1f0>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800867a:	d011      	beq.n	80086a0 <HAL_TIM_OC_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f042 0201 	orr.w	r2, r2, #1
 800868a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800868c:	e008      	b.n	80086a0 <HAL_TIM_OC_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f042 0201 	orr.w	r2, r2, #1
 800869c:	601a      	str	r2, [r3, #0]
 800869e:	e000      	b.n	80086a2 <HAL_TIM_OC_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	40012c00 	.word	0x40012c00
 80086b0:	40013400 	.word	0x40013400
 80086b4:	40014000 	.word	0x40014000
 80086b8:	40014400 	.word	0x40014400
 80086bc:	40014800 	.word	0x40014800
 80086c0:	40015000 	.word	0x40015000
 80086c4:	40000400 	.word	0x40000400
 80086c8:	40000800 	.word	0x40000800
 80086cc:	40000c00 	.word	0x40000c00
 80086d0:	00010007 	.word	0x00010007

080086d4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b086      	sub	sp, #24
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086e0:	2300      	movs	r3, #0
 80086e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d101      	bne.n	80086f2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80086ee:	2302      	movs	r3, #2
 80086f0:	e066      	b.n	80087c0 <HAL_TIM_OC_ConfigChannel+0xec>
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2201      	movs	r2, #1
 80086f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2b14      	cmp	r3, #20
 80086fe:	d857      	bhi.n	80087b0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8008700:	a201      	add	r2, pc, #4	; (adr r2, 8008708 <HAL_TIM_OC_ConfigChannel+0x34>)
 8008702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008706:	bf00      	nop
 8008708:	0800875d 	.word	0x0800875d
 800870c:	080087b1 	.word	0x080087b1
 8008710:	080087b1 	.word	0x080087b1
 8008714:	080087b1 	.word	0x080087b1
 8008718:	0800876b 	.word	0x0800876b
 800871c:	080087b1 	.word	0x080087b1
 8008720:	080087b1 	.word	0x080087b1
 8008724:	080087b1 	.word	0x080087b1
 8008728:	08008779 	.word	0x08008779
 800872c:	080087b1 	.word	0x080087b1
 8008730:	080087b1 	.word	0x080087b1
 8008734:	080087b1 	.word	0x080087b1
 8008738:	08008787 	.word	0x08008787
 800873c:	080087b1 	.word	0x080087b1
 8008740:	080087b1 	.word	0x080087b1
 8008744:	080087b1 	.word	0x080087b1
 8008748:	08008795 	.word	0x08008795
 800874c:	080087b1 	.word	0x080087b1
 8008750:	080087b1 	.word	0x080087b1
 8008754:	080087b1 	.word	0x080087b1
 8008758:	080087a3 	.word	0x080087a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	68b9      	ldr	r1, [r7, #8]
 8008762:	4618      	mov	r0, r3
 8008764:	f000 f9e4 	bl	8008b30 <TIM_OC1_SetConfig>
      break;
 8008768:	e025      	b.n	80087b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68b9      	ldr	r1, [r7, #8]
 8008770:	4618      	mov	r0, r3
 8008772:	f000 fa77 	bl	8008c64 <TIM_OC2_SetConfig>
      break;
 8008776:	e01e      	b.n	80087b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68b9      	ldr	r1, [r7, #8]
 800877e:	4618      	mov	r0, r3
 8008780:	f000 fb04 	bl	8008d8c <TIM_OC3_SetConfig>
      break;
 8008784:	e017      	b.n	80087b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	68b9      	ldr	r1, [r7, #8]
 800878c:	4618      	mov	r0, r3
 800878e:	f000 fb8f 	bl	8008eb0 <TIM_OC4_SetConfig>
      break;
 8008792:	e010      	b.n	80087b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	68b9      	ldr	r1, [r7, #8]
 800879a:	4618      	mov	r0, r3
 800879c:	f000 fc1c 	bl	8008fd8 <TIM_OC5_SetConfig>
      break;
 80087a0:	e009      	b.n	80087b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68b9      	ldr	r1, [r7, #8]
 80087a8:	4618      	mov	r0, r3
 80087aa:	f000 fc7f 	bl	80090ac <TIM_OC6_SetConfig>
      break;
 80087ae:	e002      	b.n	80087b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
 80087b2:	75fb      	strb	r3, [r7, #23]
      break;
 80087b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087be:	7dfb      	ldrb	r3, [r7, #23]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3718      	adds	r7, #24
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d101      	bne.n	80087e4 <HAL_TIM_ConfigClockSource+0x1c>
 80087e0:	2302      	movs	r3, #2
 80087e2:	e0ee      	b.n	80089c2 <HAL_TIM_ConfigClockSource+0x1fa>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2202      	movs	r2, #2
 80087f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008802:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008806:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800880e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	68ba      	ldr	r2, [r7, #8]
 8008816:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a6b      	ldr	r2, [pc, #428]	; (80089cc <HAL_TIM_ConfigClockSource+0x204>)
 800881e:	4293      	cmp	r3, r2
 8008820:	f000 80b9 	beq.w	8008996 <HAL_TIM_ConfigClockSource+0x1ce>
 8008824:	4a69      	ldr	r2, [pc, #420]	; (80089cc <HAL_TIM_ConfigClockSource+0x204>)
 8008826:	4293      	cmp	r3, r2
 8008828:	f200 80be 	bhi.w	80089a8 <HAL_TIM_ConfigClockSource+0x1e0>
 800882c:	4a68      	ldr	r2, [pc, #416]	; (80089d0 <HAL_TIM_ConfigClockSource+0x208>)
 800882e:	4293      	cmp	r3, r2
 8008830:	f000 80b1 	beq.w	8008996 <HAL_TIM_ConfigClockSource+0x1ce>
 8008834:	4a66      	ldr	r2, [pc, #408]	; (80089d0 <HAL_TIM_ConfigClockSource+0x208>)
 8008836:	4293      	cmp	r3, r2
 8008838:	f200 80b6 	bhi.w	80089a8 <HAL_TIM_ConfigClockSource+0x1e0>
 800883c:	4a65      	ldr	r2, [pc, #404]	; (80089d4 <HAL_TIM_ConfigClockSource+0x20c>)
 800883e:	4293      	cmp	r3, r2
 8008840:	f000 80a9 	beq.w	8008996 <HAL_TIM_ConfigClockSource+0x1ce>
 8008844:	4a63      	ldr	r2, [pc, #396]	; (80089d4 <HAL_TIM_ConfigClockSource+0x20c>)
 8008846:	4293      	cmp	r3, r2
 8008848:	f200 80ae 	bhi.w	80089a8 <HAL_TIM_ConfigClockSource+0x1e0>
 800884c:	4a62      	ldr	r2, [pc, #392]	; (80089d8 <HAL_TIM_ConfigClockSource+0x210>)
 800884e:	4293      	cmp	r3, r2
 8008850:	f000 80a1 	beq.w	8008996 <HAL_TIM_ConfigClockSource+0x1ce>
 8008854:	4a60      	ldr	r2, [pc, #384]	; (80089d8 <HAL_TIM_ConfigClockSource+0x210>)
 8008856:	4293      	cmp	r3, r2
 8008858:	f200 80a6 	bhi.w	80089a8 <HAL_TIM_ConfigClockSource+0x1e0>
 800885c:	4a5f      	ldr	r2, [pc, #380]	; (80089dc <HAL_TIM_ConfigClockSource+0x214>)
 800885e:	4293      	cmp	r3, r2
 8008860:	f000 8099 	beq.w	8008996 <HAL_TIM_ConfigClockSource+0x1ce>
 8008864:	4a5d      	ldr	r2, [pc, #372]	; (80089dc <HAL_TIM_ConfigClockSource+0x214>)
 8008866:	4293      	cmp	r3, r2
 8008868:	f200 809e 	bhi.w	80089a8 <HAL_TIM_ConfigClockSource+0x1e0>
 800886c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008870:	f000 8091 	beq.w	8008996 <HAL_TIM_ConfigClockSource+0x1ce>
 8008874:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008878:	f200 8096 	bhi.w	80089a8 <HAL_TIM_ConfigClockSource+0x1e0>
 800887c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008880:	f000 8089 	beq.w	8008996 <HAL_TIM_ConfigClockSource+0x1ce>
 8008884:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008888:	f200 808e 	bhi.w	80089a8 <HAL_TIM_ConfigClockSource+0x1e0>
 800888c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008890:	d03e      	beq.n	8008910 <HAL_TIM_ConfigClockSource+0x148>
 8008892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008896:	f200 8087 	bhi.w	80089a8 <HAL_TIM_ConfigClockSource+0x1e0>
 800889a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800889e:	f000 8086 	beq.w	80089ae <HAL_TIM_ConfigClockSource+0x1e6>
 80088a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088a6:	d87f      	bhi.n	80089a8 <HAL_TIM_ConfigClockSource+0x1e0>
 80088a8:	2b70      	cmp	r3, #112	; 0x70
 80088aa:	d01a      	beq.n	80088e2 <HAL_TIM_ConfigClockSource+0x11a>
 80088ac:	2b70      	cmp	r3, #112	; 0x70
 80088ae:	d87b      	bhi.n	80089a8 <HAL_TIM_ConfigClockSource+0x1e0>
 80088b0:	2b60      	cmp	r3, #96	; 0x60
 80088b2:	d050      	beq.n	8008956 <HAL_TIM_ConfigClockSource+0x18e>
 80088b4:	2b60      	cmp	r3, #96	; 0x60
 80088b6:	d877      	bhi.n	80089a8 <HAL_TIM_ConfigClockSource+0x1e0>
 80088b8:	2b50      	cmp	r3, #80	; 0x50
 80088ba:	d03c      	beq.n	8008936 <HAL_TIM_ConfigClockSource+0x16e>
 80088bc:	2b50      	cmp	r3, #80	; 0x50
 80088be:	d873      	bhi.n	80089a8 <HAL_TIM_ConfigClockSource+0x1e0>
 80088c0:	2b40      	cmp	r3, #64	; 0x40
 80088c2:	d058      	beq.n	8008976 <HAL_TIM_ConfigClockSource+0x1ae>
 80088c4:	2b40      	cmp	r3, #64	; 0x40
 80088c6:	d86f      	bhi.n	80089a8 <HAL_TIM_ConfigClockSource+0x1e0>
 80088c8:	2b30      	cmp	r3, #48	; 0x30
 80088ca:	d064      	beq.n	8008996 <HAL_TIM_ConfigClockSource+0x1ce>
 80088cc:	2b30      	cmp	r3, #48	; 0x30
 80088ce:	d86b      	bhi.n	80089a8 <HAL_TIM_ConfigClockSource+0x1e0>
 80088d0:	2b20      	cmp	r3, #32
 80088d2:	d060      	beq.n	8008996 <HAL_TIM_ConfigClockSource+0x1ce>
 80088d4:	2b20      	cmp	r3, #32
 80088d6:	d867      	bhi.n	80089a8 <HAL_TIM_ConfigClockSource+0x1e0>
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d05c      	beq.n	8008996 <HAL_TIM_ConfigClockSource+0x1ce>
 80088dc:	2b10      	cmp	r3, #16
 80088de:	d05a      	beq.n	8008996 <HAL_TIM_ConfigClockSource+0x1ce>
 80088e0:	e062      	b.n	80089a8 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6818      	ldr	r0, [r3, #0]
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	6899      	ldr	r1, [r3, #8]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	685a      	ldr	r2, [r3, #4]
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	f000 fcc3 	bl	800927c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008904:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	68ba      	ldr	r2, [r7, #8]
 800890c:	609a      	str	r2, [r3, #8]
      break;
 800890e:	e04f      	b.n	80089b0 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6818      	ldr	r0, [r3, #0]
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	6899      	ldr	r1, [r3, #8]
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	685a      	ldr	r2, [r3, #4]
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	f000 fcac 	bl	800927c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	689a      	ldr	r2, [r3, #8]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008932:	609a      	str	r2, [r3, #8]
      break;
 8008934:	e03c      	b.n	80089b0 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6818      	ldr	r0, [r3, #0]
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	6859      	ldr	r1, [r3, #4]
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	461a      	mov	r2, r3
 8008944:	f000 fc1e 	bl	8009184 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2150      	movs	r1, #80	; 0x50
 800894e:	4618      	mov	r0, r3
 8008950:	f000 fc77 	bl	8009242 <TIM_ITRx_SetConfig>
      break;
 8008954:	e02c      	b.n	80089b0 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6818      	ldr	r0, [r3, #0]
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	6859      	ldr	r1, [r3, #4]
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	461a      	mov	r2, r3
 8008964:	f000 fc3d 	bl	80091e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2160      	movs	r1, #96	; 0x60
 800896e:	4618      	mov	r0, r3
 8008970:	f000 fc67 	bl	8009242 <TIM_ITRx_SetConfig>
      break;
 8008974:	e01c      	b.n	80089b0 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6818      	ldr	r0, [r3, #0]
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	6859      	ldr	r1, [r3, #4]
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	461a      	mov	r2, r3
 8008984:	f000 fbfe 	bl	8009184 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2140      	movs	r1, #64	; 0x40
 800898e:	4618      	mov	r0, r3
 8008990:	f000 fc57 	bl	8009242 <TIM_ITRx_SetConfig>
      break;
 8008994:	e00c      	b.n	80089b0 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4619      	mov	r1, r3
 80089a0:	4610      	mov	r0, r2
 80089a2:	f000 fc4e 	bl	8009242 <TIM_ITRx_SetConfig>
      break;
 80089a6:	e003      	b.n	80089b0 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	73fb      	strb	r3, [r7, #15]
      break;
 80089ac:	e000      	b.n	80089b0 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 80089ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80089c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	00100070 	.word	0x00100070
 80089d0:	00100050 	.word	0x00100050
 80089d4:	00100040 	.word	0x00100040
 80089d8:	00100030 	.word	0x00100030
 80089dc:	00100020 	.word	0x00100020

080089e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a46      	ldr	r2, [pc, #280]	; (8008b0c <TIM_Base_SetConfig+0x12c>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d017      	beq.n	8008a28 <TIM_Base_SetConfig+0x48>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089fe:	d013      	beq.n	8008a28 <TIM_Base_SetConfig+0x48>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a43      	ldr	r2, [pc, #268]	; (8008b10 <TIM_Base_SetConfig+0x130>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d00f      	beq.n	8008a28 <TIM_Base_SetConfig+0x48>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a42      	ldr	r2, [pc, #264]	; (8008b14 <TIM_Base_SetConfig+0x134>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d00b      	beq.n	8008a28 <TIM_Base_SetConfig+0x48>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4a41      	ldr	r2, [pc, #260]	; (8008b18 <TIM_Base_SetConfig+0x138>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d007      	beq.n	8008a28 <TIM_Base_SetConfig+0x48>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	4a40      	ldr	r2, [pc, #256]	; (8008b1c <TIM_Base_SetConfig+0x13c>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d003      	beq.n	8008a28 <TIM_Base_SetConfig+0x48>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	4a3f      	ldr	r2, [pc, #252]	; (8008b20 <TIM_Base_SetConfig+0x140>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d108      	bne.n	8008a3a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	68fa      	ldr	r2, [r7, #12]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a33      	ldr	r2, [pc, #204]	; (8008b0c <TIM_Base_SetConfig+0x12c>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d023      	beq.n	8008a8a <TIM_Base_SetConfig+0xaa>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a48:	d01f      	beq.n	8008a8a <TIM_Base_SetConfig+0xaa>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4a30      	ldr	r2, [pc, #192]	; (8008b10 <TIM_Base_SetConfig+0x130>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d01b      	beq.n	8008a8a <TIM_Base_SetConfig+0xaa>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4a2f      	ldr	r2, [pc, #188]	; (8008b14 <TIM_Base_SetConfig+0x134>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d017      	beq.n	8008a8a <TIM_Base_SetConfig+0xaa>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4a2e      	ldr	r2, [pc, #184]	; (8008b18 <TIM_Base_SetConfig+0x138>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d013      	beq.n	8008a8a <TIM_Base_SetConfig+0xaa>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4a2d      	ldr	r2, [pc, #180]	; (8008b1c <TIM_Base_SetConfig+0x13c>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d00f      	beq.n	8008a8a <TIM_Base_SetConfig+0xaa>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4a2d      	ldr	r2, [pc, #180]	; (8008b24 <TIM_Base_SetConfig+0x144>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d00b      	beq.n	8008a8a <TIM_Base_SetConfig+0xaa>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4a2c      	ldr	r2, [pc, #176]	; (8008b28 <TIM_Base_SetConfig+0x148>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d007      	beq.n	8008a8a <TIM_Base_SetConfig+0xaa>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4a2b      	ldr	r2, [pc, #172]	; (8008b2c <TIM_Base_SetConfig+0x14c>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d003      	beq.n	8008a8a <TIM_Base_SetConfig+0xaa>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	4a26      	ldr	r2, [pc, #152]	; (8008b20 <TIM_Base_SetConfig+0x140>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d108      	bne.n	8008a9c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	695b      	ldr	r3, [r3, #20]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	68fa      	ldr	r2, [r7, #12]
 8008aae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	689a      	ldr	r2, [r3, #8]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4a12      	ldr	r2, [pc, #72]	; (8008b0c <TIM_Base_SetConfig+0x12c>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d013      	beq.n	8008af0 <TIM_Base_SetConfig+0x110>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a14      	ldr	r2, [pc, #80]	; (8008b1c <TIM_Base_SetConfig+0x13c>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d00f      	beq.n	8008af0 <TIM_Base_SetConfig+0x110>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a14      	ldr	r2, [pc, #80]	; (8008b24 <TIM_Base_SetConfig+0x144>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d00b      	beq.n	8008af0 <TIM_Base_SetConfig+0x110>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a13      	ldr	r2, [pc, #76]	; (8008b28 <TIM_Base_SetConfig+0x148>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d007      	beq.n	8008af0 <TIM_Base_SetConfig+0x110>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	4a12      	ldr	r2, [pc, #72]	; (8008b2c <TIM_Base_SetConfig+0x14c>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d003      	beq.n	8008af0 <TIM_Base_SetConfig+0x110>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	4a0d      	ldr	r2, [pc, #52]	; (8008b20 <TIM_Base_SetConfig+0x140>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d103      	bne.n	8008af8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	691a      	ldr	r2, [r3, #16]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	615a      	str	r2, [r3, #20]
}
 8008afe:	bf00      	nop
 8008b00:	3714      	adds	r7, #20
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	40012c00 	.word	0x40012c00
 8008b10:	40000400 	.word	0x40000400
 8008b14:	40000800 	.word	0x40000800
 8008b18:	40000c00 	.word	0x40000c00
 8008b1c:	40013400 	.word	0x40013400
 8008b20:	40015000 	.word	0x40015000
 8008b24:	40014000 	.word	0x40014000
 8008b28:	40014400 	.word	0x40014400
 8008b2c:	40014800 	.word	0x40014800

08008b30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b087      	sub	sp, #28
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a1b      	ldr	r3, [r3, #32]
 8008b3e:	f023 0201 	bic.w	r2, r3, #1
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6a1b      	ldr	r3, [r3, #32]
 8008b4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	699b      	ldr	r3, [r3, #24]
 8008b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f023 0303 	bic.w	r3, r3, #3
 8008b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	68fa      	ldr	r2, [r7, #12]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	f023 0302 	bic.w	r3, r3, #2
 8008b7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	697a      	ldr	r2, [r7, #20]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a30      	ldr	r2, [pc, #192]	; (8008c4c <TIM_OC1_SetConfig+0x11c>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d013      	beq.n	8008bb8 <TIM_OC1_SetConfig+0x88>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a2f      	ldr	r2, [pc, #188]	; (8008c50 <TIM_OC1_SetConfig+0x120>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d00f      	beq.n	8008bb8 <TIM_OC1_SetConfig+0x88>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a2e      	ldr	r2, [pc, #184]	; (8008c54 <TIM_OC1_SetConfig+0x124>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d00b      	beq.n	8008bb8 <TIM_OC1_SetConfig+0x88>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4a2d      	ldr	r2, [pc, #180]	; (8008c58 <TIM_OC1_SetConfig+0x128>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d007      	beq.n	8008bb8 <TIM_OC1_SetConfig+0x88>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	4a2c      	ldr	r2, [pc, #176]	; (8008c5c <TIM_OC1_SetConfig+0x12c>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d003      	beq.n	8008bb8 <TIM_OC1_SetConfig+0x88>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4a2b      	ldr	r2, [pc, #172]	; (8008c60 <TIM_OC1_SetConfig+0x130>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d10c      	bne.n	8008bd2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	f023 0308 	bic.w	r3, r3, #8
 8008bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	697a      	ldr	r2, [r7, #20]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	f023 0304 	bic.w	r3, r3, #4
 8008bd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a1d      	ldr	r2, [pc, #116]	; (8008c4c <TIM_OC1_SetConfig+0x11c>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d013      	beq.n	8008c02 <TIM_OC1_SetConfig+0xd2>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a1c      	ldr	r2, [pc, #112]	; (8008c50 <TIM_OC1_SetConfig+0x120>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d00f      	beq.n	8008c02 <TIM_OC1_SetConfig+0xd2>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a1b      	ldr	r2, [pc, #108]	; (8008c54 <TIM_OC1_SetConfig+0x124>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d00b      	beq.n	8008c02 <TIM_OC1_SetConfig+0xd2>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a1a      	ldr	r2, [pc, #104]	; (8008c58 <TIM_OC1_SetConfig+0x128>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d007      	beq.n	8008c02 <TIM_OC1_SetConfig+0xd2>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a19      	ldr	r2, [pc, #100]	; (8008c5c <TIM_OC1_SetConfig+0x12c>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d003      	beq.n	8008c02 <TIM_OC1_SetConfig+0xd2>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a18      	ldr	r2, [pc, #96]	; (8008c60 <TIM_OC1_SetConfig+0x130>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d111      	bne.n	8008c26 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	695b      	ldr	r3, [r3, #20]
 8008c16:	693a      	ldr	r2, [r7, #16]
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	699b      	ldr	r3, [r3, #24]
 8008c20:	693a      	ldr	r2, [r7, #16]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	693a      	ldr	r2, [r7, #16]
 8008c2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	68fa      	ldr	r2, [r7, #12]
 8008c30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	685a      	ldr	r2, [r3, #4]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	697a      	ldr	r2, [r7, #20]
 8008c3e:	621a      	str	r2, [r3, #32]
}
 8008c40:	bf00      	nop
 8008c42:	371c      	adds	r7, #28
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr
 8008c4c:	40012c00 	.word	0x40012c00
 8008c50:	40013400 	.word	0x40013400
 8008c54:	40014000 	.word	0x40014000
 8008c58:	40014400 	.word	0x40014400
 8008c5c:	40014800 	.word	0x40014800
 8008c60:	40015000 	.word	0x40015000

08008c64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b087      	sub	sp, #28
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a1b      	ldr	r3, [r3, #32]
 8008c72:	f023 0210 	bic.w	r2, r3, #16
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a1b      	ldr	r3, [r3, #32]
 8008c7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	699b      	ldr	r3, [r3, #24]
 8008c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	021b      	lsls	r3, r3, #8
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	f023 0320 	bic.w	r3, r3, #32
 8008cb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	689b      	ldr	r3, [r3, #8]
 8008cb8:	011b      	lsls	r3, r3, #4
 8008cba:	697a      	ldr	r2, [r7, #20]
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4a2c      	ldr	r2, [pc, #176]	; (8008d74 <TIM_OC2_SetConfig+0x110>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d007      	beq.n	8008cd8 <TIM_OC2_SetConfig+0x74>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	4a2b      	ldr	r2, [pc, #172]	; (8008d78 <TIM_OC2_SetConfig+0x114>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d003      	beq.n	8008cd8 <TIM_OC2_SetConfig+0x74>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4a2a      	ldr	r2, [pc, #168]	; (8008d7c <TIM_OC2_SetConfig+0x118>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d10d      	bne.n	8008cf4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	011b      	lsls	r3, r3, #4
 8008ce6:	697a      	ldr	r2, [r7, #20]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cf2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a1f      	ldr	r2, [pc, #124]	; (8008d74 <TIM_OC2_SetConfig+0x110>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d013      	beq.n	8008d24 <TIM_OC2_SetConfig+0xc0>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a1e      	ldr	r2, [pc, #120]	; (8008d78 <TIM_OC2_SetConfig+0x114>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d00f      	beq.n	8008d24 <TIM_OC2_SetConfig+0xc0>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a1e      	ldr	r2, [pc, #120]	; (8008d80 <TIM_OC2_SetConfig+0x11c>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d00b      	beq.n	8008d24 <TIM_OC2_SetConfig+0xc0>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a1d      	ldr	r2, [pc, #116]	; (8008d84 <TIM_OC2_SetConfig+0x120>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d007      	beq.n	8008d24 <TIM_OC2_SetConfig+0xc0>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a1c      	ldr	r2, [pc, #112]	; (8008d88 <TIM_OC2_SetConfig+0x124>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d003      	beq.n	8008d24 <TIM_OC2_SetConfig+0xc0>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a17      	ldr	r2, [pc, #92]	; (8008d7c <TIM_OC2_SetConfig+0x118>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d113      	bne.n	8008d4c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	695b      	ldr	r3, [r3, #20]
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	693a      	ldr	r2, [r7, #16]
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	699b      	ldr	r3, [r3, #24]
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	693a      	ldr	r2, [r7, #16]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	685a      	ldr	r2, [r3, #4]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	697a      	ldr	r2, [r7, #20]
 8008d64:	621a      	str	r2, [r3, #32]
}
 8008d66:	bf00      	nop
 8008d68:	371c      	adds	r7, #28
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	40012c00 	.word	0x40012c00
 8008d78:	40013400 	.word	0x40013400
 8008d7c:	40015000 	.word	0x40015000
 8008d80:	40014000 	.word	0x40014000
 8008d84:	40014400 	.word	0x40014400
 8008d88:	40014800 	.word	0x40014800

08008d8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b087      	sub	sp, #28
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a1b      	ldr	r3, [r3, #32]
 8008d9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a1b      	ldr	r3, [r3, #32]
 8008da6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	69db      	ldr	r3, [r3, #28]
 8008db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f023 0303 	bic.w	r3, r3, #3
 8008dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008dd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	021b      	lsls	r3, r3, #8
 8008de0:	697a      	ldr	r2, [r7, #20]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a2b      	ldr	r2, [pc, #172]	; (8008e98 <TIM_OC3_SetConfig+0x10c>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d007      	beq.n	8008dfe <TIM_OC3_SetConfig+0x72>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a2a      	ldr	r2, [pc, #168]	; (8008e9c <TIM_OC3_SetConfig+0x110>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d003      	beq.n	8008dfe <TIM_OC3_SetConfig+0x72>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4a29      	ldr	r2, [pc, #164]	; (8008ea0 <TIM_OC3_SetConfig+0x114>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d10d      	bne.n	8008e1a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	021b      	lsls	r3, r3, #8
 8008e0c:	697a      	ldr	r2, [r7, #20]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a1e      	ldr	r2, [pc, #120]	; (8008e98 <TIM_OC3_SetConfig+0x10c>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d013      	beq.n	8008e4a <TIM_OC3_SetConfig+0xbe>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a1d      	ldr	r2, [pc, #116]	; (8008e9c <TIM_OC3_SetConfig+0x110>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d00f      	beq.n	8008e4a <TIM_OC3_SetConfig+0xbe>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4a1d      	ldr	r2, [pc, #116]	; (8008ea4 <TIM_OC3_SetConfig+0x118>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d00b      	beq.n	8008e4a <TIM_OC3_SetConfig+0xbe>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4a1c      	ldr	r2, [pc, #112]	; (8008ea8 <TIM_OC3_SetConfig+0x11c>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d007      	beq.n	8008e4a <TIM_OC3_SetConfig+0xbe>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a1b      	ldr	r2, [pc, #108]	; (8008eac <TIM_OC3_SetConfig+0x120>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d003      	beq.n	8008e4a <TIM_OC3_SetConfig+0xbe>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a16      	ldr	r2, [pc, #88]	; (8008ea0 <TIM_OC3_SetConfig+0x114>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d113      	bne.n	8008e72 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	695b      	ldr	r3, [r3, #20]
 8008e5e:	011b      	lsls	r3, r3, #4
 8008e60:	693a      	ldr	r2, [r7, #16]
 8008e62:	4313      	orrs	r3, r2
 8008e64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	699b      	ldr	r3, [r3, #24]
 8008e6a:	011b      	lsls	r3, r3, #4
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	68fa      	ldr	r2, [r7, #12]
 8008e7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	685a      	ldr	r2, [r3, #4]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	697a      	ldr	r2, [r7, #20]
 8008e8a:	621a      	str	r2, [r3, #32]
}
 8008e8c:	bf00      	nop
 8008e8e:	371c      	adds	r7, #28
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr
 8008e98:	40012c00 	.word	0x40012c00
 8008e9c:	40013400 	.word	0x40013400
 8008ea0:	40015000 	.word	0x40015000
 8008ea4:	40014000 	.word	0x40014000
 8008ea8:	40014400 	.word	0x40014400
 8008eac:	40014800 	.word	0x40014800

08008eb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b087      	sub	sp, #28
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a1b      	ldr	r3, [r3, #32]
 8008ebe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a1b      	ldr	r3, [r3, #32]
 8008eca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	69db      	ldr	r3, [r3, #28]
 8008ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	021b      	lsls	r3, r3, #8
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008efe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	031b      	lsls	r3, r3, #12
 8008f06:	697a      	ldr	r2, [r7, #20]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a2c      	ldr	r2, [pc, #176]	; (8008fc0 <TIM_OC4_SetConfig+0x110>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d007      	beq.n	8008f24 <TIM_OC4_SetConfig+0x74>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4a2b      	ldr	r2, [pc, #172]	; (8008fc4 <TIM_OC4_SetConfig+0x114>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d003      	beq.n	8008f24 <TIM_OC4_SetConfig+0x74>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4a2a      	ldr	r2, [pc, #168]	; (8008fc8 <TIM_OC4_SetConfig+0x118>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d10d      	bne.n	8008f40 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	031b      	lsls	r3, r3, #12
 8008f32:	697a      	ldr	r2, [r7, #20]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4a1f      	ldr	r2, [pc, #124]	; (8008fc0 <TIM_OC4_SetConfig+0x110>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d013      	beq.n	8008f70 <TIM_OC4_SetConfig+0xc0>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4a1e      	ldr	r2, [pc, #120]	; (8008fc4 <TIM_OC4_SetConfig+0x114>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d00f      	beq.n	8008f70 <TIM_OC4_SetConfig+0xc0>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4a1e      	ldr	r2, [pc, #120]	; (8008fcc <TIM_OC4_SetConfig+0x11c>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d00b      	beq.n	8008f70 <TIM_OC4_SetConfig+0xc0>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4a1d      	ldr	r2, [pc, #116]	; (8008fd0 <TIM_OC4_SetConfig+0x120>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d007      	beq.n	8008f70 <TIM_OC4_SetConfig+0xc0>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	4a1c      	ldr	r2, [pc, #112]	; (8008fd4 <TIM_OC4_SetConfig+0x124>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d003      	beq.n	8008f70 <TIM_OC4_SetConfig+0xc0>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4a17      	ldr	r2, [pc, #92]	; (8008fc8 <TIM_OC4_SetConfig+0x118>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d113      	bne.n	8008f98 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f76:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f7e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	695b      	ldr	r3, [r3, #20]
 8008f84:	019b      	lsls	r3, r3, #6
 8008f86:	693a      	ldr	r2, [r7, #16]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	699b      	ldr	r3, [r3, #24]
 8008f90:	019b      	lsls	r3, r3, #6
 8008f92:	693a      	ldr	r2, [r7, #16]
 8008f94:	4313      	orrs	r3, r2
 8008f96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	693a      	ldr	r2, [r7, #16]
 8008f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	68fa      	ldr	r2, [r7, #12]
 8008fa2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	685a      	ldr	r2, [r3, #4]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	697a      	ldr	r2, [r7, #20]
 8008fb0:	621a      	str	r2, [r3, #32]
}
 8008fb2:	bf00      	nop
 8008fb4:	371c      	adds	r7, #28
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	40012c00 	.word	0x40012c00
 8008fc4:	40013400 	.word	0x40013400
 8008fc8:	40015000 	.word	0x40015000
 8008fcc:	40014000 	.word	0x40014000
 8008fd0:	40014400 	.word	0x40014400
 8008fd4:	40014800 	.word	0x40014800

08008fd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b087      	sub	sp, #28
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a1b      	ldr	r3, [r3, #32]
 8008fe6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a1b      	ldr	r3, [r3, #32]
 8008ff2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800900a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	4313      	orrs	r3, r2
 8009014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800901c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	041b      	lsls	r3, r3, #16
 8009024:	693a      	ldr	r2, [r7, #16]
 8009026:	4313      	orrs	r3, r2
 8009028:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a19      	ldr	r2, [pc, #100]	; (8009094 <TIM_OC5_SetConfig+0xbc>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d013      	beq.n	800905a <TIM_OC5_SetConfig+0x82>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a18      	ldr	r2, [pc, #96]	; (8009098 <TIM_OC5_SetConfig+0xc0>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d00f      	beq.n	800905a <TIM_OC5_SetConfig+0x82>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a17      	ldr	r2, [pc, #92]	; (800909c <TIM_OC5_SetConfig+0xc4>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d00b      	beq.n	800905a <TIM_OC5_SetConfig+0x82>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a16      	ldr	r2, [pc, #88]	; (80090a0 <TIM_OC5_SetConfig+0xc8>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d007      	beq.n	800905a <TIM_OC5_SetConfig+0x82>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4a15      	ldr	r2, [pc, #84]	; (80090a4 <TIM_OC5_SetConfig+0xcc>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d003      	beq.n	800905a <TIM_OC5_SetConfig+0x82>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4a14      	ldr	r2, [pc, #80]	; (80090a8 <TIM_OC5_SetConfig+0xd0>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d109      	bne.n	800906e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009060:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	695b      	ldr	r3, [r3, #20]
 8009066:	021b      	lsls	r3, r3, #8
 8009068:	697a      	ldr	r2, [r7, #20]
 800906a:	4313      	orrs	r3, r2
 800906c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	697a      	ldr	r2, [r7, #20]
 8009072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	68fa      	ldr	r2, [r7, #12]
 8009078:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	685a      	ldr	r2, [r3, #4]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	693a      	ldr	r2, [r7, #16]
 8009086:	621a      	str	r2, [r3, #32]
}
 8009088:	bf00      	nop
 800908a:	371c      	adds	r7, #28
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr
 8009094:	40012c00 	.word	0x40012c00
 8009098:	40013400 	.word	0x40013400
 800909c:	40014000 	.word	0x40014000
 80090a0:	40014400 	.word	0x40014400
 80090a4:	40014800 	.word	0x40014800
 80090a8:	40015000 	.word	0x40015000

080090ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b087      	sub	sp, #28
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a1b      	ldr	r3, [r3, #32]
 80090ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a1b      	ldr	r3, [r3, #32]
 80090c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80090da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	021b      	lsls	r3, r3, #8
 80090e6:	68fa      	ldr	r2, [r7, #12]
 80090e8:	4313      	orrs	r3, r2
 80090ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80090f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	051b      	lsls	r3, r3, #20
 80090fa:	693a      	ldr	r2, [r7, #16]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4a1a      	ldr	r2, [pc, #104]	; (800916c <TIM_OC6_SetConfig+0xc0>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d013      	beq.n	8009130 <TIM_OC6_SetConfig+0x84>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4a19      	ldr	r2, [pc, #100]	; (8009170 <TIM_OC6_SetConfig+0xc4>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d00f      	beq.n	8009130 <TIM_OC6_SetConfig+0x84>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4a18      	ldr	r2, [pc, #96]	; (8009174 <TIM_OC6_SetConfig+0xc8>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d00b      	beq.n	8009130 <TIM_OC6_SetConfig+0x84>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a17      	ldr	r2, [pc, #92]	; (8009178 <TIM_OC6_SetConfig+0xcc>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d007      	beq.n	8009130 <TIM_OC6_SetConfig+0x84>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a16      	ldr	r2, [pc, #88]	; (800917c <TIM_OC6_SetConfig+0xd0>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d003      	beq.n	8009130 <TIM_OC6_SetConfig+0x84>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4a15      	ldr	r2, [pc, #84]	; (8009180 <TIM_OC6_SetConfig+0xd4>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d109      	bne.n	8009144 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009136:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	695b      	ldr	r3, [r3, #20]
 800913c:	029b      	lsls	r3, r3, #10
 800913e:	697a      	ldr	r2, [r7, #20]
 8009140:	4313      	orrs	r3, r2
 8009142:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	697a      	ldr	r2, [r7, #20]
 8009148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	685a      	ldr	r2, [r3, #4]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	693a      	ldr	r2, [r7, #16]
 800915c:	621a      	str	r2, [r3, #32]
}
 800915e:	bf00      	nop
 8009160:	371c      	adds	r7, #28
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr
 800916a:	bf00      	nop
 800916c:	40012c00 	.word	0x40012c00
 8009170:	40013400 	.word	0x40013400
 8009174:	40014000 	.word	0x40014000
 8009178:	40014400 	.word	0x40014400
 800917c:	40014800 	.word	0x40014800
 8009180:	40015000 	.word	0x40015000

08009184 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009184:	b480      	push	{r7}
 8009186:	b087      	sub	sp, #28
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6a1b      	ldr	r3, [r3, #32]
 8009194:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	6a1b      	ldr	r3, [r3, #32]
 800919a:	f023 0201 	bic.w	r2, r3, #1
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	699b      	ldr	r3, [r3, #24]
 80091a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	011b      	lsls	r3, r3, #4
 80091b4:	693a      	ldr	r2, [r7, #16]
 80091b6:	4313      	orrs	r3, r2
 80091b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	f023 030a 	bic.w	r3, r3, #10
 80091c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80091c2:	697a      	ldr	r2, [r7, #20]
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	4313      	orrs	r3, r2
 80091c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	693a      	ldr	r2, [r7, #16]
 80091ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	697a      	ldr	r2, [r7, #20]
 80091d4:	621a      	str	r2, [r3, #32]
}
 80091d6:	bf00      	nop
 80091d8:	371c      	adds	r7, #28
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr

080091e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091e2:	b480      	push	{r7}
 80091e4:	b087      	sub	sp, #28
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	60f8      	str	r0, [r7, #12]
 80091ea:	60b9      	str	r1, [r7, #8]
 80091ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6a1b      	ldr	r3, [r3, #32]
 80091f2:	f023 0210 	bic.w	r2, r3, #16
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	699b      	ldr	r3, [r3, #24]
 80091fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	6a1b      	ldr	r3, [r3, #32]
 8009204:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800920c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	031b      	lsls	r3, r3, #12
 8009212:	697a      	ldr	r2, [r7, #20]
 8009214:	4313      	orrs	r3, r2
 8009216:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800921e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	011b      	lsls	r3, r3, #4
 8009224:	693a      	ldr	r2, [r7, #16]
 8009226:	4313      	orrs	r3, r2
 8009228:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	697a      	ldr	r2, [r7, #20]
 800922e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	693a      	ldr	r2, [r7, #16]
 8009234:	621a      	str	r2, [r3, #32]
}
 8009236:	bf00      	nop
 8009238:	371c      	adds	r7, #28
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr

08009242 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009242:	b480      	push	{r7}
 8009244:	b085      	sub	sp, #20
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
 800924a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800925c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800925e:	683a      	ldr	r2, [r7, #0]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	4313      	orrs	r3, r2
 8009264:	f043 0307 	orr.w	r3, r3, #7
 8009268:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	609a      	str	r2, [r3, #8]
}
 8009270:	bf00      	nop
 8009272:	3714      	adds	r7, #20
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800927c:	b480      	push	{r7}
 800927e:	b087      	sub	sp, #28
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	607a      	str	r2, [r7, #4]
 8009288:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009296:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	021a      	lsls	r2, r3, #8
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	431a      	orrs	r2, r3
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	4313      	orrs	r3, r2
 80092a4:	697a      	ldr	r2, [r7, #20]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	697a      	ldr	r2, [r7, #20]
 80092ae:	609a      	str	r2, [r3, #8]
}
 80092b0:	bf00      	nop
 80092b2:	371c      	adds	r7, #28
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80092bc:	b480      	push	{r7}
 80092be:	b087      	sub	sp, #28
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	f003 031f 	and.w	r3, r3, #31
 80092ce:	2201      	movs	r2, #1
 80092d0:	fa02 f303 	lsl.w	r3, r2, r3
 80092d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6a1a      	ldr	r2, [r3, #32]
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	43db      	mvns	r3, r3
 80092de:	401a      	ands	r2, r3
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6a1a      	ldr	r2, [r3, #32]
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	f003 031f 	and.w	r3, r3, #31
 80092ee:	6879      	ldr	r1, [r7, #4]
 80092f0:	fa01 f303 	lsl.w	r3, r1, r3
 80092f4:	431a      	orrs	r2, r3
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	621a      	str	r2, [r3, #32]
}
 80092fa:	bf00      	nop
 80092fc:	371c      	adds	r7, #28
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr
	...

08009308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009308:	b480      	push	{r7}
 800930a:	b085      	sub	sp, #20
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009318:	2b01      	cmp	r3, #1
 800931a:	d101      	bne.n	8009320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800931c:	2302      	movs	r3, #2
 800931e:	e074      	b.n	800940a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2202      	movs	r2, #2
 800932c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a34      	ldr	r2, [pc, #208]	; (8009418 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d009      	beq.n	800935e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a33      	ldr	r2, [pc, #204]	; (800941c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d004      	beq.n	800935e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a31      	ldr	r2, [pc, #196]	; (8009420 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d108      	bne.n	8009370 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009364:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	68fa      	ldr	r2, [r7, #12]
 800936c:	4313      	orrs	r3, r2
 800936e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800937a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68fa      	ldr	r2, [r7, #12]
 8009382:	4313      	orrs	r3, r2
 8009384:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	68fa      	ldr	r2, [r7, #12]
 800938c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4a21      	ldr	r2, [pc, #132]	; (8009418 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d022      	beq.n	80093de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093a0:	d01d      	beq.n	80093de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a1f      	ldr	r2, [pc, #124]	; (8009424 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d018      	beq.n	80093de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a1d      	ldr	r2, [pc, #116]	; (8009428 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d013      	beq.n	80093de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a1c      	ldr	r2, [pc, #112]	; (800942c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d00e      	beq.n	80093de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a15      	ldr	r2, [pc, #84]	; (800941c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d009      	beq.n	80093de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a18      	ldr	r2, [pc, #96]	; (8009430 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d004      	beq.n	80093de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a11      	ldr	r2, [pc, #68]	; (8009420 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d10c      	bne.n	80093f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	68ba      	ldr	r2, [r7, #8]
 80093ec:	4313      	orrs	r3, r2
 80093ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	68ba      	ldr	r2, [r7, #8]
 80093f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3714      	adds	r7, #20
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr
 8009416:	bf00      	nop
 8009418:	40012c00 	.word	0x40012c00
 800941c:	40013400 	.word	0x40013400
 8009420:	40015000 	.word	0x40015000
 8009424:	40000400 	.word	0x40000400
 8009428:	40000800 	.word	0x40000800
 800942c:	40000c00 	.word	0x40000c00
 8009430:	40014000 	.word	0x40014000

08009434 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800943e:	2300      	movs	r3, #0
 8009440:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009448:	2b01      	cmp	r3, #1
 800944a:	d101      	bne.n	8009450 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800944c:	2302      	movs	r3, #2
 800944e:	e096      	b.n	800957e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2201      	movs	r2, #1
 8009454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	4313      	orrs	r3, r2
 8009464:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	4313      	orrs	r3, r2
 8009472:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	4313      	orrs	r3, r2
 8009480:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4313      	orrs	r3, r2
 800948e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	691b      	ldr	r3, [r3, #16]
 800949a:	4313      	orrs	r3, r2
 800949c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	695b      	ldr	r3, [r3, #20]
 80094a8:	4313      	orrs	r3, r2
 80094aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b6:	4313      	orrs	r3, r2
 80094b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	699b      	ldr	r3, [r3, #24]
 80094c4:	041b      	lsls	r3, r3, #16
 80094c6:	4313      	orrs	r3, r2
 80094c8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a2f      	ldr	r2, [pc, #188]	; (800958c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d009      	beq.n	80094e8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a2d      	ldr	r2, [pc, #180]	; (8009590 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d004      	beq.n	80094e8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a2c      	ldr	r2, [pc, #176]	; (8009594 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d106      	bne.n	80094f6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	69db      	ldr	r3, [r3, #28]
 80094f2:	4313      	orrs	r3, r2
 80094f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a24      	ldr	r2, [pc, #144]	; (800958c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d009      	beq.n	8009514 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a22      	ldr	r2, [pc, #136]	; (8009590 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d004      	beq.n	8009514 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a21      	ldr	r2, [pc, #132]	; (8009594 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d12b      	bne.n	800956c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800951e:	051b      	lsls	r3, r3, #20
 8009520:	4313      	orrs	r3, r2
 8009522:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	6a1b      	ldr	r3, [r3, #32]
 800952e:	4313      	orrs	r3, r2
 8009530:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953c:	4313      	orrs	r3, r2
 800953e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a11      	ldr	r2, [pc, #68]	; (800958c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d009      	beq.n	800955e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a10      	ldr	r2, [pc, #64]	; (8009590 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d004      	beq.n	800955e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a0e      	ldr	r2, [pc, #56]	; (8009594 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d106      	bne.n	800956c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009568:	4313      	orrs	r3, r2
 800956a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68fa      	ldr	r2, [r7, #12]
 8009572:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800957c:	2300      	movs	r3, #0
}
 800957e:	4618      	mov	r0, r3
 8009580:	3714      	adds	r7, #20
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr
 800958a:	bf00      	nop
 800958c:	40012c00 	.word	0x40012c00
 8009590:	40013400 	.word	0x40013400
 8009594:	40015000 	.word	0x40015000

08009598 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80095a8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80095ac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	b29a      	uxth	r2, r3
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80095b8:	2300      	movs	r3, #0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3714      	adds	r7, #20
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr

080095c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80095c6:	b480      	push	{r7}
 80095c8:	b085      	sub	sp, #20
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80095ce:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80095d2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80095da:	b29a      	uxth	r2, r3
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	b29b      	uxth	r3, r3
 80095e0:	43db      	mvns	r3, r3
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	4013      	ands	r3, r2
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3714      	adds	r7, #20
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80095fc:	b084      	sub	sp, #16
 80095fe:	b480      	push	{r7}
 8009600:	b083      	sub	sp, #12
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
 8009606:	f107 0014 	add.w	r0, r7, #20
 800960a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2201      	movs	r2, #1
 8009612:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	b004      	add	sp, #16
 800963c:	4770      	bx	lr
	...

08009640 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009640:	b480      	push	{r7}
 8009642:	b09d      	sub	sp, #116	; 0x74
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800964a:	2300      	movs	r3, #0
 800964c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	4413      	add	r3, r2
 800965a:	881b      	ldrh	r3, [r3, #0]
 800965c:	b29b      	uxth	r3, r3
 800965e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009666:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	78db      	ldrb	r3, [r3, #3]
 800966e:	2b03      	cmp	r3, #3
 8009670:	d81f      	bhi.n	80096b2 <USB_ActivateEndpoint+0x72>
 8009672:	a201      	add	r2, pc, #4	; (adr r2, 8009678 <USB_ActivateEndpoint+0x38>)
 8009674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009678:	08009689 	.word	0x08009689
 800967c:	080096a5 	.word	0x080096a5
 8009680:	080096bb 	.word	0x080096bb
 8009684:	08009697 	.word	0x08009697
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009688:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800968c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009690:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009694:	e012      	b.n	80096bc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009696:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800969a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800969e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80096a2:	e00b      	b.n	80096bc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80096a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80096a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80096ac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80096b0:	e004      	b.n	80096bc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80096b2:	2301      	movs	r3, #1
 80096b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80096b8:	e000      	b.n	80096bc <USB_ActivateEndpoint+0x7c>
      break;
 80096ba:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	441a      	add	r2, r3
 80096c6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80096ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096da:	b29b      	uxth	r3, r3
 80096dc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	4413      	add	r3, r2
 80096e8:	881b      	ldrh	r3, [r3, #0]
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	b21b      	sxth	r3, r3
 80096ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096f6:	b21a      	sxth	r2, r3
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	b21b      	sxth	r3, r3
 80096fe:	4313      	orrs	r3, r2
 8009700:	b21b      	sxth	r3, r3
 8009702:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	441a      	add	r2, r3
 8009710:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009714:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009718:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800971c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009724:	b29b      	uxth	r3, r3
 8009726:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	7b1b      	ldrb	r3, [r3, #12]
 800972c:	2b00      	cmp	r3, #0
 800972e:	f040 8149 	bne.w	80099c4 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	785b      	ldrb	r3, [r3, #1]
 8009736:	2b00      	cmp	r3, #0
 8009738:	f000 8084 	beq.w	8009844 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	61bb      	str	r3, [r7, #24]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009746:	b29b      	uxth	r3, r3
 8009748:	461a      	mov	r2, r3
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	4413      	add	r3, r2
 800974e:	61bb      	str	r3, [r7, #24]
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	00da      	lsls	r2, r3, #3
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	4413      	add	r3, r2
 800975a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800975e:	617b      	str	r3, [r7, #20]
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	88db      	ldrh	r3, [r3, #6]
 8009764:	085b      	lsrs	r3, r3, #1
 8009766:	b29b      	uxth	r3, r3
 8009768:	005b      	lsls	r3, r3, #1
 800976a:	b29a      	uxth	r2, r3
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	4413      	add	r3, r2
 800977a:	881b      	ldrh	r3, [r3, #0]
 800977c:	827b      	strh	r3, [r7, #18]
 800977e:	8a7b      	ldrh	r3, [r7, #18]
 8009780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009784:	2b00      	cmp	r3, #0
 8009786:	d01b      	beq.n	80097c0 <USB_ActivateEndpoint+0x180>
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	4413      	add	r3, r2
 8009792:	881b      	ldrh	r3, [r3, #0]
 8009794:	b29b      	uxth	r3, r3
 8009796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800979a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800979e:	823b      	strh	r3, [r7, #16]
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	441a      	add	r2, r3
 80097aa:	8a3b      	ldrh	r3, [r7, #16]
 80097ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80097bc:	b29b      	uxth	r3, r3
 80097be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	78db      	ldrb	r3, [r3, #3]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d020      	beq.n	800980a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	4413      	add	r3, r2
 80097d2:	881b      	ldrh	r3, [r3, #0]
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097de:	81bb      	strh	r3, [r7, #12]
 80097e0:	89bb      	ldrh	r3, [r7, #12]
 80097e2:	f083 0320 	eor.w	r3, r3, #32
 80097e6:	81bb      	strh	r3, [r7, #12]
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	441a      	add	r2, r3
 80097f2:	89bb      	ldrh	r3, [r7, #12]
 80097f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009804:	b29b      	uxth	r3, r3
 8009806:	8013      	strh	r3, [r2, #0]
 8009808:	e2a6      	b.n	8009d58 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	009b      	lsls	r3, r3, #2
 8009812:	4413      	add	r3, r2
 8009814:	881b      	ldrh	r3, [r3, #0]
 8009816:	b29b      	uxth	r3, r3
 8009818:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800981c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009820:	81fb      	strh	r3, [r7, #14]
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	441a      	add	r2, r3
 800982c:	89fb      	ldrh	r3, [r7, #14]
 800982e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800983a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800983e:	b29b      	uxth	r3, r3
 8009840:	8013      	strh	r3, [r2, #0]
 8009842:	e289      	b.n	8009d58 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	633b      	str	r3, [r7, #48]	; 0x30
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800984e:	b29b      	uxth	r3, r3
 8009850:	461a      	mov	r2, r3
 8009852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009854:	4413      	add	r3, r2
 8009856:	633b      	str	r3, [r7, #48]	; 0x30
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	00da      	lsls	r2, r3, #3
 800985e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009860:	4413      	add	r3, r2
 8009862:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	88db      	ldrh	r3, [r3, #6]
 800986c:	085b      	lsrs	r3, r3, #1
 800986e:	b29b      	uxth	r3, r3
 8009870:	005b      	lsls	r3, r3, #1
 8009872:	b29a      	uxth	r2, r3
 8009874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009876:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	62bb      	str	r3, [r7, #40]	; 0x28
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009882:	b29b      	uxth	r3, r3
 8009884:	461a      	mov	r2, r3
 8009886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009888:	4413      	add	r3, r2
 800988a:	62bb      	str	r3, [r7, #40]	; 0x28
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	00da      	lsls	r2, r3, #3
 8009892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009894:	4413      	add	r3, r2
 8009896:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800989a:	627b      	str	r3, [r7, #36]	; 0x24
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	2b3e      	cmp	r3, #62	; 0x3e
 80098a2:	d918      	bls.n	80098d6 <USB_ActivateEndpoint+0x296>
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	095b      	lsrs	r3, r3, #5
 80098aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	f003 031f 	and.w	r3, r3, #31
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d102      	bne.n	80098be <USB_ActivateEndpoint+0x27e>
 80098b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098ba:	3b01      	subs	r3, #1
 80098bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80098be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	029b      	lsls	r3, r3, #10
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098ce:	b29a      	uxth	r2, r3
 80098d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d2:	801a      	strh	r2, [r3, #0]
 80098d4:	e029      	b.n	800992a <USB_ActivateEndpoint+0x2ea>
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	691b      	ldr	r3, [r3, #16]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d112      	bne.n	8009904 <USB_ActivateEndpoint+0x2c4>
 80098de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e0:	881b      	ldrh	r3, [r3, #0]
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80098e8:	b29a      	uxth	r2, r3
 80098ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ec:	801a      	strh	r2, [r3, #0]
 80098ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f0:	881b      	ldrh	r3, [r3, #0]
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098fc:	b29a      	uxth	r2, r3
 80098fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009900:	801a      	strh	r2, [r3, #0]
 8009902:	e012      	b.n	800992a <USB_ActivateEndpoint+0x2ea>
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	691b      	ldr	r3, [r3, #16]
 8009908:	085b      	lsrs	r3, r3, #1
 800990a:	66bb      	str	r3, [r7, #104]	; 0x68
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	691b      	ldr	r3, [r3, #16]
 8009910:	f003 0301 	and.w	r3, r3, #1
 8009914:	2b00      	cmp	r3, #0
 8009916:	d002      	beq.n	800991e <USB_ActivateEndpoint+0x2de>
 8009918:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800991a:	3301      	adds	r3, #1
 800991c:	66bb      	str	r3, [r7, #104]	; 0x68
 800991e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009920:	b29b      	uxth	r3, r3
 8009922:	029b      	lsls	r3, r3, #10
 8009924:	b29a      	uxth	r2, r3
 8009926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009928:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	4413      	add	r3, r2
 8009934:	881b      	ldrh	r3, [r3, #0]
 8009936:	847b      	strh	r3, [r7, #34]	; 0x22
 8009938:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800993a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800993e:	2b00      	cmp	r3, #0
 8009940:	d01b      	beq.n	800997a <USB_ActivateEndpoint+0x33a>
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	4413      	add	r3, r2
 800994c:	881b      	ldrh	r3, [r3, #0]
 800994e:	b29b      	uxth	r3, r3
 8009950:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009958:	843b      	strh	r3, [r7, #32]
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	441a      	add	r2, r3
 8009964:	8c3b      	ldrh	r3, [r7, #32]
 8009966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800996a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800996e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009976:	b29b      	uxth	r3, r3
 8009978:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	4413      	add	r3, r2
 8009984:	881b      	ldrh	r3, [r3, #0]
 8009986:	b29b      	uxth	r3, r3
 8009988:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800998c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009990:	83fb      	strh	r3, [r7, #30]
 8009992:	8bfb      	ldrh	r3, [r7, #30]
 8009994:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009998:	83fb      	strh	r3, [r7, #30]
 800999a:	8bfb      	ldrh	r3, [r7, #30]
 800999c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80099a0:	83fb      	strh	r3, [r7, #30]
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	441a      	add	r2, r3
 80099ac:	8bfb      	ldrh	r3, [r7, #30]
 80099ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099be:	b29b      	uxth	r3, r3
 80099c0:	8013      	strh	r3, [r2, #0]
 80099c2:	e1c9      	b.n	8009d58 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	78db      	ldrb	r3, [r3, #3]
 80099c8:	2b02      	cmp	r3, #2
 80099ca:	d11e      	bne.n	8009a0a <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	4413      	add	r3, r2
 80099d6:	881b      	ldrh	r3, [r3, #0]
 80099d8:	b29b      	uxth	r3, r3
 80099da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099e2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	441a      	add	r2, r3
 80099f0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80099f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099fc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	8013      	strh	r3, [r2, #0]
 8009a08:	e01d      	b.n	8009a46 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	4413      	add	r3, r2
 8009a14:	881b      	ldrh	r3, [r3, #0]
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a20:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	441a      	add	r2, r3
 8009a2e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	461a      	mov	r2, r3
 8009a54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a56:	4413      	add	r3, r2
 8009a58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	00da      	lsls	r2, r3, #3
 8009a60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a62:	4413      	add	r3, r2
 8009a64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a68:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	891b      	ldrh	r3, [r3, #8]
 8009a6e:	085b      	lsrs	r3, r3, #1
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	005b      	lsls	r3, r3, #1
 8009a74:	b29a      	uxth	r2, r3
 8009a76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a78:	801a      	strh	r2, [r3, #0]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	657b      	str	r3, [r7, #84]	; 0x54
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	461a      	mov	r2, r3
 8009a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a8a:	4413      	add	r3, r2
 8009a8c:	657b      	str	r3, [r7, #84]	; 0x54
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	00da      	lsls	r2, r3, #3
 8009a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a96:	4413      	add	r3, r2
 8009a98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009a9c:	653b      	str	r3, [r7, #80]	; 0x50
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	895b      	ldrh	r3, [r3, #10]
 8009aa2:	085b      	lsrs	r3, r3, #1
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	005b      	lsls	r3, r3, #1
 8009aa8:	b29a      	uxth	r2, r3
 8009aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009aac:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	785b      	ldrb	r3, [r3, #1]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	f040 8093 	bne.w	8009bde <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	4413      	add	r3, r2
 8009ac2:	881b      	ldrh	r3, [r3, #0]
 8009ac4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009ac8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d01b      	beq.n	8009b0c <USB_ActivateEndpoint+0x4cc>
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	4413      	add	r3, r2
 8009ade:	881b      	ldrh	r3, [r3, #0]
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aea:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	441a      	add	r2, r3
 8009af6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009af8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009afc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	4413      	add	r3, r2
 8009b16:	881b      	ldrh	r3, [r3, #0]
 8009b18:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009b1a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d01b      	beq.n	8009b5c <USB_ActivateEndpoint+0x51c>
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	4413      	add	r3, r2
 8009b2e:	881b      	ldrh	r3, [r3, #0]
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b3a:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	441a      	add	r2, r3
 8009b46:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009b48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	4413      	add	r3, r2
 8009b66:	881b      	ldrh	r3, [r3, #0]
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b72:	873b      	strh	r3, [r7, #56]	; 0x38
 8009b74:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009b76:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009b7a:	873b      	strh	r3, [r7, #56]	; 0x38
 8009b7c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009b7e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009b82:	873b      	strh	r3, [r7, #56]	; 0x38
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	441a      	add	r2, r3
 8009b8e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009b90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	4413      	add	r3, r2
 8009bae:	881b      	ldrh	r3, [r3, #0]
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bba:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	441a      	add	r2, r3
 8009bc6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	8013      	strh	r3, [r2, #0]
 8009bdc:	e0bc      	b.n	8009d58 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	4413      	add	r3, r2
 8009be8:	881b      	ldrh	r3, [r3, #0]
 8009bea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009bee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d01d      	beq.n	8009c36 <USB_ActivateEndpoint+0x5f6>
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	4413      	add	r3, r2
 8009c04:	881b      	ldrh	r3, [r3, #0]
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c10:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	441a      	add	r2, r3
 8009c1e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	4413      	add	r3, r2
 8009c40:	881b      	ldrh	r3, [r3, #0]
 8009c42:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009c46:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d01d      	beq.n	8009c8e <USB_ActivateEndpoint+0x64e>
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	4413      	add	r3, r2
 8009c5c:	881b      	ldrh	r3, [r3, #0]
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c68:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	441a      	add	r2, r3
 8009c76:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009c7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	78db      	ldrb	r3, [r3, #3]
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	d024      	beq.n	8009ce0 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	4413      	add	r3, r2
 8009ca0:	881b      	ldrh	r3, [r3, #0]
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009cb0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009cb4:	f083 0320 	eor.w	r3, r3, #32
 8009cb8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	441a      	add	r2, r3
 8009cc6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009cca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	8013      	strh	r3, [r2, #0]
 8009cde:	e01d      	b.n	8009d1c <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	4413      	add	r3, r2
 8009cea:	881b      	ldrh	r3, [r3, #0]
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cf6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009cfa:	687a      	ldr	r2, [r7, #4]
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	441a      	add	r2, r3
 8009d04:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009d08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	4413      	add	r3, r2
 8009d26:	881b      	ldrh	r3, [r3, #0]
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d32:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	441a      	add	r2, r3
 8009d40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009d58:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3774      	adds	r7, #116	; 0x74
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b08d      	sub	sp, #52	; 0x34
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	7b1b      	ldrb	r3, [r3, #12]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	f040 808e 	bne.w	8009e98 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	785b      	ldrb	r3, [r3, #1]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d044      	beq.n	8009e0e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	4413      	add	r3, r2
 8009d8e:	881b      	ldrh	r3, [r3, #0]
 8009d90:	81bb      	strh	r3, [r7, #12]
 8009d92:	89bb      	ldrh	r3, [r7, #12]
 8009d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d01b      	beq.n	8009dd4 <USB_DeactivateEndpoint+0x6c>
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	4413      	add	r3, r2
 8009da6:	881b      	ldrh	r3, [r3, #0]
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009db2:	817b      	strh	r3, [r7, #10]
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	441a      	add	r2, r3
 8009dbe:	897b      	ldrh	r3, [r7, #10]
 8009dc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dcc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	4413      	add	r3, r2
 8009dde:	881b      	ldrh	r3, [r3, #0]
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dea:	813b      	strh	r3, [r7, #8]
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	441a      	add	r2, r3
 8009df6:	893b      	ldrh	r3, [r7, #8]
 8009df8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	8013      	strh	r3, [r2, #0]
 8009e0c:	e192      	b.n	800a134 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	4413      	add	r3, r2
 8009e18:	881b      	ldrh	r3, [r3, #0]
 8009e1a:	827b      	strh	r3, [r7, #18]
 8009e1c:	8a7b      	ldrh	r3, [r7, #18]
 8009e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d01b      	beq.n	8009e5e <USB_DeactivateEndpoint+0xf6>
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	4413      	add	r3, r2
 8009e30:	881b      	ldrh	r3, [r3, #0]
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e3c:	823b      	strh	r3, [r7, #16]
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	441a      	add	r2, r3
 8009e48:	8a3b      	ldrh	r3, [r7, #16]
 8009e4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	4413      	add	r3, r2
 8009e68:	881b      	ldrh	r3, [r3, #0]
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e74:	81fb      	strh	r3, [r7, #14]
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	441a      	add	r2, r3
 8009e80:	89fb      	ldrh	r3, [r7, #14]
 8009e82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	8013      	strh	r3, [r2, #0]
 8009e96:	e14d      	b.n	800a134 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	785b      	ldrb	r3, [r3, #1]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f040 80a5 	bne.w	8009fec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	4413      	add	r3, r2
 8009eac:	881b      	ldrh	r3, [r3, #0]
 8009eae:	843b      	strh	r3, [r7, #32]
 8009eb0:	8c3b      	ldrh	r3, [r7, #32]
 8009eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d01b      	beq.n	8009ef2 <USB_DeactivateEndpoint+0x18a>
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	4413      	add	r3, r2
 8009ec4:	881b      	ldrh	r3, [r3, #0]
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ed0:	83fb      	strh	r3, [r7, #30]
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	441a      	add	r2, r3
 8009edc:	8bfb      	ldrh	r3, [r7, #30]
 8009ede:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ee2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ee6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	4413      	add	r3, r2
 8009efc:	881b      	ldrh	r3, [r3, #0]
 8009efe:	83bb      	strh	r3, [r7, #28]
 8009f00:	8bbb      	ldrh	r3, [r7, #28]
 8009f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d01b      	beq.n	8009f42 <USB_DeactivateEndpoint+0x1da>
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	4413      	add	r3, r2
 8009f14:	881b      	ldrh	r3, [r3, #0]
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f20:	837b      	strh	r3, [r7, #26]
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	441a      	add	r2, r3
 8009f2c:	8b7b      	ldrh	r3, [r7, #26]
 8009f2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f3e:	b29b      	uxth	r3, r3
 8009f40:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	009b      	lsls	r3, r3, #2
 8009f4a:	4413      	add	r3, r2
 8009f4c:	881b      	ldrh	r3, [r3, #0]
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f58:	833b      	strh	r3, [r7, #24]
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	441a      	add	r2, r3
 8009f64:	8b3b      	ldrh	r3, [r7, #24]
 8009f66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	4413      	add	r3, r2
 8009f84:	881b      	ldrh	r3, [r3, #0]
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f90:	82fb      	strh	r3, [r7, #22]
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	441a      	add	r2, r3
 8009f9c:	8afb      	ldrh	r3, [r7, #22]
 8009f9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	4413      	add	r3, r2
 8009fbc:	881b      	ldrh	r3, [r3, #0]
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fc8:	82bb      	strh	r3, [r7, #20]
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	441a      	add	r2, r3
 8009fd4:	8abb      	ldrh	r3, [r7, #20]
 8009fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	8013      	strh	r3, [r2, #0]
 8009fea:	e0a3      	b.n	800a134 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	781b      	ldrb	r3, [r3, #0]
 8009ff2:	009b      	lsls	r3, r3, #2
 8009ff4:	4413      	add	r3, r2
 8009ff6:	881b      	ldrh	r3, [r3, #0]
 8009ff8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009ffa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009ffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a000:	2b00      	cmp	r3, #0
 800a002:	d01b      	beq.n	800a03c <USB_DeactivateEndpoint+0x2d4>
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	4413      	add	r3, r2
 800a00e:	881b      	ldrh	r3, [r3, #0]
 800a010:	b29b      	uxth	r3, r3
 800a012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a01a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	009b      	lsls	r3, r3, #2
 800a024:	441a      	add	r2, r3
 800a026:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a028:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a02c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a030:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a038:	b29b      	uxth	r3, r3
 800a03a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	4413      	add	r3, r2
 800a046:	881b      	ldrh	r3, [r3, #0]
 800a048:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a04a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a04c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a050:	2b00      	cmp	r3, #0
 800a052:	d01b      	beq.n	800a08c <USB_DeactivateEndpoint+0x324>
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	4413      	add	r3, r2
 800a05e:	881b      	ldrh	r3, [r3, #0]
 800a060:	b29b      	uxth	r3, r3
 800a062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a06a:	853b      	strh	r3, [r7, #40]	; 0x28
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	441a      	add	r2, r3
 800a076:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a07c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a084:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a088:	b29b      	uxth	r3, r3
 800a08a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	4413      	add	r3, r2
 800a096:	881b      	ldrh	r3, [r3, #0]
 800a098:	b29b      	uxth	r3, r3
 800a09a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a09e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0a2:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	441a      	add	r2, r3
 800a0ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a0b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a0bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	4413      	add	r3, r2
 800a0ce:	881b      	ldrh	r3, [r3, #0]
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0da:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	441a      	add	r2, r3
 800a0e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	4413      	add	r3, r2
 800a106:	881b      	ldrh	r3, [r3, #0]
 800a108:	b29b      	uxth	r3, r3
 800a10a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a10e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a112:	847b      	strh	r3, [r7, #34]	; 0x22
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	441a      	add	r2, r3
 800a11e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a128:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a12c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a130:	b29b      	uxth	r3, r3
 800a132:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3734      	adds	r7, #52	; 0x34
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr

0800a142 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b0c2      	sub	sp, #264	; 0x108
 800a146:	af00      	add	r7, sp, #0
 800a148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a14c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a150:	6018      	str	r0, [r3, #0]
 800a152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a15a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a15c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	785b      	ldrb	r3, [r3, #1]
 800a168:	2b01      	cmp	r3, #1
 800a16a:	f040 867b 	bne.w	800ae64 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a16e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	699a      	ldr	r2, [r3, #24]
 800a17a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a17e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	691b      	ldr	r3, [r3, #16]
 800a186:	429a      	cmp	r2, r3
 800a188:	d908      	bls.n	800a19c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a18a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a18e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	691b      	ldr	r3, [r3, #16]
 800a196:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a19a:	e007      	b.n	800a1ac <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a19c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	699b      	ldr	r3, [r3, #24]
 800a1a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a1ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	7b1b      	ldrb	r3, [r3, #12]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d13a      	bne.n	800a232 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a1bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	6959      	ldr	r1, [r3, #20]
 800a1c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	88da      	ldrh	r2, [r3, #6]
 800a1d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1d8:	b29b      	uxth	r3, r3
 800a1da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a1de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a1e2:	6800      	ldr	r0, [r0, #0]
 800a1e4:	f001 fc1d 	bl	800ba22 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a1e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	613b      	str	r3, [r7, #16]
 800a1f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a202:	b29b      	uxth	r3, r3
 800a204:	461a      	mov	r2, r3
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	4413      	add	r3, r2
 800a20a:	613b      	str	r3, [r7, #16]
 800a20c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	00da      	lsls	r2, r3, #3
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	4413      	add	r3, r2
 800a21e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a222:	60fb      	str	r3, [r7, #12]
 800a224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a228:	b29a      	uxth	r2, r3
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	801a      	strh	r2, [r3, #0]
 800a22e:	f000 bde3 	b.w	800adf8 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	78db      	ldrb	r3, [r3, #3]
 800a23e:	2b02      	cmp	r3, #2
 800a240:	f040 843a 	bne.w	800aab8 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	6a1a      	ldr	r2, [r3, #32]
 800a250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a254:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	691b      	ldr	r3, [r3, #16]
 800a25c:	429a      	cmp	r2, r3
 800a25e:	f240 83b7 	bls.w	800a9d0 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a266:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	4413      	add	r3, r2
 800a27c:	881b      	ldrh	r3, [r3, #0]
 800a27e:	b29b      	uxth	r3, r3
 800a280:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a288:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a28c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a290:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a29a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	441a      	add	r2, r3
 800a2a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a2aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2b2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a2b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a2be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	6a1a      	ldr	r2, [r3, #32]
 800a2ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2ce:	1ad2      	subs	r2, r2, r3
 800a2d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a2dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2e4:	681a      	ldr	r2, [r3, #0]
 800a2e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	4413      	add	r3, r2
 800a2f6:	881b      	ldrh	r3, [r3, #0]
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	f000 81b3 	beq.w	800a66a <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a308:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	633b      	str	r3, [r7, #48]	; 0x30
 800a310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	785b      	ldrb	r3, [r3, #1]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d16d      	bne.n	800a3fc <USB_EPStartXfer+0x2ba>
 800a320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a324:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a32c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a330:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	461a      	mov	r2, r3
 800a33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a340:	4413      	add	r3, r2
 800a342:	62bb      	str	r3, [r7, #40]	; 0x28
 800a344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	00da      	lsls	r2, r3, #3
 800a352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a354:	4413      	add	r3, r2
 800a356:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a35a:	627b      	str	r3, [r7, #36]	; 0x24
 800a35c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a360:	2b3e      	cmp	r3, #62	; 0x3e
 800a362:	d91c      	bls.n	800a39e <USB_EPStartXfer+0x25c>
 800a364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a368:	095b      	lsrs	r3, r3, #5
 800a36a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a36e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a372:	f003 031f 	and.w	r3, r3, #31
 800a376:	2b00      	cmp	r3, #0
 800a378:	d104      	bne.n	800a384 <USB_EPStartXfer+0x242>
 800a37a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a37e:	3b01      	subs	r3, #1
 800a380:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a384:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a388:	b29b      	uxth	r3, r3
 800a38a:	029b      	lsls	r3, r3, #10
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a396:	b29a      	uxth	r2, r3
 800a398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39a:	801a      	strh	r2, [r3, #0]
 800a39c:	e053      	b.n	800a446 <USB_EPStartXfer+0x304>
 800a39e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d112      	bne.n	800a3cc <USB_EPStartXfer+0x28a>
 800a3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a8:	881b      	ldrh	r3, [r3, #0]
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a3b0:	b29a      	uxth	r2, r3
 800a3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b4:	801a      	strh	r2, [r3, #0]
 800a3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b8:	881b      	ldrh	r3, [r3, #0]
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3c4:	b29a      	uxth	r2, r3
 800a3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c8:	801a      	strh	r2, [r3, #0]
 800a3ca:	e03c      	b.n	800a446 <USB_EPStartXfer+0x304>
 800a3cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3d0:	085b      	lsrs	r3, r3, #1
 800a3d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a3d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3da:	f003 0301 	and.w	r3, r3, #1
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d004      	beq.n	800a3ec <USB_EPStartXfer+0x2aa>
 800a3e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a3ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	029b      	lsls	r3, r3, #10
 800a3f4:	b29a      	uxth	r2, r3
 800a3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f8:	801a      	strh	r2, [r3, #0]
 800a3fa:	e024      	b.n	800a446 <USB_EPStartXfer+0x304>
 800a3fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	785b      	ldrb	r3, [r3, #1]
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d11c      	bne.n	800a446 <USB_EPStartXfer+0x304>
 800a40c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a410:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	461a      	mov	r2, r3
 800a41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a420:	4413      	add	r3, r2
 800a422:	633b      	str	r3, [r7, #48]	; 0x30
 800a424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	00da      	lsls	r2, r3, #3
 800a432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a434:	4413      	add	r3, r2
 800a436:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a43a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a43c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a440:	b29a      	uxth	r2, r3
 800a442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a444:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a44a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	895b      	ldrh	r3, [r3, #10]
 800a452:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a45a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	6959      	ldr	r1, [r3, #20]
 800a462:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a466:	b29b      	uxth	r3, r3
 800a468:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a46c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a470:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a474:	6800      	ldr	r0, [r0, #0]
 800a476:	f001 fad4 	bl	800ba22 <USB_WritePMA>
            ep->xfer_buff += len;
 800a47a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a47e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	695a      	ldr	r2, [r3, #20]
 800a486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a48a:	441a      	add	r2, r3
 800a48c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a49c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	6a1a      	ldr	r2, [r3, #32]
 800a4a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	691b      	ldr	r3, [r3, #16]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d90f      	bls.n	800a4d4 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800a4b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	6a1a      	ldr	r2, [r3, #32]
 800a4c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4c4:	1ad2      	subs	r2, r2, r3
 800a4c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	621a      	str	r2, [r3, #32]
 800a4d2:	e00e      	b.n	800a4f2 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800a4d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	6a1b      	ldr	r3, [r3, #32]
 800a4e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a4e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a4f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	785b      	ldrb	r3, [r3, #1]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d16d      	bne.n	800a5de <USB_EPStartXfer+0x49c>
 800a502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a506:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	61bb      	str	r3, [r7, #24]
 800a50e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a512:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	461a      	mov	r2, r3
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	4413      	add	r3, r2
 800a524:	61bb      	str	r3, [r7, #24]
 800a526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a52a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	00da      	lsls	r2, r3, #3
 800a534:	69bb      	ldr	r3, [r7, #24]
 800a536:	4413      	add	r3, r2
 800a538:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a53c:	617b      	str	r3, [r7, #20]
 800a53e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a542:	2b3e      	cmp	r3, #62	; 0x3e
 800a544:	d91c      	bls.n	800a580 <USB_EPStartXfer+0x43e>
 800a546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a54a:	095b      	lsrs	r3, r3, #5
 800a54c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a554:	f003 031f 	and.w	r3, r3, #31
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d104      	bne.n	800a566 <USB_EPStartXfer+0x424>
 800a55c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a560:	3b01      	subs	r3, #1
 800a562:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	029b      	lsls	r3, r3, #10
 800a56e:	b29b      	uxth	r3, r3
 800a570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a578:	b29a      	uxth	r2, r3
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	801a      	strh	r2, [r3, #0]
 800a57e:	e059      	b.n	800a634 <USB_EPStartXfer+0x4f2>
 800a580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a584:	2b00      	cmp	r3, #0
 800a586:	d112      	bne.n	800a5ae <USB_EPStartXfer+0x46c>
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	881b      	ldrh	r3, [r3, #0]
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a592:	b29a      	uxth	r2, r3
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	801a      	strh	r2, [r3, #0]
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	881b      	ldrh	r3, [r3, #0]
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5a6:	b29a      	uxth	r2, r3
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	801a      	strh	r2, [r3, #0]
 800a5ac:	e042      	b.n	800a634 <USB_EPStartXfer+0x4f2>
 800a5ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5b2:	085b      	lsrs	r3, r3, #1
 800a5b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a5b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5bc:	f003 0301 	and.w	r3, r3, #1
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d004      	beq.n	800a5ce <USB_EPStartXfer+0x48c>
 800a5c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a5ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	029b      	lsls	r3, r3, #10
 800a5d6:	b29a      	uxth	r2, r3
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	801a      	strh	r2, [r3, #0]
 800a5dc:	e02a      	b.n	800a634 <USB_EPStartXfer+0x4f2>
 800a5de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	785b      	ldrb	r3, [r3, #1]
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d122      	bne.n	800a634 <USB_EPStartXfer+0x4f2>
 800a5ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	623b      	str	r3, [r7, #32]
 800a5fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a608:	b29b      	uxth	r3, r3
 800a60a:	461a      	mov	r2, r3
 800a60c:	6a3b      	ldr	r3, [r7, #32]
 800a60e:	4413      	add	r3, r2
 800a610:	623b      	str	r3, [r7, #32]
 800a612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	00da      	lsls	r2, r3, #3
 800a620:	6a3b      	ldr	r3, [r7, #32]
 800a622:	4413      	add	r3, r2
 800a624:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a628:	61fb      	str	r3, [r7, #28]
 800a62a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a62e:	b29a      	uxth	r2, r3
 800a630:	69fb      	ldr	r3, [r7, #28]
 800a632:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a638:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	891b      	ldrh	r3, [r3, #8]
 800a640:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	6959      	ldr	r1, [r3, #20]
 800a650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a654:	b29b      	uxth	r3, r3
 800a656:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a65a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a65e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a662:	6800      	ldr	r0, [r0, #0]
 800a664:	f001 f9dd 	bl	800ba22 <USB_WritePMA>
 800a668:	e3c6      	b.n	800adf8 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a66a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a66e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	785b      	ldrb	r3, [r3, #1]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d16d      	bne.n	800a756 <USB_EPStartXfer+0x614>
 800a67a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a67e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	64bb      	str	r3, [r7, #72]	; 0x48
 800a686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a68a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a694:	b29b      	uxth	r3, r3
 800a696:	461a      	mov	r2, r3
 800a698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a69a:	4413      	add	r3, r2
 800a69c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a69e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	781b      	ldrb	r3, [r3, #0]
 800a6aa:	00da      	lsls	r2, r3, #3
 800a6ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6ae:	4413      	add	r3, r2
 800a6b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a6b4:	647b      	str	r3, [r7, #68]	; 0x44
 800a6b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6ba:	2b3e      	cmp	r3, #62	; 0x3e
 800a6bc:	d91c      	bls.n	800a6f8 <USB_EPStartXfer+0x5b6>
 800a6be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6c2:	095b      	lsrs	r3, r3, #5
 800a6c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a6c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6cc:	f003 031f 	and.w	r3, r3, #31
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d104      	bne.n	800a6de <USB_EPStartXfer+0x59c>
 800a6d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a6d8:	3b01      	subs	r3, #1
 800a6da:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a6de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	029b      	lsls	r3, r3, #10
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6f0:	b29a      	uxth	r2, r3
 800a6f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6f4:	801a      	strh	r2, [r3, #0]
 800a6f6:	e059      	b.n	800a7ac <USB_EPStartXfer+0x66a>
 800a6f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d112      	bne.n	800a726 <USB_EPStartXfer+0x5e4>
 800a700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a702:	881b      	ldrh	r3, [r3, #0]
 800a704:	b29b      	uxth	r3, r3
 800a706:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a70a:	b29a      	uxth	r2, r3
 800a70c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a70e:	801a      	strh	r2, [r3, #0]
 800a710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a712:	881b      	ldrh	r3, [r3, #0]
 800a714:	b29b      	uxth	r3, r3
 800a716:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a71a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a71e:	b29a      	uxth	r2, r3
 800a720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a722:	801a      	strh	r2, [r3, #0]
 800a724:	e042      	b.n	800a7ac <USB_EPStartXfer+0x66a>
 800a726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a72a:	085b      	lsrs	r3, r3, #1
 800a72c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a734:	f003 0301 	and.w	r3, r3, #1
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d004      	beq.n	800a746 <USB_EPStartXfer+0x604>
 800a73c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a740:	3301      	adds	r3, #1
 800a742:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a746:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	029b      	lsls	r3, r3, #10
 800a74e:	b29a      	uxth	r2, r3
 800a750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a752:	801a      	strh	r2, [r3, #0]
 800a754:	e02a      	b.n	800a7ac <USB_EPStartXfer+0x66a>
 800a756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a75a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	785b      	ldrb	r3, [r3, #1]
 800a762:	2b01      	cmp	r3, #1
 800a764:	d122      	bne.n	800a7ac <USB_EPStartXfer+0x66a>
 800a766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a76a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	653b      	str	r3, [r7, #80]	; 0x50
 800a772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a776:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a780:	b29b      	uxth	r3, r3
 800a782:	461a      	mov	r2, r3
 800a784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a786:	4413      	add	r3, r2
 800a788:	653b      	str	r3, [r7, #80]	; 0x50
 800a78a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a78e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	00da      	lsls	r2, r3, #3
 800a798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a79a:	4413      	add	r3, r2
 800a79c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a7a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7a6:	b29a      	uxth	r2, r3
 800a7a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a7ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	891b      	ldrh	r3, [r3, #8]
 800a7b8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a7bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	6959      	ldr	r1, [r3, #20]
 800a7c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a7d2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a7d6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a7da:	6800      	ldr	r0, [r0, #0]
 800a7dc:	f001 f921 	bl	800ba22 <USB_WritePMA>
            ep->xfer_buff += len;
 800a7e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	695a      	ldr	r2, [r3, #20]
 800a7ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7f0:	441a      	add	r2, r3
 800a7f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a7fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	6a1a      	ldr	r2, [r3, #32]
 800a80a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a80e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	691b      	ldr	r3, [r3, #16]
 800a816:	429a      	cmp	r2, r3
 800a818:	d90f      	bls.n	800a83a <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800a81a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a81e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	6a1a      	ldr	r2, [r3, #32]
 800a826:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a82a:	1ad2      	subs	r2, r2, r3
 800a82c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	621a      	str	r2, [r3, #32]
 800a838:	e00e      	b.n	800a858 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800a83a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a83e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	6a1b      	ldr	r3, [r3, #32]
 800a846:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a84a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a84e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2200      	movs	r2, #0
 800a856:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a85c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	643b      	str	r3, [r7, #64]	; 0x40
 800a864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	785b      	ldrb	r3, [r3, #1]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d16d      	bne.n	800a950 <USB_EPStartXfer+0x80e>
 800a874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a878:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a884:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a88e:	b29b      	uxth	r3, r3
 800a890:	461a      	mov	r2, r3
 800a892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a894:	4413      	add	r3, r2
 800a896:	63bb      	str	r3, [r7, #56]	; 0x38
 800a898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a89c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	00da      	lsls	r2, r3, #3
 800a8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a8:	4413      	add	r3, r2
 800a8aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a8ae:	637b      	str	r3, [r7, #52]	; 0x34
 800a8b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8b4:	2b3e      	cmp	r3, #62	; 0x3e
 800a8b6:	d91c      	bls.n	800a8f2 <USB_EPStartXfer+0x7b0>
 800a8b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8bc:	095b      	lsrs	r3, r3, #5
 800a8be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a8c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8c6:	f003 031f 	and.w	r3, r3, #31
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d104      	bne.n	800a8d8 <USB_EPStartXfer+0x796>
 800a8ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8d2:	3b01      	subs	r3, #1
 800a8d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a8d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	029b      	lsls	r3, r3, #10
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8ea:	b29a      	uxth	r2, r3
 800a8ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ee:	801a      	strh	r2, [r3, #0]
 800a8f0:	e053      	b.n	800a99a <USB_EPStartXfer+0x858>
 800a8f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d112      	bne.n	800a920 <USB_EPStartXfer+0x7de>
 800a8fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8fc:	881b      	ldrh	r3, [r3, #0]
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a904:	b29a      	uxth	r2, r3
 800a906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a908:	801a      	strh	r2, [r3, #0]
 800a90a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a90c:	881b      	ldrh	r3, [r3, #0]
 800a90e:	b29b      	uxth	r3, r3
 800a910:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a914:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a918:	b29a      	uxth	r2, r3
 800a91a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a91c:	801a      	strh	r2, [r3, #0]
 800a91e:	e03c      	b.n	800a99a <USB_EPStartXfer+0x858>
 800a920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a924:	085b      	lsrs	r3, r3, #1
 800a926:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a92a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a92e:	f003 0301 	and.w	r3, r3, #1
 800a932:	2b00      	cmp	r3, #0
 800a934:	d004      	beq.n	800a940 <USB_EPStartXfer+0x7fe>
 800a936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a93a:	3301      	adds	r3, #1
 800a93c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a944:	b29b      	uxth	r3, r3
 800a946:	029b      	lsls	r3, r3, #10
 800a948:	b29a      	uxth	r2, r3
 800a94a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a94c:	801a      	strh	r2, [r3, #0]
 800a94e:	e024      	b.n	800a99a <USB_EPStartXfer+0x858>
 800a950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a954:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	785b      	ldrb	r3, [r3, #1]
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d11c      	bne.n	800a99a <USB_EPStartXfer+0x858>
 800a960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a964:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a96e:	b29b      	uxth	r3, r3
 800a970:	461a      	mov	r2, r3
 800a972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a974:	4413      	add	r3, r2
 800a976:	643b      	str	r3, [r7, #64]	; 0x40
 800a978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a97c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	00da      	lsls	r2, r3, #3
 800a986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a988:	4413      	add	r3, r2
 800a98a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a98e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a990:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a994:	b29a      	uxth	r2, r3
 800a996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a998:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a99a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a99e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	895b      	ldrh	r3, [r3, #10]
 800a9a6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a9aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	6959      	ldr	r1, [r3, #20]
 800a9b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9ba:	b29b      	uxth	r3, r3
 800a9bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a9c0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a9c4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a9c8:	6800      	ldr	r0, [r0, #0]
 800a9ca:	f001 f82a 	bl	800ba22 <USB_WritePMA>
 800a9ce:	e213      	b.n	800adf8 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a9d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	6a1b      	ldr	r3, [r3, #32]
 800a9dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a9e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	4413      	add	r3, r2
 800a9fa:	881b      	ldrh	r3, [r3, #0]
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800aa02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa06:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800aa0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	441a      	add	r2, r3
 800aa24:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800aa28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa38:	b29b      	uxth	r3, r3
 800aa3a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800aa3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	461a      	mov	r2, r3
 800aa5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa5c:	4413      	add	r3, r2
 800aa5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	00da      	lsls	r2, r3, #3
 800aa6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa70:	4413      	add	r3, r2
 800aa72:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa76:	65bb      	str	r3, [r7, #88]	; 0x58
 800aa78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa7c:	b29a      	uxth	r2, r3
 800aa7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa80:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800aa82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	891b      	ldrh	r3, [r3, #8]
 800aa8e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	6959      	ldr	r1, [r3, #20]
 800aa9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaa2:	b29b      	uxth	r3, r3
 800aaa4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aaa8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800aaac:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800aab0:	6800      	ldr	r0, [r0, #0]
 800aab2:	f000 ffb6 	bl	800ba22 <USB_WritePMA>
 800aab6:	e19f      	b.n	800adf8 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800aab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aabc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	6a1a      	ldr	r2, [r3, #32]
 800aac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aac8:	1ad2      	subs	r2, r2, r3
 800aaca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aace:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800aad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aada:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aade:	681a      	ldr	r2, [r3, #0]
 800aae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	009b      	lsls	r3, r3, #2
 800aaee:	4413      	add	r3, r2
 800aaf0:	881b      	ldrh	r3, [r3, #0]
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	f000 80bc 	beq.w	800ac76 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aafe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	673b      	str	r3, [r7, #112]	; 0x70
 800ab0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	785b      	ldrb	r3, [r3, #1]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d16d      	bne.n	800abf6 <USB_EPStartXfer+0xab4>
 800ab1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab34:	b29b      	uxth	r3, r3
 800ab36:	461a      	mov	r2, r3
 800ab38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab3a:	4413      	add	r3, r2
 800ab3c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	781b      	ldrb	r3, [r3, #0]
 800ab4a:	00da      	lsls	r2, r3, #3
 800ab4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab4e:	4413      	add	r3, r2
 800ab50:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ab54:	667b      	str	r3, [r7, #100]	; 0x64
 800ab56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab5a:	2b3e      	cmp	r3, #62	; 0x3e
 800ab5c:	d91c      	bls.n	800ab98 <USB_EPStartXfer+0xa56>
 800ab5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab62:	095b      	lsrs	r3, r3, #5
 800ab64:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ab68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab6c:	f003 031f 	and.w	r3, r3, #31
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d104      	bne.n	800ab7e <USB_EPStartXfer+0xa3c>
 800ab74:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ab78:	3b01      	subs	r3, #1
 800ab7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ab7e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	029b      	lsls	r3, r3, #10
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab90:	b29a      	uxth	r2, r3
 800ab92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab94:	801a      	strh	r2, [r3, #0]
 800ab96:	e053      	b.n	800ac40 <USB_EPStartXfer+0xafe>
 800ab98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d112      	bne.n	800abc6 <USB_EPStartXfer+0xa84>
 800aba0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aba2:	881b      	ldrh	r3, [r3, #0]
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800abaa:	b29a      	uxth	r2, r3
 800abac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abae:	801a      	strh	r2, [r3, #0]
 800abb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abb2:	881b      	ldrh	r3, [r3, #0]
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abbe:	b29a      	uxth	r2, r3
 800abc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abc2:	801a      	strh	r2, [r3, #0]
 800abc4:	e03c      	b.n	800ac40 <USB_EPStartXfer+0xafe>
 800abc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abca:	085b      	lsrs	r3, r3, #1
 800abcc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800abd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abd4:	f003 0301 	and.w	r3, r3, #1
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d004      	beq.n	800abe6 <USB_EPStartXfer+0xaa4>
 800abdc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800abe0:	3301      	adds	r3, #1
 800abe2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800abe6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800abea:	b29b      	uxth	r3, r3
 800abec:	029b      	lsls	r3, r3, #10
 800abee:	b29a      	uxth	r2, r3
 800abf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abf2:	801a      	strh	r2, [r3, #0]
 800abf4:	e024      	b.n	800ac40 <USB_EPStartXfer+0xafe>
 800abf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	785b      	ldrb	r3, [r3, #1]
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d11c      	bne.n	800ac40 <USB_EPStartXfer+0xafe>
 800ac06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac14:	b29b      	uxth	r3, r3
 800ac16:	461a      	mov	r2, r3
 800ac18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac1a:	4413      	add	r3, r2
 800ac1c:	673b      	str	r3, [r7, #112]	; 0x70
 800ac1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	00da      	lsls	r2, r3, #3
 800ac2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac2e:	4413      	add	r3, r2
 800ac30:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ac34:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac3a:	b29a      	uxth	r2, r3
 800ac3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac3e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ac40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	895b      	ldrh	r3, [r3, #10]
 800ac4c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ac50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	6959      	ldr	r1, [r3, #20]
 800ac5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ac66:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ac6a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ac6e:	6800      	ldr	r0, [r0, #0]
 800ac70:	f000 fed7 	bl	800ba22 <USB_WritePMA>
 800ac74:	e0c0      	b.n	800adf8 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ac76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	785b      	ldrb	r3, [r3, #1]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d16d      	bne.n	800ad62 <USB_EPStartXfer+0xc20>
 800ac86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ac92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	461a      	mov	r2, r3
 800aca4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aca6:	4413      	add	r3, r2
 800aca8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800acaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	00da      	lsls	r2, r3, #3
 800acb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800acba:	4413      	add	r3, r2
 800acbc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800acc0:	67bb      	str	r3, [r7, #120]	; 0x78
 800acc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acc6:	2b3e      	cmp	r3, #62	; 0x3e
 800acc8:	d91c      	bls.n	800ad04 <USB_EPStartXfer+0xbc2>
 800acca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acce:	095b      	lsrs	r3, r3, #5
 800acd0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800acd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acd8:	f003 031f 	and.w	r3, r3, #31
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d104      	bne.n	800acea <USB_EPStartXfer+0xba8>
 800ace0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ace4:	3b01      	subs	r3, #1
 800ace6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800acea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800acee:	b29b      	uxth	r3, r3
 800acf0:	029b      	lsls	r3, r3, #10
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acfc:	b29a      	uxth	r2, r3
 800acfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad00:	801a      	strh	r2, [r3, #0]
 800ad02:	e05f      	b.n	800adc4 <USB_EPStartXfer+0xc82>
 800ad04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d112      	bne.n	800ad32 <USB_EPStartXfer+0xbf0>
 800ad0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad0e:	881b      	ldrh	r3, [r3, #0]
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ad16:	b29a      	uxth	r2, r3
 800ad18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad1a:	801a      	strh	r2, [r3, #0]
 800ad1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad1e:	881b      	ldrh	r3, [r3, #0]
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad2a:	b29a      	uxth	r2, r3
 800ad2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad2e:	801a      	strh	r2, [r3, #0]
 800ad30:	e048      	b.n	800adc4 <USB_EPStartXfer+0xc82>
 800ad32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad36:	085b      	lsrs	r3, r3, #1
 800ad38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ad3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad40:	f003 0301 	and.w	r3, r3, #1
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d004      	beq.n	800ad52 <USB_EPStartXfer+0xc10>
 800ad48:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ad4c:	3301      	adds	r3, #1
 800ad4e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ad52:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	029b      	lsls	r3, r3, #10
 800ad5a:	b29a      	uxth	r2, r3
 800ad5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad5e:	801a      	strh	r2, [r3, #0]
 800ad60:	e030      	b.n	800adc4 <USB_EPStartXfer+0xc82>
 800ad62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	785b      	ldrb	r3, [r3, #1]
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d128      	bne.n	800adc4 <USB_EPStartXfer+0xc82>
 800ad72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ad80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	461a      	mov	r2, r3
 800ad92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ad96:	4413      	add	r3, r2
 800ad98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ad9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ada0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	00da      	lsls	r2, r3, #3
 800adaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800adae:	4413      	add	r3, r2
 800adb0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800adb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800adb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adbc:	b29a      	uxth	r2, r3
 800adbe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800adc2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800adc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	891b      	ldrh	r3, [r3, #8]
 800add0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800add4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800add8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	6959      	ldr	r1, [r3, #20]
 800ade0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800adea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800adee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800adf2:	6800      	ldr	r0, [r0, #0]
 800adf4:	f000 fe15 	bl	800ba22 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800adf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae00:	681a      	ldr	r2, [r3, #0]
 800ae02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	009b      	lsls	r3, r3, #2
 800ae10:	4413      	add	r3, r2
 800ae12:	881b      	ldrh	r3, [r3, #0]
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae1e:	817b      	strh	r3, [r7, #10]
 800ae20:	897b      	ldrh	r3, [r7, #10]
 800ae22:	f083 0310 	eor.w	r3, r3, #16
 800ae26:	817b      	strh	r3, [r7, #10]
 800ae28:	897b      	ldrh	r3, [r7, #10]
 800ae2a:	f083 0320 	eor.w	r3, r3, #32
 800ae2e:	817b      	strh	r3, [r7, #10]
 800ae30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae38:	681a      	ldr	r2, [r3, #0]
 800ae3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	009b      	lsls	r3, r3, #2
 800ae48:	441a      	add	r2, r3
 800ae4a:	897b      	ldrh	r3, [r7, #10]
 800ae4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	8013      	strh	r3, [r2, #0]
 800ae60:	f000 bc9f 	b.w	800b7a2 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ae64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	7b1b      	ldrb	r3, [r3, #12]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	f040 80ae 	bne.w	800afd2 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ae76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	699a      	ldr	r2, [r3, #24]
 800ae82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	691b      	ldr	r3, [r3, #16]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d917      	bls.n	800aec2 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800ae92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	691b      	ldr	r3, [r3, #16]
 800ae9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800aea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	699a      	ldr	r2, [r3, #24]
 800aeae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeb2:	1ad2      	subs	r2, r2, r3
 800aeb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	619a      	str	r2, [r3, #24]
 800aec0:	e00e      	b.n	800aee0 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800aec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	699b      	ldr	r3, [r3, #24]
 800aece:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800aed2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aed6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	2200      	movs	r2, #0
 800aede:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800aee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aee4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aeee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aef2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	461a      	mov	r2, r3
 800af00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800af04:	4413      	add	r3, r2
 800af06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800af0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	00da      	lsls	r2, r3, #3
 800af18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800af1c:	4413      	add	r3, r2
 800af1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800af26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af2a:	2b3e      	cmp	r3, #62	; 0x3e
 800af2c:	d91d      	bls.n	800af6a <USB_EPStartXfer+0xe28>
 800af2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af32:	095b      	lsrs	r3, r3, #5
 800af34:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800af38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af3c:	f003 031f 	and.w	r3, r3, #31
 800af40:	2b00      	cmp	r3, #0
 800af42:	d104      	bne.n	800af4e <USB_EPStartXfer+0xe0c>
 800af44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800af48:	3b01      	subs	r3, #1
 800af4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800af4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800af52:	b29b      	uxth	r3, r3
 800af54:	029b      	lsls	r3, r3, #10
 800af56:	b29b      	uxth	r3, r3
 800af58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af60:	b29a      	uxth	r2, r3
 800af62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af66:	801a      	strh	r2, [r3, #0]
 800af68:	e3e1      	b.n	800b72e <USB_EPStartXfer+0x15ec>
 800af6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d116      	bne.n	800afa0 <USB_EPStartXfer+0xe5e>
 800af72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af76:	881b      	ldrh	r3, [r3, #0]
 800af78:	b29b      	uxth	r3, r3
 800af7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800af7e:	b29a      	uxth	r2, r3
 800af80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af84:	801a      	strh	r2, [r3, #0]
 800af86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af8a:	881b      	ldrh	r3, [r3, #0]
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af96:	b29a      	uxth	r2, r3
 800af98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af9c:	801a      	strh	r2, [r3, #0]
 800af9e:	e3c6      	b.n	800b72e <USB_EPStartXfer+0x15ec>
 800afa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afa4:	085b      	lsrs	r3, r3, #1
 800afa6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800afaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afae:	f003 0301 	and.w	r3, r3, #1
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d004      	beq.n	800afc0 <USB_EPStartXfer+0xe7e>
 800afb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800afba:	3301      	adds	r3, #1
 800afbc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800afc0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800afc4:	b29b      	uxth	r3, r3
 800afc6:	029b      	lsls	r3, r3, #10
 800afc8:	b29a      	uxth	r2, r3
 800afca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afce:	801a      	strh	r2, [r3, #0]
 800afd0:	e3ad      	b.n	800b72e <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800afd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	78db      	ldrb	r3, [r3, #3]
 800afde:	2b02      	cmp	r3, #2
 800afe0:	f040 8200 	bne.w	800b3e4 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800afe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	785b      	ldrb	r3, [r3, #1]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	f040 8091 	bne.w	800b118 <USB_EPStartXfer+0xfd6>
 800aff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800affa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b008:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b012:	b29b      	uxth	r3, r3
 800b014:	461a      	mov	r2, r3
 800b016:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b01a:	4413      	add	r3, r2
 800b01c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	781b      	ldrb	r3, [r3, #0]
 800b02c:	00da      	lsls	r2, r3, #3
 800b02e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b032:	4413      	add	r3, r2
 800b034:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b038:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b03c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b040:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	691b      	ldr	r3, [r3, #16]
 800b048:	2b3e      	cmp	r3, #62	; 0x3e
 800b04a:	d925      	bls.n	800b098 <USB_EPStartXfer+0xf56>
 800b04c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b050:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	691b      	ldr	r3, [r3, #16]
 800b058:	095b      	lsrs	r3, r3, #5
 800b05a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b05e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b062:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	691b      	ldr	r3, [r3, #16]
 800b06a:	f003 031f 	and.w	r3, r3, #31
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d104      	bne.n	800b07c <USB_EPStartXfer+0xf3a>
 800b072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b076:	3b01      	subs	r3, #1
 800b078:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b07c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b080:	b29b      	uxth	r3, r3
 800b082:	029b      	lsls	r3, r3, #10
 800b084:	b29b      	uxth	r3, r3
 800b086:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b08a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b08e:	b29a      	uxth	r2, r3
 800b090:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b094:	801a      	strh	r2, [r3, #0]
 800b096:	e074      	b.n	800b182 <USB_EPStartXfer+0x1040>
 800b098:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b09c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	691b      	ldr	r3, [r3, #16]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d116      	bne.n	800b0d6 <USB_EPStartXfer+0xf94>
 800b0a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0ac:	881b      	ldrh	r3, [r3, #0]
 800b0ae:	b29b      	uxth	r3, r3
 800b0b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b0b4:	b29a      	uxth	r2, r3
 800b0b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0ba:	801a      	strh	r2, [r3, #0]
 800b0bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0c0:	881b      	ldrh	r3, [r3, #0]
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0cc:	b29a      	uxth	r2, r3
 800b0ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0d2:	801a      	strh	r2, [r3, #0]
 800b0d4:	e055      	b.n	800b182 <USB_EPStartXfer+0x1040>
 800b0d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	691b      	ldr	r3, [r3, #16]
 800b0e2:	085b      	lsrs	r3, r3, #1
 800b0e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b0e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	691b      	ldr	r3, [r3, #16]
 800b0f4:	f003 0301 	and.w	r3, r3, #1
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d004      	beq.n	800b106 <USB_EPStartXfer+0xfc4>
 800b0fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b100:	3301      	adds	r3, #1
 800b102:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	029b      	lsls	r3, r3, #10
 800b10e:	b29a      	uxth	r2, r3
 800b110:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b114:	801a      	strh	r2, [r3, #0]
 800b116:	e034      	b.n	800b182 <USB_EPStartXfer+0x1040>
 800b118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b11c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	785b      	ldrb	r3, [r3, #1]
 800b124:	2b01      	cmp	r3, #1
 800b126:	d12c      	bne.n	800b182 <USB_EPStartXfer+0x1040>
 800b128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b12c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b13a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b144:	b29b      	uxth	r3, r3
 800b146:	461a      	mov	r2, r3
 800b148:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b14c:	4413      	add	r3, r2
 800b14e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	00da      	lsls	r2, r3, #3
 800b160:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b164:	4413      	add	r3, r2
 800b166:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b16a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b16e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	691b      	ldr	r3, [r3, #16]
 800b17a:	b29a      	uxth	r2, r3
 800b17c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b180:	801a      	strh	r2, [r3, #0]
 800b182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b186:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b194:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	785b      	ldrb	r3, [r3, #1]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	f040 8091 	bne.w	800b2c4 <USB_EPStartXfer+0x1182>
 800b1a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b1b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b1c6:	4413      	add	r3, r2
 800b1c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b1cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	781b      	ldrb	r3, [r3, #0]
 800b1d8:	00da      	lsls	r2, r3, #3
 800b1da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b1de:	4413      	add	r3, r2
 800b1e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b1e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b1e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	691b      	ldr	r3, [r3, #16]
 800b1f4:	2b3e      	cmp	r3, #62	; 0x3e
 800b1f6:	d925      	bls.n	800b244 <USB_EPStartXfer+0x1102>
 800b1f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	691b      	ldr	r3, [r3, #16]
 800b204:	095b      	lsrs	r3, r3, #5
 800b206:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b20a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b20e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	691b      	ldr	r3, [r3, #16]
 800b216:	f003 031f 	and.w	r3, r3, #31
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d104      	bne.n	800b228 <USB_EPStartXfer+0x10e6>
 800b21e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b222:	3b01      	subs	r3, #1
 800b224:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	029b      	lsls	r3, r3, #10
 800b230:	b29b      	uxth	r3, r3
 800b232:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b236:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b23a:	b29a      	uxth	r2, r3
 800b23c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b240:	801a      	strh	r2, [r3, #0]
 800b242:	e06d      	b.n	800b320 <USB_EPStartXfer+0x11de>
 800b244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	691b      	ldr	r3, [r3, #16]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d116      	bne.n	800b282 <USB_EPStartXfer+0x1140>
 800b254:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b258:	881b      	ldrh	r3, [r3, #0]
 800b25a:	b29b      	uxth	r3, r3
 800b25c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b260:	b29a      	uxth	r2, r3
 800b262:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b266:	801a      	strh	r2, [r3, #0]
 800b268:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b26c:	881b      	ldrh	r3, [r3, #0]
 800b26e:	b29b      	uxth	r3, r3
 800b270:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b274:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b278:	b29a      	uxth	r2, r3
 800b27a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b27e:	801a      	strh	r2, [r3, #0]
 800b280:	e04e      	b.n	800b320 <USB_EPStartXfer+0x11de>
 800b282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	691b      	ldr	r3, [r3, #16]
 800b28e:	085b      	lsrs	r3, r3, #1
 800b290:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b298:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	691b      	ldr	r3, [r3, #16]
 800b2a0:	f003 0301 	and.w	r3, r3, #1
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d004      	beq.n	800b2b2 <USB_EPStartXfer+0x1170>
 800b2a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2ac:	3301      	adds	r3, #1
 800b2ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b2b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2b6:	b29b      	uxth	r3, r3
 800b2b8:	029b      	lsls	r3, r3, #10
 800b2ba:	b29a      	uxth	r2, r3
 800b2bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b2c0:	801a      	strh	r2, [r3, #0]
 800b2c2:	e02d      	b.n	800b320 <USB_EPStartXfer+0x11de>
 800b2c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	785b      	ldrb	r3, [r3, #1]
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d125      	bne.n	800b320 <USB_EPStartXfer+0x11de>
 800b2d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2e2:	b29b      	uxth	r3, r3
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b2ea:	4413      	add	r3, r2
 800b2ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b2f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	00da      	lsls	r2, r3, #3
 800b2fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b302:	4413      	add	r3, r2
 800b304:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b308:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b30c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	691b      	ldr	r3, [r3, #16]
 800b318:	b29a      	uxth	r2, r3
 800b31a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b31e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	69db      	ldr	r3, [r3, #28]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	f000 81fe 	beq.w	800b72e <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b336:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b33a:	681a      	ldr	r2, [r3, #0]
 800b33c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	009b      	lsls	r3, r3, #2
 800b34a:	4413      	add	r3, r2
 800b34c:	881b      	ldrh	r3, [r3, #0]
 800b34e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b352:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d005      	beq.n	800b36a <USB_EPStartXfer+0x1228>
 800b35e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b366:	2b00      	cmp	r3, #0
 800b368:	d10d      	bne.n	800b386 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b36a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b36e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b372:	2b00      	cmp	r3, #0
 800b374:	f040 81db 	bne.w	800b72e <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b378:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b37c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b380:	2b00      	cmp	r3, #0
 800b382:	f040 81d4 	bne.w	800b72e <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b38a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	009b      	lsls	r3, r3, #2
 800b39e:	4413      	add	r3, r2
 800b3a0:	881b      	ldrh	r3, [r3, #0]
 800b3a2:	b29b      	uxth	r3, r3
 800b3a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3ac:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800b3b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3b8:	681a      	ldr	r2, [r3, #0]
 800b3ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	441a      	add	r2, r3
 800b3ca:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b3ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b3de:	b29b      	uxth	r3, r3
 800b3e0:	8013      	strh	r3, [r2, #0]
 800b3e2:	e1a4      	b.n	800b72e <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b3e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	78db      	ldrb	r3, [r3, #3]
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	f040 819a 	bne.w	800b72a <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b3f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	699a      	ldr	r2, [r3, #24]
 800b402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b406:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	691b      	ldr	r3, [r3, #16]
 800b40e:	429a      	cmp	r2, r3
 800b410:	d917      	bls.n	800b442 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800b412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b416:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	691b      	ldr	r3, [r3, #16]
 800b41e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800b422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b426:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	699a      	ldr	r2, [r3, #24]
 800b42e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b432:	1ad2      	subs	r2, r2, r3
 800b434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	619a      	str	r2, [r3, #24]
 800b440:	e00e      	b.n	800b460 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800b442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	699b      	ldr	r3, [r3, #24]
 800b44e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800b452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	2200      	movs	r2, #0
 800b45e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	785b      	ldrb	r3, [r3, #1]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d178      	bne.n	800b562 <USB_EPStartXfer+0x1420>
 800b470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b474:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b47e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b482:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b48c:	b29b      	uxth	r3, r3
 800b48e:	461a      	mov	r2, r3
 800b490:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b494:	4413      	add	r3, r2
 800b496:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b49a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b49e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	00da      	lsls	r2, r3, #3
 800b4a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b4ac:	4413      	add	r3, r2
 800b4ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b4b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b4b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ba:	2b3e      	cmp	r3, #62	; 0x3e
 800b4bc:	d91d      	bls.n	800b4fa <USB_EPStartXfer+0x13b8>
 800b4be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4c2:	095b      	lsrs	r3, r3, #5
 800b4c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b4c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4cc:	f003 031f 	and.w	r3, r3, #31
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d104      	bne.n	800b4de <USB_EPStartXfer+0x139c>
 800b4d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b4d8:	3b01      	subs	r3, #1
 800b4da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b4de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	029b      	lsls	r3, r3, #10
 800b4e6:	b29b      	uxth	r3, r3
 800b4e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4f0:	b29a      	uxth	r2, r3
 800b4f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b4f6:	801a      	strh	r2, [r3, #0]
 800b4f8:	e064      	b.n	800b5c4 <USB_EPStartXfer+0x1482>
 800b4fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d116      	bne.n	800b530 <USB_EPStartXfer+0x13ee>
 800b502:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b506:	881b      	ldrh	r3, [r3, #0]
 800b508:	b29b      	uxth	r3, r3
 800b50a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b50e:	b29a      	uxth	r2, r3
 800b510:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b514:	801a      	strh	r2, [r3, #0]
 800b516:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b51a:	881b      	ldrh	r3, [r3, #0]
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b526:	b29a      	uxth	r2, r3
 800b528:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b52c:	801a      	strh	r2, [r3, #0]
 800b52e:	e049      	b.n	800b5c4 <USB_EPStartXfer+0x1482>
 800b530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b534:	085b      	lsrs	r3, r3, #1
 800b536:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b53a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b53e:	f003 0301 	and.w	r3, r3, #1
 800b542:	2b00      	cmp	r3, #0
 800b544:	d004      	beq.n	800b550 <USB_EPStartXfer+0x140e>
 800b546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b54a:	3301      	adds	r3, #1
 800b54c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b554:	b29b      	uxth	r3, r3
 800b556:	029b      	lsls	r3, r3, #10
 800b558:	b29a      	uxth	r2, r3
 800b55a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b55e:	801a      	strh	r2, [r3, #0]
 800b560:	e030      	b.n	800b5c4 <USB_EPStartXfer+0x1482>
 800b562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	785b      	ldrb	r3, [r3, #1]
 800b56e:	2b01      	cmp	r3, #1
 800b570:	d128      	bne.n	800b5c4 <USB_EPStartXfer+0x1482>
 800b572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b576:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b584:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b58e:	b29b      	uxth	r3, r3
 800b590:	461a      	mov	r2, r3
 800b592:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b596:	4413      	add	r3, r2
 800b598:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b59c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	00da      	lsls	r2, r3, #3
 800b5aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b5ae:	4413      	add	r3, r2
 800b5b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b5b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b5b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5bc:	b29a      	uxth	r2, r3
 800b5be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b5c2:	801a      	strh	r2, [r3, #0]
 800b5c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b5d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	785b      	ldrb	r3, [r3, #1]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d178      	bne.n	800b6d4 <USB_EPStartXfer+0x1592>
 800b5e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b5f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	461a      	mov	r2, r3
 800b602:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b606:	4413      	add	r3, r2
 800b608:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b60c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	781b      	ldrb	r3, [r3, #0]
 800b618:	00da      	lsls	r2, r3, #3
 800b61a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b61e:	4413      	add	r3, r2
 800b620:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b624:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b62c:	2b3e      	cmp	r3, #62	; 0x3e
 800b62e:	d91d      	bls.n	800b66c <USB_EPStartXfer+0x152a>
 800b630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b634:	095b      	lsrs	r3, r3, #5
 800b636:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b63a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b63e:	f003 031f 	and.w	r3, r3, #31
 800b642:	2b00      	cmp	r3, #0
 800b644:	d104      	bne.n	800b650 <USB_EPStartXfer+0x150e>
 800b646:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b64a:	3b01      	subs	r3, #1
 800b64c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b650:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b654:	b29b      	uxth	r3, r3
 800b656:	029b      	lsls	r3, r3, #10
 800b658:	b29b      	uxth	r3, r3
 800b65a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b65e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b662:	b29a      	uxth	r2, r3
 800b664:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b668:	801a      	strh	r2, [r3, #0]
 800b66a:	e060      	b.n	800b72e <USB_EPStartXfer+0x15ec>
 800b66c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b670:	2b00      	cmp	r3, #0
 800b672:	d116      	bne.n	800b6a2 <USB_EPStartXfer+0x1560>
 800b674:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b678:	881b      	ldrh	r3, [r3, #0]
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b680:	b29a      	uxth	r2, r3
 800b682:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b686:	801a      	strh	r2, [r3, #0]
 800b688:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b68c:	881b      	ldrh	r3, [r3, #0]
 800b68e:	b29b      	uxth	r3, r3
 800b690:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b694:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b698:	b29a      	uxth	r2, r3
 800b69a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b69e:	801a      	strh	r2, [r3, #0]
 800b6a0:	e045      	b.n	800b72e <USB_EPStartXfer+0x15ec>
 800b6a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6a6:	085b      	lsrs	r3, r3, #1
 800b6a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b6ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6b0:	f003 0301 	and.w	r3, r3, #1
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d004      	beq.n	800b6c2 <USB_EPStartXfer+0x1580>
 800b6b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6bc:	3301      	adds	r3, #1
 800b6be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b6c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6c6:	b29b      	uxth	r3, r3
 800b6c8:	029b      	lsls	r3, r3, #10
 800b6ca:	b29a      	uxth	r2, r3
 800b6cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b6d0:	801a      	strh	r2, [r3, #0]
 800b6d2:	e02c      	b.n	800b72e <USB_EPStartXfer+0x15ec>
 800b6d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	785b      	ldrb	r3, [r3, #1]
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	d124      	bne.n	800b72e <USB_EPStartXfer+0x15ec>
 800b6e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6f2:	b29b      	uxth	r3, r3
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b6fa:	4413      	add	r3, r2
 800b6fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	00da      	lsls	r2, r3, #3
 800b70e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b712:	4413      	add	r3, r2
 800b714:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b718:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b71c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b720:	b29a      	uxth	r2, r3
 800b722:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b726:	801a      	strh	r2, [r3, #0]
 800b728:	e001      	b.n	800b72e <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800b72a:	2301      	movs	r3, #1
 800b72c:	e03a      	b.n	800b7a4 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b72e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b732:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b736:	681a      	ldr	r2, [r3, #0]
 800b738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b73c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	009b      	lsls	r3, r3, #2
 800b746:	4413      	add	r3, r2
 800b748:	881b      	ldrh	r3, [r3, #0]
 800b74a:	b29b      	uxth	r3, r3
 800b74c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b754:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b758:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b75c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b760:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b764:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b768:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b76c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b770:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b774:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b77e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	009b      	lsls	r3, r3, #2
 800b788:	441a      	add	r2, r3
 800b78a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b78e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b792:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b79a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b7a2:	2300      	movs	r3, #0
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}

0800b7ae <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b7ae:	b480      	push	{r7}
 800b7b0:	b085      	sub	sp, #20
 800b7b2:	af00      	add	r7, sp, #0
 800b7b4:	6078      	str	r0, [r7, #4]
 800b7b6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	785b      	ldrb	r3, [r3, #1]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d020      	beq.n	800b802 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b7c0:	687a      	ldr	r2, [r7, #4]
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	009b      	lsls	r3, r3, #2
 800b7c8:	4413      	add	r3, r2
 800b7ca:	881b      	ldrh	r3, [r3, #0]
 800b7cc:	b29b      	uxth	r3, r3
 800b7ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7d6:	81bb      	strh	r3, [r7, #12]
 800b7d8:	89bb      	ldrh	r3, [r7, #12]
 800b7da:	f083 0310 	eor.w	r3, r3, #16
 800b7de:	81bb      	strh	r3, [r7, #12]
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	009b      	lsls	r3, r3, #2
 800b7e8:	441a      	add	r2, r3
 800b7ea:	89bb      	ldrh	r3, [r7, #12]
 800b7ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7fc:	b29b      	uxth	r3, r3
 800b7fe:	8013      	strh	r3, [r2, #0]
 800b800:	e01f      	b.n	800b842 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b802:	687a      	ldr	r2, [r7, #4]
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	4413      	add	r3, r2
 800b80c:	881b      	ldrh	r3, [r3, #0]
 800b80e:	b29b      	uxth	r3, r3
 800b810:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b818:	81fb      	strh	r3, [r7, #14]
 800b81a:	89fb      	ldrh	r3, [r7, #14]
 800b81c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b820:	81fb      	strh	r3, [r7, #14]
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	781b      	ldrb	r3, [r3, #0]
 800b828:	009b      	lsls	r3, r3, #2
 800b82a:	441a      	add	r2, r3
 800b82c:	89fb      	ldrh	r3, [r7, #14]
 800b82e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b83a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b83e:	b29b      	uxth	r3, r3
 800b840:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b842:	2300      	movs	r3, #0
}
 800b844:	4618      	mov	r0, r3
 800b846:	3714      	adds	r7, #20
 800b848:	46bd      	mov	sp, r7
 800b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84e:	4770      	bx	lr

0800b850 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b850:	b480      	push	{r7}
 800b852:	b087      	sub	sp, #28
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	7b1b      	ldrb	r3, [r3, #12]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	f040 809d 	bne.w	800b99e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	785b      	ldrb	r3, [r3, #1]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d04c      	beq.n	800b906 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b86c:	687a      	ldr	r2, [r7, #4]
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	781b      	ldrb	r3, [r3, #0]
 800b872:	009b      	lsls	r3, r3, #2
 800b874:	4413      	add	r3, r2
 800b876:	881b      	ldrh	r3, [r3, #0]
 800b878:	823b      	strh	r3, [r7, #16]
 800b87a:	8a3b      	ldrh	r3, [r7, #16]
 800b87c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b880:	2b00      	cmp	r3, #0
 800b882:	d01b      	beq.n	800b8bc <USB_EPClearStall+0x6c>
 800b884:	687a      	ldr	r2, [r7, #4]
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	781b      	ldrb	r3, [r3, #0]
 800b88a:	009b      	lsls	r3, r3, #2
 800b88c:	4413      	add	r3, r2
 800b88e:	881b      	ldrh	r3, [r3, #0]
 800b890:	b29b      	uxth	r3, r3
 800b892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b89a:	81fb      	strh	r3, [r7, #14]
 800b89c:	687a      	ldr	r2, [r7, #4]
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	781b      	ldrb	r3, [r3, #0]
 800b8a2:	009b      	lsls	r3, r3, #2
 800b8a4:	441a      	add	r2, r3
 800b8a6:	89fb      	ldrh	r3, [r7, #14]
 800b8a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b8ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b8b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b8b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	78db      	ldrb	r3, [r3, #3]
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d06c      	beq.n	800b99e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	009b      	lsls	r3, r3, #2
 800b8cc:	4413      	add	r3, r2
 800b8ce:	881b      	ldrh	r3, [r3, #0]
 800b8d0:	b29b      	uxth	r3, r3
 800b8d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8da:	81bb      	strh	r3, [r7, #12]
 800b8dc:	89bb      	ldrh	r3, [r7, #12]
 800b8de:	f083 0320 	eor.w	r3, r3, #32
 800b8e2:	81bb      	strh	r3, [r7, #12]
 800b8e4:	687a      	ldr	r2, [r7, #4]
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	781b      	ldrb	r3, [r3, #0]
 800b8ea:	009b      	lsls	r3, r3, #2
 800b8ec:	441a      	add	r2, r3
 800b8ee:	89bb      	ldrh	r3, [r7, #12]
 800b8f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b8f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b8f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b8fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b900:	b29b      	uxth	r3, r3
 800b902:	8013      	strh	r3, [r2, #0]
 800b904:	e04b      	b.n	800b99e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b906:	687a      	ldr	r2, [r7, #4]
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	009b      	lsls	r3, r3, #2
 800b90e:	4413      	add	r3, r2
 800b910:	881b      	ldrh	r3, [r3, #0]
 800b912:	82fb      	strh	r3, [r7, #22]
 800b914:	8afb      	ldrh	r3, [r7, #22]
 800b916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d01b      	beq.n	800b956 <USB_EPClearStall+0x106>
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	781b      	ldrb	r3, [r3, #0]
 800b924:	009b      	lsls	r3, r3, #2
 800b926:	4413      	add	r3, r2
 800b928:	881b      	ldrh	r3, [r3, #0]
 800b92a:	b29b      	uxth	r3, r3
 800b92c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b934:	82bb      	strh	r3, [r7, #20]
 800b936:	687a      	ldr	r2, [r7, #4]
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	441a      	add	r2, r3
 800b940:	8abb      	ldrh	r3, [r7, #20]
 800b942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b94a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b94e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b952:	b29b      	uxth	r3, r3
 800b954:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	009b      	lsls	r3, r3, #2
 800b95e:	4413      	add	r3, r2
 800b960:	881b      	ldrh	r3, [r3, #0]
 800b962:	b29b      	uxth	r3, r3
 800b964:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b96c:	827b      	strh	r3, [r7, #18]
 800b96e:	8a7b      	ldrh	r3, [r7, #18]
 800b970:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b974:	827b      	strh	r3, [r7, #18]
 800b976:	8a7b      	ldrh	r3, [r7, #18]
 800b978:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b97c:	827b      	strh	r3, [r7, #18]
 800b97e:	687a      	ldr	r2, [r7, #4]
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	781b      	ldrb	r3, [r3, #0]
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	441a      	add	r2, r3
 800b988:	8a7b      	ldrh	r3, [r7, #18]
 800b98a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b98e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b99a:	b29b      	uxth	r3, r3
 800b99c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b99e:	2300      	movs	r3, #0
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	371c      	adds	r7, #28
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr

0800b9ac <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b083      	sub	sp, #12
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	460b      	mov	r3, r1
 800b9b6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b9b8:	78fb      	ldrb	r3, [r7, #3]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d103      	bne.n	800b9c6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2280      	movs	r2, #128	; 0x80
 800b9c2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b9c6:	2300      	movs	r3, #0
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	370c      	adds	r7, #12
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b083      	sub	sp, #12
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9ec:	b29a      	uxth	r2, r3
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b9f4:	2300      	movs	r3, #0
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	370c      	adds	r7, #12
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba00:	4770      	bx	lr

0800ba02 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800ba02:	b480      	push	{r7}
 800ba04:	b085      	sub	sp, #20
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ba10:	b29b      	uxth	r3, r3
 800ba12:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ba14:	68fb      	ldr	r3, [r7, #12]
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3714      	adds	r7, #20
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr

0800ba22 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ba22:	b480      	push	{r7}
 800ba24:	b08d      	sub	sp, #52	; 0x34
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	60f8      	str	r0, [r7, #12]
 800ba2a:	60b9      	str	r1, [r7, #8]
 800ba2c:	4611      	mov	r1, r2
 800ba2e:	461a      	mov	r2, r3
 800ba30:	460b      	mov	r3, r1
 800ba32:	80fb      	strh	r3, [r7, #6]
 800ba34:	4613      	mov	r3, r2
 800ba36:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ba38:	88bb      	ldrh	r3, [r7, #4]
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	085b      	lsrs	r3, r3, #1
 800ba3e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ba48:	88fa      	ldrh	r2, [r7, #6]
 800ba4a:	69fb      	ldr	r3, [r7, #28]
 800ba4c:	4413      	add	r3, r2
 800ba4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba52:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800ba54:	6a3b      	ldr	r3, [r7, #32]
 800ba56:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba58:	e01b      	b.n	800ba92 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800ba5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800ba60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba62:	3301      	adds	r3, #1
 800ba64:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800ba66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	021b      	lsls	r3, r3, #8
 800ba6e:	b29b      	uxth	r3, r3
 800ba70:	461a      	mov	r2, r3
 800ba72:	69bb      	ldr	r3, [r7, #24]
 800ba74:	4313      	orrs	r3, r2
 800ba76:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	b29a      	uxth	r2, r3
 800ba7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba7e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ba80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba82:	3302      	adds	r3, #2
 800ba84:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800ba86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba88:	3301      	adds	r3, #1
 800ba8a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800ba8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba8e:	3b01      	subs	r3, #1
 800ba90:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d1e0      	bne.n	800ba5a <USB_WritePMA+0x38>
  }
}
 800ba98:	bf00      	nop
 800ba9a:	bf00      	nop
 800ba9c:	3734      	adds	r7, #52	; 0x34
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa4:	4770      	bx	lr

0800baa6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800baa6:	b480      	push	{r7}
 800baa8:	b08b      	sub	sp, #44	; 0x2c
 800baaa:	af00      	add	r7, sp, #0
 800baac:	60f8      	str	r0, [r7, #12]
 800baae:	60b9      	str	r1, [r7, #8]
 800bab0:	4611      	mov	r1, r2
 800bab2:	461a      	mov	r2, r3
 800bab4:	460b      	mov	r3, r1
 800bab6:	80fb      	strh	r3, [r7, #6]
 800bab8:	4613      	mov	r3, r2
 800baba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800babc:	88bb      	ldrh	r3, [r7, #4]
 800babe:	085b      	lsrs	r3, r3, #1
 800bac0:	b29b      	uxth	r3, r3
 800bac2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bacc:	88fa      	ldrh	r2, [r7, #6]
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	4413      	add	r3, r2
 800bad2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bad6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800bad8:	69bb      	ldr	r3, [r7, #24]
 800bada:	627b      	str	r3, [r7, #36]	; 0x24
 800badc:	e018      	b.n	800bb10 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800bade:	6a3b      	ldr	r3, [r7, #32]
 800bae0:	881b      	ldrh	r3, [r3, #0]
 800bae2:	b29b      	uxth	r3, r3
 800bae4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800bae6:	6a3b      	ldr	r3, [r7, #32]
 800bae8:	3302      	adds	r3, #2
 800baea:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	b2da      	uxtb	r2, r3
 800baf0:	69fb      	ldr	r3, [r7, #28]
 800baf2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800baf4:	69fb      	ldr	r3, [r7, #28]
 800baf6:	3301      	adds	r3, #1
 800baf8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	0a1b      	lsrs	r3, r3, #8
 800bafe:	b2da      	uxtb	r2, r3
 800bb00:	69fb      	ldr	r3, [r7, #28]
 800bb02:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bb04:	69fb      	ldr	r3, [r7, #28]
 800bb06:	3301      	adds	r3, #1
 800bb08:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800bb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb0c:	3b01      	subs	r3, #1
 800bb0e:	627b      	str	r3, [r7, #36]	; 0x24
 800bb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d1e3      	bne.n	800bade <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800bb16:	88bb      	ldrh	r3, [r7, #4]
 800bb18:	f003 0301 	and.w	r3, r3, #1
 800bb1c:	b29b      	uxth	r3, r3
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d007      	beq.n	800bb32 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800bb22:	6a3b      	ldr	r3, [r7, #32]
 800bb24:	881b      	ldrh	r3, [r3, #0]
 800bb26:	b29b      	uxth	r3, r3
 800bb28:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	b2da      	uxtb	r2, r3
 800bb2e:	69fb      	ldr	r3, [r7, #28]
 800bb30:	701a      	strb	r2, [r3, #0]
  }
}
 800bb32:	bf00      	nop
 800bb34:	372c      	adds	r7, #44	; 0x2c
 800bb36:	46bd      	mov	sp, r7
 800bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3c:	4770      	bx	lr

0800bb3e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb3e:	b580      	push	{r7, lr}
 800bb40:	b084      	sub	sp, #16
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	6078      	str	r0, [r7, #4]
 800bb46:	460b      	mov	r3, r1
 800bb48:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bb4a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bb4e:	f002 f917 	bl	800dd80 <USBD_static_malloc>
 800bb52:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d105      	bne.n	800bb66 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800bb62:	2302      	movs	r3, #2
 800bb64:	e066      	b.n	800bc34 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	68fa      	ldr	r2, [r7, #12]
 800bb6a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	7c1b      	ldrb	r3, [r3, #16]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d119      	bne.n	800bbaa <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bb76:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb7a:	2202      	movs	r2, #2
 800bb7c:	2181      	movs	r1, #129	; 0x81
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f001 ffa3 	bl	800daca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2201      	movs	r2, #1
 800bb88:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bb8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb8e:	2202      	movs	r2, #2
 800bb90:	2101      	movs	r1, #1
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f001 ff99 	bl	800daca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2210      	movs	r2, #16
 800bba4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800bba8:	e016      	b.n	800bbd8 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bbaa:	2340      	movs	r3, #64	; 0x40
 800bbac:	2202      	movs	r2, #2
 800bbae:	2181      	movs	r1, #129	; 0x81
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f001 ff8a 	bl	800daca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2201      	movs	r2, #1
 800bbba:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bbbc:	2340      	movs	r3, #64	; 0x40
 800bbbe:	2202      	movs	r2, #2
 800bbc0:	2101      	movs	r1, #1
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f001 ff81 	bl	800daca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2201      	movs	r2, #1
 800bbcc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2210      	movs	r2, #16
 800bbd4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bbd8:	2308      	movs	r3, #8
 800bbda:	2203      	movs	r2, #3
 800bbdc:	2182      	movs	r1, #130	; 0x82
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f001 ff73 	bl	800daca <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	2200      	movs	r2, #0
 800bc02:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	7c1b      	ldrb	r3, [r3, #16]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d109      	bne.n	800bc22 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc14:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc18:	2101      	movs	r1, #1
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f002 f845 	bl	800dcaa <USBD_LL_PrepareReceive>
 800bc20:	e007      	b.n	800bc32 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc28:	2340      	movs	r3, #64	; 0x40
 800bc2a:	2101      	movs	r1, #1
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f002 f83c 	bl	800dcaa <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bc32:	2300      	movs	r3, #0
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3710      	adds	r7, #16
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b082      	sub	sp, #8
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	460b      	mov	r3, r1
 800bc46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bc48:	2181      	movs	r1, #129	; 0x81
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f001 ff63 	bl	800db16 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2200      	movs	r2, #0
 800bc54:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bc56:	2101      	movs	r1, #1
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f001 ff5c 	bl	800db16 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2200      	movs	r2, #0
 800bc62:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bc66:	2182      	movs	r1, #130	; 0x82
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f001 ff54 	bl	800db16 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2200      	movs	r2, #0
 800bc72:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d00e      	beq.n	800bca6 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f002 f87f 	bl	800dd9c <USBD_static_free>
    pdev->pClassData = NULL;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2200      	movs	r2, #0
 800bca2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bca6:	2300      	movs	r3, #0
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3708      	adds	r7, #8
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}

0800bcb0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b086      	sub	sp, #24
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcc0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bcca:	2300      	movs	r3, #0
 800bccc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d101      	bne.n	800bcd8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800bcd4:	2303      	movs	r3, #3
 800bcd6:	e0af      	b.n	800be38 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d03f      	beq.n	800bd64 <USBD_CDC_Setup+0xb4>
 800bce4:	2b20      	cmp	r3, #32
 800bce6:	f040 809f 	bne.w	800be28 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	88db      	ldrh	r3, [r3, #6]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d02e      	beq.n	800bd50 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	b25b      	sxtb	r3, r3
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	da16      	bge.n	800bd2a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd02:	689b      	ldr	r3, [r3, #8]
 800bd04:	683a      	ldr	r2, [r7, #0]
 800bd06:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800bd08:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd0a:	683a      	ldr	r2, [r7, #0]
 800bd0c:	88d2      	ldrh	r2, [r2, #6]
 800bd0e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	88db      	ldrh	r3, [r3, #6]
 800bd14:	2b07      	cmp	r3, #7
 800bd16:	bf28      	it	cs
 800bd18:	2307      	movcs	r3, #7
 800bd1a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	89fa      	ldrh	r2, [r7, #14]
 800bd20:	4619      	mov	r1, r3
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f001 facf 	bl	800d2c6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800bd28:	e085      	b.n	800be36 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	785a      	ldrb	r2, [r3, #1]
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	88db      	ldrh	r3, [r3, #6]
 800bd38:	b2da      	uxtb	r2, r3
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800bd40:	6939      	ldr	r1, [r7, #16]
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	88db      	ldrh	r3, [r3, #6]
 800bd46:	461a      	mov	r2, r3
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f001 fae8 	bl	800d31e <USBD_CtlPrepareRx>
      break;
 800bd4e:	e072      	b.n	800be36 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd56:	689b      	ldr	r3, [r3, #8]
 800bd58:	683a      	ldr	r2, [r7, #0]
 800bd5a:	7850      	ldrb	r0, [r2, #1]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	6839      	ldr	r1, [r7, #0]
 800bd60:	4798      	blx	r3
      break;
 800bd62:	e068      	b.n	800be36 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	785b      	ldrb	r3, [r3, #1]
 800bd68:	2b0b      	cmp	r3, #11
 800bd6a:	d852      	bhi.n	800be12 <USBD_CDC_Setup+0x162>
 800bd6c:	a201      	add	r2, pc, #4	; (adr r2, 800bd74 <USBD_CDC_Setup+0xc4>)
 800bd6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd72:	bf00      	nop
 800bd74:	0800bda5 	.word	0x0800bda5
 800bd78:	0800be21 	.word	0x0800be21
 800bd7c:	0800be13 	.word	0x0800be13
 800bd80:	0800be13 	.word	0x0800be13
 800bd84:	0800be13 	.word	0x0800be13
 800bd88:	0800be13 	.word	0x0800be13
 800bd8c:	0800be13 	.word	0x0800be13
 800bd90:	0800be13 	.word	0x0800be13
 800bd94:	0800be13 	.word	0x0800be13
 800bd98:	0800be13 	.word	0x0800be13
 800bd9c:	0800bdcf 	.word	0x0800bdcf
 800bda0:	0800bdf9 	.word	0x0800bdf9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdaa:	b2db      	uxtb	r3, r3
 800bdac:	2b03      	cmp	r3, #3
 800bdae:	d107      	bne.n	800bdc0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bdb0:	f107 030a 	add.w	r3, r7, #10
 800bdb4:	2202      	movs	r2, #2
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f001 fa84 	bl	800d2c6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bdbe:	e032      	b.n	800be26 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bdc0:	6839      	ldr	r1, [r7, #0]
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f001 fa0e 	bl	800d1e4 <USBD_CtlError>
            ret = USBD_FAIL;
 800bdc8:	2303      	movs	r3, #3
 800bdca:	75fb      	strb	r3, [r7, #23]
          break;
 800bdcc:	e02b      	b.n	800be26 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdd4:	b2db      	uxtb	r3, r3
 800bdd6:	2b03      	cmp	r3, #3
 800bdd8:	d107      	bne.n	800bdea <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bdda:	f107 030d 	add.w	r3, r7, #13
 800bdde:	2201      	movs	r2, #1
 800bde0:	4619      	mov	r1, r3
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f001 fa6f 	bl	800d2c6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bde8:	e01d      	b.n	800be26 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bdea:	6839      	ldr	r1, [r7, #0]
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f001 f9f9 	bl	800d1e4 <USBD_CtlError>
            ret = USBD_FAIL;
 800bdf2:	2303      	movs	r3, #3
 800bdf4:	75fb      	strb	r3, [r7, #23]
          break;
 800bdf6:	e016      	b.n	800be26 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	2b03      	cmp	r3, #3
 800be02:	d00f      	beq.n	800be24 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800be04:	6839      	ldr	r1, [r7, #0]
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f001 f9ec 	bl	800d1e4 <USBD_CtlError>
            ret = USBD_FAIL;
 800be0c:	2303      	movs	r3, #3
 800be0e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800be10:	e008      	b.n	800be24 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800be12:	6839      	ldr	r1, [r7, #0]
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f001 f9e5 	bl	800d1e4 <USBD_CtlError>
          ret = USBD_FAIL;
 800be1a:	2303      	movs	r3, #3
 800be1c:	75fb      	strb	r3, [r7, #23]
          break;
 800be1e:	e002      	b.n	800be26 <USBD_CDC_Setup+0x176>
          break;
 800be20:	bf00      	nop
 800be22:	e008      	b.n	800be36 <USBD_CDC_Setup+0x186>
          break;
 800be24:	bf00      	nop
      }
      break;
 800be26:	e006      	b.n	800be36 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800be28:	6839      	ldr	r1, [r7, #0]
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f001 f9da 	bl	800d1e4 <USBD_CtlError>
      ret = USBD_FAIL;
 800be30:	2303      	movs	r3, #3
 800be32:	75fb      	strb	r3, [r7, #23]
      break;
 800be34:	bf00      	nop
  }

  return (uint8_t)ret;
 800be36:	7dfb      	ldrb	r3, [r7, #23]
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3718      	adds	r7, #24
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b084      	sub	sp, #16
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
 800be48:	460b      	mov	r3, r1
 800be4a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800be52:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d101      	bne.n	800be62 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800be5e:	2303      	movs	r3, #3
 800be60:	e04f      	b.n	800bf02 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be68:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800be6a:	78fa      	ldrb	r2, [r7, #3]
 800be6c:	6879      	ldr	r1, [r7, #4]
 800be6e:	4613      	mov	r3, r2
 800be70:	009b      	lsls	r3, r3, #2
 800be72:	4413      	add	r3, r2
 800be74:	009b      	lsls	r3, r3, #2
 800be76:	440b      	add	r3, r1
 800be78:	3318      	adds	r3, #24
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d029      	beq.n	800bed4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800be80:	78fa      	ldrb	r2, [r7, #3]
 800be82:	6879      	ldr	r1, [r7, #4]
 800be84:	4613      	mov	r3, r2
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	4413      	add	r3, r2
 800be8a:	009b      	lsls	r3, r3, #2
 800be8c:	440b      	add	r3, r1
 800be8e:	3318      	adds	r3, #24
 800be90:	681a      	ldr	r2, [r3, #0]
 800be92:	78f9      	ldrb	r1, [r7, #3]
 800be94:	68f8      	ldr	r0, [r7, #12]
 800be96:	460b      	mov	r3, r1
 800be98:	009b      	lsls	r3, r3, #2
 800be9a:	440b      	add	r3, r1
 800be9c:	00db      	lsls	r3, r3, #3
 800be9e:	4403      	add	r3, r0
 800bea0:	3338      	adds	r3, #56	; 0x38
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	fbb2 f1f3 	udiv	r1, r2, r3
 800bea8:	fb01 f303 	mul.w	r3, r1, r3
 800beac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d110      	bne.n	800bed4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800beb2:	78fa      	ldrb	r2, [r7, #3]
 800beb4:	6879      	ldr	r1, [r7, #4]
 800beb6:	4613      	mov	r3, r2
 800beb8:	009b      	lsls	r3, r3, #2
 800beba:	4413      	add	r3, r2
 800bebc:	009b      	lsls	r3, r3, #2
 800bebe:	440b      	add	r3, r1
 800bec0:	3318      	adds	r3, #24
 800bec2:	2200      	movs	r2, #0
 800bec4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bec6:	78f9      	ldrb	r1, [r7, #3]
 800bec8:	2300      	movs	r3, #0
 800beca:	2200      	movs	r2, #0
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f001 fecb 	bl	800dc68 <USBD_LL_Transmit>
 800bed2:	e015      	b.n	800bf00 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	2200      	movs	r2, #0
 800bed8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bee2:	691b      	ldr	r3, [r3, #16]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d00b      	beq.n	800bf00 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800beee:	691b      	ldr	r3, [r3, #16]
 800bef0:	68ba      	ldr	r2, [r7, #8]
 800bef2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bef6:	68ba      	ldr	r2, [r7, #8]
 800bef8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800befc:	78fa      	ldrb	r2, [r7, #3]
 800befe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bf00:	2300      	movs	r3, #0
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3710      	adds	r7, #16
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}

0800bf0a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bf0a:	b580      	push	{r7, lr}
 800bf0c:	b084      	sub	sp, #16
 800bf0e:	af00      	add	r7, sp, #0
 800bf10:	6078      	str	r0, [r7, #4]
 800bf12:	460b      	mov	r3, r1
 800bf14:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf1c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d101      	bne.n	800bf2c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bf28:	2303      	movs	r3, #3
 800bf2a:	e015      	b.n	800bf58 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bf2c:	78fb      	ldrb	r3, [r7, #3]
 800bf2e:	4619      	mov	r1, r3
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f001 fedb 	bl	800dcec <USBD_LL_GetRxDataSize>
 800bf36:	4602      	mov	r2, r0
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf44:	68db      	ldr	r3, [r3, #12]
 800bf46:	68fa      	ldr	r2, [r7, #12]
 800bf48:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bf4c:	68fa      	ldr	r2, [r7, #12]
 800bf4e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bf52:	4611      	mov	r1, r2
 800bf54:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bf56:	2300      	movs	r3, #0
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3710      	adds	r7, #16
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b084      	sub	sp, #16
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf6e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d101      	bne.n	800bf7a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800bf76:	2303      	movs	r3, #3
 800bf78:	e01b      	b.n	800bfb2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d015      	beq.n	800bfb0 <USBD_CDC_EP0_RxReady+0x50>
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bf8a:	2bff      	cmp	r3, #255	; 0xff
 800bf8c:	d010      	beq.n	800bfb0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf94:	689b      	ldr	r3, [r3, #8]
 800bf96:	68fa      	ldr	r2, [r7, #12]
 800bf98:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800bf9c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bf9e:	68fa      	ldr	r2, [r7, #12]
 800bfa0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bfa4:	b292      	uxth	r2, r2
 800bfa6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	22ff      	movs	r2, #255	; 0xff
 800bfac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800bfb0:	2300      	movs	r3, #0
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3710      	adds	r7, #16
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
	...

0800bfbc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b083      	sub	sp, #12
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2243      	movs	r2, #67	; 0x43
 800bfc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800bfca:	4b03      	ldr	r3, [pc, #12]	; (800bfd8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	370c      	adds	r7, #12
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr
 800bfd8:	20002768 	.word	0x20002768

0800bfdc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b083      	sub	sp, #12
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2243      	movs	r2, #67	; 0x43
 800bfe8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800bfea:	4b03      	ldr	r3, [pc, #12]	; (800bff8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	370c      	adds	r7, #12
 800bff0:	46bd      	mov	sp, r7
 800bff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff6:	4770      	bx	lr
 800bff8:	20002724 	.word	0x20002724

0800bffc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b083      	sub	sp, #12
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2243      	movs	r2, #67	; 0x43
 800c008:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c00a:	4b03      	ldr	r3, [pc, #12]	; (800c018 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	370c      	adds	r7, #12
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr
 800c018:	200027ac 	.word	0x200027ac

0800c01c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b083      	sub	sp, #12
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	220a      	movs	r2, #10
 800c028:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c02a:	4b03      	ldr	r3, [pc, #12]	; (800c038 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	370c      	adds	r7, #12
 800c030:	46bd      	mov	sp, r7
 800c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c036:	4770      	bx	lr
 800c038:	200026e0 	.word	0x200026e0

0800c03c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b083      	sub	sp, #12
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d101      	bne.n	800c050 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c04c:	2303      	movs	r3, #3
 800c04e:	e004      	b.n	800c05a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	683a      	ldr	r2, [r7, #0]
 800c054:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c058:	2300      	movs	r3, #0
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	370c      	adds	r7, #12
 800c05e:	46bd      	mov	sp, r7
 800c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c064:	4770      	bx	lr

0800c066 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c066:	b480      	push	{r7}
 800c068:	b087      	sub	sp, #28
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	60f8      	str	r0, [r7, #12]
 800c06e:	60b9      	str	r1, [r7, #8]
 800c070:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c078:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d101      	bne.n	800c084 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c080:	2303      	movs	r3, #3
 800c082:	e008      	b.n	800c096 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	68ba      	ldr	r2, [r7, #8]
 800c088:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	687a      	ldr	r2, [r7, #4]
 800c090:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c094:	2300      	movs	r3, #0
}
 800c096:	4618      	mov	r0, r3
 800c098:	371c      	adds	r7, #28
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr

0800c0a2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c0a2:	b480      	push	{r7}
 800c0a4:	b085      	sub	sp, #20
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	6078      	str	r0, [r7, #4]
 800c0aa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0b2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d101      	bne.n	800c0be <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c0ba:	2303      	movs	r3, #3
 800c0bc:	e004      	b.n	800c0c8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	683a      	ldr	r2, [r7, #0]
 800c0c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c0c6:	2300      	movs	r3, #0
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3714      	adds	r7, #20
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d2:	4770      	bx	lr

0800c0d4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0e2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d101      	bne.n	800c0f6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c0f2:	2303      	movs	r3, #3
 800c0f4:	e01a      	b.n	800c12c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d114      	bne.n	800c12a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	2201      	movs	r2, #1
 800c104:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c11e:	2181      	movs	r1, #129	; 0x81
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f001 fda1 	bl	800dc68 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c126:	2300      	movs	r3, #0
 800c128:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c12a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3710      	adds	r7, #16
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b084      	sub	sp, #16
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c142:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d101      	bne.n	800c152 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c14e:	2303      	movs	r3, #3
 800c150:	e016      	b.n	800c180 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	7c1b      	ldrb	r3, [r3, #16]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d109      	bne.n	800c16e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c160:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c164:	2101      	movs	r1, #1
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f001 fd9f 	bl	800dcaa <USBD_LL_PrepareReceive>
 800c16c:	e007      	b.n	800c17e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c174:	2340      	movs	r3, #64	; 0x40
 800c176:	2101      	movs	r1, #1
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f001 fd96 	bl	800dcaa <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c17e:	2300      	movs	r3, #0
}
 800c180:	4618      	mov	r0, r3
 800c182:	3710      	adds	r7, #16
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}

0800c188 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b086      	sub	sp, #24
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	60f8      	str	r0, [r7, #12]
 800c190:	60b9      	str	r1, [r7, #8]
 800c192:	4613      	mov	r3, r2
 800c194:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d101      	bne.n	800c1a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c19c:	2303      	movs	r3, #3
 800c19e:	e01f      	b.n	800c1e0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d003      	beq.n	800c1c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	68ba      	ldr	r2, [r7, #8]
 800c1c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2201      	movs	r2, #1
 800c1ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	79fa      	ldrb	r2, [r7, #7]
 800c1d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c1d4:	68f8      	ldr	r0, [r7, #12]
 800c1d6:	f001 fbfd 	bl	800d9d4 <USBD_LL_Init>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c1de:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3718      	adds	r7, #24
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b084      	sub	sp, #16
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d101      	bne.n	800c200 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c1fc:	2303      	movs	r3, #3
 800c1fe:	e016      	b.n	800c22e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	683a      	ldr	r2, [r7, #0]
 800c204:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c210:	2b00      	cmp	r3, #0
 800c212:	d00b      	beq.n	800c22c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c21a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c21c:	f107 020e 	add.w	r2, r7, #14
 800c220:	4610      	mov	r0, r2
 800c222:	4798      	blx	r3
 800c224:	4602      	mov	r2, r0
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c22c:	2300      	movs	r3, #0
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3710      	adds	r7, #16
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}

0800c236 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c236:	b580      	push	{r7, lr}
 800c238:	b082      	sub	sp, #8
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f001 fc28 	bl	800da94 <USBD_LL_Start>
 800c244:	4603      	mov	r3, r0
}
 800c246:	4618      	mov	r0, r3
 800c248:	3708      	adds	r7, #8
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}

0800c24e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c24e:	b480      	push	{r7}
 800c250:	b083      	sub	sp, #12
 800c252:	af00      	add	r7, sp, #0
 800c254:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c256:	2300      	movs	r3, #0
}
 800c258:	4618      	mov	r0, r3
 800c25a:	370c      	adds	r7, #12
 800c25c:	46bd      	mov	sp, r7
 800c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c262:	4770      	bx	lr

0800c264 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b084      	sub	sp, #16
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	460b      	mov	r3, r1
 800c26e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c270:	2303      	movs	r3, #3
 800c272:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d009      	beq.n	800c292 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	78fa      	ldrb	r2, [r7, #3]
 800c288:	4611      	mov	r1, r2
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	4798      	blx	r3
 800c28e:	4603      	mov	r3, r0
 800c290:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c292:	7bfb      	ldrb	r3, [r7, #15]
}
 800c294:	4618      	mov	r0, r3
 800c296:	3710      	adds	r7, #16
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}

0800c29c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b082      	sub	sp, #8
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	460b      	mov	r3, r1
 800c2a6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d007      	beq.n	800c2c2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2b8:	685b      	ldr	r3, [r3, #4]
 800c2ba:	78fa      	ldrb	r2, [r7, #3]
 800c2bc:	4611      	mov	r1, r2
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	4798      	blx	r3
  }

  return USBD_OK;
 800c2c2:	2300      	movs	r3, #0
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3708      	adds	r7, #8
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}

0800c2cc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b084      	sub	sp, #16
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c2dc:	6839      	ldr	r1, [r7, #0]
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f000 ff46 	bl	800d170 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c300:	f003 031f 	and.w	r3, r3, #31
 800c304:	2b02      	cmp	r3, #2
 800c306:	d01a      	beq.n	800c33e <USBD_LL_SetupStage+0x72>
 800c308:	2b02      	cmp	r3, #2
 800c30a:	d822      	bhi.n	800c352 <USBD_LL_SetupStage+0x86>
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d002      	beq.n	800c316 <USBD_LL_SetupStage+0x4a>
 800c310:	2b01      	cmp	r3, #1
 800c312:	d00a      	beq.n	800c32a <USBD_LL_SetupStage+0x5e>
 800c314:	e01d      	b.n	800c352 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c31c:	4619      	mov	r1, r3
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 f9ee 	bl	800c700 <USBD_StdDevReq>
 800c324:	4603      	mov	r3, r0
 800c326:	73fb      	strb	r3, [r7, #15]
      break;
 800c328:	e020      	b.n	800c36c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c330:	4619      	mov	r1, r3
 800c332:	6878      	ldr	r0, [r7, #4]
 800c334:	f000 fa52 	bl	800c7dc <USBD_StdItfReq>
 800c338:	4603      	mov	r3, r0
 800c33a:	73fb      	strb	r3, [r7, #15]
      break;
 800c33c:	e016      	b.n	800c36c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c344:	4619      	mov	r1, r3
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 fa91 	bl	800c86e <USBD_StdEPReq>
 800c34c:	4603      	mov	r3, r0
 800c34e:	73fb      	strb	r3, [r7, #15]
      break;
 800c350:	e00c      	b.n	800c36c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c358:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c35c:	b2db      	uxtb	r3, r3
 800c35e:	4619      	mov	r1, r3
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f001 fbf7 	bl	800db54 <USBD_LL_StallEP>
 800c366:	4603      	mov	r3, r0
 800c368:	73fb      	strb	r3, [r7, #15]
      break;
 800c36a:	bf00      	nop
  }

  return ret;
 800c36c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3710      	adds	r7, #16
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}

0800c376 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c376:	b580      	push	{r7, lr}
 800c378:	b086      	sub	sp, #24
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	60f8      	str	r0, [r7, #12]
 800c37e:	460b      	mov	r3, r1
 800c380:	607a      	str	r2, [r7, #4]
 800c382:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c384:	7afb      	ldrb	r3, [r7, #11]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d138      	bne.n	800c3fc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c390:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c398:	2b03      	cmp	r3, #3
 800c39a:	d14a      	bne.n	800c432 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	689a      	ldr	r2, [r3, #8]
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	68db      	ldr	r3, [r3, #12]
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d913      	bls.n	800c3d0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	689a      	ldr	r2, [r3, #8]
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	68db      	ldr	r3, [r3, #12]
 800c3b0:	1ad2      	subs	r2, r2, r3
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	68da      	ldr	r2, [r3, #12]
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	689b      	ldr	r3, [r3, #8]
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	bf28      	it	cs
 800c3c2:	4613      	movcs	r3, r2
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	6879      	ldr	r1, [r7, #4]
 800c3c8:	68f8      	ldr	r0, [r7, #12]
 800c3ca:	f000 ffc5 	bl	800d358 <USBD_CtlContinueRx>
 800c3ce:	e030      	b.n	800c432 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	2b03      	cmp	r3, #3
 800c3da:	d10b      	bne.n	800c3f4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3e2:	691b      	ldr	r3, [r3, #16]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d005      	beq.n	800c3f4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3ee:	691b      	ldr	r3, [r3, #16]
 800c3f0:	68f8      	ldr	r0, [r7, #12]
 800c3f2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c3f4:	68f8      	ldr	r0, [r7, #12]
 800c3f6:	f000 ffc0 	bl	800d37a <USBD_CtlSendStatus>
 800c3fa:	e01a      	b.n	800c432 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c402:	b2db      	uxtb	r3, r3
 800c404:	2b03      	cmp	r3, #3
 800c406:	d114      	bne.n	800c432 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c40e:	699b      	ldr	r3, [r3, #24]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d00e      	beq.n	800c432 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c41a:	699b      	ldr	r3, [r3, #24]
 800c41c:	7afa      	ldrb	r2, [r7, #11]
 800c41e:	4611      	mov	r1, r2
 800c420:	68f8      	ldr	r0, [r7, #12]
 800c422:	4798      	blx	r3
 800c424:	4603      	mov	r3, r0
 800c426:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c428:	7dfb      	ldrb	r3, [r7, #23]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d001      	beq.n	800c432 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c42e:	7dfb      	ldrb	r3, [r7, #23]
 800c430:	e000      	b.n	800c434 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c432:	2300      	movs	r3, #0
}
 800c434:	4618      	mov	r0, r3
 800c436:	3718      	adds	r7, #24
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b086      	sub	sp, #24
 800c440:	af00      	add	r7, sp, #0
 800c442:	60f8      	str	r0, [r7, #12]
 800c444:	460b      	mov	r3, r1
 800c446:	607a      	str	r2, [r7, #4]
 800c448:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c44a:	7afb      	ldrb	r3, [r7, #11]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d16b      	bne.n	800c528 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	3314      	adds	r3, #20
 800c454:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c45c:	2b02      	cmp	r3, #2
 800c45e:	d156      	bne.n	800c50e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	689a      	ldr	r2, [r3, #8]
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	68db      	ldr	r3, [r3, #12]
 800c468:	429a      	cmp	r2, r3
 800c46a:	d914      	bls.n	800c496 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	689a      	ldr	r2, [r3, #8]
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	68db      	ldr	r3, [r3, #12]
 800c474:	1ad2      	subs	r2, r2, r3
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	689b      	ldr	r3, [r3, #8]
 800c47e:	461a      	mov	r2, r3
 800c480:	6879      	ldr	r1, [r7, #4]
 800c482:	68f8      	ldr	r0, [r7, #12]
 800c484:	f000 ff3a 	bl	800d2fc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c488:	2300      	movs	r3, #0
 800c48a:	2200      	movs	r2, #0
 800c48c:	2100      	movs	r1, #0
 800c48e:	68f8      	ldr	r0, [r7, #12]
 800c490:	f001 fc0b 	bl	800dcaa <USBD_LL_PrepareReceive>
 800c494:	e03b      	b.n	800c50e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	68da      	ldr	r2, [r3, #12]
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	689b      	ldr	r3, [r3, #8]
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	d11c      	bne.n	800c4dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	685a      	ldr	r2, [r3, #4]
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d316      	bcc.n	800c4dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	685a      	ldr	r2, [r3, #4]
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	d20f      	bcs.n	800c4dc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c4bc:	2200      	movs	r2, #0
 800c4be:	2100      	movs	r1, #0
 800c4c0:	68f8      	ldr	r0, [r7, #12]
 800c4c2:	f000 ff1b 	bl	800d2fc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	2100      	movs	r1, #0
 800c4d4:	68f8      	ldr	r0, [r7, #12]
 800c4d6:	f001 fbe8 	bl	800dcaa <USBD_LL_PrepareReceive>
 800c4da:	e018      	b.n	800c50e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4e2:	b2db      	uxtb	r3, r3
 800c4e4:	2b03      	cmp	r3, #3
 800c4e6:	d10b      	bne.n	800c500 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4ee:	68db      	ldr	r3, [r3, #12]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d005      	beq.n	800c500 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4fa:	68db      	ldr	r3, [r3, #12]
 800c4fc:	68f8      	ldr	r0, [r7, #12]
 800c4fe:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c500:	2180      	movs	r1, #128	; 0x80
 800c502:	68f8      	ldr	r0, [r7, #12]
 800c504:	f001 fb26 	bl	800db54 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c508:	68f8      	ldr	r0, [r7, #12]
 800c50a:	f000 ff49 	bl	800d3a0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c514:	2b01      	cmp	r3, #1
 800c516:	d122      	bne.n	800c55e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c518:	68f8      	ldr	r0, [r7, #12]
 800c51a:	f7ff fe98 	bl	800c24e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	2200      	movs	r2, #0
 800c522:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c526:	e01a      	b.n	800c55e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c52e:	b2db      	uxtb	r3, r3
 800c530:	2b03      	cmp	r3, #3
 800c532:	d114      	bne.n	800c55e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c53a:	695b      	ldr	r3, [r3, #20]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d00e      	beq.n	800c55e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c546:	695b      	ldr	r3, [r3, #20]
 800c548:	7afa      	ldrb	r2, [r7, #11]
 800c54a:	4611      	mov	r1, r2
 800c54c:	68f8      	ldr	r0, [r7, #12]
 800c54e:	4798      	blx	r3
 800c550:	4603      	mov	r3, r0
 800c552:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c554:	7dfb      	ldrb	r3, [r7, #23]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d001      	beq.n	800c55e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c55a:	7dfb      	ldrb	r3, [r7, #23]
 800c55c:	e000      	b.n	800c560 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c55e:	2300      	movs	r3, #0
}
 800c560:	4618      	mov	r0, r3
 800c562:	3718      	adds	r7, #24
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}

0800c568 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2201      	movs	r2, #1
 800c574:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2200      	movs	r2, #0
 800c57c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2200      	movs	r2, #0
 800c584:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2200      	movs	r2, #0
 800c58a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c594:	2b00      	cmp	r3, #0
 800c596:	d101      	bne.n	800c59c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c598:	2303      	movs	r3, #3
 800c59a:	e02f      	b.n	800c5fc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d00f      	beq.n	800c5c6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5ac:	685b      	ldr	r3, [r3, #4]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d009      	beq.n	800c5c6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5b8:	685b      	ldr	r3, [r3, #4]
 800c5ba:	687a      	ldr	r2, [r7, #4]
 800c5bc:	6852      	ldr	r2, [r2, #4]
 800c5be:	b2d2      	uxtb	r2, r2
 800c5c0:	4611      	mov	r1, r2
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c5c6:	2340      	movs	r3, #64	; 0x40
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	2100      	movs	r1, #0
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f001 fa7c 	bl	800daca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2201      	movs	r2, #1
 800c5d6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2240      	movs	r2, #64	; 0x40
 800c5de:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c5e2:	2340      	movs	r3, #64	; 0x40
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	2180      	movs	r1, #128	; 0x80
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f001 fa6e 	bl	800daca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2240      	movs	r2, #64	; 0x40
 800c5f8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c5fa:	2300      	movs	r3, #0
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3708      	adds	r7, #8
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c604:	b480      	push	{r7}
 800c606:	b083      	sub	sp, #12
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	460b      	mov	r3, r1
 800c60e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	78fa      	ldrb	r2, [r7, #3]
 800c614:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c616:	2300      	movs	r3, #0
}
 800c618:	4618      	mov	r0, r3
 800c61a:	370c      	adds	r7, #12
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr

0800c624 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c632:	b2da      	uxtb	r2, r3
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2204      	movs	r2, #4
 800c63e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c642:	2300      	movs	r3, #0
}
 800c644:	4618      	mov	r0, r3
 800c646:	370c      	adds	r7, #12
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr

0800c650 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c650:	b480      	push	{r7}
 800c652:	b083      	sub	sp, #12
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c65e:	b2db      	uxtb	r3, r3
 800c660:	2b04      	cmp	r3, #4
 800c662:	d106      	bne.n	800c672 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c66a:	b2da      	uxtb	r2, r3
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c672:	2300      	movs	r3, #0
}
 800c674:	4618      	mov	r0, r3
 800c676:	370c      	adds	r7, #12
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr

0800c680 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b082      	sub	sp, #8
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d101      	bne.n	800c696 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c692:	2303      	movs	r3, #3
 800c694:	e012      	b.n	800c6bc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c69c:	b2db      	uxtb	r3, r3
 800c69e:	2b03      	cmp	r3, #3
 800c6a0:	d10b      	bne.n	800c6ba <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6a8:	69db      	ldr	r3, [r3, #28]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d005      	beq.n	800c6ba <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6b4:	69db      	ldr	r3, [r3, #28]
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c6ba:	2300      	movs	r3, #0
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3708      	adds	r7, #8
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}

0800c6c4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b087      	sub	sp, #28
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	3301      	adds	r3, #1
 800c6da:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	781b      	ldrb	r3, [r3, #0]
 800c6e0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c6e2:	8a3b      	ldrh	r3, [r7, #16]
 800c6e4:	021b      	lsls	r3, r3, #8
 800c6e6:	b21a      	sxth	r2, r3
 800c6e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c6ec:	4313      	orrs	r3, r2
 800c6ee:	b21b      	sxth	r3, r3
 800c6f0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c6f2:	89fb      	ldrh	r3, [r7, #14]
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	371c      	adds	r7, #28
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fe:	4770      	bx	lr

0800c700 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b084      	sub	sp, #16
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c70a:	2300      	movs	r3, #0
 800c70c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c716:	2b40      	cmp	r3, #64	; 0x40
 800c718:	d005      	beq.n	800c726 <USBD_StdDevReq+0x26>
 800c71a:	2b40      	cmp	r3, #64	; 0x40
 800c71c:	d853      	bhi.n	800c7c6 <USBD_StdDevReq+0xc6>
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d00b      	beq.n	800c73a <USBD_StdDevReq+0x3a>
 800c722:	2b20      	cmp	r3, #32
 800c724:	d14f      	bne.n	800c7c6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c72c:	689b      	ldr	r3, [r3, #8]
 800c72e:	6839      	ldr	r1, [r7, #0]
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	4798      	blx	r3
 800c734:	4603      	mov	r3, r0
 800c736:	73fb      	strb	r3, [r7, #15]
      break;
 800c738:	e04a      	b.n	800c7d0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	785b      	ldrb	r3, [r3, #1]
 800c73e:	2b09      	cmp	r3, #9
 800c740:	d83b      	bhi.n	800c7ba <USBD_StdDevReq+0xba>
 800c742:	a201      	add	r2, pc, #4	; (adr r2, 800c748 <USBD_StdDevReq+0x48>)
 800c744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c748:	0800c79d 	.word	0x0800c79d
 800c74c:	0800c7b1 	.word	0x0800c7b1
 800c750:	0800c7bb 	.word	0x0800c7bb
 800c754:	0800c7a7 	.word	0x0800c7a7
 800c758:	0800c7bb 	.word	0x0800c7bb
 800c75c:	0800c77b 	.word	0x0800c77b
 800c760:	0800c771 	.word	0x0800c771
 800c764:	0800c7bb 	.word	0x0800c7bb
 800c768:	0800c793 	.word	0x0800c793
 800c76c:	0800c785 	.word	0x0800c785
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c770:	6839      	ldr	r1, [r7, #0]
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f000 f9de 	bl	800cb34 <USBD_GetDescriptor>
          break;
 800c778:	e024      	b.n	800c7c4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c77a:	6839      	ldr	r1, [r7, #0]
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f000 fb6d 	bl	800ce5c <USBD_SetAddress>
          break;
 800c782:	e01f      	b.n	800c7c4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c784:	6839      	ldr	r1, [r7, #0]
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 fbac 	bl	800cee4 <USBD_SetConfig>
 800c78c:	4603      	mov	r3, r0
 800c78e:	73fb      	strb	r3, [r7, #15]
          break;
 800c790:	e018      	b.n	800c7c4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c792:	6839      	ldr	r1, [r7, #0]
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f000 fc4b 	bl	800d030 <USBD_GetConfig>
          break;
 800c79a:	e013      	b.n	800c7c4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c79c:	6839      	ldr	r1, [r7, #0]
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f000 fc7c 	bl	800d09c <USBD_GetStatus>
          break;
 800c7a4:	e00e      	b.n	800c7c4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c7a6:	6839      	ldr	r1, [r7, #0]
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f000 fcab 	bl	800d104 <USBD_SetFeature>
          break;
 800c7ae:	e009      	b.n	800c7c4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c7b0:	6839      	ldr	r1, [r7, #0]
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f000 fcba 	bl	800d12c <USBD_ClrFeature>
          break;
 800c7b8:	e004      	b.n	800c7c4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c7ba:	6839      	ldr	r1, [r7, #0]
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f000 fd11 	bl	800d1e4 <USBD_CtlError>
          break;
 800c7c2:	bf00      	nop
      }
      break;
 800c7c4:	e004      	b.n	800c7d0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c7c6:	6839      	ldr	r1, [r7, #0]
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f000 fd0b 	bl	800d1e4 <USBD_CtlError>
      break;
 800c7ce:	bf00      	nop
  }

  return ret;
 800c7d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	3710      	adds	r7, #16
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}
 800c7da:	bf00      	nop

0800c7dc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b084      	sub	sp, #16
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
 800c7e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c7f2:	2b40      	cmp	r3, #64	; 0x40
 800c7f4:	d005      	beq.n	800c802 <USBD_StdItfReq+0x26>
 800c7f6:	2b40      	cmp	r3, #64	; 0x40
 800c7f8:	d82f      	bhi.n	800c85a <USBD_StdItfReq+0x7e>
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d001      	beq.n	800c802 <USBD_StdItfReq+0x26>
 800c7fe:	2b20      	cmp	r3, #32
 800c800:	d12b      	bne.n	800c85a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c808:	b2db      	uxtb	r3, r3
 800c80a:	3b01      	subs	r3, #1
 800c80c:	2b02      	cmp	r3, #2
 800c80e:	d81d      	bhi.n	800c84c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	889b      	ldrh	r3, [r3, #4]
 800c814:	b2db      	uxtb	r3, r3
 800c816:	2b01      	cmp	r3, #1
 800c818:	d813      	bhi.n	800c842 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c820:	689b      	ldr	r3, [r3, #8]
 800c822:	6839      	ldr	r1, [r7, #0]
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	4798      	blx	r3
 800c828:	4603      	mov	r3, r0
 800c82a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	88db      	ldrh	r3, [r3, #6]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d110      	bne.n	800c856 <USBD_StdItfReq+0x7a>
 800c834:	7bfb      	ldrb	r3, [r7, #15]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d10d      	bne.n	800c856 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f000 fd9d 	bl	800d37a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c840:	e009      	b.n	800c856 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c842:	6839      	ldr	r1, [r7, #0]
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f000 fccd 	bl	800d1e4 <USBD_CtlError>
          break;
 800c84a:	e004      	b.n	800c856 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c84c:	6839      	ldr	r1, [r7, #0]
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 fcc8 	bl	800d1e4 <USBD_CtlError>
          break;
 800c854:	e000      	b.n	800c858 <USBD_StdItfReq+0x7c>
          break;
 800c856:	bf00      	nop
      }
      break;
 800c858:	e004      	b.n	800c864 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c85a:	6839      	ldr	r1, [r7, #0]
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f000 fcc1 	bl	800d1e4 <USBD_CtlError>
      break;
 800c862:	bf00      	nop
  }

  return ret;
 800c864:	7bfb      	ldrb	r3, [r7, #15]
}
 800c866:	4618      	mov	r0, r3
 800c868:	3710      	adds	r7, #16
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}

0800c86e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c86e:	b580      	push	{r7, lr}
 800c870:	b084      	sub	sp, #16
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
 800c876:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c878:	2300      	movs	r3, #0
 800c87a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	889b      	ldrh	r3, [r3, #4]
 800c880:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	781b      	ldrb	r3, [r3, #0]
 800c886:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c88a:	2b40      	cmp	r3, #64	; 0x40
 800c88c:	d007      	beq.n	800c89e <USBD_StdEPReq+0x30>
 800c88e:	2b40      	cmp	r3, #64	; 0x40
 800c890:	f200 8145 	bhi.w	800cb1e <USBD_StdEPReq+0x2b0>
 800c894:	2b00      	cmp	r3, #0
 800c896:	d00c      	beq.n	800c8b2 <USBD_StdEPReq+0x44>
 800c898:	2b20      	cmp	r3, #32
 800c89a:	f040 8140 	bne.w	800cb1e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8a4:	689b      	ldr	r3, [r3, #8]
 800c8a6:	6839      	ldr	r1, [r7, #0]
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	4798      	blx	r3
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	73fb      	strb	r3, [r7, #15]
      break;
 800c8b0:	e13a      	b.n	800cb28 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	785b      	ldrb	r3, [r3, #1]
 800c8b6:	2b03      	cmp	r3, #3
 800c8b8:	d007      	beq.n	800c8ca <USBD_StdEPReq+0x5c>
 800c8ba:	2b03      	cmp	r3, #3
 800c8bc:	f300 8129 	bgt.w	800cb12 <USBD_StdEPReq+0x2a4>
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d07f      	beq.n	800c9c4 <USBD_StdEPReq+0x156>
 800c8c4:	2b01      	cmp	r3, #1
 800c8c6:	d03c      	beq.n	800c942 <USBD_StdEPReq+0xd4>
 800c8c8:	e123      	b.n	800cb12 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8d0:	b2db      	uxtb	r3, r3
 800c8d2:	2b02      	cmp	r3, #2
 800c8d4:	d002      	beq.n	800c8dc <USBD_StdEPReq+0x6e>
 800c8d6:	2b03      	cmp	r3, #3
 800c8d8:	d016      	beq.n	800c908 <USBD_StdEPReq+0x9a>
 800c8da:	e02c      	b.n	800c936 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c8dc:	7bbb      	ldrb	r3, [r7, #14]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d00d      	beq.n	800c8fe <USBD_StdEPReq+0x90>
 800c8e2:	7bbb      	ldrb	r3, [r7, #14]
 800c8e4:	2b80      	cmp	r3, #128	; 0x80
 800c8e6:	d00a      	beq.n	800c8fe <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c8e8:	7bbb      	ldrb	r3, [r7, #14]
 800c8ea:	4619      	mov	r1, r3
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f001 f931 	bl	800db54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c8f2:	2180      	movs	r1, #128	; 0x80
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f001 f92d 	bl	800db54 <USBD_LL_StallEP>
 800c8fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c8fc:	e020      	b.n	800c940 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c8fe:	6839      	ldr	r1, [r7, #0]
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f000 fc6f 	bl	800d1e4 <USBD_CtlError>
              break;
 800c906:	e01b      	b.n	800c940 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	885b      	ldrh	r3, [r3, #2]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d10e      	bne.n	800c92e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c910:	7bbb      	ldrb	r3, [r7, #14]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d00b      	beq.n	800c92e <USBD_StdEPReq+0xc0>
 800c916:	7bbb      	ldrb	r3, [r7, #14]
 800c918:	2b80      	cmp	r3, #128	; 0x80
 800c91a:	d008      	beq.n	800c92e <USBD_StdEPReq+0xc0>
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	88db      	ldrh	r3, [r3, #6]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d104      	bne.n	800c92e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c924:	7bbb      	ldrb	r3, [r7, #14]
 800c926:	4619      	mov	r1, r3
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f001 f913 	bl	800db54 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	f000 fd23 	bl	800d37a <USBD_CtlSendStatus>

              break;
 800c934:	e004      	b.n	800c940 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c936:	6839      	ldr	r1, [r7, #0]
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f000 fc53 	bl	800d1e4 <USBD_CtlError>
              break;
 800c93e:	bf00      	nop
          }
          break;
 800c940:	e0ec      	b.n	800cb1c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c948:	b2db      	uxtb	r3, r3
 800c94a:	2b02      	cmp	r3, #2
 800c94c:	d002      	beq.n	800c954 <USBD_StdEPReq+0xe6>
 800c94e:	2b03      	cmp	r3, #3
 800c950:	d016      	beq.n	800c980 <USBD_StdEPReq+0x112>
 800c952:	e030      	b.n	800c9b6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c954:	7bbb      	ldrb	r3, [r7, #14]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d00d      	beq.n	800c976 <USBD_StdEPReq+0x108>
 800c95a:	7bbb      	ldrb	r3, [r7, #14]
 800c95c:	2b80      	cmp	r3, #128	; 0x80
 800c95e:	d00a      	beq.n	800c976 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c960:	7bbb      	ldrb	r3, [r7, #14]
 800c962:	4619      	mov	r1, r3
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f001 f8f5 	bl	800db54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c96a:	2180      	movs	r1, #128	; 0x80
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f001 f8f1 	bl	800db54 <USBD_LL_StallEP>
 800c972:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c974:	e025      	b.n	800c9c2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c976:	6839      	ldr	r1, [r7, #0]
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f000 fc33 	bl	800d1e4 <USBD_CtlError>
              break;
 800c97e:	e020      	b.n	800c9c2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	885b      	ldrh	r3, [r3, #2]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d11b      	bne.n	800c9c0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c988:	7bbb      	ldrb	r3, [r7, #14]
 800c98a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d004      	beq.n	800c99c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c992:	7bbb      	ldrb	r3, [r7, #14]
 800c994:	4619      	mov	r1, r3
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f001 f8fb 	bl	800db92 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f000 fcec 	bl	800d37a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9a8:	689b      	ldr	r3, [r3, #8]
 800c9aa:	6839      	ldr	r1, [r7, #0]
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	4798      	blx	r3
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c9b4:	e004      	b.n	800c9c0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c9b6:	6839      	ldr	r1, [r7, #0]
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f000 fc13 	bl	800d1e4 <USBD_CtlError>
              break;
 800c9be:	e000      	b.n	800c9c2 <USBD_StdEPReq+0x154>
              break;
 800c9c0:	bf00      	nop
          }
          break;
 800c9c2:	e0ab      	b.n	800cb1c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9ca:	b2db      	uxtb	r3, r3
 800c9cc:	2b02      	cmp	r3, #2
 800c9ce:	d002      	beq.n	800c9d6 <USBD_StdEPReq+0x168>
 800c9d0:	2b03      	cmp	r3, #3
 800c9d2:	d032      	beq.n	800ca3a <USBD_StdEPReq+0x1cc>
 800c9d4:	e097      	b.n	800cb06 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c9d6:	7bbb      	ldrb	r3, [r7, #14]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d007      	beq.n	800c9ec <USBD_StdEPReq+0x17e>
 800c9dc:	7bbb      	ldrb	r3, [r7, #14]
 800c9de:	2b80      	cmp	r3, #128	; 0x80
 800c9e0:	d004      	beq.n	800c9ec <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c9e2:	6839      	ldr	r1, [r7, #0]
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f000 fbfd 	bl	800d1e4 <USBD_CtlError>
                break;
 800c9ea:	e091      	b.n	800cb10 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c9ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	da0b      	bge.n	800ca0c <USBD_StdEPReq+0x19e>
 800c9f4:	7bbb      	ldrb	r3, [r7, #14]
 800c9f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c9fa:	4613      	mov	r3, r2
 800c9fc:	009b      	lsls	r3, r3, #2
 800c9fe:	4413      	add	r3, r2
 800ca00:	009b      	lsls	r3, r3, #2
 800ca02:	3310      	adds	r3, #16
 800ca04:	687a      	ldr	r2, [r7, #4]
 800ca06:	4413      	add	r3, r2
 800ca08:	3304      	adds	r3, #4
 800ca0a:	e00b      	b.n	800ca24 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ca0c:	7bbb      	ldrb	r3, [r7, #14]
 800ca0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca12:	4613      	mov	r3, r2
 800ca14:	009b      	lsls	r3, r3, #2
 800ca16:	4413      	add	r3, r2
 800ca18:	009b      	lsls	r3, r3, #2
 800ca1a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ca1e:	687a      	ldr	r2, [r7, #4]
 800ca20:	4413      	add	r3, r2
 800ca22:	3304      	adds	r3, #4
 800ca24:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	2202      	movs	r2, #2
 800ca30:	4619      	mov	r1, r3
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f000 fc47 	bl	800d2c6 <USBD_CtlSendData>
              break;
 800ca38:	e06a      	b.n	800cb10 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ca3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	da11      	bge.n	800ca66 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ca42:	7bbb      	ldrb	r3, [r7, #14]
 800ca44:	f003 020f 	and.w	r2, r3, #15
 800ca48:	6879      	ldr	r1, [r7, #4]
 800ca4a:	4613      	mov	r3, r2
 800ca4c:	009b      	lsls	r3, r3, #2
 800ca4e:	4413      	add	r3, r2
 800ca50:	009b      	lsls	r3, r3, #2
 800ca52:	440b      	add	r3, r1
 800ca54:	3324      	adds	r3, #36	; 0x24
 800ca56:	881b      	ldrh	r3, [r3, #0]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d117      	bne.n	800ca8c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ca5c:	6839      	ldr	r1, [r7, #0]
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f000 fbc0 	bl	800d1e4 <USBD_CtlError>
                  break;
 800ca64:	e054      	b.n	800cb10 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ca66:	7bbb      	ldrb	r3, [r7, #14]
 800ca68:	f003 020f 	and.w	r2, r3, #15
 800ca6c:	6879      	ldr	r1, [r7, #4]
 800ca6e:	4613      	mov	r3, r2
 800ca70:	009b      	lsls	r3, r3, #2
 800ca72:	4413      	add	r3, r2
 800ca74:	009b      	lsls	r3, r3, #2
 800ca76:	440b      	add	r3, r1
 800ca78:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ca7c:	881b      	ldrh	r3, [r3, #0]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d104      	bne.n	800ca8c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ca82:	6839      	ldr	r1, [r7, #0]
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f000 fbad 	bl	800d1e4 <USBD_CtlError>
                  break;
 800ca8a:	e041      	b.n	800cb10 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	da0b      	bge.n	800caac <USBD_StdEPReq+0x23e>
 800ca94:	7bbb      	ldrb	r3, [r7, #14]
 800ca96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ca9a:	4613      	mov	r3, r2
 800ca9c:	009b      	lsls	r3, r3, #2
 800ca9e:	4413      	add	r3, r2
 800caa0:	009b      	lsls	r3, r3, #2
 800caa2:	3310      	adds	r3, #16
 800caa4:	687a      	ldr	r2, [r7, #4]
 800caa6:	4413      	add	r3, r2
 800caa8:	3304      	adds	r3, #4
 800caaa:	e00b      	b.n	800cac4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800caac:	7bbb      	ldrb	r3, [r7, #14]
 800caae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cab2:	4613      	mov	r3, r2
 800cab4:	009b      	lsls	r3, r3, #2
 800cab6:	4413      	add	r3, r2
 800cab8:	009b      	lsls	r3, r3, #2
 800caba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cabe:	687a      	ldr	r2, [r7, #4]
 800cac0:	4413      	add	r3, r2
 800cac2:	3304      	adds	r3, #4
 800cac4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cac6:	7bbb      	ldrb	r3, [r7, #14]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d002      	beq.n	800cad2 <USBD_StdEPReq+0x264>
 800cacc:	7bbb      	ldrb	r3, [r7, #14]
 800cace:	2b80      	cmp	r3, #128	; 0x80
 800cad0:	d103      	bne.n	800cada <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800cad2:	68bb      	ldr	r3, [r7, #8]
 800cad4:	2200      	movs	r2, #0
 800cad6:	601a      	str	r2, [r3, #0]
 800cad8:	e00e      	b.n	800caf8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cada:	7bbb      	ldrb	r3, [r7, #14]
 800cadc:	4619      	mov	r1, r3
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f001 f876 	bl	800dbd0 <USBD_LL_IsStallEP>
 800cae4:	4603      	mov	r3, r0
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d003      	beq.n	800caf2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	2201      	movs	r2, #1
 800caee:	601a      	str	r2, [r3, #0]
 800caf0:	e002      	b.n	800caf8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	2200      	movs	r2, #0
 800caf6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	2202      	movs	r2, #2
 800cafc:	4619      	mov	r1, r3
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f000 fbe1 	bl	800d2c6 <USBD_CtlSendData>
              break;
 800cb04:	e004      	b.n	800cb10 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800cb06:	6839      	ldr	r1, [r7, #0]
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f000 fb6b 	bl	800d1e4 <USBD_CtlError>
              break;
 800cb0e:	bf00      	nop
          }
          break;
 800cb10:	e004      	b.n	800cb1c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800cb12:	6839      	ldr	r1, [r7, #0]
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f000 fb65 	bl	800d1e4 <USBD_CtlError>
          break;
 800cb1a:	bf00      	nop
      }
      break;
 800cb1c:	e004      	b.n	800cb28 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800cb1e:	6839      	ldr	r1, [r7, #0]
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f000 fb5f 	bl	800d1e4 <USBD_CtlError>
      break;
 800cb26:	bf00      	nop
  }

  return ret;
 800cb28:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3710      	adds	r7, #16
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}
	...

0800cb34 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b084      	sub	sp, #16
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
 800cb3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cb42:	2300      	movs	r3, #0
 800cb44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cb46:	2300      	movs	r3, #0
 800cb48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	885b      	ldrh	r3, [r3, #2]
 800cb4e:	0a1b      	lsrs	r3, r3, #8
 800cb50:	b29b      	uxth	r3, r3
 800cb52:	3b01      	subs	r3, #1
 800cb54:	2b0e      	cmp	r3, #14
 800cb56:	f200 8152 	bhi.w	800cdfe <USBD_GetDescriptor+0x2ca>
 800cb5a:	a201      	add	r2, pc, #4	; (adr r2, 800cb60 <USBD_GetDescriptor+0x2c>)
 800cb5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb60:	0800cbd1 	.word	0x0800cbd1
 800cb64:	0800cbe9 	.word	0x0800cbe9
 800cb68:	0800cc29 	.word	0x0800cc29
 800cb6c:	0800cdff 	.word	0x0800cdff
 800cb70:	0800cdff 	.word	0x0800cdff
 800cb74:	0800cd9f 	.word	0x0800cd9f
 800cb78:	0800cdcb 	.word	0x0800cdcb
 800cb7c:	0800cdff 	.word	0x0800cdff
 800cb80:	0800cdff 	.word	0x0800cdff
 800cb84:	0800cdff 	.word	0x0800cdff
 800cb88:	0800cdff 	.word	0x0800cdff
 800cb8c:	0800cdff 	.word	0x0800cdff
 800cb90:	0800cdff 	.word	0x0800cdff
 800cb94:	0800cdff 	.word	0x0800cdff
 800cb98:	0800cb9d 	.word	0x0800cb9d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cba2:	69db      	ldr	r3, [r3, #28]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d00b      	beq.n	800cbc0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbae:	69db      	ldr	r3, [r3, #28]
 800cbb0:	687a      	ldr	r2, [r7, #4]
 800cbb2:	7c12      	ldrb	r2, [r2, #16]
 800cbb4:	f107 0108 	add.w	r1, r7, #8
 800cbb8:	4610      	mov	r0, r2
 800cbba:	4798      	blx	r3
 800cbbc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cbbe:	e126      	b.n	800ce0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cbc0:	6839      	ldr	r1, [r7, #0]
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f000 fb0e 	bl	800d1e4 <USBD_CtlError>
        err++;
 800cbc8:	7afb      	ldrb	r3, [r7, #11]
 800cbca:	3301      	adds	r3, #1
 800cbcc:	72fb      	strb	r3, [r7, #11]
      break;
 800cbce:	e11e      	b.n	800ce0e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	687a      	ldr	r2, [r7, #4]
 800cbda:	7c12      	ldrb	r2, [r2, #16]
 800cbdc:	f107 0108 	add.w	r1, r7, #8
 800cbe0:	4610      	mov	r0, r2
 800cbe2:	4798      	blx	r3
 800cbe4:	60f8      	str	r0, [r7, #12]
      break;
 800cbe6:	e112      	b.n	800ce0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	7c1b      	ldrb	r3, [r3, #16]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d10d      	bne.n	800cc0c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbf8:	f107 0208 	add.w	r2, r7, #8
 800cbfc:	4610      	mov	r0, r2
 800cbfe:	4798      	blx	r3
 800cc00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	3301      	adds	r3, #1
 800cc06:	2202      	movs	r2, #2
 800cc08:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cc0a:	e100      	b.n	800ce0e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc14:	f107 0208 	add.w	r2, r7, #8
 800cc18:	4610      	mov	r0, r2
 800cc1a:	4798      	blx	r3
 800cc1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	3301      	adds	r3, #1
 800cc22:	2202      	movs	r2, #2
 800cc24:	701a      	strb	r2, [r3, #0]
      break;
 800cc26:	e0f2      	b.n	800ce0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	885b      	ldrh	r3, [r3, #2]
 800cc2c:	b2db      	uxtb	r3, r3
 800cc2e:	2b05      	cmp	r3, #5
 800cc30:	f200 80ac 	bhi.w	800cd8c <USBD_GetDescriptor+0x258>
 800cc34:	a201      	add	r2, pc, #4	; (adr r2, 800cc3c <USBD_GetDescriptor+0x108>)
 800cc36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc3a:	bf00      	nop
 800cc3c:	0800cc55 	.word	0x0800cc55
 800cc40:	0800cc89 	.word	0x0800cc89
 800cc44:	0800ccbd 	.word	0x0800ccbd
 800cc48:	0800ccf1 	.word	0x0800ccf1
 800cc4c:	0800cd25 	.word	0x0800cd25
 800cc50:	0800cd59 	.word	0x0800cd59
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc5a:	685b      	ldr	r3, [r3, #4]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d00b      	beq.n	800cc78 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc66:	685b      	ldr	r3, [r3, #4]
 800cc68:	687a      	ldr	r2, [r7, #4]
 800cc6a:	7c12      	ldrb	r2, [r2, #16]
 800cc6c:	f107 0108 	add.w	r1, r7, #8
 800cc70:	4610      	mov	r0, r2
 800cc72:	4798      	blx	r3
 800cc74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc76:	e091      	b.n	800cd9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cc78:	6839      	ldr	r1, [r7, #0]
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f000 fab2 	bl	800d1e4 <USBD_CtlError>
            err++;
 800cc80:	7afb      	ldrb	r3, [r7, #11]
 800cc82:	3301      	adds	r3, #1
 800cc84:	72fb      	strb	r3, [r7, #11]
          break;
 800cc86:	e089      	b.n	800cd9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc8e:	689b      	ldr	r3, [r3, #8]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d00b      	beq.n	800ccac <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc9a:	689b      	ldr	r3, [r3, #8]
 800cc9c:	687a      	ldr	r2, [r7, #4]
 800cc9e:	7c12      	ldrb	r2, [r2, #16]
 800cca0:	f107 0108 	add.w	r1, r7, #8
 800cca4:	4610      	mov	r0, r2
 800cca6:	4798      	blx	r3
 800cca8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ccaa:	e077      	b.n	800cd9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ccac:	6839      	ldr	r1, [r7, #0]
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f000 fa98 	bl	800d1e4 <USBD_CtlError>
            err++;
 800ccb4:	7afb      	ldrb	r3, [r7, #11]
 800ccb6:	3301      	adds	r3, #1
 800ccb8:	72fb      	strb	r3, [r7, #11]
          break;
 800ccba:	e06f      	b.n	800cd9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccc2:	68db      	ldr	r3, [r3, #12]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d00b      	beq.n	800cce0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccce:	68db      	ldr	r3, [r3, #12]
 800ccd0:	687a      	ldr	r2, [r7, #4]
 800ccd2:	7c12      	ldrb	r2, [r2, #16]
 800ccd4:	f107 0108 	add.w	r1, r7, #8
 800ccd8:	4610      	mov	r0, r2
 800ccda:	4798      	blx	r3
 800ccdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ccde:	e05d      	b.n	800cd9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cce0:	6839      	ldr	r1, [r7, #0]
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f000 fa7e 	bl	800d1e4 <USBD_CtlError>
            err++;
 800cce8:	7afb      	ldrb	r3, [r7, #11]
 800ccea:	3301      	adds	r3, #1
 800ccec:	72fb      	strb	r3, [r7, #11]
          break;
 800ccee:	e055      	b.n	800cd9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccf6:	691b      	ldr	r3, [r3, #16]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d00b      	beq.n	800cd14 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd02:	691b      	ldr	r3, [r3, #16]
 800cd04:	687a      	ldr	r2, [r7, #4]
 800cd06:	7c12      	ldrb	r2, [r2, #16]
 800cd08:	f107 0108 	add.w	r1, r7, #8
 800cd0c:	4610      	mov	r0, r2
 800cd0e:	4798      	blx	r3
 800cd10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd12:	e043      	b.n	800cd9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cd14:	6839      	ldr	r1, [r7, #0]
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f000 fa64 	bl	800d1e4 <USBD_CtlError>
            err++;
 800cd1c:	7afb      	ldrb	r3, [r7, #11]
 800cd1e:	3301      	adds	r3, #1
 800cd20:	72fb      	strb	r3, [r7, #11]
          break;
 800cd22:	e03b      	b.n	800cd9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd2a:	695b      	ldr	r3, [r3, #20]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d00b      	beq.n	800cd48 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd36:	695b      	ldr	r3, [r3, #20]
 800cd38:	687a      	ldr	r2, [r7, #4]
 800cd3a:	7c12      	ldrb	r2, [r2, #16]
 800cd3c:	f107 0108 	add.w	r1, r7, #8
 800cd40:	4610      	mov	r0, r2
 800cd42:	4798      	blx	r3
 800cd44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd46:	e029      	b.n	800cd9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cd48:	6839      	ldr	r1, [r7, #0]
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f000 fa4a 	bl	800d1e4 <USBD_CtlError>
            err++;
 800cd50:	7afb      	ldrb	r3, [r7, #11]
 800cd52:	3301      	adds	r3, #1
 800cd54:	72fb      	strb	r3, [r7, #11]
          break;
 800cd56:	e021      	b.n	800cd9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd5e:	699b      	ldr	r3, [r3, #24]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d00b      	beq.n	800cd7c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd6a:	699b      	ldr	r3, [r3, #24]
 800cd6c:	687a      	ldr	r2, [r7, #4]
 800cd6e:	7c12      	ldrb	r2, [r2, #16]
 800cd70:	f107 0108 	add.w	r1, r7, #8
 800cd74:	4610      	mov	r0, r2
 800cd76:	4798      	blx	r3
 800cd78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd7a:	e00f      	b.n	800cd9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cd7c:	6839      	ldr	r1, [r7, #0]
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f000 fa30 	bl	800d1e4 <USBD_CtlError>
            err++;
 800cd84:	7afb      	ldrb	r3, [r7, #11]
 800cd86:	3301      	adds	r3, #1
 800cd88:	72fb      	strb	r3, [r7, #11]
          break;
 800cd8a:	e007      	b.n	800cd9c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cd8c:	6839      	ldr	r1, [r7, #0]
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f000 fa28 	bl	800d1e4 <USBD_CtlError>
          err++;
 800cd94:	7afb      	ldrb	r3, [r7, #11]
 800cd96:	3301      	adds	r3, #1
 800cd98:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800cd9a:	bf00      	nop
      }
      break;
 800cd9c:	e037      	b.n	800ce0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	7c1b      	ldrb	r3, [r3, #16]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d109      	bne.n	800cdba <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdae:	f107 0208 	add.w	r2, r7, #8
 800cdb2:	4610      	mov	r0, r2
 800cdb4:	4798      	blx	r3
 800cdb6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cdb8:	e029      	b.n	800ce0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cdba:	6839      	ldr	r1, [r7, #0]
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f000 fa11 	bl	800d1e4 <USBD_CtlError>
        err++;
 800cdc2:	7afb      	ldrb	r3, [r7, #11]
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	72fb      	strb	r3, [r7, #11]
      break;
 800cdc8:	e021      	b.n	800ce0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	7c1b      	ldrb	r3, [r3, #16]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d10d      	bne.n	800cdee <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdda:	f107 0208 	add.w	r2, r7, #8
 800cdde:	4610      	mov	r0, r2
 800cde0:	4798      	blx	r3
 800cde2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	3301      	adds	r3, #1
 800cde8:	2207      	movs	r2, #7
 800cdea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cdec:	e00f      	b.n	800ce0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cdee:	6839      	ldr	r1, [r7, #0]
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f000 f9f7 	bl	800d1e4 <USBD_CtlError>
        err++;
 800cdf6:	7afb      	ldrb	r3, [r7, #11]
 800cdf8:	3301      	adds	r3, #1
 800cdfa:	72fb      	strb	r3, [r7, #11]
      break;
 800cdfc:	e007      	b.n	800ce0e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800cdfe:	6839      	ldr	r1, [r7, #0]
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f000 f9ef 	bl	800d1e4 <USBD_CtlError>
      err++;
 800ce06:	7afb      	ldrb	r3, [r7, #11]
 800ce08:	3301      	adds	r3, #1
 800ce0a:	72fb      	strb	r3, [r7, #11]
      break;
 800ce0c:	bf00      	nop
  }

  if (err != 0U)
 800ce0e:	7afb      	ldrb	r3, [r7, #11]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d11e      	bne.n	800ce52 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	88db      	ldrh	r3, [r3, #6]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d016      	beq.n	800ce4a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ce1c:	893b      	ldrh	r3, [r7, #8]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d00e      	beq.n	800ce40 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	88da      	ldrh	r2, [r3, #6]
 800ce26:	893b      	ldrh	r3, [r7, #8]
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	bf28      	it	cs
 800ce2c:	4613      	movcs	r3, r2
 800ce2e:	b29b      	uxth	r3, r3
 800ce30:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ce32:	893b      	ldrh	r3, [r7, #8]
 800ce34:	461a      	mov	r2, r3
 800ce36:	68f9      	ldr	r1, [r7, #12]
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f000 fa44 	bl	800d2c6 <USBD_CtlSendData>
 800ce3e:	e009      	b.n	800ce54 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ce40:	6839      	ldr	r1, [r7, #0]
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f000 f9ce 	bl	800d1e4 <USBD_CtlError>
 800ce48:	e004      	b.n	800ce54 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f000 fa95 	bl	800d37a <USBD_CtlSendStatus>
 800ce50:	e000      	b.n	800ce54 <USBD_GetDescriptor+0x320>
    return;
 800ce52:	bf00      	nop
  }
}
 800ce54:	3710      	adds	r7, #16
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	bf00      	nop

0800ce5c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b084      	sub	sp, #16
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	889b      	ldrh	r3, [r3, #4]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d131      	bne.n	800ced2 <USBD_SetAddress+0x76>
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	88db      	ldrh	r3, [r3, #6]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d12d      	bne.n	800ced2 <USBD_SetAddress+0x76>
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	885b      	ldrh	r3, [r3, #2]
 800ce7a:	2b7f      	cmp	r3, #127	; 0x7f
 800ce7c:	d829      	bhi.n	800ced2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	885b      	ldrh	r3, [r3, #2]
 800ce82:	b2db      	uxtb	r3, r3
 800ce84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce90:	b2db      	uxtb	r3, r3
 800ce92:	2b03      	cmp	r3, #3
 800ce94:	d104      	bne.n	800cea0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ce96:	6839      	ldr	r1, [r7, #0]
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f000 f9a3 	bl	800d1e4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce9e:	e01d      	b.n	800cedc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	7bfa      	ldrb	r2, [r7, #15]
 800cea4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cea8:	7bfb      	ldrb	r3, [r7, #15]
 800ceaa:	4619      	mov	r1, r3
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f000 febc 	bl	800dc2a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f000 fa61 	bl	800d37a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ceb8:	7bfb      	ldrb	r3, [r7, #15]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d004      	beq.n	800cec8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2202      	movs	r2, #2
 800cec2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cec6:	e009      	b.n	800cedc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2201      	movs	r2, #1
 800cecc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ced0:	e004      	b.n	800cedc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ced2:	6839      	ldr	r1, [r7, #0]
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f000 f985 	bl	800d1e4 <USBD_CtlError>
  }
}
 800ceda:	bf00      	nop
 800cedc:	bf00      	nop
 800cede:	3710      	adds	r7, #16
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b084      	sub	sp, #16
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ceee:	2300      	movs	r3, #0
 800cef0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	885b      	ldrh	r3, [r3, #2]
 800cef6:	b2da      	uxtb	r2, r3
 800cef8:	4b4c      	ldr	r3, [pc, #304]	; (800d02c <USBD_SetConfig+0x148>)
 800cefa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cefc:	4b4b      	ldr	r3, [pc, #300]	; (800d02c <USBD_SetConfig+0x148>)
 800cefe:	781b      	ldrb	r3, [r3, #0]
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	d905      	bls.n	800cf10 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cf04:	6839      	ldr	r1, [r7, #0]
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f000 f96c 	bl	800d1e4 <USBD_CtlError>
    return USBD_FAIL;
 800cf0c:	2303      	movs	r3, #3
 800cf0e:	e088      	b.n	800d022 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf16:	b2db      	uxtb	r3, r3
 800cf18:	2b02      	cmp	r3, #2
 800cf1a:	d002      	beq.n	800cf22 <USBD_SetConfig+0x3e>
 800cf1c:	2b03      	cmp	r3, #3
 800cf1e:	d025      	beq.n	800cf6c <USBD_SetConfig+0x88>
 800cf20:	e071      	b.n	800d006 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cf22:	4b42      	ldr	r3, [pc, #264]	; (800d02c <USBD_SetConfig+0x148>)
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d01c      	beq.n	800cf64 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800cf2a:	4b40      	ldr	r3, [pc, #256]	; (800d02c <USBD_SetConfig+0x148>)
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	461a      	mov	r2, r3
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cf34:	4b3d      	ldr	r3, [pc, #244]	; (800d02c <USBD_SetConfig+0x148>)
 800cf36:	781b      	ldrb	r3, [r3, #0]
 800cf38:	4619      	mov	r1, r3
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f7ff f992 	bl	800c264 <USBD_SetClassConfig>
 800cf40:	4603      	mov	r3, r0
 800cf42:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cf44:	7bfb      	ldrb	r3, [r7, #15]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d004      	beq.n	800cf54 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800cf4a:	6839      	ldr	r1, [r7, #0]
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f000 f949 	bl	800d1e4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cf52:	e065      	b.n	800d020 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f000 fa10 	bl	800d37a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2203      	movs	r2, #3
 800cf5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cf62:	e05d      	b.n	800d020 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f000 fa08 	bl	800d37a <USBD_CtlSendStatus>
      break;
 800cf6a:	e059      	b.n	800d020 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cf6c:	4b2f      	ldr	r3, [pc, #188]	; (800d02c <USBD_SetConfig+0x148>)
 800cf6e:	781b      	ldrb	r3, [r3, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d112      	bne.n	800cf9a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2202      	movs	r2, #2
 800cf78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cf7c:	4b2b      	ldr	r3, [pc, #172]	; (800d02c <USBD_SetConfig+0x148>)
 800cf7e:	781b      	ldrb	r3, [r3, #0]
 800cf80:	461a      	mov	r2, r3
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cf86:	4b29      	ldr	r3, [pc, #164]	; (800d02c <USBD_SetConfig+0x148>)
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f7ff f985 	bl	800c29c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f000 f9f1 	bl	800d37a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cf98:	e042      	b.n	800d020 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800cf9a:	4b24      	ldr	r3, [pc, #144]	; (800d02c <USBD_SetConfig+0x148>)
 800cf9c:	781b      	ldrb	r3, [r3, #0]
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	685b      	ldr	r3, [r3, #4]
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d02a      	beq.n	800cffe <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	685b      	ldr	r3, [r3, #4]
 800cfac:	b2db      	uxtb	r3, r3
 800cfae:	4619      	mov	r1, r3
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f7ff f973 	bl	800c29c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cfb6:	4b1d      	ldr	r3, [pc, #116]	; (800d02c <USBD_SetConfig+0x148>)
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	461a      	mov	r2, r3
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cfc0:	4b1a      	ldr	r3, [pc, #104]	; (800d02c <USBD_SetConfig+0x148>)
 800cfc2:	781b      	ldrb	r3, [r3, #0]
 800cfc4:	4619      	mov	r1, r3
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f7ff f94c 	bl	800c264 <USBD_SetClassConfig>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cfd0:	7bfb      	ldrb	r3, [r7, #15]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d00f      	beq.n	800cff6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800cfd6:	6839      	ldr	r1, [r7, #0]
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f000 f903 	bl	800d1e4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	685b      	ldr	r3, [r3, #4]
 800cfe2:	b2db      	uxtb	r3, r3
 800cfe4:	4619      	mov	r1, r3
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f7ff f958 	bl	800c29c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2202      	movs	r2, #2
 800cff0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cff4:	e014      	b.n	800d020 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f000 f9bf 	bl	800d37a <USBD_CtlSendStatus>
      break;
 800cffc:	e010      	b.n	800d020 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f000 f9bb 	bl	800d37a <USBD_CtlSendStatus>
      break;
 800d004:	e00c      	b.n	800d020 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d006:	6839      	ldr	r1, [r7, #0]
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f000 f8eb 	bl	800d1e4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d00e:	4b07      	ldr	r3, [pc, #28]	; (800d02c <USBD_SetConfig+0x148>)
 800d010:	781b      	ldrb	r3, [r3, #0]
 800d012:	4619      	mov	r1, r3
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f7ff f941 	bl	800c29c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d01a:	2303      	movs	r3, #3
 800d01c:	73fb      	strb	r3, [r7, #15]
      break;
 800d01e:	bf00      	nop
  }

  return ret;
 800d020:	7bfb      	ldrb	r3, [r7, #15]
}
 800d022:	4618      	mov	r0, r3
 800d024:	3710      	adds	r7, #16
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	bf00      	nop
 800d02c:	20003208 	.word	0x20003208

0800d030 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b082      	sub	sp, #8
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	88db      	ldrh	r3, [r3, #6]
 800d03e:	2b01      	cmp	r3, #1
 800d040:	d004      	beq.n	800d04c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d042:	6839      	ldr	r1, [r7, #0]
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f000 f8cd 	bl	800d1e4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d04a:	e023      	b.n	800d094 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d052:	b2db      	uxtb	r3, r3
 800d054:	2b02      	cmp	r3, #2
 800d056:	dc02      	bgt.n	800d05e <USBD_GetConfig+0x2e>
 800d058:	2b00      	cmp	r3, #0
 800d05a:	dc03      	bgt.n	800d064 <USBD_GetConfig+0x34>
 800d05c:	e015      	b.n	800d08a <USBD_GetConfig+0x5a>
 800d05e:	2b03      	cmp	r3, #3
 800d060:	d00b      	beq.n	800d07a <USBD_GetConfig+0x4a>
 800d062:	e012      	b.n	800d08a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2200      	movs	r2, #0
 800d068:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	3308      	adds	r3, #8
 800d06e:	2201      	movs	r2, #1
 800d070:	4619      	mov	r1, r3
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f000 f927 	bl	800d2c6 <USBD_CtlSendData>
        break;
 800d078:	e00c      	b.n	800d094 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	3304      	adds	r3, #4
 800d07e:	2201      	movs	r2, #1
 800d080:	4619      	mov	r1, r3
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f000 f91f 	bl	800d2c6 <USBD_CtlSendData>
        break;
 800d088:	e004      	b.n	800d094 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d08a:	6839      	ldr	r1, [r7, #0]
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f000 f8a9 	bl	800d1e4 <USBD_CtlError>
        break;
 800d092:	bf00      	nop
}
 800d094:	bf00      	nop
 800d096:	3708      	adds	r7, #8
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}

0800d09c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b082      	sub	sp, #8
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
 800d0a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0ac:	b2db      	uxtb	r3, r3
 800d0ae:	3b01      	subs	r3, #1
 800d0b0:	2b02      	cmp	r3, #2
 800d0b2:	d81e      	bhi.n	800d0f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	88db      	ldrh	r3, [r3, #6]
 800d0b8:	2b02      	cmp	r3, #2
 800d0ba:	d004      	beq.n	800d0c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d0bc:	6839      	ldr	r1, [r7, #0]
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f000 f890 	bl	800d1e4 <USBD_CtlError>
        break;
 800d0c4:	e01a      	b.n	800d0fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2201      	movs	r2, #1
 800d0ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d005      	beq.n	800d0e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	68db      	ldr	r3, [r3, #12]
 800d0da:	f043 0202 	orr.w	r2, r3, #2
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	330c      	adds	r3, #12
 800d0e6:	2202      	movs	r2, #2
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f000 f8eb 	bl	800d2c6 <USBD_CtlSendData>
      break;
 800d0f0:	e004      	b.n	800d0fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d0f2:	6839      	ldr	r1, [r7, #0]
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f000 f875 	bl	800d1e4 <USBD_CtlError>
      break;
 800d0fa:	bf00      	nop
  }
}
 800d0fc:	bf00      	nop
 800d0fe:	3708      	adds	r7, #8
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}

0800d104 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b082      	sub	sp, #8
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
 800d10c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	885b      	ldrh	r3, [r3, #2]
 800d112:	2b01      	cmp	r3, #1
 800d114:	d106      	bne.n	800d124 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2201      	movs	r2, #1
 800d11a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f000 f92b 	bl	800d37a <USBD_CtlSendStatus>
  }
}
 800d124:	bf00      	nop
 800d126:	3708      	adds	r7, #8
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}

0800d12c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b082      	sub	sp, #8
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d13c:	b2db      	uxtb	r3, r3
 800d13e:	3b01      	subs	r3, #1
 800d140:	2b02      	cmp	r3, #2
 800d142:	d80b      	bhi.n	800d15c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	885b      	ldrh	r3, [r3, #2]
 800d148:	2b01      	cmp	r3, #1
 800d14a:	d10c      	bne.n	800d166 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2200      	movs	r2, #0
 800d150:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f000 f910 	bl	800d37a <USBD_CtlSendStatus>
      }
      break;
 800d15a:	e004      	b.n	800d166 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d15c:	6839      	ldr	r1, [r7, #0]
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f000 f840 	bl	800d1e4 <USBD_CtlError>
      break;
 800d164:	e000      	b.n	800d168 <USBD_ClrFeature+0x3c>
      break;
 800d166:	bf00      	nop
  }
}
 800d168:	bf00      	nop
 800d16a:	3708      	adds	r7, #8
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b084      	sub	sp, #16
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	781a      	ldrb	r2, [r3, #0]
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	3301      	adds	r3, #1
 800d18a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	781a      	ldrb	r2, [r3, #0]
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	3301      	adds	r3, #1
 800d198:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d19a:	68f8      	ldr	r0, [r7, #12]
 800d19c:	f7ff fa92 	bl	800c6c4 <SWAPBYTE>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	3301      	adds	r3, #1
 800d1ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	3301      	adds	r3, #1
 800d1b2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d1b4:	68f8      	ldr	r0, [r7, #12]
 800d1b6:	f7ff fa85 	bl	800c6c4 <SWAPBYTE>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	461a      	mov	r2, r3
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	3301      	adds	r3, #1
 800d1cc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d1ce:	68f8      	ldr	r0, [r7, #12]
 800d1d0:	f7ff fa78 	bl	800c6c4 <SWAPBYTE>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	461a      	mov	r2, r3
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	80da      	strh	r2, [r3, #6]
}
 800d1dc:	bf00      	nop
 800d1de:	3710      	adds	r7, #16
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}

0800d1e4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b082      	sub	sp, #8
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
 800d1ec:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d1ee:	2180      	movs	r1, #128	; 0x80
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f000 fcaf 	bl	800db54 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d1f6:	2100      	movs	r1, #0
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f000 fcab 	bl	800db54 <USBD_LL_StallEP>
}
 800d1fe:	bf00      	nop
 800d200:	3708      	adds	r7, #8
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}

0800d206 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d206:	b580      	push	{r7, lr}
 800d208:	b086      	sub	sp, #24
 800d20a:	af00      	add	r7, sp, #0
 800d20c:	60f8      	str	r0, [r7, #12]
 800d20e:	60b9      	str	r1, [r7, #8]
 800d210:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d212:	2300      	movs	r3, #0
 800d214:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d036      	beq.n	800d28a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d220:	6938      	ldr	r0, [r7, #16]
 800d222:	f000 f836 	bl	800d292 <USBD_GetLen>
 800d226:	4603      	mov	r3, r0
 800d228:	3301      	adds	r3, #1
 800d22a:	b29b      	uxth	r3, r3
 800d22c:	005b      	lsls	r3, r3, #1
 800d22e:	b29a      	uxth	r2, r3
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d234:	7dfb      	ldrb	r3, [r7, #23]
 800d236:	68ba      	ldr	r2, [r7, #8]
 800d238:	4413      	add	r3, r2
 800d23a:	687a      	ldr	r2, [r7, #4]
 800d23c:	7812      	ldrb	r2, [r2, #0]
 800d23e:	701a      	strb	r2, [r3, #0]
  idx++;
 800d240:	7dfb      	ldrb	r3, [r7, #23]
 800d242:	3301      	adds	r3, #1
 800d244:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d246:	7dfb      	ldrb	r3, [r7, #23]
 800d248:	68ba      	ldr	r2, [r7, #8]
 800d24a:	4413      	add	r3, r2
 800d24c:	2203      	movs	r2, #3
 800d24e:	701a      	strb	r2, [r3, #0]
  idx++;
 800d250:	7dfb      	ldrb	r3, [r7, #23]
 800d252:	3301      	adds	r3, #1
 800d254:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d256:	e013      	b.n	800d280 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d258:	7dfb      	ldrb	r3, [r7, #23]
 800d25a:	68ba      	ldr	r2, [r7, #8]
 800d25c:	4413      	add	r3, r2
 800d25e:	693a      	ldr	r2, [r7, #16]
 800d260:	7812      	ldrb	r2, [r2, #0]
 800d262:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	3301      	adds	r3, #1
 800d268:	613b      	str	r3, [r7, #16]
    idx++;
 800d26a:	7dfb      	ldrb	r3, [r7, #23]
 800d26c:	3301      	adds	r3, #1
 800d26e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d270:	7dfb      	ldrb	r3, [r7, #23]
 800d272:	68ba      	ldr	r2, [r7, #8]
 800d274:	4413      	add	r3, r2
 800d276:	2200      	movs	r2, #0
 800d278:	701a      	strb	r2, [r3, #0]
    idx++;
 800d27a:	7dfb      	ldrb	r3, [r7, #23]
 800d27c:	3301      	adds	r3, #1
 800d27e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d280:	693b      	ldr	r3, [r7, #16]
 800d282:	781b      	ldrb	r3, [r3, #0]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d1e7      	bne.n	800d258 <USBD_GetString+0x52>
 800d288:	e000      	b.n	800d28c <USBD_GetString+0x86>
    return;
 800d28a:	bf00      	nop
  }
}
 800d28c:	3718      	adds	r7, #24
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}

0800d292 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d292:	b480      	push	{r7}
 800d294:	b085      	sub	sp, #20
 800d296:	af00      	add	r7, sp, #0
 800d298:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d29a:	2300      	movs	r3, #0
 800d29c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d2a2:	e005      	b.n	800d2b0 <USBD_GetLen+0x1e>
  {
    len++;
 800d2a4:	7bfb      	ldrb	r3, [r7, #15]
 800d2a6:	3301      	adds	r3, #1
 800d2a8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	3301      	adds	r3, #1
 800d2ae:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	781b      	ldrb	r3, [r3, #0]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d1f5      	bne.n	800d2a4 <USBD_GetLen+0x12>
  }

  return len;
 800d2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	3714      	adds	r7, #20
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c4:	4770      	bx	lr

0800d2c6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d2c6:	b580      	push	{r7, lr}
 800d2c8:	b084      	sub	sp, #16
 800d2ca:	af00      	add	r7, sp, #0
 800d2cc:	60f8      	str	r0, [r7, #12]
 800d2ce:	60b9      	str	r1, [r7, #8]
 800d2d0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	2202      	movs	r2, #2
 800d2d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	687a      	ldr	r2, [r7, #4]
 800d2de:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	687a      	ldr	r2, [r7, #4]
 800d2e4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	68ba      	ldr	r2, [r7, #8]
 800d2ea:	2100      	movs	r1, #0
 800d2ec:	68f8      	ldr	r0, [r7, #12]
 800d2ee:	f000 fcbb 	bl	800dc68 <USBD_LL_Transmit>

  return USBD_OK;
 800d2f2:	2300      	movs	r3, #0
}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	3710      	adds	r7, #16
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}

0800d2fc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b084      	sub	sp, #16
 800d300:	af00      	add	r7, sp, #0
 800d302:	60f8      	str	r0, [r7, #12]
 800d304:	60b9      	str	r1, [r7, #8]
 800d306:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	68ba      	ldr	r2, [r7, #8]
 800d30c:	2100      	movs	r1, #0
 800d30e:	68f8      	ldr	r0, [r7, #12]
 800d310:	f000 fcaa 	bl	800dc68 <USBD_LL_Transmit>

  return USBD_OK;
 800d314:	2300      	movs	r3, #0
}
 800d316:	4618      	mov	r0, r3
 800d318:	3710      	adds	r7, #16
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}

0800d31e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d31e:	b580      	push	{r7, lr}
 800d320:	b084      	sub	sp, #16
 800d322:	af00      	add	r7, sp, #0
 800d324:	60f8      	str	r0, [r7, #12]
 800d326:	60b9      	str	r1, [r7, #8]
 800d328:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	2203      	movs	r2, #3
 800d32e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	687a      	ldr	r2, [r7, #4]
 800d336:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	687a      	ldr	r2, [r7, #4]
 800d33e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	68ba      	ldr	r2, [r7, #8]
 800d346:	2100      	movs	r1, #0
 800d348:	68f8      	ldr	r0, [r7, #12]
 800d34a:	f000 fcae 	bl	800dcaa <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d34e:	2300      	movs	r3, #0
}
 800d350:	4618      	mov	r0, r3
 800d352:	3710      	adds	r7, #16
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}

0800d358 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b084      	sub	sp, #16
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	60f8      	str	r0, [r7, #12]
 800d360:	60b9      	str	r1, [r7, #8]
 800d362:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	68ba      	ldr	r2, [r7, #8]
 800d368:	2100      	movs	r1, #0
 800d36a:	68f8      	ldr	r0, [r7, #12]
 800d36c:	f000 fc9d 	bl	800dcaa <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d370:	2300      	movs	r3, #0
}
 800d372:	4618      	mov	r0, r3
 800d374:	3710      	adds	r7, #16
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}

0800d37a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d37a:	b580      	push	{r7, lr}
 800d37c:	b082      	sub	sp, #8
 800d37e:	af00      	add	r7, sp, #0
 800d380:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2204      	movs	r2, #4
 800d386:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d38a:	2300      	movs	r3, #0
 800d38c:	2200      	movs	r2, #0
 800d38e:	2100      	movs	r1, #0
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f000 fc69 	bl	800dc68 <USBD_LL_Transmit>

  return USBD_OK;
 800d396:	2300      	movs	r3, #0
}
 800d398:	4618      	mov	r0, r3
 800d39a:	3708      	adds	r7, #8
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}

0800d3a0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b082      	sub	sp, #8
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2205      	movs	r2, #5
 800d3ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	2100      	movs	r1, #0
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f000 fc77 	bl	800dcaa <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d3bc:	2300      	movs	r3, #0
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	3708      	adds	r7, #8
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}
	...

0800d3c8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	4912      	ldr	r1, [pc, #72]	; (800d418 <MX_USB_Device_Init+0x50>)
 800d3d0:	4812      	ldr	r0, [pc, #72]	; (800d41c <MX_USB_Device_Init+0x54>)
 800d3d2:	f7fe fed9 	bl	800c188 <USBD_Init>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d001      	beq.n	800d3e0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800d3dc:	f7f4 f962 	bl	80016a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800d3e0:	490f      	ldr	r1, [pc, #60]	; (800d420 <MX_USB_Device_Init+0x58>)
 800d3e2:	480e      	ldr	r0, [pc, #56]	; (800d41c <MX_USB_Device_Init+0x54>)
 800d3e4:	f7fe ff00 	bl	800c1e8 <USBD_RegisterClass>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d001      	beq.n	800d3f2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800d3ee:	f7f4 f959 	bl	80016a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800d3f2:	490c      	ldr	r1, [pc, #48]	; (800d424 <MX_USB_Device_Init+0x5c>)
 800d3f4:	4809      	ldr	r0, [pc, #36]	; (800d41c <MX_USB_Device_Init+0x54>)
 800d3f6:	f7fe fe21 	bl	800c03c <USBD_CDC_RegisterInterface>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d001      	beq.n	800d404 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800d400:	f7f4 f950 	bl	80016a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800d404:	4805      	ldr	r0, [pc, #20]	; (800d41c <MX_USB_Device_Init+0x54>)
 800d406:	f7fe ff16 	bl	800c236 <USBD_Start>
 800d40a:	4603      	mov	r3, r0
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d001      	beq.n	800d414 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800d410:	f7f4 f948 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800d414:	bf00      	nop
 800d416:	bd80      	pop	{r7, pc}
 800d418:	20002804 	.word	0x20002804
 800d41c:	2000320c 	.word	0x2000320c
 800d420:	200026ec 	.word	0x200026ec
 800d424:	200027f0 	.word	0x200027f0

0800d428 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d42c:	2200      	movs	r2, #0
 800d42e:	4905      	ldr	r1, [pc, #20]	; (800d444 <CDC_Init_FS+0x1c>)
 800d430:	4805      	ldr	r0, [pc, #20]	; (800d448 <CDC_Init_FS+0x20>)
 800d432:	f7fe fe18 	bl	800c066 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d436:	4905      	ldr	r1, [pc, #20]	; (800d44c <CDC_Init_FS+0x24>)
 800d438:	4803      	ldr	r0, [pc, #12]	; (800d448 <CDC_Init_FS+0x20>)
 800d43a:	f7fe fe32 	bl	800c0a2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d43e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d440:	4618      	mov	r0, r3
 800d442:	bd80      	pop	{r7, pc}
 800d444:	20003cdc 	.word	0x20003cdc
 800d448:	2000320c 	.word	0x2000320c
 800d44c:	200034dc 	.word	0x200034dc

0800d450 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d450:	b480      	push	{r7}
 800d452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d454:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d456:	4618      	mov	r0, r3
 800d458:	46bd      	mov	sp, r7
 800d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45e:	4770      	bx	lr

0800d460 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d460:	b480      	push	{r7}
 800d462:	b083      	sub	sp, #12
 800d464:	af00      	add	r7, sp, #0
 800d466:	4603      	mov	r3, r0
 800d468:	6039      	str	r1, [r7, #0]
 800d46a:	71fb      	strb	r3, [r7, #7]
 800d46c:	4613      	mov	r3, r2
 800d46e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d470:	79fb      	ldrb	r3, [r7, #7]
 800d472:	2b23      	cmp	r3, #35	; 0x23
 800d474:	d84a      	bhi.n	800d50c <CDC_Control_FS+0xac>
 800d476:	a201      	add	r2, pc, #4	; (adr r2, 800d47c <CDC_Control_FS+0x1c>)
 800d478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d47c:	0800d50d 	.word	0x0800d50d
 800d480:	0800d50d 	.word	0x0800d50d
 800d484:	0800d50d 	.word	0x0800d50d
 800d488:	0800d50d 	.word	0x0800d50d
 800d48c:	0800d50d 	.word	0x0800d50d
 800d490:	0800d50d 	.word	0x0800d50d
 800d494:	0800d50d 	.word	0x0800d50d
 800d498:	0800d50d 	.word	0x0800d50d
 800d49c:	0800d50d 	.word	0x0800d50d
 800d4a0:	0800d50d 	.word	0x0800d50d
 800d4a4:	0800d50d 	.word	0x0800d50d
 800d4a8:	0800d50d 	.word	0x0800d50d
 800d4ac:	0800d50d 	.word	0x0800d50d
 800d4b0:	0800d50d 	.word	0x0800d50d
 800d4b4:	0800d50d 	.word	0x0800d50d
 800d4b8:	0800d50d 	.word	0x0800d50d
 800d4bc:	0800d50d 	.word	0x0800d50d
 800d4c0:	0800d50d 	.word	0x0800d50d
 800d4c4:	0800d50d 	.word	0x0800d50d
 800d4c8:	0800d50d 	.word	0x0800d50d
 800d4cc:	0800d50d 	.word	0x0800d50d
 800d4d0:	0800d50d 	.word	0x0800d50d
 800d4d4:	0800d50d 	.word	0x0800d50d
 800d4d8:	0800d50d 	.word	0x0800d50d
 800d4dc:	0800d50d 	.word	0x0800d50d
 800d4e0:	0800d50d 	.word	0x0800d50d
 800d4e4:	0800d50d 	.word	0x0800d50d
 800d4e8:	0800d50d 	.word	0x0800d50d
 800d4ec:	0800d50d 	.word	0x0800d50d
 800d4f0:	0800d50d 	.word	0x0800d50d
 800d4f4:	0800d50d 	.word	0x0800d50d
 800d4f8:	0800d50d 	.word	0x0800d50d
 800d4fc:	0800d50d 	.word	0x0800d50d
 800d500:	0800d50d 	.word	0x0800d50d
 800d504:	0800d50d 	.word	0x0800d50d
 800d508:	0800d50d 	.word	0x0800d50d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d50c:	bf00      	nop
  }

  return (USBD_OK);
 800d50e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d510:	4618      	mov	r0, r3
 800d512:	370c      	adds	r7, #12
 800d514:	46bd      	mov	sp, r7
 800d516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51a:	4770      	bx	lr

0800d51c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b084      	sub	sp, #16
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  input_received_flag = 1;
 800d526:	4b11      	ldr	r3, [pc, #68]	; (800d56c <CDC_Receive_FS+0x50>)
 800d528:	2201      	movs	r2, #1
 800d52a:	701a      	strb	r2, [r3, #0]
  memset (UserRxBufferFS, '\0', APP_RX_DATA_SIZE);  // clear the buffer
 800d52c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d530:	2100      	movs	r1, #0
 800d532:	480f      	ldr	r0, [pc, #60]	; (800d570 <CDC_Receive_FS+0x54>)
 800d534:	f000 fca6 	bl	800de84 <memset>
  uint8_t len = (uint8_t) Len;
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	73fb      	strb	r3, [r7, #15]
  memcpy(UserRxBufferFS, Buf, len);  // copy the data to the buffer
 800d53c:	7bfb      	ldrb	r3, [r7, #15]
 800d53e:	461a      	mov	r2, r3
 800d540:	6879      	ldr	r1, [r7, #4]
 800d542:	480b      	ldr	r0, [pc, #44]	; (800d570 <CDC_Receive_FS+0x54>)
 800d544:	f000 fc90 	bl	800de68 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 800d548:	7bfb      	ldrb	r3, [r7, #15]
 800d54a:	461a      	mov	r2, r3
 800d54c:	2100      	movs	r1, #0
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f000 fc98 	bl	800de84 <memset>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d554:	6879      	ldr	r1, [r7, #4]
 800d556:	4807      	ldr	r0, [pc, #28]	; (800d574 <CDC_Receive_FS+0x58>)
 800d558:	f7fe fda3 	bl	800c0a2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d55c:	4805      	ldr	r0, [pc, #20]	; (800d574 <CDC_Receive_FS+0x58>)
 800d55e:	f7fe fde9 	bl	800c134 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d562:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d564:	4618      	mov	r0, r3
 800d566:	3710      	adds	r7, #16
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}
 800d56c:	200044dc 	.word	0x200044dc
 800d570:	200034dc 	.word	0x200034dc
 800d574:	2000320c 	.word	0x2000320c

0800d578 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b084      	sub	sp, #16
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
 800d580:	460b      	mov	r3, r1
 800d582:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d584:	2300      	movs	r3, #0
 800d586:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d588:	4b0d      	ldr	r3, [pc, #52]	; (800d5c0 <CDC_Transmit_FS+0x48>)
 800d58a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d58e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d596:	2b00      	cmp	r3, #0
 800d598:	d001      	beq.n	800d59e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d59a:	2301      	movs	r3, #1
 800d59c:	e00b      	b.n	800d5b6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d59e:	887b      	ldrh	r3, [r7, #2]
 800d5a0:	461a      	mov	r2, r3
 800d5a2:	6879      	ldr	r1, [r7, #4]
 800d5a4:	4806      	ldr	r0, [pc, #24]	; (800d5c0 <CDC_Transmit_FS+0x48>)
 800d5a6:	f7fe fd5e 	bl	800c066 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d5aa:	4805      	ldr	r0, [pc, #20]	; (800d5c0 <CDC_Transmit_FS+0x48>)
 800d5ac:	f7fe fd92 	bl	800c0d4 <USBD_CDC_TransmitPacket>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d5b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3710      	adds	r7, #16
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	bf00      	nop
 800d5c0:	2000320c 	.word	0x2000320c

0800d5c4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b087      	sub	sp, #28
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	60f8      	str	r0, [r7, #12]
 800d5cc:	60b9      	str	r1, [r7, #8]
 800d5ce:	4613      	mov	r3, r2
 800d5d0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d5d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	371c      	adds	r7, #28
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e4:	4770      	bx	lr
	...

0800d5e8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	b083      	sub	sp, #12
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	6039      	str	r1, [r7, #0]
 800d5f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	2212      	movs	r2, #18
 800d5f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800d5fa:	4b03      	ldr	r3, [pc, #12]	; (800d608 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	370c      	adds	r7, #12
 800d600:	46bd      	mov	sp, r7
 800d602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d606:	4770      	bx	lr
 800d608:	20002824 	.word	0x20002824

0800d60c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d60c:	b480      	push	{r7}
 800d60e:	b083      	sub	sp, #12
 800d610:	af00      	add	r7, sp, #0
 800d612:	4603      	mov	r3, r0
 800d614:	6039      	str	r1, [r7, #0]
 800d616:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	2204      	movs	r2, #4
 800d61c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d61e:	4b03      	ldr	r3, [pc, #12]	; (800d62c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800d620:	4618      	mov	r0, r3
 800d622:	370c      	adds	r7, #12
 800d624:	46bd      	mov	sp, r7
 800d626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62a:	4770      	bx	lr
 800d62c:	20002838 	.word	0x20002838

0800d630 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b082      	sub	sp, #8
 800d634:	af00      	add	r7, sp, #0
 800d636:	4603      	mov	r3, r0
 800d638:	6039      	str	r1, [r7, #0]
 800d63a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d63c:	79fb      	ldrb	r3, [r7, #7]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d105      	bne.n	800d64e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d642:	683a      	ldr	r2, [r7, #0]
 800d644:	4907      	ldr	r1, [pc, #28]	; (800d664 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d646:	4808      	ldr	r0, [pc, #32]	; (800d668 <USBD_CDC_ProductStrDescriptor+0x38>)
 800d648:	f7ff fddd 	bl	800d206 <USBD_GetString>
 800d64c:	e004      	b.n	800d658 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d64e:	683a      	ldr	r2, [r7, #0]
 800d650:	4904      	ldr	r1, [pc, #16]	; (800d664 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d652:	4805      	ldr	r0, [pc, #20]	; (800d668 <USBD_CDC_ProductStrDescriptor+0x38>)
 800d654:	f7ff fdd7 	bl	800d206 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d658:	4b02      	ldr	r3, [pc, #8]	; (800d664 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3708      	adds	r7, #8
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
 800d662:	bf00      	nop
 800d664:	200044e0 	.word	0x200044e0
 800d668:	080108d0 	.word	0x080108d0

0800d66c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b082      	sub	sp, #8
 800d670:	af00      	add	r7, sp, #0
 800d672:	4603      	mov	r3, r0
 800d674:	6039      	str	r1, [r7, #0]
 800d676:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d678:	683a      	ldr	r2, [r7, #0]
 800d67a:	4904      	ldr	r1, [pc, #16]	; (800d68c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800d67c:	4804      	ldr	r0, [pc, #16]	; (800d690 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800d67e:	f7ff fdc2 	bl	800d206 <USBD_GetString>
  return USBD_StrDesc;
 800d682:	4b02      	ldr	r3, [pc, #8]	; (800d68c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800d684:	4618      	mov	r0, r3
 800d686:	3708      	adds	r7, #8
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}
 800d68c:	200044e0 	.word	0x200044e0
 800d690:	080108e8 	.word	0x080108e8

0800d694 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b082      	sub	sp, #8
 800d698:	af00      	add	r7, sp, #0
 800d69a:	4603      	mov	r3, r0
 800d69c:	6039      	str	r1, [r7, #0]
 800d69e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	221a      	movs	r2, #26
 800d6a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d6a6:	f000 f843 	bl	800d730 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800d6aa:	4b02      	ldr	r3, [pc, #8]	; (800d6b4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3708      	adds	r7, #8
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}
 800d6b4:	2000283c 	.word	0x2000283c

0800d6b8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b082      	sub	sp, #8
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	4603      	mov	r3, r0
 800d6c0:	6039      	str	r1, [r7, #0]
 800d6c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d6c4:	79fb      	ldrb	r3, [r7, #7]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d105      	bne.n	800d6d6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d6ca:	683a      	ldr	r2, [r7, #0]
 800d6cc:	4907      	ldr	r1, [pc, #28]	; (800d6ec <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d6ce:	4808      	ldr	r0, [pc, #32]	; (800d6f0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d6d0:	f7ff fd99 	bl	800d206 <USBD_GetString>
 800d6d4:	e004      	b.n	800d6e0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d6d6:	683a      	ldr	r2, [r7, #0]
 800d6d8:	4904      	ldr	r1, [pc, #16]	; (800d6ec <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d6da:	4805      	ldr	r0, [pc, #20]	; (800d6f0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d6dc:	f7ff fd93 	bl	800d206 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d6e0:	4b02      	ldr	r3, [pc, #8]	; (800d6ec <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3708      	adds	r7, #8
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}
 800d6ea:	bf00      	nop
 800d6ec:	200044e0 	.word	0x200044e0
 800d6f0:	080108fc 	.word	0x080108fc

0800d6f4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b082      	sub	sp, #8
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	6039      	str	r1, [r7, #0]
 800d6fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d700:	79fb      	ldrb	r3, [r7, #7]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d105      	bne.n	800d712 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d706:	683a      	ldr	r2, [r7, #0]
 800d708:	4907      	ldr	r1, [pc, #28]	; (800d728 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d70a:	4808      	ldr	r0, [pc, #32]	; (800d72c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d70c:	f7ff fd7b 	bl	800d206 <USBD_GetString>
 800d710:	e004      	b.n	800d71c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d712:	683a      	ldr	r2, [r7, #0]
 800d714:	4904      	ldr	r1, [pc, #16]	; (800d728 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d716:	4805      	ldr	r0, [pc, #20]	; (800d72c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d718:	f7ff fd75 	bl	800d206 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d71c:	4b02      	ldr	r3, [pc, #8]	; (800d728 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3708      	adds	r7, #8
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
 800d726:	bf00      	nop
 800d728:	200044e0 	.word	0x200044e0
 800d72c:	08010908 	.word	0x08010908

0800d730 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b084      	sub	sp, #16
 800d734:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d736:	4b0f      	ldr	r3, [pc, #60]	; (800d774 <Get_SerialNum+0x44>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d73c:	4b0e      	ldr	r3, [pc, #56]	; (800d778 <Get_SerialNum+0x48>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d742:	4b0e      	ldr	r3, [pc, #56]	; (800d77c <Get_SerialNum+0x4c>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d748:	68fa      	ldr	r2, [r7, #12]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	4413      	add	r3, r2
 800d74e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d009      	beq.n	800d76a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d756:	2208      	movs	r2, #8
 800d758:	4909      	ldr	r1, [pc, #36]	; (800d780 <Get_SerialNum+0x50>)
 800d75a:	68f8      	ldr	r0, [r7, #12]
 800d75c:	f000 f814 	bl	800d788 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d760:	2204      	movs	r2, #4
 800d762:	4908      	ldr	r1, [pc, #32]	; (800d784 <Get_SerialNum+0x54>)
 800d764:	68b8      	ldr	r0, [r7, #8]
 800d766:	f000 f80f 	bl	800d788 <IntToUnicode>
  }
}
 800d76a:	bf00      	nop
 800d76c:	3710      	adds	r7, #16
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}
 800d772:	bf00      	nop
 800d774:	1fff7590 	.word	0x1fff7590
 800d778:	1fff7594 	.word	0x1fff7594
 800d77c:	1fff7598 	.word	0x1fff7598
 800d780:	2000283e 	.word	0x2000283e
 800d784:	2000284e 	.word	0x2000284e

0800d788 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d788:	b480      	push	{r7}
 800d78a:	b087      	sub	sp, #28
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	60f8      	str	r0, [r7, #12]
 800d790:	60b9      	str	r1, [r7, #8]
 800d792:	4613      	mov	r3, r2
 800d794:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d796:	2300      	movs	r3, #0
 800d798:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d79a:	2300      	movs	r3, #0
 800d79c:	75fb      	strb	r3, [r7, #23]
 800d79e:	e027      	b.n	800d7f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	0f1b      	lsrs	r3, r3, #28
 800d7a4:	2b09      	cmp	r3, #9
 800d7a6:	d80b      	bhi.n	800d7c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	0f1b      	lsrs	r3, r3, #28
 800d7ac:	b2da      	uxtb	r2, r3
 800d7ae:	7dfb      	ldrb	r3, [r7, #23]
 800d7b0:	005b      	lsls	r3, r3, #1
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	440b      	add	r3, r1
 800d7b8:	3230      	adds	r2, #48	; 0x30
 800d7ba:	b2d2      	uxtb	r2, r2
 800d7bc:	701a      	strb	r2, [r3, #0]
 800d7be:	e00a      	b.n	800d7d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	0f1b      	lsrs	r3, r3, #28
 800d7c4:	b2da      	uxtb	r2, r3
 800d7c6:	7dfb      	ldrb	r3, [r7, #23]
 800d7c8:	005b      	lsls	r3, r3, #1
 800d7ca:	4619      	mov	r1, r3
 800d7cc:	68bb      	ldr	r3, [r7, #8]
 800d7ce:	440b      	add	r3, r1
 800d7d0:	3237      	adds	r2, #55	; 0x37
 800d7d2:	b2d2      	uxtb	r2, r2
 800d7d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	011b      	lsls	r3, r3, #4
 800d7da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d7dc:	7dfb      	ldrb	r3, [r7, #23]
 800d7de:	005b      	lsls	r3, r3, #1
 800d7e0:	3301      	adds	r3, #1
 800d7e2:	68ba      	ldr	r2, [r7, #8]
 800d7e4:	4413      	add	r3, r2
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d7ea:	7dfb      	ldrb	r3, [r7, #23]
 800d7ec:	3301      	adds	r3, #1
 800d7ee:	75fb      	strb	r3, [r7, #23]
 800d7f0:	7dfa      	ldrb	r2, [r7, #23]
 800d7f2:	79fb      	ldrb	r3, [r7, #7]
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d3d3      	bcc.n	800d7a0 <IntToUnicode+0x18>
  }
}
 800d7f8:	bf00      	nop
 800d7fa:	bf00      	nop
 800d7fc:	371c      	adds	r7, #28
 800d7fe:	46bd      	mov	sp, r7
 800d800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d804:	4770      	bx	lr
	...

0800d808 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b098      	sub	sp, #96	; 0x60
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d810:	f107 030c 	add.w	r3, r7, #12
 800d814:	2254      	movs	r2, #84	; 0x54
 800d816:	2100      	movs	r1, #0
 800d818:	4618      	mov	r0, r3
 800d81a:	f000 fb33 	bl	800de84 <memset>
  if(pcdHandle->Instance==USB)
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	4a15      	ldr	r2, [pc, #84]	; (800d878 <HAL_PCD_MspInit+0x70>)
 800d824:	4293      	cmp	r3, r2
 800d826:	d122      	bne.n	800d86e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d82c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d82e:	2300      	movs	r3, #0
 800d830:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d832:	f107 030c 	add.w	r3, r7, #12
 800d836:	4618      	mov	r0, r3
 800d838:	f7f9 fb1a 	bl	8006e70 <HAL_RCCEx_PeriphCLKConfig>
 800d83c:	4603      	mov	r3, r0
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d001      	beq.n	800d846 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800d842:	f7f3 ff2f 	bl	80016a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d846:	4b0d      	ldr	r3, [pc, #52]	; (800d87c <HAL_PCD_MspInit+0x74>)
 800d848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d84a:	4a0c      	ldr	r2, [pc, #48]	; (800d87c <HAL_PCD_MspInit+0x74>)
 800d84c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d850:	6593      	str	r3, [r2, #88]	; 0x58
 800d852:	4b0a      	ldr	r3, [pc, #40]	; (800d87c <HAL_PCD_MspInit+0x74>)
 800d854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d856:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d85a:	60bb      	str	r3, [r7, #8]
 800d85c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800d85e:	2200      	movs	r2, #0
 800d860:	2100      	movs	r1, #0
 800d862:	2014      	movs	r0, #20
 800d864:	f7f5 fee1 	bl	800362a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800d868:	2014      	movs	r0, #20
 800d86a:	f7f5 fef8 	bl	800365e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d86e:	bf00      	nop
 800d870:	3760      	adds	r7, #96	; 0x60
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}
 800d876:	bf00      	nop
 800d878:	40005c00 	.word	0x40005c00
 800d87c:	40021000 	.word	0x40021000

0800d880 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b082      	sub	sp, #8
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d894:	4619      	mov	r1, r3
 800d896:	4610      	mov	r0, r2
 800d898:	f7fe fd18 	bl	800c2cc <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800d89c:	bf00      	nop
 800d89e:	3708      	adds	r7, #8
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}

0800d8a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b082      	sub	sp, #8
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	460b      	mov	r3, r1
 800d8ae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800d8b6:	78fa      	ldrb	r2, [r7, #3]
 800d8b8:	6879      	ldr	r1, [r7, #4]
 800d8ba:	4613      	mov	r3, r2
 800d8bc:	009b      	lsls	r3, r3, #2
 800d8be:	4413      	add	r3, r2
 800d8c0:	00db      	lsls	r3, r3, #3
 800d8c2:	440b      	add	r3, r1
 800d8c4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d8c8:	681a      	ldr	r2, [r3, #0]
 800d8ca:	78fb      	ldrb	r3, [r7, #3]
 800d8cc:	4619      	mov	r1, r3
 800d8ce:	f7fe fd52 	bl	800c376 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800d8d2:	bf00      	nop
 800d8d4:	3708      	adds	r7, #8
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}

0800d8da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8da:	b580      	push	{r7, lr}
 800d8dc:	b082      	sub	sp, #8
 800d8de:	af00      	add	r7, sp, #0
 800d8e0:	6078      	str	r0, [r7, #4]
 800d8e2:	460b      	mov	r3, r1
 800d8e4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800d8ec:	78fa      	ldrb	r2, [r7, #3]
 800d8ee:	6879      	ldr	r1, [r7, #4]
 800d8f0:	4613      	mov	r3, r2
 800d8f2:	009b      	lsls	r3, r3, #2
 800d8f4:	4413      	add	r3, r2
 800d8f6:	00db      	lsls	r3, r3, #3
 800d8f8:	440b      	add	r3, r1
 800d8fa:	333c      	adds	r3, #60	; 0x3c
 800d8fc:	681a      	ldr	r2, [r3, #0]
 800d8fe:	78fb      	ldrb	r3, [r7, #3]
 800d900:	4619      	mov	r1, r3
 800d902:	f7fe fd9b 	bl	800c43c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800d906:	bf00      	nop
 800d908:	3708      	adds	r7, #8
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}

0800d90e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d90e:	b580      	push	{r7, lr}
 800d910:	b082      	sub	sp, #8
 800d912:	af00      	add	r7, sp, #0
 800d914:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d91c:	4618      	mov	r0, r3
 800d91e:	f7fe feaf 	bl	800c680 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800d922:	bf00      	nop
 800d924:	3708      	adds	r7, #8
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}

0800d92a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d92a:	b580      	push	{r7, lr}
 800d92c:	b084      	sub	sp, #16
 800d92e:	af00      	add	r7, sp, #0
 800d930:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d932:	2301      	movs	r3, #1
 800d934:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	689b      	ldr	r3, [r3, #8]
 800d93a:	2b02      	cmp	r3, #2
 800d93c:	d001      	beq.n	800d942 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d93e:	f7f3 feb1 	bl	80016a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d948:	7bfa      	ldrb	r2, [r7, #15]
 800d94a:	4611      	mov	r1, r2
 800d94c:	4618      	mov	r0, r3
 800d94e:	f7fe fe59 	bl	800c604 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d958:	4618      	mov	r0, r3
 800d95a:	f7fe fe05 	bl	800c568 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800d95e:	bf00      	nop
 800d960:	3710      	adds	r7, #16
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}
	...

0800d968 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b082      	sub	sp, #8
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d976:	4618      	mov	r0, r3
 800d978:	f7fe fe54 	bl	800c624 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	699b      	ldr	r3, [r3, #24]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d005      	beq.n	800d990 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d984:	4b04      	ldr	r3, [pc, #16]	; (800d998 <HAL_PCD_SuspendCallback+0x30>)
 800d986:	691b      	ldr	r3, [r3, #16]
 800d988:	4a03      	ldr	r2, [pc, #12]	; (800d998 <HAL_PCD_SuspendCallback+0x30>)
 800d98a:	f043 0306 	orr.w	r3, r3, #6
 800d98e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800d990:	bf00      	nop
 800d992:	3708      	adds	r7, #8
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}
 800d998:	e000ed00 	.word	0xe000ed00

0800d99c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b082      	sub	sp, #8
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	699b      	ldr	r3, [r3, #24]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d007      	beq.n	800d9bc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d9ac:	4b08      	ldr	r3, [pc, #32]	; (800d9d0 <HAL_PCD_ResumeCallback+0x34>)
 800d9ae:	691b      	ldr	r3, [r3, #16]
 800d9b0:	4a07      	ldr	r2, [pc, #28]	; (800d9d0 <HAL_PCD_ResumeCallback+0x34>)
 800d9b2:	f023 0306 	bic.w	r3, r3, #6
 800d9b6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d9b8:	f000 f9fa 	bl	800ddb0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f7fe fe44 	bl	800c650 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800d9c8:	bf00      	nop
 800d9ca:	3708      	adds	r7, #8
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}
 800d9d0:	e000ed00 	.word	0xe000ed00

0800d9d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b082      	sub	sp, #8
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800d9dc:	4a2b      	ldr	r2, [pc, #172]	; (800da8c <USBD_LL_Init+0xb8>)
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	4a29      	ldr	r2, [pc, #164]	; (800da8c <USBD_LL_Init+0xb8>)
 800d9e8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800d9ec:	4b27      	ldr	r3, [pc, #156]	; (800da8c <USBD_LL_Init+0xb8>)
 800d9ee:	4a28      	ldr	r2, [pc, #160]	; (800da90 <USBD_LL_Init+0xbc>)
 800d9f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d9f2:	4b26      	ldr	r3, [pc, #152]	; (800da8c <USBD_LL_Init+0xb8>)
 800d9f4:	2208      	movs	r2, #8
 800d9f6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d9f8:	4b24      	ldr	r3, [pc, #144]	; (800da8c <USBD_LL_Init+0xb8>)
 800d9fa:	2202      	movs	r2, #2
 800d9fc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d9fe:	4b23      	ldr	r3, [pc, #140]	; (800da8c <USBD_LL_Init+0xb8>)
 800da00:	2202      	movs	r2, #2
 800da02:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800da04:	4b21      	ldr	r3, [pc, #132]	; (800da8c <USBD_LL_Init+0xb8>)
 800da06:	2200      	movs	r2, #0
 800da08:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800da0a:	4b20      	ldr	r3, [pc, #128]	; (800da8c <USBD_LL_Init+0xb8>)
 800da0c:	2200      	movs	r2, #0
 800da0e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800da10:	4b1e      	ldr	r3, [pc, #120]	; (800da8c <USBD_LL_Init+0xb8>)
 800da12:	2200      	movs	r2, #0
 800da14:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800da16:	4b1d      	ldr	r3, [pc, #116]	; (800da8c <USBD_LL_Init+0xb8>)
 800da18:	2200      	movs	r2, #0
 800da1a:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800da1c:	481b      	ldr	r0, [pc, #108]	; (800da8c <USBD_LL_Init+0xb8>)
 800da1e:	f7f6 ff4c 	bl	80048ba <HAL_PCD_Init>
 800da22:	4603      	mov	r3, r0
 800da24:	2b00      	cmp	r3, #0
 800da26:	d001      	beq.n	800da2c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800da28:	f7f3 fe3c 	bl	80016a4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800da32:	2318      	movs	r3, #24
 800da34:	2200      	movs	r2, #0
 800da36:	2100      	movs	r1, #0
 800da38:	f7f8 fc05 	bl	8006246 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800da42:	2358      	movs	r3, #88	; 0x58
 800da44:	2200      	movs	r2, #0
 800da46:	2180      	movs	r1, #128	; 0x80
 800da48:	f7f8 fbfd 	bl	8006246 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800da52:	23c0      	movs	r3, #192	; 0xc0
 800da54:	2200      	movs	r2, #0
 800da56:	2181      	movs	r1, #129	; 0x81
 800da58:	f7f8 fbf5 	bl	8006246 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800da62:	f44f 7388 	mov.w	r3, #272	; 0x110
 800da66:	2200      	movs	r2, #0
 800da68:	2101      	movs	r1, #1
 800da6a:	f7f8 fbec 	bl	8006246 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800da74:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da78:	2200      	movs	r2, #0
 800da7a:	2182      	movs	r1, #130	; 0x82
 800da7c:	f7f8 fbe3 	bl	8006246 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800da80:	2300      	movs	r3, #0
}
 800da82:	4618      	mov	r0, r3
 800da84:	3708      	adds	r7, #8
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}
 800da8a:	bf00      	nop
 800da8c:	200046e0 	.word	0x200046e0
 800da90:	40005c00 	.word	0x40005c00

0800da94 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b084      	sub	sp, #16
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da9c:	2300      	movs	r3, #0
 800da9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800daa0:	2300      	movs	r3, #0
 800daa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800daaa:	4618      	mov	r0, r3
 800daac:	f7f6 ffea 	bl	8004a84 <HAL_PCD_Start>
 800dab0:	4603      	mov	r3, r0
 800dab2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dab4:	7bfb      	ldrb	r3, [r7, #15]
 800dab6:	4618      	mov	r0, r3
 800dab8:	f000 f980 	bl	800ddbc <USBD_Get_USB_Status>
 800dabc:	4603      	mov	r3, r0
 800dabe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dac0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3710      	adds	r7, #16
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}

0800daca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800daca:	b580      	push	{r7, lr}
 800dacc:	b084      	sub	sp, #16
 800dace:	af00      	add	r7, sp, #0
 800dad0:	6078      	str	r0, [r7, #4]
 800dad2:	4608      	mov	r0, r1
 800dad4:	4611      	mov	r1, r2
 800dad6:	461a      	mov	r2, r3
 800dad8:	4603      	mov	r3, r0
 800dada:	70fb      	strb	r3, [r7, #3]
 800dadc:	460b      	mov	r3, r1
 800dade:	70bb      	strb	r3, [r7, #2]
 800dae0:	4613      	mov	r3, r2
 800dae2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dae4:	2300      	movs	r3, #0
 800dae6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dae8:	2300      	movs	r3, #0
 800daea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800daf2:	78bb      	ldrb	r3, [r7, #2]
 800daf4:	883a      	ldrh	r2, [r7, #0]
 800daf6:	78f9      	ldrb	r1, [r7, #3]
 800daf8:	f7f7 f932 	bl	8004d60 <HAL_PCD_EP_Open>
 800dafc:	4603      	mov	r3, r0
 800dafe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db00:	7bfb      	ldrb	r3, [r7, #15]
 800db02:	4618      	mov	r0, r3
 800db04:	f000 f95a 	bl	800ddbc <USBD_Get_USB_Status>
 800db08:	4603      	mov	r3, r0
 800db0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800db0e:	4618      	mov	r0, r3
 800db10:	3710      	adds	r7, #16
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}

0800db16 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db16:	b580      	push	{r7, lr}
 800db18:	b084      	sub	sp, #16
 800db1a:	af00      	add	r7, sp, #0
 800db1c:	6078      	str	r0, [r7, #4]
 800db1e:	460b      	mov	r3, r1
 800db20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db22:	2300      	movs	r3, #0
 800db24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db26:	2300      	movs	r3, #0
 800db28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800db30:	78fa      	ldrb	r2, [r7, #3]
 800db32:	4611      	mov	r1, r2
 800db34:	4618      	mov	r0, r3
 800db36:	f7f7 f979 	bl	8004e2c <HAL_PCD_EP_Close>
 800db3a:	4603      	mov	r3, r0
 800db3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db3e:	7bfb      	ldrb	r3, [r7, #15]
 800db40:	4618      	mov	r0, r3
 800db42:	f000 f93b 	bl	800ddbc <USBD_Get_USB_Status>
 800db46:	4603      	mov	r3, r0
 800db48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	3710      	adds	r7, #16
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}

0800db54 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b084      	sub	sp, #16
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
 800db5c:	460b      	mov	r3, r1
 800db5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db60:	2300      	movs	r3, #0
 800db62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db64:	2300      	movs	r3, #0
 800db66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800db6e:	78fa      	ldrb	r2, [r7, #3]
 800db70:	4611      	mov	r1, r2
 800db72:	4618      	mov	r0, r3
 800db74:	f7f7 fa3a 	bl	8004fec <HAL_PCD_EP_SetStall>
 800db78:	4603      	mov	r3, r0
 800db7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db7c:	7bfb      	ldrb	r3, [r7, #15]
 800db7e:	4618      	mov	r0, r3
 800db80:	f000 f91c 	bl	800ddbc <USBD_Get_USB_Status>
 800db84:	4603      	mov	r3, r0
 800db86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db88:	7bbb      	ldrb	r3, [r7, #14]
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3710      	adds	r7, #16
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}

0800db92 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db92:	b580      	push	{r7, lr}
 800db94:	b084      	sub	sp, #16
 800db96:	af00      	add	r7, sp, #0
 800db98:	6078      	str	r0, [r7, #4]
 800db9a:	460b      	mov	r3, r1
 800db9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db9e:	2300      	movs	r3, #0
 800dba0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dba2:	2300      	movs	r3, #0
 800dba4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dbac:	78fa      	ldrb	r2, [r7, #3]
 800dbae:	4611      	mov	r1, r2
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f7f7 fa6d 	bl	8005090 <HAL_PCD_EP_ClrStall>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbba:	7bfb      	ldrb	r3, [r7, #15]
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f000 f8fd 	bl	800ddbc <USBD_Get_USB_Status>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbc6:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3710      	adds	r7, #16
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}

0800dbd0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b085      	sub	sp, #20
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	460b      	mov	r3, r1
 800dbda:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dbe2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dbe4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	da0c      	bge.n	800dc06 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dbec:	78fb      	ldrb	r3, [r7, #3]
 800dbee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbf2:	68f9      	ldr	r1, [r7, #12]
 800dbf4:	1c5a      	adds	r2, r3, #1
 800dbf6:	4613      	mov	r3, r2
 800dbf8:	009b      	lsls	r3, r3, #2
 800dbfa:	4413      	add	r3, r2
 800dbfc:	00db      	lsls	r3, r3, #3
 800dbfe:	440b      	add	r3, r1
 800dc00:	3302      	adds	r3, #2
 800dc02:	781b      	ldrb	r3, [r3, #0]
 800dc04:	e00b      	b.n	800dc1e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dc06:	78fb      	ldrb	r3, [r7, #3]
 800dc08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dc0c:	68f9      	ldr	r1, [r7, #12]
 800dc0e:	4613      	mov	r3, r2
 800dc10:	009b      	lsls	r3, r3, #2
 800dc12:	4413      	add	r3, r2
 800dc14:	00db      	lsls	r3, r3, #3
 800dc16:	440b      	add	r3, r1
 800dc18:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800dc1c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3714      	adds	r7, #20
 800dc22:	46bd      	mov	sp, r7
 800dc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc28:	4770      	bx	lr

0800dc2a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dc2a:	b580      	push	{r7, lr}
 800dc2c:	b084      	sub	sp, #16
 800dc2e:	af00      	add	r7, sp, #0
 800dc30:	6078      	str	r0, [r7, #4]
 800dc32:	460b      	mov	r3, r1
 800dc34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc36:	2300      	movs	r3, #0
 800dc38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dc44:	78fa      	ldrb	r2, [r7, #3]
 800dc46:	4611      	mov	r1, r2
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f7f7 f864 	bl	8004d16 <HAL_PCD_SetAddress>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc52:	7bfb      	ldrb	r3, [r7, #15]
 800dc54:	4618      	mov	r0, r3
 800dc56:	f000 f8b1 	bl	800ddbc <USBD_Get_USB_Status>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3710      	adds	r7, #16
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b086      	sub	sp, #24
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	60f8      	str	r0, [r7, #12]
 800dc70:	607a      	str	r2, [r7, #4]
 800dc72:	603b      	str	r3, [r7, #0]
 800dc74:	460b      	mov	r3, r1
 800dc76:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc78:	2300      	movs	r3, #0
 800dc7a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dc86:	7af9      	ldrb	r1, [r7, #11]
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	687a      	ldr	r2, [r7, #4]
 800dc8c:	f7f7 f96b 	bl	8004f66 <HAL_PCD_EP_Transmit>
 800dc90:	4603      	mov	r3, r0
 800dc92:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc94:	7dfb      	ldrb	r3, [r7, #23]
 800dc96:	4618      	mov	r0, r3
 800dc98:	f000 f890 	bl	800ddbc <USBD_Get_USB_Status>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dca0:	7dbb      	ldrb	r3, [r7, #22]
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	3718      	adds	r7, #24
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}

0800dcaa <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dcaa:	b580      	push	{r7, lr}
 800dcac:	b086      	sub	sp, #24
 800dcae:	af00      	add	r7, sp, #0
 800dcb0:	60f8      	str	r0, [r7, #12]
 800dcb2:	607a      	str	r2, [r7, #4]
 800dcb4:	603b      	str	r3, [r7, #0]
 800dcb6:	460b      	mov	r3, r1
 800dcb8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dcc8:	7af9      	ldrb	r1, [r7, #11]
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	687a      	ldr	r2, [r7, #4]
 800dcce:	f7f7 f8f5 	bl	8004ebc <HAL_PCD_EP_Receive>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcd6:	7dfb      	ldrb	r3, [r7, #23]
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f000 f86f 	bl	800ddbc <USBD_Get_USB_Status>
 800dcde:	4603      	mov	r3, r0
 800dce0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dce2:	7dbb      	ldrb	r3, [r7, #22]
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3718      	adds	r7, #24
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b082      	sub	sp, #8
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	460b      	mov	r3, r1
 800dcf6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dcfe:	78fa      	ldrb	r2, [r7, #3]
 800dd00:	4611      	mov	r1, r2
 800dd02:	4618      	mov	r0, r3
 800dd04:	f7f7 f917 	bl	8004f36 <HAL_PCD_EP_GetRxCount>
 800dd08:	4603      	mov	r3, r0
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3708      	adds	r7, #8
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
	...

0800dd14 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b082      	sub	sp, #8
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	460b      	mov	r3, r1
 800dd1e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800dd20:	78fb      	ldrb	r3, [r7, #3]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d002      	beq.n	800dd2c <HAL_PCDEx_LPM_Callback+0x18>
 800dd26:	2b01      	cmp	r3, #1
 800dd28:	d013      	beq.n	800dd52 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800dd2a:	e023      	b.n	800dd74 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	699b      	ldr	r3, [r3, #24]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d007      	beq.n	800dd44 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800dd34:	f000 f83c 	bl	800ddb0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dd38:	4b10      	ldr	r3, [pc, #64]	; (800dd7c <HAL_PCDEx_LPM_Callback+0x68>)
 800dd3a:	691b      	ldr	r3, [r3, #16]
 800dd3c:	4a0f      	ldr	r2, [pc, #60]	; (800dd7c <HAL_PCDEx_LPM_Callback+0x68>)
 800dd3e:	f023 0306 	bic.w	r3, r3, #6
 800dd42:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f7fe fc80 	bl	800c650 <USBD_LL_Resume>
    break;
 800dd50:	e010      	b.n	800dd74 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f7fe fc63 	bl	800c624 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	699b      	ldr	r3, [r3, #24]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d005      	beq.n	800dd72 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dd66:	4b05      	ldr	r3, [pc, #20]	; (800dd7c <HAL_PCDEx_LPM_Callback+0x68>)
 800dd68:	691b      	ldr	r3, [r3, #16]
 800dd6a:	4a04      	ldr	r2, [pc, #16]	; (800dd7c <HAL_PCDEx_LPM_Callback+0x68>)
 800dd6c:	f043 0306 	orr.w	r3, r3, #6
 800dd70:	6113      	str	r3, [r2, #16]
    break;
 800dd72:	bf00      	nop
}
 800dd74:	bf00      	nop
 800dd76:	3708      	adds	r7, #8
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd80      	pop	{r7, pc}
 800dd7c:	e000ed00 	.word	0xe000ed00

0800dd80 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dd80:	b480      	push	{r7}
 800dd82:	b083      	sub	sp, #12
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dd88:	4b03      	ldr	r3, [pc, #12]	; (800dd98 <USBD_static_malloc+0x18>)
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	370c      	adds	r7, #12
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd94:	4770      	bx	lr
 800dd96:	bf00      	nop
 800dd98:	200049d4 	.word	0x200049d4

0800dd9c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	b083      	sub	sp, #12
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]

}
 800dda4:	bf00      	nop
 800dda6:	370c      	adds	r7, #12
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddae:	4770      	bx	lr

0800ddb0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ddb4:	f7f3 f81a 	bl	8000dec <SystemClock_Config>
}
 800ddb8:	bf00      	nop
 800ddba:	bd80      	pop	{r7, pc}

0800ddbc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b085      	sub	sp, #20
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ddca:	79fb      	ldrb	r3, [r7, #7]
 800ddcc:	2b03      	cmp	r3, #3
 800ddce:	d817      	bhi.n	800de00 <USBD_Get_USB_Status+0x44>
 800ddd0:	a201      	add	r2, pc, #4	; (adr r2, 800ddd8 <USBD_Get_USB_Status+0x1c>)
 800ddd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddd6:	bf00      	nop
 800ddd8:	0800dde9 	.word	0x0800dde9
 800dddc:	0800ddef 	.word	0x0800ddef
 800dde0:	0800ddf5 	.word	0x0800ddf5
 800dde4:	0800ddfb 	.word	0x0800ddfb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dde8:	2300      	movs	r3, #0
 800ddea:	73fb      	strb	r3, [r7, #15]
    break;
 800ddec:	e00b      	b.n	800de06 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ddee:	2303      	movs	r3, #3
 800ddf0:	73fb      	strb	r3, [r7, #15]
    break;
 800ddf2:	e008      	b.n	800de06 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	73fb      	strb	r3, [r7, #15]
    break;
 800ddf8:	e005      	b.n	800de06 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ddfa:	2303      	movs	r3, #3
 800ddfc:	73fb      	strb	r3, [r7, #15]
    break;
 800ddfe:	e002      	b.n	800de06 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800de00:	2303      	movs	r3, #3
 800de02:	73fb      	strb	r3, [r7, #15]
    break;
 800de04:	bf00      	nop
  }
  return usb_status;
 800de06:	7bfb      	ldrb	r3, [r7, #15]
}
 800de08:	4618      	mov	r0, r3
 800de0a:	3714      	adds	r7, #20
 800de0c:	46bd      	mov	sp, r7
 800de0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de12:	4770      	bx	lr

0800de14 <__errno>:
 800de14:	4b01      	ldr	r3, [pc, #4]	; (800de1c <__errno+0x8>)
 800de16:	6818      	ldr	r0, [r3, #0]
 800de18:	4770      	bx	lr
 800de1a:	bf00      	nop
 800de1c:	20002858 	.word	0x20002858

0800de20 <__libc_init_array>:
 800de20:	b570      	push	{r4, r5, r6, lr}
 800de22:	4d0d      	ldr	r5, [pc, #52]	; (800de58 <__libc_init_array+0x38>)
 800de24:	4c0d      	ldr	r4, [pc, #52]	; (800de5c <__libc_init_array+0x3c>)
 800de26:	1b64      	subs	r4, r4, r5
 800de28:	10a4      	asrs	r4, r4, #2
 800de2a:	2600      	movs	r6, #0
 800de2c:	42a6      	cmp	r6, r4
 800de2e:	d109      	bne.n	800de44 <__libc_init_array+0x24>
 800de30:	4d0b      	ldr	r5, [pc, #44]	; (800de60 <__libc_init_array+0x40>)
 800de32:	4c0c      	ldr	r4, [pc, #48]	; (800de64 <__libc_init_array+0x44>)
 800de34:	f002 fd36 	bl	80108a4 <_init>
 800de38:	1b64      	subs	r4, r4, r5
 800de3a:	10a4      	asrs	r4, r4, #2
 800de3c:	2600      	movs	r6, #0
 800de3e:	42a6      	cmp	r6, r4
 800de40:	d105      	bne.n	800de4e <__libc_init_array+0x2e>
 800de42:	bd70      	pop	{r4, r5, r6, pc}
 800de44:	f855 3b04 	ldr.w	r3, [r5], #4
 800de48:	4798      	blx	r3
 800de4a:	3601      	adds	r6, #1
 800de4c:	e7ee      	b.n	800de2c <__libc_init_array+0xc>
 800de4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800de52:	4798      	blx	r3
 800de54:	3601      	adds	r6, #1
 800de56:	e7f2      	b.n	800de3e <__libc_init_array+0x1e>
 800de58:	08010d04 	.word	0x08010d04
 800de5c:	08010d04 	.word	0x08010d04
 800de60:	08010d04 	.word	0x08010d04
 800de64:	08010d08 	.word	0x08010d08

0800de68 <memcpy>:
 800de68:	440a      	add	r2, r1
 800de6a:	4291      	cmp	r1, r2
 800de6c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800de70:	d100      	bne.n	800de74 <memcpy+0xc>
 800de72:	4770      	bx	lr
 800de74:	b510      	push	{r4, lr}
 800de76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de7e:	4291      	cmp	r1, r2
 800de80:	d1f9      	bne.n	800de76 <memcpy+0xe>
 800de82:	bd10      	pop	{r4, pc}

0800de84 <memset>:
 800de84:	4402      	add	r2, r0
 800de86:	4603      	mov	r3, r0
 800de88:	4293      	cmp	r3, r2
 800de8a:	d100      	bne.n	800de8e <memset+0xa>
 800de8c:	4770      	bx	lr
 800de8e:	f803 1b01 	strb.w	r1, [r3], #1
 800de92:	e7f9      	b.n	800de88 <memset+0x4>

0800de94 <__cvt>:
 800de94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de98:	ec55 4b10 	vmov	r4, r5, d0
 800de9c:	2d00      	cmp	r5, #0
 800de9e:	460e      	mov	r6, r1
 800dea0:	4619      	mov	r1, r3
 800dea2:	462b      	mov	r3, r5
 800dea4:	bfbb      	ittet	lt
 800dea6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800deaa:	461d      	movlt	r5, r3
 800deac:	2300      	movge	r3, #0
 800deae:	232d      	movlt	r3, #45	; 0x2d
 800deb0:	700b      	strb	r3, [r1, #0]
 800deb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800deb4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800deb8:	4691      	mov	r9, r2
 800deba:	f023 0820 	bic.w	r8, r3, #32
 800debe:	bfbc      	itt	lt
 800dec0:	4622      	movlt	r2, r4
 800dec2:	4614      	movlt	r4, r2
 800dec4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dec8:	d005      	beq.n	800ded6 <__cvt+0x42>
 800deca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800dece:	d100      	bne.n	800ded2 <__cvt+0x3e>
 800ded0:	3601      	adds	r6, #1
 800ded2:	2102      	movs	r1, #2
 800ded4:	e000      	b.n	800ded8 <__cvt+0x44>
 800ded6:	2103      	movs	r1, #3
 800ded8:	ab03      	add	r3, sp, #12
 800deda:	9301      	str	r3, [sp, #4]
 800dedc:	ab02      	add	r3, sp, #8
 800dede:	9300      	str	r3, [sp, #0]
 800dee0:	ec45 4b10 	vmov	d0, r4, r5
 800dee4:	4653      	mov	r3, sl
 800dee6:	4632      	mov	r2, r6
 800dee8:	f000 fcca 	bl	800e880 <_dtoa_r>
 800deec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800def0:	4607      	mov	r7, r0
 800def2:	d102      	bne.n	800defa <__cvt+0x66>
 800def4:	f019 0f01 	tst.w	r9, #1
 800def8:	d022      	beq.n	800df40 <__cvt+0xac>
 800defa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800defe:	eb07 0906 	add.w	r9, r7, r6
 800df02:	d110      	bne.n	800df26 <__cvt+0x92>
 800df04:	783b      	ldrb	r3, [r7, #0]
 800df06:	2b30      	cmp	r3, #48	; 0x30
 800df08:	d10a      	bne.n	800df20 <__cvt+0x8c>
 800df0a:	2200      	movs	r2, #0
 800df0c:	2300      	movs	r3, #0
 800df0e:	4620      	mov	r0, r4
 800df10:	4629      	mov	r1, r5
 800df12:	f7f2 fe01 	bl	8000b18 <__aeabi_dcmpeq>
 800df16:	b918      	cbnz	r0, 800df20 <__cvt+0x8c>
 800df18:	f1c6 0601 	rsb	r6, r6, #1
 800df1c:	f8ca 6000 	str.w	r6, [sl]
 800df20:	f8da 3000 	ldr.w	r3, [sl]
 800df24:	4499      	add	r9, r3
 800df26:	2200      	movs	r2, #0
 800df28:	2300      	movs	r3, #0
 800df2a:	4620      	mov	r0, r4
 800df2c:	4629      	mov	r1, r5
 800df2e:	f7f2 fdf3 	bl	8000b18 <__aeabi_dcmpeq>
 800df32:	b108      	cbz	r0, 800df38 <__cvt+0xa4>
 800df34:	f8cd 900c 	str.w	r9, [sp, #12]
 800df38:	2230      	movs	r2, #48	; 0x30
 800df3a:	9b03      	ldr	r3, [sp, #12]
 800df3c:	454b      	cmp	r3, r9
 800df3e:	d307      	bcc.n	800df50 <__cvt+0xbc>
 800df40:	9b03      	ldr	r3, [sp, #12]
 800df42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df44:	1bdb      	subs	r3, r3, r7
 800df46:	4638      	mov	r0, r7
 800df48:	6013      	str	r3, [r2, #0]
 800df4a:	b004      	add	sp, #16
 800df4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df50:	1c59      	adds	r1, r3, #1
 800df52:	9103      	str	r1, [sp, #12]
 800df54:	701a      	strb	r2, [r3, #0]
 800df56:	e7f0      	b.n	800df3a <__cvt+0xa6>

0800df58 <__exponent>:
 800df58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df5a:	4603      	mov	r3, r0
 800df5c:	2900      	cmp	r1, #0
 800df5e:	bfb8      	it	lt
 800df60:	4249      	neglt	r1, r1
 800df62:	f803 2b02 	strb.w	r2, [r3], #2
 800df66:	bfb4      	ite	lt
 800df68:	222d      	movlt	r2, #45	; 0x2d
 800df6a:	222b      	movge	r2, #43	; 0x2b
 800df6c:	2909      	cmp	r1, #9
 800df6e:	7042      	strb	r2, [r0, #1]
 800df70:	dd2a      	ble.n	800dfc8 <__exponent+0x70>
 800df72:	f10d 0407 	add.w	r4, sp, #7
 800df76:	46a4      	mov	ip, r4
 800df78:	270a      	movs	r7, #10
 800df7a:	46a6      	mov	lr, r4
 800df7c:	460a      	mov	r2, r1
 800df7e:	fb91 f6f7 	sdiv	r6, r1, r7
 800df82:	fb07 1516 	mls	r5, r7, r6, r1
 800df86:	3530      	adds	r5, #48	; 0x30
 800df88:	2a63      	cmp	r2, #99	; 0x63
 800df8a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800df8e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800df92:	4631      	mov	r1, r6
 800df94:	dcf1      	bgt.n	800df7a <__exponent+0x22>
 800df96:	3130      	adds	r1, #48	; 0x30
 800df98:	f1ae 0502 	sub.w	r5, lr, #2
 800df9c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800dfa0:	1c44      	adds	r4, r0, #1
 800dfa2:	4629      	mov	r1, r5
 800dfa4:	4561      	cmp	r1, ip
 800dfa6:	d30a      	bcc.n	800dfbe <__exponent+0x66>
 800dfa8:	f10d 0209 	add.w	r2, sp, #9
 800dfac:	eba2 020e 	sub.w	r2, r2, lr
 800dfb0:	4565      	cmp	r5, ip
 800dfb2:	bf88      	it	hi
 800dfb4:	2200      	movhi	r2, #0
 800dfb6:	4413      	add	r3, r2
 800dfb8:	1a18      	subs	r0, r3, r0
 800dfba:	b003      	add	sp, #12
 800dfbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dfc2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800dfc6:	e7ed      	b.n	800dfa4 <__exponent+0x4c>
 800dfc8:	2330      	movs	r3, #48	; 0x30
 800dfca:	3130      	adds	r1, #48	; 0x30
 800dfcc:	7083      	strb	r3, [r0, #2]
 800dfce:	70c1      	strb	r1, [r0, #3]
 800dfd0:	1d03      	adds	r3, r0, #4
 800dfd2:	e7f1      	b.n	800dfb8 <__exponent+0x60>

0800dfd4 <_printf_float>:
 800dfd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfd8:	ed2d 8b02 	vpush	{d8}
 800dfdc:	b08d      	sub	sp, #52	; 0x34
 800dfde:	460c      	mov	r4, r1
 800dfe0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800dfe4:	4616      	mov	r6, r2
 800dfe6:	461f      	mov	r7, r3
 800dfe8:	4605      	mov	r5, r0
 800dfea:	f001 fa37 	bl	800f45c <_localeconv_r>
 800dfee:	f8d0 a000 	ldr.w	sl, [r0]
 800dff2:	4650      	mov	r0, sl
 800dff4:	f7f2 f914 	bl	8000220 <strlen>
 800dff8:	2300      	movs	r3, #0
 800dffa:	930a      	str	r3, [sp, #40]	; 0x28
 800dffc:	6823      	ldr	r3, [r4, #0]
 800dffe:	9305      	str	r3, [sp, #20]
 800e000:	f8d8 3000 	ldr.w	r3, [r8]
 800e004:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e008:	3307      	adds	r3, #7
 800e00a:	f023 0307 	bic.w	r3, r3, #7
 800e00e:	f103 0208 	add.w	r2, r3, #8
 800e012:	f8c8 2000 	str.w	r2, [r8]
 800e016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e01a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e01e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e022:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e026:	9307      	str	r3, [sp, #28]
 800e028:	f8cd 8018 	str.w	r8, [sp, #24]
 800e02c:	ee08 0a10 	vmov	s16, r0
 800e030:	4b9f      	ldr	r3, [pc, #636]	; (800e2b0 <_printf_float+0x2dc>)
 800e032:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e036:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e03a:	f7f2 fd9f 	bl	8000b7c <__aeabi_dcmpun>
 800e03e:	bb88      	cbnz	r0, 800e0a4 <_printf_float+0xd0>
 800e040:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e044:	4b9a      	ldr	r3, [pc, #616]	; (800e2b0 <_printf_float+0x2dc>)
 800e046:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e04a:	f7f2 fd79 	bl	8000b40 <__aeabi_dcmple>
 800e04e:	bb48      	cbnz	r0, 800e0a4 <_printf_float+0xd0>
 800e050:	2200      	movs	r2, #0
 800e052:	2300      	movs	r3, #0
 800e054:	4640      	mov	r0, r8
 800e056:	4649      	mov	r1, r9
 800e058:	f7f2 fd68 	bl	8000b2c <__aeabi_dcmplt>
 800e05c:	b110      	cbz	r0, 800e064 <_printf_float+0x90>
 800e05e:	232d      	movs	r3, #45	; 0x2d
 800e060:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e064:	4b93      	ldr	r3, [pc, #588]	; (800e2b4 <_printf_float+0x2e0>)
 800e066:	4894      	ldr	r0, [pc, #592]	; (800e2b8 <_printf_float+0x2e4>)
 800e068:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e06c:	bf94      	ite	ls
 800e06e:	4698      	movls	r8, r3
 800e070:	4680      	movhi	r8, r0
 800e072:	2303      	movs	r3, #3
 800e074:	6123      	str	r3, [r4, #16]
 800e076:	9b05      	ldr	r3, [sp, #20]
 800e078:	f023 0204 	bic.w	r2, r3, #4
 800e07c:	6022      	str	r2, [r4, #0]
 800e07e:	f04f 0900 	mov.w	r9, #0
 800e082:	9700      	str	r7, [sp, #0]
 800e084:	4633      	mov	r3, r6
 800e086:	aa0b      	add	r2, sp, #44	; 0x2c
 800e088:	4621      	mov	r1, r4
 800e08a:	4628      	mov	r0, r5
 800e08c:	f000 f9d8 	bl	800e440 <_printf_common>
 800e090:	3001      	adds	r0, #1
 800e092:	f040 8090 	bne.w	800e1b6 <_printf_float+0x1e2>
 800e096:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e09a:	b00d      	add	sp, #52	; 0x34
 800e09c:	ecbd 8b02 	vpop	{d8}
 800e0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0a4:	4642      	mov	r2, r8
 800e0a6:	464b      	mov	r3, r9
 800e0a8:	4640      	mov	r0, r8
 800e0aa:	4649      	mov	r1, r9
 800e0ac:	f7f2 fd66 	bl	8000b7c <__aeabi_dcmpun>
 800e0b0:	b140      	cbz	r0, 800e0c4 <_printf_float+0xf0>
 800e0b2:	464b      	mov	r3, r9
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	bfbc      	itt	lt
 800e0b8:	232d      	movlt	r3, #45	; 0x2d
 800e0ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e0be:	487f      	ldr	r0, [pc, #508]	; (800e2bc <_printf_float+0x2e8>)
 800e0c0:	4b7f      	ldr	r3, [pc, #508]	; (800e2c0 <_printf_float+0x2ec>)
 800e0c2:	e7d1      	b.n	800e068 <_printf_float+0x94>
 800e0c4:	6863      	ldr	r3, [r4, #4]
 800e0c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e0ca:	9206      	str	r2, [sp, #24]
 800e0cc:	1c5a      	adds	r2, r3, #1
 800e0ce:	d13f      	bne.n	800e150 <_printf_float+0x17c>
 800e0d0:	2306      	movs	r3, #6
 800e0d2:	6063      	str	r3, [r4, #4]
 800e0d4:	9b05      	ldr	r3, [sp, #20]
 800e0d6:	6861      	ldr	r1, [r4, #4]
 800e0d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e0dc:	2300      	movs	r3, #0
 800e0de:	9303      	str	r3, [sp, #12]
 800e0e0:	ab0a      	add	r3, sp, #40	; 0x28
 800e0e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e0e6:	ab09      	add	r3, sp, #36	; 0x24
 800e0e8:	ec49 8b10 	vmov	d0, r8, r9
 800e0ec:	9300      	str	r3, [sp, #0]
 800e0ee:	6022      	str	r2, [r4, #0]
 800e0f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e0f4:	4628      	mov	r0, r5
 800e0f6:	f7ff fecd 	bl	800de94 <__cvt>
 800e0fa:	9b06      	ldr	r3, [sp, #24]
 800e0fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e0fe:	2b47      	cmp	r3, #71	; 0x47
 800e100:	4680      	mov	r8, r0
 800e102:	d108      	bne.n	800e116 <_printf_float+0x142>
 800e104:	1cc8      	adds	r0, r1, #3
 800e106:	db02      	blt.n	800e10e <_printf_float+0x13a>
 800e108:	6863      	ldr	r3, [r4, #4]
 800e10a:	4299      	cmp	r1, r3
 800e10c:	dd41      	ble.n	800e192 <_printf_float+0x1be>
 800e10e:	f1ab 0b02 	sub.w	fp, fp, #2
 800e112:	fa5f fb8b 	uxtb.w	fp, fp
 800e116:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e11a:	d820      	bhi.n	800e15e <_printf_float+0x18a>
 800e11c:	3901      	subs	r1, #1
 800e11e:	465a      	mov	r2, fp
 800e120:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e124:	9109      	str	r1, [sp, #36]	; 0x24
 800e126:	f7ff ff17 	bl	800df58 <__exponent>
 800e12a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e12c:	1813      	adds	r3, r2, r0
 800e12e:	2a01      	cmp	r2, #1
 800e130:	4681      	mov	r9, r0
 800e132:	6123      	str	r3, [r4, #16]
 800e134:	dc02      	bgt.n	800e13c <_printf_float+0x168>
 800e136:	6822      	ldr	r2, [r4, #0]
 800e138:	07d2      	lsls	r2, r2, #31
 800e13a:	d501      	bpl.n	800e140 <_printf_float+0x16c>
 800e13c:	3301      	adds	r3, #1
 800e13e:	6123      	str	r3, [r4, #16]
 800e140:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e144:	2b00      	cmp	r3, #0
 800e146:	d09c      	beq.n	800e082 <_printf_float+0xae>
 800e148:	232d      	movs	r3, #45	; 0x2d
 800e14a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e14e:	e798      	b.n	800e082 <_printf_float+0xae>
 800e150:	9a06      	ldr	r2, [sp, #24]
 800e152:	2a47      	cmp	r2, #71	; 0x47
 800e154:	d1be      	bne.n	800e0d4 <_printf_float+0x100>
 800e156:	2b00      	cmp	r3, #0
 800e158:	d1bc      	bne.n	800e0d4 <_printf_float+0x100>
 800e15a:	2301      	movs	r3, #1
 800e15c:	e7b9      	b.n	800e0d2 <_printf_float+0xfe>
 800e15e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e162:	d118      	bne.n	800e196 <_printf_float+0x1c2>
 800e164:	2900      	cmp	r1, #0
 800e166:	6863      	ldr	r3, [r4, #4]
 800e168:	dd0b      	ble.n	800e182 <_printf_float+0x1ae>
 800e16a:	6121      	str	r1, [r4, #16]
 800e16c:	b913      	cbnz	r3, 800e174 <_printf_float+0x1a0>
 800e16e:	6822      	ldr	r2, [r4, #0]
 800e170:	07d0      	lsls	r0, r2, #31
 800e172:	d502      	bpl.n	800e17a <_printf_float+0x1a6>
 800e174:	3301      	adds	r3, #1
 800e176:	440b      	add	r3, r1
 800e178:	6123      	str	r3, [r4, #16]
 800e17a:	65a1      	str	r1, [r4, #88]	; 0x58
 800e17c:	f04f 0900 	mov.w	r9, #0
 800e180:	e7de      	b.n	800e140 <_printf_float+0x16c>
 800e182:	b913      	cbnz	r3, 800e18a <_printf_float+0x1b6>
 800e184:	6822      	ldr	r2, [r4, #0]
 800e186:	07d2      	lsls	r2, r2, #31
 800e188:	d501      	bpl.n	800e18e <_printf_float+0x1ba>
 800e18a:	3302      	adds	r3, #2
 800e18c:	e7f4      	b.n	800e178 <_printf_float+0x1a4>
 800e18e:	2301      	movs	r3, #1
 800e190:	e7f2      	b.n	800e178 <_printf_float+0x1a4>
 800e192:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e198:	4299      	cmp	r1, r3
 800e19a:	db05      	blt.n	800e1a8 <_printf_float+0x1d4>
 800e19c:	6823      	ldr	r3, [r4, #0]
 800e19e:	6121      	str	r1, [r4, #16]
 800e1a0:	07d8      	lsls	r0, r3, #31
 800e1a2:	d5ea      	bpl.n	800e17a <_printf_float+0x1a6>
 800e1a4:	1c4b      	adds	r3, r1, #1
 800e1a6:	e7e7      	b.n	800e178 <_printf_float+0x1a4>
 800e1a8:	2900      	cmp	r1, #0
 800e1aa:	bfd4      	ite	le
 800e1ac:	f1c1 0202 	rsble	r2, r1, #2
 800e1b0:	2201      	movgt	r2, #1
 800e1b2:	4413      	add	r3, r2
 800e1b4:	e7e0      	b.n	800e178 <_printf_float+0x1a4>
 800e1b6:	6823      	ldr	r3, [r4, #0]
 800e1b8:	055a      	lsls	r2, r3, #21
 800e1ba:	d407      	bmi.n	800e1cc <_printf_float+0x1f8>
 800e1bc:	6923      	ldr	r3, [r4, #16]
 800e1be:	4642      	mov	r2, r8
 800e1c0:	4631      	mov	r1, r6
 800e1c2:	4628      	mov	r0, r5
 800e1c4:	47b8      	blx	r7
 800e1c6:	3001      	adds	r0, #1
 800e1c8:	d12c      	bne.n	800e224 <_printf_float+0x250>
 800e1ca:	e764      	b.n	800e096 <_printf_float+0xc2>
 800e1cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e1d0:	f240 80e0 	bls.w	800e394 <_printf_float+0x3c0>
 800e1d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e1d8:	2200      	movs	r2, #0
 800e1da:	2300      	movs	r3, #0
 800e1dc:	f7f2 fc9c 	bl	8000b18 <__aeabi_dcmpeq>
 800e1e0:	2800      	cmp	r0, #0
 800e1e2:	d034      	beq.n	800e24e <_printf_float+0x27a>
 800e1e4:	4a37      	ldr	r2, [pc, #220]	; (800e2c4 <_printf_float+0x2f0>)
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	4631      	mov	r1, r6
 800e1ea:	4628      	mov	r0, r5
 800e1ec:	47b8      	blx	r7
 800e1ee:	3001      	adds	r0, #1
 800e1f0:	f43f af51 	beq.w	800e096 <_printf_float+0xc2>
 800e1f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	db02      	blt.n	800e202 <_printf_float+0x22e>
 800e1fc:	6823      	ldr	r3, [r4, #0]
 800e1fe:	07d8      	lsls	r0, r3, #31
 800e200:	d510      	bpl.n	800e224 <_printf_float+0x250>
 800e202:	ee18 3a10 	vmov	r3, s16
 800e206:	4652      	mov	r2, sl
 800e208:	4631      	mov	r1, r6
 800e20a:	4628      	mov	r0, r5
 800e20c:	47b8      	blx	r7
 800e20e:	3001      	adds	r0, #1
 800e210:	f43f af41 	beq.w	800e096 <_printf_float+0xc2>
 800e214:	f04f 0800 	mov.w	r8, #0
 800e218:	f104 091a 	add.w	r9, r4, #26
 800e21c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e21e:	3b01      	subs	r3, #1
 800e220:	4543      	cmp	r3, r8
 800e222:	dc09      	bgt.n	800e238 <_printf_float+0x264>
 800e224:	6823      	ldr	r3, [r4, #0]
 800e226:	079b      	lsls	r3, r3, #30
 800e228:	f100 8105 	bmi.w	800e436 <_printf_float+0x462>
 800e22c:	68e0      	ldr	r0, [r4, #12]
 800e22e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e230:	4298      	cmp	r0, r3
 800e232:	bfb8      	it	lt
 800e234:	4618      	movlt	r0, r3
 800e236:	e730      	b.n	800e09a <_printf_float+0xc6>
 800e238:	2301      	movs	r3, #1
 800e23a:	464a      	mov	r2, r9
 800e23c:	4631      	mov	r1, r6
 800e23e:	4628      	mov	r0, r5
 800e240:	47b8      	blx	r7
 800e242:	3001      	adds	r0, #1
 800e244:	f43f af27 	beq.w	800e096 <_printf_float+0xc2>
 800e248:	f108 0801 	add.w	r8, r8, #1
 800e24c:	e7e6      	b.n	800e21c <_printf_float+0x248>
 800e24e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e250:	2b00      	cmp	r3, #0
 800e252:	dc39      	bgt.n	800e2c8 <_printf_float+0x2f4>
 800e254:	4a1b      	ldr	r2, [pc, #108]	; (800e2c4 <_printf_float+0x2f0>)
 800e256:	2301      	movs	r3, #1
 800e258:	4631      	mov	r1, r6
 800e25a:	4628      	mov	r0, r5
 800e25c:	47b8      	blx	r7
 800e25e:	3001      	adds	r0, #1
 800e260:	f43f af19 	beq.w	800e096 <_printf_float+0xc2>
 800e264:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e268:	4313      	orrs	r3, r2
 800e26a:	d102      	bne.n	800e272 <_printf_float+0x29e>
 800e26c:	6823      	ldr	r3, [r4, #0]
 800e26e:	07d9      	lsls	r1, r3, #31
 800e270:	d5d8      	bpl.n	800e224 <_printf_float+0x250>
 800e272:	ee18 3a10 	vmov	r3, s16
 800e276:	4652      	mov	r2, sl
 800e278:	4631      	mov	r1, r6
 800e27a:	4628      	mov	r0, r5
 800e27c:	47b8      	blx	r7
 800e27e:	3001      	adds	r0, #1
 800e280:	f43f af09 	beq.w	800e096 <_printf_float+0xc2>
 800e284:	f04f 0900 	mov.w	r9, #0
 800e288:	f104 0a1a 	add.w	sl, r4, #26
 800e28c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e28e:	425b      	negs	r3, r3
 800e290:	454b      	cmp	r3, r9
 800e292:	dc01      	bgt.n	800e298 <_printf_float+0x2c4>
 800e294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e296:	e792      	b.n	800e1be <_printf_float+0x1ea>
 800e298:	2301      	movs	r3, #1
 800e29a:	4652      	mov	r2, sl
 800e29c:	4631      	mov	r1, r6
 800e29e:	4628      	mov	r0, r5
 800e2a0:	47b8      	blx	r7
 800e2a2:	3001      	adds	r0, #1
 800e2a4:	f43f aef7 	beq.w	800e096 <_printf_float+0xc2>
 800e2a8:	f109 0901 	add.w	r9, r9, #1
 800e2ac:	e7ee      	b.n	800e28c <_printf_float+0x2b8>
 800e2ae:	bf00      	nop
 800e2b0:	7fefffff 	.word	0x7fefffff
 800e2b4:	0801092c 	.word	0x0801092c
 800e2b8:	08010930 	.word	0x08010930
 800e2bc:	08010938 	.word	0x08010938
 800e2c0:	08010934 	.word	0x08010934
 800e2c4:	0801093c 	.word	0x0801093c
 800e2c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e2ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	bfa8      	it	ge
 800e2d0:	461a      	movge	r2, r3
 800e2d2:	2a00      	cmp	r2, #0
 800e2d4:	4691      	mov	r9, r2
 800e2d6:	dc37      	bgt.n	800e348 <_printf_float+0x374>
 800e2d8:	f04f 0b00 	mov.w	fp, #0
 800e2dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e2e0:	f104 021a 	add.w	r2, r4, #26
 800e2e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e2e6:	9305      	str	r3, [sp, #20]
 800e2e8:	eba3 0309 	sub.w	r3, r3, r9
 800e2ec:	455b      	cmp	r3, fp
 800e2ee:	dc33      	bgt.n	800e358 <_printf_float+0x384>
 800e2f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	db3b      	blt.n	800e370 <_printf_float+0x39c>
 800e2f8:	6823      	ldr	r3, [r4, #0]
 800e2fa:	07da      	lsls	r2, r3, #31
 800e2fc:	d438      	bmi.n	800e370 <_printf_float+0x39c>
 800e2fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e300:	9a05      	ldr	r2, [sp, #20]
 800e302:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e304:	1a9a      	subs	r2, r3, r2
 800e306:	eba3 0901 	sub.w	r9, r3, r1
 800e30a:	4591      	cmp	r9, r2
 800e30c:	bfa8      	it	ge
 800e30e:	4691      	movge	r9, r2
 800e310:	f1b9 0f00 	cmp.w	r9, #0
 800e314:	dc35      	bgt.n	800e382 <_printf_float+0x3ae>
 800e316:	f04f 0800 	mov.w	r8, #0
 800e31a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e31e:	f104 0a1a 	add.w	sl, r4, #26
 800e322:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e326:	1a9b      	subs	r3, r3, r2
 800e328:	eba3 0309 	sub.w	r3, r3, r9
 800e32c:	4543      	cmp	r3, r8
 800e32e:	f77f af79 	ble.w	800e224 <_printf_float+0x250>
 800e332:	2301      	movs	r3, #1
 800e334:	4652      	mov	r2, sl
 800e336:	4631      	mov	r1, r6
 800e338:	4628      	mov	r0, r5
 800e33a:	47b8      	blx	r7
 800e33c:	3001      	adds	r0, #1
 800e33e:	f43f aeaa 	beq.w	800e096 <_printf_float+0xc2>
 800e342:	f108 0801 	add.w	r8, r8, #1
 800e346:	e7ec      	b.n	800e322 <_printf_float+0x34e>
 800e348:	4613      	mov	r3, r2
 800e34a:	4631      	mov	r1, r6
 800e34c:	4642      	mov	r2, r8
 800e34e:	4628      	mov	r0, r5
 800e350:	47b8      	blx	r7
 800e352:	3001      	adds	r0, #1
 800e354:	d1c0      	bne.n	800e2d8 <_printf_float+0x304>
 800e356:	e69e      	b.n	800e096 <_printf_float+0xc2>
 800e358:	2301      	movs	r3, #1
 800e35a:	4631      	mov	r1, r6
 800e35c:	4628      	mov	r0, r5
 800e35e:	9205      	str	r2, [sp, #20]
 800e360:	47b8      	blx	r7
 800e362:	3001      	adds	r0, #1
 800e364:	f43f ae97 	beq.w	800e096 <_printf_float+0xc2>
 800e368:	9a05      	ldr	r2, [sp, #20]
 800e36a:	f10b 0b01 	add.w	fp, fp, #1
 800e36e:	e7b9      	b.n	800e2e4 <_printf_float+0x310>
 800e370:	ee18 3a10 	vmov	r3, s16
 800e374:	4652      	mov	r2, sl
 800e376:	4631      	mov	r1, r6
 800e378:	4628      	mov	r0, r5
 800e37a:	47b8      	blx	r7
 800e37c:	3001      	adds	r0, #1
 800e37e:	d1be      	bne.n	800e2fe <_printf_float+0x32a>
 800e380:	e689      	b.n	800e096 <_printf_float+0xc2>
 800e382:	9a05      	ldr	r2, [sp, #20]
 800e384:	464b      	mov	r3, r9
 800e386:	4442      	add	r2, r8
 800e388:	4631      	mov	r1, r6
 800e38a:	4628      	mov	r0, r5
 800e38c:	47b8      	blx	r7
 800e38e:	3001      	adds	r0, #1
 800e390:	d1c1      	bne.n	800e316 <_printf_float+0x342>
 800e392:	e680      	b.n	800e096 <_printf_float+0xc2>
 800e394:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e396:	2a01      	cmp	r2, #1
 800e398:	dc01      	bgt.n	800e39e <_printf_float+0x3ca>
 800e39a:	07db      	lsls	r3, r3, #31
 800e39c:	d538      	bpl.n	800e410 <_printf_float+0x43c>
 800e39e:	2301      	movs	r3, #1
 800e3a0:	4642      	mov	r2, r8
 800e3a2:	4631      	mov	r1, r6
 800e3a4:	4628      	mov	r0, r5
 800e3a6:	47b8      	blx	r7
 800e3a8:	3001      	adds	r0, #1
 800e3aa:	f43f ae74 	beq.w	800e096 <_printf_float+0xc2>
 800e3ae:	ee18 3a10 	vmov	r3, s16
 800e3b2:	4652      	mov	r2, sl
 800e3b4:	4631      	mov	r1, r6
 800e3b6:	4628      	mov	r0, r5
 800e3b8:	47b8      	blx	r7
 800e3ba:	3001      	adds	r0, #1
 800e3bc:	f43f ae6b 	beq.w	800e096 <_printf_float+0xc2>
 800e3c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	f7f2 fba6 	bl	8000b18 <__aeabi_dcmpeq>
 800e3cc:	b9d8      	cbnz	r0, 800e406 <_printf_float+0x432>
 800e3ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3d0:	f108 0201 	add.w	r2, r8, #1
 800e3d4:	3b01      	subs	r3, #1
 800e3d6:	4631      	mov	r1, r6
 800e3d8:	4628      	mov	r0, r5
 800e3da:	47b8      	blx	r7
 800e3dc:	3001      	adds	r0, #1
 800e3de:	d10e      	bne.n	800e3fe <_printf_float+0x42a>
 800e3e0:	e659      	b.n	800e096 <_printf_float+0xc2>
 800e3e2:	2301      	movs	r3, #1
 800e3e4:	4652      	mov	r2, sl
 800e3e6:	4631      	mov	r1, r6
 800e3e8:	4628      	mov	r0, r5
 800e3ea:	47b8      	blx	r7
 800e3ec:	3001      	adds	r0, #1
 800e3ee:	f43f ae52 	beq.w	800e096 <_printf_float+0xc2>
 800e3f2:	f108 0801 	add.w	r8, r8, #1
 800e3f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3f8:	3b01      	subs	r3, #1
 800e3fa:	4543      	cmp	r3, r8
 800e3fc:	dcf1      	bgt.n	800e3e2 <_printf_float+0x40e>
 800e3fe:	464b      	mov	r3, r9
 800e400:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e404:	e6dc      	b.n	800e1c0 <_printf_float+0x1ec>
 800e406:	f04f 0800 	mov.w	r8, #0
 800e40a:	f104 0a1a 	add.w	sl, r4, #26
 800e40e:	e7f2      	b.n	800e3f6 <_printf_float+0x422>
 800e410:	2301      	movs	r3, #1
 800e412:	4642      	mov	r2, r8
 800e414:	e7df      	b.n	800e3d6 <_printf_float+0x402>
 800e416:	2301      	movs	r3, #1
 800e418:	464a      	mov	r2, r9
 800e41a:	4631      	mov	r1, r6
 800e41c:	4628      	mov	r0, r5
 800e41e:	47b8      	blx	r7
 800e420:	3001      	adds	r0, #1
 800e422:	f43f ae38 	beq.w	800e096 <_printf_float+0xc2>
 800e426:	f108 0801 	add.w	r8, r8, #1
 800e42a:	68e3      	ldr	r3, [r4, #12]
 800e42c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e42e:	1a5b      	subs	r3, r3, r1
 800e430:	4543      	cmp	r3, r8
 800e432:	dcf0      	bgt.n	800e416 <_printf_float+0x442>
 800e434:	e6fa      	b.n	800e22c <_printf_float+0x258>
 800e436:	f04f 0800 	mov.w	r8, #0
 800e43a:	f104 0919 	add.w	r9, r4, #25
 800e43e:	e7f4      	b.n	800e42a <_printf_float+0x456>

0800e440 <_printf_common>:
 800e440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e444:	4616      	mov	r6, r2
 800e446:	4699      	mov	r9, r3
 800e448:	688a      	ldr	r2, [r1, #8]
 800e44a:	690b      	ldr	r3, [r1, #16]
 800e44c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e450:	4293      	cmp	r3, r2
 800e452:	bfb8      	it	lt
 800e454:	4613      	movlt	r3, r2
 800e456:	6033      	str	r3, [r6, #0]
 800e458:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e45c:	4607      	mov	r7, r0
 800e45e:	460c      	mov	r4, r1
 800e460:	b10a      	cbz	r2, 800e466 <_printf_common+0x26>
 800e462:	3301      	adds	r3, #1
 800e464:	6033      	str	r3, [r6, #0]
 800e466:	6823      	ldr	r3, [r4, #0]
 800e468:	0699      	lsls	r1, r3, #26
 800e46a:	bf42      	ittt	mi
 800e46c:	6833      	ldrmi	r3, [r6, #0]
 800e46e:	3302      	addmi	r3, #2
 800e470:	6033      	strmi	r3, [r6, #0]
 800e472:	6825      	ldr	r5, [r4, #0]
 800e474:	f015 0506 	ands.w	r5, r5, #6
 800e478:	d106      	bne.n	800e488 <_printf_common+0x48>
 800e47a:	f104 0a19 	add.w	sl, r4, #25
 800e47e:	68e3      	ldr	r3, [r4, #12]
 800e480:	6832      	ldr	r2, [r6, #0]
 800e482:	1a9b      	subs	r3, r3, r2
 800e484:	42ab      	cmp	r3, r5
 800e486:	dc26      	bgt.n	800e4d6 <_printf_common+0x96>
 800e488:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e48c:	1e13      	subs	r3, r2, #0
 800e48e:	6822      	ldr	r2, [r4, #0]
 800e490:	bf18      	it	ne
 800e492:	2301      	movne	r3, #1
 800e494:	0692      	lsls	r2, r2, #26
 800e496:	d42b      	bmi.n	800e4f0 <_printf_common+0xb0>
 800e498:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e49c:	4649      	mov	r1, r9
 800e49e:	4638      	mov	r0, r7
 800e4a0:	47c0      	blx	r8
 800e4a2:	3001      	adds	r0, #1
 800e4a4:	d01e      	beq.n	800e4e4 <_printf_common+0xa4>
 800e4a6:	6823      	ldr	r3, [r4, #0]
 800e4a8:	68e5      	ldr	r5, [r4, #12]
 800e4aa:	6832      	ldr	r2, [r6, #0]
 800e4ac:	f003 0306 	and.w	r3, r3, #6
 800e4b0:	2b04      	cmp	r3, #4
 800e4b2:	bf08      	it	eq
 800e4b4:	1aad      	subeq	r5, r5, r2
 800e4b6:	68a3      	ldr	r3, [r4, #8]
 800e4b8:	6922      	ldr	r2, [r4, #16]
 800e4ba:	bf0c      	ite	eq
 800e4bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e4c0:	2500      	movne	r5, #0
 800e4c2:	4293      	cmp	r3, r2
 800e4c4:	bfc4      	itt	gt
 800e4c6:	1a9b      	subgt	r3, r3, r2
 800e4c8:	18ed      	addgt	r5, r5, r3
 800e4ca:	2600      	movs	r6, #0
 800e4cc:	341a      	adds	r4, #26
 800e4ce:	42b5      	cmp	r5, r6
 800e4d0:	d11a      	bne.n	800e508 <_printf_common+0xc8>
 800e4d2:	2000      	movs	r0, #0
 800e4d4:	e008      	b.n	800e4e8 <_printf_common+0xa8>
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	4652      	mov	r2, sl
 800e4da:	4649      	mov	r1, r9
 800e4dc:	4638      	mov	r0, r7
 800e4de:	47c0      	blx	r8
 800e4e0:	3001      	adds	r0, #1
 800e4e2:	d103      	bne.n	800e4ec <_printf_common+0xac>
 800e4e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e4e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4ec:	3501      	adds	r5, #1
 800e4ee:	e7c6      	b.n	800e47e <_printf_common+0x3e>
 800e4f0:	18e1      	adds	r1, r4, r3
 800e4f2:	1c5a      	adds	r2, r3, #1
 800e4f4:	2030      	movs	r0, #48	; 0x30
 800e4f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e4fa:	4422      	add	r2, r4
 800e4fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e500:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e504:	3302      	adds	r3, #2
 800e506:	e7c7      	b.n	800e498 <_printf_common+0x58>
 800e508:	2301      	movs	r3, #1
 800e50a:	4622      	mov	r2, r4
 800e50c:	4649      	mov	r1, r9
 800e50e:	4638      	mov	r0, r7
 800e510:	47c0      	blx	r8
 800e512:	3001      	adds	r0, #1
 800e514:	d0e6      	beq.n	800e4e4 <_printf_common+0xa4>
 800e516:	3601      	adds	r6, #1
 800e518:	e7d9      	b.n	800e4ce <_printf_common+0x8e>
	...

0800e51c <_printf_i>:
 800e51c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e520:	7e0f      	ldrb	r7, [r1, #24]
 800e522:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e524:	2f78      	cmp	r7, #120	; 0x78
 800e526:	4691      	mov	r9, r2
 800e528:	4680      	mov	r8, r0
 800e52a:	460c      	mov	r4, r1
 800e52c:	469a      	mov	sl, r3
 800e52e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e532:	d807      	bhi.n	800e544 <_printf_i+0x28>
 800e534:	2f62      	cmp	r7, #98	; 0x62
 800e536:	d80a      	bhi.n	800e54e <_printf_i+0x32>
 800e538:	2f00      	cmp	r7, #0
 800e53a:	f000 80d8 	beq.w	800e6ee <_printf_i+0x1d2>
 800e53e:	2f58      	cmp	r7, #88	; 0x58
 800e540:	f000 80a3 	beq.w	800e68a <_printf_i+0x16e>
 800e544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e548:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e54c:	e03a      	b.n	800e5c4 <_printf_i+0xa8>
 800e54e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e552:	2b15      	cmp	r3, #21
 800e554:	d8f6      	bhi.n	800e544 <_printf_i+0x28>
 800e556:	a101      	add	r1, pc, #4	; (adr r1, 800e55c <_printf_i+0x40>)
 800e558:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e55c:	0800e5b5 	.word	0x0800e5b5
 800e560:	0800e5c9 	.word	0x0800e5c9
 800e564:	0800e545 	.word	0x0800e545
 800e568:	0800e545 	.word	0x0800e545
 800e56c:	0800e545 	.word	0x0800e545
 800e570:	0800e545 	.word	0x0800e545
 800e574:	0800e5c9 	.word	0x0800e5c9
 800e578:	0800e545 	.word	0x0800e545
 800e57c:	0800e545 	.word	0x0800e545
 800e580:	0800e545 	.word	0x0800e545
 800e584:	0800e545 	.word	0x0800e545
 800e588:	0800e6d5 	.word	0x0800e6d5
 800e58c:	0800e5f9 	.word	0x0800e5f9
 800e590:	0800e6b7 	.word	0x0800e6b7
 800e594:	0800e545 	.word	0x0800e545
 800e598:	0800e545 	.word	0x0800e545
 800e59c:	0800e6f7 	.word	0x0800e6f7
 800e5a0:	0800e545 	.word	0x0800e545
 800e5a4:	0800e5f9 	.word	0x0800e5f9
 800e5a8:	0800e545 	.word	0x0800e545
 800e5ac:	0800e545 	.word	0x0800e545
 800e5b0:	0800e6bf 	.word	0x0800e6bf
 800e5b4:	682b      	ldr	r3, [r5, #0]
 800e5b6:	1d1a      	adds	r2, r3, #4
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	602a      	str	r2, [r5, #0]
 800e5bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e5c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e5c4:	2301      	movs	r3, #1
 800e5c6:	e0a3      	b.n	800e710 <_printf_i+0x1f4>
 800e5c8:	6820      	ldr	r0, [r4, #0]
 800e5ca:	6829      	ldr	r1, [r5, #0]
 800e5cc:	0606      	lsls	r6, r0, #24
 800e5ce:	f101 0304 	add.w	r3, r1, #4
 800e5d2:	d50a      	bpl.n	800e5ea <_printf_i+0xce>
 800e5d4:	680e      	ldr	r6, [r1, #0]
 800e5d6:	602b      	str	r3, [r5, #0]
 800e5d8:	2e00      	cmp	r6, #0
 800e5da:	da03      	bge.n	800e5e4 <_printf_i+0xc8>
 800e5dc:	232d      	movs	r3, #45	; 0x2d
 800e5de:	4276      	negs	r6, r6
 800e5e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e5e4:	485e      	ldr	r0, [pc, #376]	; (800e760 <_printf_i+0x244>)
 800e5e6:	230a      	movs	r3, #10
 800e5e8:	e019      	b.n	800e61e <_printf_i+0x102>
 800e5ea:	680e      	ldr	r6, [r1, #0]
 800e5ec:	602b      	str	r3, [r5, #0]
 800e5ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e5f2:	bf18      	it	ne
 800e5f4:	b236      	sxthne	r6, r6
 800e5f6:	e7ef      	b.n	800e5d8 <_printf_i+0xbc>
 800e5f8:	682b      	ldr	r3, [r5, #0]
 800e5fa:	6820      	ldr	r0, [r4, #0]
 800e5fc:	1d19      	adds	r1, r3, #4
 800e5fe:	6029      	str	r1, [r5, #0]
 800e600:	0601      	lsls	r1, r0, #24
 800e602:	d501      	bpl.n	800e608 <_printf_i+0xec>
 800e604:	681e      	ldr	r6, [r3, #0]
 800e606:	e002      	b.n	800e60e <_printf_i+0xf2>
 800e608:	0646      	lsls	r6, r0, #25
 800e60a:	d5fb      	bpl.n	800e604 <_printf_i+0xe8>
 800e60c:	881e      	ldrh	r6, [r3, #0]
 800e60e:	4854      	ldr	r0, [pc, #336]	; (800e760 <_printf_i+0x244>)
 800e610:	2f6f      	cmp	r7, #111	; 0x6f
 800e612:	bf0c      	ite	eq
 800e614:	2308      	moveq	r3, #8
 800e616:	230a      	movne	r3, #10
 800e618:	2100      	movs	r1, #0
 800e61a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e61e:	6865      	ldr	r5, [r4, #4]
 800e620:	60a5      	str	r5, [r4, #8]
 800e622:	2d00      	cmp	r5, #0
 800e624:	bfa2      	ittt	ge
 800e626:	6821      	ldrge	r1, [r4, #0]
 800e628:	f021 0104 	bicge.w	r1, r1, #4
 800e62c:	6021      	strge	r1, [r4, #0]
 800e62e:	b90e      	cbnz	r6, 800e634 <_printf_i+0x118>
 800e630:	2d00      	cmp	r5, #0
 800e632:	d04d      	beq.n	800e6d0 <_printf_i+0x1b4>
 800e634:	4615      	mov	r5, r2
 800e636:	fbb6 f1f3 	udiv	r1, r6, r3
 800e63a:	fb03 6711 	mls	r7, r3, r1, r6
 800e63e:	5dc7      	ldrb	r7, [r0, r7]
 800e640:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e644:	4637      	mov	r7, r6
 800e646:	42bb      	cmp	r3, r7
 800e648:	460e      	mov	r6, r1
 800e64a:	d9f4      	bls.n	800e636 <_printf_i+0x11a>
 800e64c:	2b08      	cmp	r3, #8
 800e64e:	d10b      	bne.n	800e668 <_printf_i+0x14c>
 800e650:	6823      	ldr	r3, [r4, #0]
 800e652:	07de      	lsls	r6, r3, #31
 800e654:	d508      	bpl.n	800e668 <_printf_i+0x14c>
 800e656:	6923      	ldr	r3, [r4, #16]
 800e658:	6861      	ldr	r1, [r4, #4]
 800e65a:	4299      	cmp	r1, r3
 800e65c:	bfde      	ittt	le
 800e65e:	2330      	movle	r3, #48	; 0x30
 800e660:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e664:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e668:	1b52      	subs	r2, r2, r5
 800e66a:	6122      	str	r2, [r4, #16]
 800e66c:	f8cd a000 	str.w	sl, [sp]
 800e670:	464b      	mov	r3, r9
 800e672:	aa03      	add	r2, sp, #12
 800e674:	4621      	mov	r1, r4
 800e676:	4640      	mov	r0, r8
 800e678:	f7ff fee2 	bl	800e440 <_printf_common>
 800e67c:	3001      	adds	r0, #1
 800e67e:	d14c      	bne.n	800e71a <_printf_i+0x1fe>
 800e680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e684:	b004      	add	sp, #16
 800e686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e68a:	4835      	ldr	r0, [pc, #212]	; (800e760 <_printf_i+0x244>)
 800e68c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e690:	6829      	ldr	r1, [r5, #0]
 800e692:	6823      	ldr	r3, [r4, #0]
 800e694:	f851 6b04 	ldr.w	r6, [r1], #4
 800e698:	6029      	str	r1, [r5, #0]
 800e69a:	061d      	lsls	r5, r3, #24
 800e69c:	d514      	bpl.n	800e6c8 <_printf_i+0x1ac>
 800e69e:	07df      	lsls	r7, r3, #31
 800e6a0:	bf44      	itt	mi
 800e6a2:	f043 0320 	orrmi.w	r3, r3, #32
 800e6a6:	6023      	strmi	r3, [r4, #0]
 800e6a8:	b91e      	cbnz	r6, 800e6b2 <_printf_i+0x196>
 800e6aa:	6823      	ldr	r3, [r4, #0]
 800e6ac:	f023 0320 	bic.w	r3, r3, #32
 800e6b0:	6023      	str	r3, [r4, #0]
 800e6b2:	2310      	movs	r3, #16
 800e6b4:	e7b0      	b.n	800e618 <_printf_i+0xfc>
 800e6b6:	6823      	ldr	r3, [r4, #0]
 800e6b8:	f043 0320 	orr.w	r3, r3, #32
 800e6bc:	6023      	str	r3, [r4, #0]
 800e6be:	2378      	movs	r3, #120	; 0x78
 800e6c0:	4828      	ldr	r0, [pc, #160]	; (800e764 <_printf_i+0x248>)
 800e6c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e6c6:	e7e3      	b.n	800e690 <_printf_i+0x174>
 800e6c8:	0659      	lsls	r1, r3, #25
 800e6ca:	bf48      	it	mi
 800e6cc:	b2b6      	uxthmi	r6, r6
 800e6ce:	e7e6      	b.n	800e69e <_printf_i+0x182>
 800e6d0:	4615      	mov	r5, r2
 800e6d2:	e7bb      	b.n	800e64c <_printf_i+0x130>
 800e6d4:	682b      	ldr	r3, [r5, #0]
 800e6d6:	6826      	ldr	r6, [r4, #0]
 800e6d8:	6961      	ldr	r1, [r4, #20]
 800e6da:	1d18      	adds	r0, r3, #4
 800e6dc:	6028      	str	r0, [r5, #0]
 800e6de:	0635      	lsls	r5, r6, #24
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	d501      	bpl.n	800e6e8 <_printf_i+0x1cc>
 800e6e4:	6019      	str	r1, [r3, #0]
 800e6e6:	e002      	b.n	800e6ee <_printf_i+0x1d2>
 800e6e8:	0670      	lsls	r0, r6, #25
 800e6ea:	d5fb      	bpl.n	800e6e4 <_printf_i+0x1c8>
 800e6ec:	8019      	strh	r1, [r3, #0]
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	6123      	str	r3, [r4, #16]
 800e6f2:	4615      	mov	r5, r2
 800e6f4:	e7ba      	b.n	800e66c <_printf_i+0x150>
 800e6f6:	682b      	ldr	r3, [r5, #0]
 800e6f8:	1d1a      	adds	r2, r3, #4
 800e6fa:	602a      	str	r2, [r5, #0]
 800e6fc:	681d      	ldr	r5, [r3, #0]
 800e6fe:	6862      	ldr	r2, [r4, #4]
 800e700:	2100      	movs	r1, #0
 800e702:	4628      	mov	r0, r5
 800e704:	f7f1 fd94 	bl	8000230 <memchr>
 800e708:	b108      	cbz	r0, 800e70e <_printf_i+0x1f2>
 800e70a:	1b40      	subs	r0, r0, r5
 800e70c:	6060      	str	r0, [r4, #4]
 800e70e:	6863      	ldr	r3, [r4, #4]
 800e710:	6123      	str	r3, [r4, #16]
 800e712:	2300      	movs	r3, #0
 800e714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e718:	e7a8      	b.n	800e66c <_printf_i+0x150>
 800e71a:	6923      	ldr	r3, [r4, #16]
 800e71c:	462a      	mov	r2, r5
 800e71e:	4649      	mov	r1, r9
 800e720:	4640      	mov	r0, r8
 800e722:	47d0      	blx	sl
 800e724:	3001      	adds	r0, #1
 800e726:	d0ab      	beq.n	800e680 <_printf_i+0x164>
 800e728:	6823      	ldr	r3, [r4, #0]
 800e72a:	079b      	lsls	r3, r3, #30
 800e72c:	d413      	bmi.n	800e756 <_printf_i+0x23a>
 800e72e:	68e0      	ldr	r0, [r4, #12]
 800e730:	9b03      	ldr	r3, [sp, #12]
 800e732:	4298      	cmp	r0, r3
 800e734:	bfb8      	it	lt
 800e736:	4618      	movlt	r0, r3
 800e738:	e7a4      	b.n	800e684 <_printf_i+0x168>
 800e73a:	2301      	movs	r3, #1
 800e73c:	4632      	mov	r2, r6
 800e73e:	4649      	mov	r1, r9
 800e740:	4640      	mov	r0, r8
 800e742:	47d0      	blx	sl
 800e744:	3001      	adds	r0, #1
 800e746:	d09b      	beq.n	800e680 <_printf_i+0x164>
 800e748:	3501      	adds	r5, #1
 800e74a:	68e3      	ldr	r3, [r4, #12]
 800e74c:	9903      	ldr	r1, [sp, #12]
 800e74e:	1a5b      	subs	r3, r3, r1
 800e750:	42ab      	cmp	r3, r5
 800e752:	dcf2      	bgt.n	800e73a <_printf_i+0x21e>
 800e754:	e7eb      	b.n	800e72e <_printf_i+0x212>
 800e756:	2500      	movs	r5, #0
 800e758:	f104 0619 	add.w	r6, r4, #25
 800e75c:	e7f5      	b.n	800e74a <_printf_i+0x22e>
 800e75e:	bf00      	nop
 800e760:	0801093e 	.word	0x0801093e
 800e764:	0801094f 	.word	0x0801094f

0800e768 <quorem>:
 800e768:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e76c:	6903      	ldr	r3, [r0, #16]
 800e76e:	690c      	ldr	r4, [r1, #16]
 800e770:	42a3      	cmp	r3, r4
 800e772:	4607      	mov	r7, r0
 800e774:	f2c0 8081 	blt.w	800e87a <quorem+0x112>
 800e778:	3c01      	subs	r4, #1
 800e77a:	f101 0814 	add.w	r8, r1, #20
 800e77e:	f100 0514 	add.w	r5, r0, #20
 800e782:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e786:	9301      	str	r3, [sp, #4]
 800e788:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e78c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e790:	3301      	adds	r3, #1
 800e792:	429a      	cmp	r2, r3
 800e794:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e798:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e79c:	fbb2 f6f3 	udiv	r6, r2, r3
 800e7a0:	d331      	bcc.n	800e806 <quorem+0x9e>
 800e7a2:	f04f 0e00 	mov.w	lr, #0
 800e7a6:	4640      	mov	r0, r8
 800e7a8:	46ac      	mov	ip, r5
 800e7aa:	46f2      	mov	sl, lr
 800e7ac:	f850 2b04 	ldr.w	r2, [r0], #4
 800e7b0:	b293      	uxth	r3, r2
 800e7b2:	fb06 e303 	mla	r3, r6, r3, lr
 800e7b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e7ba:	b29b      	uxth	r3, r3
 800e7bc:	ebaa 0303 	sub.w	r3, sl, r3
 800e7c0:	f8dc a000 	ldr.w	sl, [ip]
 800e7c4:	0c12      	lsrs	r2, r2, #16
 800e7c6:	fa13 f38a 	uxtah	r3, r3, sl
 800e7ca:	fb06 e202 	mla	r2, r6, r2, lr
 800e7ce:	9300      	str	r3, [sp, #0]
 800e7d0:	9b00      	ldr	r3, [sp, #0]
 800e7d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e7d6:	b292      	uxth	r2, r2
 800e7d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e7dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e7e0:	f8bd 3000 	ldrh.w	r3, [sp]
 800e7e4:	4581      	cmp	r9, r0
 800e7e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e7ea:	f84c 3b04 	str.w	r3, [ip], #4
 800e7ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e7f2:	d2db      	bcs.n	800e7ac <quorem+0x44>
 800e7f4:	f855 300b 	ldr.w	r3, [r5, fp]
 800e7f8:	b92b      	cbnz	r3, 800e806 <quorem+0x9e>
 800e7fa:	9b01      	ldr	r3, [sp, #4]
 800e7fc:	3b04      	subs	r3, #4
 800e7fe:	429d      	cmp	r5, r3
 800e800:	461a      	mov	r2, r3
 800e802:	d32e      	bcc.n	800e862 <quorem+0xfa>
 800e804:	613c      	str	r4, [r7, #16]
 800e806:	4638      	mov	r0, r7
 800e808:	f001 f8b6 	bl	800f978 <__mcmp>
 800e80c:	2800      	cmp	r0, #0
 800e80e:	db24      	blt.n	800e85a <quorem+0xf2>
 800e810:	3601      	adds	r6, #1
 800e812:	4628      	mov	r0, r5
 800e814:	f04f 0c00 	mov.w	ip, #0
 800e818:	f858 2b04 	ldr.w	r2, [r8], #4
 800e81c:	f8d0 e000 	ldr.w	lr, [r0]
 800e820:	b293      	uxth	r3, r2
 800e822:	ebac 0303 	sub.w	r3, ip, r3
 800e826:	0c12      	lsrs	r2, r2, #16
 800e828:	fa13 f38e 	uxtah	r3, r3, lr
 800e82c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e830:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e834:	b29b      	uxth	r3, r3
 800e836:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e83a:	45c1      	cmp	r9, r8
 800e83c:	f840 3b04 	str.w	r3, [r0], #4
 800e840:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e844:	d2e8      	bcs.n	800e818 <quorem+0xb0>
 800e846:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e84a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e84e:	b922      	cbnz	r2, 800e85a <quorem+0xf2>
 800e850:	3b04      	subs	r3, #4
 800e852:	429d      	cmp	r5, r3
 800e854:	461a      	mov	r2, r3
 800e856:	d30a      	bcc.n	800e86e <quorem+0x106>
 800e858:	613c      	str	r4, [r7, #16]
 800e85a:	4630      	mov	r0, r6
 800e85c:	b003      	add	sp, #12
 800e85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e862:	6812      	ldr	r2, [r2, #0]
 800e864:	3b04      	subs	r3, #4
 800e866:	2a00      	cmp	r2, #0
 800e868:	d1cc      	bne.n	800e804 <quorem+0x9c>
 800e86a:	3c01      	subs	r4, #1
 800e86c:	e7c7      	b.n	800e7fe <quorem+0x96>
 800e86e:	6812      	ldr	r2, [r2, #0]
 800e870:	3b04      	subs	r3, #4
 800e872:	2a00      	cmp	r2, #0
 800e874:	d1f0      	bne.n	800e858 <quorem+0xf0>
 800e876:	3c01      	subs	r4, #1
 800e878:	e7eb      	b.n	800e852 <quorem+0xea>
 800e87a:	2000      	movs	r0, #0
 800e87c:	e7ee      	b.n	800e85c <quorem+0xf4>
	...

0800e880 <_dtoa_r>:
 800e880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e884:	ed2d 8b04 	vpush	{d8-d9}
 800e888:	ec57 6b10 	vmov	r6, r7, d0
 800e88c:	b093      	sub	sp, #76	; 0x4c
 800e88e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e890:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e894:	9106      	str	r1, [sp, #24]
 800e896:	ee10 aa10 	vmov	sl, s0
 800e89a:	4604      	mov	r4, r0
 800e89c:	9209      	str	r2, [sp, #36]	; 0x24
 800e89e:	930c      	str	r3, [sp, #48]	; 0x30
 800e8a0:	46bb      	mov	fp, r7
 800e8a2:	b975      	cbnz	r5, 800e8c2 <_dtoa_r+0x42>
 800e8a4:	2010      	movs	r0, #16
 800e8a6:	f000 fddd 	bl	800f464 <malloc>
 800e8aa:	4602      	mov	r2, r0
 800e8ac:	6260      	str	r0, [r4, #36]	; 0x24
 800e8ae:	b920      	cbnz	r0, 800e8ba <_dtoa_r+0x3a>
 800e8b0:	4ba7      	ldr	r3, [pc, #668]	; (800eb50 <_dtoa_r+0x2d0>)
 800e8b2:	21ea      	movs	r1, #234	; 0xea
 800e8b4:	48a7      	ldr	r0, [pc, #668]	; (800eb54 <_dtoa_r+0x2d4>)
 800e8b6:	f001 fa67 	bl	800fd88 <__assert_func>
 800e8ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e8be:	6005      	str	r5, [r0, #0]
 800e8c0:	60c5      	str	r5, [r0, #12]
 800e8c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8c4:	6819      	ldr	r1, [r3, #0]
 800e8c6:	b151      	cbz	r1, 800e8de <_dtoa_r+0x5e>
 800e8c8:	685a      	ldr	r2, [r3, #4]
 800e8ca:	604a      	str	r2, [r1, #4]
 800e8cc:	2301      	movs	r3, #1
 800e8ce:	4093      	lsls	r3, r2
 800e8d0:	608b      	str	r3, [r1, #8]
 800e8d2:	4620      	mov	r0, r4
 800e8d4:	f000 fe0e 	bl	800f4f4 <_Bfree>
 800e8d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8da:	2200      	movs	r2, #0
 800e8dc:	601a      	str	r2, [r3, #0]
 800e8de:	1e3b      	subs	r3, r7, #0
 800e8e0:	bfaa      	itet	ge
 800e8e2:	2300      	movge	r3, #0
 800e8e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e8e8:	f8c8 3000 	strge.w	r3, [r8]
 800e8ec:	4b9a      	ldr	r3, [pc, #616]	; (800eb58 <_dtoa_r+0x2d8>)
 800e8ee:	bfbc      	itt	lt
 800e8f0:	2201      	movlt	r2, #1
 800e8f2:	f8c8 2000 	strlt.w	r2, [r8]
 800e8f6:	ea33 030b 	bics.w	r3, r3, fp
 800e8fa:	d11b      	bne.n	800e934 <_dtoa_r+0xb4>
 800e8fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e8fe:	f242 730f 	movw	r3, #9999	; 0x270f
 800e902:	6013      	str	r3, [r2, #0]
 800e904:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e908:	4333      	orrs	r3, r6
 800e90a:	f000 8592 	beq.w	800f432 <_dtoa_r+0xbb2>
 800e90e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e910:	b963      	cbnz	r3, 800e92c <_dtoa_r+0xac>
 800e912:	4b92      	ldr	r3, [pc, #584]	; (800eb5c <_dtoa_r+0x2dc>)
 800e914:	e022      	b.n	800e95c <_dtoa_r+0xdc>
 800e916:	4b92      	ldr	r3, [pc, #584]	; (800eb60 <_dtoa_r+0x2e0>)
 800e918:	9301      	str	r3, [sp, #4]
 800e91a:	3308      	adds	r3, #8
 800e91c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e91e:	6013      	str	r3, [r2, #0]
 800e920:	9801      	ldr	r0, [sp, #4]
 800e922:	b013      	add	sp, #76	; 0x4c
 800e924:	ecbd 8b04 	vpop	{d8-d9}
 800e928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e92c:	4b8b      	ldr	r3, [pc, #556]	; (800eb5c <_dtoa_r+0x2dc>)
 800e92e:	9301      	str	r3, [sp, #4]
 800e930:	3303      	adds	r3, #3
 800e932:	e7f3      	b.n	800e91c <_dtoa_r+0x9c>
 800e934:	2200      	movs	r2, #0
 800e936:	2300      	movs	r3, #0
 800e938:	4650      	mov	r0, sl
 800e93a:	4659      	mov	r1, fp
 800e93c:	f7f2 f8ec 	bl	8000b18 <__aeabi_dcmpeq>
 800e940:	ec4b ab19 	vmov	d9, sl, fp
 800e944:	4680      	mov	r8, r0
 800e946:	b158      	cbz	r0, 800e960 <_dtoa_r+0xe0>
 800e948:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e94a:	2301      	movs	r3, #1
 800e94c:	6013      	str	r3, [r2, #0]
 800e94e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e950:	2b00      	cmp	r3, #0
 800e952:	f000 856b 	beq.w	800f42c <_dtoa_r+0xbac>
 800e956:	4883      	ldr	r0, [pc, #524]	; (800eb64 <_dtoa_r+0x2e4>)
 800e958:	6018      	str	r0, [r3, #0]
 800e95a:	1e43      	subs	r3, r0, #1
 800e95c:	9301      	str	r3, [sp, #4]
 800e95e:	e7df      	b.n	800e920 <_dtoa_r+0xa0>
 800e960:	ec4b ab10 	vmov	d0, sl, fp
 800e964:	aa10      	add	r2, sp, #64	; 0x40
 800e966:	a911      	add	r1, sp, #68	; 0x44
 800e968:	4620      	mov	r0, r4
 800e96a:	f001 f8ab 	bl	800fac4 <__d2b>
 800e96e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e972:	ee08 0a10 	vmov	s16, r0
 800e976:	2d00      	cmp	r5, #0
 800e978:	f000 8084 	beq.w	800ea84 <_dtoa_r+0x204>
 800e97c:	ee19 3a90 	vmov	r3, s19
 800e980:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e984:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e988:	4656      	mov	r6, sl
 800e98a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e98e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e992:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e996:	4b74      	ldr	r3, [pc, #464]	; (800eb68 <_dtoa_r+0x2e8>)
 800e998:	2200      	movs	r2, #0
 800e99a:	4630      	mov	r0, r6
 800e99c:	4639      	mov	r1, r7
 800e99e:	f7f1 fc9b 	bl	80002d8 <__aeabi_dsub>
 800e9a2:	a365      	add	r3, pc, #404	; (adr r3, 800eb38 <_dtoa_r+0x2b8>)
 800e9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a8:	f7f1 fe4e 	bl	8000648 <__aeabi_dmul>
 800e9ac:	a364      	add	r3, pc, #400	; (adr r3, 800eb40 <_dtoa_r+0x2c0>)
 800e9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b2:	f7f1 fc93 	bl	80002dc <__adddf3>
 800e9b6:	4606      	mov	r6, r0
 800e9b8:	4628      	mov	r0, r5
 800e9ba:	460f      	mov	r7, r1
 800e9bc:	f7f1 fdda 	bl	8000574 <__aeabi_i2d>
 800e9c0:	a361      	add	r3, pc, #388	; (adr r3, 800eb48 <_dtoa_r+0x2c8>)
 800e9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c6:	f7f1 fe3f 	bl	8000648 <__aeabi_dmul>
 800e9ca:	4602      	mov	r2, r0
 800e9cc:	460b      	mov	r3, r1
 800e9ce:	4630      	mov	r0, r6
 800e9d0:	4639      	mov	r1, r7
 800e9d2:	f7f1 fc83 	bl	80002dc <__adddf3>
 800e9d6:	4606      	mov	r6, r0
 800e9d8:	460f      	mov	r7, r1
 800e9da:	f7f2 f8e5 	bl	8000ba8 <__aeabi_d2iz>
 800e9de:	2200      	movs	r2, #0
 800e9e0:	9000      	str	r0, [sp, #0]
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	4630      	mov	r0, r6
 800e9e6:	4639      	mov	r1, r7
 800e9e8:	f7f2 f8a0 	bl	8000b2c <__aeabi_dcmplt>
 800e9ec:	b150      	cbz	r0, 800ea04 <_dtoa_r+0x184>
 800e9ee:	9800      	ldr	r0, [sp, #0]
 800e9f0:	f7f1 fdc0 	bl	8000574 <__aeabi_i2d>
 800e9f4:	4632      	mov	r2, r6
 800e9f6:	463b      	mov	r3, r7
 800e9f8:	f7f2 f88e 	bl	8000b18 <__aeabi_dcmpeq>
 800e9fc:	b910      	cbnz	r0, 800ea04 <_dtoa_r+0x184>
 800e9fe:	9b00      	ldr	r3, [sp, #0]
 800ea00:	3b01      	subs	r3, #1
 800ea02:	9300      	str	r3, [sp, #0]
 800ea04:	9b00      	ldr	r3, [sp, #0]
 800ea06:	2b16      	cmp	r3, #22
 800ea08:	d85a      	bhi.n	800eac0 <_dtoa_r+0x240>
 800ea0a:	9a00      	ldr	r2, [sp, #0]
 800ea0c:	4b57      	ldr	r3, [pc, #348]	; (800eb6c <_dtoa_r+0x2ec>)
 800ea0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea16:	ec51 0b19 	vmov	r0, r1, d9
 800ea1a:	f7f2 f887 	bl	8000b2c <__aeabi_dcmplt>
 800ea1e:	2800      	cmp	r0, #0
 800ea20:	d050      	beq.n	800eac4 <_dtoa_r+0x244>
 800ea22:	9b00      	ldr	r3, [sp, #0]
 800ea24:	3b01      	subs	r3, #1
 800ea26:	9300      	str	r3, [sp, #0]
 800ea28:	2300      	movs	r3, #0
 800ea2a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ea2e:	1b5d      	subs	r5, r3, r5
 800ea30:	1e6b      	subs	r3, r5, #1
 800ea32:	9305      	str	r3, [sp, #20]
 800ea34:	bf45      	ittet	mi
 800ea36:	f1c5 0301 	rsbmi	r3, r5, #1
 800ea3a:	9304      	strmi	r3, [sp, #16]
 800ea3c:	2300      	movpl	r3, #0
 800ea3e:	2300      	movmi	r3, #0
 800ea40:	bf4c      	ite	mi
 800ea42:	9305      	strmi	r3, [sp, #20]
 800ea44:	9304      	strpl	r3, [sp, #16]
 800ea46:	9b00      	ldr	r3, [sp, #0]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	db3d      	blt.n	800eac8 <_dtoa_r+0x248>
 800ea4c:	9b05      	ldr	r3, [sp, #20]
 800ea4e:	9a00      	ldr	r2, [sp, #0]
 800ea50:	920a      	str	r2, [sp, #40]	; 0x28
 800ea52:	4413      	add	r3, r2
 800ea54:	9305      	str	r3, [sp, #20]
 800ea56:	2300      	movs	r3, #0
 800ea58:	9307      	str	r3, [sp, #28]
 800ea5a:	9b06      	ldr	r3, [sp, #24]
 800ea5c:	2b09      	cmp	r3, #9
 800ea5e:	f200 8089 	bhi.w	800eb74 <_dtoa_r+0x2f4>
 800ea62:	2b05      	cmp	r3, #5
 800ea64:	bfc4      	itt	gt
 800ea66:	3b04      	subgt	r3, #4
 800ea68:	9306      	strgt	r3, [sp, #24]
 800ea6a:	9b06      	ldr	r3, [sp, #24]
 800ea6c:	f1a3 0302 	sub.w	r3, r3, #2
 800ea70:	bfcc      	ite	gt
 800ea72:	2500      	movgt	r5, #0
 800ea74:	2501      	movle	r5, #1
 800ea76:	2b03      	cmp	r3, #3
 800ea78:	f200 8087 	bhi.w	800eb8a <_dtoa_r+0x30a>
 800ea7c:	e8df f003 	tbb	[pc, r3]
 800ea80:	59383a2d 	.word	0x59383a2d
 800ea84:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ea88:	441d      	add	r5, r3
 800ea8a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ea8e:	2b20      	cmp	r3, #32
 800ea90:	bfc1      	itttt	gt
 800ea92:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ea96:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ea9a:	fa0b f303 	lslgt.w	r3, fp, r3
 800ea9e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800eaa2:	bfda      	itte	le
 800eaa4:	f1c3 0320 	rsble	r3, r3, #32
 800eaa8:	fa06 f003 	lslle.w	r0, r6, r3
 800eaac:	4318      	orrgt	r0, r3
 800eaae:	f7f1 fd51 	bl	8000554 <__aeabi_ui2d>
 800eab2:	2301      	movs	r3, #1
 800eab4:	4606      	mov	r6, r0
 800eab6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800eaba:	3d01      	subs	r5, #1
 800eabc:	930e      	str	r3, [sp, #56]	; 0x38
 800eabe:	e76a      	b.n	800e996 <_dtoa_r+0x116>
 800eac0:	2301      	movs	r3, #1
 800eac2:	e7b2      	b.n	800ea2a <_dtoa_r+0x1aa>
 800eac4:	900b      	str	r0, [sp, #44]	; 0x2c
 800eac6:	e7b1      	b.n	800ea2c <_dtoa_r+0x1ac>
 800eac8:	9b04      	ldr	r3, [sp, #16]
 800eaca:	9a00      	ldr	r2, [sp, #0]
 800eacc:	1a9b      	subs	r3, r3, r2
 800eace:	9304      	str	r3, [sp, #16]
 800ead0:	4253      	negs	r3, r2
 800ead2:	9307      	str	r3, [sp, #28]
 800ead4:	2300      	movs	r3, #0
 800ead6:	930a      	str	r3, [sp, #40]	; 0x28
 800ead8:	e7bf      	b.n	800ea5a <_dtoa_r+0x1da>
 800eada:	2300      	movs	r3, #0
 800eadc:	9308      	str	r3, [sp, #32]
 800eade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	dc55      	bgt.n	800eb90 <_dtoa_r+0x310>
 800eae4:	2301      	movs	r3, #1
 800eae6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800eaea:	461a      	mov	r2, r3
 800eaec:	9209      	str	r2, [sp, #36]	; 0x24
 800eaee:	e00c      	b.n	800eb0a <_dtoa_r+0x28a>
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	e7f3      	b.n	800eadc <_dtoa_r+0x25c>
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eaf8:	9308      	str	r3, [sp, #32]
 800eafa:	9b00      	ldr	r3, [sp, #0]
 800eafc:	4413      	add	r3, r2
 800eafe:	9302      	str	r3, [sp, #8]
 800eb00:	3301      	adds	r3, #1
 800eb02:	2b01      	cmp	r3, #1
 800eb04:	9303      	str	r3, [sp, #12]
 800eb06:	bfb8      	it	lt
 800eb08:	2301      	movlt	r3, #1
 800eb0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	6042      	str	r2, [r0, #4]
 800eb10:	2204      	movs	r2, #4
 800eb12:	f102 0614 	add.w	r6, r2, #20
 800eb16:	429e      	cmp	r6, r3
 800eb18:	6841      	ldr	r1, [r0, #4]
 800eb1a:	d93d      	bls.n	800eb98 <_dtoa_r+0x318>
 800eb1c:	4620      	mov	r0, r4
 800eb1e:	f000 fca9 	bl	800f474 <_Balloc>
 800eb22:	9001      	str	r0, [sp, #4]
 800eb24:	2800      	cmp	r0, #0
 800eb26:	d13b      	bne.n	800eba0 <_dtoa_r+0x320>
 800eb28:	4b11      	ldr	r3, [pc, #68]	; (800eb70 <_dtoa_r+0x2f0>)
 800eb2a:	4602      	mov	r2, r0
 800eb2c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800eb30:	e6c0      	b.n	800e8b4 <_dtoa_r+0x34>
 800eb32:	2301      	movs	r3, #1
 800eb34:	e7df      	b.n	800eaf6 <_dtoa_r+0x276>
 800eb36:	bf00      	nop
 800eb38:	636f4361 	.word	0x636f4361
 800eb3c:	3fd287a7 	.word	0x3fd287a7
 800eb40:	8b60c8b3 	.word	0x8b60c8b3
 800eb44:	3fc68a28 	.word	0x3fc68a28
 800eb48:	509f79fb 	.word	0x509f79fb
 800eb4c:	3fd34413 	.word	0x3fd34413
 800eb50:	0801096d 	.word	0x0801096d
 800eb54:	08010984 	.word	0x08010984
 800eb58:	7ff00000 	.word	0x7ff00000
 800eb5c:	08010969 	.word	0x08010969
 800eb60:	08010960 	.word	0x08010960
 800eb64:	0801093d 	.word	0x0801093d
 800eb68:	3ff80000 	.word	0x3ff80000
 800eb6c:	08010a78 	.word	0x08010a78
 800eb70:	080109df 	.word	0x080109df
 800eb74:	2501      	movs	r5, #1
 800eb76:	2300      	movs	r3, #0
 800eb78:	9306      	str	r3, [sp, #24]
 800eb7a:	9508      	str	r5, [sp, #32]
 800eb7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eb80:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800eb84:	2200      	movs	r2, #0
 800eb86:	2312      	movs	r3, #18
 800eb88:	e7b0      	b.n	800eaec <_dtoa_r+0x26c>
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	9308      	str	r3, [sp, #32]
 800eb8e:	e7f5      	b.n	800eb7c <_dtoa_r+0x2fc>
 800eb90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb92:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800eb96:	e7b8      	b.n	800eb0a <_dtoa_r+0x28a>
 800eb98:	3101      	adds	r1, #1
 800eb9a:	6041      	str	r1, [r0, #4]
 800eb9c:	0052      	lsls	r2, r2, #1
 800eb9e:	e7b8      	b.n	800eb12 <_dtoa_r+0x292>
 800eba0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eba2:	9a01      	ldr	r2, [sp, #4]
 800eba4:	601a      	str	r2, [r3, #0]
 800eba6:	9b03      	ldr	r3, [sp, #12]
 800eba8:	2b0e      	cmp	r3, #14
 800ebaa:	f200 809d 	bhi.w	800ece8 <_dtoa_r+0x468>
 800ebae:	2d00      	cmp	r5, #0
 800ebb0:	f000 809a 	beq.w	800ece8 <_dtoa_r+0x468>
 800ebb4:	9b00      	ldr	r3, [sp, #0]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	dd32      	ble.n	800ec20 <_dtoa_r+0x3a0>
 800ebba:	4ab7      	ldr	r2, [pc, #732]	; (800ee98 <_dtoa_r+0x618>)
 800ebbc:	f003 030f 	and.w	r3, r3, #15
 800ebc0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ebc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ebc8:	9b00      	ldr	r3, [sp, #0]
 800ebca:	05d8      	lsls	r0, r3, #23
 800ebcc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ebd0:	d516      	bpl.n	800ec00 <_dtoa_r+0x380>
 800ebd2:	4bb2      	ldr	r3, [pc, #712]	; (800ee9c <_dtoa_r+0x61c>)
 800ebd4:	ec51 0b19 	vmov	r0, r1, d9
 800ebd8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ebdc:	f7f1 fe5e 	bl	800089c <__aeabi_ddiv>
 800ebe0:	f007 070f 	and.w	r7, r7, #15
 800ebe4:	4682      	mov	sl, r0
 800ebe6:	468b      	mov	fp, r1
 800ebe8:	2503      	movs	r5, #3
 800ebea:	4eac      	ldr	r6, [pc, #688]	; (800ee9c <_dtoa_r+0x61c>)
 800ebec:	b957      	cbnz	r7, 800ec04 <_dtoa_r+0x384>
 800ebee:	4642      	mov	r2, r8
 800ebf0:	464b      	mov	r3, r9
 800ebf2:	4650      	mov	r0, sl
 800ebf4:	4659      	mov	r1, fp
 800ebf6:	f7f1 fe51 	bl	800089c <__aeabi_ddiv>
 800ebfa:	4682      	mov	sl, r0
 800ebfc:	468b      	mov	fp, r1
 800ebfe:	e028      	b.n	800ec52 <_dtoa_r+0x3d2>
 800ec00:	2502      	movs	r5, #2
 800ec02:	e7f2      	b.n	800ebea <_dtoa_r+0x36a>
 800ec04:	07f9      	lsls	r1, r7, #31
 800ec06:	d508      	bpl.n	800ec1a <_dtoa_r+0x39a>
 800ec08:	4640      	mov	r0, r8
 800ec0a:	4649      	mov	r1, r9
 800ec0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ec10:	f7f1 fd1a 	bl	8000648 <__aeabi_dmul>
 800ec14:	3501      	adds	r5, #1
 800ec16:	4680      	mov	r8, r0
 800ec18:	4689      	mov	r9, r1
 800ec1a:	107f      	asrs	r7, r7, #1
 800ec1c:	3608      	adds	r6, #8
 800ec1e:	e7e5      	b.n	800ebec <_dtoa_r+0x36c>
 800ec20:	f000 809b 	beq.w	800ed5a <_dtoa_r+0x4da>
 800ec24:	9b00      	ldr	r3, [sp, #0]
 800ec26:	4f9d      	ldr	r7, [pc, #628]	; (800ee9c <_dtoa_r+0x61c>)
 800ec28:	425e      	negs	r6, r3
 800ec2a:	4b9b      	ldr	r3, [pc, #620]	; (800ee98 <_dtoa_r+0x618>)
 800ec2c:	f006 020f 	and.w	r2, r6, #15
 800ec30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ec34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec38:	ec51 0b19 	vmov	r0, r1, d9
 800ec3c:	f7f1 fd04 	bl	8000648 <__aeabi_dmul>
 800ec40:	1136      	asrs	r6, r6, #4
 800ec42:	4682      	mov	sl, r0
 800ec44:	468b      	mov	fp, r1
 800ec46:	2300      	movs	r3, #0
 800ec48:	2502      	movs	r5, #2
 800ec4a:	2e00      	cmp	r6, #0
 800ec4c:	d17a      	bne.n	800ed44 <_dtoa_r+0x4c4>
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d1d3      	bne.n	800ebfa <_dtoa_r+0x37a>
 800ec52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	f000 8082 	beq.w	800ed5e <_dtoa_r+0x4de>
 800ec5a:	4b91      	ldr	r3, [pc, #580]	; (800eea0 <_dtoa_r+0x620>)
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	4650      	mov	r0, sl
 800ec60:	4659      	mov	r1, fp
 800ec62:	f7f1 ff63 	bl	8000b2c <__aeabi_dcmplt>
 800ec66:	2800      	cmp	r0, #0
 800ec68:	d079      	beq.n	800ed5e <_dtoa_r+0x4de>
 800ec6a:	9b03      	ldr	r3, [sp, #12]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d076      	beq.n	800ed5e <_dtoa_r+0x4de>
 800ec70:	9b02      	ldr	r3, [sp, #8]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	dd36      	ble.n	800ece4 <_dtoa_r+0x464>
 800ec76:	9b00      	ldr	r3, [sp, #0]
 800ec78:	4650      	mov	r0, sl
 800ec7a:	4659      	mov	r1, fp
 800ec7c:	1e5f      	subs	r7, r3, #1
 800ec7e:	2200      	movs	r2, #0
 800ec80:	4b88      	ldr	r3, [pc, #544]	; (800eea4 <_dtoa_r+0x624>)
 800ec82:	f7f1 fce1 	bl	8000648 <__aeabi_dmul>
 800ec86:	9e02      	ldr	r6, [sp, #8]
 800ec88:	4682      	mov	sl, r0
 800ec8a:	468b      	mov	fp, r1
 800ec8c:	3501      	adds	r5, #1
 800ec8e:	4628      	mov	r0, r5
 800ec90:	f7f1 fc70 	bl	8000574 <__aeabi_i2d>
 800ec94:	4652      	mov	r2, sl
 800ec96:	465b      	mov	r3, fp
 800ec98:	f7f1 fcd6 	bl	8000648 <__aeabi_dmul>
 800ec9c:	4b82      	ldr	r3, [pc, #520]	; (800eea8 <_dtoa_r+0x628>)
 800ec9e:	2200      	movs	r2, #0
 800eca0:	f7f1 fb1c 	bl	80002dc <__adddf3>
 800eca4:	46d0      	mov	r8, sl
 800eca6:	46d9      	mov	r9, fp
 800eca8:	4682      	mov	sl, r0
 800ecaa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ecae:	2e00      	cmp	r6, #0
 800ecb0:	d158      	bne.n	800ed64 <_dtoa_r+0x4e4>
 800ecb2:	4b7e      	ldr	r3, [pc, #504]	; (800eeac <_dtoa_r+0x62c>)
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	4640      	mov	r0, r8
 800ecb8:	4649      	mov	r1, r9
 800ecba:	f7f1 fb0d 	bl	80002d8 <__aeabi_dsub>
 800ecbe:	4652      	mov	r2, sl
 800ecc0:	465b      	mov	r3, fp
 800ecc2:	4680      	mov	r8, r0
 800ecc4:	4689      	mov	r9, r1
 800ecc6:	f7f1 ff4f 	bl	8000b68 <__aeabi_dcmpgt>
 800ecca:	2800      	cmp	r0, #0
 800eccc:	f040 8295 	bne.w	800f1fa <_dtoa_r+0x97a>
 800ecd0:	4652      	mov	r2, sl
 800ecd2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ecd6:	4640      	mov	r0, r8
 800ecd8:	4649      	mov	r1, r9
 800ecda:	f7f1 ff27 	bl	8000b2c <__aeabi_dcmplt>
 800ecde:	2800      	cmp	r0, #0
 800ece0:	f040 8289 	bne.w	800f1f6 <_dtoa_r+0x976>
 800ece4:	ec5b ab19 	vmov	sl, fp, d9
 800ece8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	f2c0 8148 	blt.w	800ef80 <_dtoa_r+0x700>
 800ecf0:	9a00      	ldr	r2, [sp, #0]
 800ecf2:	2a0e      	cmp	r2, #14
 800ecf4:	f300 8144 	bgt.w	800ef80 <_dtoa_r+0x700>
 800ecf8:	4b67      	ldr	r3, [pc, #412]	; (800ee98 <_dtoa_r+0x618>)
 800ecfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ecfe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ed02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	f280 80d5 	bge.w	800eeb4 <_dtoa_r+0x634>
 800ed0a:	9b03      	ldr	r3, [sp, #12]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	f300 80d1 	bgt.w	800eeb4 <_dtoa_r+0x634>
 800ed12:	f040 826f 	bne.w	800f1f4 <_dtoa_r+0x974>
 800ed16:	4b65      	ldr	r3, [pc, #404]	; (800eeac <_dtoa_r+0x62c>)
 800ed18:	2200      	movs	r2, #0
 800ed1a:	4640      	mov	r0, r8
 800ed1c:	4649      	mov	r1, r9
 800ed1e:	f7f1 fc93 	bl	8000648 <__aeabi_dmul>
 800ed22:	4652      	mov	r2, sl
 800ed24:	465b      	mov	r3, fp
 800ed26:	f7f1 ff15 	bl	8000b54 <__aeabi_dcmpge>
 800ed2a:	9e03      	ldr	r6, [sp, #12]
 800ed2c:	4637      	mov	r7, r6
 800ed2e:	2800      	cmp	r0, #0
 800ed30:	f040 8245 	bne.w	800f1be <_dtoa_r+0x93e>
 800ed34:	9d01      	ldr	r5, [sp, #4]
 800ed36:	2331      	movs	r3, #49	; 0x31
 800ed38:	f805 3b01 	strb.w	r3, [r5], #1
 800ed3c:	9b00      	ldr	r3, [sp, #0]
 800ed3e:	3301      	adds	r3, #1
 800ed40:	9300      	str	r3, [sp, #0]
 800ed42:	e240      	b.n	800f1c6 <_dtoa_r+0x946>
 800ed44:	07f2      	lsls	r2, r6, #31
 800ed46:	d505      	bpl.n	800ed54 <_dtoa_r+0x4d4>
 800ed48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed4c:	f7f1 fc7c 	bl	8000648 <__aeabi_dmul>
 800ed50:	3501      	adds	r5, #1
 800ed52:	2301      	movs	r3, #1
 800ed54:	1076      	asrs	r6, r6, #1
 800ed56:	3708      	adds	r7, #8
 800ed58:	e777      	b.n	800ec4a <_dtoa_r+0x3ca>
 800ed5a:	2502      	movs	r5, #2
 800ed5c:	e779      	b.n	800ec52 <_dtoa_r+0x3d2>
 800ed5e:	9f00      	ldr	r7, [sp, #0]
 800ed60:	9e03      	ldr	r6, [sp, #12]
 800ed62:	e794      	b.n	800ec8e <_dtoa_r+0x40e>
 800ed64:	9901      	ldr	r1, [sp, #4]
 800ed66:	4b4c      	ldr	r3, [pc, #304]	; (800ee98 <_dtoa_r+0x618>)
 800ed68:	4431      	add	r1, r6
 800ed6a:	910d      	str	r1, [sp, #52]	; 0x34
 800ed6c:	9908      	ldr	r1, [sp, #32]
 800ed6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ed72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ed76:	2900      	cmp	r1, #0
 800ed78:	d043      	beq.n	800ee02 <_dtoa_r+0x582>
 800ed7a:	494d      	ldr	r1, [pc, #308]	; (800eeb0 <_dtoa_r+0x630>)
 800ed7c:	2000      	movs	r0, #0
 800ed7e:	f7f1 fd8d 	bl	800089c <__aeabi_ddiv>
 800ed82:	4652      	mov	r2, sl
 800ed84:	465b      	mov	r3, fp
 800ed86:	f7f1 faa7 	bl	80002d8 <__aeabi_dsub>
 800ed8a:	9d01      	ldr	r5, [sp, #4]
 800ed8c:	4682      	mov	sl, r0
 800ed8e:	468b      	mov	fp, r1
 800ed90:	4649      	mov	r1, r9
 800ed92:	4640      	mov	r0, r8
 800ed94:	f7f1 ff08 	bl	8000ba8 <__aeabi_d2iz>
 800ed98:	4606      	mov	r6, r0
 800ed9a:	f7f1 fbeb 	bl	8000574 <__aeabi_i2d>
 800ed9e:	4602      	mov	r2, r0
 800eda0:	460b      	mov	r3, r1
 800eda2:	4640      	mov	r0, r8
 800eda4:	4649      	mov	r1, r9
 800eda6:	f7f1 fa97 	bl	80002d8 <__aeabi_dsub>
 800edaa:	3630      	adds	r6, #48	; 0x30
 800edac:	f805 6b01 	strb.w	r6, [r5], #1
 800edb0:	4652      	mov	r2, sl
 800edb2:	465b      	mov	r3, fp
 800edb4:	4680      	mov	r8, r0
 800edb6:	4689      	mov	r9, r1
 800edb8:	f7f1 feb8 	bl	8000b2c <__aeabi_dcmplt>
 800edbc:	2800      	cmp	r0, #0
 800edbe:	d163      	bne.n	800ee88 <_dtoa_r+0x608>
 800edc0:	4642      	mov	r2, r8
 800edc2:	464b      	mov	r3, r9
 800edc4:	4936      	ldr	r1, [pc, #216]	; (800eea0 <_dtoa_r+0x620>)
 800edc6:	2000      	movs	r0, #0
 800edc8:	f7f1 fa86 	bl	80002d8 <__aeabi_dsub>
 800edcc:	4652      	mov	r2, sl
 800edce:	465b      	mov	r3, fp
 800edd0:	f7f1 feac 	bl	8000b2c <__aeabi_dcmplt>
 800edd4:	2800      	cmp	r0, #0
 800edd6:	f040 80b5 	bne.w	800ef44 <_dtoa_r+0x6c4>
 800edda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eddc:	429d      	cmp	r5, r3
 800edde:	d081      	beq.n	800ece4 <_dtoa_r+0x464>
 800ede0:	4b30      	ldr	r3, [pc, #192]	; (800eea4 <_dtoa_r+0x624>)
 800ede2:	2200      	movs	r2, #0
 800ede4:	4650      	mov	r0, sl
 800ede6:	4659      	mov	r1, fp
 800ede8:	f7f1 fc2e 	bl	8000648 <__aeabi_dmul>
 800edec:	4b2d      	ldr	r3, [pc, #180]	; (800eea4 <_dtoa_r+0x624>)
 800edee:	4682      	mov	sl, r0
 800edf0:	468b      	mov	fp, r1
 800edf2:	4640      	mov	r0, r8
 800edf4:	4649      	mov	r1, r9
 800edf6:	2200      	movs	r2, #0
 800edf8:	f7f1 fc26 	bl	8000648 <__aeabi_dmul>
 800edfc:	4680      	mov	r8, r0
 800edfe:	4689      	mov	r9, r1
 800ee00:	e7c6      	b.n	800ed90 <_dtoa_r+0x510>
 800ee02:	4650      	mov	r0, sl
 800ee04:	4659      	mov	r1, fp
 800ee06:	f7f1 fc1f 	bl	8000648 <__aeabi_dmul>
 800ee0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee0c:	9d01      	ldr	r5, [sp, #4]
 800ee0e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee10:	4682      	mov	sl, r0
 800ee12:	468b      	mov	fp, r1
 800ee14:	4649      	mov	r1, r9
 800ee16:	4640      	mov	r0, r8
 800ee18:	f7f1 fec6 	bl	8000ba8 <__aeabi_d2iz>
 800ee1c:	4606      	mov	r6, r0
 800ee1e:	f7f1 fba9 	bl	8000574 <__aeabi_i2d>
 800ee22:	3630      	adds	r6, #48	; 0x30
 800ee24:	4602      	mov	r2, r0
 800ee26:	460b      	mov	r3, r1
 800ee28:	4640      	mov	r0, r8
 800ee2a:	4649      	mov	r1, r9
 800ee2c:	f7f1 fa54 	bl	80002d8 <__aeabi_dsub>
 800ee30:	f805 6b01 	strb.w	r6, [r5], #1
 800ee34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee36:	429d      	cmp	r5, r3
 800ee38:	4680      	mov	r8, r0
 800ee3a:	4689      	mov	r9, r1
 800ee3c:	f04f 0200 	mov.w	r2, #0
 800ee40:	d124      	bne.n	800ee8c <_dtoa_r+0x60c>
 800ee42:	4b1b      	ldr	r3, [pc, #108]	; (800eeb0 <_dtoa_r+0x630>)
 800ee44:	4650      	mov	r0, sl
 800ee46:	4659      	mov	r1, fp
 800ee48:	f7f1 fa48 	bl	80002dc <__adddf3>
 800ee4c:	4602      	mov	r2, r0
 800ee4e:	460b      	mov	r3, r1
 800ee50:	4640      	mov	r0, r8
 800ee52:	4649      	mov	r1, r9
 800ee54:	f7f1 fe88 	bl	8000b68 <__aeabi_dcmpgt>
 800ee58:	2800      	cmp	r0, #0
 800ee5a:	d173      	bne.n	800ef44 <_dtoa_r+0x6c4>
 800ee5c:	4652      	mov	r2, sl
 800ee5e:	465b      	mov	r3, fp
 800ee60:	4913      	ldr	r1, [pc, #76]	; (800eeb0 <_dtoa_r+0x630>)
 800ee62:	2000      	movs	r0, #0
 800ee64:	f7f1 fa38 	bl	80002d8 <__aeabi_dsub>
 800ee68:	4602      	mov	r2, r0
 800ee6a:	460b      	mov	r3, r1
 800ee6c:	4640      	mov	r0, r8
 800ee6e:	4649      	mov	r1, r9
 800ee70:	f7f1 fe5c 	bl	8000b2c <__aeabi_dcmplt>
 800ee74:	2800      	cmp	r0, #0
 800ee76:	f43f af35 	beq.w	800ece4 <_dtoa_r+0x464>
 800ee7a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ee7c:	1e6b      	subs	r3, r5, #1
 800ee7e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee80:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ee84:	2b30      	cmp	r3, #48	; 0x30
 800ee86:	d0f8      	beq.n	800ee7a <_dtoa_r+0x5fa>
 800ee88:	9700      	str	r7, [sp, #0]
 800ee8a:	e049      	b.n	800ef20 <_dtoa_r+0x6a0>
 800ee8c:	4b05      	ldr	r3, [pc, #20]	; (800eea4 <_dtoa_r+0x624>)
 800ee8e:	f7f1 fbdb 	bl	8000648 <__aeabi_dmul>
 800ee92:	4680      	mov	r8, r0
 800ee94:	4689      	mov	r9, r1
 800ee96:	e7bd      	b.n	800ee14 <_dtoa_r+0x594>
 800ee98:	08010a78 	.word	0x08010a78
 800ee9c:	08010a50 	.word	0x08010a50
 800eea0:	3ff00000 	.word	0x3ff00000
 800eea4:	40240000 	.word	0x40240000
 800eea8:	401c0000 	.word	0x401c0000
 800eeac:	40140000 	.word	0x40140000
 800eeb0:	3fe00000 	.word	0x3fe00000
 800eeb4:	9d01      	ldr	r5, [sp, #4]
 800eeb6:	4656      	mov	r6, sl
 800eeb8:	465f      	mov	r7, fp
 800eeba:	4642      	mov	r2, r8
 800eebc:	464b      	mov	r3, r9
 800eebe:	4630      	mov	r0, r6
 800eec0:	4639      	mov	r1, r7
 800eec2:	f7f1 fceb 	bl	800089c <__aeabi_ddiv>
 800eec6:	f7f1 fe6f 	bl	8000ba8 <__aeabi_d2iz>
 800eeca:	4682      	mov	sl, r0
 800eecc:	f7f1 fb52 	bl	8000574 <__aeabi_i2d>
 800eed0:	4642      	mov	r2, r8
 800eed2:	464b      	mov	r3, r9
 800eed4:	f7f1 fbb8 	bl	8000648 <__aeabi_dmul>
 800eed8:	4602      	mov	r2, r0
 800eeda:	460b      	mov	r3, r1
 800eedc:	4630      	mov	r0, r6
 800eede:	4639      	mov	r1, r7
 800eee0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800eee4:	f7f1 f9f8 	bl	80002d8 <__aeabi_dsub>
 800eee8:	f805 6b01 	strb.w	r6, [r5], #1
 800eeec:	9e01      	ldr	r6, [sp, #4]
 800eeee:	9f03      	ldr	r7, [sp, #12]
 800eef0:	1bae      	subs	r6, r5, r6
 800eef2:	42b7      	cmp	r7, r6
 800eef4:	4602      	mov	r2, r0
 800eef6:	460b      	mov	r3, r1
 800eef8:	d135      	bne.n	800ef66 <_dtoa_r+0x6e6>
 800eefa:	f7f1 f9ef 	bl	80002dc <__adddf3>
 800eefe:	4642      	mov	r2, r8
 800ef00:	464b      	mov	r3, r9
 800ef02:	4606      	mov	r6, r0
 800ef04:	460f      	mov	r7, r1
 800ef06:	f7f1 fe2f 	bl	8000b68 <__aeabi_dcmpgt>
 800ef0a:	b9d0      	cbnz	r0, 800ef42 <_dtoa_r+0x6c2>
 800ef0c:	4642      	mov	r2, r8
 800ef0e:	464b      	mov	r3, r9
 800ef10:	4630      	mov	r0, r6
 800ef12:	4639      	mov	r1, r7
 800ef14:	f7f1 fe00 	bl	8000b18 <__aeabi_dcmpeq>
 800ef18:	b110      	cbz	r0, 800ef20 <_dtoa_r+0x6a0>
 800ef1a:	f01a 0f01 	tst.w	sl, #1
 800ef1e:	d110      	bne.n	800ef42 <_dtoa_r+0x6c2>
 800ef20:	4620      	mov	r0, r4
 800ef22:	ee18 1a10 	vmov	r1, s16
 800ef26:	f000 fae5 	bl	800f4f4 <_Bfree>
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	9800      	ldr	r0, [sp, #0]
 800ef2e:	702b      	strb	r3, [r5, #0]
 800ef30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef32:	3001      	adds	r0, #1
 800ef34:	6018      	str	r0, [r3, #0]
 800ef36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	f43f acf1 	beq.w	800e920 <_dtoa_r+0xa0>
 800ef3e:	601d      	str	r5, [r3, #0]
 800ef40:	e4ee      	b.n	800e920 <_dtoa_r+0xa0>
 800ef42:	9f00      	ldr	r7, [sp, #0]
 800ef44:	462b      	mov	r3, r5
 800ef46:	461d      	mov	r5, r3
 800ef48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ef4c:	2a39      	cmp	r2, #57	; 0x39
 800ef4e:	d106      	bne.n	800ef5e <_dtoa_r+0x6de>
 800ef50:	9a01      	ldr	r2, [sp, #4]
 800ef52:	429a      	cmp	r2, r3
 800ef54:	d1f7      	bne.n	800ef46 <_dtoa_r+0x6c6>
 800ef56:	9901      	ldr	r1, [sp, #4]
 800ef58:	2230      	movs	r2, #48	; 0x30
 800ef5a:	3701      	adds	r7, #1
 800ef5c:	700a      	strb	r2, [r1, #0]
 800ef5e:	781a      	ldrb	r2, [r3, #0]
 800ef60:	3201      	adds	r2, #1
 800ef62:	701a      	strb	r2, [r3, #0]
 800ef64:	e790      	b.n	800ee88 <_dtoa_r+0x608>
 800ef66:	4ba6      	ldr	r3, [pc, #664]	; (800f200 <_dtoa_r+0x980>)
 800ef68:	2200      	movs	r2, #0
 800ef6a:	f7f1 fb6d 	bl	8000648 <__aeabi_dmul>
 800ef6e:	2200      	movs	r2, #0
 800ef70:	2300      	movs	r3, #0
 800ef72:	4606      	mov	r6, r0
 800ef74:	460f      	mov	r7, r1
 800ef76:	f7f1 fdcf 	bl	8000b18 <__aeabi_dcmpeq>
 800ef7a:	2800      	cmp	r0, #0
 800ef7c:	d09d      	beq.n	800eeba <_dtoa_r+0x63a>
 800ef7e:	e7cf      	b.n	800ef20 <_dtoa_r+0x6a0>
 800ef80:	9a08      	ldr	r2, [sp, #32]
 800ef82:	2a00      	cmp	r2, #0
 800ef84:	f000 80d7 	beq.w	800f136 <_dtoa_r+0x8b6>
 800ef88:	9a06      	ldr	r2, [sp, #24]
 800ef8a:	2a01      	cmp	r2, #1
 800ef8c:	f300 80ba 	bgt.w	800f104 <_dtoa_r+0x884>
 800ef90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ef92:	2a00      	cmp	r2, #0
 800ef94:	f000 80b2 	beq.w	800f0fc <_dtoa_r+0x87c>
 800ef98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ef9c:	9e07      	ldr	r6, [sp, #28]
 800ef9e:	9d04      	ldr	r5, [sp, #16]
 800efa0:	9a04      	ldr	r2, [sp, #16]
 800efa2:	441a      	add	r2, r3
 800efa4:	9204      	str	r2, [sp, #16]
 800efa6:	9a05      	ldr	r2, [sp, #20]
 800efa8:	2101      	movs	r1, #1
 800efaa:	441a      	add	r2, r3
 800efac:	4620      	mov	r0, r4
 800efae:	9205      	str	r2, [sp, #20]
 800efb0:	f000 fb58 	bl	800f664 <__i2b>
 800efb4:	4607      	mov	r7, r0
 800efb6:	2d00      	cmp	r5, #0
 800efb8:	dd0c      	ble.n	800efd4 <_dtoa_r+0x754>
 800efba:	9b05      	ldr	r3, [sp, #20]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	dd09      	ble.n	800efd4 <_dtoa_r+0x754>
 800efc0:	42ab      	cmp	r3, r5
 800efc2:	9a04      	ldr	r2, [sp, #16]
 800efc4:	bfa8      	it	ge
 800efc6:	462b      	movge	r3, r5
 800efc8:	1ad2      	subs	r2, r2, r3
 800efca:	9204      	str	r2, [sp, #16]
 800efcc:	9a05      	ldr	r2, [sp, #20]
 800efce:	1aed      	subs	r5, r5, r3
 800efd0:	1ad3      	subs	r3, r2, r3
 800efd2:	9305      	str	r3, [sp, #20]
 800efd4:	9b07      	ldr	r3, [sp, #28]
 800efd6:	b31b      	cbz	r3, 800f020 <_dtoa_r+0x7a0>
 800efd8:	9b08      	ldr	r3, [sp, #32]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	f000 80af 	beq.w	800f13e <_dtoa_r+0x8be>
 800efe0:	2e00      	cmp	r6, #0
 800efe2:	dd13      	ble.n	800f00c <_dtoa_r+0x78c>
 800efe4:	4639      	mov	r1, r7
 800efe6:	4632      	mov	r2, r6
 800efe8:	4620      	mov	r0, r4
 800efea:	f000 fbfb 	bl	800f7e4 <__pow5mult>
 800efee:	ee18 2a10 	vmov	r2, s16
 800eff2:	4601      	mov	r1, r0
 800eff4:	4607      	mov	r7, r0
 800eff6:	4620      	mov	r0, r4
 800eff8:	f000 fb4a 	bl	800f690 <__multiply>
 800effc:	ee18 1a10 	vmov	r1, s16
 800f000:	4680      	mov	r8, r0
 800f002:	4620      	mov	r0, r4
 800f004:	f000 fa76 	bl	800f4f4 <_Bfree>
 800f008:	ee08 8a10 	vmov	s16, r8
 800f00c:	9b07      	ldr	r3, [sp, #28]
 800f00e:	1b9a      	subs	r2, r3, r6
 800f010:	d006      	beq.n	800f020 <_dtoa_r+0x7a0>
 800f012:	ee18 1a10 	vmov	r1, s16
 800f016:	4620      	mov	r0, r4
 800f018:	f000 fbe4 	bl	800f7e4 <__pow5mult>
 800f01c:	ee08 0a10 	vmov	s16, r0
 800f020:	2101      	movs	r1, #1
 800f022:	4620      	mov	r0, r4
 800f024:	f000 fb1e 	bl	800f664 <__i2b>
 800f028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	4606      	mov	r6, r0
 800f02e:	f340 8088 	ble.w	800f142 <_dtoa_r+0x8c2>
 800f032:	461a      	mov	r2, r3
 800f034:	4601      	mov	r1, r0
 800f036:	4620      	mov	r0, r4
 800f038:	f000 fbd4 	bl	800f7e4 <__pow5mult>
 800f03c:	9b06      	ldr	r3, [sp, #24]
 800f03e:	2b01      	cmp	r3, #1
 800f040:	4606      	mov	r6, r0
 800f042:	f340 8081 	ble.w	800f148 <_dtoa_r+0x8c8>
 800f046:	f04f 0800 	mov.w	r8, #0
 800f04a:	6933      	ldr	r3, [r6, #16]
 800f04c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f050:	6918      	ldr	r0, [r3, #16]
 800f052:	f000 fab7 	bl	800f5c4 <__hi0bits>
 800f056:	f1c0 0020 	rsb	r0, r0, #32
 800f05a:	9b05      	ldr	r3, [sp, #20]
 800f05c:	4418      	add	r0, r3
 800f05e:	f010 001f 	ands.w	r0, r0, #31
 800f062:	f000 8092 	beq.w	800f18a <_dtoa_r+0x90a>
 800f066:	f1c0 0320 	rsb	r3, r0, #32
 800f06a:	2b04      	cmp	r3, #4
 800f06c:	f340 808a 	ble.w	800f184 <_dtoa_r+0x904>
 800f070:	f1c0 001c 	rsb	r0, r0, #28
 800f074:	9b04      	ldr	r3, [sp, #16]
 800f076:	4403      	add	r3, r0
 800f078:	9304      	str	r3, [sp, #16]
 800f07a:	9b05      	ldr	r3, [sp, #20]
 800f07c:	4403      	add	r3, r0
 800f07e:	4405      	add	r5, r0
 800f080:	9305      	str	r3, [sp, #20]
 800f082:	9b04      	ldr	r3, [sp, #16]
 800f084:	2b00      	cmp	r3, #0
 800f086:	dd07      	ble.n	800f098 <_dtoa_r+0x818>
 800f088:	ee18 1a10 	vmov	r1, s16
 800f08c:	461a      	mov	r2, r3
 800f08e:	4620      	mov	r0, r4
 800f090:	f000 fc02 	bl	800f898 <__lshift>
 800f094:	ee08 0a10 	vmov	s16, r0
 800f098:	9b05      	ldr	r3, [sp, #20]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	dd05      	ble.n	800f0aa <_dtoa_r+0x82a>
 800f09e:	4631      	mov	r1, r6
 800f0a0:	461a      	mov	r2, r3
 800f0a2:	4620      	mov	r0, r4
 800f0a4:	f000 fbf8 	bl	800f898 <__lshift>
 800f0a8:	4606      	mov	r6, r0
 800f0aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d06e      	beq.n	800f18e <_dtoa_r+0x90e>
 800f0b0:	ee18 0a10 	vmov	r0, s16
 800f0b4:	4631      	mov	r1, r6
 800f0b6:	f000 fc5f 	bl	800f978 <__mcmp>
 800f0ba:	2800      	cmp	r0, #0
 800f0bc:	da67      	bge.n	800f18e <_dtoa_r+0x90e>
 800f0be:	9b00      	ldr	r3, [sp, #0]
 800f0c0:	3b01      	subs	r3, #1
 800f0c2:	ee18 1a10 	vmov	r1, s16
 800f0c6:	9300      	str	r3, [sp, #0]
 800f0c8:	220a      	movs	r2, #10
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	4620      	mov	r0, r4
 800f0ce:	f000 fa33 	bl	800f538 <__multadd>
 800f0d2:	9b08      	ldr	r3, [sp, #32]
 800f0d4:	ee08 0a10 	vmov	s16, r0
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	f000 81b1 	beq.w	800f440 <_dtoa_r+0xbc0>
 800f0de:	2300      	movs	r3, #0
 800f0e0:	4639      	mov	r1, r7
 800f0e2:	220a      	movs	r2, #10
 800f0e4:	4620      	mov	r0, r4
 800f0e6:	f000 fa27 	bl	800f538 <__multadd>
 800f0ea:	9b02      	ldr	r3, [sp, #8]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	4607      	mov	r7, r0
 800f0f0:	f300 808e 	bgt.w	800f210 <_dtoa_r+0x990>
 800f0f4:	9b06      	ldr	r3, [sp, #24]
 800f0f6:	2b02      	cmp	r3, #2
 800f0f8:	dc51      	bgt.n	800f19e <_dtoa_r+0x91e>
 800f0fa:	e089      	b.n	800f210 <_dtoa_r+0x990>
 800f0fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f0fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f102:	e74b      	b.n	800ef9c <_dtoa_r+0x71c>
 800f104:	9b03      	ldr	r3, [sp, #12]
 800f106:	1e5e      	subs	r6, r3, #1
 800f108:	9b07      	ldr	r3, [sp, #28]
 800f10a:	42b3      	cmp	r3, r6
 800f10c:	bfbf      	itttt	lt
 800f10e:	9b07      	ldrlt	r3, [sp, #28]
 800f110:	9607      	strlt	r6, [sp, #28]
 800f112:	1af2      	sublt	r2, r6, r3
 800f114:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f116:	bfb6      	itet	lt
 800f118:	189b      	addlt	r3, r3, r2
 800f11a:	1b9e      	subge	r6, r3, r6
 800f11c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f11e:	9b03      	ldr	r3, [sp, #12]
 800f120:	bfb8      	it	lt
 800f122:	2600      	movlt	r6, #0
 800f124:	2b00      	cmp	r3, #0
 800f126:	bfb7      	itett	lt
 800f128:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f12c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f130:	1a9d      	sublt	r5, r3, r2
 800f132:	2300      	movlt	r3, #0
 800f134:	e734      	b.n	800efa0 <_dtoa_r+0x720>
 800f136:	9e07      	ldr	r6, [sp, #28]
 800f138:	9d04      	ldr	r5, [sp, #16]
 800f13a:	9f08      	ldr	r7, [sp, #32]
 800f13c:	e73b      	b.n	800efb6 <_dtoa_r+0x736>
 800f13e:	9a07      	ldr	r2, [sp, #28]
 800f140:	e767      	b.n	800f012 <_dtoa_r+0x792>
 800f142:	9b06      	ldr	r3, [sp, #24]
 800f144:	2b01      	cmp	r3, #1
 800f146:	dc18      	bgt.n	800f17a <_dtoa_r+0x8fa>
 800f148:	f1ba 0f00 	cmp.w	sl, #0
 800f14c:	d115      	bne.n	800f17a <_dtoa_r+0x8fa>
 800f14e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f152:	b993      	cbnz	r3, 800f17a <_dtoa_r+0x8fa>
 800f154:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f158:	0d1b      	lsrs	r3, r3, #20
 800f15a:	051b      	lsls	r3, r3, #20
 800f15c:	b183      	cbz	r3, 800f180 <_dtoa_r+0x900>
 800f15e:	9b04      	ldr	r3, [sp, #16]
 800f160:	3301      	adds	r3, #1
 800f162:	9304      	str	r3, [sp, #16]
 800f164:	9b05      	ldr	r3, [sp, #20]
 800f166:	3301      	adds	r3, #1
 800f168:	9305      	str	r3, [sp, #20]
 800f16a:	f04f 0801 	mov.w	r8, #1
 800f16e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f170:	2b00      	cmp	r3, #0
 800f172:	f47f af6a 	bne.w	800f04a <_dtoa_r+0x7ca>
 800f176:	2001      	movs	r0, #1
 800f178:	e76f      	b.n	800f05a <_dtoa_r+0x7da>
 800f17a:	f04f 0800 	mov.w	r8, #0
 800f17e:	e7f6      	b.n	800f16e <_dtoa_r+0x8ee>
 800f180:	4698      	mov	r8, r3
 800f182:	e7f4      	b.n	800f16e <_dtoa_r+0x8ee>
 800f184:	f43f af7d 	beq.w	800f082 <_dtoa_r+0x802>
 800f188:	4618      	mov	r0, r3
 800f18a:	301c      	adds	r0, #28
 800f18c:	e772      	b.n	800f074 <_dtoa_r+0x7f4>
 800f18e:	9b03      	ldr	r3, [sp, #12]
 800f190:	2b00      	cmp	r3, #0
 800f192:	dc37      	bgt.n	800f204 <_dtoa_r+0x984>
 800f194:	9b06      	ldr	r3, [sp, #24]
 800f196:	2b02      	cmp	r3, #2
 800f198:	dd34      	ble.n	800f204 <_dtoa_r+0x984>
 800f19a:	9b03      	ldr	r3, [sp, #12]
 800f19c:	9302      	str	r3, [sp, #8]
 800f19e:	9b02      	ldr	r3, [sp, #8]
 800f1a0:	b96b      	cbnz	r3, 800f1be <_dtoa_r+0x93e>
 800f1a2:	4631      	mov	r1, r6
 800f1a4:	2205      	movs	r2, #5
 800f1a6:	4620      	mov	r0, r4
 800f1a8:	f000 f9c6 	bl	800f538 <__multadd>
 800f1ac:	4601      	mov	r1, r0
 800f1ae:	4606      	mov	r6, r0
 800f1b0:	ee18 0a10 	vmov	r0, s16
 800f1b4:	f000 fbe0 	bl	800f978 <__mcmp>
 800f1b8:	2800      	cmp	r0, #0
 800f1ba:	f73f adbb 	bgt.w	800ed34 <_dtoa_r+0x4b4>
 800f1be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1c0:	9d01      	ldr	r5, [sp, #4]
 800f1c2:	43db      	mvns	r3, r3
 800f1c4:	9300      	str	r3, [sp, #0]
 800f1c6:	f04f 0800 	mov.w	r8, #0
 800f1ca:	4631      	mov	r1, r6
 800f1cc:	4620      	mov	r0, r4
 800f1ce:	f000 f991 	bl	800f4f4 <_Bfree>
 800f1d2:	2f00      	cmp	r7, #0
 800f1d4:	f43f aea4 	beq.w	800ef20 <_dtoa_r+0x6a0>
 800f1d8:	f1b8 0f00 	cmp.w	r8, #0
 800f1dc:	d005      	beq.n	800f1ea <_dtoa_r+0x96a>
 800f1de:	45b8      	cmp	r8, r7
 800f1e0:	d003      	beq.n	800f1ea <_dtoa_r+0x96a>
 800f1e2:	4641      	mov	r1, r8
 800f1e4:	4620      	mov	r0, r4
 800f1e6:	f000 f985 	bl	800f4f4 <_Bfree>
 800f1ea:	4639      	mov	r1, r7
 800f1ec:	4620      	mov	r0, r4
 800f1ee:	f000 f981 	bl	800f4f4 <_Bfree>
 800f1f2:	e695      	b.n	800ef20 <_dtoa_r+0x6a0>
 800f1f4:	2600      	movs	r6, #0
 800f1f6:	4637      	mov	r7, r6
 800f1f8:	e7e1      	b.n	800f1be <_dtoa_r+0x93e>
 800f1fa:	9700      	str	r7, [sp, #0]
 800f1fc:	4637      	mov	r7, r6
 800f1fe:	e599      	b.n	800ed34 <_dtoa_r+0x4b4>
 800f200:	40240000 	.word	0x40240000
 800f204:	9b08      	ldr	r3, [sp, #32]
 800f206:	2b00      	cmp	r3, #0
 800f208:	f000 80ca 	beq.w	800f3a0 <_dtoa_r+0xb20>
 800f20c:	9b03      	ldr	r3, [sp, #12]
 800f20e:	9302      	str	r3, [sp, #8]
 800f210:	2d00      	cmp	r5, #0
 800f212:	dd05      	ble.n	800f220 <_dtoa_r+0x9a0>
 800f214:	4639      	mov	r1, r7
 800f216:	462a      	mov	r2, r5
 800f218:	4620      	mov	r0, r4
 800f21a:	f000 fb3d 	bl	800f898 <__lshift>
 800f21e:	4607      	mov	r7, r0
 800f220:	f1b8 0f00 	cmp.w	r8, #0
 800f224:	d05b      	beq.n	800f2de <_dtoa_r+0xa5e>
 800f226:	6879      	ldr	r1, [r7, #4]
 800f228:	4620      	mov	r0, r4
 800f22a:	f000 f923 	bl	800f474 <_Balloc>
 800f22e:	4605      	mov	r5, r0
 800f230:	b928      	cbnz	r0, 800f23e <_dtoa_r+0x9be>
 800f232:	4b87      	ldr	r3, [pc, #540]	; (800f450 <_dtoa_r+0xbd0>)
 800f234:	4602      	mov	r2, r0
 800f236:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f23a:	f7ff bb3b 	b.w	800e8b4 <_dtoa_r+0x34>
 800f23e:	693a      	ldr	r2, [r7, #16]
 800f240:	3202      	adds	r2, #2
 800f242:	0092      	lsls	r2, r2, #2
 800f244:	f107 010c 	add.w	r1, r7, #12
 800f248:	300c      	adds	r0, #12
 800f24a:	f7fe fe0d 	bl	800de68 <memcpy>
 800f24e:	2201      	movs	r2, #1
 800f250:	4629      	mov	r1, r5
 800f252:	4620      	mov	r0, r4
 800f254:	f000 fb20 	bl	800f898 <__lshift>
 800f258:	9b01      	ldr	r3, [sp, #4]
 800f25a:	f103 0901 	add.w	r9, r3, #1
 800f25e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f262:	4413      	add	r3, r2
 800f264:	9305      	str	r3, [sp, #20]
 800f266:	f00a 0301 	and.w	r3, sl, #1
 800f26a:	46b8      	mov	r8, r7
 800f26c:	9304      	str	r3, [sp, #16]
 800f26e:	4607      	mov	r7, r0
 800f270:	4631      	mov	r1, r6
 800f272:	ee18 0a10 	vmov	r0, s16
 800f276:	f7ff fa77 	bl	800e768 <quorem>
 800f27a:	4641      	mov	r1, r8
 800f27c:	9002      	str	r0, [sp, #8]
 800f27e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f282:	ee18 0a10 	vmov	r0, s16
 800f286:	f000 fb77 	bl	800f978 <__mcmp>
 800f28a:	463a      	mov	r2, r7
 800f28c:	9003      	str	r0, [sp, #12]
 800f28e:	4631      	mov	r1, r6
 800f290:	4620      	mov	r0, r4
 800f292:	f000 fb8d 	bl	800f9b0 <__mdiff>
 800f296:	68c2      	ldr	r2, [r0, #12]
 800f298:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800f29c:	4605      	mov	r5, r0
 800f29e:	bb02      	cbnz	r2, 800f2e2 <_dtoa_r+0xa62>
 800f2a0:	4601      	mov	r1, r0
 800f2a2:	ee18 0a10 	vmov	r0, s16
 800f2a6:	f000 fb67 	bl	800f978 <__mcmp>
 800f2aa:	4602      	mov	r2, r0
 800f2ac:	4629      	mov	r1, r5
 800f2ae:	4620      	mov	r0, r4
 800f2b0:	9207      	str	r2, [sp, #28]
 800f2b2:	f000 f91f 	bl	800f4f4 <_Bfree>
 800f2b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f2ba:	ea43 0102 	orr.w	r1, r3, r2
 800f2be:	9b04      	ldr	r3, [sp, #16]
 800f2c0:	430b      	orrs	r3, r1
 800f2c2:	464d      	mov	r5, r9
 800f2c4:	d10f      	bne.n	800f2e6 <_dtoa_r+0xa66>
 800f2c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f2ca:	d02a      	beq.n	800f322 <_dtoa_r+0xaa2>
 800f2cc:	9b03      	ldr	r3, [sp, #12]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	dd02      	ble.n	800f2d8 <_dtoa_r+0xa58>
 800f2d2:	9b02      	ldr	r3, [sp, #8]
 800f2d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f2d8:	f88b a000 	strb.w	sl, [fp]
 800f2dc:	e775      	b.n	800f1ca <_dtoa_r+0x94a>
 800f2de:	4638      	mov	r0, r7
 800f2e0:	e7ba      	b.n	800f258 <_dtoa_r+0x9d8>
 800f2e2:	2201      	movs	r2, #1
 800f2e4:	e7e2      	b.n	800f2ac <_dtoa_r+0xa2c>
 800f2e6:	9b03      	ldr	r3, [sp, #12]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	db04      	blt.n	800f2f6 <_dtoa_r+0xa76>
 800f2ec:	9906      	ldr	r1, [sp, #24]
 800f2ee:	430b      	orrs	r3, r1
 800f2f0:	9904      	ldr	r1, [sp, #16]
 800f2f2:	430b      	orrs	r3, r1
 800f2f4:	d122      	bne.n	800f33c <_dtoa_r+0xabc>
 800f2f6:	2a00      	cmp	r2, #0
 800f2f8:	ddee      	ble.n	800f2d8 <_dtoa_r+0xa58>
 800f2fa:	ee18 1a10 	vmov	r1, s16
 800f2fe:	2201      	movs	r2, #1
 800f300:	4620      	mov	r0, r4
 800f302:	f000 fac9 	bl	800f898 <__lshift>
 800f306:	4631      	mov	r1, r6
 800f308:	ee08 0a10 	vmov	s16, r0
 800f30c:	f000 fb34 	bl	800f978 <__mcmp>
 800f310:	2800      	cmp	r0, #0
 800f312:	dc03      	bgt.n	800f31c <_dtoa_r+0xa9c>
 800f314:	d1e0      	bne.n	800f2d8 <_dtoa_r+0xa58>
 800f316:	f01a 0f01 	tst.w	sl, #1
 800f31a:	d0dd      	beq.n	800f2d8 <_dtoa_r+0xa58>
 800f31c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f320:	d1d7      	bne.n	800f2d2 <_dtoa_r+0xa52>
 800f322:	2339      	movs	r3, #57	; 0x39
 800f324:	f88b 3000 	strb.w	r3, [fp]
 800f328:	462b      	mov	r3, r5
 800f32a:	461d      	mov	r5, r3
 800f32c:	3b01      	subs	r3, #1
 800f32e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f332:	2a39      	cmp	r2, #57	; 0x39
 800f334:	d071      	beq.n	800f41a <_dtoa_r+0xb9a>
 800f336:	3201      	adds	r2, #1
 800f338:	701a      	strb	r2, [r3, #0]
 800f33a:	e746      	b.n	800f1ca <_dtoa_r+0x94a>
 800f33c:	2a00      	cmp	r2, #0
 800f33e:	dd07      	ble.n	800f350 <_dtoa_r+0xad0>
 800f340:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f344:	d0ed      	beq.n	800f322 <_dtoa_r+0xaa2>
 800f346:	f10a 0301 	add.w	r3, sl, #1
 800f34a:	f88b 3000 	strb.w	r3, [fp]
 800f34e:	e73c      	b.n	800f1ca <_dtoa_r+0x94a>
 800f350:	9b05      	ldr	r3, [sp, #20]
 800f352:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f356:	4599      	cmp	r9, r3
 800f358:	d047      	beq.n	800f3ea <_dtoa_r+0xb6a>
 800f35a:	ee18 1a10 	vmov	r1, s16
 800f35e:	2300      	movs	r3, #0
 800f360:	220a      	movs	r2, #10
 800f362:	4620      	mov	r0, r4
 800f364:	f000 f8e8 	bl	800f538 <__multadd>
 800f368:	45b8      	cmp	r8, r7
 800f36a:	ee08 0a10 	vmov	s16, r0
 800f36e:	f04f 0300 	mov.w	r3, #0
 800f372:	f04f 020a 	mov.w	r2, #10
 800f376:	4641      	mov	r1, r8
 800f378:	4620      	mov	r0, r4
 800f37a:	d106      	bne.n	800f38a <_dtoa_r+0xb0a>
 800f37c:	f000 f8dc 	bl	800f538 <__multadd>
 800f380:	4680      	mov	r8, r0
 800f382:	4607      	mov	r7, r0
 800f384:	f109 0901 	add.w	r9, r9, #1
 800f388:	e772      	b.n	800f270 <_dtoa_r+0x9f0>
 800f38a:	f000 f8d5 	bl	800f538 <__multadd>
 800f38e:	4639      	mov	r1, r7
 800f390:	4680      	mov	r8, r0
 800f392:	2300      	movs	r3, #0
 800f394:	220a      	movs	r2, #10
 800f396:	4620      	mov	r0, r4
 800f398:	f000 f8ce 	bl	800f538 <__multadd>
 800f39c:	4607      	mov	r7, r0
 800f39e:	e7f1      	b.n	800f384 <_dtoa_r+0xb04>
 800f3a0:	9b03      	ldr	r3, [sp, #12]
 800f3a2:	9302      	str	r3, [sp, #8]
 800f3a4:	9d01      	ldr	r5, [sp, #4]
 800f3a6:	ee18 0a10 	vmov	r0, s16
 800f3aa:	4631      	mov	r1, r6
 800f3ac:	f7ff f9dc 	bl	800e768 <quorem>
 800f3b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f3b4:	9b01      	ldr	r3, [sp, #4]
 800f3b6:	f805 ab01 	strb.w	sl, [r5], #1
 800f3ba:	1aea      	subs	r2, r5, r3
 800f3bc:	9b02      	ldr	r3, [sp, #8]
 800f3be:	4293      	cmp	r3, r2
 800f3c0:	dd09      	ble.n	800f3d6 <_dtoa_r+0xb56>
 800f3c2:	ee18 1a10 	vmov	r1, s16
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	220a      	movs	r2, #10
 800f3ca:	4620      	mov	r0, r4
 800f3cc:	f000 f8b4 	bl	800f538 <__multadd>
 800f3d0:	ee08 0a10 	vmov	s16, r0
 800f3d4:	e7e7      	b.n	800f3a6 <_dtoa_r+0xb26>
 800f3d6:	9b02      	ldr	r3, [sp, #8]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	bfc8      	it	gt
 800f3dc:	461d      	movgt	r5, r3
 800f3de:	9b01      	ldr	r3, [sp, #4]
 800f3e0:	bfd8      	it	le
 800f3e2:	2501      	movle	r5, #1
 800f3e4:	441d      	add	r5, r3
 800f3e6:	f04f 0800 	mov.w	r8, #0
 800f3ea:	ee18 1a10 	vmov	r1, s16
 800f3ee:	2201      	movs	r2, #1
 800f3f0:	4620      	mov	r0, r4
 800f3f2:	f000 fa51 	bl	800f898 <__lshift>
 800f3f6:	4631      	mov	r1, r6
 800f3f8:	ee08 0a10 	vmov	s16, r0
 800f3fc:	f000 fabc 	bl	800f978 <__mcmp>
 800f400:	2800      	cmp	r0, #0
 800f402:	dc91      	bgt.n	800f328 <_dtoa_r+0xaa8>
 800f404:	d102      	bne.n	800f40c <_dtoa_r+0xb8c>
 800f406:	f01a 0f01 	tst.w	sl, #1
 800f40a:	d18d      	bne.n	800f328 <_dtoa_r+0xaa8>
 800f40c:	462b      	mov	r3, r5
 800f40e:	461d      	mov	r5, r3
 800f410:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f414:	2a30      	cmp	r2, #48	; 0x30
 800f416:	d0fa      	beq.n	800f40e <_dtoa_r+0xb8e>
 800f418:	e6d7      	b.n	800f1ca <_dtoa_r+0x94a>
 800f41a:	9a01      	ldr	r2, [sp, #4]
 800f41c:	429a      	cmp	r2, r3
 800f41e:	d184      	bne.n	800f32a <_dtoa_r+0xaaa>
 800f420:	9b00      	ldr	r3, [sp, #0]
 800f422:	3301      	adds	r3, #1
 800f424:	9300      	str	r3, [sp, #0]
 800f426:	2331      	movs	r3, #49	; 0x31
 800f428:	7013      	strb	r3, [r2, #0]
 800f42a:	e6ce      	b.n	800f1ca <_dtoa_r+0x94a>
 800f42c:	4b09      	ldr	r3, [pc, #36]	; (800f454 <_dtoa_r+0xbd4>)
 800f42e:	f7ff ba95 	b.w	800e95c <_dtoa_r+0xdc>
 800f432:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f434:	2b00      	cmp	r3, #0
 800f436:	f47f aa6e 	bne.w	800e916 <_dtoa_r+0x96>
 800f43a:	4b07      	ldr	r3, [pc, #28]	; (800f458 <_dtoa_r+0xbd8>)
 800f43c:	f7ff ba8e 	b.w	800e95c <_dtoa_r+0xdc>
 800f440:	9b02      	ldr	r3, [sp, #8]
 800f442:	2b00      	cmp	r3, #0
 800f444:	dcae      	bgt.n	800f3a4 <_dtoa_r+0xb24>
 800f446:	9b06      	ldr	r3, [sp, #24]
 800f448:	2b02      	cmp	r3, #2
 800f44a:	f73f aea8 	bgt.w	800f19e <_dtoa_r+0x91e>
 800f44e:	e7a9      	b.n	800f3a4 <_dtoa_r+0xb24>
 800f450:	080109df 	.word	0x080109df
 800f454:	0801093c 	.word	0x0801093c
 800f458:	08010960 	.word	0x08010960

0800f45c <_localeconv_r>:
 800f45c:	4800      	ldr	r0, [pc, #0]	; (800f460 <_localeconv_r+0x4>)
 800f45e:	4770      	bx	lr
 800f460:	200029ac 	.word	0x200029ac

0800f464 <malloc>:
 800f464:	4b02      	ldr	r3, [pc, #8]	; (800f470 <malloc+0xc>)
 800f466:	4601      	mov	r1, r0
 800f468:	6818      	ldr	r0, [r3, #0]
 800f46a:	f000 bc09 	b.w	800fc80 <_malloc_r>
 800f46e:	bf00      	nop
 800f470:	20002858 	.word	0x20002858

0800f474 <_Balloc>:
 800f474:	b570      	push	{r4, r5, r6, lr}
 800f476:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f478:	4604      	mov	r4, r0
 800f47a:	460d      	mov	r5, r1
 800f47c:	b976      	cbnz	r6, 800f49c <_Balloc+0x28>
 800f47e:	2010      	movs	r0, #16
 800f480:	f7ff fff0 	bl	800f464 <malloc>
 800f484:	4602      	mov	r2, r0
 800f486:	6260      	str	r0, [r4, #36]	; 0x24
 800f488:	b920      	cbnz	r0, 800f494 <_Balloc+0x20>
 800f48a:	4b18      	ldr	r3, [pc, #96]	; (800f4ec <_Balloc+0x78>)
 800f48c:	4818      	ldr	r0, [pc, #96]	; (800f4f0 <_Balloc+0x7c>)
 800f48e:	2166      	movs	r1, #102	; 0x66
 800f490:	f000 fc7a 	bl	800fd88 <__assert_func>
 800f494:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f498:	6006      	str	r6, [r0, #0]
 800f49a:	60c6      	str	r6, [r0, #12]
 800f49c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f49e:	68f3      	ldr	r3, [r6, #12]
 800f4a0:	b183      	cbz	r3, 800f4c4 <_Balloc+0x50>
 800f4a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4a4:	68db      	ldr	r3, [r3, #12]
 800f4a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f4aa:	b9b8      	cbnz	r0, 800f4dc <_Balloc+0x68>
 800f4ac:	2101      	movs	r1, #1
 800f4ae:	fa01 f605 	lsl.w	r6, r1, r5
 800f4b2:	1d72      	adds	r2, r6, #5
 800f4b4:	0092      	lsls	r2, r2, #2
 800f4b6:	4620      	mov	r0, r4
 800f4b8:	f000 fb60 	bl	800fb7c <_calloc_r>
 800f4bc:	b160      	cbz	r0, 800f4d8 <_Balloc+0x64>
 800f4be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f4c2:	e00e      	b.n	800f4e2 <_Balloc+0x6e>
 800f4c4:	2221      	movs	r2, #33	; 0x21
 800f4c6:	2104      	movs	r1, #4
 800f4c8:	4620      	mov	r0, r4
 800f4ca:	f000 fb57 	bl	800fb7c <_calloc_r>
 800f4ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4d0:	60f0      	str	r0, [r6, #12]
 800f4d2:	68db      	ldr	r3, [r3, #12]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d1e4      	bne.n	800f4a2 <_Balloc+0x2e>
 800f4d8:	2000      	movs	r0, #0
 800f4da:	bd70      	pop	{r4, r5, r6, pc}
 800f4dc:	6802      	ldr	r2, [r0, #0]
 800f4de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f4e8:	e7f7      	b.n	800f4da <_Balloc+0x66>
 800f4ea:	bf00      	nop
 800f4ec:	0801096d 	.word	0x0801096d
 800f4f0:	080109f0 	.word	0x080109f0

0800f4f4 <_Bfree>:
 800f4f4:	b570      	push	{r4, r5, r6, lr}
 800f4f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f4f8:	4605      	mov	r5, r0
 800f4fa:	460c      	mov	r4, r1
 800f4fc:	b976      	cbnz	r6, 800f51c <_Bfree+0x28>
 800f4fe:	2010      	movs	r0, #16
 800f500:	f7ff ffb0 	bl	800f464 <malloc>
 800f504:	4602      	mov	r2, r0
 800f506:	6268      	str	r0, [r5, #36]	; 0x24
 800f508:	b920      	cbnz	r0, 800f514 <_Bfree+0x20>
 800f50a:	4b09      	ldr	r3, [pc, #36]	; (800f530 <_Bfree+0x3c>)
 800f50c:	4809      	ldr	r0, [pc, #36]	; (800f534 <_Bfree+0x40>)
 800f50e:	218a      	movs	r1, #138	; 0x8a
 800f510:	f000 fc3a 	bl	800fd88 <__assert_func>
 800f514:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f518:	6006      	str	r6, [r0, #0]
 800f51a:	60c6      	str	r6, [r0, #12]
 800f51c:	b13c      	cbz	r4, 800f52e <_Bfree+0x3a>
 800f51e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f520:	6862      	ldr	r2, [r4, #4]
 800f522:	68db      	ldr	r3, [r3, #12]
 800f524:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f528:	6021      	str	r1, [r4, #0]
 800f52a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f52e:	bd70      	pop	{r4, r5, r6, pc}
 800f530:	0801096d 	.word	0x0801096d
 800f534:	080109f0 	.word	0x080109f0

0800f538 <__multadd>:
 800f538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f53c:	690d      	ldr	r5, [r1, #16]
 800f53e:	4607      	mov	r7, r0
 800f540:	460c      	mov	r4, r1
 800f542:	461e      	mov	r6, r3
 800f544:	f101 0c14 	add.w	ip, r1, #20
 800f548:	2000      	movs	r0, #0
 800f54a:	f8dc 3000 	ldr.w	r3, [ip]
 800f54e:	b299      	uxth	r1, r3
 800f550:	fb02 6101 	mla	r1, r2, r1, r6
 800f554:	0c1e      	lsrs	r6, r3, #16
 800f556:	0c0b      	lsrs	r3, r1, #16
 800f558:	fb02 3306 	mla	r3, r2, r6, r3
 800f55c:	b289      	uxth	r1, r1
 800f55e:	3001      	adds	r0, #1
 800f560:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f564:	4285      	cmp	r5, r0
 800f566:	f84c 1b04 	str.w	r1, [ip], #4
 800f56a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f56e:	dcec      	bgt.n	800f54a <__multadd+0x12>
 800f570:	b30e      	cbz	r6, 800f5b6 <__multadd+0x7e>
 800f572:	68a3      	ldr	r3, [r4, #8]
 800f574:	42ab      	cmp	r3, r5
 800f576:	dc19      	bgt.n	800f5ac <__multadd+0x74>
 800f578:	6861      	ldr	r1, [r4, #4]
 800f57a:	4638      	mov	r0, r7
 800f57c:	3101      	adds	r1, #1
 800f57e:	f7ff ff79 	bl	800f474 <_Balloc>
 800f582:	4680      	mov	r8, r0
 800f584:	b928      	cbnz	r0, 800f592 <__multadd+0x5a>
 800f586:	4602      	mov	r2, r0
 800f588:	4b0c      	ldr	r3, [pc, #48]	; (800f5bc <__multadd+0x84>)
 800f58a:	480d      	ldr	r0, [pc, #52]	; (800f5c0 <__multadd+0x88>)
 800f58c:	21b5      	movs	r1, #181	; 0xb5
 800f58e:	f000 fbfb 	bl	800fd88 <__assert_func>
 800f592:	6922      	ldr	r2, [r4, #16]
 800f594:	3202      	adds	r2, #2
 800f596:	f104 010c 	add.w	r1, r4, #12
 800f59a:	0092      	lsls	r2, r2, #2
 800f59c:	300c      	adds	r0, #12
 800f59e:	f7fe fc63 	bl	800de68 <memcpy>
 800f5a2:	4621      	mov	r1, r4
 800f5a4:	4638      	mov	r0, r7
 800f5a6:	f7ff ffa5 	bl	800f4f4 <_Bfree>
 800f5aa:	4644      	mov	r4, r8
 800f5ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f5b0:	3501      	adds	r5, #1
 800f5b2:	615e      	str	r6, [r3, #20]
 800f5b4:	6125      	str	r5, [r4, #16]
 800f5b6:	4620      	mov	r0, r4
 800f5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5bc:	080109df 	.word	0x080109df
 800f5c0:	080109f0 	.word	0x080109f0

0800f5c4 <__hi0bits>:
 800f5c4:	0c03      	lsrs	r3, r0, #16
 800f5c6:	041b      	lsls	r3, r3, #16
 800f5c8:	b9d3      	cbnz	r3, 800f600 <__hi0bits+0x3c>
 800f5ca:	0400      	lsls	r0, r0, #16
 800f5cc:	2310      	movs	r3, #16
 800f5ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f5d2:	bf04      	itt	eq
 800f5d4:	0200      	lsleq	r0, r0, #8
 800f5d6:	3308      	addeq	r3, #8
 800f5d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f5dc:	bf04      	itt	eq
 800f5de:	0100      	lsleq	r0, r0, #4
 800f5e0:	3304      	addeq	r3, #4
 800f5e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f5e6:	bf04      	itt	eq
 800f5e8:	0080      	lsleq	r0, r0, #2
 800f5ea:	3302      	addeq	r3, #2
 800f5ec:	2800      	cmp	r0, #0
 800f5ee:	db05      	blt.n	800f5fc <__hi0bits+0x38>
 800f5f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f5f4:	f103 0301 	add.w	r3, r3, #1
 800f5f8:	bf08      	it	eq
 800f5fa:	2320      	moveq	r3, #32
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	4770      	bx	lr
 800f600:	2300      	movs	r3, #0
 800f602:	e7e4      	b.n	800f5ce <__hi0bits+0xa>

0800f604 <__lo0bits>:
 800f604:	6803      	ldr	r3, [r0, #0]
 800f606:	f013 0207 	ands.w	r2, r3, #7
 800f60a:	4601      	mov	r1, r0
 800f60c:	d00b      	beq.n	800f626 <__lo0bits+0x22>
 800f60e:	07da      	lsls	r2, r3, #31
 800f610:	d423      	bmi.n	800f65a <__lo0bits+0x56>
 800f612:	0798      	lsls	r0, r3, #30
 800f614:	bf49      	itett	mi
 800f616:	085b      	lsrmi	r3, r3, #1
 800f618:	089b      	lsrpl	r3, r3, #2
 800f61a:	2001      	movmi	r0, #1
 800f61c:	600b      	strmi	r3, [r1, #0]
 800f61e:	bf5c      	itt	pl
 800f620:	600b      	strpl	r3, [r1, #0]
 800f622:	2002      	movpl	r0, #2
 800f624:	4770      	bx	lr
 800f626:	b298      	uxth	r0, r3
 800f628:	b9a8      	cbnz	r0, 800f656 <__lo0bits+0x52>
 800f62a:	0c1b      	lsrs	r3, r3, #16
 800f62c:	2010      	movs	r0, #16
 800f62e:	b2da      	uxtb	r2, r3
 800f630:	b90a      	cbnz	r2, 800f636 <__lo0bits+0x32>
 800f632:	3008      	adds	r0, #8
 800f634:	0a1b      	lsrs	r3, r3, #8
 800f636:	071a      	lsls	r2, r3, #28
 800f638:	bf04      	itt	eq
 800f63a:	091b      	lsreq	r3, r3, #4
 800f63c:	3004      	addeq	r0, #4
 800f63e:	079a      	lsls	r2, r3, #30
 800f640:	bf04      	itt	eq
 800f642:	089b      	lsreq	r3, r3, #2
 800f644:	3002      	addeq	r0, #2
 800f646:	07da      	lsls	r2, r3, #31
 800f648:	d403      	bmi.n	800f652 <__lo0bits+0x4e>
 800f64a:	085b      	lsrs	r3, r3, #1
 800f64c:	f100 0001 	add.w	r0, r0, #1
 800f650:	d005      	beq.n	800f65e <__lo0bits+0x5a>
 800f652:	600b      	str	r3, [r1, #0]
 800f654:	4770      	bx	lr
 800f656:	4610      	mov	r0, r2
 800f658:	e7e9      	b.n	800f62e <__lo0bits+0x2a>
 800f65a:	2000      	movs	r0, #0
 800f65c:	4770      	bx	lr
 800f65e:	2020      	movs	r0, #32
 800f660:	4770      	bx	lr
	...

0800f664 <__i2b>:
 800f664:	b510      	push	{r4, lr}
 800f666:	460c      	mov	r4, r1
 800f668:	2101      	movs	r1, #1
 800f66a:	f7ff ff03 	bl	800f474 <_Balloc>
 800f66e:	4602      	mov	r2, r0
 800f670:	b928      	cbnz	r0, 800f67e <__i2b+0x1a>
 800f672:	4b05      	ldr	r3, [pc, #20]	; (800f688 <__i2b+0x24>)
 800f674:	4805      	ldr	r0, [pc, #20]	; (800f68c <__i2b+0x28>)
 800f676:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f67a:	f000 fb85 	bl	800fd88 <__assert_func>
 800f67e:	2301      	movs	r3, #1
 800f680:	6144      	str	r4, [r0, #20]
 800f682:	6103      	str	r3, [r0, #16]
 800f684:	bd10      	pop	{r4, pc}
 800f686:	bf00      	nop
 800f688:	080109df 	.word	0x080109df
 800f68c:	080109f0 	.word	0x080109f0

0800f690 <__multiply>:
 800f690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f694:	4691      	mov	r9, r2
 800f696:	690a      	ldr	r2, [r1, #16]
 800f698:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f69c:	429a      	cmp	r2, r3
 800f69e:	bfb8      	it	lt
 800f6a0:	460b      	movlt	r3, r1
 800f6a2:	460c      	mov	r4, r1
 800f6a4:	bfbc      	itt	lt
 800f6a6:	464c      	movlt	r4, r9
 800f6a8:	4699      	movlt	r9, r3
 800f6aa:	6927      	ldr	r7, [r4, #16]
 800f6ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f6b0:	68a3      	ldr	r3, [r4, #8]
 800f6b2:	6861      	ldr	r1, [r4, #4]
 800f6b4:	eb07 060a 	add.w	r6, r7, sl
 800f6b8:	42b3      	cmp	r3, r6
 800f6ba:	b085      	sub	sp, #20
 800f6bc:	bfb8      	it	lt
 800f6be:	3101      	addlt	r1, #1
 800f6c0:	f7ff fed8 	bl	800f474 <_Balloc>
 800f6c4:	b930      	cbnz	r0, 800f6d4 <__multiply+0x44>
 800f6c6:	4602      	mov	r2, r0
 800f6c8:	4b44      	ldr	r3, [pc, #272]	; (800f7dc <__multiply+0x14c>)
 800f6ca:	4845      	ldr	r0, [pc, #276]	; (800f7e0 <__multiply+0x150>)
 800f6cc:	f240 115d 	movw	r1, #349	; 0x15d
 800f6d0:	f000 fb5a 	bl	800fd88 <__assert_func>
 800f6d4:	f100 0514 	add.w	r5, r0, #20
 800f6d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f6dc:	462b      	mov	r3, r5
 800f6de:	2200      	movs	r2, #0
 800f6e0:	4543      	cmp	r3, r8
 800f6e2:	d321      	bcc.n	800f728 <__multiply+0x98>
 800f6e4:	f104 0314 	add.w	r3, r4, #20
 800f6e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f6ec:	f109 0314 	add.w	r3, r9, #20
 800f6f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f6f4:	9202      	str	r2, [sp, #8]
 800f6f6:	1b3a      	subs	r2, r7, r4
 800f6f8:	3a15      	subs	r2, #21
 800f6fa:	f022 0203 	bic.w	r2, r2, #3
 800f6fe:	3204      	adds	r2, #4
 800f700:	f104 0115 	add.w	r1, r4, #21
 800f704:	428f      	cmp	r7, r1
 800f706:	bf38      	it	cc
 800f708:	2204      	movcc	r2, #4
 800f70a:	9201      	str	r2, [sp, #4]
 800f70c:	9a02      	ldr	r2, [sp, #8]
 800f70e:	9303      	str	r3, [sp, #12]
 800f710:	429a      	cmp	r2, r3
 800f712:	d80c      	bhi.n	800f72e <__multiply+0x9e>
 800f714:	2e00      	cmp	r6, #0
 800f716:	dd03      	ble.n	800f720 <__multiply+0x90>
 800f718:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d05a      	beq.n	800f7d6 <__multiply+0x146>
 800f720:	6106      	str	r6, [r0, #16]
 800f722:	b005      	add	sp, #20
 800f724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f728:	f843 2b04 	str.w	r2, [r3], #4
 800f72c:	e7d8      	b.n	800f6e0 <__multiply+0x50>
 800f72e:	f8b3 a000 	ldrh.w	sl, [r3]
 800f732:	f1ba 0f00 	cmp.w	sl, #0
 800f736:	d024      	beq.n	800f782 <__multiply+0xf2>
 800f738:	f104 0e14 	add.w	lr, r4, #20
 800f73c:	46a9      	mov	r9, r5
 800f73e:	f04f 0c00 	mov.w	ip, #0
 800f742:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f746:	f8d9 1000 	ldr.w	r1, [r9]
 800f74a:	fa1f fb82 	uxth.w	fp, r2
 800f74e:	b289      	uxth	r1, r1
 800f750:	fb0a 110b 	mla	r1, sl, fp, r1
 800f754:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f758:	f8d9 2000 	ldr.w	r2, [r9]
 800f75c:	4461      	add	r1, ip
 800f75e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f762:	fb0a c20b 	mla	r2, sl, fp, ip
 800f766:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f76a:	b289      	uxth	r1, r1
 800f76c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f770:	4577      	cmp	r7, lr
 800f772:	f849 1b04 	str.w	r1, [r9], #4
 800f776:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f77a:	d8e2      	bhi.n	800f742 <__multiply+0xb2>
 800f77c:	9a01      	ldr	r2, [sp, #4]
 800f77e:	f845 c002 	str.w	ip, [r5, r2]
 800f782:	9a03      	ldr	r2, [sp, #12]
 800f784:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f788:	3304      	adds	r3, #4
 800f78a:	f1b9 0f00 	cmp.w	r9, #0
 800f78e:	d020      	beq.n	800f7d2 <__multiply+0x142>
 800f790:	6829      	ldr	r1, [r5, #0]
 800f792:	f104 0c14 	add.w	ip, r4, #20
 800f796:	46ae      	mov	lr, r5
 800f798:	f04f 0a00 	mov.w	sl, #0
 800f79c:	f8bc b000 	ldrh.w	fp, [ip]
 800f7a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f7a4:	fb09 220b 	mla	r2, r9, fp, r2
 800f7a8:	4492      	add	sl, r2
 800f7aa:	b289      	uxth	r1, r1
 800f7ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f7b0:	f84e 1b04 	str.w	r1, [lr], #4
 800f7b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f7b8:	f8be 1000 	ldrh.w	r1, [lr]
 800f7bc:	0c12      	lsrs	r2, r2, #16
 800f7be:	fb09 1102 	mla	r1, r9, r2, r1
 800f7c2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f7c6:	4567      	cmp	r7, ip
 800f7c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f7cc:	d8e6      	bhi.n	800f79c <__multiply+0x10c>
 800f7ce:	9a01      	ldr	r2, [sp, #4]
 800f7d0:	50a9      	str	r1, [r5, r2]
 800f7d2:	3504      	adds	r5, #4
 800f7d4:	e79a      	b.n	800f70c <__multiply+0x7c>
 800f7d6:	3e01      	subs	r6, #1
 800f7d8:	e79c      	b.n	800f714 <__multiply+0x84>
 800f7da:	bf00      	nop
 800f7dc:	080109df 	.word	0x080109df
 800f7e0:	080109f0 	.word	0x080109f0

0800f7e4 <__pow5mult>:
 800f7e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7e8:	4615      	mov	r5, r2
 800f7ea:	f012 0203 	ands.w	r2, r2, #3
 800f7ee:	4606      	mov	r6, r0
 800f7f0:	460f      	mov	r7, r1
 800f7f2:	d007      	beq.n	800f804 <__pow5mult+0x20>
 800f7f4:	4c25      	ldr	r4, [pc, #148]	; (800f88c <__pow5mult+0xa8>)
 800f7f6:	3a01      	subs	r2, #1
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f7fe:	f7ff fe9b 	bl	800f538 <__multadd>
 800f802:	4607      	mov	r7, r0
 800f804:	10ad      	asrs	r5, r5, #2
 800f806:	d03d      	beq.n	800f884 <__pow5mult+0xa0>
 800f808:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f80a:	b97c      	cbnz	r4, 800f82c <__pow5mult+0x48>
 800f80c:	2010      	movs	r0, #16
 800f80e:	f7ff fe29 	bl	800f464 <malloc>
 800f812:	4602      	mov	r2, r0
 800f814:	6270      	str	r0, [r6, #36]	; 0x24
 800f816:	b928      	cbnz	r0, 800f824 <__pow5mult+0x40>
 800f818:	4b1d      	ldr	r3, [pc, #116]	; (800f890 <__pow5mult+0xac>)
 800f81a:	481e      	ldr	r0, [pc, #120]	; (800f894 <__pow5mult+0xb0>)
 800f81c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f820:	f000 fab2 	bl	800fd88 <__assert_func>
 800f824:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f828:	6004      	str	r4, [r0, #0]
 800f82a:	60c4      	str	r4, [r0, #12]
 800f82c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f830:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f834:	b94c      	cbnz	r4, 800f84a <__pow5mult+0x66>
 800f836:	f240 2171 	movw	r1, #625	; 0x271
 800f83a:	4630      	mov	r0, r6
 800f83c:	f7ff ff12 	bl	800f664 <__i2b>
 800f840:	2300      	movs	r3, #0
 800f842:	f8c8 0008 	str.w	r0, [r8, #8]
 800f846:	4604      	mov	r4, r0
 800f848:	6003      	str	r3, [r0, #0]
 800f84a:	f04f 0900 	mov.w	r9, #0
 800f84e:	07eb      	lsls	r3, r5, #31
 800f850:	d50a      	bpl.n	800f868 <__pow5mult+0x84>
 800f852:	4639      	mov	r1, r7
 800f854:	4622      	mov	r2, r4
 800f856:	4630      	mov	r0, r6
 800f858:	f7ff ff1a 	bl	800f690 <__multiply>
 800f85c:	4639      	mov	r1, r7
 800f85e:	4680      	mov	r8, r0
 800f860:	4630      	mov	r0, r6
 800f862:	f7ff fe47 	bl	800f4f4 <_Bfree>
 800f866:	4647      	mov	r7, r8
 800f868:	106d      	asrs	r5, r5, #1
 800f86a:	d00b      	beq.n	800f884 <__pow5mult+0xa0>
 800f86c:	6820      	ldr	r0, [r4, #0]
 800f86e:	b938      	cbnz	r0, 800f880 <__pow5mult+0x9c>
 800f870:	4622      	mov	r2, r4
 800f872:	4621      	mov	r1, r4
 800f874:	4630      	mov	r0, r6
 800f876:	f7ff ff0b 	bl	800f690 <__multiply>
 800f87a:	6020      	str	r0, [r4, #0]
 800f87c:	f8c0 9000 	str.w	r9, [r0]
 800f880:	4604      	mov	r4, r0
 800f882:	e7e4      	b.n	800f84e <__pow5mult+0x6a>
 800f884:	4638      	mov	r0, r7
 800f886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f88a:	bf00      	nop
 800f88c:	08010b40 	.word	0x08010b40
 800f890:	0801096d 	.word	0x0801096d
 800f894:	080109f0 	.word	0x080109f0

0800f898 <__lshift>:
 800f898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f89c:	460c      	mov	r4, r1
 800f89e:	6849      	ldr	r1, [r1, #4]
 800f8a0:	6923      	ldr	r3, [r4, #16]
 800f8a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f8a6:	68a3      	ldr	r3, [r4, #8]
 800f8a8:	4607      	mov	r7, r0
 800f8aa:	4691      	mov	r9, r2
 800f8ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f8b0:	f108 0601 	add.w	r6, r8, #1
 800f8b4:	42b3      	cmp	r3, r6
 800f8b6:	db0b      	blt.n	800f8d0 <__lshift+0x38>
 800f8b8:	4638      	mov	r0, r7
 800f8ba:	f7ff fddb 	bl	800f474 <_Balloc>
 800f8be:	4605      	mov	r5, r0
 800f8c0:	b948      	cbnz	r0, 800f8d6 <__lshift+0x3e>
 800f8c2:	4602      	mov	r2, r0
 800f8c4:	4b2a      	ldr	r3, [pc, #168]	; (800f970 <__lshift+0xd8>)
 800f8c6:	482b      	ldr	r0, [pc, #172]	; (800f974 <__lshift+0xdc>)
 800f8c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f8cc:	f000 fa5c 	bl	800fd88 <__assert_func>
 800f8d0:	3101      	adds	r1, #1
 800f8d2:	005b      	lsls	r3, r3, #1
 800f8d4:	e7ee      	b.n	800f8b4 <__lshift+0x1c>
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	f100 0114 	add.w	r1, r0, #20
 800f8dc:	f100 0210 	add.w	r2, r0, #16
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	4553      	cmp	r3, sl
 800f8e4:	db37      	blt.n	800f956 <__lshift+0xbe>
 800f8e6:	6920      	ldr	r0, [r4, #16]
 800f8e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f8ec:	f104 0314 	add.w	r3, r4, #20
 800f8f0:	f019 091f 	ands.w	r9, r9, #31
 800f8f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f8f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f8fc:	d02f      	beq.n	800f95e <__lshift+0xc6>
 800f8fe:	f1c9 0e20 	rsb	lr, r9, #32
 800f902:	468a      	mov	sl, r1
 800f904:	f04f 0c00 	mov.w	ip, #0
 800f908:	681a      	ldr	r2, [r3, #0]
 800f90a:	fa02 f209 	lsl.w	r2, r2, r9
 800f90e:	ea42 020c 	orr.w	r2, r2, ip
 800f912:	f84a 2b04 	str.w	r2, [sl], #4
 800f916:	f853 2b04 	ldr.w	r2, [r3], #4
 800f91a:	4298      	cmp	r0, r3
 800f91c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f920:	d8f2      	bhi.n	800f908 <__lshift+0x70>
 800f922:	1b03      	subs	r3, r0, r4
 800f924:	3b15      	subs	r3, #21
 800f926:	f023 0303 	bic.w	r3, r3, #3
 800f92a:	3304      	adds	r3, #4
 800f92c:	f104 0215 	add.w	r2, r4, #21
 800f930:	4290      	cmp	r0, r2
 800f932:	bf38      	it	cc
 800f934:	2304      	movcc	r3, #4
 800f936:	f841 c003 	str.w	ip, [r1, r3]
 800f93a:	f1bc 0f00 	cmp.w	ip, #0
 800f93e:	d001      	beq.n	800f944 <__lshift+0xac>
 800f940:	f108 0602 	add.w	r6, r8, #2
 800f944:	3e01      	subs	r6, #1
 800f946:	4638      	mov	r0, r7
 800f948:	612e      	str	r6, [r5, #16]
 800f94a:	4621      	mov	r1, r4
 800f94c:	f7ff fdd2 	bl	800f4f4 <_Bfree>
 800f950:	4628      	mov	r0, r5
 800f952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f956:	f842 0f04 	str.w	r0, [r2, #4]!
 800f95a:	3301      	adds	r3, #1
 800f95c:	e7c1      	b.n	800f8e2 <__lshift+0x4a>
 800f95e:	3904      	subs	r1, #4
 800f960:	f853 2b04 	ldr.w	r2, [r3], #4
 800f964:	f841 2f04 	str.w	r2, [r1, #4]!
 800f968:	4298      	cmp	r0, r3
 800f96a:	d8f9      	bhi.n	800f960 <__lshift+0xc8>
 800f96c:	e7ea      	b.n	800f944 <__lshift+0xac>
 800f96e:	bf00      	nop
 800f970:	080109df 	.word	0x080109df
 800f974:	080109f0 	.word	0x080109f0

0800f978 <__mcmp>:
 800f978:	b530      	push	{r4, r5, lr}
 800f97a:	6902      	ldr	r2, [r0, #16]
 800f97c:	690c      	ldr	r4, [r1, #16]
 800f97e:	1b12      	subs	r2, r2, r4
 800f980:	d10e      	bne.n	800f9a0 <__mcmp+0x28>
 800f982:	f100 0314 	add.w	r3, r0, #20
 800f986:	3114      	adds	r1, #20
 800f988:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f98c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f990:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f994:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f998:	42a5      	cmp	r5, r4
 800f99a:	d003      	beq.n	800f9a4 <__mcmp+0x2c>
 800f99c:	d305      	bcc.n	800f9aa <__mcmp+0x32>
 800f99e:	2201      	movs	r2, #1
 800f9a0:	4610      	mov	r0, r2
 800f9a2:	bd30      	pop	{r4, r5, pc}
 800f9a4:	4283      	cmp	r3, r0
 800f9a6:	d3f3      	bcc.n	800f990 <__mcmp+0x18>
 800f9a8:	e7fa      	b.n	800f9a0 <__mcmp+0x28>
 800f9aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f9ae:	e7f7      	b.n	800f9a0 <__mcmp+0x28>

0800f9b0 <__mdiff>:
 800f9b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9b4:	460c      	mov	r4, r1
 800f9b6:	4606      	mov	r6, r0
 800f9b8:	4611      	mov	r1, r2
 800f9ba:	4620      	mov	r0, r4
 800f9bc:	4690      	mov	r8, r2
 800f9be:	f7ff ffdb 	bl	800f978 <__mcmp>
 800f9c2:	1e05      	subs	r5, r0, #0
 800f9c4:	d110      	bne.n	800f9e8 <__mdiff+0x38>
 800f9c6:	4629      	mov	r1, r5
 800f9c8:	4630      	mov	r0, r6
 800f9ca:	f7ff fd53 	bl	800f474 <_Balloc>
 800f9ce:	b930      	cbnz	r0, 800f9de <__mdiff+0x2e>
 800f9d0:	4b3a      	ldr	r3, [pc, #232]	; (800fabc <__mdiff+0x10c>)
 800f9d2:	4602      	mov	r2, r0
 800f9d4:	f240 2132 	movw	r1, #562	; 0x232
 800f9d8:	4839      	ldr	r0, [pc, #228]	; (800fac0 <__mdiff+0x110>)
 800f9da:	f000 f9d5 	bl	800fd88 <__assert_func>
 800f9de:	2301      	movs	r3, #1
 800f9e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f9e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9e8:	bfa4      	itt	ge
 800f9ea:	4643      	movge	r3, r8
 800f9ec:	46a0      	movge	r8, r4
 800f9ee:	4630      	mov	r0, r6
 800f9f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f9f4:	bfa6      	itte	ge
 800f9f6:	461c      	movge	r4, r3
 800f9f8:	2500      	movge	r5, #0
 800f9fa:	2501      	movlt	r5, #1
 800f9fc:	f7ff fd3a 	bl	800f474 <_Balloc>
 800fa00:	b920      	cbnz	r0, 800fa0c <__mdiff+0x5c>
 800fa02:	4b2e      	ldr	r3, [pc, #184]	; (800fabc <__mdiff+0x10c>)
 800fa04:	4602      	mov	r2, r0
 800fa06:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fa0a:	e7e5      	b.n	800f9d8 <__mdiff+0x28>
 800fa0c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fa10:	6926      	ldr	r6, [r4, #16]
 800fa12:	60c5      	str	r5, [r0, #12]
 800fa14:	f104 0914 	add.w	r9, r4, #20
 800fa18:	f108 0514 	add.w	r5, r8, #20
 800fa1c:	f100 0e14 	add.w	lr, r0, #20
 800fa20:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fa24:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fa28:	f108 0210 	add.w	r2, r8, #16
 800fa2c:	46f2      	mov	sl, lr
 800fa2e:	2100      	movs	r1, #0
 800fa30:	f859 3b04 	ldr.w	r3, [r9], #4
 800fa34:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fa38:	fa1f f883 	uxth.w	r8, r3
 800fa3c:	fa11 f18b 	uxtah	r1, r1, fp
 800fa40:	0c1b      	lsrs	r3, r3, #16
 800fa42:	eba1 0808 	sub.w	r8, r1, r8
 800fa46:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fa4a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fa4e:	fa1f f888 	uxth.w	r8, r8
 800fa52:	1419      	asrs	r1, r3, #16
 800fa54:	454e      	cmp	r6, r9
 800fa56:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fa5a:	f84a 3b04 	str.w	r3, [sl], #4
 800fa5e:	d8e7      	bhi.n	800fa30 <__mdiff+0x80>
 800fa60:	1b33      	subs	r3, r6, r4
 800fa62:	3b15      	subs	r3, #21
 800fa64:	f023 0303 	bic.w	r3, r3, #3
 800fa68:	3304      	adds	r3, #4
 800fa6a:	3415      	adds	r4, #21
 800fa6c:	42a6      	cmp	r6, r4
 800fa6e:	bf38      	it	cc
 800fa70:	2304      	movcc	r3, #4
 800fa72:	441d      	add	r5, r3
 800fa74:	4473      	add	r3, lr
 800fa76:	469e      	mov	lr, r3
 800fa78:	462e      	mov	r6, r5
 800fa7a:	4566      	cmp	r6, ip
 800fa7c:	d30e      	bcc.n	800fa9c <__mdiff+0xec>
 800fa7e:	f10c 0203 	add.w	r2, ip, #3
 800fa82:	1b52      	subs	r2, r2, r5
 800fa84:	f022 0203 	bic.w	r2, r2, #3
 800fa88:	3d03      	subs	r5, #3
 800fa8a:	45ac      	cmp	ip, r5
 800fa8c:	bf38      	it	cc
 800fa8e:	2200      	movcc	r2, #0
 800fa90:	441a      	add	r2, r3
 800fa92:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fa96:	b17b      	cbz	r3, 800fab8 <__mdiff+0x108>
 800fa98:	6107      	str	r7, [r0, #16]
 800fa9a:	e7a3      	b.n	800f9e4 <__mdiff+0x34>
 800fa9c:	f856 8b04 	ldr.w	r8, [r6], #4
 800faa0:	fa11 f288 	uxtah	r2, r1, r8
 800faa4:	1414      	asrs	r4, r2, #16
 800faa6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800faaa:	b292      	uxth	r2, r2
 800faac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fab0:	f84e 2b04 	str.w	r2, [lr], #4
 800fab4:	1421      	asrs	r1, r4, #16
 800fab6:	e7e0      	b.n	800fa7a <__mdiff+0xca>
 800fab8:	3f01      	subs	r7, #1
 800faba:	e7ea      	b.n	800fa92 <__mdiff+0xe2>
 800fabc:	080109df 	.word	0x080109df
 800fac0:	080109f0 	.word	0x080109f0

0800fac4 <__d2b>:
 800fac4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fac8:	4689      	mov	r9, r1
 800faca:	2101      	movs	r1, #1
 800facc:	ec57 6b10 	vmov	r6, r7, d0
 800fad0:	4690      	mov	r8, r2
 800fad2:	f7ff fccf 	bl	800f474 <_Balloc>
 800fad6:	4604      	mov	r4, r0
 800fad8:	b930      	cbnz	r0, 800fae8 <__d2b+0x24>
 800fada:	4602      	mov	r2, r0
 800fadc:	4b25      	ldr	r3, [pc, #148]	; (800fb74 <__d2b+0xb0>)
 800fade:	4826      	ldr	r0, [pc, #152]	; (800fb78 <__d2b+0xb4>)
 800fae0:	f240 310a 	movw	r1, #778	; 0x30a
 800fae4:	f000 f950 	bl	800fd88 <__assert_func>
 800fae8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800faec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800faf0:	bb35      	cbnz	r5, 800fb40 <__d2b+0x7c>
 800faf2:	2e00      	cmp	r6, #0
 800faf4:	9301      	str	r3, [sp, #4]
 800faf6:	d028      	beq.n	800fb4a <__d2b+0x86>
 800faf8:	4668      	mov	r0, sp
 800fafa:	9600      	str	r6, [sp, #0]
 800fafc:	f7ff fd82 	bl	800f604 <__lo0bits>
 800fb00:	9900      	ldr	r1, [sp, #0]
 800fb02:	b300      	cbz	r0, 800fb46 <__d2b+0x82>
 800fb04:	9a01      	ldr	r2, [sp, #4]
 800fb06:	f1c0 0320 	rsb	r3, r0, #32
 800fb0a:	fa02 f303 	lsl.w	r3, r2, r3
 800fb0e:	430b      	orrs	r3, r1
 800fb10:	40c2      	lsrs	r2, r0
 800fb12:	6163      	str	r3, [r4, #20]
 800fb14:	9201      	str	r2, [sp, #4]
 800fb16:	9b01      	ldr	r3, [sp, #4]
 800fb18:	61a3      	str	r3, [r4, #24]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	bf14      	ite	ne
 800fb1e:	2202      	movne	r2, #2
 800fb20:	2201      	moveq	r2, #1
 800fb22:	6122      	str	r2, [r4, #16]
 800fb24:	b1d5      	cbz	r5, 800fb5c <__d2b+0x98>
 800fb26:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fb2a:	4405      	add	r5, r0
 800fb2c:	f8c9 5000 	str.w	r5, [r9]
 800fb30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fb34:	f8c8 0000 	str.w	r0, [r8]
 800fb38:	4620      	mov	r0, r4
 800fb3a:	b003      	add	sp, #12
 800fb3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fb44:	e7d5      	b.n	800faf2 <__d2b+0x2e>
 800fb46:	6161      	str	r1, [r4, #20]
 800fb48:	e7e5      	b.n	800fb16 <__d2b+0x52>
 800fb4a:	a801      	add	r0, sp, #4
 800fb4c:	f7ff fd5a 	bl	800f604 <__lo0bits>
 800fb50:	9b01      	ldr	r3, [sp, #4]
 800fb52:	6163      	str	r3, [r4, #20]
 800fb54:	2201      	movs	r2, #1
 800fb56:	6122      	str	r2, [r4, #16]
 800fb58:	3020      	adds	r0, #32
 800fb5a:	e7e3      	b.n	800fb24 <__d2b+0x60>
 800fb5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fb60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fb64:	f8c9 0000 	str.w	r0, [r9]
 800fb68:	6918      	ldr	r0, [r3, #16]
 800fb6a:	f7ff fd2b 	bl	800f5c4 <__hi0bits>
 800fb6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fb72:	e7df      	b.n	800fb34 <__d2b+0x70>
 800fb74:	080109df 	.word	0x080109df
 800fb78:	080109f0 	.word	0x080109f0

0800fb7c <_calloc_r>:
 800fb7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb7e:	fba1 2402 	umull	r2, r4, r1, r2
 800fb82:	b94c      	cbnz	r4, 800fb98 <_calloc_r+0x1c>
 800fb84:	4611      	mov	r1, r2
 800fb86:	9201      	str	r2, [sp, #4]
 800fb88:	f000 f87a 	bl	800fc80 <_malloc_r>
 800fb8c:	9a01      	ldr	r2, [sp, #4]
 800fb8e:	4605      	mov	r5, r0
 800fb90:	b930      	cbnz	r0, 800fba0 <_calloc_r+0x24>
 800fb92:	4628      	mov	r0, r5
 800fb94:	b003      	add	sp, #12
 800fb96:	bd30      	pop	{r4, r5, pc}
 800fb98:	220c      	movs	r2, #12
 800fb9a:	6002      	str	r2, [r0, #0]
 800fb9c:	2500      	movs	r5, #0
 800fb9e:	e7f8      	b.n	800fb92 <_calloc_r+0x16>
 800fba0:	4621      	mov	r1, r4
 800fba2:	f7fe f96f 	bl	800de84 <memset>
 800fba6:	e7f4      	b.n	800fb92 <_calloc_r+0x16>

0800fba8 <_free_r>:
 800fba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fbaa:	2900      	cmp	r1, #0
 800fbac:	d044      	beq.n	800fc38 <_free_r+0x90>
 800fbae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fbb2:	9001      	str	r0, [sp, #4]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	f1a1 0404 	sub.w	r4, r1, #4
 800fbba:	bfb8      	it	lt
 800fbbc:	18e4      	addlt	r4, r4, r3
 800fbbe:	f000 f925 	bl	800fe0c <__malloc_lock>
 800fbc2:	4a1e      	ldr	r2, [pc, #120]	; (800fc3c <_free_r+0x94>)
 800fbc4:	9801      	ldr	r0, [sp, #4]
 800fbc6:	6813      	ldr	r3, [r2, #0]
 800fbc8:	b933      	cbnz	r3, 800fbd8 <_free_r+0x30>
 800fbca:	6063      	str	r3, [r4, #4]
 800fbcc:	6014      	str	r4, [r2, #0]
 800fbce:	b003      	add	sp, #12
 800fbd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fbd4:	f000 b920 	b.w	800fe18 <__malloc_unlock>
 800fbd8:	42a3      	cmp	r3, r4
 800fbda:	d908      	bls.n	800fbee <_free_r+0x46>
 800fbdc:	6825      	ldr	r5, [r4, #0]
 800fbde:	1961      	adds	r1, r4, r5
 800fbe0:	428b      	cmp	r3, r1
 800fbe2:	bf01      	itttt	eq
 800fbe4:	6819      	ldreq	r1, [r3, #0]
 800fbe6:	685b      	ldreq	r3, [r3, #4]
 800fbe8:	1949      	addeq	r1, r1, r5
 800fbea:	6021      	streq	r1, [r4, #0]
 800fbec:	e7ed      	b.n	800fbca <_free_r+0x22>
 800fbee:	461a      	mov	r2, r3
 800fbf0:	685b      	ldr	r3, [r3, #4]
 800fbf2:	b10b      	cbz	r3, 800fbf8 <_free_r+0x50>
 800fbf4:	42a3      	cmp	r3, r4
 800fbf6:	d9fa      	bls.n	800fbee <_free_r+0x46>
 800fbf8:	6811      	ldr	r1, [r2, #0]
 800fbfa:	1855      	adds	r5, r2, r1
 800fbfc:	42a5      	cmp	r5, r4
 800fbfe:	d10b      	bne.n	800fc18 <_free_r+0x70>
 800fc00:	6824      	ldr	r4, [r4, #0]
 800fc02:	4421      	add	r1, r4
 800fc04:	1854      	adds	r4, r2, r1
 800fc06:	42a3      	cmp	r3, r4
 800fc08:	6011      	str	r1, [r2, #0]
 800fc0a:	d1e0      	bne.n	800fbce <_free_r+0x26>
 800fc0c:	681c      	ldr	r4, [r3, #0]
 800fc0e:	685b      	ldr	r3, [r3, #4]
 800fc10:	6053      	str	r3, [r2, #4]
 800fc12:	4421      	add	r1, r4
 800fc14:	6011      	str	r1, [r2, #0]
 800fc16:	e7da      	b.n	800fbce <_free_r+0x26>
 800fc18:	d902      	bls.n	800fc20 <_free_r+0x78>
 800fc1a:	230c      	movs	r3, #12
 800fc1c:	6003      	str	r3, [r0, #0]
 800fc1e:	e7d6      	b.n	800fbce <_free_r+0x26>
 800fc20:	6825      	ldr	r5, [r4, #0]
 800fc22:	1961      	adds	r1, r4, r5
 800fc24:	428b      	cmp	r3, r1
 800fc26:	bf04      	itt	eq
 800fc28:	6819      	ldreq	r1, [r3, #0]
 800fc2a:	685b      	ldreq	r3, [r3, #4]
 800fc2c:	6063      	str	r3, [r4, #4]
 800fc2e:	bf04      	itt	eq
 800fc30:	1949      	addeq	r1, r1, r5
 800fc32:	6021      	streq	r1, [r4, #0]
 800fc34:	6054      	str	r4, [r2, #4]
 800fc36:	e7ca      	b.n	800fbce <_free_r+0x26>
 800fc38:	b003      	add	sp, #12
 800fc3a:	bd30      	pop	{r4, r5, pc}
 800fc3c:	20004bf4 	.word	0x20004bf4

0800fc40 <sbrk_aligned>:
 800fc40:	b570      	push	{r4, r5, r6, lr}
 800fc42:	4e0e      	ldr	r6, [pc, #56]	; (800fc7c <sbrk_aligned+0x3c>)
 800fc44:	460c      	mov	r4, r1
 800fc46:	6831      	ldr	r1, [r6, #0]
 800fc48:	4605      	mov	r5, r0
 800fc4a:	b911      	cbnz	r1, 800fc52 <sbrk_aligned+0x12>
 800fc4c:	f000 f88c 	bl	800fd68 <_sbrk_r>
 800fc50:	6030      	str	r0, [r6, #0]
 800fc52:	4621      	mov	r1, r4
 800fc54:	4628      	mov	r0, r5
 800fc56:	f000 f887 	bl	800fd68 <_sbrk_r>
 800fc5a:	1c43      	adds	r3, r0, #1
 800fc5c:	d00a      	beq.n	800fc74 <sbrk_aligned+0x34>
 800fc5e:	1cc4      	adds	r4, r0, #3
 800fc60:	f024 0403 	bic.w	r4, r4, #3
 800fc64:	42a0      	cmp	r0, r4
 800fc66:	d007      	beq.n	800fc78 <sbrk_aligned+0x38>
 800fc68:	1a21      	subs	r1, r4, r0
 800fc6a:	4628      	mov	r0, r5
 800fc6c:	f000 f87c 	bl	800fd68 <_sbrk_r>
 800fc70:	3001      	adds	r0, #1
 800fc72:	d101      	bne.n	800fc78 <sbrk_aligned+0x38>
 800fc74:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fc78:	4620      	mov	r0, r4
 800fc7a:	bd70      	pop	{r4, r5, r6, pc}
 800fc7c:	20004bf8 	.word	0x20004bf8

0800fc80 <_malloc_r>:
 800fc80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc84:	1ccd      	adds	r5, r1, #3
 800fc86:	f025 0503 	bic.w	r5, r5, #3
 800fc8a:	3508      	adds	r5, #8
 800fc8c:	2d0c      	cmp	r5, #12
 800fc8e:	bf38      	it	cc
 800fc90:	250c      	movcc	r5, #12
 800fc92:	2d00      	cmp	r5, #0
 800fc94:	4607      	mov	r7, r0
 800fc96:	db01      	blt.n	800fc9c <_malloc_r+0x1c>
 800fc98:	42a9      	cmp	r1, r5
 800fc9a:	d905      	bls.n	800fca8 <_malloc_r+0x28>
 800fc9c:	230c      	movs	r3, #12
 800fc9e:	603b      	str	r3, [r7, #0]
 800fca0:	2600      	movs	r6, #0
 800fca2:	4630      	mov	r0, r6
 800fca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fca8:	4e2e      	ldr	r6, [pc, #184]	; (800fd64 <_malloc_r+0xe4>)
 800fcaa:	f000 f8af 	bl	800fe0c <__malloc_lock>
 800fcae:	6833      	ldr	r3, [r6, #0]
 800fcb0:	461c      	mov	r4, r3
 800fcb2:	bb34      	cbnz	r4, 800fd02 <_malloc_r+0x82>
 800fcb4:	4629      	mov	r1, r5
 800fcb6:	4638      	mov	r0, r7
 800fcb8:	f7ff ffc2 	bl	800fc40 <sbrk_aligned>
 800fcbc:	1c43      	adds	r3, r0, #1
 800fcbe:	4604      	mov	r4, r0
 800fcc0:	d14d      	bne.n	800fd5e <_malloc_r+0xde>
 800fcc2:	6834      	ldr	r4, [r6, #0]
 800fcc4:	4626      	mov	r6, r4
 800fcc6:	2e00      	cmp	r6, #0
 800fcc8:	d140      	bne.n	800fd4c <_malloc_r+0xcc>
 800fcca:	6823      	ldr	r3, [r4, #0]
 800fccc:	4631      	mov	r1, r6
 800fcce:	4638      	mov	r0, r7
 800fcd0:	eb04 0803 	add.w	r8, r4, r3
 800fcd4:	f000 f848 	bl	800fd68 <_sbrk_r>
 800fcd8:	4580      	cmp	r8, r0
 800fcda:	d13a      	bne.n	800fd52 <_malloc_r+0xd2>
 800fcdc:	6821      	ldr	r1, [r4, #0]
 800fcde:	3503      	adds	r5, #3
 800fce0:	1a6d      	subs	r5, r5, r1
 800fce2:	f025 0503 	bic.w	r5, r5, #3
 800fce6:	3508      	adds	r5, #8
 800fce8:	2d0c      	cmp	r5, #12
 800fcea:	bf38      	it	cc
 800fcec:	250c      	movcc	r5, #12
 800fcee:	4629      	mov	r1, r5
 800fcf0:	4638      	mov	r0, r7
 800fcf2:	f7ff ffa5 	bl	800fc40 <sbrk_aligned>
 800fcf6:	3001      	adds	r0, #1
 800fcf8:	d02b      	beq.n	800fd52 <_malloc_r+0xd2>
 800fcfa:	6823      	ldr	r3, [r4, #0]
 800fcfc:	442b      	add	r3, r5
 800fcfe:	6023      	str	r3, [r4, #0]
 800fd00:	e00e      	b.n	800fd20 <_malloc_r+0xa0>
 800fd02:	6822      	ldr	r2, [r4, #0]
 800fd04:	1b52      	subs	r2, r2, r5
 800fd06:	d41e      	bmi.n	800fd46 <_malloc_r+0xc6>
 800fd08:	2a0b      	cmp	r2, #11
 800fd0a:	d916      	bls.n	800fd3a <_malloc_r+0xba>
 800fd0c:	1961      	adds	r1, r4, r5
 800fd0e:	42a3      	cmp	r3, r4
 800fd10:	6025      	str	r5, [r4, #0]
 800fd12:	bf18      	it	ne
 800fd14:	6059      	strne	r1, [r3, #4]
 800fd16:	6863      	ldr	r3, [r4, #4]
 800fd18:	bf08      	it	eq
 800fd1a:	6031      	streq	r1, [r6, #0]
 800fd1c:	5162      	str	r2, [r4, r5]
 800fd1e:	604b      	str	r3, [r1, #4]
 800fd20:	4638      	mov	r0, r7
 800fd22:	f104 060b 	add.w	r6, r4, #11
 800fd26:	f000 f877 	bl	800fe18 <__malloc_unlock>
 800fd2a:	f026 0607 	bic.w	r6, r6, #7
 800fd2e:	1d23      	adds	r3, r4, #4
 800fd30:	1af2      	subs	r2, r6, r3
 800fd32:	d0b6      	beq.n	800fca2 <_malloc_r+0x22>
 800fd34:	1b9b      	subs	r3, r3, r6
 800fd36:	50a3      	str	r3, [r4, r2]
 800fd38:	e7b3      	b.n	800fca2 <_malloc_r+0x22>
 800fd3a:	6862      	ldr	r2, [r4, #4]
 800fd3c:	42a3      	cmp	r3, r4
 800fd3e:	bf0c      	ite	eq
 800fd40:	6032      	streq	r2, [r6, #0]
 800fd42:	605a      	strne	r2, [r3, #4]
 800fd44:	e7ec      	b.n	800fd20 <_malloc_r+0xa0>
 800fd46:	4623      	mov	r3, r4
 800fd48:	6864      	ldr	r4, [r4, #4]
 800fd4a:	e7b2      	b.n	800fcb2 <_malloc_r+0x32>
 800fd4c:	4634      	mov	r4, r6
 800fd4e:	6876      	ldr	r6, [r6, #4]
 800fd50:	e7b9      	b.n	800fcc6 <_malloc_r+0x46>
 800fd52:	230c      	movs	r3, #12
 800fd54:	603b      	str	r3, [r7, #0]
 800fd56:	4638      	mov	r0, r7
 800fd58:	f000 f85e 	bl	800fe18 <__malloc_unlock>
 800fd5c:	e7a1      	b.n	800fca2 <_malloc_r+0x22>
 800fd5e:	6025      	str	r5, [r4, #0]
 800fd60:	e7de      	b.n	800fd20 <_malloc_r+0xa0>
 800fd62:	bf00      	nop
 800fd64:	20004bf4 	.word	0x20004bf4

0800fd68 <_sbrk_r>:
 800fd68:	b538      	push	{r3, r4, r5, lr}
 800fd6a:	4d06      	ldr	r5, [pc, #24]	; (800fd84 <_sbrk_r+0x1c>)
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	4604      	mov	r4, r0
 800fd70:	4608      	mov	r0, r1
 800fd72:	602b      	str	r3, [r5, #0]
 800fd74:	f7f1 ff54 	bl	8001c20 <_sbrk>
 800fd78:	1c43      	adds	r3, r0, #1
 800fd7a:	d102      	bne.n	800fd82 <_sbrk_r+0x1a>
 800fd7c:	682b      	ldr	r3, [r5, #0]
 800fd7e:	b103      	cbz	r3, 800fd82 <_sbrk_r+0x1a>
 800fd80:	6023      	str	r3, [r4, #0]
 800fd82:	bd38      	pop	{r3, r4, r5, pc}
 800fd84:	20004bfc 	.word	0x20004bfc

0800fd88 <__assert_func>:
 800fd88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd8a:	4614      	mov	r4, r2
 800fd8c:	461a      	mov	r2, r3
 800fd8e:	4b09      	ldr	r3, [pc, #36]	; (800fdb4 <__assert_func+0x2c>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	4605      	mov	r5, r0
 800fd94:	68d8      	ldr	r0, [r3, #12]
 800fd96:	b14c      	cbz	r4, 800fdac <__assert_func+0x24>
 800fd98:	4b07      	ldr	r3, [pc, #28]	; (800fdb8 <__assert_func+0x30>)
 800fd9a:	9100      	str	r1, [sp, #0]
 800fd9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fda0:	4906      	ldr	r1, [pc, #24]	; (800fdbc <__assert_func+0x34>)
 800fda2:	462b      	mov	r3, r5
 800fda4:	f000 f80e 	bl	800fdc4 <fiprintf>
 800fda8:	f000 fa64 	bl	8010274 <abort>
 800fdac:	4b04      	ldr	r3, [pc, #16]	; (800fdc0 <__assert_func+0x38>)
 800fdae:	461c      	mov	r4, r3
 800fdb0:	e7f3      	b.n	800fd9a <__assert_func+0x12>
 800fdb2:	bf00      	nop
 800fdb4:	20002858 	.word	0x20002858
 800fdb8:	08010b4c 	.word	0x08010b4c
 800fdbc:	08010b59 	.word	0x08010b59
 800fdc0:	08010b87 	.word	0x08010b87

0800fdc4 <fiprintf>:
 800fdc4:	b40e      	push	{r1, r2, r3}
 800fdc6:	b503      	push	{r0, r1, lr}
 800fdc8:	4601      	mov	r1, r0
 800fdca:	ab03      	add	r3, sp, #12
 800fdcc:	4805      	ldr	r0, [pc, #20]	; (800fde4 <fiprintf+0x20>)
 800fdce:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdd2:	6800      	ldr	r0, [r0, #0]
 800fdd4:	9301      	str	r3, [sp, #4]
 800fdd6:	f000 f84f 	bl	800fe78 <_vfiprintf_r>
 800fdda:	b002      	add	sp, #8
 800fddc:	f85d eb04 	ldr.w	lr, [sp], #4
 800fde0:	b003      	add	sp, #12
 800fde2:	4770      	bx	lr
 800fde4:	20002858 	.word	0x20002858

0800fde8 <__ascii_mbtowc>:
 800fde8:	b082      	sub	sp, #8
 800fdea:	b901      	cbnz	r1, 800fdee <__ascii_mbtowc+0x6>
 800fdec:	a901      	add	r1, sp, #4
 800fdee:	b142      	cbz	r2, 800fe02 <__ascii_mbtowc+0x1a>
 800fdf0:	b14b      	cbz	r3, 800fe06 <__ascii_mbtowc+0x1e>
 800fdf2:	7813      	ldrb	r3, [r2, #0]
 800fdf4:	600b      	str	r3, [r1, #0]
 800fdf6:	7812      	ldrb	r2, [r2, #0]
 800fdf8:	1e10      	subs	r0, r2, #0
 800fdfa:	bf18      	it	ne
 800fdfc:	2001      	movne	r0, #1
 800fdfe:	b002      	add	sp, #8
 800fe00:	4770      	bx	lr
 800fe02:	4610      	mov	r0, r2
 800fe04:	e7fb      	b.n	800fdfe <__ascii_mbtowc+0x16>
 800fe06:	f06f 0001 	mvn.w	r0, #1
 800fe0a:	e7f8      	b.n	800fdfe <__ascii_mbtowc+0x16>

0800fe0c <__malloc_lock>:
 800fe0c:	4801      	ldr	r0, [pc, #4]	; (800fe14 <__malloc_lock+0x8>)
 800fe0e:	f000 bbf1 	b.w	80105f4 <__retarget_lock_acquire_recursive>
 800fe12:	bf00      	nop
 800fe14:	20004c00 	.word	0x20004c00

0800fe18 <__malloc_unlock>:
 800fe18:	4801      	ldr	r0, [pc, #4]	; (800fe20 <__malloc_unlock+0x8>)
 800fe1a:	f000 bbec 	b.w	80105f6 <__retarget_lock_release_recursive>
 800fe1e:	bf00      	nop
 800fe20:	20004c00 	.word	0x20004c00

0800fe24 <__sfputc_r>:
 800fe24:	6893      	ldr	r3, [r2, #8]
 800fe26:	3b01      	subs	r3, #1
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	b410      	push	{r4}
 800fe2c:	6093      	str	r3, [r2, #8]
 800fe2e:	da08      	bge.n	800fe42 <__sfputc_r+0x1e>
 800fe30:	6994      	ldr	r4, [r2, #24]
 800fe32:	42a3      	cmp	r3, r4
 800fe34:	db01      	blt.n	800fe3a <__sfputc_r+0x16>
 800fe36:	290a      	cmp	r1, #10
 800fe38:	d103      	bne.n	800fe42 <__sfputc_r+0x1e>
 800fe3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe3e:	f000 b94b 	b.w	80100d8 <__swbuf_r>
 800fe42:	6813      	ldr	r3, [r2, #0]
 800fe44:	1c58      	adds	r0, r3, #1
 800fe46:	6010      	str	r0, [r2, #0]
 800fe48:	7019      	strb	r1, [r3, #0]
 800fe4a:	4608      	mov	r0, r1
 800fe4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe50:	4770      	bx	lr

0800fe52 <__sfputs_r>:
 800fe52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe54:	4606      	mov	r6, r0
 800fe56:	460f      	mov	r7, r1
 800fe58:	4614      	mov	r4, r2
 800fe5a:	18d5      	adds	r5, r2, r3
 800fe5c:	42ac      	cmp	r4, r5
 800fe5e:	d101      	bne.n	800fe64 <__sfputs_r+0x12>
 800fe60:	2000      	movs	r0, #0
 800fe62:	e007      	b.n	800fe74 <__sfputs_r+0x22>
 800fe64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe68:	463a      	mov	r2, r7
 800fe6a:	4630      	mov	r0, r6
 800fe6c:	f7ff ffda 	bl	800fe24 <__sfputc_r>
 800fe70:	1c43      	adds	r3, r0, #1
 800fe72:	d1f3      	bne.n	800fe5c <__sfputs_r+0xa>
 800fe74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fe78 <_vfiprintf_r>:
 800fe78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe7c:	460d      	mov	r5, r1
 800fe7e:	b09d      	sub	sp, #116	; 0x74
 800fe80:	4614      	mov	r4, r2
 800fe82:	4698      	mov	r8, r3
 800fe84:	4606      	mov	r6, r0
 800fe86:	b118      	cbz	r0, 800fe90 <_vfiprintf_r+0x18>
 800fe88:	6983      	ldr	r3, [r0, #24]
 800fe8a:	b90b      	cbnz	r3, 800fe90 <_vfiprintf_r+0x18>
 800fe8c:	f000 fb14 	bl	80104b8 <__sinit>
 800fe90:	4b89      	ldr	r3, [pc, #548]	; (80100b8 <_vfiprintf_r+0x240>)
 800fe92:	429d      	cmp	r5, r3
 800fe94:	d11b      	bne.n	800fece <_vfiprintf_r+0x56>
 800fe96:	6875      	ldr	r5, [r6, #4]
 800fe98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe9a:	07d9      	lsls	r1, r3, #31
 800fe9c:	d405      	bmi.n	800feaa <_vfiprintf_r+0x32>
 800fe9e:	89ab      	ldrh	r3, [r5, #12]
 800fea0:	059a      	lsls	r2, r3, #22
 800fea2:	d402      	bmi.n	800feaa <_vfiprintf_r+0x32>
 800fea4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fea6:	f000 fba5 	bl	80105f4 <__retarget_lock_acquire_recursive>
 800feaa:	89ab      	ldrh	r3, [r5, #12]
 800feac:	071b      	lsls	r3, r3, #28
 800feae:	d501      	bpl.n	800feb4 <_vfiprintf_r+0x3c>
 800feb0:	692b      	ldr	r3, [r5, #16]
 800feb2:	b9eb      	cbnz	r3, 800fef0 <_vfiprintf_r+0x78>
 800feb4:	4629      	mov	r1, r5
 800feb6:	4630      	mov	r0, r6
 800feb8:	f000 f96e 	bl	8010198 <__swsetup_r>
 800febc:	b1c0      	cbz	r0, 800fef0 <_vfiprintf_r+0x78>
 800febe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fec0:	07dc      	lsls	r4, r3, #31
 800fec2:	d50e      	bpl.n	800fee2 <_vfiprintf_r+0x6a>
 800fec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fec8:	b01d      	add	sp, #116	; 0x74
 800feca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fece:	4b7b      	ldr	r3, [pc, #492]	; (80100bc <_vfiprintf_r+0x244>)
 800fed0:	429d      	cmp	r5, r3
 800fed2:	d101      	bne.n	800fed8 <_vfiprintf_r+0x60>
 800fed4:	68b5      	ldr	r5, [r6, #8]
 800fed6:	e7df      	b.n	800fe98 <_vfiprintf_r+0x20>
 800fed8:	4b79      	ldr	r3, [pc, #484]	; (80100c0 <_vfiprintf_r+0x248>)
 800feda:	429d      	cmp	r5, r3
 800fedc:	bf08      	it	eq
 800fede:	68f5      	ldreq	r5, [r6, #12]
 800fee0:	e7da      	b.n	800fe98 <_vfiprintf_r+0x20>
 800fee2:	89ab      	ldrh	r3, [r5, #12]
 800fee4:	0598      	lsls	r0, r3, #22
 800fee6:	d4ed      	bmi.n	800fec4 <_vfiprintf_r+0x4c>
 800fee8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800feea:	f000 fb84 	bl	80105f6 <__retarget_lock_release_recursive>
 800feee:	e7e9      	b.n	800fec4 <_vfiprintf_r+0x4c>
 800fef0:	2300      	movs	r3, #0
 800fef2:	9309      	str	r3, [sp, #36]	; 0x24
 800fef4:	2320      	movs	r3, #32
 800fef6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fefa:	f8cd 800c 	str.w	r8, [sp, #12]
 800fefe:	2330      	movs	r3, #48	; 0x30
 800ff00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80100c4 <_vfiprintf_r+0x24c>
 800ff04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ff08:	f04f 0901 	mov.w	r9, #1
 800ff0c:	4623      	mov	r3, r4
 800ff0e:	469a      	mov	sl, r3
 800ff10:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff14:	b10a      	cbz	r2, 800ff1a <_vfiprintf_r+0xa2>
 800ff16:	2a25      	cmp	r2, #37	; 0x25
 800ff18:	d1f9      	bne.n	800ff0e <_vfiprintf_r+0x96>
 800ff1a:	ebba 0b04 	subs.w	fp, sl, r4
 800ff1e:	d00b      	beq.n	800ff38 <_vfiprintf_r+0xc0>
 800ff20:	465b      	mov	r3, fp
 800ff22:	4622      	mov	r2, r4
 800ff24:	4629      	mov	r1, r5
 800ff26:	4630      	mov	r0, r6
 800ff28:	f7ff ff93 	bl	800fe52 <__sfputs_r>
 800ff2c:	3001      	adds	r0, #1
 800ff2e:	f000 80aa 	beq.w	8010086 <_vfiprintf_r+0x20e>
 800ff32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff34:	445a      	add	r2, fp
 800ff36:	9209      	str	r2, [sp, #36]	; 0x24
 800ff38:	f89a 3000 	ldrb.w	r3, [sl]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	f000 80a2 	beq.w	8010086 <_vfiprintf_r+0x20e>
 800ff42:	2300      	movs	r3, #0
 800ff44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff4c:	f10a 0a01 	add.w	sl, sl, #1
 800ff50:	9304      	str	r3, [sp, #16]
 800ff52:	9307      	str	r3, [sp, #28]
 800ff54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff58:	931a      	str	r3, [sp, #104]	; 0x68
 800ff5a:	4654      	mov	r4, sl
 800ff5c:	2205      	movs	r2, #5
 800ff5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff62:	4858      	ldr	r0, [pc, #352]	; (80100c4 <_vfiprintf_r+0x24c>)
 800ff64:	f7f0 f964 	bl	8000230 <memchr>
 800ff68:	9a04      	ldr	r2, [sp, #16]
 800ff6a:	b9d8      	cbnz	r0, 800ffa4 <_vfiprintf_r+0x12c>
 800ff6c:	06d1      	lsls	r1, r2, #27
 800ff6e:	bf44      	itt	mi
 800ff70:	2320      	movmi	r3, #32
 800ff72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff76:	0713      	lsls	r3, r2, #28
 800ff78:	bf44      	itt	mi
 800ff7a:	232b      	movmi	r3, #43	; 0x2b
 800ff7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff80:	f89a 3000 	ldrb.w	r3, [sl]
 800ff84:	2b2a      	cmp	r3, #42	; 0x2a
 800ff86:	d015      	beq.n	800ffb4 <_vfiprintf_r+0x13c>
 800ff88:	9a07      	ldr	r2, [sp, #28]
 800ff8a:	4654      	mov	r4, sl
 800ff8c:	2000      	movs	r0, #0
 800ff8e:	f04f 0c0a 	mov.w	ip, #10
 800ff92:	4621      	mov	r1, r4
 800ff94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff98:	3b30      	subs	r3, #48	; 0x30
 800ff9a:	2b09      	cmp	r3, #9
 800ff9c:	d94e      	bls.n	801003c <_vfiprintf_r+0x1c4>
 800ff9e:	b1b0      	cbz	r0, 800ffce <_vfiprintf_r+0x156>
 800ffa0:	9207      	str	r2, [sp, #28]
 800ffa2:	e014      	b.n	800ffce <_vfiprintf_r+0x156>
 800ffa4:	eba0 0308 	sub.w	r3, r0, r8
 800ffa8:	fa09 f303 	lsl.w	r3, r9, r3
 800ffac:	4313      	orrs	r3, r2
 800ffae:	9304      	str	r3, [sp, #16]
 800ffb0:	46a2      	mov	sl, r4
 800ffb2:	e7d2      	b.n	800ff5a <_vfiprintf_r+0xe2>
 800ffb4:	9b03      	ldr	r3, [sp, #12]
 800ffb6:	1d19      	adds	r1, r3, #4
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	9103      	str	r1, [sp, #12]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	bfbb      	ittet	lt
 800ffc0:	425b      	neglt	r3, r3
 800ffc2:	f042 0202 	orrlt.w	r2, r2, #2
 800ffc6:	9307      	strge	r3, [sp, #28]
 800ffc8:	9307      	strlt	r3, [sp, #28]
 800ffca:	bfb8      	it	lt
 800ffcc:	9204      	strlt	r2, [sp, #16]
 800ffce:	7823      	ldrb	r3, [r4, #0]
 800ffd0:	2b2e      	cmp	r3, #46	; 0x2e
 800ffd2:	d10c      	bne.n	800ffee <_vfiprintf_r+0x176>
 800ffd4:	7863      	ldrb	r3, [r4, #1]
 800ffd6:	2b2a      	cmp	r3, #42	; 0x2a
 800ffd8:	d135      	bne.n	8010046 <_vfiprintf_r+0x1ce>
 800ffda:	9b03      	ldr	r3, [sp, #12]
 800ffdc:	1d1a      	adds	r2, r3, #4
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	9203      	str	r2, [sp, #12]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	bfb8      	it	lt
 800ffe6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ffea:	3402      	adds	r4, #2
 800ffec:	9305      	str	r3, [sp, #20]
 800ffee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80100d4 <_vfiprintf_r+0x25c>
 800fff2:	7821      	ldrb	r1, [r4, #0]
 800fff4:	2203      	movs	r2, #3
 800fff6:	4650      	mov	r0, sl
 800fff8:	f7f0 f91a 	bl	8000230 <memchr>
 800fffc:	b140      	cbz	r0, 8010010 <_vfiprintf_r+0x198>
 800fffe:	2340      	movs	r3, #64	; 0x40
 8010000:	eba0 000a 	sub.w	r0, r0, sl
 8010004:	fa03 f000 	lsl.w	r0, r3, r0
 8010008:	9b04      	ldr	r3, [sp, #16]
 801000a:	4303      	orrs	r3, r0
 801000c:	3401      	adds	r4, #1
 801000e:	9304      	str	r3, [sp, #16]
 8010010:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010014:	482c      	ldr	r0, [pc, #176]	; (80100c8 <_vfiprintf_r+0x250>)
 8010016:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801001a:	2206      	movs	r2, #6
 801001c:	f7f0 f908 	bl	8000230 <memchr>
 8010020:	2800      	cmp	r0, #0
 8010022:	d03f      	beq.n	80100a4 <_vfiprintf_r+0x22c>
 8010024:	4b29      	ldr	r3, [pc, #164]	; (80100cc <_vfiprintf_r+0x254>)
 8010026:	bb1b      	cbnz	r3, 8010070 <_vfiprintf_r+0x1f8>
 8010028:	9b03      	ldr	r3, [sp, #12]
 801002a:	3307      	adds	r3, #7
 801002c:	f023 0307 	bic.w	r3, r3, #7
 8010030:	3308      	adds	r3, #8
 8010032:	9303      	str	r3, [sp, #12]
 8010034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010036:	443b      	add	r3, r7
 8010038:	9309      	str	r3, [sp, #36]	; 0x24
 801003a:	e767      	b.n	800ff0c <_vfiprintf_r+0x94>
 801003c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010040:	460c      	mov	r4, r1
 8010042:	2001      	movs	r0, #1
 8010044:	e7a5      	b.n	800ff92 <_vfiprintf_r+0x11a>
 8010046:	2300      	movs	r3, #0
 8010048:	3401      	adds	r4, #1
 801004a:	9305      	str	r3, [sp, #20]
 801004c:	4619      	mov	r1, r3
 801004e:	f04f 0c0a 	mov.w	ip, #10
 8010052:	4620      	mov	r0, r4
 8010054:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010058:	3a30      	subs	r2, #48	; 0x30
 801005a:	2a09      	cmp	r2, #9
 801005c:	d903      	bls.n	8010066 <_vfiprintf_r+0x1ee>
 801005e:	2b00      	cmp	r3, #0
 8010060:	d0c5      	beq.n	800ffee <_vfiprintf_r+0x176>
 8010062:	9105      	str	r1, [sp, #20]
 8010064:	e7c3      	b.n	800ffee <_vfiprintf_r+0x176>
 8010066:	fb0c 2101 	mla	r1, ip, r1, r2
 801006a:	4604      	mov	r4, r0
 801006c:	2301      	movs	r3, #1
 801006e:	e7f0      	b.n	8010052 <_vfiprintf_r+0x1da>
 8010070:	ab03      	add	r3, sp, #12
 8010072:	9300      	str	r3, [sp, #0]
 8010074:	462a      	mov	r2, r5
 8010076:	4b16      	ldr	r3, [pc, #88]	; (80100d0 <_vfiprintf_r+0x258>)
 8010078:	a904      	add	r1, sp, #16
 801007a:	4630      	mov	r0, r6
 801007c:	f7fd ffaa 	bl	800dfd4 <_printf_float>
 8010080:	4607      	mov	r7, r0
 8010082:	1c78      	adds	r0, r7, #1
 8010084:	d1d6      	bne.n	8010034 <_vfiprintf_r+0x1bc>
 8010086:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010088:	07d9      	lsls	r1, r3, #31
 801008a:	d405      	bmi.n	8010098 <_vfiprintf_r+0x220>
 801008c:	89ab      	ldrh	r3, [r5, #12]
 801008e:	059a      	lsls	r2, r3, #22
 8010090:	d402      	bmi.n	8010098 <_vfiprintf_r+0x220>
 8010092:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010094:	f000 faaf 	bl	80105f6 <__retarget_lock_release_recursive>
 8010098:	89ab      	ldrh	r3, [r5, #12]
 801009a:	065b      	lsls	r3, r3, #25
 801009c:	f53f af12 	bmi.w	800fec4 <_vfiprintf_r+0x4c>
 80100a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80100a2:	e711      	b.n	800fec8 <_vfiprintf_r+0x50>
 80100a4:	ab03      	add	r3, sp, #12
 80100a6:	9300      	str	r3, [sp, #0]
 80100a8:	462a      	mov	r2, r5
 80100aa:	4b09      	ldr	r3, [pc, #36]	; (80100d0 <_vfiprintf_r+0x258>)
 80100ac:	a904      	add	r1, sp, #16
 80100ae:	4630      	mov	r0, r6
 80100b0:	f7fe fa34 	bl	800e51c <_printf_i>
 80100b4:	e7e4      	b.n	8010080 <_vfiprintf_r+0x208>
 80100b6:	bf00      	nop
 80100b8:	08010cc4 	.word	0x08010cc4
 80100bc:	08010ce4 	.word	0x08010ce4
 80100c0:	08010ca4 	.word	0x08010ca4
 80100c4:	08010b92 	.word	0x08010b92
 80100c8:	08010b9c 	.word	0x08010b9c
 80100cc:	0800dfd5 	.word	0x0800dfd5
 80100d0:	0800fe53 	.word	0x0800fe53
 80100d4:	08010b98 	.word	0x08010b98

080100d8 <__swbuf_r>:
 80100d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100da:	460e      	mov	r6, r1
 80100dc:	4614      	mov	r4, r2
 80100de:	4605      	mov	r5, r0
 80100e0:	b118      	cbz	r0, 80100ea <__swbuf_r+0x12>
 80100e2:	6983      	ldr	r3, [r0, #24]
 80100e4:	b90b      	cbnz	r3, 80100ea <__swbuf_r+0x12>
 80100e6:	f000 f9e7 	bl	80104b8 <__sinit>
 80100ea:	4b21      	ldr	r3, [pc, #132]	; (8010170 <__swbuf_r+0x98>)
 80100ec:	429c      	cmp	r4, r3
 80100ee:	d12b      	bne.n	8010148 <__swbuf_r+0x70>
 80100f0:	686c      	ldr	r4, [r5, #4]
 80100f2:	69a3      	ldr	r3, [r4, #24]
 80100f4:	60a3      	str	r3, [r4, #8]
 80100f6:	89a3      	ldrh	r3, [r4, #12]
 80100f8:	071a      	lsls	r2, r3, #28
 80100fa:	d52f      	bpl.n	801015c <__swbuf_r+0x84>
 80100fc:	6923      	ldr	r3, [r4, #16]
 80100fe:	b36b      	cbz	r3, 801015c <__swbuf_r+0x84>
 8010100:	6923      	ldr	r3, [r4, #16]
 8010102:	6820      	ldr	r0, [r4, #0]
 8010104:	1ac0      	subs	r0, r0, r3
 8010106:	6963      	ldr	r3, [r4, #20]
 8010108:	b2f6      	uxtb	r6, r6
 801010a:	4283      	cmp	r3, r0
 801010c:	4637      	mov	r7, r6
 801010e:	dc04      	bgt.n	801011a <__swbuf_r+0x42>
 8010110:	4621      	mov	r1, r4
 8010112:	4628      	mov	r0, r5
 8010114:	f000 f93c 	bl	8010390 <_fflush_r>
 8010118:	bb30      	cbnz	r0, 8010168 <__swbuf_r+0x90>
 801011a:	68a3      	ldr	r3, [r4, #8]
 801011c:	3b01      	subs	r3, #1
 801011e:	60a3      	str	r3, [r4, #8]
 8010120:	6823      	ldr	r3, [r4, #0]
 8010122:	1c5a      	adds	r2, r3, #1
 8010124:	6022      	str	r2, [r4, #0]
 8010126:	701e      	strb	r6, [r3, #0]
 8010128:	6963      	ldr	r3, [r4, #20]
 801012a:	3001      	adds	r0, #1
 801012c:	4283      	cmp	r3, r0
 801012e:	d004      	beq.n	801013a <__swbuf_r+0x62>
 8010130:	89a3      	ldrh	r3, [r4, #12]
 8010132:	07db      	lsls	r3, r3, #31
 8010134:	d506      	bpl.n	8010144 <__swbuf_r+0x6c>
 8010136:	2e0a      	cmp	r6, #10
 8010138:	d104      	bne.n	8010144 <__swbuf_r+0x6c>
 801013a:	4621      	mov	r1, r4
 801013c:	4628      	mov	r0, r5
 801013e:	f000 f927 	bl	8010390 <_fflush_r>
 8010142:	b988      	cbnz	r0, 8010168 <__swbuf_r+0x90>
 8010144:	4638      	mov	r0, r7
 8010146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010148:	4b0a      	ldr	r3, [pc, #40]	; (8010174 <__swbuf_r+0x9c>)
 801014a:	429c      	cmp	r4, r3
 801014c:	d101      	bne.n	8010152 <__swbuf_r+0x7a>
 801014e:	68ac      	ldr	r4, [r5, #8]
 8010150:	e7cf      	b.n	80100f2 <__swbuf_r+0x1a>
 8010152:	4b09      	ldr	r3, [pc, #36]	; (8010178 <__swbuf_r+0xa0>)
 8010154:	429c      	cmp	r4, r3
 8010156:	bf08      	it	eq
 8010158:	68ec      	ldreq	r4, [r5, #12]
 801015a:	e7ca      	b.n	80100f2 <__swbuf_r+0x1a>
 801015c:	4621      	mov	r1, r4
 801015e:	4628      	mov	r0, r5
 8010160:	f000 f81a 	bl	8010198 <__swsetup_r>
 8010164:	2800      	cmp	r0, #0
 8010166:	d0cb      	beq.n	8010100 <__swbuf_r+0x28>
 8010168:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801016c:	e7ea      	b.n	8010144 <__swbuf_r+0x6c>
 801016e:	bf00      	nop
 8010170:	08010cc4 	.word	0x08010cc4
 8010174:	08010ce4 	.word	0x08010ce4
 8010178:	08010ca4 	.word	0x08010ca4

0801017c <__ascii_wctomb>:
 801017c:	b149      	cbz	r1, 8010192 <__ascii_wctomb+0x16>
 801017e:	2aff      	cmp	r2, #255	; 0xff
 8010180:	bf85      	ittet	hi
 8010182:	238a      	movhi	r3, #138	; 0x8a
 8010184:	6003      	strhi	r3, [r0, #0]
 8010186:	700a      	strbls	r2, [r1, #0]
 8010188:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801018c:	bf98      	it	ls
 801018e:	2001      	movls	r0, #1
 8010190:	4770      	bx	lr
 8010192:	4608      	mov	r0, r1
 8010194:	4770      	bx	lr
	...

08010198 <__swsetup_r>:
 8010198:	4b32      	ldr	r3, [pc, #200]	; (8010264 <__swsetup_r+0xcc>)
 801019a:	b570      	push	{r4, r5, r6, lr}
 801019c:	681d      	ldr	r5, [r3, #0]
 801019e:	4606      	mov	r6, r0
 80101a0:	460c      	mov	r4, r1
 80101a2:	b125      	cbz	r5, 80101ae <__swsetup_r+0x16>
 80101a4:	69ab      	ldr	r3, [r5, #24]
 80101a6:	b913      	cbnz	r3, 80101ae <__swsetup_r+0x16>
 80101a8:	4628      	mov	r0, r5
 80101aa:	f000 f985 	bl	80104b8 <__sinit>
 80101ae:	4b2e      	ldr	r3, [pc, #184]	; (8010268 <__swsetup_r+0xd0>)
 80101b0:	429c      	cmp	r4, r3
 80101b2:	d10f      	bne.n	80101d4 <__swsetup_r+0x3c>
 80101b4:	686c      	ldr	r4, [r5, #4]
 80101b6:	89a3      	ldrh	r3, [r4, #12]
 80101b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80101bc:	0719      	lsls	r1, r3, #28
 80101be:	d42c      	bmi.n	801021a <__swsetup_r+0x82>
 80101c0:	06dd      	lsls	r5, r3, #27
 80101c2:	d411      	bmi.n	80101e8 <__swsetup_r+0x50>
 80101c4:	2309      	movs	r3, #9
 80101c6:	6033      	str	r3, [r6, #0]
 80101c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80101cc:	81a3      	strh	r3, [r4, #12]
 80101ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80101d2:	e03e      	b.n	8010252 <__swsetup_r+0xba>
 80101d4:	4b25      	ldr	r3, [pc, #148]	; (801026c <__swsetup_r+0xd4>)
 80101d6:	429c      	cmp	r4, r3
 80101d8:	d101      	bne.n	80101de <__swsetup_r+0x46>
 80101da:	68ac      	ldr	r4, [r5, #8]
 80101dc:	e7eb      	b.n	80101b6 <__swsetup_r+0x1e>
 80101de:	4b24      	ldr	r3, [pc, #144]	; (8010270 <__swsetup_r+0xd8>)
 80101e0:	429c      	cmp	r4, r3
 80101e2:	bf08      	it	eq
 80101e4:	68ec      	ldreq	r4, [r5, #12]
 80101e6:	e7e6      	b.n	80101b6 <__swsetup_r+0x1e>
 80101e8:	0758      	lsls	r0, r3, #29
 80101ea:	d512      	bpl.n	8010212 <__swsetup_r+0x7a>
 80101ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80101ee:	b141      	cbz	r1, 8010202 <__swsetup_r+0x6a>
 80101f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80101f4:	4299      	cmp	r1, r3
 80101f6:	d002      	beq.n	80101fe <__swsetup_r+0x66>
 80101f8:	4630      	mov	r0, r6
 80101fa:	f7ff fcd5 	bl	800fba8 <_free_r>
 80101fe:	2300      	movs	r3, #0
 8010200:	6363      	str	r3, [r4, #52]	; 0x34
 8010202:	89a3      	ldrh	r3, [r4, #12]
 8010204:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010208:	81a3      	strh	r3, [r4, #12]
 801020a:	2300      	movs	r3, #0
 801020c:	6063      	str	r3, [r4, #4]
 801020e:	6923      	ldr	r3, [r4, #16]
 8010210:	6023      	str	r3, [r4, #0]
 8010212:	89a3      	ldrh	r3, [r4, #12]
 8010214:	f043 0308 	orr.w	r3, r3, #8
 8010218:	81a3      	strh	r3, [r4, #12]
 801021a:	6923      	ldr	r3, [r4, #16]
 801021c:	b94b      	cbnz	r3, 8010232 <__swsetup_r+0x9a>
 801021e:	89a3      	ldrh	r3, [r4, #12]
 8010220:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010228:	d003      	beq.n	8010232 <__swsetup_r+0x9a>
 801022a:	4621      	mov	r1, r4
 801022c:	4630      	mov	r0, r6
 801022e:	f000 fa09 	bl	8010644 <__smakebuf_r>
 8010232:	89a0      	ldrh	r0, [r4, #12]
 8010234:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010238:	f010 0301 	ands.w	r3, r0, #1
 801023c:	d00a      	beq.n	8010254 <__swsetup_r+0xbc>
 801023e:	2300      	movs	r3, #0
 8010240:	60a3      	str	r3, [r4, #8]
 8010242:	6963      	ldr	r3, [r4, #20]
 8010244:	425b      	negs	r3, r3
 8010246:	61a3      	str	r3, [r4, #24]
 8010248:	6923      	ldr	r3, [r4, #16]
 801024a:	b943      	cbnz	r3, 801025e <__swsetup_r+0xc6>
 801024c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010250:	d1ba      	bne.n	80101c8 <__swsetup_r+0x30>
 8010252:	bd70      	pop	{r4, r5, r6, pc}
 8010254:	0781      	lsls	r1, r0, #30
 8010256:	bf58      	it	pl
 8010258:	6963      	ldrpl	r3, [r4, #20]
 801025a:	60a3      	str	r3, [r4, #8]
 801025c:	e7f4      	b.n	8010248 <__swsetup_r+0xb0>
 801025e:	2000      	movs	r0, #0
 8010260:	e7f7      	b.n	8010252 <__swsetup_r+0xba>
 8010262:	bf00      	nop
 8010264:	20002858 	.word	0x20002858
 8010268:	08010cc4 	.word	0x08010cc4
 801026c:	08010ce4 	.word	0x08010ce4
 8010270:	08010ca4 	.word	0x08010ca4

08010274 <abort>:
 8010274:	b508      	push	{r3, lr}
 8010276:	2006      	movs	r0, #6
 8010278:	f000 fa4c 	bl	8010714 <raise>
 801027c:	2001      	movs	r0, #1
 801027e:	f7f1 fc57 	bl	8001b30 <_exit>
	...

08010284 <__sflush_r>:
 8010284:	898a      	ldrh	r2, [r1, #12]
 8010286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801028a:	4605      	mov	r5, r0
 801028c:	0710      	lsls	r0, r2, #28
 801028e:	460c      	mov	r4, r1
 8010290:	d458      	bmi.n	8010344 <__sflush_r+0xc0>
 8010292:	684b      	ldr	r3, [r1, #4]
 8010294:	2b00      	cmp	r3, #0
 8010296:	dc05      	bgt.n	80102a4 <__sflush_r+0x20>
 8010298:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801029a:	2b00      	cmp	r3, #0
 801029c:	dc02      	bgt.n	80102a4 <__sflush_r+0x20>
 801029e:	2000      	movs	r0, #0
 80102a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80102a6:	2e00      	cmp	r6, #0
 80102a8:	d0f9      	beq.n	801029e <__sflush_r+0x1a>
 80102aa:	2300      	movs	r3, #0
 80102ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80102b0:	682f      	ldr	r7, [r5, #0]
 80102b2:	602b      	str	r3, [r5, #0]
 80102b4:	d032      	beq.n	801031c <__sflush_r+0x98>
 80102b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80102b8:	89a3      	ldrh	r3, [r4, #12]
 80102ba:	075a      	lsls	r2, r3, #29
 80102bc:	d505      	bpl.n	80102ca <__sflush_r+0x46>
 80102be:	6863      	ldr	r3, [r4, #4]
 80102c0:	1ac0      	subs	r0, r0, r3
 80102c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80102c4:	b10b      	cbz	r3, 80102ca <__sflush_r+0x46>
 80102c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80102c8:	1ac0      	subs	r0, r0, r3
 80102ca:	2300      	movs	r3, #0
 80102cc:	4602      	mov	r2, r0
 80102ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80102d0:	6a21      	ldr	r1, [r4, #32]
 80102d2:	4628      	mov	r0, r5
 80102d4:	47b0      	blx	r6
 80102d6:	1c43      	adds	r3, r0, #1
 80102d8:	89a3      	ldrh	r3, [r4, #12]
 80102da:	d106      	bne.n	80102ea <__sflush_r+0x66>
 80102dc:	6829      	ldr	r1, [r5, #0]
 80102de:	291d      	cmp	r1, #29
 80102e0:	d82c      	bhi.n	801033c <__sflush_r+0xb8>
 80102e2:	4a2a      	ldr	r2, [pc, #168]	; (801038c <__sflush_r+0x108>)
 80102e4:	40ca      	lsrs	r2, r1
 80102e6:	07d6      	lsls	r6, r2, #31
 80102e8:	d528      	bpl.n	801033c <__sflush_r+0xb8>
 80102ea:	2200      	movs	r2, #0
 80102ec:	6062      	str	r2, [r4, #4]
 80102ee:	04d9      	lsls	r1, r3, #19
 80102f0:	6922      	ldr	r2, [r4, #16]
 80102f2:	6022      	str	r2, [r4, #0]
 80102f4:	d504      	bpl.n	8010300 <__sflush_r+0x7c>
 80102f6:	1c42      	adds	r2, r0, #1
 80102f8:	d101      	bne.n	80102fe <__sflush_r+0x7a>
 80102fa:	682b      	ldr	r3, [r5, #0]
 80102fc:	b903      	cbnz	r3, 8010300 <__sflush_r+0x7c>
 80102fe:	6560      	str	r0, [r4, #84]	; 0x54
 8010300:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010302:	602f      	str	r7, [r5, #0]
 8010304:	2900      	cmp	r1, #0
 8010306:	d0ca      	beq.n	801029e <__sflush_r+0x1a>
 8010308:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801030c:	4299      	cmp	r1, r3
 801030e:	d002      	beq.n	8010316 <__sflush_r+0x92>
 8010310:	4628      	mov	r0, r5
 8010312:	f7ff fc49 	bl	800fba8 <_free_r>
 8010316:	2000      	movs	r0, #0
 8010318:	6360      	str	r0, [r4, #52]	; 0x34
 801031a:	e7c1      	b.n	80102a0 <__sflush_r+0x1c>
 801031c:	6a21      	ldr	r1, [r4, #32]
 801031e:	2301      	movs	r3, #1
 8010320:	4628      	mov	r0, r5
 8010322:	47b0      	blx	r6
 8010324:	1c41      	adds	r1, r0, #1
 8010326:	d1c7      	bne.n	80102b8 <__sflush_r+0x34>
 8010328:	682b      	ldr	r3, [r5, #0]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d0c4      	beq.n	80102b8 <__sflush_r+0x34>
 801032e:	2b1d      	cmp	r3, #29
 8010330:	d001      	beq.n	8010336 <__sflush_r+0xb2>
 8010332:	2b16      	cmp	r3, #22
 8010334:	d101      	bne.n	801033a <__sflush_r+0xb6>
 8010336:	602f      	str	r7, [r5, #0]
 8010338:	e7b1      	b.n	801029e <__sflush_r+0x1a>
 801033a:	89a3      	ldrh	r3, [r4, #12]
 801033c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010340:	81a3      	strh	r3, [r4, #12]
 8010342:	e7ad      	b.n	80102a0 <__sflush_r+0x1c>
 8010344:	690f      	ldr	r7, [r1, #16]
 8010346:	2f00      	cmp	r7, #0
 8010348:	d0a9      	beq.n	801029e <__sflush_r+0x1a>
 801034a:	0793      	lsls	r3, r2, #30
 801034c:	680e      	ldr	r6, [r1, #0]
 801034e:	bf08      	it	eq
 8010350:	694b      	ldreq	r3, [r1, #20]
 8010352:	600f      	str	r7, [r1, #0]
 8010354:	bf18      	it	ne
 8010356:	2300      	movne	r3, #0
 8010358:	eba6 0807 	sub.w	r8, r6, r7
 801035c:	608b      	str	r3, [r1, #8]
 801035e:	f1b8 0f00 	cmp.w	r8, #0
 8010362:	dd9c      	ble.n	801029e <__sflush_r+0x1a>
 8010364:	6a21      	ldr	r1, [r4, #32]
 8010366:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010368:	4643      	mov	r3, r8
 801036a:	463a      	mov	r2, r7
 801036c:	4628      	mov	r0, r5
 801036e:	47b0      	blx	r6
 8010370:	2800      	cmp	r0, #0
 8010372:	dc06      	bgt.n	8010382 <__sflush_r+0xfe>
 8010374:	89a3      	ldrh	r3, [r4, #12]
 8010376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801037a:	81a3      	strh	r3, [r4, #12]
 801037c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010380:	e78e      	b.n	80102a0 <__sflush_r+0x1c>
 8010382:	4407      	add	r7, r0
 8010384:	eba8 0800 	sub.w	r8, r8, r0
 8010388:	e7e9      	b.n	801035e <__sflush_r+0xda>
 801038a:	bf00      	nop
 801038c:	20400001 	.word	0x20400001

08010390 <_fflush_r>:
 8010390:	b538      	push	{r3, r4, r5, lr}
 8010392:	690b      	ldr	r3, [r1, #16]
 8010394:	4605      	mov	r5, r0
 8010396:	460c      	mov	r4, r1
 8010398:	b913      	cbnz	r3, 80103a0 <_fflush_r+0x10>
 801039a:	2500      	movs	r5, #0
 801039c:	4628      	mov	r0, r5
 801039e:	bd38      	pop	{r3, r4, r5, pc}
 80103a0:	b118      	cbz	r0, 80103aa <_fflush_r+0x1a>
 80103a2:	6983      	ldr	r3, [r0, #24]
 80103a4:	b90b      	cbnz	r3, 80103aa <_fflush_r+0x1a>
 80103a6:	f000 f887 	bl	80104b8 <__sinit>
 80103aa:	4b14      	ldr	r3, [pc, #80]	; (80103fc <_fflush_r+0x6c>)
 80103ac:	429c      	cmp	r4, r3
 80103ae:	d11b      	bne.n	80103e8 <_fflush_r+0x58>
 80103b0:	686c      	ldr	r4, [r5, #4]
 80103b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d0ef      	beq.n	801039a <_fflush_r+0xa>
 80103ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80103bc:	07d0      	lsls	r0, r2, #31
 80103be:	d404      	bmi.n	80103ca <_fflush_r+0x3a>
 80103c0:	0599      	lsls	r1, r3, #22
 80103c2:	d402      	bmi.n	80103ca <_fflush_r+0x3a>
 80103c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80103c6:	f000 f915 	bl	80105f4 <__retarget_lock_acquire_recursive>
 80103ca:	4628      	mov	r0, r5
 80103cc:	4621      	mov	r1, r4
 80103ce:	f7ff ff59 	bl	8010284 <__sflush_r>
 80103d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80103d4:	07da      	lsls	r2, r3, #31
 80103d6:	4605      	mov	r5, r0
 80103d8:	d4e0      	bmi.n	801039c <_fflush_r+0xc>
 80103da:	89a3      	ldrh	r3, [r4, #12]
 80103dc:	059b      	lsls	r3, r3, #22
 80103de:	d4dd      	bmi.n	801039c <_fflush_r+0xc>
 80103e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80103e2:	f000 f908 	bl	80105f6 <__retarget_lock_release_recursive>
 80103e6:	e7d9      	b.n	801039c <_fflush_r+0xc>
 80103e8:	4b05      	ldr	r3, [pc, #20]	; (8010400 <_fflush_r+0x70>)
 80103ea:	429c      	cmp	r4, r3
 80103ec:	d101      	bne.n	80103f2 <_fflush_r+0x62>
 80103ee:	68ac      	ldr	r4, [r5, #8]
 80103f0:	e7df      	b.n	80103b2 <_fflush_r+0x22>
 80103f2:	4b04      	ldr	r3, [pc, #16]	; (8010404 <_fflush_r+0x74>)
 80103f4:	429c      	cmp	r4, r3
 80103f6:	bf08      	it	eq
 80103f8:	68ec      	ldreq	r4, [r5, #12]
 80103fa:	e7da      	b.n	80103b2 <_fflush_r+0x22>
 80103fc:	08010cc4 	.word	0x08010cc4
 8010400:	08010ce4 	.word	0x08010ce4
 8010404:	08010ca4 	.word	0x08010ca4

08010408 <std>:
 8010408:	2300      	movs	r3, #0
 801040a:	b510      	push	{r4, lr}
 801040c:	4604      	mov	r4, r0
 801040e:	e9c0 3300 	strd	r3, r3, [r0]
 8010412:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010416:	6083      	str	r3, [r0, #8]
 8010418:	8181      	strh	r1, [r0, #12]
 801041a:	6643      	str	r3, [r0, #100]	; 0x64
 801041c:	81c2      	strh	r2, [r0, #14]
 801041e:	6183      	str	r3, [r0, #24]
 8010420:	4619      	mov	r1, r3
 8010422:	2208      	movs	r2, #8
 8010424:	305c      	adds	r0, #92	; 0x5c
 8010426:	f7fd fd2d 	bl	800de84 <memset>
 801042a:	4b05      	ldr	r3, [pc, #20]	; (8010440 <std+0x38>)
 801042c:	6263      	str	r3, [r4, #36]	; 0x24
 801042e:	4b05      	ldr	r3, [pc, #20]	; (8010444 <std+0x3c>)
 8010430:	62a3      	str	r3, [r4, #40]	; 0x28
 8010432:	4b05      	ldr	r3, [pc, #20]	; (8010448 <std+0x40>)
 8010434:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010436:	4b05      	ldr	r3, [pc, #20]	; (801044c <std+0x44>)
 8010438:	6224      	str	r4, [r4, #32]
 801043a:	6323      	str	r3, [r4, #48]	; 0x30
 801043c:	bd10      	pop	{r4, pc}
 801043e:	bf00      	nop
 8010440:	0801074d 	.word	0x0801074d
 8010444:	0801076f 	.word	0x0801076f
 8010448:	080107a7 	.word	0x080107a7
 801044c:	080107cb 	.word	0x080107cb

08010450 <_cleanup_r>:
 8010450:	4901      	ldr	r1, [pc, #4]	; (8010458 <_cleanup_r+0x8>)
 8010452:	f000 b8af 	b.w	80105b4 <_fwalk_reent>
 8010456:	bf00      	nop
 8010458:	08010391 	.word	0x08010391

0801045c <__sfmoreglue>:
 801045c:	b570      	push	{r4, r5, r6, lr}
 801045e:	2268      	movs	r2, #104	; 0x68
 8010460:	1e4d      	subs	r5, r1, #1
 8010462:	4355      	muls	r5, r2
 8010464:	460e      	mov	r6, r1
 8010466:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801046a:	f7ff fc09 	bl	800fc80 <_malloc_r>
 801046e:	4604      	mov	r4, r0
 8010470:	b140      	cbz	r0, 8010484 <__sfmoreglue+0x28>
 8010472:	2100      	movs	r1, #0
 8010474:	e9c0 1600 	strd	r1, r6, [r0]
 8010478:	300c      	adds	r0, #12
 801047a:	60a0      	str	r0, [r4, #8]
 801047c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010480:	f7fd fd00 	bl	800de84 <memset>
 8010484:	4620      	mov	r0, r4
 8010486:	bd70      	pop	{r4, r5, r6, pc}

08010488 <__sfp_lock_acquire>:
 8010488:	4801      	ldr	r0, [pc, #4]	; (8010490 <__sfp_lock_acquire+0x8>)
 801048a:	f000 b8b3 	b.w	80105f4 <__retarget_lock_acquire_recursive>
 801048e:	bf00      	nop
 8010490:	20004c01 	.word	0x20004c01

08010494 <__sfp_lock_release>:
 8010494:	4801      	ldr	r0, [pc, #4]	; (801049c <__sfp_lock_release+0x8>)
 8010496:	f000 b8ae 	b.w	80105f6 <__retarget_lock_release_recursive>
 801049a:	bf00      	nop
 801049c:	20004c01 	.word	0x20004c01

080104a0 <__sinit_lock_acquire>:
 80104a0:	4801      	ldr	r0, [pc, #4]	; (80104a8 <__sinit_lock_acquire+0x8>)
 80104a2:	f000 b8a7 	b.w	80105f4 <__retarget_lock_acquire_recursive>
 80104a6:	bf00      	nop
 80104a8:	20004c02 	.word	0x20004c02

080104ac <__sinit_lock_release>:
 80104ac:	4801      	ldr	r0, [pc, #4]	; (80104b4 <__sinit_lock_release+0x8>)
 80104ae:	f000 b8a2 	b.w	80105f6 <__retarget_lock_release_recursive>
 80104b2:	bf00      	nop
 80104b4:	20004c02 	.word	0x20004c02

080104b8 <__sinit>:
 80104b8:	b510      	push	{r4, lr}
 80104ba:	4604      	mov	r4, r0
 80104bc:	f7ff fff0 	bl	80104a0 <__sinit_lock_acquire>
 80104c0:	69a3      	ldr	r3, [r4, #24]
 80104c2:	b11b      	cbz	r3, 80104cc <__sinit+0x14>
 80104c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104c8:	f7ff bff0 	b.w	80104ac <__sinit_lock_release>
 80104cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80104d0:	6523      	str	r3, [r4, #80]	; 0x50
 80104d2:	4b13      	ldr	r3, [pc, #76]	; (8010520 <__sinit+0x68>)
 80104d4:	4a13      	ldr	r2, [pc, #76]	; (8010524 <__sinit+0x6c>)
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80104da:	42a3      	cmp	r3, r4
 80104dc:	bf04      	itt	eq
 80104de:	2301      	moveq	r3, #1
 80104e0:	61a3      	streq	r3, [r4, #24]
 80104e2:	4620      	mov	r0, r4
 80104e4:	f000 f820 	bl	8010528 <__sfp>
 80104e8:	6060      	str	r0, [r4, #4]
 80104ea:	4620      	mov	r0, r4
 80104ec:	f000 f81c 	bl	8010528 <__sfp>
 80104f0:	60a0      	str	r0, [r4, #8]
 80104f2:	4620      	mov	r0, r4
 80104f4:	f000 f818 	bl	8010528 <__sfp>
 80104f8:	2200      	movs	r2, #0
 80104fa:	60e0      	str	r0, [r4, #12]
 80104fc:	2104      	movs	r1, #4
 80104fe:	6860      	ldr	r0, [r4, #4]
 8010500:	f7ff ff82 	bl	8010408 <std>
 8010504:	68a0      	ldr	r0, [r4, #8]
 8010506:	2201      	movs	r2, #1
 8010508:	2109      	movs	r1, #9
 801050a:	f7ff ff7d 	bl	8010408 <std>
 801050e:	68e0      	ldr	r0, [r4, #12]
 8010510:	2202      	movs	r2, #2
 8010512:	2112      	movs	r1, #18
 8010514:	f7ff ff78 	bl	8010408 <std>
 8010518:	2301      	movs	r3, #1
 801051a:	61a3      	str	r3, [r4, #24]
 801051c:	e7d2      	b.n	80104c4 <__sinit+0xc>
 801051e:	bf00      	nop
 8010520:	08010928 	.word	0x08010928
 8010524:	08010451 	.word	0x08010451

08010528 <__sfp>:
 8010528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801052a:	4607      	mov	r7, r0
 801052c:	f7ff ffac 	bl	8010488 <__sfp_lock_acquire>
 8010530:	4b1e      	ldr	r3, [pc, #120]	; (80105ac <__sfp+0x84>)
 8010532:	681e      	ldr	r6, [r3, #0]
 8010534:	69b3      	ldr	r3, [r6, #24]
 8010536:	b913      	cbnz	r3, 801053e <__sfp+0x16>
 8010538:	4630      	mov	r0, r6
 801053a:	f7ff ffbd 	bl	80104b8 <__sinit>
 801053e:	3648      	adds	r6, #72	; 0x48
 8010540:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010544:	3b01      	subs	r3, #1
 8010546:	d503      	bpl.n	8010550 <__sfp+0x28>
 8010548:	6833      	ldr	r3, [r6, #0]
 801054a:	b30b      	cbz	r3, 8010590 <__sfp+0x68>
 801054c:	6836      	ldr	r6, [r6, #0]
 801054e:	e7f7      	b.n	8010540 <__sfp+0x18>
 8010550:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010554:	b9d5      	cbnz	r5, 801058c <__sfp+0x64>
 8010556:	4b16      	ldr	r3, [pc, #88]	; (80105b0 <__sfp+0x88>)
 8010558:	60e3      	str	r3, [r4, #12]
 801055a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801055e:	6665      	str	r5, [r4, #100]	; 0x64
 8010560:	f000 f847 	bl	80105f2 <__retarget_lock_init_recursive>
 8010564:	f7ff ff96 	bl	8010494 <__sfp_lock_release>
 8010568:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801056c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010570:	6025      	str	r5, [r4, #0]
 8010572:	61a5      	str	r5, [r4, #24]
 8010574:	2208      	movs	r2, #8
 8010576:	4629      	mov	r1, r5
 8010578:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801057c:	f7fd fc82 	bl	800de84 <memset>
 8010580:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010584:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010588:	4620      	mov	r0, r4
 801058a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801058c:	3468      	adds	r4, #104	; 0x68
 801058e:	e7d9      	b.n	8010544 <__sfp+0x1c>
 8010590:	2104      	movs	r1, #4
 8010592:	4638      	mov	r0, r7
 8010594:	f7ff ff62 	bl	801045c <__sfmoreglue>
 8010598:	4604      	mov	r4, r0
 801059a:	6030      	str	r0, [r6, #0]
 801059c:	2800      	cmp	r0, #0
 801059e:	d1d5      	bne.n	801054c <__sfp+0x24>
 80105a0:	f7ff ff78 	bl	8010494 <__sfp_lock_release>
 80105a4:	230c      	movs	r3, #12
 80105a6:	603b      	str	r3, [r7, #0]
 80105a8:	e7ee      	b.n	8010588 <__sfp+0x60>
 80105aa:	bf00      	nop
 80105ac:	08010928 	.word	0x08010928
 80105b0:	ffff0001 	.word	0xffff0001

080105b4 <_fwalk_reent>:
 80105b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105b8:	4606      	mov	r6, r0
 80105ba:	4688      	mov	r8, r1
 80105bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80105c0:	2700      	movs	r7, #0
 80105c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80105c6:	f1b9 0901 	subs.w	r9, r9, #1
 80105ca:	d505      	bpl.n	80105d8 <_fwalk_reent+0x24>
 80105cc:	6824      	ldr	r4, [r4, #0]
 80105ce:	2c00      	cmp	r4, #0
 80105d0:	d1f7      	bne.n	80105c2 <_fwalk_reent+0xe>
 80105d2:	4638      	mov	r0, r7
 80105d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105d8:	89ab      	ldrh	r3, [r5, #12]
 80105da:	2b01      	cmp	r3, #1
 80105dc:	d907      	bls.n	80105ee <_fwalk_reent+0x3a>
 80105de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80105e2:	3301      	adds	r3, #1
 80105e4:	d003      	beq.n	80105ee <_fwalk_reent+0x3a>
 80105e6:	4629      	mov	r1, r5
 80105e8:	4630      	mov	r0, r6
 80105ea:	47c0      	blx	r8
 80105ec:	4307      	orrs	r7, r0
 80105ee:	3568      	adds	r5, #104	; 0x68
 80105f0:	e7e9      	b.n	80105c6 <_fwalk_reent+0x12>

080105f2 <__retarget_lock_init_recursive>:
 80105f2:	4770      	bx	lr

080105f4 <__retarget_lock_acquire_recursive>:
 80105f4:	4770      	bx	lr

080105f6 <__retarget_lock_release_recursive>:
 80105f6:	4770      	bx	lr

080105f8 <__swhatbuf_r>:
 80105f8:	b570      	push	{r4, r5, r6, lr}
 80105fa:	460e      	mov	r6, r1
 80105fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010600:	2900      	cmp	r1, #0
 8010602:	b096      	sub	sp, #88	; 0x58
 8010604:	4614      	mov	r4, r2
 8010606:	461d      	mov	r5, r3
 8010608:	da08      	bge.n	801061c <__swhatbuf_r+0x24>
 801060a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801060e:	2200      	movs	r2, #0
 8010610:	602a      	str	r2, [r5, #0]
 8010612:	061a      	lsls	r2, r3, #24
 8010614:	d410      	bmi.n	8010638 <__swhatbuf_r+0x40>
 8010616:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801061a:	e00e      	b.n	801063a <__swhatbuf_r+0x42>
 801061c:	466a      	mov	r2, sp
 801061e:	f000 f8fb 	bl	8010818 <_fstat_r>
 8010622:	2800      	cmp	r0, #0
 8010624:	dbf1      	blt.n	801060a <__swhatbuf_r+0x12>
 8010626:	9a01      	ldr	r2, [sp, #4]
 8010628:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801062c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010630:	425a      	negs	r2, r3
 8010632:	415a      	adcs	r2, r3
 8010634:	602a      	str	r2, [r5, #0]
 8010636:	e7ee      	b.n	8010616 <__swhatbuf_r+0x1e>
 8010638:	2340      	movs	r3, #64	; 0x40
 801063a:	2000      	movs	r0, #0
 801063c:	6023      	str	r3, [r4, #0]
 801063e:	b016      	add	sp, #88	; 0x58
 8010640:	bd70      	pop	{r4, r5, r6, pc}
	...

08010644 <__smakebuf_r>:
 8010644:	898b      	ldrh	r3, [r1, #12]
 8010646:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010648:	079d      	lsls	r5, r3, #30
 801064a:	4606      	mov	r6, r0
 801064c:	460c      	mov	r4, r1
 801064e:	d507      	bpl.n	8010660 <__smakebuf_r+0x1c>
 8010650:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010654:	6023      	str	r3, [r4, #0]
 8010656:	6123      	str	r3, [r4, #16]
 8010658:	2301      	movs	r3, #1
 801065a:	6163      	str	r3, [r4, #20]
 801065c:	b002      	add	sp, #8
 801065e:	bd70      	pop	{r4, r5, r6, pc}
 8010660:	ab01      	add	r3, sp, #4
 8010662:	466a      	mov	r2, sp
 8010664:	f7ff ffc8 	bl	80105f8 <__swhatbuf_r>
 8010668:	9900      	ldr	r1, [sp, #0]
 801066a:	4605      	mov	r5, r0
 801066c:	4630      	mov	r0, r6
 801066e:	f7ff fb07 	bl	800fc80 <_malloc_r>
 8010672:	b948      	cbnz	r0, 8010688 <__smakebuf_r+0x44>
 8010674:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010678:	059a      	lsls	r2, r3, #22
 801067a:	d4ef      	bmi.n	801065c <__smakebuf_r+0x18>
 801067c:	f023 0303 	bic.w	r3, r3, #3
 8010680:	f043 0302 	orr.w	r3, r3, #2
 8010684:	81a3      	strh	r3, [r4, #12]
 8010686:	e7e3      	b.n	8010650 <__smakebuf_r+0xc>
 8010688:	4b0d      	ldr	r3, [pc, #52]	; (80106c0 <__smakebuf_r+0x7c>)
 801068a:	62b3      	str	r3, [r6, #40]	; 0x28
 801068c:	89a3      	ldrh	r3, [r4, #12]
 801068e:	6020      	str	r0, [r4, #0]
 8010690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010694:	81a3      	strh	r3, [r4, #12]
 8010696:	9b00      	ldr	r3, [sp, #0]
 8010698:	6163      	str	r3, [r4, #20]
 801069a:	9b01      	ldr	r3, [sp, #4]
 801069c:	6120      	str	r0, [r4, #16]
 801069e:	b15b      	cbz	r3, 80106b8 <__smakebuf_r+0x74>
 80106a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80106a4:	4630      	mov	r0, r6
 80106a6:	f000 f8c9 	bl	801083c <_isatty_r>
 80106aa:	b128      	cbz	r0, 80106b8 <__smakebuf_r+0x74>
 80106ac:	89a3      	ldrh	r3, [r4, #12]
 80106ae:	f023 0303 	bic.w	r3, r3, #3
 80106b2:	f043 0301 	orr.w	r3, r3, #1
 80106b6:	81a3      	strh	r3, [r4, #12]
 80106b8:	89a0      	ldrh	r0, [r4, #12]
 80106ba:	4305      	orrs	r5, r0
 80106bc:	81a5      	strh	r5, [r4, #12]
 80106be:	e7cd      	b.n	801065c <__smakebuf_r+0x18>
 80106c0:	08010451 	.word	0x08010451

080106c4 <_raise_r>:
 80106c4:	291f      	cmp	r1, #31
 80106c6:	b538      	push	{r3, r4, r5, lr}
 80106c8:	4604      	mov	r4, r0
 80106ca:	460d      	mov	r5, r1
 80106cc:	d904      	bls.n	80106d8 <_raise_r+0x14>
 80106ce:	2316      	movs	r3, #22
 80106d0:	6003      	str	r3, [r0, #0]
 80106d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80106d6:	bd38      	pop	{r3, r4, r5, pc}
 80106d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80106da:	b112      	cbz	r2, 80106e2 <_raise_r+0x1e>
 80106dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80106e0:	b94b      	cbnz	r3, 80106f6 <_raise_r+0x32>
 80106e2:	4620      	mov	r0, r4
 80106e4:	f000 f830 	bl	8010748 <_getpid_r>
 80106e8:	462a      	mov	r2, r5
 80106ea:	4601      	mov	r1, r0
 80106ec:	4620      	mov	r0, r4
 80106ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106f2:	f000 b817 	b.w	8010724 <_kill_r>
 80106f6:	2b01      	cmp	r3, #1
 80106f8:	d00a      	beq.n	8010710 <_raise_r+0x4c>
 80106fa:	1c59      	adds	r1, r3, #1
 80106fc:	d103      	bne.n	8010706 <_raise_r+0x42>
 80106fe:	2316      	movs	r3, #22
 8010700:	6003      	str	r3, [r0, #0]
 8010702:	2001      	movs	r0, #1
 8010704:	e7e7      	b.n	80106d6 <_raise_r+0x12>
 8010706:	2400      	movs	r4, #0
 8010708:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801070c:	4628      	mov	r0, r5
 801070e:	4798      	blx	r3
 8010710:	2000      	movs	r0, #0
 8010712:	e7e0      	b.n	80106d6 <_raise_r+0x12>

08010714 <raise>:
 8010714:	4b02      	ldr	r3, [pc, #8]	; (8010720 <raise+0xc>)
 8010716:	4601      	mov	r1, r0
 8010718:	6818      	ldr	r0, [r3, #0]
 801071a:	f7ff bfd3 	b.w	80106c4 <_raise_r>
 801071e:	bf00      	nop
 8010720:	20002858 	.word	0x20002858

08010724 <_kill_r>:
 8010724:	b538      	push	{r3, r4, r5, lr}
 8010726:	4d07      	ldr	r5, [pc, #28]	; (8010744 <_kill_r+0x20>)
 8010728:	2300      	movs	r3, #0
 801072a:	4604      	mov	r4, r0
 801072c:	4608      	mov	r0, r1
 801072e:	4611      	mov	r1, r2
 8010730:	602b      	str	r3, [r5, #0]
 8010732:	f7f1 f9ed 	bl	8001b10 <_kill>
 8010736:	1c43      	adds	r3, r0, #1
 8010738:	d102      	bne.n	8010740 <_kill_r+0x1c>
 801073a:	682b      	ldr	r3, [r5, #0]
 801073c:	b103      	cbz	r3, 8010740 <_kill_r+0x1c>
 801073e:	6023      	str	r3, [r4, #0]
 8010740:	bd38      	pop	{r3, r4, r5, pc}
 8010742:	bf00      	nop
 8010744:	20004bfc 	.word	0x20004bfc

08010748 <_getpid_r>:
 8010748:	f7f1 b9da 	b.w	8001b00 <_getpid>

0801074c <__sread>:
 801074c:	b510      	push	{r4, lr}
 801074e:	460c      	mov	r4, r1
 8010750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010754:	f000 f894 	bl	8010880 <_read_r>
 8010758:	2800      	cmp	r0, #0
 801075a:	bfab      	itete	ge
 801075c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801075e:	89a3      	ldrhlt	r3, [r4, #12]
 8010760:	181b      	addge	r3, r3, r0
 8010762:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010766:	bfac      	ite	ge
 8010768:	6563      	strge	r3, [r4, #84]	; 0x54
 801076a:	81a3      	strhlt	r3, [r4, #12]
 801076c:	bd10      	pop	{r4, pc}

0801076e <__swrite>:
 801076e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010772:	461f      	mov	r7, r3
 8010774:	898b      	ldrh	r3, [r1, #12]
 8010776:	05db      	lsls	r3, r3, #23
 8010778:	4605      	mov	r5, r0
 801077a:	460c      	mov	r4, r1
 801077c:	4616      	mov	r6, r2
 801077e:	d505      	bpl.n	801078c <__swrite+0x1e>
 8010780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010784:	2302      	movs	r3, #2
 8010786:	2200      	movs	r2, #0
 8010788:	f000 f868 	bl	801085c <_lseek_r>
 801078c:	89a3      	ldrh	r3, [r4, #12]
 801078e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010792:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010796:	81a3      	strh	r3, [r4, #12]
 8010798:	4632      	mov	r2, r6
 801079a:	463b      	mov	r3, r7
 801079c:	4628      	mov	r0, r5
 801079e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80107a2:	f000 b817 	b.w	80107d4 <_write_r>

080107a6 <__sseek>:
 80107a6:	b510      	push	{r4, lr}
 80107a8:	460c      	mov	r4, r1
 80107aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107ae:	f000 f855 	bl	801085c <_lseek_r>
 80107b2:	1c43      	adds	r3, r0, #1
 80107b4:	89a3      	ldrh	r3, [r4, #12]
 80107b6:	bf15      	itete	ne
 80107b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80107ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80107be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80107c2:	81a3      	strheq	r3, [r4, #12]
 80107c4:	bf18      	it	ne
 80107c6:	81a3      	strhne	r3, [r4, #12]
 80107c8:	bd10      	pop	{r4, pc}

080107ca <__sclose>:
 80107ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107ce:	f000 b813 	b.w	80107f8 <_close_r>
	...

080107d4 <_write_r>:
 80107d4:	b538      	push	{r3, r4, r5, lr}
 80107d6:	4d07      	ldr	r5, [pc, #28]	; (80107f4 <_write_r+0x20>)
 80107d8:	4604      	mov	r4, r0
 80107da:	4608      	mov	r0, r1
 80107dc:	4611      	mov	r1, r2
 80107de:	2200      	movs	r2, #0
 80107e0:	602a      	str	r2, [r5, #0]
 80107e2:	461a      	mov	r2, r3
 80107e4:	f7f1 f9cb 	bl	8001b7e <_write>
 80107e8:	1c43      	adds	r3, r0, #1
 80107ea:	d102      	bne.n	80107f2 <_write_r+0x1e>
 80107ec:	682b      	ldr	r3, [r5, #0]
 80107ee:	b103      	cbz	r3, 80107f2 <_write_r+0x1e>
 80107f0:	6023      	str	r3, [r4, #0]
 80107f2:	bd38      	pop	{r3, r4, r5, pc}
 80107f4:	20004bfc 	.word	0x20004bfc

080107f8 <_close_r>:
 80107f8:	b538      	push	{r3, r4, r5, lr}
 80107fa:	4d06      	ldr	r5, [pc, #24]	; (8010814 <_close_r+0x1c>)
 80107fc:	2300      	movs	r3, #0
 80107fe:	4604      	mov	r4, r0
 8010800:	4608      	mov	r0, r1
 8010802:	602b      	str	r3, [r5, #0]
 8010804:	f7f1 f9d7 	bl	8001bb6 <_close>
 8010808:	1c43      	adds	r3, r0, #1
 801080a:	d102      	bne.n	8010812 <_close_r+0x1a>
 801080c:	682b      	ldr	r3, [r5, #0]
 801080e:	b103      	cbz	r3, 8010812 <_close_r+0x1a>
 8010810:	6023      	str	r3, [r4, #0]
 8010812:	bd38      	pop	{r3, r4, r5, pc}
 8010814:	20004bfc 	.word	0x20004bfc

08010818 <_fstat_r>:
 8010818:	b538      	push	{r3, r4, r5, lr}
 801081a:	4d07      	ldr	r5, [pc, #28]	; (8010838 <_fstat_r+0x20>)
 801081c:	2300      	movs	r3, #0
 801081e:	4604      	mov	r4, r0
 8010820:	4608      	mov	r0, r1
 8010822:	4611      	mov	r1, r2
 8010824:	602b      	str	r3, [r5, #0]
 8010826:	f7f1 f9d2 	bl	8001bce <_fstat>
 801082a:	1c43      	adds	r3, r0, #1
 801082c:	d102      	bne.n	8010834 <_fstat_r+0x1c>
 801082e:	682b      	ldr	r3, [r5, #0]
 8010830:	b103      	cbz	r3, 8010834 <_fstat_r+0x1c>
 8010832:	6023      	str	r3, [r4, #0]
 8010834:	bd38      	pop	{r3, r4, r5, pc}
 8010836:	bf00      	nop
 8010838:	20004bfc 	.word	0x20004bfc

0801083c <_isatty_r>:
 801083c:	b538      	push	{r3, r4, r5, lr}
 801083e:	4d06      	ldr	r5, [pc, #24]	; (8010858 <_isatty_r+0x1c>)
 8010840:	2300      	movs	r3, #0
 8010842:	4604      	mov	r4, r0
 8010844:	4608      	mov	r0, r1
 8010846:	602b      	str	r3, [r5, #0]
 8010848:	f7f1 f9d1 	bl	8001bee <_isatty>
 801084c:	1c43      	adds	r3, r0, #1
 801084e:	d102      	bne.n	8010856 <_isatty_r+0x1a>
 8010850:	682b      	ldr	r3, [r5, #0]
 8010852:	b103      	cbz	r3, 8010856 <_isatty_r+0x1a>
 8010854:	6023      	str	r3, [r4, #0]
 8010856:	bd38      	pop	{r3, r4, r5, pc}
 8010858:	20004bfc 	.word	0x20004bfc

0801085c <_lseek_r>:
 801085c:	b538      	push	{r3, r4, r5, lr}
 801085e:	4d07      	ldr	r5, [pc, #28]	; (801087c <_lseek_r+0x20>)
 8010860:	4604      	mov	r4, r0
 8010862:	4608      	mov	r0, r1
 8010864:	4611      	mov	r1, r2
 8010866:	2200      	movs	r2, #0
 8010868:	602a      	str	r2, [r5, #0]
 801086a:	461a      	mov	r2, r3
 801086c:	f7f1 f9ca 	bl	8001c04 <_lseek>
 8010870:	1c43      	adds	r3, r0, #1
 8010872:	d102      	bne.n	801087a <_lseek_r+0x1e>
 8010874:	682b      	ldr	r3, [r5, #0]
 8010876:	b103      	cbz	r3, 801087a <_lseek_r+0x1e>
 8010878:	6023      	str	r3, [r4, #0]
 801087a:	bd38      	pop	{r3, r4, r5, pc}
 801087c:	20004bfc 	.word	0x20004bfc

08010880 <_read_r>:
 8010880:	b538      	push	{r3, r4, r5, lr}
 8010882:	4d07      	ldr	r5, [pc, #28]	; (80108a0 <_read_r+0x20>)
 8010884:	4604      	mov	r4, r0
 8010886:	4608      	mov	r0, r1
 8010888:	4611      	mov	r1, r2
 801088a:	2200      	movs	r2, #0
 801088c:	602a      	str	r2, [r5, #0]
 801088e:	461a      	mov	r2, r3
 8010890:	f7f1 f958 	bl	8001b44 <_read>
 8010894:	1c43      	adds	r3, r0, #1
 8010896:	d102      	bne.n	801089e <_read_r+0x1e>
 8010898:	682b      	ldr	r3, [r5, #0]
 801089a:	b103      	cbz	r3, 801089e <_read_r+0x1e>
 801089c:	6023      	str	r3, [r4, #0]
 801089e:	bd38      	pop	{r3, r4, r5, pc}
 80108a0:	20004bfc 	.word	0x20004bfc

080108a4 <_init>:
 80108a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108a6:	bf00      	nop
 80108a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108aa:	bc08      	pop	{r3}
 80108ac:	469e      	mov	lr, r3
 80108ae:	4770      	bx	lr

080108b0 <_fini>:
 80108b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108b2:	bf00      	nop
 80108b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108b6:	bc08      	pop	{r3}
 80108b8:	469e      	mov	lr, r3
 80108ba:	4770      	bx	lr
