
radar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c98  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  08010e78  08010e78  00020e78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011344  08011344  00032a28  2**0
                  CONTENTS
  4 .ARM          00000000  08011344  08011344  00032a28  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011344  08011344  00032a28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011344  08011344  00021344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011348  08011348  00021348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002a28  20000000  0801134c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d2c  20002a28  08013d74  00032a28  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004754  08013d74  00034754  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00032a28  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002caf5  00000000  00000000  00032a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c67  00000000  00000000  0005f54d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002708  00000000  00000000  000641b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000024e0  00000000  00000000  000668c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028681  00000000  00000000  00068da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a287  00000000  00000000  00091421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcf4b  00000000  00000000  000bb6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b85f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b9a4  00000000  00000000  001b8644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20002a28 	.word	0x20002a28
 80001fc:	00000000 	.word	0x00000000
 8000200:	08010e60 	.word	0x08010e60

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20002a2c 	.word	0x20002a2c
 800021c:	08010e60 	.word	0x08010e60

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <lsm6dsl_read_reg>:
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b087      	sub	sp, #28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	607a      	str	r2, [r7, #4]
 8000c02:	461a      	mov	r2, r3
 8000c04:	460b      	mov	r3, r1
 8000c06:	72fb      	strb	r3, [r7, #11]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	813b      	strh	r3, [r7, #8]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	685c      	ldr	r4, [r3, #4]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	68d8      	ldr	r0, [r3, #12]
 8000c14:	893b      	ldrh	r3, [r7, #8]
 8000c16:	7af9      	ldrb	r1, [r7, #11]
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	47a0      	blx	r4
 8000c1c:	6178      	str	r0, [r7, #20]
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	4618      	mov	r0, r3
 8000c22:	371c      	adds	r7, #28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd90      	pop	{r4, r7, pc}

08000c28 <lsm6dsl_device_id_get>:
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
 8000c32:	2301      	movs	r3, #1
 8000c34:	683a      	ldr	r2, [r7, #0]
 8000c36:	210f      	movs	r1, #15
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff ffdd 	bl	8000bf8 <lsm6dsl_read_reg>
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4618      	mov	r0, r3
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c4c:	b5b0      	push	{r4, r5, r7, lr}
 8000c4e:	b08e      	sub	sp, #56	; 0x38
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
input_received_flag = 0;
 8000c52:	4b32      	ldr	r3, [pc, #200]	; (8000d1c <main+0xd0>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
uint8_t message2[] ="message in";
 8000c58:	4a31      	ldr	r2, [pc, #196]	; (8000d20 <main+0xd4>)
 8000c5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c60:	c303      	stmia	r3!, {r0, r1}
 8000c62:	801a      	strh	r2, [r3, #0]
 8000c64:	3302      	adds	r3, #2
 8000c66:	0c12      	lsrs	r2, r2, #16
 8000c68:	701a      	strb	r2, [r3, #0]
uint8_t lsm6dslError[] ="LSM6DSL whoAmI error";
 8000c6a:	4b2e      	ldr	r3, [pc, #184]	; (8000d24 <main+0xd8>)
 8000c6c:	f107 0414 	add.w	r4, r7, #20
 8000c70:	461d      	mov	r5, r3
 8000c72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c76:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c7a:	6020      	str	r0, [r4, #0]
 8000c7c:	3404      	adds	r4, #4
 8000c7e:	7021      	strb	r1, [r4, #0]
//uint8_t


// initialize command struct
control user_input;
user_input.mode_instructed = 'r'; // r:range, s:speed
 8000c80:	2372      	movs	r3, #114	; 0x72
 8000c82:	74bb      	strb	r3, [r7, #18]
user_input.mode_running = 'x'; // x:none
 8000c84:	2378      	movs	r3, #120	; 0x78
 8000c86:	74fb      	strb	r3, [r7, #19]
user_input.run_time_sec=0; // length of time in seconds to operate
 8000c88:	2300      	movs	r3, #0
 8000c8a:	823b      	strh	r3, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c8c:	f001 f979 	bl	8001f82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c90:	f000 f85a 	bl	8000d48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c94:	f000 fb1c 	bl	80012d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c98:	f000 fadc 	bl	8001254 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c9c:	f000 f89e 	bl	8000ddc <MX_ADC1_Init>
  MX_DAC1_Init();
 8000ca0:	f000 f922 	bl	8000ee8 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000ca4:	f000 fa88 	bl	80011b8 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000ca8:	f000 f998 	bl	8000fdc <MX_SPI1_Init>
  MX_USB_Device_Init();
 8000cac:	f00c fe08 	bl	800d8c0 <MX_USB_Device_Init>
  MX_TIM1_Init();
 8000cb0:	f000 f9d2 	bl	8001058 <MX_TIM1_Init>
  MX_I2C2_Init();
 8000cb4:	f000 f952 	bl	8000f5c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  set_VCO_input_DAC(&user_input); // starts timer and sets dac output used for VCO
 8000cb8:	f107 0310 	add.w	r3, r7, #16
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 fd8b 	bl	80017d8 <set_VCO_input_DAC>
  HAL_TIM_Base_Start(&htim1); // start timer 1 for adc1 conversion for radar mixer o/p
 8000cc2:	4819      	ldr	r0, [pc, #100]	; (8000d28 <main+0xdc>)
 8000cc4:	f007 fd5c 	bl	8008780 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3); // sets output compare for timer1, sets PA10 to toggle on timer1 register reload (40kHz)
 8000cc8:	2108      	movs	r1, #8
 8000cca:	4817      	ldr	r0, [pc, #92]	; (8000d28 <main+0xdc>)
 8000ccc:	f007 fe50 	bl	8008970 <HAL_TIM_OC_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_dma_buf_mixer_out, DMA_BUF_LEN); // start the adc with dma
 8000cd0:	2240      	movs	r2, #64	; 0x40
 8000cd2:	4916      	ldr	r1, [pc, #88]	; (8000d2c <main+0xe0>)
 8000cd4:	4816      	ldr	r0, [pc, #88]	; (8000d30 <main+0xe4>)
 8000cd6:	f001 fdcb 	bl	8002870 <HAL_ADC_Start_DMA>

//  HAL_I2C_Master_Transmit(&hi2c2, DIGITAL_POT_ADDR, buf, 1, HAL_MAX_DELAY);

  /* initialize accelerometer/gyroscope on lsm6dsl */
  stmdev_ctx_t dev_ctx;
  dev_ctx.write_reg = platform_write;
 8000cda:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <main+0xe8>)
 8000cdc:	603b      	str	r3, [r7, #0]
  dev_ctx.read_reg = platform_read;
 8000cde:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <main+0xec>)
 8000ce0:	607b      	str	r3, [r7, #4]
  dev_ctx.handle = &hspi1;
 8000ce2:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <main+0xf0>)
 8000ce4:	60fb      	str	r3, [r7, #12]
  /* Check device ID */
    whoamI = 0;
 8000ce6:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <main+0xf4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
    lsm6dsl_device_id_get(&dev_ctx, &whoamI);
 8000cec:	463b      	mov	r3, r7
 8000cee:	4914      	ldr	r1, [pc, #80]	; (8000d40 <main+0xf4>)
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff99 	bl	8000c28 <lsm6dsl_device_id_get>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (input_received_flag)
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <main+0xd0>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d0fb      	beq.n	8000cf6 <main+0xaa>
	  {
	 	    	process_input(&UserRxBufferFS,&user_input);
 8000cfe:	f107 0310 	add.w	r3, r7, #16
 8000d02:	4619      	mov	r1, r3
 8000d04:	480f      	ldr	r0, [pc, #60]	; (8000d44 <main+0xf8>)
 8000d06:	f000 fc19 	bl	800153c <process_input>
	 	    	set_VCO_input_DAC(&user_input);
 8000d0a:	f107 0310 	add.w	r3, r7, #16
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 fd62 	bl	80017d8 <set_VCO_input_DAC>
	 	    	//perform_trial(&user_input);
	 	        input_received_flag=0;
 8000d14:	4b01      	ldr	r3, [pc, #4]	; (8000d1c <main+0xd0>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
	  if (input_received_flag)
 8000d1a:	e7ec      	b.n	8000cf6 <main+0xaa>
 8000d1c:	2000402c 	.word	0x2000402c
 8000d20:	08010e78 	.word	0x08010e78
 8000d24:	08010e84 	.word	0x08010e84
 8000d28:	20002c34 	.word	0x20002c34
 8000d2c:	20002ccc 	.word	0x20002ccc
 8000d30:	20002a44 	.word	0x20002a44
 8000d34:	080013d1 	.word	0x080013d1
 8000d38:	0800142d 	.word	0x0800142d
 8000d3c:	20002bd0 	.word	0x20002bd0
 8000d40:	20002d4c 	.word	0x20002d4c
 8000d44:	2000302c 	.word	0x2000302c

08000d48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b094      	sub	sp, #80	; 0x50
 8000d4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4e:	f107 0318 	add.w	r3, r7, #24
 8000d52:	2238      	movs	r2, #56	; 0x38
 8000d54:	2100      	movs	r1, #0
 8000d56:	4618      	mov	r0, r3
 8000d58:	f00d faec 	bl	800e334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d6a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d6e:	f005 fd3d 	bl	80067ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d72:	2301      	movs	r3, #1
 8000d74:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d80:	2303      	movs	r3, #3
 8000d82:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000d84:	2301      	movs	r3, #1
 8000d86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000d88:	230c      	movs	r3, #12
 8000d8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV12;
 8000d8c:	230c      	movs	r3, #12
 8000d8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000d90:	2304      	movs	r3, #4
 8000d92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d94:	2302      	movs	r3, #2
 8000d96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d98:	f107 0318 	add.w	r3, r7, #24
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f005 fdc9 	bl	8006934 <HAL_RCC_OscConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000da8:	f000 fd62 	bl	8001870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dac:	230f      	movs	r3, #15
 8000dae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db0:	2303      	movs	r3, #3
 8000db2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2103      	movs	r1, #3
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f006 f8cd 	bl	8006f64 <HAL_RCC_ClockConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000dd0:	f000 fd4e 	bl	8001870 <Error_Handler>
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	3750      	adds	r7, #80	; 0x50
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08c      	sub	sp, #48	; 0x30
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	2220      	movs	r2, #32
 8000df2:	2100      	movs	r1, #0
 8000df4:	4618      	mov	r0, r3
 8000df6:	f00d fa9d 	bl	800e334 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dfa:	4b39      	ldr	r3, [pc, #228]	; (8000ee0 <MX_ADC1_Init+0x104>)
 8000dfc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e00:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e02:	4b37      	ldr	r3, [pc, #220]	; (8000ee0 <MX_ADC1_Init+0x104>)
 8000e04:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e08:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e0a:	4b35      	ldr	r3, [pc, #212]	; (8000ee0 <MX_ADC1_Init+0x104>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e10:	4b33      	ldr	r3, [pc, #204]	; (8000ee0 <MX_ADC1_Init+0x104>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e16:	4b32      	ldr	r3, [pc, #200]	; (8000ee0 <MX_ADC1_Init+0x104>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e1c:	4b30      	ldr	r3, [pc, #192]	; (8000ee0 <MX_ADC1_Init+0x104>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e22:	4b2f      	ldr	r3, [pc, #188]	; (8000ee0 <MX_ADC1_Init+0x104>)
 8000e24:	2204      	movs	r2, #4
 8000e26:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e28:	4b2d      	ldr	r3, [pc, #180]	; (8000ee0 <MX_ADC1_Init+0x104>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e2e:	4b2c      	ldr	r3, [pc, #176]	; (8000ee0 <MX_ADC1_Init+0x104>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000e34:	4b2a      	ldr	r3, [pc, #168]	; (8000ee0 <MX_ADC1_Init+0x104>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e3a:	4b29      	ldr	r3, [pc, #164]	; (8000ee0 <MX_ADC1_Init+0x104>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000e42:	4b27      	ldr	r3, [pc, #156]	; (8000ee0 <MX_ADC1_Init+0x104>)
 8000e44:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000e48:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e4a:	4b25      	ldr	r3, [pc, #148]	; (8000ee0 <MX_ADC1_Init+0x104>)
 8000e4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e50:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e52:	4b23      	ldr	r3, [pc, #140]	; (8000ee0 <MX_ADC1_Init+0x104>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e5a:	4b21      	ldr	r3, [pc, #132]	; (8000ee0 <MX_ADC1_Init+0x104>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8000e60:	4b1f      	ldr	r3, [pc, #124]	; (8000ee0 <MX_ADC1_Init+0x104>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000e68:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <MX_ADC1_Init+0x104>)
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8000e6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <MX_ADC1_Init+0x104>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000e74:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <MX_ADC1_Init+0x104>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000e7a:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <MX_ADC1_Init+0x104>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e80:	4817      	ldr	r0, [pc, #92]	; (8000ee0 <MX_ADC1_Init+0x104>)
 8000e82:	f001 fb33 	bl	80024ec <HAL_ADC_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000e8c:	f000 fcf0 	bl	8001870 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e90:	2300      	movs	r3, #0
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4811      	ldr	r0, [pc, #68]	; (8000ee0 <MX_ADC1_Init+0x104>)
 8000e9c:	f002 fb22 	bl	80034e4 <HAL_ADCEx_MultiModeConfigChannel>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000ea6:	f000 fce3 	bl	8001870 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_ADC1_Init+0x108>)
 8000eac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eae:	2306      	movs	r3, #6
 8000eb0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eb6:	237f      	movs	r3, #127	; 0x7f
 8000eb8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000eba:	2304      	movs	r3, #4
 8000ebc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <MX_ADC1_Init+0x104>)
 8000ec8:	f001 fdb0 	bl	8002a2c <HAL_ADC_ConfigChannel>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000ed2:	f000 fccd 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	3730      	adds	r7, #48	; 0x30
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20002a44 	.word	0x20002a44
 8000ee4:	04300002 	.word	0x04300002

08000ee8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08c      	sub	sp, #48	; 0x30
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000eee:	463b      	mov	r3, r7
 8000ef0:	2230      	movs	r2, #48	; 0x30
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f00d fa1d 	bl	800e334 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000efa:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <MX_DAC1_Init+0x6c>)
 8000efc:	4a16      	ldr	r2, [pc, #88]	; (8000f58 <MX_DAC1_Init+0x70>)
 8000efe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000f00:	4814      	ldr	r0, [pc, #80]	; (8000f54 <MX_DAC1_Init+0x6c>)
 8000f02:	f002 fd06 	bl	8003912 <HAL_DAC_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000f0c:	f000 fcb0 	bl	8001870 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000f10:	2302      	movs	r3, #2
 8000f12:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000f20:	2312      	movs	r3, #18
 8000f22:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f34:	463b      	mov	r3, r7
 8000f36:	2200      	movs	r2, #0
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4806      	ldr	r0, [pc, #24]	; (8000f54 <MX_DAC1_Init+0x6c>)
 8000f3c:	f002 fedc 	bl	8003cf8 <HAL_DAC_ConfigChannel>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000f46:	f000 fc93 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	3730      	adds	r7, #48	; 0x30
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20002b10 	.word	0x20002b10
 8000f58:	50000800 	.word	0x50000800

08000f5c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f60:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <MX_I2C2_Init+0x74>)
 8000f62:	4a1c      	ldr	r2, [pc, #112]	; (8000fd4 <MX_I2C2_Init+0x78>)
 8000f64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10B0DCFB;
 8000f66:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <MX_I2C2_Init+0x74>)
 8000f68:	4a1b      	ldr	r2, [pc, #108]	; (8000fd8 <MX_I2C2_Init+0x7c>)
 8000f6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000f6c:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <MX_I2C2_Init+0x74>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <MX_I2C2_Init+0x74>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <MX_I2C2_Init+0x74>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000f7e:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <MX_I2C2_Init+0x74>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <MX_I2C2_Init+0x74>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <MX_I2C2_Init+0x74>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f90:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <MX_I2C2_Init+0x74>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f96:	480e      	ldr	r0, [pc, #56]	; (8000fd0 <MX_I2C2_Init+0x74>)
 8000f98:	f003 fdcf 	bl	8004b3a <HAL_I2C_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000fa2:	f000 fc65 	bl	8001870 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4809      	ldr	r0, [pc, #36]	; (8000fd0 <MX_I2C2_Init+0x74>)
 8000faa:	f003 fe55 	bl	8004c58 <HAL_I2CEx_ConfigAnalogFilter>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000fb4:	f000 fc5c 	bl	8001870 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <MX_I2C2_Init+0x74>)
 8000fbc:	f003 fe97 	bl	8004cee <HAL_I2CEx_ConfigDigitalFilter>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000fc6:	f000 fc53 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20002b84 	.word	0x20002b84
 8000fd4:	40005800 	.word	0x40005800
 8000fd8:	10b0dcfb 	.word	0x10b0dcfb

08000fdc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <MX_SPI1_Init+0x74>)
 8000fe2:	4a1c      	ldr	r2, [pc, #112]	; (8001054 <MX_SPI1_Init+0x78>)
 8000fe4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <MX_SPI1_Init+0x74>)
 8000fe8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fee:	4b18      	ldr	r3, [pc, #96]	; (8001050 <MX_SPI1_Init+0x74>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ff4:	4b16      	ldr	r3, [pc, #88]	; (8001050 <MX_SPI1_Init+0x74>)
 8000ff6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ffa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_SPI1_Init+0x74>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001002:	4b13      	ldr	r3, [pc, #76]	; (8001050 <MX_SPI1_Init+0x74>)
 8001004:	2200      	movs	r2, #0
 8001006:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_SPI1_Init+0x74>)
 800100a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800100e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <MX_SPI1_Init+0x74>)
 8001012:	2220      	movs	r2, #32
 8001014:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <MX_SPI1_Init+0x74>)
 8001018:	2200      	movs	r2, #0
 800101a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <MX_SPI1_Init+0x74>)
 800101e:	2200      	movs	r2, #0
 8001020:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <MX_SPI1_Init+0x74>)
 8001024:	2200      	movs	r2, #0
 8001026:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <MX_SPI1_Init+0x74>)
 800102a:	2207      	movs	r2, #7
 800102c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <MX_SPI1_Init+0x74>)
 8001030:	2200      	movs	r2, #0
 8001032:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <MX_SPI1_Init+0x74>)
 8001036:	2200      	movs	r2, #0
 8001038:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <MX_SPI1_Init+0x74>)
 800103c:	f006 fbcc 	bl	80077d8 <HAL_SPI_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001046:	f000 fc13 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20002bd0 	.word	0x20002bd0
 8001054:	40013000 	.word	0x40013000

08001058 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b09c      	sub	sp, #112	; 0x70
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800105e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800106c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001078:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
 8001088:	615a      	str	r2, [r3, #20]
 800108a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	2234      	movs	r2, #52	; 0x34
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f00d f94e 	bl	800e334 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001098:	4b45      	ldr	r3, [pc, #276]	; (80011b0 <MX_TIM1_Init+0x158>)
 800109a:	4a46      	ldr	r2, [pc, #280]	; (80011b4 <MX_TIM1_Init+0x15c>)
 800109c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800109e:	4b44      	ldr	r3, [pc, #272]	; (80011b0 <MX_TIM1_Init+0x158>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a4:	4b42      	ldr	r3, [pc, #264]	; (80011b0 <MX_TIM1_Init+0x158>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1199;
 80010aa:	4b41      	ldr	r3, [pc, #260]	; (80011b0 <MX_TIM1_Init+0x158>)
 80010ac:	f240 42af 	movw	r2, #1199	; 0x4af
 80010b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b2:	4b3f      	ldr	r3, [pc, #252]	; (80011b0 <MX_TIM1_Init+0x158>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010b8:	4b3d      	ldr	r3, [pc, #244]	; (80011b0 <MX_TIM1_Init+0x158>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010be:	4b3c      	ldr	r3, [pc, #240]	; (80011b0 <MX_TIM1_Init+0x158>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010c4:	483a      	ldr	r0, [pc, #232]	; (80011b0 <MX_TIM1_Init+0x158>)
 80010c6:	f007 fb03 	bl	80086d0 <HAL_TIM_Base_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80010d0:	f000 fbce 	bl	8001870 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010da:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010de:	4619      	mov	r1, r3
 80010e0:	4833      	ldr	r0, [pc, #204]	; (80011b0 <MX_TIM1_Init+0x158>)
 80010e2:	f007 fdd1 	bl	8008c88 <HAL_TIM_ConfigClockSource>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80010ec:	f000 fbc0 	bl	8001870 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80010f0:	482f      	ldr	r0, [pc, #188]	; (80011b0 <MX_TIM1_Init+0x158>)
 80010f2:	f007 fbdc 	bl	80088ae <HAL_TIM_OC_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80010fc:	f000 fbb8 	bl	8001870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001100:	2320      	movs	r3, #32
 8001102:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001104:	2300      	movs	r3, #0
 8001106:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001108:	2300      	movs	r3, #0
 800110a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800110c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001110:	4619      	mov	r1, r3
 8001112:	4827      	ldr	r0, [pc, #156]	; (80011b0 <MX_TIM1_Init+0x158>)
 8001114:	f008 fb58 	bl	80097c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800111e:	f000 fba7 	bl	8001870 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001122:	2330      	movs	r3, #48	; 0x30
 8001124:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800112a:	2300      	movs	r3, #0
 800112c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800112e:	2300      	movs	r3, #0
 8001130:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001136:	2300      	movs	r3, #0
 8001138:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800113a:	2300      	movs	r3, #0
 800113c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800113e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001142:	2208      	movs	r2, #8
 8001144:	4619      	mov	r1, r3
 8001146:	481a      	ldr	r0, [pc, #104]	; (80011b0 <MX_TIM1_Init+0x158>)
 8001148:	f007 fd24 	bl	8008b94 <HAL_TIM_OC_ConfigChannel>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001152:	f000 fb8d 	bl	8001870 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800116a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800116e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001174:	2300      	movs	r3, #0
 8001176:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800117c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001186:	2300      	movs	r3, #0
 8001188:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800118a:	2300      	movs	r3, #0
 800118c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	4619      	mov	r1, r3
 8001192:	4807      	ldr	r0, [pc, #28]	; (80011b0 <MX_TIM1_Init+0x158>)
 8001194:	f008 fbae 	bl	80098f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800119e:	f000 fb67 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011a2:	4803      	ldr	r0, [pc, #12]	; (80011b0 <MX_TIM1_Init+0x158>)
 80011a4:	f000 fd54 	bl	8001c50 <HAL_TIM_MspPostInit>

}
 80011a8:	bf00      	nop
 80011aa:	3770      	adds	r7, #112	; 0x70
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20002c34 	.word	0x20002c34
 80011b4:	40012c00 	.word	0x40012c00

080011b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011be:	f107 0310 	add.w	r3, r7, #16
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011d6:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <MX_TIM2_Init+0x98>)
 80011d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011de:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <MX_TIM2_Init+0x98>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e4:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <MX_TIM2_Init+0x98>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1543;
 80011ea:	4b19      	ldr	r3, [pc, #100]	; (8001250 <MX_TIM2_Init+0x98>)
 80011ec:	f240 6207 	movw	r2, #1543	; 0x607
 80011f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f2:	4b17      	ldr	r3, [pc, #92]	; (8001250 <MX_TIM2_Init+0x98>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f8:	4b15      	ldr	r3, [pc, #84]	; (8001250 <MX_TIM2_Init+0x98>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011fe:	4814      	ldr	r0, [pc, #80]	; (8001250 <MX_TIM2_Init+0x98>)
 8001200:	f007 fa66 	bl	80086d0 <HAL_TIM_Base_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800120a:	f000 fb31 	bl	8001870 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800120e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001212:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	4619      	mov	r1, r3
 800121a:	480d      	ldr	r0, [pc, #52]	; (8001250 <MX_TIM2_Init+0x98>)
 800121c:	f007 fd34 	bl	8008c88 <HAL_TIM_ConfigClockSource>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001226:	f000 fb23 	bl	8001870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800122a:	2320      	movs	r3, #32
 800122c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	4619      	mov	r1, r3
 8001236:	4806      	ldr	r0, [pc, #24]	; (8001250 <MX_TIM2_Init+0x98>)
 8001238:	f008 fac6 	bl	80097c8 <HAL_TIMEx_MasterConfigSynchronization>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001242:	f000 fb15 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001246:	bf00      	nop
 8001248:	3720      	adds	r7, #32
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20002c80 	.word	0x20002c80

08001254 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <MX_DMA_Init+0x78>)
 800125c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800125e:	4a1b      	ldr	r2, [pc, #108]	; (80012cc <MX_DMA_Init+0x78>)
 8001260:	f043 0304 	orr.w	r3, r3, #4
 8001264:	6493      	str	r3, [r2, #72]	; 0x48
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <MX_DMA_Init+0x78>)
 8001268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800126a:	f003 0304 	and.w	r3, r3, #4
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001272:	4b16      	ldr	r3, [pc, #88]	; (80012cc <MX_DMA_Init+0x78>)
 8001274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001276:	4a15      	ldr	r2, [pc, #84]	; (80012cc <MX_DMA_Init+0x78>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6493      	str	r3, [r2, #72]	; 0x48
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <MX_DMA_Init+0x78>)
 8001280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <MX_DMA_Init+0x78>)
 800128c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800128e:	4a0f      	ldr	r2, [pc, #60]	; (80012cc <MX_DMA_Init+0x78>)
 8001290:	f043 0302 	orr.w	r3, r3, #2
 8001294:	6493      	str	r3, [r2, #72]	; 0x48
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <MX_DMA_Init+0x78>)
 8001298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	200b      	movs	r0, #11
 80012a8:	f002 faff 	bl	80038aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012ac:	200b      	movs	r0, #11
 80012ae:	f002 fb16 	bl	80038de <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2100      	movs	r1, #0
 80012b6:	2038      	movs	r0, #56	; 0x38
 80012b8:	f002 faf7 	bl	80038aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80012bc:	2038      	movs	r0, #56	; 0x38
 80012be:	f002 fb0e 	bl	80038de <HAL_NVIC_EnableIRQ>

}
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40021000 	.word	0x40021000

080012d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b088      	sub	sp, #32
 80012d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d6:	f107 030c 	add.w	r3, r7, #12
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012e6:	4b38      	ldr	r3, [pc, #224]	; (80013c8 <MX_GPIO_Init+0xf8>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ea:	4a37      	ldr	r2, [pc, #220]	; (80013c8 <MX_GPIO_Init+0xf8>)
 80012ec:	f043 0320 	orr.w	r3, r3, #32
 80012f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f2:	4b35      	ldr	r3, [pc, #212]	; (80013c8 <MX_GPIO_Init+0xf8>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f6:	f003 0320 	and.w	r3, r3, #32
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	4b32      	ldr	r3, [pc, #200]	; (80013c8 <MX_GPIO_Init+0xf8>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001302:	4a31      	ldr	r2, [pc, #196]	; (80013c8 <MX_GPIO_Init+0xf8>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	64d3      	str	r3, [r2, #76]	; 0x4c
 800130a:	4b2f      	ldr	r3, [pc, #188]	; (80013c8 <MX_GPIO_Init+0xf8>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	4b2c      	ldr	r3, [pc, #176]	; (80013c8 <MX_GPIO_Init+0xf8>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131a:	4a2b      	ldr	r2, [pc, #172]	; (80013c8 <MX_GPIO_Init+0xf8>)
 800131c:	f043 0302 	orr.w	r3, r3, #2
 8001320:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001322:	4b29      	ldr	r3, [pc, #164]	; (80013c8 <MX_GPIO_Init+0xf8>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800132e:	2201      	movs	r2, #1
 8001330:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001334:	4825      	ldr	r0, [pc, #148]	; (80013cc <MX_GPIO_Init+0xfc>)
 8001336:	f003 fbc5 	bl	8004ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001340:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001344:	f003 fbbe 	bl	8004ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001348:	2303      	movs	r3, #3
 800134a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800134c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001350:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	4619      	mov	r1, r3
 800135c:	481b      	ldr	r0, [pc, #108]	; (80013cc <MX_GPIO_Init+0xfc>)
 800135e:	f003 fa2f 	bl	80047c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001362:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001366:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001368:	2301      	movs	r3, #1
 800136a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	2300      	movs	r3, #0
 8001372:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	4619      	mov	r1, r3
 800137a:	4814      	ldr	r0, [pc, #80]	; (80013cc <MX_GPIO_Init+0xfc>)
 800137c:	f003 fa20 	bl	80047c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LSM6DSL_ncs_Pin */
  GPIO_InitStruct.Pin = LSM6DSL_ncs_Pin;
 8001380:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001384:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001386:	2301      	movs	r3, #1
 8001388:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LSM6DSL_ncs_GPIO_Port, &GPIO_InitStruct);
 8001392:	f107 030c 	add.w	r3, r7, #12
 8001396:	4619      	mov	r1, r3
 8001398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139c:	f003 fa10 	bl	80047c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2100      	movs	r1, #0
 80013a4:	2006      	movs	r0, #6
 80013a6:	f002 fa80 	bl	80038aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013aa:	2006      	movs	r0, #6
 80013ac:	f002 fa97 	bl	80038de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2100      	movs	r1, #0
 80013b4:	2007      	movs	r0, #7
 80013b6:	f002 fa78 	bl	80038aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80013ba:	2007      	movs	r0, #7
 80013bc:	f002 fa8f 	bl	80038de <HAL_NVIC_EnableIRQ>

}
 80013c0:	bf00      	nop
 80013c2:	3720      	adds	r7, #32
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40021000 	.word	0x40021000
 80013cc:	48000400 	.word	0x48000400

080013d0 <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	607a      	str	r2, [r7, #4]
 80013da:	461a      	mov	r2, r3
 80013dc:	460b      	mov	r3, r1
 80013de:	72fb      	strb	r3, [r7, #11]
 80013e0:	4613      	mov	r3, r2
 80013e2:	813b      	strh	r3, [r7, #8]
  HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_RESET);
 80013e4:	2200      	movs	r2, #0
 80013e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ee:	f003 fb69 	bl	8004ac4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &reg, 1, 2);
 80013f2:	f107 010b 	add.w	r1, r7, #11
 80013f6:	2302      	movs	r3, #2
 80013f8:	2201      	movs	r2, #1
 80013fa:	480b      	ldr	r0, [pc, #44]	; (8001428 <platform_write+0x58>)
 80013fc:	f006 fa97 	bl	800792e <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, (uint8_t*) bufp, len, 1000);
 8001400:	893a      	ldrh	r2, [r7, #8]
 8001402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	4807      	ldr	r0, [pc, #28]	; (8001428 <platform_write+0x58>)
 800140a:	f006 fa90 	bl	800792e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_SET);
 800140e:	2201      	movs	r2, #1
 8001410:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001418:	f003 fb54 	bl	8004ac4 <HAL_GPIO_WritePin>
  return 0;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20002bd0 	.word	0x20002bd0

0800142c <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	607a      	str	r2, [r7, #4]
 8001436:	461a      	mov	r2, r3
 8001438:	460b      	mov	r3, r1
 800143a:	72fb      	strb	r3, [r7, #11]
 800143c:	4613      	mov	r3, r2
 800143e:	813b      	strh	r3, [r7, #8]
	uint8_t tx_data[2];
	tx_data[0] = 0x80 | reg;
 8001440:	7afb      	ldrb	r3, [r7, #11]
 8001442:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001446:	b2db      	uxtb	r3, r3
 8001448:	753b      	strb	r3, [r7, #20]
	tx_data[1] = 0x00;
 800144a:	2300      	movs	r3, #0
 800144c:	757b      	strb	r3, [r7, #21]
	// get spi state
	HAL_SPI_StateTypeDef tmp_state;
	tmp_state = HAL_SPI_GetState(handle);
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f006 fe86 	bl	8008160 <HAL_SPI_GetState>
 8001454:	4603      	mov	r3, r0
 8001456:	75fb      	strb	r3, [r7, #23]

	// Start the SPI transfer
	HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800145e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001462:	f003 fb2f 	bl	8004ac4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(handle, &tx_data, bufp, len + 1);
 8001466:	893b      	ldrh	r3, [r7, #8]
 8001468:	3301      	adds	r3, #1
 800146a:	b29b      	uxth	r3, r3
 800146c:	f107 0114 	add.w	r1, r7, #20
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f006 fbca 	bl	8007c0c <HAL_SPI_TransmitReceive_DMA>
//	  {
//	    /* Transfer error in transmission process */
//	    Error_Handler();
//	  }
	// Wait for the transfer to complete
    while(HAL_SPI_GetState(handle) != tmp_state);
 8001478:	bf00      	nop
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	f006 fe70 	bl	8008160 <HAL_SPI_GetState>
 8001480:	4603      	mov	r3, r0
 8001482:	461a      	mov	r2, r3
 8001484:	7dfb      	ldrb	r3, [r7, #23]
 8001486:	4293      	cmp	r3, r2
 8001488:	d1f7      	bne.n	800147a <platform_read+0x4e>

	HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_SET);
 800148a:	2201      	movs	r2, #1
 800148c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001490:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001494:	f003 fb16 	bl	8004ac4 <HAL_GPIO_WritePin>
  return 0;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  spi_complete_flag = 1;
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <HAL_SPI_RxCpltCallback+0x1c>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	701a      	strb	r2, [r3, #0]
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20002d4d 	.word	0x20002d4d

080014c4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  spi_complete_flag = 1;
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <HAL_SPI_TxRxCpltCallback+0x1c>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	701a      	strb	r2, [r3, #0]
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20002d4d 	.word	0x20002d4d

080014e4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	uint8_t len = DMA_BUF_LEN/2;
 80014ec:	2320      	movs	r3, #32
 80014ee:	73fb      	strb	r3, [r7, #15]
	uint8_t halfIndex = len-1;
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	73bb      	strb	r3, [r7, #14]
//	memcpy(tx_buffer[halfIndex],adc1_dma_buf_mixer_out[halfIndex],len);
	CDC_Transmit_FS(&adc1_dma_buf_mixer_out[len], len);
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	4a06      	ldr	r2, [pc, #24]	; (8001514 <HAL_ADC_ConvCpltCallback+0x30>)
 80014fc:	4413      	add	r3, r2
 80014fe:	7bfa      	ldrb	r2, [r7, #15]
 8001500:	b292      	uxth	r2, r2
 8001502:	4611      	mov	r1, r2
 8001504:	4618      	mov	r0, r3
 8001506:	f00c fa9d 	bl	800da44 <CDC_Transmit_FS>
}
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20002ccc 	.word	0x20002ccc

08001518 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	uint8_t len = DMA_BUF_LEN/2;
 8001520:	2320      	movs	r3, #32
 8001522:	73fb      	strb	r3, [r7, #15]
//	memcpy(tx_buffer[0],adc1_dma_buf_mixer_out[0],len);
	CDC_Transmit_FS(&adc1_dma_buf_mixer_out[0], len);
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	b29b      	uxth	r3, r3
 8001528:	4619      	mov	r1, r3
 800152a:	4803      	ldr	r0, [pc, #12]	; (8001538 <HAL_ADC_ConvHalfCpltCallback+0x20>)
 800152c:	f00c fa8a 	bl	800da44 <CDC_Transmit_FS>
}
 8001530:	bf00      	nop
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20002ccc 	.word	0x20002ccc

0800153c <process_input>:
 * process the input received over usb to extract the operating mode and the time of operation
 *
 * @param arr    user input array
 * @param pCommand command struct to return mode and time
*/
void process_input(const uint8_t *arr, control *pControl) {
 800153c:	b5b0      	push	{r4, r5, r7, lr}
 800153e:	b0a2      	sub	sp, #136	; 0x88
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
	uint8_t messageIn[] ="processing input";
 8001546:	4b68      	ldr	r3, [pc, #416]	; (80016e8 <process_input+0x1ac>)
 8001548:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800154c:	461d      	mov	r5, r3
 800154e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001552:	682b      	ldr	r3, [r5, #0]
 8001554:	7023      	strb	r3, [r4, #0]
	uint8_t messageComplete[] ="processing complete";
 8001556:	4b65      	ldr	r3, [pc, #404]	; (80016ec <process_input+0x1b0>)
 8001558:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800155c:	461d      	mov	r5, r3
 800155e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001562:	682b      	ldr	r3, [r5, #0]
 8001564:	6023      	str	r3, [r4, #0]
//	CDC_Transmit_FS(messageIn,sizeof(messageIn));
	char mode[]="mode:";
 8001566:	4a62      	ldr	r2, [pc, #392]	; (80016f0 <process_input+0x1b4>)
 8001568:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800156c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001570:	6018      	str	r0, [r3, #0]
 8001572:	3304      	adds	r3, #4
 8001574:	8019      	strh	r1, [r3, #0]
    char time[] = "time:";
 8001576:	4a5f      	ldr	r2, [pc, #380]	; (80016f4 <process_input+0x1b8>)
 8001578:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800157c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001580:	6018      	str	r0, [r3, #0]
 8001582:	3304      	adds	r3, #4
 8001584:	8019      	strh	r1, [r3, #0]
    char validMode[] = {'r', 's', 'm'}; // range speed map
 8001586:	4a5c      	ldr	r2, [pc, #368]	; (80016f8 <process_input+0x1bc>)
 8001588:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	4611      	mov	r1, r2
 8001590:	8019      	strh	r1, [r3, #0]
 8001592:	3302      	adds	r3, #2
 8001594:	0c12      	lsrs	r2, r2, #16
 8001596:	701a      	strb	r2, [r3, #0]
    char word[64] = {0};
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	f107 0310 	add.w	r3, r7, #16
 80015a0:	223c      	movs	r2, #60	; 0x3c
 80015a2:	2100      	movs	r1, #0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f00c fec5 	bl	800e334 <memset>
    uint8_t i = sizeof(mode);
 80015aa:	2306      	movs	r3, #6
 80015ac:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t j= sizeof(time);
 80015b0:	2306      	movs	r3, #6
 80015b2:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
    // check input to ensure "mode:" is received
    my_strcpy(word, arr, i);
 80015b6:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80015ba:	f107 030c 	add.w	r3, r7, #12
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 f8c9 	bl	8001758 <my_strcpy>
    if (strcontains(word,mode)) {
 80015c6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	4611      	mov	r1, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f000 f893 	bl	80016fc <strcontains>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d07e      	beq.n	80016da <process_input+0x19e>
    	if (isValid(arr[i-1],validMode)) {
 80015dc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80015e0:	3b01      	subs	r3, #1
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80015ec:	4611      	mov	r1, r2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 f8d7 	bl	80017a2 <isValid>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d071      	beq.n	80016de <process_input+0x1a2>
    		pControl->mode_instructed=arr[i-1];     // set mode in command
 80015fa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80015fe:	3b01      	subs	r3, #1
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	4413      	add	r3, r2
 8001604:	781a      	ldrb	r2, [r3, #0]
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	709a      	strb	r2, [r3, #2]
    }
    else { // invalid command
    	return;
    }
    // move index past command for mode and then '\n'
    while(arr[i]=='\n') {
 800160a:	e004      	b.n	8001616 <process_input+0xda>
    	i++;
 800160c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001610:	3301      	adds	r3, #1
 8001612:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    while(arr[i]=='\n') {
 8001616:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b0a      	cmp	r3, #10
 8001622:	d0f3      	beq.n	800160c <process_input+0xd0>
    }
    // check input to ensure "time:" is received
    my_strcpy(word, &arr[i], j);
 8001624:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	18d1      	adds	r1, r2, r3
 800162c:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 8001630:	f107 030c 	add.w	r3, r7, #12
 8001634:	4618      	mov	r0, r3
 8001636:	f000 f88f 	bl	8001758 <my_strcpy>
    	if (strcontains(word,time)) {//mode:r\ntime:10
 800163a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800163e:	f107 030c 	add.w	r3, r7, #12
 8001642:	4611      	mov	r1, r2
 8001644:	4618      	mov	r0, r3
 8001646:	f000 f859 	bl	80016fc <strcontains>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d047      	beq.n	80016e0 <process_input+0x1a4>
    	   // set i to index one past command for time
			i=i+j-1;
 8001650:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001654:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001658:	4413      	add	r3, r2
 800165a:	b2db      	uxtb	r3, r3
 800165c:	3b01      	subs	r3, #1
 800165e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			j=i+1;
 8001662:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001666:	3301      	adds	r3, #1
 8001668:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			// get index of last digit
			while (arr[j]!='\n'&& arr[j]!='\0') {
 800166c:	e004      	b.n	8001678 <process_input+0x13c>
			j++;
 800166e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001672:	3301      	adds	r3, #1
 8001674:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			while (arr[j]!='\n'&& arr[j]!='\0') {
 8001678:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	4413      	add	r3, r2
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b0a      	cmp	r3, #10
 8001684:	d006      	beq.n	8001694 <process_input+0x158>
 8001686:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1ec      	bne.n	800166e <process_input+0x132>
			}
			// set run time to zero
			pControl->run_time_sec=0;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	2200      	movs	r2, #0
 8001698:	801a      	strh	r2, [r3, #0]
			// add each digits value,
			// *10 to shift current value left one digit for adding next digit
			// -48 converts from ascii to int
			while (i < j) {
 800169a:	e017      	b.n	80016cc <process_input+0x190>
			pControl->run_time_sec=(pControl->run_time_sec*10)+arr[i]-48;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	461a      	mov	r2, r3
 80016a2:	0092      	lsls	r2, r2, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	440b      	add	r3, r1
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	4413      	add	r3, r2
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	3b30      	subs	r3, #48	; 0x30
 80016bc:	b29a      	uxth	r2, r3
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	801a      	strh	r2, [r3, #0]
			i++;
 80016c2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80016c6:	3301      	adds	r3, #1
 80016c8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			while (i < j) {
 80016cc:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80016d0:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d3e1      	bcc.n	800169c <process_input+0x160>
 80016d8:	e002      	b.n	80016e0 <process_input+0x1a4>
    	return;
 80016da:	bf00      	nop
 80016dc:	e000      	b.n	80016e0 <process_input+0x1a4>
    		return;
 80016de:	bf00      	nop
			}
       }
//	CDC_Transmit_FS(messageComplete,sizeof(messageComplete));
}
 80016e0:	3788      	adds	r7, #136	; 0x88
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bdb0      	pop	{r4, r5, r7, pc}
 80016e6:	bf00      	nop
 80016e8:	08010e9c 	.word	0x08010e9c
 80016ec:	08010eb0 	.word	0x08010eb0
 80016f0:	08010ec4 	.word	0x08010ec4
 80016f4:	08010ecc 	.word	0x08010ecc
 80016f8:	08010ed4 	.word	0x08010ed4

080016fc <strcontains>:

/*
 * Compare two strings,
 * return 1 for same string, 0 for different strings
 */
uint8_t strcontains(const char* str1,const char* str2) {
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
	  uint8_t i = 0, strings_match = 1; // strings match = true
 8001706:	2300      	movs	r3, #0
 8001708:	73fb      	strb	r3, [r7, #15]
 800170a:	2301      	movs	r3, #1
 800170c:	73bb      	strb	r3, [r7, #14]
	  while (str2[i]!='\0') { // while both strings have a character
 800170e:	e00e      	b.n	800172e <strcontains+0x32>
		  if(str1[i] != str2[i]) {		// if check character doesn't match
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	781a      	ldrb	r2, [r3, #0]
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	6839      	ldr	r1, [r7, #0]
 800171c:	440b      	add	r3, r1
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d001      	beq.n	8001728 <strcontains+0x2c>
			  	  strings_match = 0;	// strings match = false
 8001724:	2300      	movs	r3, #0
 8001726:	73bb      	strb	r3, [r7, #14]
		  }
		  i++;
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	3301      	adds	r3, #1
 800172c:	73fb      	strb	r3, [r7, #15]
	  while (str2[i]!='\0') { // while both strings have a character
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	4413      	add	r3, r2
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1ea      	bne.n	8001710 <strcontains+0x14>
	  }
	  if (str2[i]!='\0') { // if either string has a character
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	4413      	add	r3, r2
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <strcontains+0x4e>
	        strings_match = 0;	// strings match = false
 8001746:	2300      	movs	r3, #0
 8001748:	73bb      	strb	r3, [r7, #14]
	  }
	  return strings_match;
 800174a:	7bbb      	ldrb	r3, [r7, #14]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <my_strcpy>:
 * copy original string into copy
 * len is original strings length
 * WARNING copy must be adequate length
 * will stop early on null byte
 */
void my_strcpy(char* cpy, const char* orig, uint8_t len) {
 8001758:	b480      	push	{r7}
 800175a:	b087      	sub	sp, #28
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	4613      	mov	r3, r2
 8001764:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	75fb      	strb	r3, [r7, #23]
	while(orig[i]!='\0' && i<=len) {
 800176a:	e00a      	b.n	8001782 <my_strcpy+0x2a>
		cpy[i]=orig[i];
 800176c:	7dfb      	ldrb	r3, [r7, #23]
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	441a      	add	r2, r3
 8001772:	7dfb      	ldrb	r3, [r7, #23]
 8001774:	68f9      	ldr	r1, [r7, #12]
 8001776:	440b      	add	r3, r1
 8001778:	7812      	ldrb	r2, [r2, #0]
 800177a:	701a      	strb	r2, [r3, #0]
		i++;
 800177c:	7dfb      	ldrb	r3, [r7, #23]
 800177e:	3301      	adds	r3, #1
 8001780:	75fb      	strb	r3, [r7, #23]
	while(orig[i]!='\0' && i<=len) {
 8001782:	7dfb      	ldrb	r3, [r7, #23]
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	4413      	add	r3, r2
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <my_strcpy+0x3e>
 800178e:	7dfa      	ldrb	r2, [r7, #23]
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	429a      	cmp	r2, r3
 8001794:	d9ea      	bls.n	800176c <my_strcpy+0x14>
	}
}
 8001796:	bf00      	nop
 8001798:	371c      	adds	r7, #28
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <isValid>:

/*
 * checks the checkChar is within the validModes char*
 * returns 1 for true, 0 for false
 */
uint8_t isValid(const char checkChar,const char* validModes) {
 80017a2:	b480      	push	{r7}
 80017a4:	b085      	sub	sp, #20
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	4603      	mov	r3, r0
 80017aa:	6039      	str	r1, [r7, #0]
 80017ac:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for(i=0;sizeof(validModes);i++) {
 80017ae:	2300      	movs	r3, #0
 80017b0:	73fb      	strb	r3, [r7, #15]
		if (checkChar==validModes[i]) {
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	79fa      	ldrb	r2, [r7, #7]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d101      	bne.n	80017c4 <isValid+0x22>
			return 1;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e003      	b.n	80017cc <isValid+0x2a>
	for(i=0;sizeof(validModes);i++) {
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
 80017c6:	3301      	adds	r3, #1
 80017c8:	73fb      	strb	r3, [r7, #15]
		if (checkChar==validModes[i]) {
 80017ca:	e7f2      	b.n	80017b2 <isValid+0x10>
		}
	}
	return 0;
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <set_VCO_input_DAC>:



void set_VCO_input_DAC(control *ctrl_ptr) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af02      	add	r7, sp, #8
 80017de:	6078      	str	r0, [r7, #4]
	// if currently running is as instructed, return
	if (ctrl_ptr->mode_running==ctrl_ptr->mode_instructed) {
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	78da      	ldrb	r2, [r3, #3]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	789b      	ldrb	r3, [r3, #2]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d035      	beq.n	8001858 <set_VCO_input_DAC+0x80>
		return;
	}

	  /* Set DAC_CH_1 to CTune or VTune based on user input for mode, defaults to range(r)*/
	if (ctrl_ptr->mode_instructed=='r')
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	789b      	ldrb	r3, [r3, #2]
 80017f0:	2b72      	cmp	r3, #114	; 0x72
 80017f2:	d117      	bne.n	8001824 <set_VCO_input_DAC+0x4c>
	{
		// if currently running in other mode, turn it off
		if (ctrl_ptr->mode_running=='s') {
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	78db      	ldrb	r3, [r3, #3]
 80017f8:	2b73      	cmp	r3, #115	; 0x73
 80017fa:	d103      	bne.n	8001804 <set_VCO_input_DAC+0x2c>
			HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
 80017fc:	2100      	movs	r1, #0
 80017fe:	4818      	ldr	r0, [pc, #96]	; (8001860 <set_VCO_input_DAC+0x88>)
 8001800:	f002 f8fc 	bl	80039fc <HAL_DAC_Stop>
		}
		// turn on dac using dma and timer 2
		HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,(uint32_t*)VTune,2484,DAC_ALIGN_12B_R);
 8001804:	2300      	movs	r3, #0
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	f640 13b4 	movw	r3, #2484	; 0x9b4
 800180c:	4a15      	ldr	r2, [pc, #84]	; (8001864 <set_VCO_input_DAC+0x8c>)
 800180e:	2100      	movs	r1, #0
 8001810:	4813      	ldr	r0, [pc, #76]	; (8001860 <set_VCO_input_DAC+0x88>)
 8001812:	f002 f911 	bl	8003a38 <HAL_DAC_Start_DMA>
		HAL_TIM_Base_Start(&htim2);
 8001816:	4814      	ldr	r0, [pc, #80]	; (8001868 <set_VCO_input_DAC+0x90>)
 8001818:	f006 ffb2 	bl	8008780 <HAL_TIM_Base_Start>
		ctrl_ptr->mode_running='r';
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2272      	movs	r2, #114	; 0x72
 8001820:	70da      	strb	r2, [r3, #3]
 8001822:	e01a      	b.n	800185a <set_VCO_input_DAC+0x82>
	}
	else
	{
		if (ctrl_ptr->mode_running=='r') {
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	78db      	ldrb	r3, [r3, #3]
 8001828:	2b72      	cmp	r3, #114	; 0x72
 800182a:	d106      	bne.n	800183a <set_VCO_input_DAC+0x62>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800182c:	2100      	movs	r1, #0
 800182e:	480c      	ldr	r0, [pc, #48]	; (8001860 <set_VCO_input_DAC+0x88>)
 8001830:	f002 f9d0 	bl	8003bd4 <HAL_DAC_Stop_DMA>
			HAL_TIM_Base_Stop(&htim2);
 8001834:	480c      	ldr	r0, [pc, #48]	; (8001868 <set_VCO_input_DAC+0x90>)
 8001836:	f007 f813 	bl	8008860 <HAL_TIM_Base_Stop>

		}
		HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800183a:	2100      	movs	r1, #0
 800183c:	4808      	ldr	r0, [pc, #32]	; (8001860 <set_VCO_input_DAC+0x88>)
 800183e:	f002 f88a 	bl	8003956 <HAL_DAC_Start>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, CTune);
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <set_VCO_input_DAC+0x94>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2200      	movs	r2, #0
 8001848:	2100      	movs	r1, #0
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <set_VCO_input_DAC+0x88>)
 800184c:	f002 fa0d 	bl	8003c6a <HAL_DAC_SetValue>
		ctrl_ptr->mode_running='s';
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2273      	movs	r2, #115	; 0x73
 8001854:	70da      	strb	r2, [r3, #3]
 8001856:	e000      	b.n	800185a <set_VCO_input_DAC+0x82>
		return;
 8001858:	bf00      	nop
	}
}
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20002b10 	.word	0x20002b10
 8001864:	20000004 	.word	0x20000004
 8001868:	20002c80 	.word	0x20002c80
 800186c:	20000000 	.word	0x20000000

08001870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001874:	b672      	cpsid	i
}
 8001876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001878:	e7fe      	b.n	8001878 <Error_Handler+0x8>
	...

0800187c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001882:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <HAL_MspInit+0x44>)
 8001884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001886:	4a0e      	ldr	r2, [pc, #56]	; (80018c0 <HAL_MspInit+0x44>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6613      	str	r3, [r2, #96]	; 0x60
 800188e:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <HAL_MspInit+0x44>)
 8001890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_MspInit+0x44>)
 800189c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189e:	4a08      	ldr	r2, [pc, #32]	; (80018c0 <HAL_MspInit+0x44>)
 80018a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a4:	6593      	str	r3, [r2, #88]	; 0x58
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_MspInit+0x44>)
 80018a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ae:	603b      	str	r3, [r7, #0]
 80018b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40021000 	.word	0x40021000

080018c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b09e      	sub	sp, #120	; 0x78
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018dc:	f107 0310 	add.w	r3, r7, #16
 80018e0:	2254      	movs	r2, #84	; 0x54
 80018e2:	2100      	movs	r1, #0
 80018e4:	4618      	mov	r0, r3
 80018e6:	f00c fd25 	bl	800e334 <memset>
  if(hadc->Instance==ADC1)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018f2:	d160      	bne.n	80019b6 <HAL_ADC_MspInit+0xf2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80018f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018f8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80018fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80018fe:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001900:	f107 0310 	add.w	r3, r7, #16
 8001904:	4618      	mov	r0, r3
 8001906:	f005 fd19 	bl	800733c <HAL_RCCEx_PeriphCLKConfig>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001910:	f7ff ffae 	bl	8001870 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001914:	4b2a      	ldr	r3, [pc, #168]	; (80019c0 <HAL_ADC_MspInit+0xfc>)
 8001916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001918:	4a29      	ldr	r2, [pc, #164]	; (80019c0 <HAL_ADC_MspInit+0xfc>)
 800191a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800191e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001920:	4b27      	ldr	r3, [pc, #156]	; (80019c0 <HAL_ADC_MspInit+0xfc>)
 8001922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001924:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192c:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <HAL_ADC_MspInit+0xfc>)
 800192e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001930:	4a23      	ldr	r2, [pc, #140]	; (80019c0 <HAL_ADC_MspInit+0xfc>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001938:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <HAL_ADC_MspInit+0xfc>)
 800193a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = mixer_op_filtered_Pin;
 8001944:	2301      	movs	r3, #1
 8001946:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001948:	2303      	movs	r3, #3
 800194a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(mixer_op_filtered_GPIO_Port, &GPIO_InitStruct);
 8001950:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001954:	4619      	mov	r1, r3
 8001956:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800195a:	f002 ff31 	bl	80047c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel1;
 800195e:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <HAL_ADC_MspInit+0x100>)
 8001960:	4a19      	ldr	r2, [pc, #100]	; (80019c8 <HAL_ADC_MspInit+0x104>)
 8001962:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001964:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <HAL_ADC_MspInit+0x100>)
 8001966:	2205      	movs	r2, #5
 8001968:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800196a:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <HAL_ADC_MspInit+0x100>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001970:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <HAL_ADC_MspInit+0x100>)
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <HAL_ADC_MspInit+0x100>)
 8001978:	2280      	movs	r2, #128	; 0x80
 800197a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <HAL_ADC_MspInit+0x100>)
 800197e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001982:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001984:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <HAL_ADC_MspInit+0x100>)
 8001986:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800198a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800198c:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <HAL_ADC_MspInit+0x100>)
 800198e:	2220      	movs	r2, #32
 8001990:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <HAL_ADC_MspInit+0x100>)
 8001994:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001998:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800199a:	480a      	ldr	r0, [pc, #40]	; (80019c4 <HAL_ADC_MspInit+0x100>)
 800199c:	f002 fbde 	bl	800415c <HAL_DMA_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 80019a6:	f7ff ff63 	bl	8001870 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a05      	ldr	r2, [pc, #20]	; (80019c4 <HAL_ADC_MspInit+0x100>)
 80019ae:	655a      	str	r2, [r3, #84]	; 0x54
 80019b0:	4a04      	ldr	r2, [pc, #16]	; (80019c4 <HAL_ADC_MspInit+0x100>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019b6:	bf00      	nop
 80019b8:	3778      	adds	r7, #120	; 0x78
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40021000 	.word	0x40021000
 80019c4:	20002ab0 	.word	0x20002ab0
 80019c8:	40020408 	.word	0x40020408

080019cc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	; 0x28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a2b      	ldr	r2, [pc, #172]	; (8001a98 <HAL_DAC_MspInit+0xcc>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d150      	bne.n	8001a90 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80019ee:	4b2b      	ldr	r3, [pc, #172]	; (8001a9c <HAL_DAC_MspInit+0xd0>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f2:	4a2a      	ldr	r2, [pc, #168]	; (8001a9c <HAL_DAC_MspInit+0xd0>)
 80019f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019fa:	4b28      	ldr	r3, [pc, #160]	; (8001a9c <HAL_DAC_MspInit+0xd0>)
 80019fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a06:	4b25      	ldr	r3, [pc, #148]	; (8001a9c <HAL_DAC_MspInit+0xd0>)
 8001a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0a:	4a24      	ldr	r2, [pc, #144]	; (8001a9c <HAL_DAC_MspInit+0xd0>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a12:	4b22      	ldr	r3, [pc, #136]	; (8001a9c <HAL_DAC_MspInit+0xd0>)
 8001a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a1e:	2310      	movs	r3, #16
 8001a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a22:	2303      	movs	r3, #3
 8001a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a34:	f002 fec4 	bl	80047c0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8001a38:	4b19      	ldr	r3, [pc, #100]	; (8001aa0 <HAL_DAC_MspInit+0xd4>)
 8001a3a:	4a1a      	ldr	r2, [pc, #104]	; (8001aa4 <HAL_DAC_MspInit+0xd8>)
 8001a3c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8001a3e:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <HAL_DAC_MspInit+0xd4>)
 8001a40:	2206      	movs	r2, #6
 8001a42:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a44:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <HAL_DAC_MspInit+0xd4>)
 8001a46:	2210      	movs	r2, #16
 8001a48:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <HAL_DAC_MspInit+0xd4>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001a50:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <HAL_DAC_MspInit+0xd4>)
 8001a52:	2280      	movs	r2, #128	; 0x80
 8001a54:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a56:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_DAC_MspInit+0xd4>)
 8001a58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a5c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <HAL_DAC_MspInit+0xd4>)
 8001a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a64:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <HAL_DAC_MspInit+0xd4>)
 8001a68:	2220      	movs	r2, #32
 8001a6a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <HAL_DAC_MspInit+0xd4>)
 8001a6e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001a72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001a74:	480a      	ldr	r0, [pc, #40]	; (8001aa0 <HAL_DAC_MspInit+0xd4>)
 8001a76:	f002 fb71 	bl	800415c <HAL_DMA_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8001a80:	f7ff fef6 	bl	8001870 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a06      	ldr	r2, [pc, #24]	; (8001aa0 <HAL_DAC_MspInit+0xd4>)
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	4a05      	ldr	r2, [pc, #20]	; (8001aa0 <HAL_DAC_MspInit+0xd4>)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001a90:	bf00      	nop
 8001a92:	3728      	adds	r7, #40	; 0x28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	50000800 	.word	0x50000800
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	20002b24 	.word	0x20002b24
 8001aa4:	40020008 	.word	0x40020008

08001aa8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b09e      	sub	sp, #120	; 0x78
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	2254      	movs	r2, #84	; 0x54
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f00c fc33 	bl	800e334 <memset>
  if(hi2c->Instance==I2C2)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a1f      	ldr	r2, [pc, #124]	; (8001b50 <HAL_I2C_MspInit+0xa8>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d137      	bne.n	8001b48 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001adc:	2300      	movs	r3, #0
 8001ade:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ae0:	f107 0310 	add.w	r3, r7, #16
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f005 fc29 	bl	800733c <HAL_RCCEx_PeriphCLKConfig>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001af0:	f7ff febe 	bl	8001870 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af4:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <HAL_I2C_MspInit+0xac>)
 8001af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af8:	4a16      	ldr	r2, [pc, #88]	; (8001b54 <HAL_I2C_MspInit+0xac>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b00:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <HAL_I2C_MspInit+0xac>)
 8001b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = I2C2_SDA_digital_pot_Pin|I2C2_SCL_digital_pot_Pin;
 8001b0c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b10:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b12:	2312      	movs	r3, #18
 8001b14:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b1e:	2304      	movs	r3, #4
 8001b20:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b22:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b26:	4619      	mov	r1, r3
 8001b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b2c:	f002 fe48 	bl	80047c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <HAL_I2C_MspInit+0xac>)
 8001b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b34:	4a07      	ldr	r2, [pc, #28]	; (8001b54 <HAL_I2C_MspInit+0xac>)
 8001b36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b3a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_I2C_MspInit+0xac>)
 8001b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001b48:	bf00      	nop
 8001b4a:	3778      	adds	r7, #120	; 0x78
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40005800 	.word	0x40005800
 8001b54:	40021000 	.word	0x40021000

08001b58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08a      	sub	sp, #40	; 0x28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a1b      	ldr	r2, [pc, #108]	; (8001be4 <HAL_SPI_MspInit+0x8c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d130      	bne.n	8001bdc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <HAL_SPI_MspInit+0x90>)
 8001b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b7e:	4a1a      	ldr	r2, [pc, #104]	; (8001be8 <HAL_SPI_MspInit+0x90>)
 8001b80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b84:	6613      	str	r3, [r2, #96]	; 0x60
 8001b86:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <HAL_SPI_MspInit+0x90>)
 8001b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <HAL_SPI_MspInit+0x90>)
 8001b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b96:	4a14      	ldr	r2, [pc, #80]	; (8001be8 <HAL_SPI_MspInit+0x90>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b9e:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <HAL_SPI_MspInit+0x90>)
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001baa:	23e0      	movs	r3, #224	; 0xe0
 8001bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bba:	2305      	movs	r3, #5
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbe:	f107 0314 	add.w	r3, r7, #20
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc8:	f002 fdfa 	bl	80047c0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2100      	movs	r1, #0
 8001bd0:	2023      	movs	r0, #35	; 0x23
 8001bd2:	f001 fe6a 	bl	80038aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001bd6:	2023      	movs	r0, #35	; 0x23
 8001bd8:	f001 fe81 	bl	80038de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001bdc:	bf00      	nop
 8001bde:	3728      	adds	r7, #40	; 0x28
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40013000 	.word	0x40013000
 8001be8:	40021000 	.word	0x40021000

08001bec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a13      	ldr	r2, [pc, #76]	; (8001c48 <HAL_TIM_Base_MspInit+0x5c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d10c      	bne.n	8001c18 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bfe:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <HAL_TIM_Base_MspInit+0x60>)
 8001c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c02:	4a12      	ldr	r2, [pc, #72]	; (8001c4c <HAL_TIM_Base_MspInit+0x60>)
 8001c04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c08:	6613      	str	r3, [r2, #96]	; 0x60
 8001c0a:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <HAL_TIM_Base_MspInit+0x60>)
 8001c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c16:	e010      	b.n	8001c3a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c20:	d10b      	bne.n	8001c3a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c22:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <HAL_TIM_Base_MspInit+0x60>)
 8001c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c26:	4a09      	ldr	r2, [pc, #36]	; (8001c4c <HAL_TIM_Base_MspInit+0x60>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c2e:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <HAL_TIM_Base_MspInit+0x60>)
 8001c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]
}
 8001c3a:	bf00      	nop
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40012c00 	.word	0x40012c00
 8001c4c:	40021000 	.word	0x40021000

08001c50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 030c 	add.w	r3, r7, #12
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a12      	ldr	r2, [pc, #72]	; (8001cb8 <HAL_TIM_MspPostInit+0x68>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d11d      	bne.n	8001cae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c72:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_TIM_MspPostInit+0x6c>)
 8001c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c76:	4a11      	ldr	r2, [pc, #68]	; (8001cbc <HAL_TIM_MspPostInit+0x6c>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c7e:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <HAL_TIM_MspPostInit+0x6c>)
 8001c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c90:	2302      	movs	r3, #2
 8001c92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001c9c:	2306      	movs	r3, #6
 8001c9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca0:	f107 030c 	add.w	r3, r7, #12
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001caa:	f002 fd89 	bl	80047c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001cae:	bf00      	nop
 8001cb0:	3720      	adds	r7, #32
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40012c00 	.word	0x40012c00
 8001cbc:	40021000 	.word	0x40021000

08001cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <NMI_Handler+0x4>

08001cc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cca:	e7fe      	b.n	8001cca <HardFault_Handler+0x4>

08001ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <MemManage_Handler+0x4>

08001cd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd6:	e7fe      	b.n	8001cd6 <BusFault_Handler+0x4>

08001cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <UsageFault_Handler+0x4>

08001cde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d0c:	f000 f98c 	bl	8002028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001d18:	2001      	movs	r0, #1
 8001d1a:	f002 feeb 	bl	8004af4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001d26:	2002      	movs	r0, #2
 8001d28:	f002 fee4 	bl	8004af4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <DMA1_Channel1_IRQHandler+0x10>)
 8001d36:	f002 fbf4 	bl	8004522 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20002b24 	.word	0x20002b24

08001d44 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001d48:	4802      	ldr	r0, [pc, #8]	; (8001d54 <USB_LP_IRQHandler+0x10>)
 8001d4a:	f003 f923 	bl	8004f94 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20004230 	.word	0x20004230

08001d58 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001d5c:	4802      	ldr	r0, [pc, #8]	; (8001d68 <SPI1_IRQHandler+0x10>)
 8001d5e:	f006 f8e1 	bl	8007f24 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20002bd0 	.word	0x20002bd0

08001d6c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d70:	4802      	ldr	r0, [pc, #8]	; (8001d7c <DMA2_Channel1_IRQHandler+0x10>)
 8001d72:	f002 fbd6 	bl	8004522 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20002ab0 	.word	0x20002ab0

08001d80 <_getpid>:
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	2301      	movs	r3, #1
 8001d86:	4618      	mov	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <_kill>:
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
 8001d9a:	f00c faa1 	bl	800e2e0 <__errno>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2216      	movs	r2, #22
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001da8:	4618      	mov	r0, r3
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <_exit>:
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff ffe7 	bl	8001d90 <_kill>
 8001dc2:	e7fe      	b.n	8001dc2 <_exit+0x12>

08001dc4 <_read>:
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	e00a      	b.n	8001dec <_read+0x28>
 8001dd6:	f3af 8000 	nop.w
 8001dda:	4601      	mov	r1, r0
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	60ba      	str	r2, [r7, #8]
 8001de2:	b2ca      	uxtb	r2, r1
 8001de4:	701a      	strb	r2, [r3, #0]
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	3301      	adds	r3, #1
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	dbf0      	blt.n	8001dd6 <_read+0x12>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4618      	mov	r0, r3
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <_write>:
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	e009      	b.n	8001e24 <_write+0x26>
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	60ba      	str	r2, [r7, #8]
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f3af 8000 	nop.w
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	3301      	adds	r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	dbf1      	blt.n	8001e10 <_write+0x12>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <_close>:
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <_fstat>:
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	6039      	str	r1, [r7, #0]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e5e:	605a      	str	r2, [r3, #4]
 8001e60:	2300      	movs	r3, #0
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <_isatty>:
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	2301      	movs	r3, #1
 8001e78:	4618      	mov	r0, r3
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <_lseek>:
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
 8001e90:	2300      	movs	r3, #0
 8001e92:	4618      	mov	r0, r3
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
	...

08001ea0 <_sbrk>:
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	4a14      	ldr	r2, [pc, #80]	; (8001efc <_sbrk+0x5c>)
 8001eaa:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <_sbrk+0x60>)
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <_sbrk+0x64>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d102      	bne.n	8001ec2 <_sbrk+0x22>
 8001ebc:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <_sbrk+0x64>)
 8001ebe:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <_sbrk+0x68>)
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <_sbrk+0x64>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d207      	bcs.n	8001ee0 <_sbrk+0x40>
 8001ed0:	f00c fa06 	bl	800e2e0 <__errno>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ede:	e009      	b.n	8001ef4 <_sbrk+0x54>
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <_sbrk+0x64>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <_sbrk+0x64>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	4a05      	ldr	r2, [pc, #20]	; (8001f04 <_sbrk+0x64>)
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20020000 	.word	0x20020000
 8001f00:	00000400 	.word	0x00000400
 8001f04:	20002d50 	.word	0x20002d50
 8001f08:	20004758 	.word	0x20004758

08001f0c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <SystemInit+0x20>)
 8001f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f16:	4a05      	ldr	r2, [pc, #20]	; (8001f2c <SystemInit+0x20>)
 8001f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <Reset_Handler>:
 8001f30:	480d      	ldr	r0, [pc, #52]	; (8001f68 <LoopForever+0x2>)
 8001f32:	4685      	mov	sp, r0
 8001f34:	480d      	ldr	r0, [pc, #52]	; (8001f6c <LoopForever+0x6>)
 8001f36:	490e      	ldr	r1, [pc, #56]	; (8001f70 <LoopForever+0xa>)
 8001f38:	4a0e      	ldr	r2, [pc, #56]	; (8001f74 <LoopForever+0xe>)
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e002      	b.n	8001f44 <LoopCopyDataInit>

08001f3e <CopyDataInit>:
 8001f3e:	58d4      	ldr	r4, [r2, r3]
 8001f40:	50c4      	str	r4, [r0, r3]
 8001f42:	3304      	adds	r3, #4

08001f44 <LoopCopyDataInit>:
 8001f44:	18c4      	adds	r4, r0, r3
 8001f46:	428c      	cmp	r4, r1
 8001f48:	d3f9      	bcc.n	8001f3e <CopyDataInit>
 8001f4a:	4a0b      	ldr	r2, [pc, #44]	; (8001f78 <LoopForever+0x12>)
 8001f4c:	4c0b      	ldr	r4, [pc, #44]	; (8001f7c <LoopForever+0x16>)
 8001f4e:	2300      	movs	r3, #0
 8001f50:	e001      	b.n	8001f56 <LoopFillZerobss>

08001f52 <FillZerobss>:
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	3204      	adds	r2, #4

08001f56 <LoopFillZerobss>:
 8001f56:	42a2      	cmp	r2, r4
 8001f58:	d3fb      	bcc.n	8001f52 <FillZerobss>
 8001f5a:	f7ff ffd7 	bl	8001f0c <SystemInit>
 8001f5e:	f00c f9c5 	bl	800e2ec <__libc_init_array>
 8001f62:	f7fe fe73 	bl	8000c4c <main>

08001f66 <LoopForever>:
 8001f66:	e7fe      	b.n	8001f66 <LoopForever>
 8001f68:	20020000 	.word	0x20020000
 8001f6c:	20000000 	.word	0x20000000
 8001f70:	20002a28 	.word	0x20002a28
 8001f74:	0801134c 	.word	0x0801134c
 8001f78:	20002a28 	.word	0x20002a28
 8001f7c:	20004754 	.word	0x20004754

08001f80 <ADC1_2_IRQHandler>:
 8001f80:	e7fe      	b.n	8001f80 <ADC1_2_IRQHandler>

08001f82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f8c:	2003      	movs	r0, #3
 8001f8e:	f001 fc81 	bl	8003894 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f92:	200f      	movs	r0, #15
 8001f94:	f000 f80e 	bl	8001fb4 <HAL_InitTick>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	71fb      	strb	r3, [r7, #7]
 8001fa2:	e001      	b.n	8001fa8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fa4:	f7ff fc6a 	bl	800187c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fa8:	79fb      	ldrb	r3, [r7, #7]

}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001fc0:	4b16      	ldr	r3, [pc, #88]	; (800201c <HAL_InitTick+0x68>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d022      	beq.n	800200e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001fc8:	4b15      	ldr	r3, [pc, #84]	; (8002020 <HAL_InitTick+0x6c>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b13      	ldr	r3, [pc, #76]	; (800201c <HAL_InitTick+0x68>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001fd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f001 fc8c 	bl	80038fa <HAL_SYSTICK_Config>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10f      	bne.n	8002008 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b0f      	cmp	r3, #15
 8001fec:	d809      	bhi.n	8002002 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ff6:	f001 fc58 	bl	80038aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <HAL_InitTick+0x70>)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	e007      	b.n	8002012 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	73fb      	strb	r3, [r7, #15]
 8002006:	e004      	b.n	8002012 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	73fb      	strb	r3, [r7, #15]
 800200c:	e001      	b.n	8002012 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002012:	7bfb      	ldrb	r3, [r7, #15]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	200026dc 	.word	0x200026dc
 8002020:	200026d4 	.word	0x200026d4
 8002024:	200026d8 	.word	0x200026d8

08002028 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <HAL_IncTick+0x1c>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <HAL_IncTick+0x20>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4413      	add	r3, r2
 8002036:	4a03      	ldr	r2, [pc, #12]	; (8002044 <HAL_IncTick+0x1c>)
 8002038:	6013      	str	r3, [r2, #0]
}
 800203a:	bf00      	nop
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	20002d54 	.word	0x20002d54
 8002048:	200026dc 	.word	0x200026dc

0800204c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return uwTick;
 8002050:	4b03      	ldr	r3, [pc, #12]	; (8002060 <HAL_GetTick+0x14>)
 8002052:	681b      	ldr	r3, [r3, #0]
}
 8002054:	4618      	mov	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20002d54 	.word	0x20002d54

08002064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800206c:	f7ff ffee 	bl	800204c <HAL_GetTick>
 8002070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800207c:	d004      	beq.n	8002088 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <HAL_Delay+0x40>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	4413      	add	r3, r2
 8002086:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002088:	bf00      	nop
 800208a:	f7ff ffdf 	bl	800204c <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	429a      	cmp	r2, r3
 8002098:	d8f7      	bhi.n	800208a <HAL_Delay+0x26>
  {
  }
}
 800209a:	bf00      	nop
 800209c:	bf00      	nop
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	200026dc 	.word	0x200026dc

080020a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	609a      	str	r2, [r3, #8]
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	609a      	str	r2, [r3, #8]
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002110:	b480      	push	{r7}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
 800211c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	3360      	adds	r3, #96	; 0x60
 8002122:	461a      	mov	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4b08      	ldr	r3, [pc, #32]	; (8002154 <LL_ADC_SetOffset+0x44>)
 8002132:	4013      	ands	r3, r2
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	4313      	orrs	r3, r2
 8002140:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002148:	bf00      	nop
 800214a:	371c      	adds	r7, #28
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	03fff000 	.word	0x03fff000

08002158 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3360      	adds	r3, #96	; 0x60
 8002166:	461a      	mov	r2, r3
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002178:	4618      	mov	r0, r3
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002184:	b480      	push	{r7}
 8002186:	b087      	sub	sp, #28
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	3360      	adds	r3, #96	; 0x60
 8002194:	461a      	mov	r2, r3
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	431a      	orrs	r2, r3
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021ae:	bf00      	nop
 80021b0:	371c      	adds	r7, #28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b087      	sub	sp, #28
 80021be:	af00      	add	r7, sp, #0
 80021c0:	60f8      	str	r0, [r7, #12]
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	3360      	adds	r3, #96	; 0x60
 80021ca:	461a      	mov	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	431a      	orrs	r2, r3
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80021e4:	bf00      	nop
 80021e6:	371c      	adds	r7, #28
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b087      	sub	sp, #28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	3360      	adds	r3, #96	; 0x60
 8002200:	461a      	mov	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	431a      	orrs	r2, r3
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800221a:	bf00      	nop
 800221c:	371c      	adds	r7, #28
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	615a      	str	r2, [r3, #20]
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002260:	2301      	movs	r3, #1
 8002262:	e000      	b.n	8002266 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002272:	b480      	push	{r7}
 8002274:	b087      	sub	sp, #28
 8002276:	af00      	add	r7, sp, #0
 8002278:	60f8      	str	r0, [r7, #12]
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	3330      	adds	r3, #48	; 0x30
 8002282:	461a      	mov	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	0a1b      	lsrs	r3, r3, #8
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	4413      	add	r3, r2
 8002290:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	f003 031f 	and.w	r3, r3, #31
 800229c:	211f      	movs	r1, #31
 800229e:	fa01 f303 	lsl.w	r3, r1, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	401a      	ands	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	0e9b      	lsrs	r3, r3, #26
 80022aa:	f003 011f 	and.w	r1, r3, #31
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	f003 031f 	and.w	r3, r3, #31
 80022b4:	fa01 f303 	lsl.w	r3, r1, r3
 80022b8:	431a      	orrs	r2, r3
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022be:	bf00      	nop
 80022c0:	371c      	adds	r7, #28
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b087      	sub	sp, #28
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	3314      	adds	r3, #20
 80022da:	461a      	mov	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	0e5b      	lsrs	r3, r3, #25
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	4413      	add	r3, r2
 80022e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	0d1b      	lsrs	r3, r3, #20
 80022f2:	f003 031f 	and.w	r3, r3, #31
 80022f6:	2107      	movs	r1, #7
 80022f8:	fa01 f303 	lsl.w	r3, r1, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	401a      	ands	r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	0d1b      	lsrs	r3, r3, #20
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	fa01 f303 	lsl.w	r3, r1, r3
 800230e:	431a      	orrs	r2, r3
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002314:	bf00      	nop
 8002316:	371c      	adds	r7, #28
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a0f      	ldr	r2, [pc, #60]	; (800236c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d10a      	bne.n	800234a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002340:	431a      	orrs	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002348:	e00a      	b.n	8002360 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002356:	43db      	mvns	r3, r3
 8002358:	401a      	ands	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002360:	bf00      	nop
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	407f0000 	.word	0x407f0000

08002370 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 031f 	and.w	r3, r3, #31
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800239c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6093      	str	r3, [r2, #8]
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023c4:	d101      	bne.n	80023ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80023e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002410:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002414:	d101      	bne.n	800241a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002438:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800243c:	f043 0201 	orr.w	r2, r3, #1
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b01      	cmp	r3, #1
 8002462:	d101      	bne.n	8002468 <LL_ADC_IsEnabled+0x18>
 8002464:	2301      	movs	r3, #1
 8002466:	e000      	b.n	800246a <LL_ADC_IsEnabled+0x1a>
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002486:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800248a:	f043 0204 	orr.w	r2, r3, #4
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d101      	bne.n	80024b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d101      	bne.n	80024dc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024d8:	2301      	movs	r3, #1
 80024da:	e000      	b.n	80024de <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
	...

080024ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024ec:	b590      	push	{r4, r7, lr}
 80024ee:	b089      	sub	sp, #36	; 0x24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e1af      	b.n	8002866 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002510:	2b00      	cmp	r3, #0
 8002512:	d109      	bne.n	8002528 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff f9d5 	bl	80018c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff3f 	bl	80023b0 <LL_ADC_IsDeepPowerDownEnabled>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d004      	beq.n	8002542 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff ff25 	bl	800238c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff ff5a 	bl	8002400 <LL_ADC_IsInternalRegulatorEnabled>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d115      	bne.n	800257e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff ff3e 	bl	80023d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800255c:	4b9f      	ldr	r3, [pc, #636]	; (80027dc <HAL_ADC_Init+0x2f0>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	099b      	lsrs	r3, r3, #6
 8002562:	4a9f      	ldr	r2, [pc, #636]	; (80027e0 <HAL_ADC_Init+0x2f4>)
 8002564:	fba2 2303 	umull	r2, r3, r2, r3
 8002568:	099b      	lsrs	r3, r3, #6
 800256a:	3301      	adds	r3, #1
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002570:	e002      	b.n	8002578 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	3b01      	subs	r3, #1
 8002576:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f9      	bne.n	8002572 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff ff3c 	bl	8002400 <LL_ADC_IsInternalRegulatorEnabled>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10d      	bne.n	80025aa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002592:	f043 0210 	orr.w	r2, r3, #16
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800259e:	f043 0201 	orr.w	r2, r3, #1
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff ff75 	bl	800249e <LL_ADC_REG_IsConversionOngoing>
 80025b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ba:	f003 0310 	and.w	r3, r3, #16
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f040 8148 	bne.w	8002854 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f040 8144 	bne.w	8002854 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80025d4:	f043 0202 	orr.w	r2, r3, #2
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff ff35 	bl	8002450 <LL_ADC_IsEnabled>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d141      	bne.n	8002670 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025f4:	d004      	beq.n	8002600 <HAL_ADC_Init+0x114>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a7a      	ldr	r2, [pc, #488]	; (80027e4 <HAL_ADC_Init+0x2f8>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d10f      	bne.n	8002620 <HAL_ADC_Init+0x134>
 8002600:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002604:	f7ff ff24 	bl	8002450 <LL_ADC_IsEnabled>
 8002608:	4604      	mov	r4, r0
 800260a:	4876      	ldr	r0, [pc, #472]	; (80027e4 <HAL_ADC_Init+0x2f8>)
 800260c:	f7ff ff20 	bl	8002450 <LL_ADC_IsEnabled>
 8002610:	4603      	mov	r3, r0
 8002612:	4323      	orrs	r3, r4
 8002614:	2b00      	cmp	r3, #0
 8002616:	bf0c      	ite	eq
 8002618:	2301      	moveq	r3, #1
 800261a:	2300      	movne	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	e012      	b.n	8002646 <HAL_ADC_Init+0x15a>
 8002620:	4871      	ldr	r0, [pc, #452]	; (80027e8 <HAL_ADC_Init+0x2fc>)
 8002622:	f7ff ff15 	bl	8002450 <LL_ADC_IsEnabled>
 8002626:	4604      	mov	r4, r0
 8002628:	4870      	ldr	r0, [pc, #448]	; (80027ec <HAL_ADC_Init+0x300>)
 800262a:	f7ff ff11 	bl	8002450 <LL_ADC_IsEnabled>
 800262e:	4603      	mov	r3, r0
 8002630:	431c      	orrs	r4, r3
 8002632:	486f      	ldr	r0, [pc, #444]	; (80027f0 <HAL_ADC_Init+0x304>)
 8002634:	f7ff ff0c 	bl	8002450 <LL_ADC_IsEnabled>
 8002638:	4603      	mov	r3, r0
 800263a:	4323      	orrs	r3, r4
 800263c:	2b00      	cmp	r3, #0
 800263e:	bf0c      	ite	eq
 8002640:	2301      	moveq	r3, #1
 8002642:	2300      	movne	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d012      	beq.n	8002670 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002652:	d004      	beq.n	800265e <HAL_ADC_Init+0x172>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a62      	ldr	r2, [pc, #392]	; (80027e4 <HAL_ADC_Init+0x2f8>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d101      	bne.n	8002662 <HAL_ADC_Init+0x176>
 800265e:	4a65      	ldr	r2, [pc, #404]	; (80027f4 <HAL_ADC_Init+0x308>)
 8002660:	e000      	b.n	8002664 <HAL_ADC_Init+0x178>
 8002662:	4a65      	ldr	r2, [pc, #404]	; (80027f8 <HAL_ADC_Init+0x30c>)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	4619      	mov	r1, r3
 800266a:	4610      	mov	r0, r2
 800266c:	f7ff fd1c 	bl	80020a8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	7f5b      	ldrb	r3, [r3, #29]
 8002674:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800267a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002680:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002686:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800268e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800269a:	2b01      	cmp	r3, #1
 800269c:	d106      	bne.n	80026ac <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a2:	3b01      	subs	r3, #1
 80026a4:	045b      	lsls	r3, r3, #17
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d009      	beq.n	80026c8 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68da      	ldr	r2, [r3, #12]
 80026ce:	4b4b      	ldr	r3, [pc, #300]	; (80027fc <HAL_ADC_Init+0x310>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	69b9      	ldr	r1, [r7, #24]
 80026d8:	430b      	orrs	r3, r1
 80026da:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fed1 	bl	800249e <LL_ADC_REG_IsConversionOngoing>
 80026fc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fede 	bl	80024c4 <LL_ADC_INJ_IsConversionOngoing>
 8002708:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d17f      	bne.n	8002810 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d17c      	bne.n	8002810 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800271a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002722:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002732:	f023 0302 	bic.w	r3, r3, #2
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6812      	ldr	r2, [r2, #0]
 800273a:	69b9      	ldr	r1, [r7, #24]
 800273c:	430b      	orrs	r3, r1
 800273e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d017      	beq.n	8002778 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691a      	ldr	r2, [r3, #16]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002756:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002760:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002764:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6911      	ldr	r1, [r2, #16]
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	430b      	orrs	r3, r1
 8002772:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002776:	e013      	b.n	80027a0 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002786:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6812      	ldr	r2, [r2, #0]
 8002794:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002798:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800279c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d12a      	bne.n	8002800 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80027b4:	f023 0304 	bic.w	r3, r3, #4
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027c0:	4311      	orrs	r1, r2
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80027c6:	4311      	orrs	r1, r2
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80027cc:	430a      	orrs	r2, r1
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f042 0201 	orr.w	r2, r2, #1
 80027d8:	611a      	str	r2, [r3, #16]
 80027da:	e019      	b.n	8002810 <HAL_ADC_Init+0x324>
 80027dc:	200026d4 	.word	0x200026d4
 80027e0:	053e2d63 	.word	0x053e2d63
 80027e4:	50000100 	.word	0x50000100
 80027e8:	50000400 	.word	0x50000400
 80027ec:	50000500 	.word	0x50000500
 80027f0:	50000600 	.word	0x50000600
 80027f4:	50000300 	.word	0x50000300
 80027f8:	50000700 	.word	0x50000700
 80027fc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	691a      	ldr	r2, [r3, #16]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0201 	bic.w	r2, r2, #1
 800280e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d10c      	bne.n	8002832 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	f023 010f 	bic.w	r1, r3, #15
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	1e5a      	subs	r2, r3, #1
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	631a      	str	r2, [r3, #48]	; 0x30
 8002830:	e007      	b.n	8002842 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 020f 	bic.w	r2, r2, #15
 8002840:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002846:	f023 0303 	bic.w	r3, r3, #3
 800284a:	f043 0201 	orr.w	r2, r3, #1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	65da      	str	r2, [r3, #92]	; 0x5c
 8002852:	e007      	b.n	8002864 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002858:	f043 0210 	orr.w	r2, r3, #16
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002864:	7ffb      	ldrb	r3, [r7, #31]
}
 8002866:	4618      	mov	r0, r3
 8002868:	3724      	adds	r7, #36	; 0x24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd90      	pop	{r4, r7, pc}
 800286e:	bf00      	nop

08002870 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002884:	d004      	beq.n	8002890 <HAL_ADC_Start_DMA+0x20>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a5a      	ldr	r2, [pc, #360]	; (80029f4 <HAL_ADC_Start_DMA+0x184>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d101      	bne.n	8002894 <HAL_ADC_Start_DMA+0x24>
 8002890:	4b59      	ldr	r3, [pc, #356]	; (80029f8 <HAL_ADC_Start_DMA+0x188>)
 8002892:	e000      	b.n	8002896 <HAL_ADC_Start_DMA+0x26>
 8002894:	4b59      	ldr	r3, [pc, #356]	; (80029fc <HAL_ADC_Start_DMA+0x18c>)
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff fd6a 	bl	8002370 <LL_ADC_GetMultimode>
 800289c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff fdfb 	bl	800249e <LL_ADC_REG_IsConversionOngoing>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f040 809b 	bne.w	80029e6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_ADC_Start_DMA+0x4e>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e096      	b.n	80029ec <HAL_ADC_Start_DMA+0x17c>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a4d      	ldr	r2, [pc, #308]	; (8002a00 <HAL_ADC_Start_DMA+0x190>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d008      	beq.n	80028e2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d005      	beq.n	80028e2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	2b05      	cmp	r3, #5
 80028da:	d002      	beq.n	80028e2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	2b09      	cmp	r3, #9
 80028e0:	d17a      	bne.n	80029d8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 fce2 	bl	80032ac <ADC_Enable>
 80028e8:	4603      	mov	r3, r0
 80028ea:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80028ec:	7dfb      	ldrb	r3, [r7, #23]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d16d      	bne.n	80029ce <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028fa:	f023 0301 	bic.w	r3, r3, #1
 80028fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a3a      	ldr	r2, [pc, #232]	; (80029f4 <HAL_ADC_Start_DMA+0x184>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d009      	beq.n	8002924 <HAL_ADC_Start_DMA+0xb4>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a3b      	ldr	r2, [pc, #236]	; (8002a04 <HAL_ADC_Start_DMA+0x194>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d002      	beq.n	8002920 <HAL_ADC_Start_DMA+0xb0>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	e003      	b.n	8002928 <HAL_ADC_Start_DMA+0xb8>
 8002920:	4b39      	ldr	r3, [pc, #228]	; (8002a08 <HAL_ADC_Start_DMA+0x198>)
 8002922:	e001      	b.n	8002928 <HAL_ADC_Start_DMA+0xb8>
 8002924:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	4293      	cmp	r3, r2
 800292e:	d002      	beq.n	8002936 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d105      	bne.n	8002942 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002946:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d006      	beq.n	800295c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002952:	f023 0206 	bic.w	r2, r3, #6
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	661a      	str	r2, [r3, #96]	; 0x60
 800295a:	e002      	b.n	8002962 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002966:	4a29      	ldr	r2, [pc, #164]	; (8002a0c <HAL_ADC_Start_DMA+0x19c>)
 8002968:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296e:	4a28      	ldr	r2, [pc, #160]	; (8002a10 <HAL_ADC_Start_DMA+0x1a0>)
 8002970:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002976:	4a27      	ldr	r2, [pc, #156]	; (8002a14 <HAL_ADC_Start_DMA+0x1a4>)
 8002978:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	221c      	movs	r2, #28
 8002980:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f042 0210 	orr.w	r2, r2, #16
 8002998:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f042 0201 	orr.w	r2, r2, #1
 80029a8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	3340      	adds	r3, #64	; 0x40
 80029b4:	4619      	mov	r1, r3
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f001 fc77 	bl	80042ac <HAL_DMA_Start_IT>
 80029be:	4603      	mov	r3, r0
 80029c0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff fd55 	bl	8002476 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80029cc:	e00d      	b.n	80029ea <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80029d6:	e008      	b.n	80029ea <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80029e4:	e001      	b.n	80029ea <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029e6:	2302      	movs	r3, #2
 80029e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80029ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	50000100 	.word	0x50000100
 80029f8:	50000300 	.word	0x50000300
 80029fc:	50000700 	.word	0x50000700
 8002a00:	50000600 	.word	0x50000600
 8002a04:	50000500 	.word	0x50000500
 8002a08:	50000400 	.word	0x50000400
 8002a0c:	08003371 	.word	0x08003371
 8002a10:	08003449 	.word	0x08003449
 8002a14:	08003465 	.word	0x08003465

08002a18 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b0b6      	sub	sp, #216	; 0xd8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d102      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x24>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	f000 bc13 	b.w	8003276 <HAL_ADC_ConfigChannel+0x84a>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff fd1e 	bl	800249e <LL_ADC_REG_IsConversionOngoing>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f040 83f3 	bne.w	8003250 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6818      	ldr	r0, [r3, #0]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	6859      	ldr	r1, [r3, #4]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	461a      	mov	r2, r3
 8002a78:	f7ff fbfb 	bl	8002272 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff fd0c 	bl	800249e <LL_ADC_REG_IsConversionOngoing>
 8002a86:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff fd18 	bl	80024c4 <LL_ADC_INJ_IsConversionOngoing>
 8002a94:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a98:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f040 81d9 	bne.w	8002e54 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002aa2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f040 81d4 	bne.w	8002e54 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ab4:	d10f      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6818      	ldr	r0, [r3, #0]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	f7ff fc02 	bl	80022ca <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fba9 	bl	8002226 <LL_ADC_SetSamplingTimeCommonConfig>
 8002ad4:	e00e      	b.n	8002af4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	6819      	ldr	r1, [r3, #0]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	f7ff fbf1 	bl	80022ca <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2100      	movs	r1, #0
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff fb99 	bl	8002226 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	695a      	ldr	r2, [r3, #20]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	08db      	lsrs	r3, r3, #3
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d022      	beq.n	8002b5c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	6919      	ldr	r1, [r3, #16]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b26:	f7ff faf3 	bl	8002110 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	6919      	ldr	r1, [r3, #16]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	461a      	mov	r2, r3
 8002b38:	f7ff fb3f 	bl	80021ba <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6818      	ldr	r0, [r3, #0]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	6919      	ldr	r1, [r3, #16]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	7f1b      	ldrb	r3, [r3, #28]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d102      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x126>
 8002b4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b50:	e000      	b.n	8002b54 <HAL_ADC_ConfigChannel+0x128>
 8002b52:	2300      	movs	r3, #0
 8002b54:	461a      	mov	r2, r3
 8002b56:	f7ff fb4b 	bl	80021f0 <LL_ADC_SetOffsetSaturation>
 8002b5a:	e17b      	b.n	8002e54 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2100      	movs	r1, #0
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff faf8 	bl	8002158 <LL_ADC_GetOffsetChannel>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10a      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x15c>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2100      	movs	r1, #0
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff faed 	bl	8002158 <LL_ADC_GetOffsetChannel>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	0e9b      	lsrs	r3, r3, #26
 8002b82:	f003 021f 	and.w	r2, r3, #31
 8002b86:	e01e      	b.n	8002bc6 <HAL_ADC_ConfigChannel+0x19a>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff fae2 	bl	8002158 <LL_ADC_GetOffsetChannel>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b9e:	fa93 f3a3 	rbit	r3, r3
 8002ba2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ba6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002baa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002bb6:	2320      	movs	r3, #32
 8002bb8:	e004      	b.n	8002bc4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002bba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d105      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x1b2>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	0e9b      	lsrs	r3, r3, #26
 8002bd8:	f003 031f 	and.w	r3, r3, #31
 8002bdc:	e018      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x1e4>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002bea:	fa93 f3a3 	rbit	r3, r3
 8002bee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002bf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002bfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002c02:	2320      	movs	r3, #32
 8002c04:	e004      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002c06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c0a:	fab3 f383 	clz	r3, r3
 8002c0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d106      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff fab1 	bl	8002184 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2101      	movs	r1, #1
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff fa95 	bl	8002158 <LL_ADC_GetOffsetChannel>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10a      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x222>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff fa8a 	bl	8002158 <LL_ADC_GetOffsetChannel>
 8002c44:	4603      	mov	r3, r0
 8002c46:	0e9b      	lsrs	r3, r3, #26
 8002c48:	f003 021f 	and.w	r2, r3, #31
 8002c4c:	e01e      	b.n	8002c8c <HAL_ADC_ConfigChannel+0x260>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2101      	movs	r1, #1
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff fa7f 	bl	8002158 <LL_ADC_GetOffsetChannel>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c64:	fa93 f3a3 	rbit	r3, r3
 8002c68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002c6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002c74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002c7c:	2320      	movs	r3, #32
 8002c7e:	e004      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002c80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c84:	fab3 f383 	clz	r3, r3
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d105      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x278>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	0e9b      	lsrs	r3, r3, #26
 8002c9e:	f003 031f 	and.w	r3, r3, #31
 8002ca2:	e018      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x2aa>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cb0:	fa93 f3a3 	rbit	r3, r3
 8002cb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002cb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002cbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002cc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002cc8:	2320      	movs	r3, #32
 8002cca:	e004      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002ccc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cd0:	fab3 f383 	clz	r3, r3
 8002cd4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d106      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff fa4e 	bl	8002184 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2102      	movs	r1, #2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff fa32 	bl	8002158 <LL_ADC_GetOffsetChannel>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10a      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x2e8>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2102      	movs	r1, #2
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff fa27 	bl	8002158 <LL_ADC_GetOffsetChannel>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	0e9b      	lsrs	r3, r3, #26
 8002d0e:	f003 021f 	and.w	r2, r3, #31
 8002d12:	e01e      	b.n	8002d52 <HAL_ADC_ConfigChannel+0x326>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2102      	movs	r1, #2
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff fa1c 	bl	8002158 <LL_ADC_GetOffsetChannel>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002d32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002d3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002d42:	2320      	movs	r3, #32
 8002d44:	e004      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002d46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d4a:	fab3 f383 	clz	r3, r3
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d105      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x33e>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	0e9b      	lsrs	r3, r3, #26
 8002d64:	f003 031f 	and.w	r3, r3, #31
 8002d68:	e016      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x36c>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002d7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002d82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002d8a:	2320      	movs	r3, #32
 8002d8c:	e004      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002d8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d92:	fab3 f383 	clz	r3, r3
 8002d96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d106      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2200      	movs	r2, #0
 8002da2:	2102      	movs	r1, #2
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff f9ed 	bl	8002184 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2103      	movs	r1, #3
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff f9d1 	bl	8002158 <LL_ADC_GetOffsetChannel>
 8002db6:	4603      	mov	r3, r0
 8002db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10a      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x3aa>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2103      	movs	r1, #3
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff f9c6 	bl	8002158 <LL_ADC_GetOffsetChannel>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	0e9b      	lsrs	r3, r3, #26
 8002dd0:	f003 021f 	and.w	r2, r3, #31
 8002dd4:	e017      	b.n	8002e06 <HAL_ADC_ConfigChannel+0x3da>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2103      	movs	r1, #3
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff f9bb 	bl	8002158 <LL_ADC_GetOffsetChannel>
 8002de2:	4603      	mov	r3, r0
 8002de4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002de8:	fa93 f3a3 	rbit	r3, r3
 8002dec:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002dee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002df0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002df2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002df8:	2320      	movs	r3, #32
 8002dfa:	e003      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002dfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dfe:	fab3 f383 	clz	r3, r3
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d105      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x3f2>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	0e9b      	lsrs	r3, r3, #26
 8002e18:	f003 031f 	and.w	r3, r3, #31
 8002e1c:	e011      	b.n	8002e42 <HAL_ADC_ConfigChannel+0x416>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e26:	fa93 f3a3 	rbit	r3, r3
 8002e2a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002e2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002e36:	2320      	movs	r3, #32
 8002e38:	e003      	b.n	8002e42 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e3c:	fab3 f383 	clz	r3, r3
 8002e40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d106      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2103      	movs	r1, #3
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff f998 	bl	8002184 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff faf9 	bl	8002450 <LL_ADC_IsEnabled>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f040 813d 	bne.w	80030e0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6818      	ldr	r0, [r3, #0]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	6819      	ldr	r1, [r3, #0]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	461a      	mov	r2, r3
 8002e74:	f7ff fa54 	bl	8002320 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	4aa2      	ldr	r2, [pc, #648]	; (8003108 <HAL_ADC_ConfigChannel+0x6dc>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	f040 812e 	bne.w	80030e0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10b      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x480>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	0e9b      	lsrs	r3, r3, #26
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	f003 031f 	and.w	r3, r3, #31
 8002ea0:	2b09      	cmp	r3, #9
 8002ea2:	bf94      	ite	ls
 8002ea4:	2301      	movls	r3, #1
 8002ea6:	2300      	movhi	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	e019      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x4b4>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eb4:	fa93 f3a3 	rbit	r3, r3
 8002eb8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002eba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ebc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002ebe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002ec4:	2320      	movs	r3, #32
 8002ec6:	e003      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002ec8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002eca:	fab3 f383 	clz	r3, r3
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	f003 031f 	and.w	r3, r3, #31
 8002ed6:	2b09      	cmp	r3, #9
 8002ed8:	bf94      	ite	ls
 8002eda:	2301      	movls	r3, #1
 8002edc:	2300      	movhi	r3, #0
 8002ede:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d079      	beq.n	8002fd8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d107      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x4d4>
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	0e9b      	lsrs	r3, r3, #26
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	069b      	lsls	r3, r3, #26
 8002efa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002efe:	e015      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x500>
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f08:	fa93 f3a3 	rbit	r3, r3
 8002f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f10:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002f12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002f18:	2320      	movs	r3, #32
 8002f1a:	e003      	b.n	8002f24 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f1e:	fab3 f383 	clz	r3, r3
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	3301      	adds	r3, #1
 8002f26:	069b      	lsls	r3, r3, #26
 8002f28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d109      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x520>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	0e9b      	lsrs	r3, r3, #26
 8002f3e:	3301      	adds	r3, #1
 8002f40:	f003 031f 	and.w	r3, r3, #31
 8002f44:	2101      	movs	r1, #1
 8002f46:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4a:	e017      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x550>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f54:	fa93 f3a3 	rbit	r3, r3
 8002f58:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f5c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002f64:	2320      	movs	r3, #32
 8002f66:	e003      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f6a:	fab3 f383 	clz	r3, r3
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	3301      	adds	r3, #1
 8002f72:	f003 031f 	and.w	r3, r3, #31
 8002f76:	2101      	movs	r1, #1
 8002f78:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7c:	ea42 0103 	orr.w	r1, r2, r3
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10a      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x576>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	0e9b      	lsrs	r3, r3, #26
 8002f92:	3301      	adds	r3, #1
 8002f94:	f003 021f 	and.w	r2, r3, #31
 8002f98:	4613      	mov	r3, r2
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	4413      	add	r3, r2
 8002f9e:	051b      	lsls	r3, r3, #20
 8002fa0:	e018      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x5a8>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002faa:	fa93 f3a3 	rbit	r3, r3
 8002fae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002fba:	2320      	movs	r3, #32
 8002fbc:	e003      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fc0:	fab3 f383 	clz	r3, r3
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	f003 021f 	and.w	r2, r3, #31
 8002fcc:	4613      	mov	r3, r2
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	4413      	add	r3, r2
 8002fd2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fd4:	430b      	orrs	r3, r1
 8002fd6:	e07e      	b.n	80030d6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d107      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x5c8>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	0e9b      	lsrs	r3, r3, #26
 8002fea:	3301      	adds	r3, #1
 8002fec:	069b      	lsls	r3, r3, #26
 8002fee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ff2:	e015      	b.n	8003020 <HAL_ADC_ConfigChannel+0x5f4>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffc:	fa93 f3a3 	rbit	r3, r3
 8003000:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003004:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800300c:	2320      	movs	r3, #32
 800300e:	e003      	b.n	8003018 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003012:	fab3 f383 	clz	r3, r3
 8003016:	b2db      	uxtb	r3, r3
 8003018:	3301      	adds	r3, #1
 800301a:	069b      	lsls	r3, r3, #26
 800301c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003028:	2b00      	cmp	r3, #0
 800302a:	d109      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x614>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	0e9b      	lsrs	r3, r3, #26
 8003032:	3301      	adds	r3, #1
 8003034:	f003 031f 	and.w	r3, r3, #31
 8003038:	2101      	movs	r1, #1
 800303a:	fa01 f303 	lsl.w	r3, r1, r3
 800303e:	e017      	b.n	8003070 <HAL_ADC_ConfigChannel+0x644>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	fa93 f3a3 	rbit	r3, r3
 800304c:	61fb      	str	r3, [r7, #28]
  return result;
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003058:	2320      	movs	r3, #32
 800305a:	e003      	b.n	8003064 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	fab3 f383 	clz	r3, r3
 8003062:	b2db      	uxtb	r3, r3
 8003064:	3301      	adds	r3, #1
 8003066:	f003 031f 	and.w	r3, r3, #31
 800306a:	2101      	movs	r1, #1
 800306c:	fa01 f303 	lsl.w	r3, r1, r3
 8003070:	ea42 0103 	orr.w	r1, r2, r3
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10d      	bne.n	800309c <HAL_ADC_ConfigChannel+0x670>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	0e9b      	lsrs	r3, r3, #26
 8003086:	3301      	adds	r3, #1
 8003088:	f003 021f 	and.w	r2, r3, #31
 800308c:	4613      	mov	r3, r2
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	4413      	add	r3, r2
 8003092:	3b1e      	subs	r3, #30
 8003094:	051b      	lsls	r3, r3, #20
 8003096:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800309a:	e01b      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x6a8>
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	fa93 f3a3 	rbit	r3, r3
 80030a8:	613b      	str	r3, [r7, #16]
  return result;
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80030b4:	2320      	movs	r3, #32
 80030b6:	e003      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	fab3 f383 	clz	r3, r3
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	3301      	adds	r3, #1
 80030c2:	f003 021f 	and.w	r2, r3, #31
 80030c6:	4613      	mov	r3, r2
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	4413      	add	r3, r2
 80030cc:	3b1e      	subs	r3, #30
 80030ce:	051b      	lsls	r3, r3, #20
 80030d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030d4:	430b      	orrs	r3, r1
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	6892      	ldr	r2, [r2, #8]
 80030da:	4619      	mov	r1, r3
 80030dc:	f7ff f8f5 	bl	80022ca <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4b09      	ldr	r3, [pc, #36]	; (800310c <HAL_ADC_ConfigChannel+0x6e0>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 80be 	beq.w	800326a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030f6:	d004      	beq.n	8003102 <HAL_ADC_ConfigChannel+0x6d6>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a04      	ldr	r2, [pc, #16]	; (8003110 <HAL_ADC_ConfigChannel+0x6e4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d10a      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x6ec>
 8003102:	4b04      	ldr	r3, [pc, #16]	; (8003114 <HAL_ADC_ConfigChannel+0x6e8>)
 8003104:	e009      	b.n	800311a <HAL_ADC_ConfigChannel+0x6ee>
 8003106:	bf00      	nop
 8003108:	407f0000 	.word	0x407f0000
 800310c:	80080000 	.word	0x80080000
 8003110:	50000100 	.word	0x50000100
 8003114:	50000300 	.word	0x50000300
 8003118:	4b59      	ldr	r3, [pc, #356]	; (8003280 <HAL_ADC_ConfigChannel+0x854>)
 800311a:	4618      	mov	r0, r3
 800311c:	f7fe ffea 	bl	80020f4 <LL_ADC_GetCommonPathInternalCh>
 8003120:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a56      	ldr	r2, [pc, #344]	; (8003284 <HAL_ADC_ConfigChannel+0x858>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d004      	beq.n	8003138 <HAL_ADC_ConfigChannel+0x70c>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a55      	ldr	r2, [pc, #340]	; (8003288 <HAL_ADC_ConfigChannel+0x85c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d13a      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003138:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800313c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d134      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800314c:	d005      	beq.n	800315a <HAL_ADC_ConfigChannel+0x72e>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a4e      	ldr	r2, [pc, #312]	; (800328c <HAL_ADC_ConfigChannel+0x860>)
 8003154:	4293      	cmp	r3, r2
 8003156:	f040 8085 	bne.w	8003264 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003162:	d004      	beq.n	800316e <HAL_ADC_ConfigChannel+0x742>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a49      	ldr	r2, [pc, #292]	; (8003290 <HAL_ADC_ConfigChannel+0x864>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d101      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x746>
 800316e:	4a49      	ldr	r2, [pc, #292]	; (8003294 <HAL_ADC_ConfigChannel+0x868>)
 8003170:	e000      	b.n	8003174 <HAL_ADC_ConfigChannel+0x748>
 8003172:	4a43      	ldr	r2, [pc, #268]	; (8003280 <HAL_ADC_ConfigChannel+0x854>)
 8003174:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003178:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800317c:	4619      	mov	r1, r3
 800317e:	4610      	mov	r0, r2
 8003180:	f7fe ffa5 	bl	80020ce <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003184:	4b44      	ldr	r3, [pc, #272]	; (8003298 <HAL_ADC_ConfigChannel+0x86c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	099b      	lsrs	r3, r3, #6
 800318a:	4a44      	ldr	r2, [pc, #272]	; (800329c <HAL_ADC_ConfigChannel+0x870>)
 800318c:	fba2 2303 	umull	r2, r3, r2, r3
 8003190:	099b      	lsrs	r3, r3, #6
 8003192:	1c5a      	adds	r2, r3, #1
 8003194:	4613      	mov	r3, r2
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800319e:	e002      	b.n	80031a6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1f9      	bne.n	80031a0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031ac:	e05a      	b.n	8003264 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a3b      	ldr	r2, [pc, #236]	; (80032a0 <HAL_ADC_ConfigChannel+0x874>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d125      	bne.n	8003204 <HAL_ADC_ConfigChannel+0x7d8>
 80031b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d11f      	bne.n	8003204 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a31      	ldr	r2, [pc, #196]	; (8003290 <HAL_ADC_ConfigChannel+0x864>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d104      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x7ac>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a34      	ldr	r2, [pc, #208]	; (80032a4 <HAL_ADC_ConfigChannel+0x878>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d047      	beq.n	8003268 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031e0:	d004      	beq.n	80031ec <HAL_ADC_ConfigChannel+0x7c0>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a2a      	ldr	r2, [pc, #168]	; (8003290 <HAL_ADC_ConfigChannel+0x864>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d101      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x7c4>
 80031ec:	4a29      	ldr	r2, [pc, #164]	; (8003294 <HAL_ADC_ConfigChannel+0x868>)
 80031ee:	e000      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x7c6>
 80031f0:	4a23      	ldr	r2, [pc, #140]	; (8003280 <HAL_ADC_ConfigChannel+0x854>)
 80031f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031fa:	4619      	mov	r1, r3
 80031fc:	4610      	mov	r0, r2
 80031fe:	f7fe ff66 	bl	80020ce <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003202:	e031      	b.n	8003268 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a27      	ldr	r2, [pc, #156]	; (80032a8 <HAL_ADC_ConfigChannel+0x87c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d12d      	bne.n	800326a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800320e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d127      	bne.n	800326a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a1c      	ldr	r2, [pc, #112]	; (8003290 <HAL_ADC_ConfigChannel+0x864>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d022      	beq.n	800326a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800322c:	d004      	beq.n	8003238 <HAL_ADC_ConfigChannel+0x80c>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a17      	ldr	r2, [pc, #92]	; (8003290 <HAL_ADC_ConfigChannel+0x864>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d101      	bne.n	800323c <HAL_ADC_ConfigChannel+0x810>
 8003238:	4a16      	ldr	r2, [pc, #88]	; (8003294 <HAL_ADC_ConfigChannel+0x868>)
 800323a:	e000      	b.n	800323e <HAL_ADC_ConfigChannel+0x812>
 800323c:	4a10      	ldr	r2, [pc, #64]	; (8003280 <HAL_ADC_ConfigChannel+0x854>)
 800323e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003242:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003246:	4619      	mov	r1, r3
 8003248:	4610      	mov	r0, r2
 800324a:	f7fe ff40 	bl	80020ce <LL_ADC_SetCommonPathInternalCh>
 800324e:	e00c      	b.n	800326a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003254:	f043 0220 	orr.w	r2, r3, #32
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003262:	e002      	b.n	800326a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003264:	bf00      	nop
 8003266:	e000      	b.n	800326a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003268:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003272:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003276:	4618      	mov	r0, r3
 8003278:	37d8      	adds	r7, #216	; 0xd8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	50000700 	.word	0x50000700
 8003284:	c3210000 	.word	0xc3210000
 8003288:	90c00010 	.word	0x90c00010
 800328c:	50000600 	.word	0x50000600
 8003290:	50000100 	.word	0x50000100
 8003294:	50000300 	.word	0x50000300
 8003298:	200026d4 	.word	0x200026d4
 800329c:	053e2d63 	.word	0x053e2d63
 80032a0:	c7520000 	.word	0xc7520000
 80032a4:	50000500 	.word	0x50000500
 80032a8:	cb840000 	.word	0xcb840000

080032ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff f8c9 	bl	8002450 <LL_ADC_IsEnabled>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d14d      	bne.n	8003360 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	4b28      	ldr	r3, [pc, #160]	; (800336c <ADC_Enable+0xc0>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00d      	beq.n	80032ee <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d6:	f043 0210 	orr.w	r2, r3, #16
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032e2:	f043 0201 	orr.w	r2, r3, #1
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e039      	b.n	8003362 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff f898 	bl	8002428 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80032f8:	f7fe fea8 	bl	800204c <HAL_GetTick>
 80032fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032fe:	e028      	b.n	8003352 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff f8a3 	bl	8002450 <LL_ADC_IsEnabled>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d104      	bne.n	800331a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff f887 	bl	8002428 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800331a:	f7fe fe97 	bl	800204c <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d914      	bls.n	8003352 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b01      	cmp	r3, #1
 8003334:	d00d      	beq.n	8003352 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333a:	f043 0210 	orr.w	r2, r3, #16
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003346:	f043 0201 	orr.w	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e007      	b.n	8003362 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b01      	cmp	r3, #1
 800335e:	d1cf      	bne.n	8003300 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	8000003f 	.word	0x8000003f

08003370 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003382:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003386:	2b00      	cmp	r3, #0
 8003388:	d14b      	bne.n	8003422 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0308 	and.w	r3, r3, #8
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d021      	beq.n	80033e8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fe ff4f 	bl	800224c <LL_ADC_REG_IsTriggerSourceSWStart>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d032      	beq.n	800341a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d12b      	bne.n	800341a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d11f      	bne.n	800341a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033de:	f043 0201 	orr.w	r2, r3, #1
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80033e6:	e018      	b.n	800341a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d111      	bne.n	800341a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003406:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d105      	bne.n	800341a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003412:	f043 0201 	orr.w	r2, r3, #1
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f7fe f862 	bl	80014e4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003420:	e00e      	b.n	8003440 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003426:	f003 0310 	and.w	r3, r3, #16
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f7ff faf2 	bl	8002a18 <HAL_ADC_ErrorCallback>
}
 8003434:	e004      	b.n	8003440 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	4798      	blx	r3
}
 8003440:	bf00      	nop
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003454:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f7fe f85e 	bl	8001518 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800345c:	bf00      	nop
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003470:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003476:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003482:	f043 0204 	orr.w	r2, r3, #4
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f7ff fac4 	bl	8002a18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003490:	bf00      	nop
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <LL_ADC_IsEnabled>:
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <LL_ADC_IsEnabled+0x18>
 80034ac:	2301      	movs	r3, #1
 80034ae:	e000      	b.n	80034b2 <LL_ADC_IsEnabled+0x1a>
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <LL_ADC_REG_IsConversionOngoing>:
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 0304 	and.w	r3, r3, #4
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d101      	bne.n	80034d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80034e4:	b590      	push	{r4, r7, lr}
 80034e6:	b0a1      	sub	sp, #132	; 0x84
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d101      	bne.n	8003502 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80034fe:	2302      	movs	r3, #2
 8003500:	e0e7      	b.n	80036d2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800350a:	2300      	movs	r3, #0
 800350c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800350e:	2300      	movs	r3, #0
 8003510:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800351a:	d102      	bne.n	8003522 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800351c:	4b6f      	ldr	r3, [pc, #444]	; (80036dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	e009      	b.n	8003536 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a6e      	ldr	r2, [pc, #440]	; (80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d102      	bne.n	8003532 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800352c:	4b6d      	ldr	r3, [pc, #436]	; (80036e4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800352e:	60bb      	str	r3, [r7, #8]
 8003530:	e001      	b.n	8003536 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003532:	2300      	movs	r3, #0
 8003534:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10b      	bne.n	8003554 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003540:	f043 0220 	orr.w	r2, r3, #32
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0be      	b.n	80036d2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff ffb1 	bl	80034be <LL_ADC_REG_IsConversionOngoing>
 800355c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff ffab 	bl	80034be <LL_ADC_REG_IsConversionOngoing>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	f040 80a0 	bne.w	80036b0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003570:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003572:	2b00      	cmp	r3, #0
 8003574:	f040 809c 	bne.w	80036b0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003580:	d004      	beq.n	800358c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a55      	ldr	r2, [pc, #340]	; (80036dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d101      	bne.n	8003590 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800358c:	4b56      	ldr	r3, [pc, #344]	; (80036e8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800358e:	e000      	b.n	8003592 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003590:	4b56      	ldr	r3, [pc, #344]	; (80036ec <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003592:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d04b      	beq.n	8003634 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800359c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	6859      	ldr	r1, [r3, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035ae:	035b      	lsls	r3, r3, #13
 80035b0:	430b      	orrs	r3, r1
 80035b2:	431a      	orrs	r2, r3
 80035b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035b6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035c0:	d004      	beq.n	80035cc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a45      	ldr	r2, [pc, #276]	; (80036dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d10f      	bne.n	80035ec <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80035cc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80035d0:	f7ff ff62 	bl	8003498 <LL_ADC_IsEnabled>
 80035d4:	4604      	mov	r4, r0
 80035d6:	4841      	ldr	r0, [pc, #260]	; (80036dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80035d8:	f7ff ff5e 	bl	8003498 <LL_ADC_IsEnabled>
 80035dc:	4603      	mov	r3, r0
 80035de:	4323      	orrs	r3, r4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	bf0c      	ite	eq
 80035e4:	2301      	moveq	r3, #1
 80035e6:	2300      	movne	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	e012      	b.n	8003612 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80035ec:	483c      	ldr	r0, [pc, #240]	; (80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80035ee:	f7ff ff53 	bl	8003498 <LL_ADC_IsEnabled>
 80035f2:	4604      	mov	r4, r0
 80035f4:	483b      	ldr	r0, [pc, #236]	; (80036e4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80035f6:	f7ff ff4f 	bl	8003498 <LL_ADC_IsEnabled>
 80035fa:	4603      	mov	r3, r0
 80035fc:	431c      	orrs	r4, r3
 80035fe:	483c      	ldr	r0, [pc, #240]	; (80036f0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003600:	f7ff ff4a 	bl	8003498 <LL_ADC_IsEnabled>
 8003604:	4603      	mov	r3, r0
 8003606:	4323      	orrs	r3, r4
 8003608:	2b00      	cmp	r3, #0
 800360a:	bf0c      	ite	eq
 800360c:	2301      	moveq	r3, #1
 800360e:	2300      	movne	r3, #0
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d056      	beq.n	80036c4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800361e:	f023 030f 	bic.w	r3, r3, #15
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	6811      	ldr	r1, [r2, #0]
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	6892      	ldr	r2, [r2, #8]
 800362a:	430a      	orrs	r2, r1
 800362c:	431a      	orrs	r2, r3
 800362e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003630:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003632:	e047      	b.n	80036c4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003634:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800363c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800363e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003648:	d004      	beq.n	8003654 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a23      	ldr	r2, [pc, #140]	; (80036dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d10f      	bne.n	8003674 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003654:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003658:	f7ff ff1e 	bl	8003498 <LL_ADC_IsEnabled>
 800365c:	4604      	mov	r4, r0
 800365e:	481f      	ldr	r0, [pc, #124]	; (80036dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003660:	f7ff ff1a 	bl	8003498 <LL_ADC_IsEnabled>
 8003664:	4603      	mov	r3, r0
 8003666:	4323      	orrs	r3, r4
 8003668:	2b00      	cmp	r3, #0
 800366a:	bf0c      	ite	eq
 800366c:	2301      	moveq	r3, #1
 800366e:	2300      	movne	r3, #0
 8003670:	b2db      	uxtb	r3, r3
 8003672:	e012      	b.n	800369a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003674:	481a      	ldr	r0, [pc, #104]	; (80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003676:	f7ff ff0f 	bl	8003498 <LL_ADC_IsEnabled>
 800367a:	4604      	mov	r4, r0
 800367c:	4819      	ldr	r0, [pc, #100]	; (80036e4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800367e:	f7ff ff0b 	bl	8003498 <LL_ADC_IsEnabled>
 8003682:	4603      	mov	r3, r0
 8003684:	431c      	orrs	r4, r3
 8003686:	481a      	ldr	r0, [pc, #104]	; (80036f0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003688:	f7ff ff06 	bl	8003498 <LL_ADC_IsEnabled>
 800368c:	4603      	mov	r3, r0
 800368e:	4323      	orrs	r3, r4
 8003690:	2b00      	cmp	r3, #0
 8003692:	bf0c      	ite	eq
 8003694:	2301      	moveq	r3, #1
 8003696:	2300      	movne	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d012      	beq.n	80036c4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800369e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80036a6:	f023 030f 	bic.w	r3, r3, #15
 80036aa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036ac:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036ae:	e009      	b.n	80036c4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b4:	f043 0220 	orr.w	r2, r3, #32
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80036c2:	e000      	b.n	80036c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80036ce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3784      	adds	r7, #132	; 0x84
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd90      	pop	{r4, r7, pc}
 80036da:	bf00      	nop
 80036dc:	50000100 	.word	0x50000100
 80036e0:	50000400 	.word	0x50000400
 80036e4:	50000500 	.word	0x50000500
 80036e8:	50000300 	.word	0x50000300
 80036ec:	50000700 	.word	0x50000700
 80036f0:	50000600 	.word	0x50000600

080036f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003704:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <__NVIC_SetPriorityGrouping+0x44>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003710:	4013      	ands	r3, r2
 8003712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800371c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003726:	4a04      	ldr	r2, [pc, #16]	; (8003738 <__NVIC_SetPriorityGrouping+0x44>)
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	60d3      	str	r3, [r2, #12]
}
 800372c:	bf00      	nop
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	e000ed00 	.word	0xe000ed00

0800373c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003740:	4b04      	ldr	r3, [pc, #16]	; (8003754 <__NVIC_GetPriorityGrouping+0x18>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	0a1b      	lsrs	r3, r3, #8
 8003746:	f003 0307 	and.w	r3, r3, #7
}
 800374a:	4618      	mov	r0, r3
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	e000ed00 	.word	0xe000ed00

08003758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003766:	2b00      	cmp	r3, #0
 8003768:	db0b      	blt.n	8003782 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800376a:	79fb      	ldrb	r3, [r7, #7]
 800376c:	f003 021f 	and.w	r2, r3, #31
 8003770:	4907      	ldr	r1, [pc, #28]	; (8003790 <__NVIC_EnableIRQ+0x38>)
 8003772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	2001      	movs	r0, #1
 800377a:	fa00 f202 	lsl.w	r2, r0, r2
 800377e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	e000e100 	.word	0xe000e100

08003794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	6039      	str	r1, [r7, #0]
 800379e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	db0a      	blt.n	80037be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	490c      	ldr	r1, [pc, #48]	; (80037e0 <__NVIC_SetPriority+0x4c>)
 80037ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b2:	0112      	lsls	r2, r2, #4
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	440b      	add	r3, r1
 80037b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037bc:	e00a      	b.n	80037d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	4908      	ldr	r1, [pc, #32]	; (80037e4 <__NVIC_SetPriority+0x50>)
 80037c4:	79fb      	ldrb	r3, [r7, #7]
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	3b04      	subs	r3, #4
 80037cc:	0112      	lsls	r2, r2, #4
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	440b      	add	r3, r1
 80037d2:	761a      	strb	r2, [r3, #24]
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	e000e100 	.word	0xe000e100
 80037e4:	e000ed00 	.word	0xe000ed00

080037e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b089      	sub	sp, #36	; 0x24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f1c3 0307 	rsb	r3, r3, #7
 8003802:	2b04      	cmp	r3, #4
 8003804:	bf28      	it	cs
 8003806:	2304      	movcs	r3, #4
 8003808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	3304      	adds	r3, #4
 800380e:	2b06      	cmp	r3, #6
 8003810:	d902      	bls.n	8003818 <NVIC_EncodePriority+0x30>
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	3b03      	subs	r3, #3
 8003816:	e000      	b.n	800381a <NVIC_EncodePriority+0x32>
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800381c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	43da      	mvns	r2, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	401a      	ands	r2, r3
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003830:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	fa01 f303 	lsl.w	r3, r1, r3
 800383a:	43d9      	mvns	r1, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003840:	4313      	orrs	r3, r2
         );
}
 8003842:	4618      	mov	r0, r3
 8003844:	3724      	adds	r7, #36	; 0x24
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
	...

08003850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3b01      	subs	r3, #1
 800385c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003860:	d301      	bcc.n	8003866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003862:	2301      	movs	r3, #1
 8003864:	e00f      	b.n	8003886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003866:	4a0a      	ldr	r2, [pc, #40]	; (8003890 <SysTick_Config+0x40>)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3b01      	subs	r3, #1
 800386c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800386e:	210f      	movs	r1, #15
 8003870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003874:	f7ff ff8e 	bl	8003794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003878:	4b05      	ldr	r3, [pc, #20]	; (8003890 <SysTick_Config+0x40>)
 800387a:	2200      	movs	r2, #0
 800387c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800387e:	4b04      	ldr	r3, [pc, #16]	; (8003890 <SysTick_Config+0x40>)
 8003880:	2207      	movs	r2, #7
 8003882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	e000e010 	.word	0xe000e010

08003894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7ff ff29 	bl	80036f4 <__NVIC_SetPriorityGrouping>
}
 80038a2:	bf00      	nop
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b086      	sub	sp, #24
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	4603      	mov	r3, r0
 80038b2:	60b9      	str	r1, [r7, #8]
 80038b4:	607a      	str	r2, [r7, #4]
 80038b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038b8:	f7ff ff40 	bl	800373c <__NVIC_GetPriorityGrouping>
 80038bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	68b9      	ldr	r1, [r7, #8]
 80038c2:	6978      	ldr	r0, [r7, #20]
 80038c4:	f7ff ff90 	bl	80037e8 <NVIC_EncodePriority>
 80038c8:	4602      	mov	r2, r0
 80038ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ce:	4611      	mov	r1, r2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff ff5f 	bl	8003794 <__NVIC_SetPriority>
}
 80038d6:	bf00      	nop
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b082      	sub	sp, #8
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	4603      	mov	r3, r0
 80038e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff ff33 	bl	8003758 <__NVIC_EnableIRQ>
}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b082      	sub	sp, #8
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7ff ffa4 	bl	8003850 <SysTick_Config>
 8003908:	4603      	mov	r3, r0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e014      	b.n	800394e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	791b      	ldrb	r3, [r3, #4]
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d105      	bne.n	800393a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7fe f849 	bl	80019cc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2202      	movs	r2, #2
 800393e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b082      	sub	sp, #8
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	795b      	ldrb	r3, [r3, #5]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d101      	bne.n	800396c <HAL_DAC_Start+0x16>
 8003968:	2302      	movs	r3, #2
 800396a:	e043      	b.n	80039f4 <HAL_DAC_Start+0x9e>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2202      	movs	r2, #2
 8003976:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6819      	ldr	r1, [r3, #0]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	f003 0310 	and.w	r3, r3, #16
 8003984:	2201      	movs	r2, #1
 8003986:	409a      	lsls	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8003990:	2001      	movs	r0, #1
 8003992:	f7fe fb67 	bl	8002064 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10f      	bne.n	80039bc <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d11d      	bne.n	80039e6 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f042 0201 	orr.w	r2, r2, #1
 80039b8:	605a      	str	r2, [r3, #4]
 80039ba:	e014      	b.n	80039e6 <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	f003 0310 	and.w	r3, r3, #16
 80039cc:	2102      	movs	r1, #2
 80039ce:	fa01 f303 	lsl.w	r3, r1, r3
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d107      	bne.n	80039e6 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f042 0202 	orr.w	r2, r2, #2
 80039e4:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_DAC_Stop>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6819      	ldr	r1, [r3, #0]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	f003 0310 	and.w	r3, r3, #16
 8003a12:	2201      	movs	r2, #1
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	43da      	mvns	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	400a      	ands	r2, r1
 8003a20:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8003a22:	2001      	movs	r0, #1
 8003a24:	f7fe fb1e 	bl	8002064 <HAL_Delay>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	795b      	ldrb	r3, [r3, #5]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <HAL_DAC_Start_DMA+0x1e>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e0ae      	b.n	8003bb4 <HAL_DAC_Start_DMA+0x17c>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d12f      	bne.n	8003ac8 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	4a53      	ldr	r2, [pc, #332]	; (8003bbc <HAL_DAC_Start_DMA+0x184>)
 8003a6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	4a52      	ldr	r2, [pc, #328]	; (8003bc0 <HAL_DAC_Start_DMA+0x188>)
 8003a76:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	4a51      	ldr	r2, [pc, #324]	; (8003bc4 <HAL_DAC_Start_DMA+0x18c>)
 8003a7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a8e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	d013      	beq.n	8003abe <HAL_DAC_Start_DMA+0x86>
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d845      	bhi.n	8003b28 <HAL_DAC_Start_DMA+0xf0>
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_DAC_Start_DMA+0x72>
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	d005      	beq.n	8003ab4 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003aa8:	e03e      	b.n	8003b28 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3308      	adds	r3, #8
 8003ab0:	613b      	str	r3, [r7, #16]
        break;
 8003ab2:	e03c      	b.n	8003b2e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	330c      	adds	r3, #12
 8003aba:	613b      	str	r3, [r7, #16]
        break;
 8003abc:	e037      	b.n	8003b2e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3310      	adds	r3, #16
 8003ac4:	613b      	str	r3, [r7, #16]
        break;
 8003ac6:	e032      	b.n	8003b2e <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	4a3e      	ldr	r2, [pc, #248]	; (8003bc8 <HAL_DAC_Start_DMA+0x190>)
 8003ace:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	4a3d      	ldr	r2, [pc, #244]	; (8003bcc <HAL_DAC_Start_DMA+0x194>)
 8003ad6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	4a3c      	ldr	r2, [pc, #240]	; (8003bd0 <HAL_DAC_Start_DMA+0x198>)
 8003ade:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003aee:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	2b08      	cmp	r3, #8
 8003af4:	d013      	beq.n	8003b1e <HAL_DAC_Start_DMA+0xe6>
 8003af6:	6a3b      	ldr	r3, [r7, #32]
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d817      	bhi.n	8003b2c <HAL_DAC_Start_DMA+0xf4>
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_DAC_Start_DMA+0xd2>
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	2b04      	cmp	r3, #4
 8003b06:	d005      	beq.n	8003b14 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003b08:	e010      	b.n	8003b2c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	3314      	adds	r3, #20
 8003b10:	613b      	str	r3, [r7, #16]
        break;
 8003b12:	e00c      	b.n	8003b2e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3318      	adds	r3, #24
 8003b1a:	613b      	str	r3, [r7, #16]
        break;
 8003b1c:	e007      	b.n	8003b2e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	331c      	adds	r3, #28
 8003b24:	613b      	str	r3, [r7, #16]
        break;
 8003b26:	e002      	b.n	8003b2e <HAL_DAC_Start_DMA+0xf6>
        break;
 8003b28:	bf00      	nop
 8003b2a:	e000      	b.n	8003b2e <HAL_DAC_Start_DMA+0xf6>
        break;
 8003b2c:	bf00      	nop
    }
  }


  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d111      	bne.n	8003b58 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b42:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6898      	ldr	r0, [r3, #8]
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	f000 fbad 	bl	80042ac <HAL_DMA_Start_IT>
 8003b52:	4603      	mov	r3, r0
 8003b54:	75fb      	strb	r3, [r7, #23]
 8003b56:	e010      	b.n	8003b7a <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003b66:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	68d8      	ldr	r0, [r3, #12]
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	f000 fb9b 	bl	80042ac <HAL_DMA_Start_IT>
 8003b76:	4603      	mov	r3, r0
 8003b78:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003b80:	7dfb      	ldrb	r3, [r7, #23]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10f      	bne.n	8003ba6 <HAL_DAC_Start_DMA+0x16e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6819      	ldr	r1, [r3, #0]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	f003 0310 	and.w	r3, r3, #16
 8003b92:	2201      	movs	r2, #1
 8003b94:	409a      	lsls	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8003b9e:	2001      	movs	r0, #1
 8003ba0:	f7fe fa60 	bl	8002064 <HAL_Delay>
 8003ba4:	e005      	b.n	8003bb2 <HAL_DAC_Start_DMA+0x17a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	f043 0204 	orr.w	r2, r3, #4
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	08004049 	.word	0x08004049
 8003bc0:	0800406b 	.word	0x0800406b
 8003bc4:	08004087 	.word	0x08004087
 8003bc8:	080040f1 	.word	0x080040f1
 8003bcc:	08004113 	.word	0x08004113
 8003bd0:	0800412f 	.word	0x0800412f

08003bd4 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6819      	ldr	r1, [r3, #0]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	f003 0310 	and.w	r3, r3, #16
 8003bea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003bee:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf2:	43da      	mvns	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	400a      	ands	r2, r1
 8003bfa:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6819      	ldr	r1, [r3, #0]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	2201      	movs	r2, #1
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	43da      	mvns	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	400a      	ands	r2, r1
 8003c16:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8003c18:	2001      	movs	r0, #1
 8003c1a:	f7fe fa23 	bl	8002064 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10d      	bne.n	8003c40 <HAL_DAC_Stop_DMA+0x6c>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 fbba 	bl	80043a2 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	e00c      	b.n	8003c5a <HAL_DAC_Stop_DMA+0x86>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 fbac 	bl	80043a2 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003c58:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b087      	sub	sp, #28
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	60f8      	str	r0, [r7, #12]
 8003c72:	60b9      	str	r1, [r7, #8]
 8003c74:	607a      	str	r2, [r7, #4]
 8003c76:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d105      	bne.n	8003c9a <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4413      	add	r3, r2
 8003c94:	3308      	adds	r3, #8
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	e004      	b.n	8003ca4 <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	3314      	adds	r3, #20
 8003ca2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	371c      	adds	r7, #28
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003cea:	bf00      	nop
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
	...

08003cf8 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b08a      	sub	sp, #40	; 0x28
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	795b      	ldrb	r3, [r3, #5]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d101      	bne.n	8003d10 <HAL_DAC_ConfigChannel+0x18>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	e192      	b.n	8004036 <HAL_DAC_ConfigChannel+0x33e>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2201      	movs	r2, #1
 8003d14:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2202      	movs	r2, #2
 8003d1a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d174      	bne.n	8003e0e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003d24:	f7fe f992 	bl	800204c <HAL_GetTick>
 8003d28:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d134      	bne.n	8003d9a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003d30:	e011      	b.n	8003d56 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003d32:	f7fe f98b 	bl	800204c <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d90a      	bls.n	8003d56 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	f043 0208 	orr.w	r2, r3, #8
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2203      	movs	r2, #3
 8003d50:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e16f      	b.n	8004036 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1e6      	bne.n	8003d32 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8003d64:	2001      	movs	r0, #1
 8003d66:	f7fe f97d 	bl	8002064 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d72:	641a      	str	r2, [r3, #64]	; 0x40
 8003d74:	e01e      	b.n	8003db4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003d76:	f7fe f969 	bl	800204c <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d90a      	bls.n	8003d9a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	f043 0208 	orr.w	r2, r3, #8
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2203      	movs	r2, #3
 8003d94:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e14d      	b.n	8004036 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	dbe8      	blt.n	8003d76 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003da4:	2001      	movs	r0, #1
 8003da6:	f7fe f95d 	bl	8002064 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003db2:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f003 0310 	and.w	r3, r3, #16
 8003dc0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	ea02 0103 	and.w	r1, r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f003 0310 	and.w	r3, r3, #16
 8003dd8:	409a      	lsls	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	21ff      	movs	r1, #255	; 0xff
 8003df0:	fa01 f303 	lsl.w	r3, r1, r3
 8003df4:	43db      	mvns	r3, r3
 8003df6:	ea02 0103 	and.w	r1, r2, r3
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f003 0310 	and.w	r3, r3, #16
 8003e04:	409a      	lsls	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d11d      	bne.n	8003e52 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f003 0310 	and.w	r3, r3, #16
 8003e24:	221f      	movs	r2, #31
 8003e26:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2a:	43db      	mvns	r3, r3
 8003e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e2e:	4013      	ands	r3, r2
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f003 0310 	and.w	r3, r3, #16
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	fa02 f303 	lsl.w	r3, r2, r3
 8003e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e46:	4313      	orrs	r3, r2
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e50:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e58:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	2207      	movs	r2, #7
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	43db      	mvns	r3, r3
 8003e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d102      	bne.n	8003e7c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8003e76:	2300      	movs	r3, #0
 8003e78:	623b      	str	r3, [r7, #32]
 8003e7a:	e00f      	b.n	8003e9c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d102      	bne.n	8003e8a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003e84:	2301      	movs	r3, #1
 8003e86:	623b      	str	r3, [r7, #32]
 8003e88:	e008      	b.n	8003e9c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d102      	bne.n	8003e98 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003e92:	2301      	movs	r3, #1
 8003e94:	623b      	str	r3, [r7, #32]
 8003e96:	e001      	b.n	8003e9c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	6a3a      	ldr	r2, [r7, #32]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f003 0310 	and.w	r3, r3, #16
 8003eb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	43db      	mvns	r3, r3
 8003ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	791b      	ldrb	r3, [r3, #4]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d102      	bne.n	8003ed0 <HAL_DAC_ConfigChannel+0x1d8>
 8003eca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ece:	e000      	b.n	8003ed2 <HAL_DAC_ConfigChannel+0x1da>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f003 0310 	and.w	r3, r3, #16
 8003ede:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eea:	4013      	ands	r3, r2
 8003eec:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	795b      	ldrb	r3, [r3, #5]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d102      	bne.n	8003efc <HAL_DAC_ConfigChannel+0x204>
 8003ef6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003efa:	e000      	b.n	8003efe <HAL_DAC_ConfigChannel+0x206>
 8003efc:	2300      	movs	r3, #0
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003f0a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d114      	bne.n	8003f3e <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003f14:	f003 f9c2 	bl	800729c <HAL_RCC_GetHCLKFreq>
 8003f18:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	4a48      	ldr	r2, [pc, #288]	; (8004040 <HAL_DAC_ConfigChannel+0x348>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d904      	bls.n	8003f2c <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f28:	627b      	str	r3, [r7, #36]	; 0x24
 8003f2a:	e00f      	b.n	8003f4c <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	4a45      	ldr	r2, [pc, #276]	; (8004044 <HAL_DAC_ConfigChannel+0x34c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d90a      	bls.n	8003f4a <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f3c:	e006      	b.n	8003f4c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f44:	4313      	orrs	r3, r2
 8003f46:	627b      	str	r3, [r7, #36]	; 0x24
 8003f48:	e000      	b.n	8003f4c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003f4a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f003 0310 	and.w	r3, r3, #16
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6819      	ldr	r1, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f003 0310 	and.w	r3, r3, #16
 8003f72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	43da      	mvns	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	400a      	ands	r2, r1
 8003f82:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f003 0310 	and.w	r3, r3, #16
 8003f92:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003f96:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f003 0310 	and.w	r3, r3, #16
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6819      	ldr	r1, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f003 0310 	and.w	r3, r3, #16
 8003fce:	22c0      	movs	r2, #192	; 0xc0
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	43da      	mvns	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	400a      	ands	r2, r1
 8003fdc:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	089b      	lsrs	r3, r3, #2
 8003fe4:	f003 030f 	and.w	r3, r3, #15
 8003fe8:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	089b      	lsrs	r3, r3, #2
 8003ff0:	021b      	lsls	r3, r3, #8
 8003ff2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f003 0310 	and.w	r3, r3, #16
 8004008:	f640 710f 	movw	r1, #3855	; 0xf0f
 800400c:	fa01 f303 	lsl.w	r3, r1, r3
 8004010:	43db      	mvns	r3, r3
 8004012:	ea02 0103 	and.w	r1, r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f003 0310 	and.w	r3, r3, #16
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	409a      	lsls	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2201      	movs	r2, #1
 800402c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3728      	adds	r7, #40	; 0x28
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	09896800 	.word	0x09896800
 8004044:	04c4b400 	.word	0x04c4b400

08004048 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004054:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f7ff fe2f 	bl	8003cba <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2201      	movs	r2, #1
 8004060:	711a      	strb	r2, [r3, #4]
}
 8004062:	bf00      	nop
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b084      	sub	sp, #16
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004076:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f7ff fe28 	bl	8003cce <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800407e:	bf00      	nop
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b084      	sub	sp, #16
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004092:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	f043 0204 	orr.w	r2, r3, #4
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f7ff fe1e 	bl	8003ce2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2201      	movs	r2, #1
 80040aa:	711a      	strb	r2, [r3, #4]
}
 80040ac:	bf00      	nop
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f7ff ffd8 	bl	80040b4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2201      	movs	r2, #1
 8004108:	711a      	strb	r2, [r3, #4]
}
 800410a:	bf00      	nop
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b084      	sub	sp, #16
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f7ff ffd1 	bl	80040c8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004126:	bf00      	nop
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b084      	sub	sp, #16
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	f043 0204 	orr.w	r2, r3, #4
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f7ff ffc7 	bl	80040dc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2201      	movs	r2, #1
 8004152:	711a      	strb	r2, [r3, #4]
}
 8004154:	bf00      	nop
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e08d      	b.n	800428a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	461a      	mov	r2, r3
 8004174:	4b47      	ldr	r3, [pc, #284]	; (8004294 <HAL_DMA_Init+0x138>)
 8004176:	429a      	cmp	r2, r3
 8004178:	d80f      	bhi.n	800419a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	461a      	mov	r2, r3
 8004180:	4b45      	ldr	r3, [pc, #276]	; (8004298 <HAL_DMA_Init+0x13c>)
 8004182:	4413      	add	r3, r2
 8004184:	4a45      	ldr	r2, [pc, #276]	; (800429c <HAL_DMA_Init+0x140>)
 8004186:	fba2 2303 	umull	r2, r3, r2, r3
 800418a:	091b      	lsrs	r3, r3, #4
 800418c:	009a      	lsls	r2, r3, #2
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a42      	ldr	r2, [pc, #264]	; (80042a0 <HAL_DMA_Init+0x144>)
 8004196:	641a      	str	r2, [r3, #64]	; 0x40
 8004198:	e00e      	b.n	80041b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	4b40      	ldr	r3, [pc, #256]	; (80042a4 <HAL_DMA_Init+0x148>)
 80041a2:	4413      	add	r3, r2
 80041a4:	4a3d      	ldr	r2, [pc, #244]	; (800429c <HAL_DMA_Init+0x140>)
 80041a6:	fba2 2303 	umull	r2, r3, r2, r3
 80041aa:	091b      	lsrs	r3, r3, #4
 80041ac:	009a      	lsls	r2, r3, #2
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a3c      	ldr	r2, [pc, #240]	; (80042a8 <HAL_DMA_Init+0x14c>)
 80041b6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2202      	movs	r2, #2
 80041bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80041ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80041dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	4313      	orrs	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 fa76 	bl	80046fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004218:	d102      	bne.n	8004220 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004234:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d010      	beq.n	8004260 <HAL_DMA_Init+0x104>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2b04      	cmp	r3, #4
 8004244:	d80c      	bhi.n	8004260 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 fa96 	bl	8004778 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004250:	2200      	movs	r2, #0
 8004252:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800425c:	605a      	str	r2, [r3, #4]
 800425e:	e008      	b.n	8004272 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	40020407 	.word	0x40020407
 8004298:	bffdfff8 	.word	0xbffdfff8
 800429c:	cccccccd 	.word	0xcccccccd
 80042a0:	40020000 	.word	0x40020000
 80042a4:	bffdfbf8 	.word	0xbffdfbf8
 80042a8:	40020400 	.word	0x40020400

080042ac <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
 80042b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ba:	2300      	movs	r3, #0
 80042bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d101      	bne.n	80042cc <HAL_DMA_Start_IT+0x20>
 80042c8:	2302      	movs	r3, #2
 80042ca:	e066      	b.n	800439a <HAL_DMA_Start_IT+0xee>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d155      	bne.n	800438c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0201 	bic.w	r2, r2, #1
 80042fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	68b9      	ldr	r1, [r7, #8]
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f000 f9bb 	bl	8004680 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430e:	2b00      	cmp	r3, #0
 8004310:	d008      	beq.n	8004324 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f042 020e 	orr.w	r2, r2, #14
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	e00f      	b.n	8004344 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0204 	bic.w	r2, r2, #4
 8004332:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f042 020a 	orr.w	r2, r2, #10
 8004342:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d007      	beq.n	8004362 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800435c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004360:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004366:	2b00      	cmp	r3, #0
 8004368:	d007      	beq.n	800437a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004374:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004378:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f042 0201 	orr.w	r2, r2, #1
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	e005      	b.n	8004398 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004394:	2302      	movs	r3, #2
 8004396:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004398:	7dfb      	ldrb	r3, [r7, #23]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b085      	sub	sp, #20
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043aa:	2300      	movs	r3, #0
 80043ac:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d005      	beq.n	80043c6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2204      	movs	r2, #4
 80043be:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	73fb      	strb	r3, [r7, #15]
 80043c4:	e037      	b.n	8004436 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 020e 	bic.w	r2, r2, #14
 80043d4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043e4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0201 	bic.w	r2, r2, #1
 80043f4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fa:	f003 021f 	and.w	r2, r3, #31
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	2101      	movs	r1, #1
 8004404:	fa01 f202 	lsl.w	r2, r1, r2
 8004408:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004412:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00c      	beq.n	8004436 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004426:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800442a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004434:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004446:	7bfb      	ldrb	r3, [r7, #15]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800445c:	2300      	movs	r3, #0
 800445e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d00d      	beq.n	8004488 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2204      	movs	r2, #4
 8004470:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	73fb      	strb	r3, [r7, #15]
 8004486:	e047      	b.n	8004518 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 020e 	bic.w	r2, r2, #14
 8004496:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0201 	bic.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044bc:	f003 021f 	and.w	r2, r3, #31
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c4:	2101      	movs	r1, #1
 80044c6:	fa01 f202 	lsl.w	r2, r1, r2
 80044ca:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80044d4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00c      	beq.n	80044f8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044ec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80044f6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	4798      	blx	r3
    }
  }
  return status;
 8004518:	7bfb      	ldrb	r3, [r7, #15]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453e:	f003 031f 	and.w	r3, r3, #31
 8004542:	2204      	movs	r2, #4
 8004544:	409a      	lsls	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4013      	ands	r3, r2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d026      	beq.n	800459c <HAL_DMA_IRQHandler+0x7a>
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	d021      	beq.n	800459c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0320 	and.w	r3, r3, #32
 8004562:	2b00      	cmp	r3, #0
 8004564:	d107      	bne.n	8004576 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 0204 	bic.w	r2, r2, #4
 8004574:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457a:	f003 021f 	and.w	r2, r3, #31
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	2104      	movs	r1, #4
 8004584:	fa01 f202 	lsl.w	r2, r1, r2
 8004588:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458e:	2b00      	cmp	r3, #0
 8004590:	d071      	beq.n	8004676 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800459a:	e06c      	b.n	8004676 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a0:	f003 031f 	and.w	r3, r3, #31
 80045a4:	2202      	movs	r2, #2
 80045a6:	409a      	lsls	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4013      	ands	r3, r2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d02e      	beq.n	800460e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d029      	beq.n	800460e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0320 	and.w	r3, r3, #32
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10b      	bne.n	80045e0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 020a 	bic.w	r2, r2, #10
 80045d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e4:	f003 021f 	and.w	r2, r3, #31
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ec:	2102      	movs	r1, #2
 80045ee:	fa01 f202 	lsl.w	r2, r1, r2
 80045f2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	2b00      	cmp	r3, #0
 8004602:	d038      	beq.n	8004676 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800460c:	e033      	b.n	8004676 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004612:	f003 031f 	and.w	r3, r3, #31
 8004616:	2208      	movs	r2, #8
 8004618:	409a      	lsls	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	4013      	ands	r3, r2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d02a      	beq.n	8004678 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	f003 0308 	and.w	r3, r3, #8
 8004628:	2b00      	cmp	r3, #0
 800462a:	d025      	beq.n	8004678 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 020e 	bic.w	r2, r2, #14
 800463a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004640:	f003 021f 	and.w	r2, r3, #31
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	2101      	movs	r1, #1
 800464a:	fa01 f202 	lsl.w	r2, r1, r2
 800464e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466a:	2b00      	cmp	r3, #0
 800466c:	d004      	beq.n	8004678 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004676:	bf00      	nop
 8004678:	bf00      	nop
}
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
 800468c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004696:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469c:	2b00      	cmp	r3, #0
 800469e:	d004      	beq.n	80046aa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80046a8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ae:	f003 021f 	and.w	r2, r3, #31
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	2101      	movs	r1, #1
 80046b8:	fa01 f202 	lsl.w	r2, r1, r2
 80046bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	2b10      	cmp	r3, #16
 80046cc:	d108      	bne.n	80046e0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80046de:	e007      	b.n	80046f0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	60da      	str	r2, [r3, #12]
}
 80046f0:	bf00      	nop
 80046f2:	3714      	adds	r7, #20
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b087      	sub	sp, #28
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	461a      	mov	r2, r3
 800470a:	4b16      	ldr	r3, [pc, #88]	; (8004764 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800470c:	429a      	cmp	r2, r3
 800470e:	d802      	bhi.n	8004716 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004710:	4b15      	ldr	r3, [pc, #84]	; (8004768 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	e001      	b.n	800471a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004716:	4b15      	ldr	r3, [pc, #84]	; (800476c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004718:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	b2db      	uxtb	r3, r3
 8004724:	3b08      	subs	r3, #8
 8004726:	4a12      	ldr	r2, [pc, #72]	; (8004770 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004728:	fba2 2303 	umull	r2, r3, r2, r3
 800472c:	091b      	lsrs	r3, r3, #4
 800472e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004734:	089b      	lsrs	r3, r3, #2
 8004736:	009a      	lsls	r2, r3, #2
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	4413      	add	r3, r2
 800473c:	461a      	mov	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a0b      	ldr	r2, [pc, #44]	; (8004774 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004746:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f003 031f 	and.w	r3, r3, #31
 800474e:	2201      	movs	r2, #1
 8004750:	409a      	lsls	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004756:	bf00      	nop
 8004758:	371c      	adds	r7, #28
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	40020407 	.word	0x40020407
 8004768:	40020800 	.word	0x40020800
 800476c:	40020820 	.word	0x40020820
 8004770:	cccccccd 	.word	0xcccccccd
 8004774:	40020880 	.word	0x40020880

08004778 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	b2db      	uxtb	r3, r3
 8004786:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	4b0b      	ldr	r3, [pc, #44]	; (80047b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800478c:	4413      	add	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	461a      	mov	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a08      	ldr	r2, [pc, #32]	; (80047bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800479a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	3b01      	subs	r3, #1
 80047a0:	f003 031f 	and.w	r3, r3, #31
 80047a4:	2201      	movs	r2, #1
 80047a6:	409a      	lsls	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80047ac:	bf00      	nop
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	1000823f 	.word	0x1000823f
 80047bc:	40020940 	.word	0x40020940

080047c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80047ce:	e15a      	b.n	8004a86 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	2101      	movs	r1, #1
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	fa01 f303 	lsl.w	r3, r1, r3
 80047dc:	4013      	ands	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 814c 	beq.w	8004a80 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f003 0303 	and.w	r3, r3, #3
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d005      	beq.n	8004800 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d130      	bne.n	8004862 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	2203      	movs	r2, #3
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	43db      	mvns	r3, r3
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	4013      	ands	r3, r2
 8004816:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	68da      	ldr	r2, [r3, #12]
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	4313      	orrs	r3, r2
 8004828:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004836:	2201      	movs	r2, #1
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	fa02 f303 	lsl.w	r3, r2, r3
 800483e:	43db      	mvns	r3, r3
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	4013      	ands	r3, r2
 8004844:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	091b      	lsrs	r3, r3, #4
 800484c:	f003 0201 	and.w	r2, r3, #1
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	fa02 f303 	lsl.w	r3, r2, r3
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	4313      	orrs	r3, r2
 800485a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	2b03      	cmp	r3, #3
 800486c:	d017      	beq.n	800489e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	2203      	movs	r2, #3
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	43db      	mvns	r3, r3
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	4013      	ands	r3, r2
 8004884:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	689a      	ldr	r2, [r3, #8]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	4313      	orrs	r3, r2
 8004896:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f003 0303 	and.w	r3, r3, #3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d123      	bne.n	80048f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	08da      	lsrs	r2, r3, #3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	3208      	adds	r2, #8
 80048b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f003 0307 	and.w	r3, r3, #7
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	220f      	movs	r2, #15
 80048c2:	fa02 f303 	lsl.w	r3, r2, r3
 80048c6:	43db      	mvns	r3, r3
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4013      	ands	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	691a      	ldr	r2, [r3, #16]
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	fa02 f303 	lsl.w	r3, r2, r3
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	08da      	lsrs	r2, r3, #3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3208      	adds	r2, #8
 80048ec:	6939      	ldr	r1, [r7, #16]
 80048ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	2203      	movs	r2, #3
 80048fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004902:	43db      	mvns	r3, r3
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	4013      	ands	r3, r2
 8004908:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f003 0203 	and.w	r2, r3, #3
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	fa02 f303 	lsl.w	r3, r2, r3
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	4313      	orrs	r3, r2
 800491e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 80a6 	beq.w	8004a80 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004934:	4b5b      	ldr	r3, [pc, #364]	; (8004aa4 <HAL_GPIO_Init+0x2e4>)
 8004936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004938:	4a5a      	ldr	r2, [pc, #360]	; (8004aa4 <HAL_GPIO_Init+0x2e4>)
 800493a:	f043 0301 	orr.w	r3, r3, #1
 800493e:	6613      	str	r3, [r2, #96]	; 0x60
 8004940:	4b58      	ldr	r3, [pc, #352]	; (8004aa4 <HAL_GPIO_Init+0x2e4>)
 8004942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	60bb      	str	r3, [r7, #8]
 800494a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800494c:	4a56      	ldr	r2, [pc, #344]	; (8004aa8 <HAL_GPIO_Init+0x2e8>)
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	089b      	lsrs	r3, r3, #2
 8004952:	3302      	adds	r3, #2
 8004954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004958:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f003 0303 	and.w	r3, r3, #3
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	220f      	movs	r2, #15
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	43db      	mvns	r3, r3
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4013      	ands	r3, r2
 800496e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004976:	d01f      	beq.n	80049b8 <HAL_GPIO_Init+0x1f8>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a4c      	ldr	r2, [pc, #304]	; (8004aac <HAL_GPIO_Init+0x2ec>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d019      	beq.n	80049b4 <HAL_GPIO_Init+0x1f4>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a4b      	ldr	r2, [pc, #300]	; (8004ab0 <HAL_GPIO_Init+0x2f0>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d013      	beq.n	80049b0 <HAL_GPIO_Init+0x1f0>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a4a      	ldr	r2, [pc, #296]	; (8004ab4 <HAL_GPIO_Init+0x2f4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d00d      	beq.n	80049ac <HAL_GPIO_Init+0x1ec>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a49      	ldr	r2, [pc, #292]	; (8004ab8 <HAL_GPIO_Init+0x2f8>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d007      	beq.n	80049a8 <HAL_GPIO_Init+0x1e8>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a48      	ldr	r2, [pc, #288]	; (8004abc <HAL_GPIO_Init+0x2fc>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d101      	bne.n	80049a4 <HAL_GPIO_Init+0x1e4>
 80049a0:	2305      	movs	r3, #5
 80049a2:	e00a      	b.n	80049ba <HAL_GPIO_Init+0x1fa>
 80049a4:	2306      	movs	r3, #6
 80049a6:	e008      	b.n	80049ba <HAL_GPIO_Init+0x1fa>
 80049a8:	2304      	movs	r3, #4
 80049aa:	e006      	b.n	80049ba <HAL_GPIO_Init+0x1fa>
 80049ac:	2303      	movs	r3, #3
 80049ae:	e004      	b.n	80049ba <HAL_GPIO_Init+0x1fa>
 80049b0:	2302      	movs	r3, #2
 80049b2:	e002      	b.n	80049ba <HAL_GPIO_Init+0x1fa>
 80049b4:	2301      	movs	r3, #1
 80049b6:	e000      	b.n	80049ba <HAL_GPIO_Init+0x1fa>
 80049b8:	2300      	movs	r3, #0
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	f002 0203 	and.w	r2, r2, #3
 80049c0:	0092      	lsls	r2, r2, #2
 80049c2:	4093      	lsls	r3, r2
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049ca:	4937      	ldr	r1, [pc, #220]	; (8004aa8 <HAL_GPIO_Init+0x2e8>)
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	089b      	lsrs	r3, r3, #2
 80049d0:	3302      	adds	r3, #2
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049d8:	4b39      	ldr	r3, [pc, #228]	; (8004ac0 <HAL_GPIO_Init+0x300>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	43db      	mvns	r3, r3
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	4013      	ands	r3, r2
 80049e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d003      	beq.n	80049fc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80049fc:	4a30      	ldr	r2, [pc, #192]	; (8004ac0 <HAL_GPIO_Init+0x300>)
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a02:	4b2f      	ldr	r3, [pc, #188]	; (8004ac0 <HAL_GPIO_Init+0x300>)
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	43db      	mvns	r3, r3
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a26:	4a26      	ldr	r2, [pc, #152]	; (8004ac0 <HAL_GPIO_Init+0x300>)
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004a2c:	4b24      	ldr	r3, [pc, #144]	; (8004ac0 <HAL_GPIO_Init+0x300>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	43db      	mvns	r3, r3
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d003      	beq.n	8004a50 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a50:	4a1b      	ldr	r2, [pc, #108]	; (8004ac0 <HAL_GPIO_Init+0x300>)
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004a56:	4b1a      	ldr	r3, [pc, #104]	; (8004ac0 <HAL_GPIO_Init+0x300>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	43db      	mvns	r3, r3
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	4013      	ands	r3, r2
 8004a64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a7a:	4a11      	ldr	r2, [pc, #68]	; (8004ac0 <HAL_GPIO_Init+0x300>)
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	3301      	adds	r3, #1
 8004a84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f47f ae9d 	bne.w	80047d0 <HAL_GPIO_Init+0x10>
  }
}
 8004a96:	bf00      	nop
 8004a98:	bf00      	nop
 8004a9a:	371c      	adds	r7, #28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	40010000 	.word	0x40010000
 8004aac:	48000400 	.word	0x48000400
 8004ab0:	48000800 	.word	0x48000800
 8004ab4:	48000c00 	.word	0x48000c00
 8004ab8:	48001000 	.word	0x48001000
 8004abc:	48001400 	.word	0x48001400
 8004ac0:	40010400 	.word	0x40010400

08004ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	460b      	mov	r3, r1
 8004ace:	807b      	strh	r3, [r7, #2]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ad4:	787b      	ldrb	r3, [r7, #1]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ada:	887a      	ldrh	r2, [r7, #2]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ae0:	e002      	b.n	8004ae8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ae2:	887a      	ldrh	r2, [r7, #2]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	4603      	mov	r3, r0
 8004afc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004afe:	4b08      	ldr	r3, [pc, #32]	; (8004b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b00:	695a      	ldr	r2, [r3, #20]
 8004b02:	88fb      	ldrh	r3, [r7, #6]
 8004b04:	4013      	ands	r3, r2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d006      	beq.n	8004b18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b0a:	4a05      	ldr	r2, [pc, #20]	; (8004b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b0c:	88fb      	ldrh	r3, [r7, #6]
 8004b0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b10:	88fb      	ldrh	r3, [r7, #6]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f000 f806 	bl	8004b24 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b18:	bf00      	nop
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40010400 	.word	0x40010400

08004b24 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b082      	sub	sp, #8
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e081      	b.n	8004c50 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d106      	bne.n	8004b66 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f7fc ffa1 	bl	8001aa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2224      	movs	r2, #36	; 0x24
 8004b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 0201 	bic.w	r2, r2, #1
 8004b7c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b8a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689a      	ldr	r2, [r3, #8]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b9a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d107      	bne.n	8004bb4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bb0:	609a      	str	r2, [r3, #8]
 8004bb2:	e006      	b.n	8004bc2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004bc0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d104      	bne.n	8004bd4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bd2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6812      	ldr	r2, [r2, #0]
 8004bde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004be6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bf6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691a      	ldr	r2, [r3, #16]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	69d9      	ldr	r1, [r3, #28]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1a      	ldr	r2, [r3, #32]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f042 0201 	orr.w	r2, r2, #1
 8004c30:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b20      	cmp	r3, #32
 8004c6c:	d138      	bne.n	8004ce0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d101      	bne.n	8004c7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004c78:	2302      	movs	r3, #2
 8004c7a:	e032      	b.n	8004ce2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2224      	movs	r2, #36	; 0x24
 8004c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 0201 	bic.w	r2, r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004caa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6819      	ldr	r1, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f042 0201 	orr.w	r2, r2, #1
 8004cca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	e000      	b.n	8004ce2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ce0:	2302      	movs	r3, #2
  }
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b085      	sub	sp, #20
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
 8004cf6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b20      	cmp	r3, #32
 8004d02:	d139      	bne.n	8004d78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d101      	bne.n	8004d12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d0e:	2302      	movs	r3, #2
 8004d10:	e033      	b.n	8004d7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2224      	movs	r2, #36	; 0x24
 8004d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0201 	bic.w	r2, r2, #1
 8004d30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	021b      	lsls	r3, r3, #8
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f042 0201 	orr.w	r2, r2, #1
 8004d62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d74:	2300      	movs	r3, #0
 8004d76:	e000      	b.n	8004d7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004d78:	2302      	movs	r3, #2
  }
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d88:	b08b      	sub	sp, #44	; 0x2c
 8004d8a:	af06      	add	r7, sp, #24
 8004d8c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e0d7      	b.n	8004f48 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d106      	bne.n	8004db2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f008 ff91 	bl	800dcd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2203      	movs	r2, #3
 8004db6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f004 fe61 	bl	8009a86 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	73fb      	strb	r3, [r7, #15]
 8004dc8:	e04c      	b.n	8004e64 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
 8004dcc:	6879      	ldr	r1, [r7, #4]
 8004dce:	1c5a      	adds	r2, r3, #1
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	440b      	add	r3, r1
 8004dda:	3301      	adds	r3, #1
 8004ddc:	2201      	movs	r2, #1
 8004dde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	6879      	ldr	r1, [r7, #4]
 8004de4:	1c5a      	adds	r2, r3, #1
 8004de6:	4613      	mov	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	440b      	add	r3, r1
 8004df0:	7bfa      	ldrb	r2, [r7, #15]
 8004df2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004df4:	7bfa      	ldrb	r2, [r7, #15]
 8004df6:	7bfb      	ldrb	r3, [r7, #15]
 8004df8:	b298      	uxth	r0, r3
 8004dfa:	6879      	ldr	r1, [r7, #4]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	440b      	add	r3, r1
 8004e06:	3336      	adds	r3, #54	; 0x36
 8004e08:	4602      	mov	r2, r0
 8004e0a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
 8004e0e:	6879      	ldr	r1, [r7, #4]
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	4613      	mov	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	440b      	add	r3, r1
 8004e1c:	3303      	adds	r3, #3
 8004e1e:	2200      	movs	r2, #0
 8004e20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e22:	7bfa      	ldrb	r2, [r7, #15]
 8004e24:	6879      	ldr	r1, [r7, #4]
 8004e26:	4613      	mov	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	440b      	add	r3, r1
 8004e30:	3338      	adds	r3, #56	; 0x38
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e36:	7bfa      	ldrb	r2, [r7, #15]
 8004e38:	6879      	ldr	r1, [r7, #4]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	440b      	add	r3, r1
 8004e44:	333c      	adds	r3, #60	; 0x3c
 8004e46:	2200      	movs	r2, #0
 8004e48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e4a:	7bfa      	ldrb	r2, [r7, #15]
 8004e4c:	6879      	ldr	r1, [r7, #4]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	4413      	add	r3, r2
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	440b      	add	r3, r1
 8004e58:	3340      	adds	r3, #64	; 0x40
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
 8004e60:	3301      	adds	r3, #1
 8004e62:	73fb      	strb	r3, [r7, #15]
 8004e64:	7bfa      	ldrb	r2, [r7, #15]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d3ad      	bcc.n	8004dca <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e6e:	2300      	movs	r3, #0
 8004e70:	73fb      	strb	r3, [r7, #15]
 8004e72:	e044      	b.n	8004efe <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004e74:	7bfa      	ldrb	r2, [r7, #15]
 8004e76:	6879      	ldr	r1, [r7, #4]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4413      	add	r3, r2
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	440b      	add	r3, r1
 8004e82:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004e86:	2200      	movs	r2, #0
 8004e88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004e8a:	7bfa      	ldrb	r2, [r7, #15]
 8004e8c:	6879      	ldr	r1, [r7, #4]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	00db      	lsls	r3, r3, #3
 8004e96:	440b      	add	r3, r1
 8004e98:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e9c:	7bfa      	ldrb	r2, [r7, #15]
 8004e9e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ea0:	7bfa      	ldrb	r2, [r7, #15]
 8004ea2:	6879      	ldr	r1, [r7, #4]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	440b      	add	r3, r1
 8004eae:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004eb6:	7bfa      	ldrb	r2, [r7, #15]
 8004eb8:	6879      	ldr	r1, [r7, #4]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4413      	add	r3, r2
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	440b      	add	r3, r1
 8004ec4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ecc:	7bfa      	ldrb	r2, [r7, #15]
 8004ece:	6879      	ldr	r1, [r7, #4]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	440b      	add	r3, r1
 8004eda:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004ede:	2200      	movs	r2, #0
 8004ee0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004ee2:	7bfa      	ldrb	r2, [r7, #15]
 8004ee4:	6879      	ldr	r1, [r7, #4]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4413      	add	r3, r2
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	440b      	add	r3, r1
 8004ef0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
 8004efa:	3301      	adds	r3, #1
 8004efc:	73fb      	strb	r3, [r7, #15]
 8004efe:	7bfa      	ldrb	r2, [r7, #15]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d3b5      	bcc.n	8004e74 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	603b      	str	r3, [r7, #0]
 8004f0e:	687e      	ldr	r6, [r7, #4]
 8004f10:	466d      	mov	r5, sp
 8004f12:	f106 0410 	add.w	r4, r6, #16
 8004f16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	602b      	str	r3, [r5, #0]
 8004f1e:	1d33      	adds	r3, r6, #4
 8004f20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f22:	6838      	ldr	r0, [r7, #0]
 8004f24:	f004 fdca 	bl	8009abc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d102      	bne.n	8004f46 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f001 fc29 	bl	8006798 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3714      	adds	r7, #20
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f50 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <HAL_PCD_Start+0x16>
 8004f62:	2302      	movs	r3, #2
 8004f64:	e012      	b.n	8004f8c <HAL_PCD_Start+0x3c>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f004 fd70 	bl	8009a58 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f006 ff89 	bl	800be94 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f006 ff8e 	bl	800bec2 <USB_ReadInterrupts>
 8004fa6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 fb26 	bl	8005604 <PCD_EP_ISR_Handler>

    return;
 8004fb8:	e110      	b.n	80051dc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d013      	beq.n	8004fec <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fd6:	b292      	uxth	r2, r2
 8004fd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f008 ff0a 	bl	800ddf6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 f8fc 	bl	80051e2 <HAL_PCD_SetAddress>

    return;
 8004fea:	e0f7      	b.n	80051dc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00c      	beq.n	8005010 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005008:	b292      	uxth	r2, r2
 800500a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800500e:	e0e5      	b.n	80051dc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00c      	beq.n	8005034 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005022:	b29a      	uxth	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800502c:	b292      	uxth	r2, r2
 800502e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005032:	e0d3      	b.n	80051dc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d034      	beq.n	80050a8 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005046:	b29a      	uxth	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0204 	bic.w	r2, r2, #4
 8005050:	b292      	uxth	r2, r2
 8005052:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800505e:	b29a      	uxth	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 0208 	bic.w	r2, r2, #8
 8005068:	b292      	uxth	r2, r2
 800506a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8005074:	2b01      	cmp	r3, #1
 8005076:	d107      	bne.n	8005088 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005080:	2100      	movs	r1, #0
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f009 f8ac 	bl	800e1e0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f008 feed 	bl	800de68 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005096:	b29a      	uxth	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050a0:	b292      	uxth	r2, r2
 80050a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80050a6:	e099      	b.n	80051dc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d027      	beq.n	8005102 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f042 0208 	orr.w	r2, r2, #8
 80050c4:	b292      	uxth	r2, r2
 80050c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050dc:	b292      	uxth	r2, r2
 80050de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 0204 	orr.w	r2, r2, #4
 80050f4:	b292      	uxth	r2, r2
 80050f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f008 fe9a 	bl	800de34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005100:	e06c      	b.n	80051dc <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005108:	2b00      	cmp	r3, #0
 800510a:	d040      	beq.n	800518e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005114:	b29a      	uxth	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800511e:	b292      	uxth	r2, r2
 8005120:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d12b      	bne.n	8005186 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005136:	b29a      	uxth	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f042 0204 	orr.w	r2, r2, #4
 8005140:	b292      	uxth	r2, r2
 8005142:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800514e:	b29a      	uxth	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f042 0208 	orr.w	r2, r2, #8
 8005158:	b292      	uxth	r2, r2
 800515a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800516e:	b29b      	uxth	r3, r3
 8005170:	089b      	lsrs	r3, r3, #2
 8005172:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800517c:	2101      	movs	r1, #1
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f009 f82e 	bl	800e1e0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005184:	e02a      	b.n	80051dc <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f008 fe54 	bl	800de34 <HAL_PCD_SuspendCallback>
    return;
 800518c:	e026      	b.n	80051dc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00f      	beq.n	80051b8 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80051aa:	b292      	uxth	r2, r2
 80051ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f008 fe12 	bl	800ddda <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80051b6:	e011      	b.n	80051dc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00c      	beq.n	80051dc <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051d4:	b292      	uxth	r2, r2
 80051d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80051da:	bf00      	nop
  }
}
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b082      	sub	sp, #8
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	460b      	mov	r3, r1
 80051ec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d101      	bne.n	80051fc <HAL_PCD_SetAddress+0x1a>
 80051f8:	2302      	movs	r3, #2
 80051fa:	e013      	b.n	8005224 <HAL_PCD_SetAddress+0x42>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	78fa      	ldrb	r2, [r7, #3]
 8005208:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	78fa      	ldrb	r2, [r7, #3]
 8005212:	4611      	mov	r1, r2
 8005214:	4618      	mov	r0, r3
 8005216:	f006 fe29 	bl	800be6c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	4608      	mov	r0, r1
 8005236:	4611      	mov	r1, r2
 8005238:	461a      	mov	r2, r3
 800523a:	4603      	mov	r3, r0
 800523c:	70fb      	strb	r3, [r7, #3]
 800523e:	460b      	mov	r3, r1
 8005240:	803b      	strh	r3, [r7, #0]
 8005242:	4613      	mov	r3, r2
 8005244:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800524a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800524e:	2b00      	cmp	r3, #0
 8005250:	da0e      	bge.n	8005270 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005252:	78fb      	ldrb	r3, [r7, #3]
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	1c5a      	adds	r2, r3, #1
 800525a:	4613      	mov	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	00db      	lsls	r3, r3, #3
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	4413      	add	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2201      	movs	r2, #1
 800526c:	705a      	strb	r2, [r3, #1]
 800526e:	e00e      	b.n	800528e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005270:	78fb      	ldrb	r3, [r7, #3]
 8005272:	f003 0207 	and.w	r2, r3, #7
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	4413      	add	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800528e:	78fb      	ldrb	r3, [r7, #3]
 8005290:	f003 0307 	and.w	r3, r3, #7
 8005294:	b2da      	uxtb	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800529a:	883a      	ldrh	r2, [r7, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	78ba      	ldrb	r2, [r7, #2]
 80052a4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	785b      	ldrb	r3, [r3, #1]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d004      	beq.n	80052b8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80052b8:	78bb      	ldrb	r3, [r7, #2]
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d102      	bne.n	80052c4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d101      	bne.n	80052d2 <HAL_PCD_EP_Open+0xa6>
 80052ce:	2302      	movs	r3, #2
 80052d0:	e00e      	b.n	80052f0 <HAL_PCD_EP_Open+0xc4>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68f9      	ldr	r1, [r7, #12]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f004 fc0d 	bl	8009b00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80052ee:	7afb      	ldrb	r3, [r7, #11]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	460b      	mov	r3, r1
 8005302:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005304:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005308:	2b00      	cmp	r3, #0
 800530a:	da0e      	bge.n	800532a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800530c:	78fb      	ldrb	r3, [r7, #3]
 800530e:	f003 0307 	and.w	r3, r3, #7
 8005312:	1c5a      	adds	r2, r3, #1
 8005314:	4613      	mov	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4413      	add	r3, r2
 800531a:	00db      	lsls	r3, r3, #3
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	4413      	add	r3, r2
 8005320:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2201      	movs	r2, #1
 8005326:	705a      	strb	r2, [r3, #1]
 8005328:	e00e      	b.n	8005348 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800532a:	78fb      	ldrb	r3, [r7, #3]
 800532c:	f003 0207 	and.w	r2, r3, #7
 8005330:	4613      	mov	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	4413      	add	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005348:	78fb      	ldrb	r3, [r7, #3]
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	b2da      	uxtb	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800535a:	2b01      	cmp	r3, #1
 800535c:	d101      	bne.n	8005362 <HAL_PCD_EP_Close+0x6a>
 800535e:	2302      	movs	r3, #2
 8005360:	e00e      	b.n	8005380 <HAL_PCD_EP_Close+0x88>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68f9      	ldr	r1, [r7, #12]
 8005370:	4618      	mov	r0, r3
 8005372:	f004 ff59 	bl	800a228 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	607a      	str	r2, [r7, #4]
 8005392:	603b      	str	r3, [r7, #0]
 8005394:	460b      	mov	r3, r1
 8005396:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005398:	7afb      	ldrb	r3, [r7, #11]
 800539a:	f003 0207 	and.w	r2, r3, #7
 800539e:	4613      	mov	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	00db      	lsls	r3, r3, #3
 80053a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	4413      	add	r3, r2
 80053ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	2200      	movs	r2, #0
 80053c0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	2200      	movs	r2, #0
 80053c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053c8:	7afb      	ldrb	r3, [r7, #11]
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80053d4:	7afb      	ldrb	r3, [r7, #11]
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d106      	bne.n	80053ec <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6979      	ldr	r1, [r7, #20]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f005 f90c 	bl	800a602 <USB_EPStartXfer>
 80053ea:	e005      	b.n	80053f8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6979      	ldr	r1, [r7, #20]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f005 f905 	bl	800a602 <USB_EPStartXfer>
  }

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3718      	adds	r7, #24
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005402:	b480      	push	{r7}
 8005404:	b083      	sub	sp, #12
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
 800540a:	460b      	mov	r3, r1
 800540c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800540e:	78fb      	ldrb	r3, [r7, #3]
 8005410:	f003 0207 	and.w	r2, r3, #7
 8005414:	6879      	ldr	r1, [r7, #4]
 8005416:	4613      	mov	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	440b      	add	r3, r1
 8005420:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005424:	681b      	ldr	r3, [r3, #0]
}
 8005426:	4618      	mov	r0, r3
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b086      	sub	sp, #24
 8005436:	af00      	add	r7, sp, #0
 8005438:	60f8      	str	r0, [r7, #12]
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	603b      	str	r3, [r7, #0]
 800543e:	460b      	mov	r3, r1
 8005440:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005442:	7afb      	ldrb	r3, [r7, #11]
 8005444:	f003 0307 	and.w	r3, r3, #7
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	4613      	mov	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	4413      	add	r3, r2
 8005456:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2200      	movs	r2, #0
 8005476:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	2201      	movs	r2, #1
 800547c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800547e:	7afb      	ldrb	r3, [r7, #11]
 8005480:	f003 0307 	and.w	r3, r3, #7
 8005484:	b2da      	uxtb	r2, r3
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800548a:	7afb      	ldrb	r3, [r7, #11]
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	2b00      	cmp	r3, #0
 8005492:	d106      	bne.n	80054a2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6979      	ldr	r1, [r7, #20]
 800549a:	4618      	mov	r0, r3
 800549c:	f005 f8b1 	bl	800a602 <USB_EPStartXfer>
 80054a0:	e005      	b.n	80054ae <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	6979      	ldr	r1, [r7, #20]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f005 f8aa 	bl	800a602 <USB_EPStartXfer>
  }

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3718      	adds	r7, #24
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	460b      	mov	r3, r1
 80054c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80054c4:	78fb      	ldrb	r3, [r7, #3]
 80054c6:	f003 0207 	and.w	r2, r3, #7
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d901      	bls.n	80054d6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e03e      	b.n	8005554 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80054d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	da0e      	bge.n	80054fc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054de:	78fb      	ldrb	r3, [r7, #3]
 80054e0:	f003 0307 	and.w	r3, r3, #7
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	4613      	mov	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	00db      	lsls	r3, r3, #3
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	4413      	add	r3, r2
 80054f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2201      	movs	r2, #1
 80054f8:	705a      	strb	r2, [r3, #1]
 80054fa:	e00c      	b.n	8005516 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80054fc:	78fa      	ldrb	r2, [r7, #3]
 80054fe:	4613      	mov	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	4413      	add	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2201      	movs	r2, #1
 800551a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800551c:	78fb      	ldrb	r3, [r7, #3]
 800551e:	f003 0307 	and.w	r3, r3, #7
 8005522:	b2da      	uxtb	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800552e:	2b01      	cmp	r3, #1
 8005530:	d101      	bne.n	8005536 <HAL_PCD_EP_SetStall+0x7e>
 8005532:	2302      	movs	r3, #2
 8005534:	e00e      	b.n	8005554 <HAL_PCD_EP_SetStall+0x9c>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68f9      	ldr	r1, [r7, #12]
 8005544:	4618      	mov	r0, r3
 8005546:	f006 fb92 	bl	800bc6e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	460b      	mov	r3, r1
 8005566:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005568:	78fb      	ldrb	r3, [r7, #3]
 800556a:	f003 020f 	and.w	r2, r3, #15
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	429a      	cmp	r2, r3
 8005574:	d901      	bls.n	800557a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e040      	b.n	80055fc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800557a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800557e:	2b00      	cmp	r3, #0
 8005580:	da0e      	bge.n	80055a0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005582:	78fb      	ldrb	r3, [r7, #3]
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	1c5a      	adds	r2, r3, #1
 800558a:	4613      	mov	r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4413      	add	r3, r2
 8005590:	00db      	lsls	r3, r3, #3
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	4413      	add	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2201      	movs	r2, #1
 800559c:	705a      	strb	r2, [r3, #1]
 800559e:	e00e      	b.n	80055be <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055a0:	78fb      	ldrb	r3, [r7, #3]
 80055a2:	f003 0207 	and.w	r2, r3, #7
 80055a6:	4613      	mov	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	00db      	lsls	r3, r3, #3
 80055ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	4413      	add	r3, r2
 80055b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055c4:	78fb      	ldrb	r3, [r7, #3]
 80055c6:	f003 0307 	and.w	r3, r3, #7
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d101      	bne.n	80055de <HAL_PCD_EP_ClrStall+0x82>
 80055da:	2302      	movs	r3, #2
 80055dc:	e00e      	b.n	80055fc <HAL_PCD_EP_ClrStall+0xa0>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68f9      	ldr	r1, [r7, #12]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f006 fb8f 	bl	800bd10 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b096      	sub	sp, #88	; 0x58
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800560c:	e39c      	b.n	8005d48 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005616:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800561a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800561e:	b2db      	uxtb	r3, r3
 8005620:	f003 030f 	and.w	r3, r3, #15
 8005624:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8005628:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800562c:	2b00      	cmp	r3, #0
 800562e:	f040 815e 	bne.w	80058ee <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005632:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005636:	f003 0310 	and.w	r3, r3, #16
 800563a:	2b00      	cmp	r3, #0
 800563c:	d150      	bne.n	80056e0 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	881b      	ldrh	r3, [r3, #0]
 8005644:	b29b      	uxth	r3, r3
 8005646:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800564a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564e:	81fb      	strh	r3, [r7, #14]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	89fb      	ldrh	r3, [r7, #14]
 8005656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800565a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800565e:	b29b      	uxth	r3, r3
 8005660:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	3328      	adds	r3, #40	; 0x28
 8005666:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005670:	b29b      	uxth	r3, r3
 8005672:	461a      	mov	r2, r3
 8005674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	00db      	lsls	r3, r3, #3
 800567a:	4413      	add	r3, r2
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6812      	ldr	r2, [r2, #0]
 8005680:	4413      	add	r3, r2
 8005682:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800568c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800568e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005692:	695a      	ldr	r2, [r3, #20]
 8005694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005696:	69db      	ldr	r3, [r3, #28]
 8005698:	441a      	add	r2, r3
 800569a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800569c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800569e:	2100      	movs	r1, #0
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f008 fb80 	bl	800dda6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f000 834a 	beq.w	8005d48 <PCD_EP_ISR_Handler+0x744>
 80056b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f040 8345 	bne.w	8005d48 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	b292      	uxth	r2, r2
 80056d2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80056de:	e333      	b.n	8005d48 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80056e6:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	881b      	ldrh	r3, [r3, #0]
 80056ee:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80056f2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80056f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d032      	beq.n	8005764 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005706:	b29b      	uxth	r3, r3
 8005708:	461a      	mov	r2, r3
 800570a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	4413      	add	r3, r2
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	6812      	ldr	r2, [r2, #0]
 8005716:	4413      	add	r3, r2
 8005718:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005724:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6818      	ldr	r0, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005732:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005736:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005738:	b29b      	uxth	r3, r3
 800573a:	f006 fc14 	bl	800bf66 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	881b      	ldrh	r3, [r3, #0]
 8005744:	b29a      	uxth	r2, r3
 8005746:	f640 738f 	movw	r3, #3983	; 0xf8f
 800574a:	4013      	ands	r3, r2
 800574c:	823b      	strh	r3, [r7, #16]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	8a3a      	ldrh	r2, [r7, #16]
 8005754:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005758:	b292      	uxth	r2, r2
 800575a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f008 faf5 	bl	800dd4c <HAL_PCD_SetupStageCallback>
 8005762:	e2f1      	b.n	8005d48 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005764:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8005768:	2b00      	cmp	r3, #0
 800576a:	f280 82ed 	bge.w	8005d48 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	b29a      	uxth	r2, r3
 8005776:	f640 738f 	movw	r3, #3983	; 0xf8f
 800577a:	4013      	ands	r3, r2
 800577c:	83fb      	strh	r3, [r7, #30]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	8bfa      	ldrh	r2, [r7, #30]
 8005784:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005788:	b292      	uxth	r2, r2
 800578a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005794:	b29b      	uxth	r3, r3
 8005796:	461a      	mov	r2, r3
 8005798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	00db      	lsls	r3, r3, #3
 800579e:	4413      	add	r3, r2
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6812      	ldr	r2, [r2, #0]
 80057a4:	4413      	add	r3, r2
 80057a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057aa:	881b      	ldrh	r3, [r3, #0]
 80057ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80057b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80057b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b6:	69db      	ldr	r3, [r3, #28]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d019      	beq.n	80057f0 <PCD_EP_ISR_Handler+0x1ec>
 80057bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057be:	695b      	ldr	r3, [r3, #20]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d015      	beq.n	80057f0 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6818      	ldr	r0, [r3, #0]
 80057c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ca:	6959      	ldr	r1, [r3, #20]
 80057cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ce:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80057d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057d2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	f006 fbc6 	bl	800bf66 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80057da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057dc:	695a      	ldr	r2, [r3, #20]
 80057de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	441a      	add	r2, r3
 80057e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80057e8:	2100      	movs	r1, #0
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f008 fac0 	bl	800dd70 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	881b      	ldrh	r3, [r3, #0]
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f040 82a3 	bne.w	8005d48 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	61bb      	str	r3, [r7, #24]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005810:	b29b      	uxth	r3, r3
 8005812:	461a      	mov	r2, r3
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	4413      	add	r3, r2
 8005818:	61bb      	str	r3, [r7, #24]
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005820:	617b      	str	r3, [r7, #20]
 8005822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	2b3e      	cmp	r3, #62	; 0x3e
 8005828:	d918      	bls.n	800585c <PCD_EP_ISR_Handler+0x258>
 800582a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	095b      	lsrs	r3, r3, #5
 8005830:	647b      	str	r3, [r7, #68]	; 0x44
 8005832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	f003 031f 	and.w	r3, r3, #31
 800583a:	2b00      	cmp	r3, #0
 800583c:	d102      	bne.n	8005844 <PCD_EP_ISR_Handler+0x240>
 800583e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005840:	3b01      	subs	r3, #1
 8005842:	647b      	str	r3, [r7, #68]	; 0x44
 8005844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005846:	b29b      	uxth	r3, r3
 8005848:	029b      	lsls	r3, r3, #10
 800584a:	b29b      	uxth	r3, r3
 800584c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005850:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005854:	b29a      	uxth	r2, r3
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	801a      	strh	r2, [r3, #0]
 800585a:	e029      	b.n	80058b0 <PCD_EP_ISR_Handler+0x2ac>
 800585c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d112      	bne.n	800588a <PCD_EP_ISR_Handler+0x286>
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	881b      	ldrh	r3, [r3, #0]
 8005868:	b29b      	uxth	r3, r3
 800586a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800586e:	b29a      	uxth	r2, r3
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	801a      	strh	r2, [r3, #0]
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	881b      	ldrh	r3, [r3, #0]
 8005878:	b29b      	uxth	r3, r3
 800587a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800587e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005882:	b29a      	uxth	r2, r3
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	801a      	strh	r2, [r3, #0]
 8005888:	e012      	b.n	80058b0 <PCD_EP_ISR_Handler+0x2ac>
 800588a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	085b      	lsrs	r3, r3, #1
 8005890:	647b      	str	r3, [r7, #68]	; 0x44
 8005892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b00      	cmp	r3, #0
 800589c:	d002      	beq.n	80058a4 <PCD_EP_ISR_Handler+0x2a0>
 800589e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058a0:	3301      	adds	r3, #1
 80058a2:	647b      	str	r3, [r7, #68]	; 0x44
 80058a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	029b      	lsls	r3, r3, #10
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	881b      	ldrh	r3, [r3, #0]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c0:	827b      	strh	r3, [r7, #18]
 80058c2:	8a7b      	ldrh	r3, [r7, #18]
 80058c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80058c8:	827b      	strh	r3, [r7, #18]
 80058ca:	8a7b      	ldrh	r3, [r7, #18]
 80058cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80058d0:	827b      	strh	r3, [r7, #18]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	8a7b      	ldrh	r3, [r7, #18]
 80058d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	8013      	strh	r3, [r2, #0]
 80058ec:	e22c      	b.n	8005d48 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	461a      	mov	r2, r3
 80058f4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005902:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8005906:	2b00      	cmp	r3, #0
 8005908:	f280 80f6 	bge.w	8005af8 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	461a      	mov	r2, r3
 8005912:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4413      	add	r3, r2
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	b29a      	uxth	r2, r3
 800591e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005922:	4013      	ands	r3, r2
 8005924:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	461a      	mov	r2, r3
 800592e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800593a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800593e:	b292      	uxth	r2, r2
 8005940:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005942:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8005946:	4613      	mov	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	00db      	lsls	r3, r3, #3
 800594e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	4413      	add	r3, r2
 8005956:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800595a:	7b1b      	ldrb	r3, [r3, #12]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d123      	bne.n	80059a8 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005968:	b29b      	uxth	r3, r3
 800596a:	461a      	mov	r2, r3
 800596c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	00db      	lsls	r3, r3, #3
 8005972:	4413      	add	r3, r2
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6812      	ldr	r2, [r2, #0]
 8005978:	4413      	add	r3, r2
 800597a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005984:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8005988:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 808e 	beq.w	8005aae <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6818      	ldr	r0, [r3, #0]
 8005996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005998:	6959      	ldr	r1, [r3, #20]
 800599a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800599c:	88da      	ldrh	r2, [r3, #6]
 800599e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80059a2:	f006 fae0 	bl	800bf66 <USB_ReadPMA>
 80059a6:	e082      	b.n	8005aae <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80059a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059aa:	78db      	ldrb	r3, [r3, #3]
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d10a      	bne.n	80059c6 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80059b0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80059b4:	461a      	mov	r2, r3
 80059b6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f9d3 	bl	8005d64 <HAL_PCD_EP_DB_Receive>
 80059be:	4603      	mov	r3, r0
 80059c0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80059c4:	e073      	b.n	8005aae <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	461a      	mov	r2, r3
 80059cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	881b      	ldrh	r3, [r3, #0]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	461a      	mov	r2, r3
 80059ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	441a      	add	r2, r3
 80059f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80059f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d022      	beq.n	8005a6a <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	461a      	mov	r2, r3
 8005a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	00db      	lsls	r3, r3, #3
 8005a36:	4413      	add	r3, r2
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	6812      	ldr	r2, [r2, #0]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a42:	881b      	ldrh	r3, [r3, #0]
 8005a44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a48:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8005a4c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d02c      	beq.n	8005aae <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6818      	ldr	r0, [r3, #0]
 8005a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a5a:	6959      	ldr	r1, [r3, #20]
 8005a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a5e:	891a      	ldrh	r2, [r3, #8]
 8005a60:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005a64:	f006 fa7f 	bl	800bf66 <USB_ReadPMA>
 8005a68:	e021      	b.n	8005aae <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	461a      	mov	r2, r3
 8005a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	4413      	add	r3, r2
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	6812      	ldr	r2, [r2, #0]
 8005a82:	4413      	add	r3, r2
 8005a84:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a8e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8005a92:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d009      	beq.n	8005aae <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6818      	ldr	r0, [r3, #0]
 8005a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aa0:	6959      	ldr	r1, [r3, #20]
 8005aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aa4:	895a      	ldrh	r2, [r3, #10]
 8005aa6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005aaa:	f006 fa5c 	bl	800bf66 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ab0:	69da      	ldr	r2, [r3, #28]
 8005ab2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005ab6:	441a      	add	r2, r3
 8005ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aba:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005abe:	695a      	ldr	r2, [r3, #20]
 8005ac0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005ac4:	441a      	add	r2, r3
 8005ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ac8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d005      	beq.n	8005ade <PCD_EP_ISR_Handler+0x4da>
 8005ad2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d206      	bcs.n	8005aec <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f008 f943 	bl	800dd70 <HAL_PCD_DataOutStageCallback>
 8005aea:	e005      	b.n	8005af8 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005af2:	4618      	mov	r0, r3
 8005af4:	f004 fd85 	bl	800a602 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005af8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f000 8121 	beq.w	8005d48 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8005b06:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005b0a:	1c5a      	adds	r2, r3, #1
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	4413      	add	r3, r2
 8005b18:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b34:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	441a      	add	r2, r3
 8005b46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005b4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8005b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b58:	78db      	ldrb	r3, [r3, #3]
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	f000 80a2 	beq.w	8005ca4 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8005b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b62:	2200      	movs	r2, #0
 8005b64:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b68:	7b1b      	ldrb	r3, [r3, #12]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f000 8093 	beq.w	8005c96 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005b70:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d046      	beq.n	8005c0a <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b7e:	785b      	ldrb	r3, [r3, #1]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d126      	bne.n	8005bd2 <PCD_EP_ISR_Handler+0x5ce>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	627b      	str	r3, [r7, #36]	; 0x24
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	461a      	mov	r2, r3
 8005b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b98:	4413      	add	r3, r2
 8005b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	00da      	lsls	r2, r3, #3
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005baa:	623b      	str	r3, [r7, #32]
 8005bac:	6a3b      	ldr	r3, [r7, #32]
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
 8005bba:	801a      	strh	r2, [r3, #0]
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	801a      	strh	r2, [r3, #0]
 8005bd0:	e061      	b.n	8005c96 <PCD_EP_ISR_Handler+0x692>
 8005bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bd4:	785b      	ldrb	r3, [r3, #1]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d15d      	bne.n	8005c96 <PCD_EP_ISR_Handler+0x692>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	461a      	mov	r2, r3
 8005bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bee:	4413      	add	r3, r2
 8005bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	00da      	lsls	r2, r3, #3
 8005bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c00:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c04:	2200      	movs	r2, #0
 8005c06:	801a      	strh	r2, [r3, #0]
 8005c08:	e045      	b.n	8005c96 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c12:	785b      	ldrb	r3, [r3, #1]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d126      	bne.n	8005c66 <PCD_EP_ISR_Handler+0x662>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	461a      	mov	r2, r3
 8005c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c2c:	4413      	add	r3, r2
 8005c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8005c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	00da      	lsls	r2, r3, #3
 8005c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c38:	4413      	add	r3, r2
 8005c3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c3e:	633b      	str	r3, [r7, #48]	; 0x30
 8005c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c42:	881b      	ldrh	r3, [r3, #0]
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4e:	801a      	strh	r2, [r3, #0]
 8005c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c62:	801a      	strh	r2, [r3, #0]
 8005c64:	e017      	b.n	8005c96 <PCD_EP_ISR_Handler+0x692>
 8005c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c68:	785b      	ldrb	r3, [r3, #1]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d113      	bne.n	8005c96 <PCD_EP_ISR_Handler+0x692>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	461a      	mov	r2, r3
 8005c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c7c:	4413      	add	r3, r2
 8005c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	00da      	lsls	r2, r3, #3
 8005c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c88:	4413      	add	r3, r2
 8005c8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c92:	2200      	movs	r2, #0
 8005c94:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f008 f882 	bl	800dda6 <HAL_PCD_DataInStageCallback>
 8005ca2:	e051      	b.n	8005d48 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005ca4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d144      	bne.n	8005d3a <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	461a      	mov	r2, r3
 8005cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	4413      	add	r3, r2
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	6812      	ldr	r2, [r2, #0]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005cce:	881b      	ldrh	r3, [r3, #0]
 8005cd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cd4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8005cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cda:	699a      	ldr	r2, [r3, #24]
 8005cdc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d907      	bls.n	8005cf4 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8005ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ce6:	699a      	ldr	r2, [r3, #24]
 8005ce8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005cec:	1ad2      	subs	r2, r2, r3
 8005cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cf0:	619a      	str	r2, [r3, #24]
 8005cf2:	e002      	b.n	8005cfa <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8005cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d106      	bne.n	8005d10 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	4619      	mov	r1, r3
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f008 f84c 	bl	800dda6 <HAL_PCD_DataInStageCallback>
 8005d0e:	e01b      	b.n	8005d48 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d12:	695a      	ldr	r2, [r3, #20]
 8005d14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005d18:	441a      	add	r2, r3
 8005d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d1c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d20:	69da      	ldr	r2, [r3, #28]
 8005d22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005d26:	441a      	add	r2, r3
 8005d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d2a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005d32:	4618      	mov	r0, r3
 8005d34:	f004 fc65 	bl	800a602 <USB_EPStartXfer>
 8005d38:	e006      	b.n	8005d48 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005d3a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005d3e:	461a      	mov	r2, r3
 8005d40:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f917 	bl	8005f76 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	b21b      	sxth	r3, r3
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f6ff ac5a 	blt.w	800560e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3758      	adds	r7, #88	; 0x58
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b088      	sub	sp, #32
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005d72:	88fb      	ldrh	r3, [r7, #6]
 8005d74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d07c      	beq.n	8005e76 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	461a      	mov	r2, r3
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	00db      	lsls	r3, r3, #3
 8005d8e:	4413      	add	r3, r2
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	6812      	ldr	r2, [r2, #0]
 8005d94:	4413      	add	r3, r2
 8005d96:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005da0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	699a      	ldr	r2, [r3, #24]
 8005da6:	8b7b      	ldrh	r3, [r7, #26]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d306      	bcc.n	8005dba <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	699a      	ldr	r2, [r3, #24]
 8005db0:	8b7b      	ldrh	r3, [r7, #26]
 8005db2:	1ad2      	subs	r2, r2, r3
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	619a      	str	r2, [r3, #24]
 8005db8:	e002      	b.n	8005dc0 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d123      	bne.n	8005e10 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	461a      	mov	r2, r3
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	881b      	ldrh	r3, [r3, #0]
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de2:	833b      	strh	r3, [r7, #24]
 8005de4:	8b3b      	ldrh	r3, [r7, #24]
 8005de6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005dea:	833b      	strh	r3, [r7, #24]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	461a      	mov	r2, r3
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	441a      	add	r2, r3
 8005dfa:	8b3b      	ldrh	r3, [r7, #24]
 8005dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005e10:	88fb      	ldrh	r3, [r7, #6]
 8005e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d01f      	beq.n	8005e5a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	881b      	ldrh	r3, [r3, #0]
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e34:	82fb      	strh	r3, [r7, #22]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	441a      	add	r2, r3
 8005e44:	8afb      	ldrh	r3, [r7, #22]
 8005e46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005e5a:	8b7b      	ldrh	r3, [r7, #26]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 8085 	beq.w	8005f6c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6818      	ldr	r0, [r3, #0]
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	6959      	ldr	r1, [r3, #20]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	891a      	ldrh	r2, [r3, #8]
 8005e6e:	8b7b      	ldrh	r3, [r7, #26]
 8005e70:	f006 f879 	bl	800bf66 <USB_ReadPMA>
 8005e74:	e07a      	b.n	8005f6c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	461a      	mov	r2, r3
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	00db      	lsls	r3, r3, #3
 8005e88:	4413      	add	r3, r2
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	6812      	ldr	r2, [r2, #0]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e94:	881b      	ldrh	r3, [r3, #0]
 8005e96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e9a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	699a      	ldr	r2, [r3, #24]
 8005ea0:	8b7b      	ldrh	r3, [r7, #26]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d306      	bcc.n	8005eb4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	699a      	ldr	r2, [r3, #24]
 8005eaa:	8b7b      	ldrh	r3, [r7, #26]
 8005eac:	1ad2      	subs	r2, r2, r3
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	619a      	str	r2, [r3, #24]
 8005eb2:	e002      	b.n	8005eba <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d123      	bne.n	8005f0a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4413      	add	r3, r2
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005edc:	83fb      	strh	r3, [r7, #30]
 8005ede:	8bfb      	ldrh	r3, [r7, #30]
 8005ee0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ee4:	83fb      	strh	r3, [r7, #30]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	461a      	mov	r2, r3
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	441a      	add	r2, r3
 8005ef4:	8bfb      	ldrh	r3, [r7, #30]
 8005ef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005efa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005f0a:	88fb      	ldrh	r3, [r7, #6]
 8005f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d11f      	bne.n	8005f54 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	881b      	ldrh	r3, [r3, #0]
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f2e:	83bb      	strh	r3, [r7, #28]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	461a      	mov	r2, r3
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	441a      	add	r2, r3
 8005f3e:	8bbb      	ldrh	r3, [r7, #28]
 8005f40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005f54:	8b7b      	ldrh	r3, [r7, #26]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d008      	beq.n	8005f6c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6818      	ldr	r0, [r3, #0]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	6959      	ldr	r1, [r3, #20]
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	895a      	ldrh	r2, [r3, #10]
 8005f66:	8b7b      	ldrh	r3, [r7, #26]
 8005f68:	f005 fffd 	bl	800bf66 <USB_ReadPMA>
    }
  }

  return count;
 8005f6c:	8b7b      	ldrh	r3, [r7, #26]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3720      	adds	r7, #32
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b0a2      	sub	sp, #136	; 0x88
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	60f8      	str	r0, [r7, #12]
 8005f7e:	60b9      	str	r1, [r7, #8]
 8005f80:	4613      	mov	r3, r2
 8005f82:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005f84:	88fb      	ldrh	r3, [r7, #6]
 8005f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f000 81c5 	beq.w	800631a <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	00db      	lsls	r3, r3, #3
 8005fa2:	4413      	add	r3, r2
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	6812      	ldr	r2, [r2, #0]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005fae:	881b      	ldrh	r3, [r3, #0]
 8005fb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fb4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	699a      	ldr	r2, [r3, #24]
 8005fbc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d907      	bls.n	8005fd4 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	699a      	ldr	r2, [r3, #24]
 8005fc8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005fcc:	1ad2      	subs	r2, r2, r3
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	619a      	str	r2, [r3, #24]
 8005fd2:	e002      	b.n	8005fda <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f040 80b9 	bne.w	8006156 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	785b      	ldrb	r3, [r3, #1]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d126      	bne.n	800603a <HAL_PCD_EP_DB_Transmit+0xc4>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006000:	4413      	add	r3, r2
 8006002:	62bb      	str	r3, [r7, #40]	; 0x28
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	00da      	lsls	r2, r3, #3
 800600a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600c:	4413      	add	r3, r2
 800600e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006012:	627b      	str	r3, [r7, #36]	; 0x24
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	881b      	ldrh	r3, [r3, #0]
 8006018:	b29b      	uxth	r3, r3
 800601a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800601e:	b29a      	uxth	r2, r3
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006022:	801a      	strh	r2, [r3, #0]
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	881b      	ldrh	r3, [r3, #0]
 8006028:	b29b      	uxth	r3, r3
 800602a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800602e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006032:	b29a      	uxth	r2, r3
 8006034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006036:	801a      	strh	r2, [r3, #0]
 8006038:	e01a      	b.n	8006070 <HAL_PCD_EP_DB_Transmit+0xfa>
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	785b      	ldrb	r3, [r3, #1]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d116      	bne.n	8006070 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	633b      	str	r3, [r7, #48]	; 0x30
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006050:	b29b      	uxth	r3, r3
 8006052:	461a      	mov	r2, r3
 8006054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006056:	4413      	add	r3, r2
 8006058:	633b      	str	r3, [r7, #48]	; 0x30
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	00da      	lsls	r2, r3, #3
 8006060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006062:	4413      	add	r3, r2
 8006064:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006068:	62fb      	str	r3, [r7, #44]	; 0x2c
 800606a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606c:	2200      	movs	r2, #0
 800606e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	623b      	str	r3, [r7, #32]
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	785b      	ldrb	r3, [r3, #1]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d126      	bne.n	80060cc <HAL_PCD_EP_DB_Transmit+0x156>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	61bb      	str	r3, [r7, #24]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800608c:	b29b      	uxth	r3, r3
 800608e:	461a      	mov	r2, r3
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	4413      	add	r3, r2
 8006094:	61bb      	str	r3, [r7, #24]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	00da      	lsls	r2, r3, #3
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	4413      	add	r3, r2
 80060a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060a4:	617b      	str	r3, [r7, #20]
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	881b      	ldrh	r3, [r3, #0]
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	801a      	strh	r2, [r3, #0]
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	801a      	strh	r2, [r3, #0]
 80060ca:	e017      	b.n	80060fc <HAL_PCD_EP_DB_Transmit+0x186>
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	785b      	ldrb	r3, [r3, #1]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d113      	bne.n	80060fc <HAL_PCD_EP_DB_Transmit+0x186>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060dc:	b29b      	uxth	r3, r3
 80060de:	461a      	mov	r2, r3
 80060e0:	6a3b      	ldr	r3, [r7, #32]
 80060e2:	4413      	add	r3, r2
 80060e4:	623b      	str	r3, [r7, #32]
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	00da      	lsls	r2, r3, #3
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	4413      	add	r3, r2
 80060f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060f4:	61fb      	str	r3, [r7, #28]
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	2200      	movs	r2, #0
 80060fa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	4619      	mov	r1, r3
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f007 fe4f 	bl	800dda6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006108:	88fb      	ldrh	r3, [r7, #6]
 800610a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 82d2 	beq.w	80066b8 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	461a      	mov	r2, r3
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	881b      	ldrh	r3, [r3, #0]
 8006124:	b29b      	uxth	r3, r3
 8006126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800612a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800612e:	827b      	strh	r3, [r7, #18]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	461a      	mov	r2, r3
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	441a      	add	r2, r3
 800613e:	8a7b      	ldrh	r3, [r7, #18]
 8006140:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006144:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006148:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800614c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006150:	b29b      	uxth	r3, r3
 8006152:	8013      	strh	r3, [r2, #0]
 8006154:	e2b0      	b.n	80066b8 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006156:	88fb      	ldrh	r3, [r7, #6]
 8006158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d021      	beq.n	80061a4 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	461a      	mov	r2, r3
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	881b      	ldrh	r3, [r3, #0]
 8006170:	b29b      	uxth	r3, r3
 8006172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800617a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	461a      	mov	r2, r3
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	441a      	add	r2, r3
 800618c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006190:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006194:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006198:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800619c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	f040 8284 	bne.w	80066b8 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	695a      	ldr	r2, [r3, #20]
 80061b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80061b8:	441a      	add	r2, r3
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	69da      	ldr	r2, [r3, #28]
 80061c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80061c6:	441a      	add	r2, r3
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	6a1a      	ldr	r2, [r3, #32]
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d309      	bcc.n	80061ec <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	6a1a      	ldr	r2, [r3, #32]
 80061e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061e4:	1ad2      	subs	r2, r2, r3
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	621a      	str	r2, [r3, #32]
 80061ea:	e015      	b.n	8006218 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	6a1b      	ldr	r3, [r3, #32]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d107      	bne.n	8006204 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80061f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80061f8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006202:	e009      	b.n	8006218 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	2200      	movs	r2, #0
 8006216:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	785b      	ldrb	r3, [r3, #1]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d155      	bne.n	80062cc <HAL_PCD_EP_DB_Transmit+0x356>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	63bb      	str	r3, [r7, #56]	; 0x38
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800622e:	b29b      	uxth	r3, r3
 8006230:	461a      	mov	r2, r3
 8006232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006234:	4413      	add	r3, r2
 8006236:	63bb      	str	r3, [r7, #56]	; 0x38
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	00da      	lsls	r2, r3, #3
 800623e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006240:	4413      	add	r3, r2
 8006242:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006246:	637b      	str	r3, [r7, #52]	; 0x34
 8006248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800624a:	2b3e      	cmp	r3, #62	; 0x3e
 800624c:	d916      	bls.n	800627c <HAL_PCD_EP_DB_Transmit+0x306>
 800624e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006250:	095b      	lsrs	r3, r3, #5
 8006252:	64bb      	str	r3, [r7, #72]	; 0x48
 8006254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006256:	f003 031f 	and.w	r3, r3, #31
 800625a:	2b00      	cmp	r3, #0
 800625c:	d102      	bne.n	8006264 <HAL_PCD_EP_DB_Transmit+0x2ee>
 800625e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006260:	3b01      	subs	r3, #1
 8006262:	64bb      	str	r3, [r7, #72]	; 0x48
 8006264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006266:	b29b      	uxth	r3, r3
 8006268:	029b      	lsls	r3, r3, #10
 800626a:	b29b      	uxth	r3, r3
 800626c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006270:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006274:	b29a      	uxth	r2, r3
 8006276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006278:	801a      	strh	r2, [r3, #0]
 800627a:	e043      	b.n	8006304 <HAL_PCD_EP_DB_Transmit+0x38e>
 800627c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800627e:	2b00      	cmp	r3, #0
 8006280:	d112      	bne.n	80062a8 <HAL_PCD_EP_DB_Transmit+0x332>
 8006282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	b29b      	uxth	r3, r3
 8006288:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800628c:	b29a      	uxth	r2, r3
 800628e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006290:	801a      	strh	r2, [r3, #0]
 8006292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006294:	881b      	ldrh	r3, [r3, #0]
 8006296:	b29b      	uxth	r3, r3
 8006298:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800629c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a4:	801a      	strh	r2, [r3, #0]
 80062a6:	e02d      	b.n	8006304 <HAL_PCD_EP_DB_Transmit+0x38e>
 80062a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062aa:	085b      	lsrs	r3, r3, #1
 80062ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80062ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <HAL_PCD_EP_DB_Transmit+0x348>
 80062b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ba:	3301      	adds	r3, #1
 80062bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80062be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	029b      	lsls	r3, r3, #10
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c8:	801a      	strh	r2, [r3, #0]
 80062ca:	e01b      	b.n	8006304 <HAL_PCD_EP_DB_Transmit+0x38e>
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	785b      	ldrb	r3, [r3, #1]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d117      	bne.n	8006304 <HAL_PCD_EP_DB_Transmit+0x38e>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	643b      	str	r3, [r7, #64]	; 0x40
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	461a      	mov	r2, r3
 80062e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062e8:	4413      	add	r3, r2
 80062ea:	643b      	str	r3, [r7, #64]	; 0x40
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	00da      	lsls	r2, r3, #3
 80062f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062f4:	4413      	add	r3, r2
 80062f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80062fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062fe:	b29a      	uxth	r2, r3
 8006300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006302:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6818      	ldr	r0, [r3, #0]
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	6959      	ldr	r1, [r3, #20]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	891a      	ldrh	r2, [r3, #8]
 8006310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006312:	b29b      	uxth	r3, r3
 8006314:	f005 fde5 	bl	800bee2 <USB_WritePMA>
 8006318:	e1ce      	b.n	80066b8 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006322:	b29b      	uxth	r3, r3
 8006324:	461a      	mov	r2, r3
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	00db      	lsls	r3, r3, #3
 800632c:	4413      	add	r3, r2
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	6812      	ldr	r2, [r2, #0]
 8006332:	4413      	add	r3, r2
 8006334:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006338:	881b      	ldrh	r3, [r3, #0]
 800633a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800633e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	699a      	ldr	r2, [r3, #24]
 8006346:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800634a:	429a      	cmp	r2, r3
 800634c:	d307      	bcc.n	800635e <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	699a      	ldr	r2, [r3, #24]
 8006352:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006356:	1ad2      	subs	r2, r2, r3
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	619a      	str	r2, [r3, #24]
 800635c:	e002      	b.n	8006364 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2200      	movs	r2, #0
 8006362:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	2b00      	cmp	r3, #0
 800636a:	f040 80c4 	bne.w	80064f6 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	785b      	ldrb	r3, [r3, #1]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d126      	bne.n	80063c4 <HAL_PCD_EP_DB_Transmit+0x44e>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	66bb      	str	r3, [r7, #104]	; 0x68
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006384:	b29b      	uxth	r3, r3
 8006386:	461a      	mov	r2, r3
 8006388:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800638a:	4413      	add	r3, r2
 800638c:	66bb      	str	r3, [r7, #104]	; 0x68
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	00da      	lsls	r2, r3, #3
 8006394:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006396:	4413      	add	r3, r2
 8006398:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800639c:	667b      	str	r3, [r7, #100]	; 0x64
 800639e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063a0:	881b      	ldrh	r3, [r3, #0]
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063ac:	801a      	strh	r2, [r3, #0]
 80063ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063b0:	881b      	ldrh	r3, [r3, #0]
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063bc:	b29a      	uxth	r2, r3
 80063be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063c0:	801a      	strh	r2, [r3, #0]
 80063c2:	e01a      	b.n	80063fa <HAL_PCD_EP_DB_Transmit+0x484>
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	785b      	ldrb	r3, [r3, #1]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d116      	bne.n	80063fa <HAL_PCD_EP_DB_Transmit+0x484>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	673b      	str	r3, [r7, #112]	; 0x70
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063da:	b29b      	uxth	r3, r3
 80063dc:	461a      	mov	r2, r3
 80063de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063e0:	4413      	add	r3, r2
 80063e2:	673b      	str	r3, [r7, #112]	; 0x70
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	00da      	lsls	r2, r3, #3
 80063ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063ec:	4413      	add	r3, r2
 80063ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80063f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f6:	2200      	movs	r2, #0
 80063f8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	785b      	ldrb	r3, [r3, #1]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d12f      	bne.n	8006468 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006418:	b29b      	uxth	r3, r3
 800641a:	461a      	mov	r2, r3
 800641c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006420:	4413      	add	r3, r2
 8006422:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	00da      	lsls	r2, r3, #3
 800642c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006430:	4413      	add	r3, r2
 8006432:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006436:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800643a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800643e:	881b      	ldrh	r3, [r3, #0]
 8006440:	b29b      	uxth	r3, r3
 8006442:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006446:	b29a      	uxth	r2, r3
 8006448:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800644c:	801a      	strh	r2, [r3, #0]
 800644e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	b29b      	uxth	r3, r3
 8006456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800645a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800645e:	b29a      	uxth	r2, r3
 8006460:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006464:	801a      	strh	r2, [r3, #0]
 8006466:	e017      	b.n	8006498 <HAL_PCD_EP_DB_Transmit+0x522>
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	785b      	ldrb	r3, [r3, #1]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d113      	bne.n	8006498 <HAL_PCD_EP_DB_Transmit+0x522>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006478:	b29b      	uxth	r3, r3
 800647a:	461a      	mov	r2, r3
 800647c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800647e:	4413      	add	r3, r2
 8006480:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	00da      	lsls	r2, r3, #3
 8006488:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800648a:	4413      	add	r3, r2
 800648c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006490:	67bb      	str	r3, [r7, #120]	; 0x78
 8006492:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006494:	2200      	movs	r2, #0
 8006496:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	4619      	mov	r1, r3
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f007 fc81 	bl	800dda6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80064a4:	88fb      	ldrh	r3, [r7, #6]
 80064a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f040 8104 	bne.w	80066b8 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	461a      	mov	r2, r3
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4413      	add	r3, r2
 80064be:	881b      	ldrh	r3, [r3, #0]
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	461a      	mov	r2, r3
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	441a      	add	r2, r3
 80064dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80064e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	8013      	strh	r3, [r2, #0]
 80064f4:	e0e0      	b.n	80066b8 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80064f6:	88fb      	ldrh	r3, [r7, #6]
 80064f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d121      	bne.n	8006544 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	461a      	mov	r2, r3
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	b29b      	uxth	r3, r3
 8006512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	461a      	mov	r2, r3
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	441a      	add	r2, r3
 800652c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006538:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800653c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006540:	b29b      	uxth	r3, r3
 8006542:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800654a:	2b01      	cmp	r3, #1
 800654c:	f040 80b4 	bne.w	80066b8 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	695a      	ldr	r2, [r3, #20]
 8006554:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006558:	441a      	add	r2, r3
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	69da      	ldr	r2, [r3, #28]
 8006562:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006566:	441a      	add	r2, r3
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	6a1a      	ldr	r2, [r3, #32]
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	429a      	cmp	r2, r3
 8006576:	d309      	bcc.n	800658c <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	6a1a      	ldr	r2, [r3, #32]
 8006582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006584:	1ad2      	subs	r2, r2, r3
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	621a      	str	r2, [r3, #32]
 800658a:	e015      	b.n	80065b8 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	6a1b      	ldr	r3, [r3, #32]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d107      	bne.n	80065a4 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8006594:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006598:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80065a2:	e009      	b.n	80065b8 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	6a1b      	ldr	r3, [r3, #32]
 80065a8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2200      	movs	r2, #0
 80065ae:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	663b      	str	r3, [r7, #96]	; 0x60
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	785b      	ldrb	r3, [r3, #1]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d155      	bne.n	8006672 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	461a      	mov	r2, r3
 80065d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065da:	4413      	add	r3, r2
 80065dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	00da      	lsls	r2, r3, #3
 80065e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065e6:	4413      	add	r3, r2
 80065e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065ec:	657b      	str	r3, [r7, #84]	; 0x54
 80065ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065f0:	2b3e      	cmp	r3, #62	; 0x3e
 80065f2:	d916      	bls.n	8006622 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80065f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065f6:	095b      	lsrs	r3, r3, #5
 80065f8:	677b      	str	r3, [r7, #116]	; 0x74
 80065fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065fc:	f003 031f 	and.w	r3, r3, #31
 8006600:	2b00      	cmp	r3, #0
 8006602:	d102      	bne.n	800660a <HAL_PCD_EP_DB_Transmit+0x694>
 8006604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006606:	3b01      	subs	r3, #1
 8006608:	677b      	str	r3, [r7, #116]	; 0x74
 800660a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800660c:	b29b      	uxth	r3, r3
 800660e:	029b      	lsls	r3, r3, #10
 8006610:	b29b      	uxth	r3, r3
 8006612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800661a:	b29a      	uxth	r2, r3
 800661c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800661e:	801a      	strh	r2, [r3, #0]
 8006620:	e040      	b.n	80066a4 <HAL_PCD_EP_DB_Transmit+0x72e>
 8006622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006624:	2b00      	cmp	r3, #0
 8006626:	d112      	bne.n	800664e <HAL_PCD_EP_DB_Transmit+0x6d8>
 8006628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800662a:	881b      	ldrh	r3, [r3, #0]
 800662c:	b29b      	uxth	r3, r3
 800662e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006632:	b29a      	uxth	r2, r3
 8006634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006636:	801a      	strh	r2, [r3, #0]
 8006638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800663a:	881b      	ldrh	r3, [r3, #0]
 800663c:	b29b      	uxth	r3, r3
 800663e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006642:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006646:	b29a      	uxth	r2, r3
 8006648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800664a:	801a      	strh	r2, [r3, #0]
 800664c:	e02a      	b.n	80066a4 <HAL_PCD_EP_DB_Transmit+0x72e>
 800664e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006650:	085b      	lsrs	r3, r3, #1
 8006652:	677b      	str	r3, [r7, #116]	; 0x74
 8006654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d002      	beq.n	8006664 <HAL_PCD_EP_DB_Transmit+0x6ee>
 800665e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006660:	3301      	adds	r3, #1
 8006662:	677b      	str	r3, [r7, #116]	; 0x74
 8006664:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006666:	b29b      	uxth	r3, r3
 8006668:	029b      	lsls	r3, r3, #10
 800666a:	b29a      	uxth	r2, r3
 800666c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800666e:	801a      	strh	r2, [r3, #0]
 8006670:	e018      	b.n	80066a4 <HAL_PCD_EP_DB_Transmit+0x72e>
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	785b      	ldrb	r3, [r3, #1]
 8006676:	2b01      	cmp	r3, #1
 8006678:	d114      	bne.n	80066a4 <HAL_PCD_EP_DB_Transmit+0x72e>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006682:	b29b      	uxth	r3, r3
 8006684:	461a      	mov	r2, r3
 8006686:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006688:	4413      	add	r3, r2
 800668a:	663b      	str	r3, [r7, #96]	; 0x60
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	00da      	lsls	r2, r3, #3
 8006692:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006694:	4413      	add	r3, r2
 8006696:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800669a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800669c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800669e:	b29a      	uxth	r2, r3
 80066a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066a2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6818      	ldr	r0, [r3, #0]
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	6959      	ldr	r1, [r3, #20]
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	895a      	ldrh	r2, [r3, #10]
 80066b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	f005 fc15 	bl	800bee2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	461a      	mov	r2, r3
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	4413      	add	r3, r2
 80066c6:	881b      	ldrh	r3, [r3, #0]
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066d2:	823b      	strh	r3, [r7, #16]
 80066d4:	8a3b      	ldrh	r3, [r7, #16]
 80066d6:	f083 0310 	eor.w	r3, r3, #16
 80066da:	823b      	strh	r3, [r7, #16]
 80066dc:	8a3b      	ldrh	r3, [r7, #16]
 80066de:	f083 0320 	eor.w	r3, r3, #32
 80066e2:	823b      	strh	r3, [r7, #16]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	461a      	mov	r2, r3
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	441a      	add	r2, r3
 80066f2:	8a3b      	ldrh	r3, [r7, #16]
 80066f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006704:	b29b      	uxth	r3, r3
 8006706:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3788      	adds	r7, #136	; 0x88
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006712:	b480      	push	{r7}
 8006714:	b087      	sub	sp, #28
 8006716:	af00      	add	r7, sp, #0
 8006718:	60f8      	str	r0, [r7, #12]
 800671a:	607b      	str	r3, [r7, #4]
 800671c:	460b      	mov	r3, r1
 800671e:	817b      	strh	r3, [r7, #10]
 8006720:	4613      	mov	r3, r2
 8006722:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006724:	897b      	ldrh	r3, [r7, #10]
 8006726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800672a:	b29b      	uxth	r3, r3
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00b      	beq.n	8006748 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006730:	897b      	ldrh	r3, [r7, #10]
 8006732:	f003 0307 	and.w	r3, r3, #7
 8006736:	1c5a      	adds	r2, r3, #1
 8006738:	4613      	mov	r3, r2
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4413      	add	r3, r2
 800673e:	00db      	lsls	r3, r3, #3
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	4413      	add	r3, r2
 8006744:	617b      	str	r3, [r7, #20]
 8006746:	e009      	b.n	800675c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006748:	897a      	ldrh	r2, [r7, #10]
 800674a:	4613      	mov	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4413      	add	r3, r2
 8006750:	00db      	lsls	r3, r3, #3
 8006752:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	4413      	add	r3, r2
 800675a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800675c:	893b      	ldrh	r3, [r7, #8]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d107      	bne.n	8006772 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	2200      	movs	r2, #0
 8006766:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	b29a      	uxth	r2, r3
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	80da      	strh	r2, [r3, #6]
 8006770:	e00b      	b.n	800678a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	2201      	movs	r2, #1
 8006776:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	b29a      	uxth	r2, r3
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	0c1b      	lsrs	r3, r3, #16
 8006784:	b29a      	uxth	r2, r3
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	371c      	adds	r7, #28
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80067bc:	b29b      	uxth	r3, r3
 80067be:	f043 0301 	orr.w	r3, r3, #1
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	f043 0302 	orr.w	r3, r3, #2
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d141      	bne.n	800687e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80067fa:	4b4b      	ldr	r3, [pc, #300]	; (8006928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006806:	d131      	bne.n	800686c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006808:	4b47      	ldr	r3, [pc, #284]	; (8006928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800680a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800680e:	4a46      	ldr	r2, [pc, #280]	; (8006928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006814:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006818:	4b43      	ldr	r3, [pc, #268]	; (8006928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006820:	4a41      	ldr	r2, [pc, #260]	; (8006928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006822:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006826:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006828:	4b40      	ldr	r3, [pc, #256]	; (800692c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2232      	movs	r2, #50	; 0x32
 800682e:	fb02 f303 	mul.w	r3, r2, r3
 8006832:	4a3f      	ldr	r2, [pc, #252]	; (8006930 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006834:	fba2 2303 	umull	r2, r3, r2, r3
 8006838:	0c9b      	lsrs	r3, r3, #18
 800683a:	3301      	adds	r3, #1
 800683c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800683e:	e002      	b.n	8006846 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	3b01      	subs	r3, #1
 8006844:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006846:	4b38      	ldr	r3, [pc, #224]	; (8006928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800684e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006852:	d102      	bne.n	800685a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1f2      	bne.n	8006840 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800685a:	4b33      	ldr	r3, [pc, #204]	; (8006928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006866:	d158      	bne.n	800691a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e057      	b.n	800691c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800686c:	4b2e      	ldr	r3, [pc, #184]	; (8006928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800686e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006872:	4a2d      	ldr	r2, [pc, #180]	; (8006928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006878:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800687c:	e04d      	b.n	800691a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006884:	d141      	bne.n	800690a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006886:	4b28      	ldr	r3, [pc, #160]	; (8006928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800688e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006892:	d131      	bne.n	80068f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006894:	4b24      	ldr	r3, [pc, #144]	; (8006928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006896:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800689a:	4a23      	ldr	r2, [pc, #140]	; (8006928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800689c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80068a4:	4b20      	ldr	r3, [pc, #128]	; (8006928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80068ac:	4a1e      	ldr	r2, [pc, #120]	; (8006928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80068b4:	4b1d      	ldr	r3, [pc, #116]	; (800692c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2232      	movs	r2, #50	; 0x32
 80068ba:	fb02 f303 	mul.w	r3, r2, r3
 80068be:	4a1c      	ldr	r2, [pc, #112]	; (8006930 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80068c0:	fba2 2303 	umull	r2, r3, r2, r3
 80068c4:	0c9b      	lsrs	r3, r3, #18
 80068c6:	3301      	adds	r3, #1
 80068c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068ca:	e002      	b.n	80068d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	3b01      	subs	r3, #1
 80068d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068d2:	4b15      	ldr	r3, [pc, #84]	; (8006928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068de:	d102      	bne.n	80068e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1f2      	bne.n	80068cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80068e6:	4b10      	ldr	r3, [pc, #64]	; (8006928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068f2:	d112      	bne.n	800691a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e011      	b.n	800691c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80068f8:	4b0b      	ldr	r3, [pc, #44]	; (8006928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068fe:	4a0a      	ldr	r2, [pc, #40]	; (8006928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006904:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006908:	e007      	b.n	800691a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800690a:	4b07      	ldr	r3, [pc, #28]	; (8006928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006912:	4a05      	ldr	r2, [pc, #20]	; (8006928 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006914:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006918:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3714      	adds	r7, #20
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr
 8006928:	40007000 	.word	0x40007000
 800692c:	200026d4 	.word	0x200026d4
 8006930:	431bde83 	.word	0x431bde83

08006934 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b088      	sub	sp, #32
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d101      	bne.n	8006946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e306      	b.n	8006f54 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b00      	cmp	r3, #0
 8006950:	d075      	beq.n	8006a3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006952:	4b97      	ldr	r3, [pc, #604]	; (8006bb0 <HAL_RCC_OscConfig+0x27c>)
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f003 030c 	and.w	r3, r3, #12
 800695a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800695c:	4b94      	ldr	r3, [pc, #592]	; (8006bb0 <HAL_RCC_OscConfig+0x27c>)
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	f003 0303 	and.w	r3, r3, #3
 8006964:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	2b0c      	cmp	r3, #12
 800696a:	d102      	bne.n	8006972 <HAL_RCC_OscConfig+0x3e>
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	2b03      	cmp	r3, #3
 8006970:	d002      	beq.n	8006978 <HAL_RCC_OscConfig+0x44>
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	2b08      	cmp	r3, #8
 8006976:	d10b      	bne.n	8006990 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006978:	4b8d      	ldr	r3, [pc, #564]	; (8006bb0 <HAL_RCC_OscConfig+0x27c>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d05b      	beq.n	8006a3c <HAL_RCC_OscConfig+0x108>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d157      	bne.n	8006a3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e2e1      	b.n	8006f54 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006998:	d106      	bne.n	80069a8 <HAL_RCC_OscConfig+0x74>
 800699a:	4b85      	ldr	r3, [pc, #532]	; (8006bb0 <HAL_RCC_OscConfig+0x27c>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a84      	ldr	r2, [pc, #528]	; (8006bb0 <HAL_RCC_OscConfig+0x27c>)
 80069a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069a4:	6013      	str	r3, [r2, #0]
 80069a6:	e01d      	b.n	80069e4 <HAL_RCC_OscConfig+0xb0>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069b0:	d10c      	bne.n	80069cc <HAL_RCC_OscConfig+0x98>
 80069b2:	4b7f      	ldr	r3, [pc, #508]	; (8006bb0 <HAL_RCC_OscConfig+0x27c>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a7e      	ldr	r2, [pc, #504]	; (8006bb0 <HAL_RCC_OscConfig+0x27c>)
 80069b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069bc:	6013      	str	r3, [r2, #0]
 80069be:	4b7c      	ldr	r3, [pc, #496]	; (8006bb0 <HAL_RCC_OscConfig+0x27c>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a7b      	ldr	r2, [pc, #492]	; (8006bb0 <HAL_RCC_OscConfig+0x27c>)
 80069c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069c8:	6013      	str	r3, [r2, #0]
 80069ca:	e00b      	b.n	80069e4 <HAL_RCC_OscConfig+0xb0>
 80069cc:	4b78      	ldr	r3, [pc, #480]	; (8006bb0 <HAL_RCC_OscConfig+0x27c>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a77      	ldr	r2, [pc, #476]	; (8006bb0 <HAL_RCC_OscConfig+0x27c>)
 80069d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069d6:	6013      	str	r3, [r2, #0]
 80069d8:	4b75      	ldr	r3, [pc, #468]	; (8006bb0 <HAL_RCC_OscConfig+0x27c>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a74      	ldr	r2, [pc, #464]	; (8006bb0 <HAL_RCC_OscConfig+0x27c>)
 80069de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d013      	beq.n	8006a14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ec:	f7fb fb2e 	bl	800204c <HAL_GetTick>
 80069f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069f2:	e008      	b.n	8006a06 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069f4:	f7fb fb2a 	bl	800204c <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	2b64      	cmp	r3, #100	; 0x64
 8006a00:	d901      	bls.n	8006a06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e2a6      	b.n	8006f54 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a06:	4b6a      	ldr	r3, [pc, #424]	; (8006bb0 <HAL_RCC_OscConfig+0x27c>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d0f0      	beq.n	80069f4 <HAL_RCC_OscConfig+0xc0>
 8006a12:	e014      	b.n	8006a3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a14:	f7fb fb1a 	bl	800204c <HAL_GetTick>
 8006a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a1a:	e008      	b.n	8006a2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a1c:	f7fb fb16 	bl	800204c <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	2b64      	cmp	r3, #100	; 0x64
 8006a28:	d901      	bls.n	8006a2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e292      	b.n	8006f54 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a2e:	4b60      	ldr	r3, [pc, #384]	; (8006bb0 <HAL_RCC_OscConfig+0x27c>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1f0      	bne.n	8006a1c <HAL_RCC_OscConfig+0xe8>
 8006a3a:	e000      	b.n	8006a3e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0302 	and.w	r3, r3, #2
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d075      	beq.n	8006b36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a4a:	4b59      	ldr	r3, [pc, #356]	; (8006bb0 <HAL_RCC_OscConfig+0x27c>)
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	f003 030c 	and.w	r3, r3, #12
 8006a52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a54:	4b56      	ldr	r3, [pc, #344]	; (8006bb0 <HAL_RCC_OscConfig+0x27c>)
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	f003 0303 	and.w	r3, r3, #3
 8006a5c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	2b0c      	cmp	r3, #12
 8006a62:	d102      	bne.n	8006a6a <HAL_RCC_OscConfig+0x136>
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d002      	beq.n	8006a70 <HAL_RCC_OscConfig+0x13c>
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	2b04      	cmp	r3, #4
 8006a6e:	d11f      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a70:	4b4f      	ldr	r3, [pc, #316]	; (8006bb0 <HAL_RCC_OscConfig+0x27c>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d005      	beq.n	8006a88 <HAL_RCC_OscConfig+0x154>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d101      	bne.n	8006a88 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e265      	b.n	8006f54 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a88:	4b49      	ldr	r3, [pc, #292]	; (8006bb0 <HAL_RCC_OscConfig+0x27c>)
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	061b      	lsls	r3, r3, #24
 8006a96:	4946      	ldr	r1, [pc, #280]	; (8006bb0 <HAL_RCC_OscConfig+0x27c>)
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006a9c:	4b45      	ldr	r3, [pc, #276]	; (8006bb4 <HAL_RCC_OscConfig+0x280>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f7fb fa87 	bl	8001fb4 <HAL_InitTick>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d043      	beq.n	8006b34 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e251      	b.n	8006f54 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d023      	beq.n	8006b00 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ab8:	4b3d      	ldr	r3, [pc, #244]	; (8006bb0 <HAL_RCC_OscConfig+0x27c>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a3c      	ldr	r2, [pc, #240]	; (8006bb0 <HAL_RCC_OscConfig+0x27c>)
 8006abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac4:	f7fb fac2 	bl	800204c <HAL_GetTick>
 8006ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006aca:	e008      	b.n	8006ade <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006acc:	f7fb fabe 	bl	800204c <HAL_GetTick>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d901      	bls.n	8006ade <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e23a      	b.n	8006f54 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ade:	4b34      	ldr	r3, [pc, #208]	; (8006bb0 <HAL_RCC_OscConfig+0x27c>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d0f0      	beq.n	8006acc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aea:	4b31      	ldr	r3, [pc, #196]	; (8006bb0 <HAL_RCC_OscConfig+0x27c>)
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	061b      	lsls	r3, r3, #24
 8006af8:	492d      	ldr	r1, [pc, #180]	; (8006bb0 <HAL_RCC_OscConfig+0x27c>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	604b      	str	r3, [r1, #4]
 8006afe:	e01a      	b.n	8006b36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b00:	4b2b      	ldr	r3, [pc, #172]	; (8006bb0 <HAL_RCC_OscConfig+0x27c>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a2a      	ldr	r2, [pc, #168]	; (8006bb0 <HAL_RCC_OscConfig+0x27c>)
 8006b06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b0c:	f7fb fa9e 	bl	800204c <HAL_GetTick>
 8006b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b12:	e008      	b.n	8006b26 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b14:	f7fb fa9a 	bl	800204c <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d901      	bls.n	8006b26 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e216      	b.n	8006f54 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b26:	4b22      	ldr	r3, [pc, #136]	; (8006bb0 <HAL_RCC_OscConfig+0x27c>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1f0      	bne.n	8006b14 <HAL_RCC_OscConfig+0x1e0>
 8006b32:	e000      	b.n	8006b36 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b34:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0308 	and.w	r3, r3, #8
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d041      	beq.n	8006bc6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d01c      	beq.n	8006b84 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b4a:	4b19      	ldr	r3, [pc, #100]	; (8006bb0 <HAL_RCC_OscConfig+0x27c>)
 8006b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b50:	4a17      	ldr	r2, [pc, #92]	; (8006bb0 <HAL_RCC_OscConfig+0x27c>)
 8006b52:	f043 0301 	orr.w	r3, r3, #1
 8006b56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b5a:	f7fb fa77 	bl	800204c <HAL_GetTick>
 8006b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b60:	e008      	b.n	8006b74 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b62:	f7fb fa73 	bl	800204c <HAL_GetTick>
 8006b66:	4602      	mov	r2, r0
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d901      	bls.n	8006b74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e1ef      	b.n	8006f54 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b74:	4b0e      	ldr	r3, [pc, #56]	; (8006bb0 <HAL_RCC_OscConfig+0x27c>)
 8006b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d0ef      	beq.n	8006b62 <HAL_RCC_OscConfig+0x22e>
 8006b82:	e020      	b.n	8006bc6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b84:	4b0a      	ldr	r3, [pc, #40]	; (8006bb0 <HAL_RCC_OscConfig+0x27c>)
 8006b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b8a:	4a09      	ldr	r2, [pc, #36]	; (8006bb0 <HAL_RCC_OscConfig+0x27c>)
 8006b8c:	f023 0301 	bic.w	r3, r3, #1
 8006b90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b94:	f7fb fa5a 	bl	800204c <HAL_GetTick>
 8006b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b9a:	e00d      	b.n	8006bb8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b9c:	f7fb fa56 	bl	800204c <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d906      	bls.n	8006bb8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e1d2      	b.n	8006f54 <HAL_RCC_OscConfig+0x620>
 8006bae:	bf00      	nop
 8006bb0:	40021000 	.word	0x40021000
 8006bb4:	200026d8 	.word	0x200026d8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006bb8:	4b8c      	ldr	r3, [pc, #560]	; (8006dec <HAL_RCC_OscConfig+0x4b8>)
 8006bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bbe:	f003 0302 	and.w	r3, r3, #2
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1ea      	bne.n	8006b9c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0304 	and.w	r3, r3, #4
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f000 80a6 	beq.w	8006d20 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006bd8:	4b84      	ldr	r3, [pc, #528]	; (8006dec <HAL_RCC_OscConfig+0x4b8>)
 8006bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d101      	bne.n	8006be8 <HAL_RCC_OscConfig+0x2b4>
 8006be4:	2301      	movs	r3, #1
 8006be6:	e000      	b.n	8006bea <HAL_RCC_OscConfig+0x2b6>
 8006be8:	2300      	movs	r3, #0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00d      	beq.n	8006c0a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bee:	4b7f      	ldr	r3, [pc, #508]	; (8006dec <HAL_RCC_OscConfig+0x4b8>)
 8006bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf2:	4a7e      	ldr	r2, [pc, #504]	; (8006dec <HAL_RCC_OscConfig+0x4b8>)
 8006bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bf8:	6593      	str	r3, [r2, #88]	; 0x58
 8006bfa:	4b7c      	ldr	r3, [pc, #496]	; (8006dec <HAL_RCC_OscConfig+0x4b8>)
 8006bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c02:	60fb      	str	r3, [r7, #12]
 8006c04:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006c06:	2301      	movs	r3, #1
 8006c08:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c0a:	4b79      	ldr	r3, [pc, #484]	; (8006df0 <HAL_RCC_OscConfig+0x4bc>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d118      	bne.n	8006c48 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c16:	4b76      	ldr	r3, [pc, #472]	; (8006df0 <HAL_RCC_OscConfig+0x4bc>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a75      	ldr	r2, [pc, #468]	; (8006df0 <HAL_RCC_OscConfig+0x4bc>)
 8006c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c22:	f7fb fa13 	bl	800204c <HAL_GetTick>
 8006c26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c28:	e008      	b.n	8006c3c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c2a:	f7fb fa0f 	bl	800204c <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d901      	bls.n	8006c3c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e18b      	b.n	8006f54 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c3c:	4b6c      	ldr	r3, [pc, #432]	; (8006df0 <HAL_RCC_OscConfig+0x4bc>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d0f0      	beq.n	8006c2a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d108      	bne.n	8006c62 <HAL_RCC_OscConfig+0x32e>
 8006c50:	4b66      	ldr	r3, [pc, #408]	; (8006dec <HAL_RCC_OscConfig+0x4b8>)
 8006c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c56:	4a65      	ldr	r2, [pc, #404]	; (8006dec <HAL_RCC_OscConfig+0x4b8>)
 8006c58:	f043 0301 	orr.w	r3, r3, #1
 8006c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c60:	e024      	b.n	8006cac <HAL_RCC_OscConfig+0x378>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	2b05      	cmp	r3, #5
 8006c68:	d110      	bne.n	8006c8c <HAL_RCC_OscConfig+0x358>
 8006c6a:	4b60      	ldr	r3, [pc, #384]	; (8006dec <HAL_RCC_OscConfig+0x4b8>)
 8006c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c70:	4a5e      	ldr	r2, [pc, #376]	; (8006dec <HAL_RCC_OscConfig+0x4b8>)
 8006c72:	f043 0304 	orr.w	r3, r3, #4
 8006c76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c7a:	4b5c      	ldr	r3, [pc, #368]	; (8006dec <HAL_RCC_OscConfig+0x4b8>)
 8006c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c80:	4a5a      	ldr	r2, [pc, #360]	; (8006dec <HAL_RCC_OscConfig+0x4b8>)
 8006c82:	f043 0301 	orr.w	r3, r3, #1
 8006c86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c8a:	e00f      	b.n	8006cac <HAL_RCC_OscConfig+0x378>
 8006c8c:	4b57      	ldr	r3, [pc, #348]	; (8006dec <HAL_RCC_OscConfig+0x4b8>)
 8006c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c92:	4a56      	ldr	r2, [pc, #344]	; (8006dec <HAL_RCC_OscConfig+0x4b8>)
 8006c94:	f023 0301 	bic.w	r3, r3, #1
 8006c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c9c:	4b53      	ldr	r3, [pc, #332]	; (8006dec <HAL_RCC_OscConfig+0x4b8>)
 8006c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ca2:	4a52      	ldr	r2, [pc, #328]	; (8006dec <HAL_RCC_OscConfig+0x4b8>)
 8006ca4:	f023 0304 	bic.w	r3, r3, #4
 8006ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d016      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cb4:	f7fb f9ca 	bl	800204c <HAL_GetTick>
 8006cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cba:	e00a      	b.n	8006cd2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cbc:	f7fb f9c6 	bl	800204c <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e140      	b.n	8006f54 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cd2:	4b46      	ldr	r3, [pc, #280]	; (8006dec <HAL_RCC_OscConfig+0x4b8>)
 8006cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cd8:	f003 0302 	and.w	r3, r3, #2
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d0ed      	beq.n	8006cbc <HAL_RCC_OscConfig+0x388>
 8006ce0:	e015      	b.n	8006d0e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ce2:	f7fb f9b3 	bl	800204c <HAL_GetTick>
 8006ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ce8:	e00a      	b.n	8006d00 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cea:	f7fb f9af 	bl	800204c <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d901      	bls.n	8006d00 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e129      	b.n	8006f54 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d00:	4b3a      	ldr	r3, [pc, #232]	; (8006dec <HAL_RCC_OscConfig+0x4b8>)
 8006d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d06:	f003 0302 	and.w	r3, r3, #2
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1ed      	bne.n	8006cea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d0e:	7ffb      	ldrb	r3, [r7, #31]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d105      	bne.n	8006d20 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d14:	4b35      	ldr	r3, [pc, #212]	; (8006dec <HAL_RCC_OscConfig+0x4b8>)
 8006d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d18:	4a34      	ldr	r2, [pc, #208]	; (8006dec <HAL_RCC_OscConfig+0x4b8>)
 8006d1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d1e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0320 	and.w	r3, r3, #32
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d03c      	beq.n	8006da6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d01c      	beq.n	8006d6e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d34:	4b2d      	ldr	r3, [pc, #180]	; (8006dec <HAL_RCC_OscConfig+0x4b8>)
 8006d36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d3a:	4a2c      	ldr	r2, [pc, #176]	; (8006dec <HAL_RCC_OscConfig+0x4b8>)
 8006d3c:	f043 0301 	orr.w	r3, r3, #1
 8006d40:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d44:	f7fb f982 	bl	800204c <HAL_GetTick>
 8006d48:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006d4a:	e008      	b.n	8006d5e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d4c:	f7fb f97e 	bl	800204c <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d901      	bls.n	8006d5e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e0fa      	b.n	8006f54 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006d5e:	4b23      	ldr	r3, [pc, #140]	; (8006dec <HAL_RCC_OscConfig+0x4b8>)
 8006d60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d64:	f003 0302 	and.w	r3, r3, #2
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d0ef      	beq.n	8006d4c <HAL_RCC_OscConfig+0x418>
 8006d6c:	e01b      	b.n	8006da6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006d6e:	4b1f      	ldr	r3, [pc, #124]	; (8006dec <HAL_RCC_OscConfig+0x4b8>)
 8006d70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d74:	4a1d      	ldr	r2, [pc, #116]	; (8006dec <HAL_RCC_OscConfig+0x4b8>)
 8006d76:	f023 0301 	bic.w	r3, r3, #1
 8006d7a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d7e:	f7fb f965 	bl	800204c <HAL_GetTick>
 8006d82:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d84:	e008      	b.n	8006d98 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d86:	f7fb f961 	bl	800204c <HAL_GetTick>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d901      	bls.n	8006d98 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e0dd      	b.n	8006f54 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d98:	4b14      	ldr	r3, [pc, #80]	; (8006dec <HAL_RCC_OscConfig+0x4b8>)
 8006d9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d9e:	f003 0302 	and.w	r3, r3, #2
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1ef      	bne.n	8006d86 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f000 80d1 	beq.w	8006f52 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006db0:	4b0e      	ldr	r3, [pc, #56]	; (8006dec <HAL_RCC_OscConfig+0x4b8>)
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	f003 030c 	and.w	r3, r3, #12
 8006db8:	2b0c      	cmp	r3, #12
 8006dba:	f000 808b 	beq.w	8006ed4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	69db      	ldr	r3, [r3, #28]
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d15e      	bne.n	8006e84 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dc6:	4b09      	ldr	r3, [pc, #36]	; (8006dec <HAL_RCC_OscConfig+0x4b8>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a08      	ldr	r2, [pc, #32]	; (8006dec <HAL_RCC_OscConfig+0x4b8>)
 8006dcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd2:	f7fb f93b 	bl	800204c <HAL_GetTick>
 8006dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006dd8:	e00c      	b.n	8006df4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dda:	f7fb f937 	bl	800204c <HAL_GetTick>
 8006dde:	4602      	mov	r2, r0
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d905      	bls.n	8006df4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e0b3      	b.n	8006f54 <HAL_RCC_OscConfig+0x620>
 8006dec:	40021000 	.word	0x40021000
 8006df0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006df4:	4b59      	ldr	r3, [pc, #356]	; (8006f5c <HAL_RCC_OscConfig+0x628>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1ec      	bne.n	8006dda <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e00:	4b56      	ldr	r3, [pc, #344]	; (8006f5c <HAL_RCC_OscConfig+0x628>)
 8006e02:	68da      	ldr	r2, [r3, #12]
 8006e04:	4b56      	ldr	r3, [pc, #344]	; (8006f60 <HAL_RCC_OscConfig+0x62c>)
 8006e06:	4013      	ands	r3, r2
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	6a11      	ldr	r1, [r2, #32]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e10:	3a01      	subs	r2, #1
 8006e12:	0112      	lsls	r2, r2, #4
 8006e14:	4311      	orrs	r1, r2
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006e1a:	0212      	lsls	r2, r2, #8
 8006e1c:	4311      	orrs	r1, r2
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006e22:	0852      	lsrs	r2, r2, #1
 8006e24:	3a01      	subs	r2, #1
 8006e26:	0552      	lsls	r2, r2, #21
 8006e28:	4311      	orrs	r1, r2
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006e2e:	0852      	lsrs	r2, r2, #1
 8006e30:	3a01      	subs	r2, #1
 8006e32:	0652      	lsls	r2, r2, #25
 8006e34:	4311      	orrs	r1, r2
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006e3a:	06d2      	lsls	r2, r2, #27
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	4947      	ldr	r1, [pc, #284]	; (8006f5c <HAL_RCC_OscConfig+0x628>)
 8006e40:	4313      	orrs	r3, r2
 8006e42:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e44:	4b45      	ldr	r3, [pc, #276]	; (8006f5c <HAL_RCC_OscConfig+0x628>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a44      	ldr	r2, [pc, #272]	; (8006f5c <HAL_RCC_OscConfig+0x628>)
 8006e4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e4e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006e50:	4b42      	ldr	r3, [pc, #264]	; (8006f5c <HAL_RCC_OscConfig+0x628>)
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	4a41      	ldr	r2, [pc, #260]	; (8006f5c <HAL_RCC_OscConfig+0x628>)
 8006e56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e5a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e5c:	f7fb f8f6 	bl	800204c <HAL_GetTick>
 8006e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e62:	e008      	b.n	8006e76 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e64:	f7fb f8f2 	bl	800204c <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d901      	bls.n	8006e76 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e06e      	b.n	8006f54 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e76:	4b39      	ldr	r3, [pc, #228]	; (8006f5c <HAL_RCC_OscConfig+0x628>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d0f0      	beq.n	8006e64 <HAL_RCC_OscConfig+0x530>
 8006e82:	e066      	b.n	8006f52 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e84:	4b35      	ldr	r3, [pc, #212]	; (8006f5c <HAL_RCC_OscConfig+0x628>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a34      	ldr	r2, [pc, #208]	; (8006f5c <HAL_RCC_OscConfig+0x628>)
 8006e8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e8e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006e90:	4b32      	ldr	r3, [pc, #200]	; (8006f5c <HAL_RCC_OscConfig+0x628>)
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	4a31      	ldr	r2, [pc, #196]	; (8006f5c <HAL_RCC_OscConfig+0x628>)
 8006e96:	f023 0303 	bic.w	r3, r3, #3
 8006e9a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006e9c:	4b2f      	ldr	r3, [pc, #188]	; (8006f5c <HAL_RCC_OscConfig+0x628>)
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	4a2e      	ldr	r2, [pc, #184]	; (8006f5c <HAL_RCC_OscConfig+0x628>)
 8006ea2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eaa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eac:	f7fb f8ce 	bl	800204c <HAL_GetTick>
 8006eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006eb2:	e008      	b.n	8006ec6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006eb4:	f7fb f8ca 	bl	800204c <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d901      	bls.n	8006ec6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e046      	b.n	8006f54 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ec6:	4b25      	ldr	r3, [pc, #148]	; (8006f5c <HAL_RCC_OscConfig+0x628>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1f0      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x580>
 8006ed2:	e03e      	b.n	8006f52 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	69db      	ldr	r3, [r3, #28]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d101      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e039      	b.n	8006f54 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006ee0:	4b1e      	ldr	r3, [pc, #120]	; (8006f5c <HAL_RCC_OscConfig+0x628>)
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	f003 0203 	and.w	r2, r3, #3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a1b      	ldr	r3, [r3, #32]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d12c      	bne.n	8006f4e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efe:	3b01      	subs	r3, #1
 8006f00:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d123      	bne.n	8006f4e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f10:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d11b      	bne.n	8006f4e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f20:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d113      	bne.n	8006f4e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f30:	085b      	lsrs	r3, r3, #1
 8006f32:	3b01      	subs	r3, #1
 8006f34:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d109      	bne.n	8006f4e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f44:	085b      	lsrs	r3, r3, #1
 8006f46:	3b01      	subs	r3, #1
 8006f48:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d001      	beq.n	8006f52 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e000      	b.n	8006f54 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3720      	adds	r7, #32
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	40021000 	.word	0x40021000
 8006f60:	019f800c 	.word	0x019f800c

08006f64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b086      	sub	sp, #24
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d101      	bne.n	8006f7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e11e      	b.n	80071ba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f7c:	4b91      	ldr	r3, [pc, #580]	; (80071c4 <HAL_RCC_ClockConfig+0x260>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 030f 	and.w	r3, r3, #15
 8006f84:	683a      	ldr	r2, [r7, #0]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d910      	bls.n	8006fac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f8a:	4b8e      	ldr	r3, [pc, #568]	; (80071c4 <HAL_RCC_ClockConfig+0x260>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f023 020f 	bic.w	r2, r3, #15
 8006f92:	498c      	ldr	r1, [pc, #560]	; (80071c4 <HAL_RCC_ClockConfig+0x260>)
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f9a:	4b8a      	ldr	r3, [pc, #552]	; (80071c4 <HAL_RCC_ClockConfig+0x260>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 030f 	and.w	r3, r3, #15
 8006fa2:	683a      	ldr	r2, [r7, #0]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d001      	beq.n	8006fac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e106      	b.n	80071ba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d073      	beq.n	80070a0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	2b03      	cmp	r3, #3
 8006fbe:	d129      	bne.n	8007014 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fc0:	4b81      	ldr	r3, [pc, #516]	; (80071c8 <HAL_RCC_ClockConfig+0x264>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d101      	bne.n	8006fd0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e0f4      	b.n	80071ba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006fd0:	f000 f970 	bl	80072b4 <RCC_GetSysClockFreqFromPLLSource>
 8006fd4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	4a7c      	ldr	r2, [pc, #496]	; (80071cc <HAL_RCC_ClockConfig+0x268>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d93f      	bls.n	800705e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006fde:	4b7a      	ldr	r3, [pc, #488]	; (80071c8 <HAL_RCC_ClockConfig+0x264>)
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d009      	beq.n	8006ffe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d033      	beq.n	800705e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d12f      	bne.n	800705e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006ffe:	4b72      	ldr	r3, [pc, #456]	; (80071c8 <HAL_RCC_ClockConfig+0x264>)
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007006:	4a70      	ldr	r2, [pc, #448]	; (80071c8 <HAL_RCC_ClockConfig+0x264>)
 8007008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800700c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800700e:	2380      	movs	r3, #128	; 0x80
 8007010:	617b      	str	r3, [r7, #20]
 8007012:	e024      	b.n	800705e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	2b02      	cmp	r3, #2
 800701a:	d107      	bne.n	800702c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800701c:	4b6a      	ldr	r3, [pc, #424]	; (80071c8 <HAL_RCC_ClockConfig+0x264>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007024:	2b00      	cmp	r3, #0
 8007026:	d109      	bne.n	800703c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e0c6      	b.n	80071ba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800702c:	4b66      	ldr	r3, [pc, #408]	; (80071c8 <HAL_RCC_ClockConfig+0x264>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007034:	2b00      	cmp	r3, #0
 8007036:	d101      	bne.n	800703c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e0be      	b.n	80071ba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800703c:	f000 f8ce 	bl	80071dc <HAL_RCC_GetSysClockFreq>
 8007040:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	4a61      	ldr	r2, [pc, #388]	; (80071cc <HAL_RCC_ClockConfig+0x268>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d909      	bls.n	800705e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800704a:	4b5f      	ldr	r3, [pc, #380]	; (80071c8 <HAL_RCC_ClockConfig+0x264>)
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007052:	4a5d      	ldr	r2, [pc, #372]	; (80071c8 <HAL_RCC_ClockConfig+0x264>)
 8007054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007058:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800705a:	2380      	movs	r3, #128	; 0x80
 800705c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800705e:	4b5a      	ldr	r3, [pc, #360]	; (80071c8 <HAL_RCC_ClockConfig+0x264>)
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f023 0203 	bic.w	r2, r3, #3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	4957      	ldr	r1, [pc, #348]	; (80071c8 <HAL_RCC_ClockConfig+0x264>)
 800706c:	4313      	orrs	r3, r2
 800706e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007070:	f7fa ffec 	bl	800204c <HAL_GetTick>
 8007074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007076:	e00a      	b.n	800708e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007078:	f7fa ffe8 	bl	800204c <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	f241 3288 	movw	r2, #5000	; 0x1388
 8007086:	4293      	cmp	r3, r2
 8007088:	d901      	bls.n	800708e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e095      	b.n	80071ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800708e:	4b4e      	ldr	r3, [pc, #312]	; (80071c8 <HAL_RCC_ClockConfig+0x264>)
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f003 020c 	and.w	r2, r3, #12
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	429a      	cmp	r2, r3
 800709e:	d1eb      	bne.n	8007078 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0302 	and.w	r3, r3, #2
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d023      	beq.n	80070f4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0304 	and.w	r3, r3, #4
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d005      	beq.n	80070c4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070b8:	4b43      	ldr	r3, [pc, #268]	; (80071c8 <HAL_RCC_ClockConfig+0x264>)
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	4a42      	ldr	r2, [pc, #264]	; (80071c8 <HAL_RCC_ClockConfig+0x264>)
 80070be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80070c2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0308 	and.w	r3, r3, #8
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d007      	beq.n	80070e0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80070d0:	4b3d      	ldr	r3, [pc, #244]	; (80071c8 <HAL_RCC_ClockConfig+0x264>)
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80070d8:	4a3b      	ldr	r2, [pc, #236]	; (80071c8 <HAL_RCC_ClockConfig+0x264>)
 80070da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80070de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070e0:	4b39      	ldr	r3, [pc, #228]	; (80071c8 <HAL_RCC_ClockConfig+0x264>)
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	4936      	ldr	r1, [pc, #216]	; (80071c8 <HAL_RCC_ClockConfig+0x264>)
 80070ee:	4313      	orrs	r3, r2
 80070f0:	608b      	str	r3, [r1, #8]
 80070f2:	e008      	b.n	8007106 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	2b80      	cmp	r3, #128	; 0x80
 80070f8:	d105      	bne.n	8007106 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80070fa:	4b33      	ldr	r3, [pc, #204]	; (80071c8 <HAL_RCC_ClockConfig+0x264>)
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	4a32      	ldr	r2, [pc, #200]	; (80071c8 <HAL_RCC_ClockConfig+0x264>)
 8007100:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007104:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007106:	4b2f      	ldr	r3, [pc, #188]	; (80071c4 <HAL_RCC_ClockConfig+0x260>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 030f 	and.w	r3, r3, #15
 800710e:	683a      	ldr	r2, [r7, #0]
 8007110:	429a      	cmp	r2, r3
 8007112:	d21d      	bcs.n	8007150 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007114:	4b2b      	ldr	r3, [pc, #172]	; (80071c4 <HAL_RCC_ClockConfig+0x260>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f023 020f 	bic.w	r2, r3, #15
 800711c:	4929      	ldr	r1, [pc, #164]	; (80071c4 <HAL_RCC_ClockConfig+0x260>)
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	4313      	orrs	r3, r2
 8007122:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007124:	f7fa ff92 	bl	800204c <HAL_GetTick>
 8007128:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800712a:	e00a      	b.n	8007142 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800712c:	f7fa ff8e 	bl	800204c <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	f241 3288 	movw	r2, #5000	; 0x1388
 800713a:	4293      	cmp	r3, r2
 800713c:	d901      	bls.n	8007142 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e03b      	b.n	80071ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007142:	4b20      	ldr	r3, [pc, #128]	; (80071c4 <HAL_RCC_ClockConfig+0x260>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 030f 	and.w	r3, r3, #15
 800714a:	683a      	ldr	r2, [r7, #0]
 800714c:	429a      	cmp	r2, r3
 800714e:	d1ed      	bne.n	800712c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0304 	and.w	r3, r3, #4
 8007158:	2b00      	cmp	r3, #0
 800715a:	d008      	beq.n	800716e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800715c:	4b1a      	ldr	r3, [pc, #104]	; (80071c8 <HAL_RCC_ClockConfig+0x264>)
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	4917      	ldr	r1, [pc, #92]	; (80071c8 <HAL_RCC_ClockConfig+0x264>)
 800716a:	4313      	orrs	r3, r2
 800716c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0308 	and.w	r3, r3, #8
 8007176:	2b00      	cmp	r3, #0
 8007178:	d009      	beq.n	800718e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800717a:	4b13      	ldr	r3, [pc, #76]	; (80071c8 <HAL_RCC_ClockConfig+0x264>)
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	00db      	lsls	r3, r3, #3
 8007188:	490f      	ldr	r1, [pc, #60]	; (80071c8 <HAL_RCC_ClockConfig+0x264>)
 800718a:	4313      	orrs	r3, r2
 800718c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800718e:	f000 f825 	bl	80071dc <HAL_RCC_GetSysClockFreq>
 8007192:	4602      	mov	r2, r0
 8007194:	4b0c      	ldr	r3, [pc, #48]	; (80071c8 <HAL_RCC_ClockConfig+0x264>)
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	091b      	lsrs	r3, r3, #4
 800719a:	f003 030f 	and.w	r3, r3, #15
 800719e:	490c      	ldr	r1, [pc, #48]	; (80071d0 <HAL_RCC_ClockConfig+0x26c>)
 80071a0:	5ccb      	ldrb	r3, [r1, r3]
 80071a2:	f003 031f 	and.w	r3, r3, #31
 80071a6:	fa22 f303 	lsr.w	r3, r2, r3
 80071aa:	4a0a      	ldr	r2, [pc, #40]	; (80071d4 <HAL_RCC_ClockConfig+0x270>)
 80071ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80071ae:	4b0a      	ldr	r3, [pc, #40]	; (80071d8 <HAL_RCC_ClockConfig+0x274>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7fa fefe 	bl	8001fb4 <HAL_InitTick>
 80071b8:	4603      	mov	r3, r0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3718      	adds	r7, #24
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	40022000 	.word	0x40022000
 80071c8:	40021000 	.word	0x40021000
 80071cc:	04c4b400 	.word	0x04c4b400
 80071d0:	08010f58 	.word	0x08010f58
 80071d4:	200026d4 	.word	0x200026d4
 80071d8:	200026d8 	.word	0x200026d8

080071dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071dc:	b480      	push	{r7}
 80071de:	b087      	sub	sp, #28
 80071e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80071e2:	4b2c      	ldr	r3, [pc, #176]	; (8007294 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f003 030c 	and.w	r3, r3, #12
 80071ea:	2b04      	cmp	r3, #4
 80071ec:	d102      	bne.n	80071f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80071ee:	4b2a      	ldr	r3, [pc, #168]	; (8007298 <HAL_RCC_GetSysClockFreq+0xbc>)
 80071f0:	613b      	str	r3, [r7, #16]
 80071f2:	e047      	b.n	8007284 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80071f4:	4b27      	ldr	r3, [pc, #156]	; (8007294 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f003 030c 	and.w	r3, r3, #12
 80071fc:	2b08      	cmp	r3, #8
 80071fe:	d102      	bne.n	8007206 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007200:	4b25      	ldr	r3, [pc, #148]	; (8007298 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007202:	613b      	str	r3, [r7, #16]
 8007204:	e03e      	b.n	8007284 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007206:	4b23      	ldr	r3, [pc, #140]	; (8007294 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f003 030c 	and.w	r3, r3, #12
 800720e:	2b0c      	cmp	r3, #12
 8007210:	d136      	bne.n	8007280 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007212:	4b20      	ldr	r3, [pc, #128]	; (8007294 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	f003 0303 	and.w	r3, r3, #3
 800721a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800721c:	4b1d      	ldr	r3, [pc, #116]	; (8007294 <HAL_RCC_GetSysClockFreq+0xb8>)
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	091b      	lsrs	r3, r3, #4
 8007222:	f003 030f 	and.w	r3, r3, #15
 8007226:	3301      	adds	r3, #1
 8007228:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2b03      	cmp	r3, #3
 800722e:	d10c      	bne.n	800724a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007230:	4a19      	ldr	r2, [pc, #100]	; (8007298 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	fbb2 f3f3 	udiv	r3, r2, r3
 8007238:	4a16      	ldr	r2, [pc, #88]	; (8007294 <HAL_RCC_GetSysClockFreq+0xb8>)
 800723a:	68d2      	ldr	r2, [r2, #12]
 800723c:	0a12      	lsrs	r2, r2, #8
 800723e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007242:	fb02 f303 	mul.w	r3, r2, r3
 8007246:	617b      	str	r3, [r7, #20]
      break;
 8007248:	e00c      	b.n	8007264 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800724a:	4a13      	ldr	r2, [pc, #76]	; (8007298 <HAL_RCC_GetSysClockFreq+0xbc>)
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007252:	4a10      	ldr	r2, [pc, #64]	; (8007294 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007254:	68d2      	ldr	r2, [r2, #12]
 8007256:	0a12      	lsrs	r2, r2, #8
 8007258:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800725c:	fb02 f303 	mul.w	r3, r2, r3
 8007260:	617b      	str	r3, [r7, #20]
      break;
 8007262:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007264:	4b0b      	ldr	r3, [pc, #44]	; (8007294 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	0e5b      	lsrs	r3, r3, #25
 800726a:	f003 0303 	and.w	r3, r3, #3
 800726e:	3301      	adds	r3, #1
 8007270:	005b      	lsls	r3, r3, #1
 8007272:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	fbb2 f3f3 	udiv	r3, r2, r3
 800727c:	613b      	str	r3, [r7, #16]
 800727e:	e001      	b.n	8007284 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007280:	2300      	movs	r3, #0
 8007282:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007284:	693b      	ldr	r3, [r7, #16]
}
 8007286:	4618      	mov	r0, r3
 8007288:	371c      	adds	r7, #28
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	40021000 	.word	0x40021000
 8007298:	00f42400 	.word	0x00f42400

0800729c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800729c:	b480      	push	{r7}
 800729e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072a0:	4b03      	ldr	r3, [pc, #12]	; (80072b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80072a2:	681b      	ldr	r3, [r3, #0]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	200026d4 	.word	0x200026d4

080072b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b087      	sub	sp, #28
 80072b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80072ba:	4b1e      	ldr	r3, [pc, #120]	; (8007334 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	f003 0303 	and.w	r3, r3, #3
 80072c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80072c4:	4b1b      	ldr	r3, [pc, #108]	; (8007334 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	091b      	lsrs	r3, r3, #4
 80072ca:	f003 030f 	and.w	r3, r3, #15
 80072ce:	3301      	adds	r3, #1
 80072d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	2b03      	cmp	r3, #3
 80072d6:	d10c      	bne.n	80072f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072d8:	4a17      	ldr	r2, [pc, #92]	; (8007338 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e0:	4a14      	ldr	r2, [pc, #80]	; (8007334 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072e2:	68d2      	ldr	r2, [r2, #12]
 80072e4:	0a12      	lsrs	r2, r2, #8
 80072e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80072ea:	fb02 f303 	mul.w	r3, r2, r3
 80072ee:	617b      	str	r3, [r7, #20]
    break;
 80072f0:	e00c      	b.n	800730c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072f2:	4a11      	ldr	r2, [pc, #68]	; (8007338 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072fa:	4a0e      	ldr	r2, [pc, #56]	; (8007334 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072fc:	68d2      	ldr	r2, [r2, #12]
 80072fe:	0a12      	lsrs	r2, r2, #8
 8007300:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007304:	fb02 f303 	mul.w	r3, r2, r3
 8007308:	617b      	str	r3, [r7, #20]
    break;
 800730a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800730c:	4b09      	ldr	r3, [pc, #36]	; (8007334 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	0e5b      	lsrs	r3, r3, #25
 8007312:	f003 0303 	and.w	r3, r3, #3
 8007316:	3301      	adds	r3, #1
 8007318:	005b      	lsls	r3, r3, #1
 800731a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800731c:	697a      	ldr	r2, [r7, #20]
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	fbb2 f3f3 	udiv	r3, r2, r3
 8007324:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007326:	687b      	ldr	r3, [r7, #4]
}
 8007328:	4618      	mov	r0, r3
 800732a:	371c      	adds	r7, #28
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr
 8007334:	40021000 	.word	0x40021000
 8007338:	00f42400 	.word	0x00f42400

0800733c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007344:	2300      	movs	r3, #0
 8007346:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007348:	2300      	movs	r3, #0
 800734a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007354:	2b00      	cmp	r3, #0
 8007356:	f000 8098 	beq.w	800748a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800735a:	2300      	movs	r3, #0
 800735c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800735e:	4b43      	ldr	r3, [pc, #268]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10d      	bne.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800736a:	4b40      	ldr	r3, [pc, #256]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800736c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800736e:	4a3f      	ldr	r2, [pc, #252]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007374:	6593      	str	r3, [r2, #88]	; 0x58
 8007376:	4b3d      	ldr	r3, [pc, #244]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800737a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800737e:	60bb      	str	r3, [r7, #8]
 8007380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007382:	2301      	movs	r3, #1
 8007384:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007386:	4b3a      	ldr	r3, [pc, #232]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a39      	ldr	r2, [pc, #228]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800738c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007390:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007392:	f7fa fe5b 	bl	800204c <HAL_GetTick>
 8007396:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007398:	e009      	b.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800739a:	f7fa fe57 	bl	800204c <HAL_GetTick>
 800739e:	4602      	mov	r2, r0
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d902      	bls.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	74fb      	strb	r3, [r7, #19]
        break;
 80073ac:	e005      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073ae:	4b30      	ldr	r3, [pc, #192]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d0ef      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80073ba:	7cfb      	ldrb	r3, [r7, #19]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d159      	bne.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80073c0:	4b2a      	ldr	r3, [pc, #168]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073ca:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d01e      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d019      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80073dc:	4b23      	ldr	r3, [pc, #140]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80073e8:	4b20      	ldr	r3, [pc, #128]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ee:	4a1f      	ldr	r2, [pc, #124]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80073f8:	4b1c      	ldr	r3, [pc, #112]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073fe:	4a1b      	ldr	r2, [pc, #108]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007408:	4a18      	ldr	r2, [pc, #96]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	2b00      	cmp	r3, #0
 8007418:	d016      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800741a:	f7fa fe17 	bl	800204c <HAL_GetTick>
 800741e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007420:	e00b      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007422:	f7fa fe13 	bl	800204c <HAL_GetTick>
 8007426:	4602      	mov	r2, r0
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007430:	4293      	cmp	r3, r2
 8007432:	d902      	bls.n	800743a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007434:	2303      	movs	r3, #3
 8007436:	74fb      	strb	r3, [r7, #19]
            break;
 8007438:	e006      	b.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800743a:	4b0c      	ldr	r3, [pc, #48]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800743c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007440:	f003 0302 	and.w	r3, r3, #2
 8007444:	2b00      	cmp	r3, #0
 8007446:	d0ec      	beq.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007448:	7cfb      	ldrb	r3, [r7, #19]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d10b      	bne.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800744e:	4b07      	ldr	r3, [pc, #28]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007454:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800745c:	4903      	ldr	r1, [pc, #12]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800745e:	4313      	orrs	r3, r2
 8007460:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007464:	e008      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007466:	7cfb      	ldrb	r3, [r7, #19]
 8007468:	74bb      	strb	r3, [r7, #18]
 800746a:	e005      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800746c:	40021000 	.word	0x40021000
 8007470:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007474:	7cfb      	ldrb	r3, [r7, #19]
 8007476:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007478:	7c7b      	ldrb	r3, [r7, #17]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d105      	bne.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800747e:	4ba7      	ldr	r3, [pc, #668]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007482:	4aa6      	ldr	r2, [pc, #664]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007488:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00a      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007496:	4ba1      	ldr	r3, [pc, #644]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800749c:	f023 0203 	bic.w	r2, r3, #3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	499d      	ldr	r1, [pc, #628]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0302 	and.w	r3, r3, #2
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00a      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80074b8:	4b98      	ldr	r3, [pc, #608]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074be:	f023 020c 	bic.w	r2, r3, #12
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	4995      	ldr	r1, [pc, #596]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074c8:	4313      	orrs	r3, r2
 80074ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 0304 	and.w	r3, r3, #4
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00a      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80074da:	4b90      	ldr	r3, [pc, #576]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	498c      	ldr	r1, [pc, #560]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074ea:	4313      	orrs	r3, r2
 80074ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 0308 	and.w	r3, r3, #8
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00a      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80074fc:	4b87      	ldr	r3, [pc, #540]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007502:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	4984      	ldr	r1, [pc, #528]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800750c:	4313      	orrs	r3, r2
 800750e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 0310 	and.w	r3, r3, #16
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00a      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800751e:	4b7f      	ldr	r3, [pc, #508]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007524:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	497b      	ldr	r1, [pc, #492]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800752e:	4313      	orrs	r3, r2
 8007530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 0320 	and.w	r3, r3, #32
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00a      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007540:	4b76      	ldr	r3, [pc, #472]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007546:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	4973      	ldr	r1, [pc, #460]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007550:	4313      	orrs	r3, r2
 8007552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00a      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007562:	4b6e      	ldr	r3, [pc, #440]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007568:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	69db      	ldr	r3, [r3, #28]
 8007570:	496a      	ldr	r1, [pc, #424]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007572:	4313      	orrs	r3, r2
 8007574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00a      	beq.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007584:	4b65      	ldr	r3, [pc, #404]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800758a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	4962      	ldr	r1, [pc, #392]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007594:	4313      	orrs	r3, r2
 8007596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00a      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80075a6:	4b5d      	ldr	r3, [pc, #372]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b4:	4959      	ldr	r1, [pc, #356]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075b6:	4313      	orrs	r3, r2
 80075b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00a      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80075c8:	4b54      	ldr	r3, [pc, #336]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075ce:	f023 0203 	bic.w	r2, r3, #3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d6:	4951      	ldr	r1, [pc, #324]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075d8:	4313      	orrs	r3, r2
 80075da:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00a      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075ea:	4b4c      	ldr	r3, [pc, #304]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f8:	4948      	ldr	r1, [pc, #288]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075fa:	4313      	orrs	r3, r2
 80075fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007608:	2b00      	cmp	r3, #0
 800760a:	d015      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800760c:	4b43      	ldr	r3, [pc, #268]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800760e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007612:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761a:	4940      	ldr	r1, [pc, #256]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800761c:	4313      	orrs	r3, r2
 800761e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800762a:	d105      	bne.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800762c:	4b3b      	ldr	r3, [pc, #236]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	4a3a      	ldr	r2, [pc, #232]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007632:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007636:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007640:	2b00      	cmp	r3, #0
 8007642:	d015      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007644:	4b35      	ldr	r3, [pc, #212]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800764a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007652:	4932      	ldr	r1, [pc, #200]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007654:	4313      	orrs	r3, r2
 8007656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800765e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007662:	d105      	bne.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007664:	4b2d      	ldr	r3, [pc, #180]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	4a2c      	ldr	r2, [pc, #176]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800766a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800766e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d015      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800767c:	4b27      	ldr	r3, [pc, #156]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800767e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007682:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768a:	4924      	ldr	r1, [pc, #144]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800768c:	4313      	orrs	r3, r2
 800768e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007696:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800769a:	d105      	bne.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800769c:	4b1f      	ldr	r3, [pc, #124]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	4a1e      	ldr	r2, [pc, #120]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076a6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d015      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80076b4:	4b19      	ldr	r3, [pc, #100]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076c2:	4916      	ldr	r1, [pc, #88]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076d2:	d105      	bne.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076d4:	4b11      	ldr	r3, [pc, #68]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	4a10      	ldr	r2, [pc, #64]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076de:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d019      	beq.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80076ec:	4b0b      	ldr	r3, [pc, #44]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fa:	4908      	ldr	r1, [pc, #32]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076fc:	4313      	orrs	r3, r2
 80076fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007706:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800770a:	d109      	bne.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800770c:	4b03      	ldr	r3, [pc, #12]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	4a02      	ldr	r2, [pc, #8]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007712:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007716:	60d3      	str	r3, [r2, #12]
 8007718:	e002      	b.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800771a:	bf00      	nop
 800771c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007728:	2b00      	cmp	r3, #0
 800772a:	d015      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800772c:	4b29      	ldr	r3, [pc, #164]	; (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800772e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007732:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800773a:	4926      	ldr	r1, [pc, #152]	; (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800773c:	4313      	orrs	r3, r2
 800773e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007746:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800774a:	d105      	bne.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800774c:	4b21      	ldr	r3, [pc, #132]	; (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	4a20      	ldr	r2, [pc, #128]	; (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007756:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007760:	2b00      	cmp	r3, #0
 8007762:	d015      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007764:	4b1b      	ldr	r3, [pc, #108]	; (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800776a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007772:	4918      	ldr	r1, [pc, #96]	; (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007774:	4313      	orrs	r3, r2
 8007776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800777e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007782:	d105      	bne.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007784:	4b13      	ldr	r3, [pc, #76]	; (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	4a12      	ldr	r2, [pc, #72]	; (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800778a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800778e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d015      	beq.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800779c:	4b0d      	ldr	r3, [pc, #52]	; (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800779e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077aa:	490a      	ldr	r1, [pc, #40]	; (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077ba:	d105      	bne.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077bc:	4b05      	ldr	r3, [pc, #20]	; (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	4a04      	ldr	r2, [pc, #16]	; (80077d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80077c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3718      	adds	r7, #24
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	40021000 	.word	0x40021000

080077d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d101      	bne.n	80077ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e09d      	b.n	8007926 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d108      	bne.n	8007804 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077fa:	d009      	beq.n	8007810 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	61da      	str	r2, [r3, #28]
 8007802:	e005      	b.n	8007810 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2b00      	cmp	r3, #0
 8007820:	d106      	bne.n	8007830 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f7fa f994 	bl	8001b58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2202      	movs	r2, #2
 8007834:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007846:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007850:	d902      	bls.n	8007858 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007852:	2300      	movs	r3, #0
 8007854:	60fb      	str	r3, [r7, #12]
 8007856:	e002      	b.n	800785e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800785c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007866:	d007      	beq.n	8007878 <HAL_SPI_Init+0xa0>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007870:	d002      	beq.n	8007878 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007888:	431a      	orrs	r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	f003 0302 	and.w	r3, r3, #2
 8007892:	431a      	orrs	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	695b      	ldr	r3, [r3, #20]
 8007898:	f003 0301 	and.w	r3, r3, #1
 800789c:	431a      	orrs	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	699b      	ldr	r3, [r3, #24]
 80078a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078a6:	431a      	orrs	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	69db      	ldr	r3, [r3, #28]
 80078ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078b0:	431a      	orrs	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ba:	ea42 0103 	orr.w	r1, r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	430a      	orrs	r2, r1
 80078cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	0c1b      	lsrs	r3, r3, #16
 80078d4:	f003 0204 	and.w	r2, r3, #4
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078dc:	f003 0310 	and.w	r3, r3, #16
 80078e0:	431a      	orrs	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e6:	f003 0308 	and.w	r3, r3, #8
 80078ea:	431a      	orrs	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80078f4:	ea42 0103 	orr.w	r1, r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	430a      	orrs	r2, r1
 8007904:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	69da      	ldr	r2, [r3, #28]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007914:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b088      	sub	sp, #32
 8007932:	af00      	add	r7, sp, #0
 8007934:	60f8      	str	r0, [r7, #12]
 8007936:	60b9      	str	r1, [r7, #8]
 8007938:	603b      	str	r3, [r7, #0]
 800793a:	4613      	mov	r3, r2
 800793c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800793e:	2300      	movs	r3, #0
 8007940:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007948:	2b01      	cmp	r3, #1
 800794a:	d101      	bne.n	8007950 <HAL_SPI_Transmit+0x22>
 800794c:	2302      	movs	r3, #2
 800794e:	e158      	b.n	8007c02 <HAL_SPI_Transmit+0x2d4>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007958:	f7fa fb78 	bl	800204c <HAL_GetTick>
 800795c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800795e:	88fb      	ldrh	r3, [r7, #6]
 8007960:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007968:	b2db      	uxtb	r3, r3
 800796a:	2b01      	cmp	r3, #1
 800796c:	d002      	beq.n	8007974 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800796e:	2302      	movs	r3, #2
 8007970:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007972:	e13d      	b.n	8007bf0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d002      	beq.n	8007980 <HAL_SPI_Transmit+0x52>
 800797a:	88fb      	ldrh	r3, [r7, #6]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d102      	bne.n	8007986 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007984:	e134      	b.n	8007bf0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2203      	movs	r2, #3
 800798a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	88fa      	ldrh	r2, [r7, #6]
 800799e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	88fa      	ldrh	r2, [r7, #6]
 80079a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079d0:	d10f      	bne.n	80079f2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079fc:	2b40      	cmp	r3, #64	; 0x40
 80079fe:	d007      	beq.n	8007a10 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a18:	d94b      	bls.n	8007ab2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d002      	beq.n	8007a28 <HAL_SPI_Transmit+0xfa>
 8007a22:	8afb      	ldrh	r3, [r7, #22]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d13e      	bne.n	8007aa6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2c:	881a      	ldrh	r2, [r3, #0]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a38:	1c9a      	adds	r2, r3, #2
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	3b01      	subs	r3, #1
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a4c:	e02b      	b.n	8007aa6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	f003 0302 	and.w	r3, r3, #2
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d112      	bne.n	8007a82 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a60:	881a      	ldrh	r2, [r3, #0]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6c:	1c9a      	adds	r2, r3, #2
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a80:	e011      	b.n	8007aa6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a82:	f7fa fae3 	bl	800204c <HAL_GetTick>
 8007a86:	4602      	mov	r2, r0
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	1ad3      	subs	r3, r2, r3
 8007a8c:	683a      	ldr	r2, [r7, #0]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d803      	bhi.n	8007a9a <HAL_SPI_Transmit+0x16c>
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a98:	d102      	bne.n	8007aa0 <HAL_SPI_Transmit+0x172>
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d102      	bne.n	8007aa6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007aa4:	e0a4      	b.n	8007bf0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1ce      	bne.n	8007a4e <HAL_SPI_Transmit+0x120>
 8007ab0:	e07c      	b.n	8007bac <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d002      	beq.n	8007ac0 <HAL_SPI_Transmit+0x192>
 8007aba:	8afb      	ldrh	r3, [r7, #22]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d170      	bne.n	8007ba2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d912      	bls.n	8007af0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ace:	881a      	ldrh	r2, [r3, #0]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ada:	1c9a      	adds	r2, r3, #2
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	3b02      	subs	r3, #2
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007aee:	e058      	b.n	8007ba2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	330c      	adds	r3, #12
 8007afa:	7812      	ldrb	r2, [r2, #0]
 8007afc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b02:	1c5a      	adds	r2, r3, #1
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007b16:	e044      	b.n	8007ba2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f003 0302 	and.w	r3, r3, #2
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d12b      	bne.n	8007b7e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d912      	bls.n	8007b56 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b34:	881a      	ldrh	r2, [r3, #0]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b40:	1c9a      	adds	r2, r3, #2
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	3b02      	subs	r3, #2
 8007b4e:	b29a      	uxth	r2, r3
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b54:	e025      	b.n	8007ba2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	330c      	adds	r3, #12
 8007b60:	7812      	ldrb	r2, [r2, #0]
 8007b62:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b68:	1c5a      	adds	r2, r3, #1
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	3b01      	subs	r3, #1
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b7c:	e011      	b.n	8007ba2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b7e:	f7fa fa65 	bl	800204c <HAL_GetTick>
 8007b82:	4602      	mov	r2, r0
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	683a      	ldr	r2, [r7, #0]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d803      	bhi.n	8007b96 <HAL_SPI_Transmit+0x268>
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b94:	d102      	bne.n	8007b9c <HAL_SPI_Transmit+0x26e>
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d102      	bne.n	8007ba2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007ba0:	e026      	b.n	8007bf0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1b5      	bne.n	8007b18 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007bac:	69ba      	ldr	r2, [r7, #24]
 8007bae:	6839      	ldr	r1, [r7, #0]
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f000 fd47 	bl	8008644 <SPI_EndRxTxTransaction>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d002      	beq.n	8007bc2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2220      	movs	r2, #32
 8007bc0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d10a      	bne.n	8007be0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bca:	2300      	movs	r3, #0
 8007bcc:	613b      	str	r3, [r7, #16]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	613b      	str	r3, [r7, #16]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	613b      	str	r3, [r7, #16]
 8007bde:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d002      	beq.n	8007bee <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	77fb      	strb	r3, [r7, #31]
 8007bec:	e000      	b.n	8007bf0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007bee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007c00:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3720      	adds	r7, #32
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
	...

08007c0c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b086      	sub	sp, #24
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	607a      	str	r2, [r7, #4]
 8007c18:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d101      	bne.n	8007c2c <HAL_SPI_TransmitReceive_DMA+0x20>
 8007c28:	2302      	movs	r3, #2
 8007c2a:	e16c      	b.n	8007f06 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c3a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007c42:	7dbb      	ldrb	r3, [r7, #22]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d00d      	beq.n	8007c64 <HAL_SPI_TransmitReceive_DMA+0x58>
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c4e:	d106      	bne.n	8007c5e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d102      	bne.n	8007c5e <HAL_SPI_TransmitReceive_DMA+0x52>
 8007c58:	7dbb      	ldrb	r3, [r7, #22]
 8007c5a:	2b04      	cmp	r3, #4
 8007c5c:	d002      	beq.n	8007c64 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8007c5e:	2302      	movs	r3, #2
 8007c60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007c62:	e14b      	b.n	8007efc <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d005      	beq.n	8007c76 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d002      	beq.n	8007c76 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007c70:	887b      	ldrh	r3, [r7, #2]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d102      	bne.n	8007c7c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007c7a:	e13f      	b.n	8007efc <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b04      	cmp	r3, #4
 8007c86:	d003      	beq.n	8007c90 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2205      	movs	r2, #5
 8007c8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	68ba      	ldr	r2, [r7, #8]
 8007c9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	887a      	ldrh	r2, [r7, #2]
 8007ca0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	887a      	ldrh	r2, [r7, #2]
 8007ca6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	887a      	ldrh	r2, [r7, #2]
 8007cb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	887a      	ldrh	r2, [r7, #2]
 8007cba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	685a      	ldr	r2, [r3, #4]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8007cd8:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ce2:	d908      	bls.n	8007cf6 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	685a      	ldr	r2, [r3, #4]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007cf2:	605a      	str	r2, [r3, #4]
 8007cf4:	e06f      	b.n	8007dd6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	685a      	ldr	r2, [r3, #4]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d04:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d0a:	699b      	ldr	r3, [r3, #24]
 8007d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d10:	d126      	bne.n	8007d60 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007d16:	f003 0301 	and.w	r3, r3, #1
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10f      	bne.n	8007d3e <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	685a      	ldr	r2, [r3, #4]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007d2c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	085b      	lsrs	r3, r3, #1
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007d3c:	e010      	b.n	8007d60 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d4c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	085b      	lsrs	r3, r3, #1
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	3301      	adds	r3, #1
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d6a:	d134      	bne.n	8007dd6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	685a      	ldr	r2, [r3, #4]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d7a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	f003 0301 	and.w	r3, r3, #1
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d111      	bne.n	8007db0 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	685a      	ldr	r2, [r3, #4]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d9a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	085b      	lsrs	r3, r3, #1
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007dae:	e012      	b.n	8007dd6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	685a      	ldr	r2, [r3, #4]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007dbe:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	085b      	lsrs	r3, r3, #1
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	3301      	adds	r3, #1
 8007dce:	b29a      	uxth	r2, r3
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b04      	cmp	r3, #4
 8007de0:	d108      	bne.n	8007df4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007de6:	4a4a      	ldr	r2, [pc, #296]	; (8007f10 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8007de8:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dee:	4a49      	ldr	r2, [pc, #292]	; (8007f14 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8007df0:	62da      	str	r2, [r3, #44]	; 0x2c
 8007df2:	e007      	b.n	8007e04 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007df8:	4a47      	ldr	r2, [pc, #284]	; (8007f18 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8007dfa:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e00:	4a46      	ldr	r2, [pc, #280]	; (8007f1c <HAL_SPI_TransmitReceive_DMA+0x310>)
 8007e02:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e08:	4a45      	ldr	r2, [pc, #276]	; (8007f20 <HAL_SPI_TransmitReceive_DMA+0x314>)
 8007e0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e10:	2200      	movs	r2, #0
 8007e12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	330c      	adds	r3, #12
 8007e1e:	4619      	mov	r1, r3
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e24:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e2c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007e2e:	f7fc fa3d 	bl	80042ac <HAL_DMA_Start_IT>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00c      	beq.n	8007e52 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e3c:	f043 0210 	orr.w	r2, r3, #16
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007e44:	2301      	movs	r3, #1
 8007e46:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8007e50:	e054      	b.n	8007efc <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	685a      	ldr	r2, [r3, #4]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f042 0201 	orr.w	r2, r2, #1
 8007e60:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e66:	2200      	movs	r2, #0
 8007e68:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e6e:	2200      	movs	r2, #0
 8007e70:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e76:	2200      	movs	r2, #0
 8007e78:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e7e:	2200      	movs	r2, #0
 8007e80:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	330c      	adds	r3, #12
 8007e92:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e98:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007e9a:	f7fc fa07 	bl	80042ac <HAL_DMA_Start_IT>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00c      	beq.n	8007ebe <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ea8:	f043 0210 	orr.w	r2, r3, #16
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8007ebc:	e01e      	b.n	8007efc <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec8:	2b40      	cmp	r3, #64	; 0x40
 8007eca:	d007      	beq.n	8007edc <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007eda:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	685a      	ldr	r2, [r3, #4]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f042 0220 	orr.w	r2, r2, #32
 8007eea:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	685a      	ldr	r2, [r3, #4]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f042 0202 	orr.w	r2, r2, #2
 8007efa:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3718      	adds	r7, #24
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	080082b5 	.word	0x080082b5
 8007f14:	0800817d 	.word	0x0800817d
 8007f18:	080082d1 	.word	0x080082d1
 8007f1c:	08008225 	.word	0x08008225
 8007f20:	080082ed 	.word	0x080082ed

08007f24 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b088      	sub	sp, #32
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	099b      	lsrs	r3, r3, #6
 8007f40:	f003 0301 	and.w	r3, r3, #1
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d10f      	bne.n	8007f68 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00a      	beq.n	8007f68 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	099b      	lsrs	r3, r3, #6
 8007f56:	f003 0301 	and.w	r3, r3, #1
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d004      	beq.n	8007f68 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	4798      	blx	r3
    return;
 8007f66:	e0d7      	b.n	8008118 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	085b      	lsrs	r3, r3, #1
 8007f6c:	f003 0301 	and.w	r3, r3, #1
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d00a      	beq.n	8007f8a <HAL_SPI_IRQHandler+0x66>
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	09db      	lsrs	r3, r3, #7
 8007f78:	f003 0301 	and.w	r3, r3, #1
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d004      	beq.n	8007f8a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	4798      	blx	r3
    return;
 8007f88:	e0c6      	b.n	8008118 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	095b      	lsrs	r3, r3, #5
 8007f8e:	f003 0301 	and.w	r3, r3, #1
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d10c      	bne.n	8007fb0 <HAL_SPI_IRQHandler+0x8c>
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	099b      	lsrs	r3, r3, #6
 8007f9a:	f003 0301 	and.w	r3, r3, #1
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d106      	bne.n	8007fb0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	0a1b      	lsrs	r3, r3, #8
 8007fa6:	f003 0301 	and.w	r3, r3, #1
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f000 80b4 	beq.w	8008118 <HAL_SPI_IRQHandler+0x1f4>
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	095b      	lsrs	r3, r3, #5
 8007fb4:	f003 0301 	and.w	r3, r3, #1
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f000 80ad 	beq.w	8008118 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	099b      	lsrs	r3, r3, #6
 8007fc2:	f003 0301 	and.w	r3, r3, #1
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d023      	beq.n	8008012 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b03      	cmp	r3, #3
 8007fd4:	d011      	beq.n	8007ffa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fda:	f043 0204 	orr.w	r2, r3, #4
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	617b      	str	r3, [r7, #20]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	617b      	str	r3, [r7, #20]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	617b      	str	r3, [r7, #20]
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	e00b      	b.n	8008012 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	613b      	str	r3, [r7, #16]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	613b      	str	r3, [r7, #16]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	613b      	str	r3, [r7, #16]
 800800e:	693b      	ldr	r3, [r7, #16]
        return;
 8008010:	e082      	b.n	8008118 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	095b      	lsrs	r3, r3, #5
 8008016:	f003 0301 	and.w	r3, r3, #1
 800801a:	2b00      	cmp	r3, #0
 800801c:	d014      	beq.n	8008048 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008022:	f043 0201 	orr.w	r2, r3, #1
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800802a:	2300      	movs	r3, #0
 800802c:	60fb      	str	r3, [r7, #12]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	60fb      	str	r3, [r7, #12]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008044:	601a      	str	r2, [r3, #0]
 8008046:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	0a1b      	lsrs	r3, r3, #8
 800804c:	f003 0301 	and.w	r3, r3, #1
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00c      	beq.n	800806e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008058:	f043 0208 	orr.w	r2, r3, #8
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008060:	2300      	movs	r3, #0
 8008062:	60bb      	str	r3, [r7, #8]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	60bb      	str	r3, [r7, #8]
 800806c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008072:	2b00      	cmp	r3, #0
 8008074:	d04f      	beq.n	8008116 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	685a      	ldr	r2, [r3, #4]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008084:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	f003 0302 	and.w	r3, r3, #2
 8008094:	2b00      	cmp	r3, #0
 8008096:	d104      	bne.n	80080a2 <HAL_SPI_IRQHandler+0x17e>
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	f003 0301 	and.w	r3, r3, #1
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d034      	beq.n	800810c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	685a      	ldr	r2, [r3, #4]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f022 0203 	bic.w	r2, r2, #3
 80080b0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d011      	beq.n	80080de <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080be:	4a18      	ldr	r2, [pc, #96]	; (8008120 <HAL_SPI_IRQHandler+0x1fc>)
 80080c0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7fc f9c4 	bl	8004454 <HAL_DMA_Abort_IT>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d005      	beq.n	80080de <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d016      	beq.n	8008114 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ea:	4a0d      	ldr	r2, [pc, #52]	; (8008120 <HAL_SPI_IRQHandler+0x1fc>)
 80080ec:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7fc f9ae 	bl	8004454 <HAL_DMA_Abort_IT>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00a      	beq.n	8008114 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008102:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800810a:	e003      	b.n	8008114 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 f81d 	bl	800814c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008112:	e000      	b.n	8008116 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008114:	bf00      	nop
    return;
 8008116:	bf00      	nop
  }
}
 8008118:	3720      	adds	r7, #32
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	0800832d 	.word	0x0800832d

08008124 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800812c:	bf00      	nop
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008140:	bf00      	nop
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008154:	bf00      	nop
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800816e:	b2db      	uxtb	r3, r3
}
 8008170:	4618      	mov	r0, r3
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008188:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800818a:	f7f9 ff5f 	bl	800204c <HAL_GetTick>
 800818e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f003 0320 	and.w	r3, r3, #32
 800819a:	2b20      	cmp	r3, #32
 800819c:	d03c      	beq.n	8008218 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	685a      	ldr	r2, [r3, #4]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f022 0220 	bic.w	r2, r2, #32
 80081ac:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d10d      	bne.n	80081d2 <SPI_DMAReceiveCplt+0x56>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081be:	d108      	bne.n	80081d2 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	685a      	ldr	r2, [r3, #4]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f022 0203 	bic.w	r2, r2, #3
 80081ce:	605a      	str	r2, [r3, #4]
 80081d0:	e007      	b.n	80081e2 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	685a      	ldr	r2, [r3, #4]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f022 0201 	bic.w	r2, r2, #1
 80081e0:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	2164      	movs	r1, #100	; 0x64
 80081e6:	68f8      	ldr	r0, [r7, #12]
 80081e8:	f000 f9d4 	bl	8008594 <SPI_EndRxTransaction>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d002      	beq.n	80081f8 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2220      	movs	r2, #32
 80081f6:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800820c:	2b00      	cmp	r3, #0
 800820e:	d003      	beq.n	8008218 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	f7ff ff9b 	bl	800814c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008216:	e002      	b.n	800821e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f7f9 f943 	bl	80014a4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008230:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008232:	f7f9 ff0b 	bl	800204c <HAL_GetTick>
 8008236:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 0320 	and.w	r3, r3, #32
 8008242:	2b20      	cmp	r3, #32
 8008244:	d030      	beq.n	80082a8 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	685a      	ldr	r2, [r3, #4]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f022 0220 	bic.w	r2, r2, #32
 8008254:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	2164      	movs	r1, #100	; 0x64
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f000 f9f2 	bl	8008644 <SPI_EndRxTxTransaction>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d005      	beq.n	8008272 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800826a:	f043 0220 	orr.w	r2, r3, #32
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	685a      	ldr	r2, [r3, #4]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f022 0203 	bic.w	r2, r2, #3
 8008280:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2200      	movs	r2, #0
 800828c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800829c:	2b00      	cmp	r3, #0
 800829e:	d003      	beq.n	80082a8 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f7ff ff53 	bl	800814c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80082a6:	e002      	b.n	80082ae <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f7f9 f90b 	bl	80014c4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f7ff ff2e 	bl	8008124 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80082c8:	bf00      	nop
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082dc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f7ff ff2a 	bl	8008138 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80082e4:	bf00      	nop
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	685a      	ldr	r2, [r3, #4]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f022 0203 	bic.w	r2, r2, #3
 8008308:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800830e:	f043 0210 	orr.w	r2, r3, #16
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2201      	movs	r2, #1
 800831a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800831e:	68f8      	ldr	r0, [r7, #12]
 8008320:	f7ff ff14 	bl	800814c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008324:	bf00      	nop
 8008326:	3710      	adds	r7, #16
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008338:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2200      	movs	r2, #0
 800833e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	f7ff feff 	bl	800814c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800834e:	bf00      	nop
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
	...

08008358 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b088      	sub	sp, #32
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	603b      	str	r3, [r7, #0]
 8008364:	4613      	mov	r3, r2
 8008366:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008368:	f7f9 fe70 	bl	800204c <HAL_GetTick>
 800836c:	4602      	mov	r2, r0
 800836e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008370:	1a9b      	subs	r3, r3, r2
 8008372:	683a      	ldr	r2, [r7, #0]
 8008374:	4413      	add	r3, r2
 8008376:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008378:	f7f9 fe68 	bl	800204c <HAL_GetTick>
 800837c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800837e:	4b39      	ldr	r3, [pc, #228]	; (8008464 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	015b      	lsls	r3, r3, #5
 8008384:	0d1b      	lsrs	r3, r3, #20
 8008386:	69fa      	ldr	r2, [r7, #28]
 8008388:	fb02 f303 	mul.w	r3, r2, r3
 800838c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800838e:	e054      	b.n	800843a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008396:	d050      	beq.n	800843a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008398:	f7f9 fe58 	bl	800204c <HAL_GetTick>
 800839c:	4602      	mov	r2, r0
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	69fa      	ldr	r2, [r7, #28]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d902      	bls.n	80083ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d13d      	bne.n	800842a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	685a      	ldr	r2, [r3, #4]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80083bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083c6:	d111      	bne.n	80083ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083d0:	d004      	beq.n	80083dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083da:	d107      	bne.n	80083ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083f4:	d10f      	bne.n	8008416 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008404:	601a      	str	r2, [r3, #0]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008414:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2201      	movs	r2, #1
 800841a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2200      	movs	r2, #0
 8008422:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008426:	2303      	movs	r3, #3
 8008428:	e017      	b.n	800845a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d101      	bne.n	8008434 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008430:	2300      	movs	r3, #0
 8008432:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	3b01      	subs	r3, #1
 8008438:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	689a      	ldr	r2, [r3, #8]
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	4013      	ands	r3, r2
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	429a      	cmp	r2, r3
 8008448:	bf0c      	ite	eq
 800844a:	2301      	moveq	r3, #1
 800844c:	2300      	movne	r3, #0
 800844e:	b2db      	uxtb	r3, r3
 8008450:	461a      	mov	r2, r3
 8008452:	79fb      	ldrb	r3, [r7, #7]
 8008454:	429a      	cmp	r2, r3
 8008456:	d19b      	bne.n	8008390 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3720      	adds	r7, #32
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	200026d4 	.word	0x200026d4

08008468 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b08a      	sub	sp, #40	; 0x28
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	607a      	str	r2, [r7, #4]
 8008474:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008476:	2300      	movs	r3, #0
 8008478:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800847a:	f7f9 fde7 	bl	800204c <HAL_GetTick>
 800847e:	4602      	mov	r2, r0
 8008480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008482:	1a9b      	subs	r3, r3, r2
 8008484:	683a      	ldr	r2, [r7, #0]
 8008486:	4413      	add	r3, r2
 8008488:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800848a:	f7f9 fddf 	bl	800204c <HAL_GetTick>
 800848e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	330c      	adds	r3, #12
 8008496:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008498:	4b3d      	ldr	r3, [pc, #244]	; (8008590 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	4613      	mov	r3, r2
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	4413      	add	r3, r2
 80084a2:	00da      	lsls	r2, r3, #3
 80084a4:	1ad3      	subs	r3, r2, r3
 80084a6:	0d1b      	lsrs	r3, r3, #20
 80084a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084aa:	fb02 f303 	mul.w	r3, r2, r3
 80084ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80084b0:	e060      	b.n	8008574 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80084b8:	d107      	bne.n	80084ca <SPI_WaitFifoStateUntilTimeout+0x62>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d104      	bne.n	80084ca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80084c0:	69fb      	ldr	r3, [r7, #28]
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80084c8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084d0:	d050      	beq.n	8008574 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80084d2:	f7f9 fdbb 	bl	800204c <HAL_GetTick>
 80084d6:	4602      	mov	r2, r0
 80084d8:	6a3b      	ldr	r3, [r7, #32]
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084de:	429a      	cmp	r2, r3
 80084e0:	d902      	bls.n	80084e8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80084e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d13d      	bne.n	8008564 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	685a      	ldr	r2, [r3, #4]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80084f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008500:	d111      	bne.n	8008526 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800850a:	d004      	beq.n	8008516 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008514:	d107      	bne.n	8008526 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008524:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800852a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800852e:	d10f      	bne.n	8008550 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800853e:	601a      	str	r2, [r3, #0]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800854e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008560:	2303      	movs	r3, #3
 8008562:	e010      	b.n	8008586 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d101      	bne.n	800856e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800856a:	2300      	movs	r3, #0
 800856c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	3b01      	subs	r3, #1
 8008572:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	689a      	ldr	r2, [r3, #8]
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	4013      	ands	r3, r2
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	429a      	cmp	r2, r3
 8008582:	d196      	bne.n	80084b2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3728      	adds	r7, #40	; 0x28
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	200026d4 	.word	0x200026d4

08008594 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af02      	add	r7, sp, #8
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085a8:	d111      	bne.n	80085ce <SPI_EndRxTransaction+0x3a>
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085b2:	d004      	beq.n	80085be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085bc:	d107      	bne.n	80085ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085cc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	9300      	str	r3, [sp, #0]
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	2200      	movs	r2, #0
 80085d6:	2180      	movs	r1, #128	; 0x80
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f7ff febd 	bl	8008358 <SPI_WaitFlagStateUntilTimeout>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d007      	beq.n	80085f4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085e8:	f043 0220 	orr.w	r2, r3, #32
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80085f0:	2303      	movs	r3, #3
 80085f2:	e023      	b.n	800863c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085fc:	d11d      	bne.n	800863a <SPI_EndRxTransaction+0xa6>
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008606:	d004      	beq.n	8008612 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008610:	d113      	bne.n	800863a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	9300      	str	r3, [sp, #0]
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	2200      	movs	r2, #0
 800861a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	f7ff ff22 	bl	8008468 <SPI_WaitFifoStateUntilTimeout>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d007      	beq.n	800863a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800862e:	f043 0220 	orr.w	r2, r3, #32
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008636:	2303      	movs	r3, #3
 8008638:	e000      	b.n	800863c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800863a:	2300      	movs	r3, #0
}
 800863c:	4618      	mov	r0, r3
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b086      	sub	sp, #24
 8008648:	af02      	add	r7, sp, #8
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	2200      	movs	r2, #0
 8008658:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f7ff ff03 	bl	8008468 <SPI_WaitFifoStateUntilTimeout>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d007      	beq.n	8008678 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800866c:	f043 0220 	orr.w	r2, r3, #32
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008674:	2303      	movs	r3, #3
 8008676:	e027      	b.n	80086c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	2200      	movs	r2, #0
 8008680:	2180      	movs	r1, #128	; 0x80
 8008682:	68f8      	ldr	r0, [r7, #12]
 8008684:	f7ff fe68 	bl	8008358 <SPI_WaitFlagStateUntilTimeout>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d007      	beq.n	800869e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008692:	f043 0220 	orr.w	r2, r3, #32
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800869a:	2303      	movs	r3, #3
 800869c:	e014      	b.n	80086c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	9300      	str	r3, [sp, #0]
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80086aa:	68f8      	ldr	r0, [r7, #12]
 80086ac:	f7ff fedc 	bl	8008468 <SPI_WaitFifoStateUntilTimeout>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d007      	beq.n	80086c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086ba:	f043 0220 	orr.w	r2, r3, #32
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80086c2:	2303      	movs	r3, #3
 80086c4:	e000      	b.n	80086c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d101      	bne.n	80086e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	e049      	b.n	8008776 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d106      	bne.n	80086fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f7f9 fa78 	bl	8001bec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2202      	movs	r2, #2
 8008700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	3304      	adds	r3, #4
 800870c:	4619      	mov	r1, r3
 800870e:	4610      	mov	r0, r2
 8008710:	f000 fbc6 	bl	8008ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
	...

08008780 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008780:	b480      	push	{r7}
 8008782:	b085      	sub	sp, #20
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800878e:	b2db      	uxtb	r3, r3
 8008790:	2b01      	cmp	r3, #1
 8008792:	d001      	beq.n	8008798 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	e04c      	b.n	8008832 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2202      	movs	r2, #2
 800879c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a26      	ldr	r2, [pc, #152]	; (8008840 <HAL_TIM_Base_Start+0xc0>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d022      	beq.n	80087f0 <HAL_TIM_Base_Start+0x70>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087b2:	d01d      	beq.n	80087f0 <HAL_TIM_Base_Start+0x70>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a22      	ldr	r2, [pc, #136]	; (8008844 <HAL_TIM_Base_Start+0xc4>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d018      	beq.n	80087f0 <HAL_TIM_Base_Start+0x70>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a21      	ldr	r2, [pc, #132]	; (8008848 <HAL_TIM_Base_Start+0xc8>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d013      	beq.n	80087f0 <HAL_TIM_Base_Start+0x70>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a1f      	ldr	r2, [pc, #124]	; (800884c <HAL_TIM_Base_Start+0xcc>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d00e      	beq.n	80087f0 <HAL_TIM_Base_Start+0x70>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a1e      	ldr	r2, [pc, #120]	; (8008850 <HAL_TIM_Base_Start+0xd0>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d009      	beq.n	80087f0 <HAL_TIM_Base_Start+0x70>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a1c      	ldr	r2, [pc, #112]	; (8008854 <HAL_TIM_Base_Start+0xd4>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d004      	beq.n	80087f0 <HAL_TIM_Base_Start+0x70>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a1b      	ldr	r2, [pc, #108]	; (8008858 <HAL_TIM_Base_Start+0xd8>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d115      	bne.n	800881c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	689a      	ldr	r2, [r3, #8]
 80087f6:	4b19      	ldr	r3, [pc, #100]	; (800885c <HAL_TIM_Base_Start+0xdc>)
 80087f8:	4013      	ands	r3, r2
 80087fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2b06      	cmp	r3, #6
 8008800:	d015      	beq.n	800882e <HAL_TIM_Base_Start+0xae>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008808:	d011      	beq.n	800882e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f042 0201 	orr.w	r2, r2, #1
 8008818:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800881a:	e008      	b.n	800882e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f042 0201 	orr.w	r2, r2, #1
 800882a:	601a      	str	r2, [r3, #0]
 800882c:	e000      	b.n	8008830 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800882e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3714      	adds	r7, #20
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	40012c00 	.word	0x40012c00
 8008844:	40000400 	.word	0x40000400
 8008848:	40000800 	.word	0x40000800
 800884c:	40000c00 	.word	0x40000c00
 8008850:	40013400 	.word	0x40013400
 8008854:	40014000 	.word	0x40014000
 8008858:	40015000 	.word	0x40015000
 800885c:	00010007 	.word	0x00010007

08008860 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	6a1a      	ldr	r2, [r3, #32]
 800886e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008872:	4013      	ands	r3, r2
 8008874:	2b00      	cmp	r3, #0
 8008876:	d10f      	bne.n	8008898 <HAL_TIM_Base_Stop+0x38>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	6a1a      	ldr	r2, [r3, #32]
 800887e:	f244 4344 	movw	r3, #17476	; 0x4444
 8008882:	4013      	ands	r3, r2
 8008884:	2b00      	cmp	r3, #0
 8008886:	d107      	bne.n	8008898 <HAL_TIM_Base_Stop+0x38>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f022 0201 	bic.w	r2, r2, #1
 8008896:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	370c      	adds	r7, #12
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr

080088ae <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b082      	sub	sp, #8
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d101      	bne.n	80088c0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e049      	b.n	8008954 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d106      	bne.n	80088da <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 f841 	bl	800895c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2202      	movs	r2, #2
 80088de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	3304      	adds	r3, #4
 80088ea:	4619      	mov	r1, r3
 80088ec:	4610      	mov	r0, r2
 80088ee:	f000 fad7 	bl	8008ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2201      	movs	r2, #1
 80088fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2201      	movs	r2, #1
 800890e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2201      	movs	r2, #1
 8008916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2201      	movs	r2, #1
 800891e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2201      	movs	r2, #1
 8008926:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2201      	movs	r2, #1
 800892e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2201      	movs	r2, #1
 800893e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2201      	movs	r2, #1
 8008946:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2201      	movs	r2, #1
 800894e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008952:	2300      	movs	r3, #0
}
 8008954:	4618      	mov	r0, r3
 8008956:	3708      	adds	r7, #8
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008964:	bf00      	nop
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d109      	bne.n	8008994 <HAL_TIM_OC_Start+0x24>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008986:	b2db      	uxtb	r3, r3
 8008988:	2b01      	cmp	r3, #1
 800898a:	bf14      	ite	ne
 800898c:	2301      	movne	r3, #1
 800898e:	2300      	moveq	r3, #0
 8008990:	b2db      	uxtb	r3, r3
 8008992:	e03c      	b.n	8008a0e <HAL_TIM_OC_Start+0x9e>
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	2b04      	cmp	r3, #4
 8008998:	d109      	bne.n	80089ae <HAL_TIM_OC_Start+0x3e>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	bf14      	ite	ne
 80089a6:	2301      	movne	r3, #1
 80089a8:	2300      	moveq	r3, #0
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	e02f      	b.n	8008a0e <HAL_TIM_OC_Start+0x9e>
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	2b08      	cmp	r3, #8
 80089b2:	d109      	bne.n	80089c8 <HAL_TIM_OC_Start+0x58>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	2b01      	cmp	r3, #1
 80089be:	bf14      	ite	ne
 80089c0:	2301      	movne	r3, #1
 80089c2:	2300      	moveq	r3, #0
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	e022      	b.n	8008a0e <HAL_TIM_OC_Start+0x9e>
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	2b0c      	cmp	r3, #12
 80089cc:	d109      	bne.n	80089e2 <HAL_TIM_OC_Start+0x72>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	bf14      	ite	ne
 80089da:	2301      	movne	r3, #1
 80089dc:	2300      	moveq	r3, #0
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	e015      	b.n	8008a0e <HAL_TIM_OC_Start+0x9e>
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	2b10      	cmp	r3, #16
 80089e6:	d109      	bne.n	80089fc <HAL_TIM_OC_Start+0x8c>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	bf14      	ite	ne
 80089f4:	2301      	movne	r3, #1
 80089f6:	2300      	moveq	r3, #0
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	e008      	b.n	8008a0e <HAL_TIM_OC_Start+0x9e>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	bf14      	ite	ne
 8008a08:	2301      	movne	r3, #1
 8008a0a:	2300      	moveq	r3, #0
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d001      	beq.n	8008a16 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	e0a6      	b.n	8008b64 <HAL_TIM_OC_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d104      	bne.n	8008a26 <HAL_TIM_OC_Start+0xb6>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2202      	movs	r2, #2
 8008a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a24:	e023      	b.n	8008a6e <HAL_TIM_OC_Start+0xfe>
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	2b04      	cmp	r3, #4
 8008a2a:	d104      	bne.n	8008a36 <HAL_TIM_OC_Start+0xc6>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2202      	movs	r2, #2
 8008a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a34:	e01b      	b.n	8008a6e <HAL_TIM_OC_Start+0xfe>
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	2b08      	cmp	r3, #8
 8008a3a:	d104      	bne.n	8008a46 <HAL_TIM_OC_Start+0xd6>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2202      	movs	r2, #2
 8008a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a44:	e013      	b.n	8008a6e <HAL_TIM_OC_Start+0xfe>
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	2b0c      	cmp	r3, #12
 8008a4a:	d104      	bne.n	8008a56 <HAL_TIM_OC_Start+0xe6>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2202      	movs	r2, #2
 8008a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a54:	e00b      	b.n	8008a6e <HAL_TIM_OC_Start+0xfe>
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	2b10      	cmp	r3, #16
 8008a5a:	d104      	bne.n	8008a66 <HAL_TIM_OC_Start+0xf6>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2202      	movs	r2, #2
 8008a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a64:	e003      	b.n	8008a6e <HAL_TIM_OC_Start+0xfe>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2202      	movs	r2, #2
 8008a6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	2201      	movs	r2, #1
 8008a74:	6839      	ldr	r1, [r7, #0]
 8008a76:	4618      	mov	r0, r3
 8008a78:	f000 fe80 	bl	800977c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a3a      	ldr	r2, [pc, #232]	; (8008b6c <HAL_TIM_OC_Start+0x1fc>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d018      	beq.n	8008ab8 <HAL_TIM_OC_Start+0x148>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a39      	ldr	r2, [pc, #228]	; (8008b70 <HAL_TIM_OC_Start+0x200>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d013      	beq.n	8008ab8 <HAL_TIM_OC_Start+0x148>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a37      	ldr	r2, [pc, #220]	; (8008b74 <HAL_TIM_OC_Start+0x204>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d00e      	beq.n	8008ab8 <HAL_TIM_OC_Start+0x148>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a36      	ldr	r2, [pc, #216]	; (8008b78 <HAL_TIM_OC_Start+0x208>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d009      	beq.n	8008ab8 <HAL_TIM_OC_Start+0x148>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a34      	ldr	r2, [pc, #208]	; (8008b7c <HAL_TIM_OC_Start+0x20c>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d004      	beq.n	8008ab8 <HAL_TIM_OC_Start+0x148>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a33      	ldr	r2, [pc, #204]	; (8008b80 <HAL_TIM_OC_Start+0x210>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d101      	bne.n	8008abc <HAL_TIM_OC_Start+0x14c>
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e000      	b.n	8008abe <HAL_TIM_OC_Start+0x14e>
 8008abc:	2300      	movs	r3, #0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d007      	beq.n	8008ad2 <HAL_TIM_OC_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ad0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a25      	ldr	r2, [pc, #148]	; (8008b6c <HAL_TIM_OC_Start+0x1fc>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d022      	beq.n	8008b22 <HAL_TIM_OC_Start+0x1b2>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ae4:	d01d      	beq.n	8008b22 <HAL_TIM_OC_Start+0x1b2>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a26      	ldr	r2, [pc, #152]	; (8008b84 <HAL_TIM_OC_Start+0x214>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d018      	beq.n	8008b22 <HAL_TIM_OC_Start+0x1b2>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a24      	ldr	r2, [pc, #144]	; (8008b88 <HAL_TIM_OC_Start+0x218>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d013      	beq.n	8008b22 <HAL_TIM_OC_Start+0x1b2>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a23      	ldr	r2, [pc, #140]	; (8008b8c <HAL_TIM_OC_Start+0x21c>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d00e      	beq.n	8008b22 <HAL_TIM_OC_Start+0x1b2>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a19      	ldr	r2, [pc, #100]	; (8008b70 <HAL_TIM_OC_Start+0x200>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d009      	beq.n	8008b22 <HAL_TIM_OC_Start+0x1b2>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a18      	ldr	r2, [pc, #96]	; (8008b74 <HAL_TIM_OC_Start+0x204>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d004      	beq.n	8008b22 <HAL_TIM_OC_Start+0x1b2>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a18      	ldr	r2, [pc, #96]	; (8008b80 <HAL_TIM_OC_Start+0x210>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d115      	bne.n	8008b4e <HAL_TIM_OC_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	689a      	ldr	r2, [r3, #8]
 8008b28:	4b19      	ldr	r3, [pc, #100]	; (8008b90 <HAL_TIM_OC_Start+0x220>)
 8008b2a:	4013      	ands	r3, r2
 8008b2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2b06      	cmp	r3, #6
 8008b32:	d015      	beq.n	8008b60 <HAL_TIM_OC_Start+0x1f0>
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b3a:	d011      	beq.n	8008b60 <HAL_TIM_OC_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f042 0201 	orr.w	r2, r2, #1
 8008b4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b4c:	e008      	b.n	8008b60 <HAL_TIM_OC_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f042 0201 	orr.w	r2, r2, #1
 8008b5c:	601a      	str	r2, [r3, #0]
 8008b5e:	e000      	b.n	8008b62 <HAL_TIM_OC_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	40012c00 	.word	0x40012c00
 8008b70:	40013400 	.word	0x40013400
 8008b74:	40014000 	.word	0x40014000
 8008b78:	40014400 	.word	0x40014400
 8008b7c:	40014800 	.word	0x40014800
 8008b80:	40015000 	.word	0x40015000
 8008b84:	40000400 	.word	0x40000400
 8008b88:	40000800 	.word	0x40000800
 8008b8c:	40000c00 	.word	0x40000c00
 8008b90:	00010007 	.word	0x00010007

08008b94 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b086      	sub	sp, #24
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d101      	bne.n	8008bb2 <HAL_TIM_OC_ConfigChannel+0x1e>
 8008bae:	2302      	movs	r3, #2
 8008bb0:	e066      	b.n	8008c80 <HAL_TIM_OC_ConfigChannel+0xec>
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2b14      	cmp	r3, #20
 8008bbe:	d857      	bhi.n	8008c70 <HAL_TIM_OC_ConfigChannel+0xdc>
 8008bc0:	a201      	add	r2, pc, #4	; (adr r2, 8008bc8 <HAL_TIM_OC_ConfigChannel+0x34>)
 8008bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc6:	bf00      	nop
 8008bc8:	08008c1d 	.word	0x08008c1d
 8008bcc:	08008c71 	.word	0x08008c71
 8008bd0:	08008c71 	.word	0x08008c71
 8008bd4:	08008c71 	.word	0x08008c71
 8008bd8:	08008c2b 	.word	0x08008c2b
 8008bdc:	08008c71 	.word	0x08008c71
 8008be0:	08008c71 	.word	0x08008c71
 8008be4:	08008c71 	.word	0x08008c71
 8008be8:	08008c39 	.word	0x08008c39
 8008bec:	08008c71 	.word	0x08008c71
 8008bf0:	08008c71 	.word	0x08008c71
 8008bf4:	08008c71 	.word	0x08008c71
 8008bf8:	08008c47 	.word	0x08008c47
 8008bfc:	08008c71 	.word	0x08008c71
 8008c00:	08008c71 	.word	0x08008c71
 8008c04:	08008c71 	.word	0x08008c71
 8008c08:	08008c55 	.word	0x08008c55
 8008c0c:	08008c71 	.word	0x08008c71
 8008c10:	08008c71 	.word	0x08008c71
 8008c14:	08008c71 	.word	0x08008c71
 8008c18:	08008c63 	.word	0x08008c63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	68b9      	ldr	r1, [r7, #8]
 8008c22:	4618      	mov	r0, r3
 8008c24:	f000 f9e4 	bl	8008ff0 <TIM_OC1_SetConfig>
      break;
 8008c28:	e025      	b.n	8008c76 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	68b9      	ldr	r1, [r7, #8]
 8008c30:	4618      	mov	r0, r3
 8008c32:	f000 fa77 	bl	8009124 <TIM_OC2_SetConfig>
      break;
 8008c36:	e01e      	b.n	8008c76 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	68b9      	ldr	r1, [r7, #8]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f000 fb04 	bl	800924c <TIM_OC3_SetConfig>
      break;
 8008c44:	e017      	b.n	8008c76 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	68b9      	ldr	r1, [r7, #8]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f000 fb8f 	bl	8009370 <TIM_OC4_SetConfig>
      break;
 8008c52:	e010      	b.n	8008c76 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	68b9      	ldr	r1, [r7, #8]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f000 fc1c 	bl	8009498 <TIM_OC5_SetConfig>
      break;
 8008c60:	e009      	b.n	8008c76 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	68b9      	ldr	r1, [r7, #8]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f000 fc7f 	bl	800956c <TIM_OC6_SetConfig>
      break;
 8008c6e:	e002      	b.n	8008c76 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	75fb      	strb	r3, [r7, #23]
      break;
 8008c74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3718      	adds	r7, #24
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c92:	2300      	movs	r3, #0
 8008c94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d101      	bne.n	8008ca4 <HAL_TIM_ConfigClockSource+0x1c>
 8008ca0:	2302      	movs	r3, #2
 8008ca2:	e0ee      	b.n	8008e82 <HAL_TIM_ConfigClockSource+0x1fa>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2202      	movs	r2, #2
 8008cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008cc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008cc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68ba      	ldr	r2, [r7, #8]
 8008cd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a6b      	ldr	r2, [pc, #428]	; (8008e8c <HAL_TIM_ConfigClockSource+0x204>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	f000 80b9 	beq.w	8008e56 <HAL_TIM_ConfigClockSource+0x1ce>
 8008ce4:	4a69      	ldr	r2, [pc, #420]	; (8008e8c <HAL_TIM_ConfigClockSource+0x204>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	f200 80be 	bhi.w	8008e68 <HAL_TIM_ConfigClockSource+0x1e0>
 8008cec:	4a68      	ldr	r2, [pc, #416]	; (8008e90 <HAL_TIM_ConfigClockSource+0x208>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	f000 80b1 	beq.w	8008e56 <HAL_TIM_ConfigClockSource+0x1ce>
 8008cf4:	4a66      	ldr	r2, [pc, #408]	; (8008e90 <HAL_TIM_ConfigClockSource+0x208>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	f200 80b6 	bhi.w	8008e68 <HAL_TIM_ConfigClockSource+0x1e0>
 8008cfc:	4a65      	ldr	r2, [pc, #404]	; (8008e94 <HAL_TIM_ConfigClockSource+0x20c>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	f000 80a9 	beq.w	8008e56 <HAL_TIM_ConfigClockSource+0x1ce>
 8008d04:	4a63      	ldr	r2, [pc, #396]	; (8008e94 <HAL_TIM_ConfigClockSource+0x20c>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	f200 80ae 	bhi.w	8008e68 <HAL_TIM_ConfigClockSource+0x1e0>
 8008d0c:	4a62      	ldr	r2, [pc, #392]	; (8008e98 <HAL_TIM_ConfigClockSource+0x210>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	f000 80a1 	beq.w	8008e56 <HAL_TIM_ConfigClockSource+0x1ce>
 8008d14:	4a60      	ldr	r2, [pc, #384]	; (8008e98 <HAL_TIM_ConfigClockSource+0x210>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	f200 80a6 	bhi.w	8008e68 <HAL_TIM_ConfigClockSource+0x1e0>
 8008d1c:	4a5f      	ldr	r2, [pc, #380]	; (8008e9c <HAL_TIM_ConfigClockSource+0x214>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	f000 8099 	beq.w	8008e56 <HAL_TIM_ConfigClockSource+0x1ce>
 8008d24:	4a5d      	ldr	r2, [pc, #372]	; (8008e9c <HAL_TIM_ConfigClockSource+0x214>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	f200 809e 	bhi.w	8008e68 <HAL_TIM_ConfigClockSource+0x1e0>
 8008d2c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008d30:	f000 8091 	beq.w	8008e56 <HAL_TIM_ConfigClockSource+0x1ce>
 8008d34:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008d38:	f200 8096 	bhi.w	8008e68 <HAL_TIM_ConfigClockSource+0x1e0>
 8008d3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d40:	f000 8089 	beq.w	8008e56 <HAL_TIM_ConfigClockSource+0x1ce>
 8008d44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d48:	f200 808e 	bhi.w	8008e68 <HAL_TIM_ConfigClockSource+0x1e0>
 8008d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d50:	d03e      	beq.n	8008dd0 <HAL_TIM_ConfigClockSource+0x148>
 8008d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d56:	f200 8087 	bhi.w	8008e68 <HAL_TIM_ConfigClockSource+0x1e0>
 8008d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d5e:	f000 8086 	beq.w	8008e6e <HAL_TIM_ConfigClockSource+0x1e6>
 8008d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d66:	d87f      	bhi.n	8008e68 <HAL_TIM_ConfigClockSource+0x1e0>
 8008d68:	2b70      	cmp	r3, #112	; 0x70
 8008d6a:	d01a      	beq.n	8008da2 <HAL_TIM_ConfigClockSource+0x11a>
 8008d6c:	2b70      	cmp	r3, #112	; 0x70
 8008d6e:	d87b      	bhi.n	8008e68 <HAL_TIM_ConfigClockSource+0x1e0>
 8008d70:	2b60      	cmp	r3, #96	; 0x60
 8008d72:	d050      	beq.n	8008e16 <HAL_TIM_ConfigClockSource+0x18e>
 8008d74:	2b60      	cmp	r3, #96	; 0x60
 8008d76:	d877      	bhi.n	8008e68 <HAL_TIM_ConfigClockSource+0x1e0>
 8008d78:	2b50      	cmp	r3, #80	; 0x50
 8008d7a:	d03c      	beq.n	8008df6 <HAL_TIM_ConfigClockSource+0x16e>
 8008d7c:	2b50      	cmp	r3, #80	; 0x50
 8008d7e:	d873      	bhi.n	8008e68 <HAL_TIM_ConfigClockSource+0x1e0>
 8008d80:	2b40      	cmp	r3, #64	; 0x40
 8008d82:	d058      	beq.n	8008e36 <HAL_TIM_ConfigClockSource+0x1ae>
 8008d84:	2b40      	cmp	r3, #64	; 0x40
 8008d86:	d86f      	bhi.n	8008e68 <HAL_TIM_ConfigClockSource+0x1e0>
 8008d88:	2b30      	cmp	r3, #48	; 0x30
 8008d8a:	d064      	beq.n	8008e56 <HAL_TIM_ConfigClockSource+0x1ce>
 8008d8c:	2b30      	cmp	r3, #48	; 0x30
 8008d8e:	d86b      	bhi.n	8008e68 <HAL_TIM_ConfigClockSource+0x1e0>
 8008d90:	2b20      	cmp	r3, #32
 8008d92:	d060      	beq.n	8008e56 <HAL_TIM_ConfigClockSource+0x1ce>
 8008d94:	2b20      	cmp	r3, #32
 8008d96:	d867      	bhi.n	8008e68 <HAL_TIM_ConfigClockSource+0x1e0>
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d05c      	beq.n	8008e56 <HAL_TIM_ConfigClockSource+0x1ce>
 8008d9c:	2b10      	cmp	r3, #16
 8008d9e:	d05a      	beq.n	8008e56 <HAL_TIM_ConfigClockSource+0x1ce>
 8008da0:	e062      	b.n	8008e68 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6818      	ldr	r0, [r3, #0]
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	6899      	ldr	r1, [r3, #8]
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	685a      	ldr	r2, [r3, #4]
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	f000 fcc3 	bl	800973c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008dc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	68ba      	ldr	r2, [r7, #8]
 8008dcc:	609a      	str	r2, [r3, #8]
      break;
 8008dce:	e04f      	b.n	8008e70 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6818      	ldr	r0, [r3, #0]
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	6899      	ldr	r1, [r3, #8]
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	685a      	ldr	r2, [r3, #4]
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	f000 fcac 	bl	800973c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	689a      	ldr	r2, [r3, #8]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008df2:	609a      	str	r2, [r3, #8]
      break;
 8008df4:	e03c      	b.n	8008e70 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6818      	ldr	r0, [r3, #0]
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	6859      	ldr	r1, [r3, #4]
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	461a      	mov	r2, r3
 8008e04:	f000 fc1e 	bl	8009644 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	2150      	movs	r1, #80	; 0x50
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f000 fc77 	bl	8009702 <TIM_ITRx_SetConfig>
      break;
 8008e14:	e02c      	b.n	8008e70 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6818      	ldr	r0, [r3, #0]
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	6859      	ldr	r1, [r3, #4]
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	461a      	mov	r2, r3
 8008e24:	f000 fc3d 	bl	80096a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2160      	movs	r1, #96	; 0x60
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f000 fc67 	bl	8009702 <TIM_ITRx_SetConfig>
      break;
 8008e34:	e01c      	b.n	8008e70 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6818      	ldr	r0, [r3, #0]
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	6859      	ldr	r1, [r3, #4]
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	461a      	mov	r2, r3
 8008e44:	f000 fbfe 	bl	8009644 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2140      	movs	r1, #64	; 0x40
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f000 fc57 	bl	8009702 <TIM_ITRx_SetConfig>
      break;
 8008e54:	e00c      	b.n	8008e70 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4619      	mov	r1, r3
 8008e60:	4610      	mov	r0, r2
 8008e62:	f000 fc4e 	bl	8009702 <TIM_ITRx_SetConfig>
      break;
 8008e66:	e003      	b.n	8008e70 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e6c:	e000      	b.n	8008e70 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 8008e6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	00100070 	.word	0x00100070
 8008e90:	00100050 	.word	0x00100050
 8008e94:	00100040 	.word	0x00100040
 8008e98:	00100030 	.word	0x00100030
 8008e9c:	00100020 	.word	0x00100020

08008ea0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4a46      	ldr	r2, [pc, #280]	; (8008fcc <TIM_Base_SetConfig+0x12c>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d017      	beq.n	8008ee8 <TIM_Base_SetConfig+0x48>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ebe:	d013      	beq.n	8008ee8 <TIM_Base_SetConfig+0x48>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a43      	ldr	r2, [pc, #268]	; (8008fd0 <TIM_Base_SetConfig+0x130>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d00f      	beq.n	8008ee8 <TIM_Base_SetConfig+0x48>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	4a42      	ldr	r2, [pc, #264]	; (8008fd4 <TIM_Base_SetConfig+0x134>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d00b      	beq.n	8008ee8 <TIM_Base_SetConfig+0x48>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	4a41      	ldr	r2, [pc, #260]	; (8008fd8 <TIM_Base_SetConfig+0x138>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d007      	beq.n	8008ee8 <TIM_Base_SetConfig+0x48>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4a40      	ldr	r2, [pc, #256]	; (8008fdc <TIM_Base_SetConfig+0x13c>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d003      	beq.n	8008ee8 <TIM_Base_SetConfig+0x48>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a3f      	ldr	r2, [pc, #252]	; (8008fe0 <TIM_Base_SetConfig+0x140>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d108      	bne.n	8008efa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4a33      	ldr	r2, [pc, #204]	; (8008fcc <TIM_Base_SetConfig+0x12c>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d023      	beq.n	8008f4a <TIM_Base_SetConfig+0xaa>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f08:	d01f      	beq.n	8008f4a <TIM_Base_SetConfig+0xaa>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4a30      	ldr	r2, [pc, #192]	; (8008fd0 <TIM_Base_SetConfig+0x130>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d01b      	beq.n	8008f4a <TIM_Base_SetConfig+0xaa>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4a2f      	ldr	r2, [pc, #188]	; (8008fd4 <TIM_Base_SetConfig+0x134>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d017      	beq.n	8008f4a <TIM_Base_SetConfig+0xaa>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	4a2e      	ldr	r2, [pc, #184]	; (8008fd8 <TIM_Base_SetConfig+0x138>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d013      	beq.n	8008f4a <TIM_Base_SetConfig+0xaa>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4a2d      	ldr	r2, [pc, #180]	; (8008fdc <TIM_Base_SetConfig+0x13c>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d00f      	beq.n	8008f4a <TIM_Base_SetConfig+0xaa>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4a2d      	ldr	r2, [pc, #180]	; (8008fe4 <TIM_Base_SetConfig+0x144>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d00b      	beq.n	8008f4a <TIM_Base_SetConfig+0xaa>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4a2c      	ldr	r2, [pc, #176]	; (8008fe8 <TIM_Base_SetConfig+0x148>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d007      	beq.n	8008f4a <TIM_Base_SetConfig+0xaa>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a2b      	ldr	r2, [pc, #172]	; (8008fec <TIM_Base_SetConfig+0x14c>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d003      	beq.n	8008f4a <TIM_Base_SetConfig+0xaa>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4a26      	ldr	r2, [pc, #152]	; (8008fe0 <TIM_Base_SetConfig+0x140>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d108      	bne.n	8008f5c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	68fa      	ldr	r2, [r7, #12]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	695b      	ldr	r3, [r3, #20]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	689a      	ldr	r2, [r3, #8]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a12      	ldr	r2, [pc, #72]	; (8008fcc <TIM_Base_SetConfig+0x12c>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d013      	beq.n	8008fb0 <TIM_Base_SetConfig+0x110>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a14      	ldr	r2, [pc, #80]	; (8008fdc <TIM_Base_SetConfig+0x13c>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d00f      	beq.n	8008fb0 <TIM_Base_SetConfig+0x110>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a14      	ldr	r2, [pc, #80]	; (8008fe4 <TIM_Base_SetConfig+0x144>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d00b      	beq.n	8008fb0 <TIM_Base_SetConfig+0x110>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a13      	ldr	r2, [pc, #76]	; (8008fe8 <TIM_Base_SetConfig+0x148>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d007      	beq.n	8008fb0 <TIM_Base_SetConfig+0x110>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a12      	ldr	r2, [pc, #72]	; (8008fec <TIM_Base_SetConfig+0x14c>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d003      	beq.n	8008fb0 <TIM_Base_SetConfig+0x110>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4a0d      	ldr	r2, [pc, #52]	; (8008fe0 <TIM_Base_SetConfig+0x140>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d103      	bne.n	8008fb8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	691a      	ldr	r2, [r3, #16]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	615a      	str	r2, [r3, #20]
}
 8008fbe:	bf00      	nop
 8008fc0:	3714      	adds	r7, #20
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	40012c00 	.word	0x40012c00
 8008fd0:	40000400 	.word	0x40000400
 8008fd4:	40000800 	.word	0x40000800
 8008fd8:	40000c00 	.word	0x40000c00
 8008fdc:	40013400 	.word	0x40013400
 8008fe0:	40015000 	.word	0x40015000
 8008fe4:	40014000 	.word	0x40014000
 8008fe8:	40014400 	.word	0x40014400
 8008fec:	40014800 	.word	0x40014800

08008ff0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b087      	sub	sp, #28
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a1b      	ldr	r3, [r3, #32]
 8008ffe:	f023 0201 	bic.w	r2, r3, #1
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a1b      	ldr	r3, [r3, #32]
 800900a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	699b      	ldr	r3, [r3, #24]
 8009016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800901e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f023 0303 	bic.w	r3, r3, #3
 800902a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	4313      	orrs	r3, r2
 8009034:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	f023 0302 	bic.w	r3, r3, #2
 800903c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	697a      	ldr	r2, [r7, #20]
 8009044:	4313      	orrs	r3, r2
 8009046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4a30      	ldr	r2, [pc, #192]	; (800910c <TIM_OC1_SetConfig+0x11c>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d013      	beq.n	8009078 <TIM_OC1_SetConfig+0x88>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4a2f      	ldr	r2, [pc, #188]	; (8009110 <TIM_OC1_SetConfig+0x120>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d00f      	beq.n	8009078 <TIM_OC1_SetConfig+0x88>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4a2e      	ldr	r2, [pc, #184]	; (8009114 <TIM_OC1_SetConfig+0x124>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d00b      	beq.n	8009078 <TIM_OC1_SetConfig+0x88>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4a2d      	ldr	r2, [pc, #180]	; (8009118 <TIM_OC1_SetConfig+0x128>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d007      	beq.n	8009078 <TIM_OC1_SetConfig+0x88>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4a2c      	ldr	r2, [pc, #176]	; (800911c <TIM_OC1_SetConfig+0x12c>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d003      	beq.n	8009078 <TIM_OC1_SetConfig+0x88>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	4a2b      	ldr	r2, [pc, #172]	; (8009120 <TIM_OC1_SetConfig+0x130>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d10c      	bne.n	8009092 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	f023 0308 	bic.w	r3, r3, #8
 800907e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	697a      	ldr	r2, [r7, #20]
 8009086:	4313      	orrs	r3, r2
 8009088:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	f023 0304 	bic.w	r3, r3, #4
 8009090:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a1d      	ldr	r2, [pc, #116]	; (800910c <TIM_OC1_SetConfig+0x11c>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d013      	beq.n	80090c2 <TIM_OC1_SetConfig+0xd2>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a1c      	ldr	r2, [pc, #112]	; (8009110 <TIM_OC1_SetConfig+0x120>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d00f      	beq.n	80090c2 <TIM_OC1_SetConfig+0xd2>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a1b      	ldr	r2, [pc, #108]	; (8009114 <TIM_OC1_SetConfig+0x124>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d00b      	beq.n	80090c2 <TIM_OC1_SetConfig+0xd2>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4a1a      	ldr	r2, [pc, #104]	; (8009118 <TIM_OC1_SetConfig+0x128>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d007      	beq.n	80090c2 <TIM_OC1_SetConfig+0xd2>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a19      	ldr	r2, [pc, #100]	; (800911c <TIM_OC1_SetConfig+0x12c>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d003      	beq.n	80090c2 <TIM_OC1_SetConfig+0xd2>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a18      	ldr	r2, [pc, #96]	; (8009120 <TIM_OC1_SetConfig+0x130>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d111      	bne.n	80090e6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80090d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	695b      	ldr	r3, [r3, #20]
 80090d6:	693a      	ldr	r2, [r7, #16]
 80090d8:	4313      	orrs	r3, r2
 80090da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	699b      	ldr	r3, [r3, #24]
 80090e0:	693a      	ldr	r2, [r7, #16]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	693a      	ldr	r2, [r7, #16]
 80090ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	685a      	ldr	r2, [r3, #4]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	697a      	ldr	r2, [r7, #20]
 80090fe:	621a      	str	r2, [r3, #32]
}
 8009100:	bf00      	nop
 8009102:	371c      	adds	r7, #28
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr
 800910c:	40012c00 	.word	0x40012c00
 8009110:	40013400 	.word	0x40013400
 8009114:	40014000 	.word	0x40014000
 8009118:	40014400 	.word	0x40014400
 800911c:	40014800 	.word	0x40014800
 8009120:	40015000 	.word	0x40015000

08009124 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009124:	b480      	push	{r7}
 8009126:	b087      	sub	sp, #28
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6a1b      	ldr	r3, [r3, #32]
 8009132:	f023 0210 	bic.w	r2, r3, #16
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6a1b      	ldr	r3, [r3, #32]
 800913e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	699b      	ldr	r3, [r3, #24]
 800914a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800915e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	021b      	lsls	r3, r3, #8
 8009166:	68fa      	ldr	r2, [r7, #12]
 8009168:	4313      	orrs	r3, r2
 800916a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	f023 0320 	bic.w	r3, r3, #32
 8009172:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	011b      	lsls	r3, r3, #4
 800917a:	697a      	ldr	r2, [r7, #20]
 800917c:	4313      	orrs	r3, r2
 800917e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4a2c      	ldr	r2, [pc, #176]	; (8009234 <TIM_OC2_SetConfig+0x110>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d007      	beq.n	8009198 <TIM_OC2_SetConfig+0x74>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	4a2b      	ldr	r2, [pc, #172]	; (8009238 <TIM_OC2_SetConfig+0x114>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d003      	beq.n	8009198 <TIM_OC2_SetConfig+0x74>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4a2a      	ldr	r2, [pc, #168]	; (800923c <TIM_OC2_SetConfig+0x118>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d10d      	bne.n	80091b4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800919e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	011b      	lsls	r3, r3, #4
 80091a6:	697a      	ldr	r2, [r7, #20]
 80091a8:	4313      	orrs	r3, r2
 80091aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4a1f      	ldr	r2, [pc, #124]	; (8009234 <TIM_OC2_SetConfig+0x110>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d013      	beq.n	80091e4 <TIM_OC2_SetConfig+0xc0>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a1e      	ldr	r2, [pc, #120]	; (8009238 <TIM_OC2_SetConfig+0x114>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d00f      	beq.n	80091e4 <TIM_OC2_SetConfig+0xc0>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4a1e      	ldr	r2, [pc, #120]	; (8009240 <TIM_OC2_SetConfig+0x11c>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d00b      	beq.n	80091e4 <TIM_OC2_SetConfig+0xc0>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4a1d      	ldr	r2, [pc, #116]	; (8009244 <TIM_OC2_SetConfig+0x120>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d007      	beq.n	80091e4 <TIM_OC2_SetConfig+0xc0>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a1c      	ldr	r2, [pc, #112]	; (8009248 <TIM_OC2_SetConfig+0x124>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d003      	beq.n	80091e4 <TIM_OC2_SetConfig+0xc0>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4a17      	ldr	r2, [pc, #92]	; (800923c <TIM_OC2_SetConfig+0x118>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d113      	bne.n	800920c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80091ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80091f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	695b      	ldr	r3, [r3, #20]
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	693a      	ldr	r2, [r7, #16]
 80091fc:	4313      	orrs	r3, r2
 80091fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	699b      	ldr	r3, [r3, #24]
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	693a      	ldr	r2, [r7, #16]
 8009208:	4313      	orrs	r3, r2
 800920a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	693a      	ldr	r2, [r7, #16]
 8009210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	68fa      	ldr	r2, [r7, #12]
 8009216:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	685a      	ldr	r2, [r3, #4]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	697a      	ldr	r2, [r7, #20]
 8009224:	621a      	str	r2, [r3, #32]
}
 8009226:	bf00      	nop
 8009228:	371c      	adds	r7, #28
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	40012c00 	.word	0x40012c00
 8009238:	40013400 	.word	0x40013400
 800923c:	40015000 	.word	0x40015000
 8009240:	40014000 	.word	0x40014000
 8009244:	40014400 	.word	0x40014400
 8009248:	40014800 	.word	0x40014800

0800924c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800924c:	b480      	push	{r7}
 800924e:	b087      	sub	sp, #28
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6a1b      	ldr	r3, [r3, #32]
 800925a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a1b      	ldr	r3, [r3, #32]
 8009266:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	69db      	ldr	r3, [r3, #28]
 8009272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800927a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800927e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f023 0303 	bic.w	r3, r3, #3
 8009286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	4313      	orrs	r3, r2
 8009290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	021b      	lsls	r3, r3, #8
 80092a0:	697a      	ldr	r2, [r7, #20]
 80092a2:	4313      	orrs	r3, r2
 80092a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4a2b      	ldr	r2, [pc, #172]	; (8009358 <TIM_OC3_SetConfig+0x10c>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d007      	beq.n	80092be <TIM_OC3_SetConfig+0x72>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4a2a      	ldr	r2, [pc, #168]	; (800935c <TIM_OC3_SetConfig+0x110>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d003      	beq.n	80092be <TIM_OC3_SetConfig+0x72>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	4a29      	ldr	r2, [pc, #164]	; (8009360 <TIM_OC3_SetConfig+0x114>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d10d      	bne.n	80092da <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80092c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	021b      	lsls	r3, r3, #8
 80092cc:	697a      	ldr	r2, [r7, #20]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80092d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	4a1e      	ldr	r2, [pc, #120]	; (8009358 <TIM_OC3_SetConfig+0x10c>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d013      	beq.n	800930a <TIM_OC3_SetConfig+0xbe>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	4a1d      	ldr	r2, [pc, #116]	; (800935c <TIM_OC3_SetConfig+0x110>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d00f      	beq.n	800930a <TIM_OC3_SetConfig+0xbe>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4a1d      	ldr	r2, [pc, #116]	; (8009364 <TIM_OC3_SetConfig+0x118>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d00b      	beq.n	800930a <TIM_OC3_SetConfig+0xbe>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4a1c      	ldr	r2, [pc, #112]	; (8009368 <TIM_OC3_SetConfig+0x11c>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d007      	beq.n	800930a <TIM_OC3_SetConfig+0xbe>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	4a1b      	ldr	r2, [pc, #108]	; (800936c <TIM_OC3_SetConfig+0x120>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d003      	beq.n	800930a <TIM_OC3_SetConfig+0xbe>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4a16      	ldr	r2, [pc, #88]	; (8009360 <TIM_OC3_SetConfig+0x114>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d113      	bne.n	8009332 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	695b      	ldr	r3, [r3, #20]
 800931e:	011b      	lsls	r3, r3, #4
 8009320:	693a      	ldr	r2, [r7, #16]
 8009322:	4313      	orrs	r3, r2
 8009324:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	699b      	ldr	r3, [r3, #24]
 800932a:	011b      	lsls	r3, r3, #4
 800932c:	693a      	ldr	r2, [r7, #16]
 800932e:	4313      	orrs	r3, r2
 8009330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	693a      	ldr	r2, [r7, #16]
 8009336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	68fa      	ldr	r2, [r7, #12]
 800933c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	685a      	ldr	r2, [r3, #4]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	697a      	ldr	r2, [r7, #20]
 800934a:	621a      	str	r2, [r3, #32]
}
 800934c:	bf00      	nop
 800934e:	371c      	adds	r7, #28
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr
 8009358:	40012c00 	.word	0x40012c00
 800935c:	40013400 	.word	0x40013400
 8009360:	40015000 	.word	0x40015000
 8009364:	40014000 	.word	0x40014000
 8009368:	40014400 	.word	0x40014400
 800936c:	40014800 	.word	0x40014800

08009370 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009370:	b480      	push	{r7}
 8009372:	b087      	sub	sp, #28
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6a1b      	ldr	r3, [r3, #32]
 800937e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a1b      	ldr	r3, [r3, #32]
 800938a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	69db      	ldr	r3, [r3, #28]
 8009396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800939e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	021b      	lsls	r3, r3, #8
 80093b2:	68fa      	ldr	r2, [r7, #12]
 80093b4:	4313      	orrs	r3, r2
 80093b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80093be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	031b      	lsls	r3, r3, #12
 80093c6:	697a      	ldr	r2, [r7, #20]
 80093c8:	4313      	orrs	r3, r2
 80093ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4a2c      	ldr	r2, [pc, #176]	; (8009480 <TIM_OC4_SetConfig+0x110>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d007      	beq.n	80093e4 <TIM_OC4_SetConfig+0x74>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4a2b      	ldr	r2, [pc, #172]	; (8009484 <TIM_OC4_SetConfig+0x114>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d003      	beq.n	80093e4 <TIM_OC4_SetConfig+0x74>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4a2a      	ldr	r2, [pc, #168]	; (8009488 <TIM_OC4_SetConfig+0x118>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d10d      	bne.n	8009400 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80093ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	68db      	ldr	r3, [r3, #12]
 80093f0:	031b      	lsls	r3, r3, #12
 80093f2:	697a      	ldr	r2, [r7, #20]
 80093f4:	4313      	orrs	r3, r2
 80093f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80093fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4a1f      	ldr	r2, [pc, #124]	; (8009480 <TIM_OC4_SetConfig+0x110>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d013      	beq.n	8009430 <TIM_OC4_SetConfig+0xc0>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4a1e      	ldr	r2, [pc, #120]	; (8009484 <TIM_OC4_SetConfig+0x114>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d00f      	beq.n	8009430 <TIM_OC4_SetConfig+0xc0>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	4a1e      	ldr	r2, [pc, #120]	; (800948c <TIM_OC4_SetConfig+0x11c>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d00b      	beq.n	8009430 <TIM_OC4_SetConfig+0xc0>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4a1d      	ldr	r2, [pc, #116]	; (8009490 <TIM_OC4_SetConfig+0x120>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d007      	beq.n	8009430 <TIM_OC4_SetConfig+0xc0>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4a1c      	ldr	r2, [pc, #112]	; (8009494 <TIM_OC4_SetConfig+0x124>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d003      	beq.n	8009430 <TIM_OC4_SetConfig+0xc0>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4a17      	ldr	r2, [pc, #92]	; (8009488 <TIM_OC4_SetConfig+0x118>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d113      	bne.n	8009458 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009436:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800943e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	695b      	ldr	r3, [r3, #20]
 8009444:	019b      	lsls	r3, r3, #6
 8009446:	693a      	ldr	r2, [r7, #16]
 8009448:	4313      	orrs	r3, r2
 800944a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	699b      	ldr	r3, [r3, #24]
 8009450:	019b      	lsls	r3, r3, #6
 8009452:	693a      	ldr	r2, [r7, #16]
 8009454:	4313      	orrs	r3, r2
 8009456:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	693a      	ldr	r2, [r7, #16]
 800945c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	68fa      	ldr	r2, [r7, #12]
 8009462:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	685a      	ldr	r2, [r3, #4]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	697a      	ldr	r2, [r7, #20]
 8009470:	621a      	str	r2, [r3, #32]
}
 8009472:	bf00      	nop
 8009474:	371c      	adds	r7, #28
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr
 800947e:	bf00      	nop
 8009480:	40012c00 	.word	0x40012c00
 8009484:	40013400 	.word	0x40013400
 8009488:	40015000 	.word	0x40015000
 800948c:	40014000 	.word	0x40014000
 8009490:	40014400 	.word	0x40014400
 8009494:	40014800 	.word	0x40014800

08009498 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009498:	b480      	push	{r7}
 800949a:	b087      	sub	sp, #28
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6a1b      	ldr	r3, [r3, #32]
 80094a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6a1b      	ldr	r3, [r3, #32]
 80094b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	68fa      	ldr	r2, [r7, #12]
 80094d2:	4313      	orrs	r3, r2
 80094d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80094dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	041b      	lsls	r3, r3, #16
 80094e4:	693a      	ldr	r2, [r7, #16]
 80094e6:	4313      	orrs	r3, r2
 80094e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4a19      	ldr	r2, [pc, #100]	; (8009554 <TIM_OC5_SetConfig+0xbc>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d013      	beq.n	800951a <TIM_OC5_SetConfig+0x82>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4a18      	ldr	r2, [pc, #96]	; (8009558 <TIM_OC5_SetConfig+0xc0>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d00f      	beq.n	800951a <TIM_OC5_SetConfig+0x82>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	4a17      	ldr	r2, [pc, #92]	; (800955c <TIM_OC5_SetConfig+0xc4>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d00b      	beq.n	800951a <TIM_OC5_SetConfig+0x82>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	4a16      	ldr	r2, [pc, #88]	; (8009560 <TIM_OC5_SetConfig+0xc8>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d007      	beq.n	800951a <TIM_OC5_SetConfig+0x82>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4a15      	ldr	r2, [pc, #84]	; (8009564 <TIM_OC5_SetConfig+0xcc>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d003      	beq.n	800951a <TIM_OC5_SetConfig+0x82>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4a14      	ldr	r2, [pc, #80]	; (8009568 <TIM_OC5_SetConfig+0xd0>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d109      	bne.n	800952e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009520:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	695b      	ldr	r3, [r3, #20]
 8009526:	021b      	lsls	r3, r3, #8
 8009528:	697a      	ldr	r2, [r7, #20]
 800952a:	4313      	orrs	r3, r2
 800952c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	697a      	ldr	r2, [r7, #20]
 8009532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	68fa      	ldr	r2, [r7, #12]
 8009538:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	685a      	ldr	r2, [r3, #4]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	693a      	ldr	r2, [r7, #16]
 8009546:	621a      	str	r2, [r3, #32]
}
 8009548:	bf00      	nop
 800954a:	371c      	adds	r7, #28
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr
 8009554:	40012c00 	.word	0x40012c00
 8009558:	40013400 	.word	0x40013400
 800955c:	40014000 	.word	0x40014000
 8009560:	40014400 	.word	0x40014400
 8009564:	40014800 	.word	0x40014800
 8009568:	40015000 	.word	0x40015000

0800956c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800956c:	b480      	push	{r7}
 800956e:	b087      	sub	sp, #28
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6a1b      	ldr	r3, [r3, #32]
 800957a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6a1b      	ldr	r3, [r3, #32]
 8009586:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800959a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800959e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	021b      	lsls	r3, r3, #8
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	4313      	orrs	r3, r2
 80095aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80095b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	051b      	lsls	r3, r3, #20
 80095ba:	693a      	ldr	r2, [r7, #16]
 80095bc:	4313      	orrs	r3, r2
 80095be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	4a1a      	ldr	r2, [pc, #104]	; (800962c <TIM_OC6_SetConfig+0xc0>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d013      	beq.n	80095f0 <TIM_OC6_SetConfig+0x84>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	4a19      	ldr	r2, [pc, #100]	; (8009630 <TIM_OC6_SetConfig+0xc4>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d00f      	beq.n	80095f0 <TIM_OC6_SetConfig+0x84>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a18      	ldr	r2, [pc, #96]	; (8009634 <TIM_OC6_SetConfig+0xc8>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d00b      	beq.n	80095f0 <TIM_OC6_SetConfig+0x84>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	4a17      	ldr	r2, [pc, #92]	; (8009638 <TIM_OC6_SetConfig+0xcc>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d007      	beq.n	80095f0 <TIM_OC6_SetConfig+0x84>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	4a16      	ldr	r2, [pc, #88]	; (800963c <TIM_OC6_SetConfig+0xd0>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d003      	beq.n	80095f0 <TIM_OC6_SetConfig+0x84>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4a15      	ldr	r2, [pc, #84]	; (8009640 <TIM_OC6_SetConfig+0xd4>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d109      	bne.n	8009604 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80095f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	695b      	ldr	r3, [r3, #20]
 80095fc:	029b      	lsls	r3, r3, #10
 80095fe:	697a      	ldr	r2, [r7, #20]
 8009600:	4313      	orrs	r3, r2
 8009602:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	697a      	ldr	r2, [r7, #20]
 8009608:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	685a      	ldr	r2, [r3, #4]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	693a      	ldr	r2, [r7, #16]
 800961c:	621a      	str	r2, [r3, #32]
}
 800961e:	bf00      	nop
 8009620:	371c      	adds	r7, #28
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop
 800962c:	40012c00 	.word	0x40012c00
 8009630:	40013400 	.word	0x40013400
 8009634:	40014000 	.word	0x40014000
 8009638:	40014400 	.word	0x40014400
 800963c:	40014800 	.word	0x40014800
 8009640:	40015000 	.word	0x40015000

08009644 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009644:	b480      	push	{r7}
 8009646:	b087      	sub	sp, #28
 8009648:	af00      	add	r7, sp, #0
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	60b9      	str	r1, [r7, #8]
 800964e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6a1b      	ldr	r3, [r3, #32]
 8009654:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	6a1b      	ldr	r3, [r3, #32]
 800965a:	f023 0201 	bic.w	r2, r3, #1
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	699b      	ldr	r3, [r3, #24]
 8009666:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800966e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	011b      	lsls	r3, r3, #4
 8009674:	693a      	ldr	r2, [r7, #16]
 8009676:	4313      	orrs	r3, r2
 8009678:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	f023 030a 	bic.w	r3, r3, #10
 8009680:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009682:	697a      	ldr	r2, [r7, #20]
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	4313      	orrs	r3, r2
 8009688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	693a      	ldr	r2, [r7, #16]
 800968e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	697a      	ldr	r2, [r7, #20]
 8009694:	621a      	str	r2, [r3, #32]
}
 8009696:	bf00      	nop
 8009698:	371c      	adds	r7, #28
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr

080096a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80096a2:	b480      	push	{r7}
 80096a4:	b087      	sub	sp, #28
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	60f8      	str	r0, [r7, #12]
 80096aa:	60b9      	str	r1, [r7, #8]
 80096ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	6a1b      	ldr	r3, [r3, #32]
 80096b2:	f023 0210 	bic.w	r2, r3, #16
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	699b      	ldr	r3, [r3, #24]
 80096be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	6a1b      	ldr	r3, [r3, #32]
 80096c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80096cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	031b      	lsls	r3, r3, #12
 80096d2:	697a      	ldr	r2, [r7, #20]
 80096d4:	4313      	orrs	r3, r2
 80096d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80096de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	011b      	lsls	r3, r3, #4
 80096e4:	693a      	ldr	r2, [r7, #16]
 80096e6:	4313      	orrs	r3, r2
 80096e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	697a      	ldr	r2, [r7, #20]
 80096ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	693a      	ldr	r2, [r7, #16]
 80096f4:	621a      	str	r2, [r3, #32]
}
 80096f6:	bf00      	nop
 80096f8:	371c      	adds	r7, #28
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr

08009702 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009702:	b480      	push	{r7}
 8009704:	b085      	sub	sp, #20
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
 800970a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800971c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800971e:	683a      	ldr	r2, [r7, #0]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	4313      	orrs	r3, r2
 8009724:	f043 0307 	orr.w	r3, r3, #7
 8009728:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	609a      	str	r2, [r3, #8]
}
 8009730:	bf00      	nop
 8009732:	3714      	adds	r7, #20
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800973c:	b480      	push	{r7}
 800973e:	b087      	sub	sp, #28
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	607a      	str	r2, [r7, #4]
 8009748:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009756:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	021a      	lsls	r2, r3, #8
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	431a      	orrs	r2, r3
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	4313      	orrs	r3, r2
 8009764:	697a      	ldr	r2, [r7, #20]
 8009766:	4313      	orrs	r3, r2
 8009768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	697a      	ldr	r2, [r7, #20]
 800976e:	609a      	str	r2, [r3, #8]
}
 8009770:	bf00      	nop
 8009772:	371c      	adds	r7, #28
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800977c:	b480      	push	{r7}
 800977e:	b087      	sub	sp, #28
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	f003 031f 	and.w	r3, r3, #31
 800978e:	2201      	movs	r2, #1
 8009790:	fa02 f303 	lsl.w	r3, r2, r3
 8009794:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6a1a      	ldr	r2, [r3, #32]
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	43db      	mvns	r3, r3
 800979e:	401a      	ands	r2, r3
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6a1a      	ldr	r2, [r3, #32]
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	f003 031f 	and.w	r3, r3, #31
 80097ae:	6879      	ldr	r1, [r7, #4]
 80097b0:	fa01 f303 	lsl.w	r3, r1, r3
 80097b4:	431a      	orrs	r2, r3
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	621a      	str	r2, [r3, #32]
}
 80097ba:	bf00      	nop
 80097bc:	371c      	adds	r7, #28
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr
	...

080097c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d101      	bne.n	80097e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80097dc:	2302      	movs	r3, #2
 80097de:	e074      	b.n	80098ca <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2202      	movs	r2, #2
 80097ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a34      	ldr	r2, [pc, #208]	; (80098d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d009      	beq.n	800981e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a33      	ldr	r2, [pc, #204]	; (80098dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d004      	beq.n	800981e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a31      	ldr	r2, [pc, #196]	; (80098e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d108      	bne.n	8009830 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009824:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	68fa      	ldr	r2, [r7, #12]
 800982c:	4313      	orrs	r3, r2
 800982e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800983a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	68fa      	ldr	r2, [r7, #12]
 8009842:	4313      	orrs	r3, r2
 8009844:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	68fa      	ldr	r2, [r7, #12]
 800984c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a21      	ldr	r2, [pc, #132]	; (80098d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d022      	beq.n	800989e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009860:	d01d      	beq.n	800989e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a1f      	ldr	r2, [pc, #124]	; (80098e4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d018      	beq.n	800989e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a1d      	ldr	r2, [pc, #116]	; (80098e8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d013      	beq.n	800989e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a1c      	ldr	r2, [pc, #112]	; (80098ec <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d00e      	beq.n	800989e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a15      	ldr	r2, [pc, #84]	; (80098dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d009      	beq.n	800989e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a18      	ldr	r2, [pc, #96]	; (80098f0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d004      	beq.n	800989e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a11      	ldr	r2, [pc, #68]	; (80098e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d10c      	bne.n	80098b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	689b      	ldr	r3, [r3, #8]
 80098aa:	68ba      	ldr	r2, [r7, #8]
 80098ac:	4313      	orrs	r3, r2
 80098ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	68ba      	ldr	r2, [r7, #8]
 80098b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3714      	adds	r7, #20
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr
 80098d6:	bf00      	nop
 80098d8:	40012c00 	.word	0x40012c00
 80098dc:	40013400 	.word	0x40013400
 80098e0:	40015000 	.word	0x40015000
 80098e4:	40000400 	.word	0x40000400
 80098e8:	40000800 	.word	0x40000800
 80098ec:	40000c00 	.word	0x40000c00
 80098f0:	40014000 	.word	0x40014000

080098f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b085      	sub	sp, #20
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80098fe:	2300      	movs	r3, #0
 8009900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009908:	2b01      	cmp	r3, #1
 800990a:	d101      	bne.n	8009910 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800990c:	2302      	movs	r3, #2
 800990e:	e096      	b.n	8009a3e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2201      	movs	r2, #1
 8009914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	4313      	orrs	r3, r2
 8009924:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	689b      	ldr	r3, [r3, #8]
 8009930:	4313      	orrs	r3, r2
 8009932:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	4313      	orrs	r3, r2
 8009940:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4313      	orrs	r3, r2
 800994e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	691b      	ldr	r3, [r3, #16]
 800995a:	4313      	orrs	r3, r2
 800995c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	695b      	ldr	r3, [r3, #20]
 8009968:	4313      	orrs	r3, r2
 800996a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009976:	4313      	orrs	r3, r2
 8009978:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	699b      	ldr	r3, [r3, #24]
 8009984:	041b      	lsls	r3, r3, #16
 8009986:	4313      	orrs	r3, r2
 8009988:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a2f      	ldr	r2, [pc, #188]	; (8009a4c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d009      	beq.n	80099a8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a2d      	ldr	r2, [pc, #180]	; (8009a50 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d004      	beq.n	80099a8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a2c      	ldr	r2, [pc, #176]	; (8009a54 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d106      	bne.n	80099b6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	69db      	ldr	r3, [r3, #28]
 80099b2:	4313      	orrs	r3, r2
 80099b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a24      	ldr	r2, [pc, #144]	; (8009a4c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d009      	beq.n	80099d4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a22      	ldr	r2, [pc, #136]	; (8009a50 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d004      	beq.n	80099d4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a21      	ldr	r2, [pc, #132]	; (8009a54 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d12b      	bne.n	8009a2c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099de:	051b      	lsls	r3, r3, #20
 80099e0:	4313      	orrs	r3, r2
 80099e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	6a1b      	ldr	r3, [r3, #32]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099fc:	4313      	orrs	r3, r2
 80099fe:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a11      	ldr	r2, [pc, #68]	; (8009a4c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d009      	beq.n	8009a1e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a10      	ldr	r2, [pc, #64]	; (8009a50 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d004      	beq.n	8009a1e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a0e      	ldr	r2, [pc, #56]	; (8009a54 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d106      	bne.n	8009a2c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	68fa      	ldr	r2, [r7, #12]
 8009a32:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3714      	adds	r7, #20
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr
 8009a4a:	bf00      	nop
 8009a4c:	40012c00 	.word	0x40012c00
 8009a50:	40013400 	.word	0x40013400
 8009a54:	40015000 	.word	0x40015000

08009a58 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b085      	sub	sp, #20
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009a68:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009a6c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	b29a      	uxth	r2, r3
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3714      	adds	r7, #20
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr

08009a86 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009a86:	b480      	push	{r7}
 8009a88:	b085      	sub	sp, #20
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009a8e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009a92:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009a9a:	b29a      	uxth	r2, r3
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	43db      	mvns	r3, r3
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	b29a      	uxth	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3714      	adds	r7, #20
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009abc:	b084      	sub	sp, #16
 8009abe:	b480      	push	{r7}
 8009ac0:	b083      	sub	sp, #12
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
 8009ac6:	f107 0014 	add.w	r0, r7, #20
 8009aca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009aee:	2300      	movs	r3, #0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	b004      	add	sp, #16
 8009afc:	4770      	bx	lr
	...

08009b00 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b09d      	sub	sp, #116	; 0x74
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	4413      	add	r3, r2
 8009b1a:	881b      	ldrh	r3, [r3, #0]
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b26:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	78db      	ldrb	r3, [r3, #3]
 8009b2e:	2b03      	cmp	r3, #3
 8009b30:	d81f      	bhi.n	8009b72 <USB_ActivateEndpoint+0x72>
 8009b32:	a201      	add	r2, pc, #4	; (adr r2, 8009b38 <USB_ActivateEndpoint+0x38>)
 8009b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b38:	08009b49 	.word	0x08009b49
 8009b3c:	08009b65 	.word	0x08009b65
 8009b40:	08009b7b 	.word	0x08009b7b
 8009b44:	08009b57 	.word	0x08009b57
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009b48:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009b4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009b50:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009b54:	e012      	b.n	8009b7c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009b56:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009b5a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8009b5e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009b62:	e00b      	b.n	8009b7c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009b64:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009b68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009b6c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009b70:	e004      	b.n	8009b7c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009b72:	2301      	movs	r3, #1
 8009b74:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8009b78:	e000      	b.n	8009b7c <USB_ActivateEndpoint+0x7c>
      break;
 8009b7a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	441a      	add	r2, r3
 8009b86:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	4413      	add	r3, r2
 8009ba8:	881b      	ldrh	r3, [r3, #0]
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	b21b      	sxth	r3, r3
 8009bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bb6:	b21a      	sxth	r2, r3
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	b21b      	sxth	r3, r3
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	b21b      	sxth	r3, r3
 8009bc2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	441a      	add	r2, r3
 8009bd0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009bd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	7b1b      	ldrb	r3, [r3, #12]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f040 8149 	bne.w	8009e84 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	785b      	ldrb	r3, [r3, #1]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	f000 8084 	beq.w	8009d04 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	61bb      	str	r3, [r7, #24]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	461a      	mov	r2, r3
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	61bb      	str	r3, [r7, #24]
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	00da      	lsls	r2, r3, #3
 8009c16:	69bb      	ldr	r3, [r7, #24]
 8009c18:	4413      	add	r3, r2
 8009c1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c1e:	617b      	str	r3, [r7, #20]
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	88db      	ldrh	r3, [r3, #6]
 8009c24:	085b      	lsrs	r3, r3, #1
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	005b      	lsls	r3, r3, #1
 8009c2a:	b29a      	uxth	r2, r3
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	4413      	add	r3, r2
 8009c3a:	881b      	ldrh	r3, [r3, #0]
 8009c3c:	827b      	strh	r3, [r7, #18]
 8009c3e:	8a7b      	ldrh	r3, [r7, #18]
 8009c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d01b      	beq.n	8009c80 <USB_ActivateEndpoint+0x180>
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	4413      	add	r3, r2
 8009c52:	881b      	ldrh	r3, [r3, #0]
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c5e:	823b      	strh	r3, [r7, #16]
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	441a      	add	r2, r3
 8009c6a:	8a3b      	ldrh	r3, [r7, #16]
 8009c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	78db      	ldrb	r3, [r3, #3]
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d020      	beq.n	8009cca <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	4413      	add	r3, r2
 8009c92:	881b      	ldrh	r3, [r3, #0]
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c9e:	81bb      	strh	r3, [r7, #12]
 8009ca0:	89bb      	ldrh	r3, [r7, #12]
 8009ca2:	f083 0320 	eor.w	r3, r3, #32
 8009ca6:	81bb      	strh	r3, [r7, #12]
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	441a      	add	r2, r3
 8009cb2:	89bb      	ldrh	r3, [r7, #12]
 8009cb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	8013      	strh	r3, [r2, #0]
 8009cc8:	e2a6      	b.n	800a218 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	4413      	add	r3, r2
 8009cd4:	881b      	ldrh	r3, [r3, #0]
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ce0:	81fb      	strh	r3, [r7, #14]
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	441a      	add	r2, r3
 8009cec:	89fb      	ldrh	r3, [r7, #14]
 8009cee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	8013      	strh	r3, [r2, #0]
 8009d02:	e289      	b.n	800a218 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	633b      	str	r3, [r7, #48]	; 0x30
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	461a      	mov	r2, r3
 8009d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d14:	4413      	add	r3, r2
 8009d16:	633b      	str	r3, [r7, #48]	; 0x30
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	00da      	lsls	r2, r3, #3
 8009d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d20:	4413      	add	r3, r2
 8009d22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009d26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	88db      	ldrh	r3, [r3, #6]
 8009d2c:	085b      	lsrs	r3, r3, #1
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	005b      	lsls	r3, r3, #1
 8009d32:	b29a      	uxth	r2, r3
 8009d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d36:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	461a      	mov	r2, r3
 8009d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d48:	4413      	add	r3, r2
 8009d4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	00da      	lsls	r2, r3, #3
 8009d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d54:	4413      	add	r3, r2
 8009d56:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	691b      	ldr	r3, [r3, #16]
 8009d60:	2b3e      	cmp	r3, #62	; 0x3e
 8009d62:	d918      	bls.n	8009d96 <USB_ActivateEndpoint+0x296>
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	691b      	ldr	r3, [r3, #16]
 8009d68:	095b      	lsrs	r3, r3, #5
 8009d6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	691b      	ldr	r3, [r3, #16]
 8009d70:	f003 031f 	and.w	r3, r3, #31
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d102      	bne.n	8009d7e <USB_ActivateEndpoint+0x27e>
 8009d78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	029b      	lsls	r3, r3, #10
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d8e:	b29a      	uxth	r2, r3
 8009d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d92:	801a      	strh	r2, [r3, #0]
 8009d94:	e029      	b.n	8009dea <USB_ActivateEndpoint+0x2ea>
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	691b      	ldr	r3, [r3, #16]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d112      	bne.n	8009dc4 <USB_ActivateEndpoint+0x2c4>
 8009d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da0:	881b      	ldrh	r3, [r3, #0]
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009da8:	b29a      	uxth	r2, r3
 8009daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dac:	801a      	strh	r2, [r3, #0]
 8009dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db0:	881b      	ldrh	r3, [r3, #0]
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009db8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dbc:	b29a      	uxth	r2, r3
 8009dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc0:	801a      	strh	r2, [r3, #0]
 8009dc2:	e012      	b.n	8009dea <USB_ActivateEndpoint+0x2ea>
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	691b      	ldr	r3, [r3, #16]
 8009dc8:	085b      	lsrs	r3, r3, #1
 8009dca:	66bb      	str	r3, [r7, #104]	; 0x68
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	691b      	ldr	r3, [r3, #16]
 8009dd0:	f003 0301 	and.w	r3, r3, #1
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d002      	beq.n	8009dde <USB_ActivateEndpoint+0x2de>
 8009dd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009dda:	3301      	adds	r3, #1
 8009ddc:	66bb      	str	r3, [r7, #104]	; 0x68
 8009dde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	029b      	lsls	r3, r3, #10
 8009de4:	b29a      	uxth	r2, r3
 8009de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	4413      	add	r3, r2
 8009df4:	881b      	ldrh	r3, [r3, #0]
 8009df6:	847b      	strh	r3, [r7, #34]	; 0x22
 8009df8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d01b      	beq.n	8009e3a <USB_ActivateEndpoint+0x33a>
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	4413      	add	r3, r2
 8009e0c:	881b      	ldrh	r3, [r3, #0]
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e18:	843b      	strh	r3, [r7, #32]
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	441a      	add	r2, r3
 8009e24:	8c3b      	ldrh	r3, [r7, #32]
 8009e26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	009b      	lsls	r3, r3, #2
 8009e42:	4413      	add	r3, r2
 8009e44:	881b      	ldrh	r3, [r3, #0]
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e50:	83fb      	strh	r3, [r7, #30]
 8009e52:	8bfb      	ldrh	r3, [r7, #30]
 8009e54:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009e58:	83fb      	strh	r3, [r7, #30]
 8009e5a:	8bfb      	ldrh	r3, [r7, #30]
 8009e5c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009e60:	83fb      	strh	r3, [r7, #30]
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	441a      	add	r2, r3
 8009e6c:	8bfb      	ldrh	r3, [r7, #30]
 8009e6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	8013      	strh	r3, [r2, #0]
 8009e82:	e1c9      	b.n	800a218 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	78db      	ldrb	r3, [r3, #3]
 8009e88:	2b02      	cmp	r3, #2
 8009e8a:	d11e      	bne.n	8009eca <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	4413      	add	r3, r2
 8009e96:	881b      	ldrh	r3, [r3, #0]
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ea2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	441a      	add	r2, r3
 8009eb0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009eb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009eb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ebc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	8013      	strh	r3, [r2, #0]
 8009ec8:	e01d      	b.n	8009f06 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	4413      	add	r3, r2
 8009ed4:	881b      	ldrh	r3, [r3, #0]
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ee0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	441a      	add	r2, r3
 8009eee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009ef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	461a      	mov	r2, r3
 8009f14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f16:	4413      	add	r3, r2
 8009f18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	00da      	lsls	r2, r3, #3
 8009f20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f22:	4413      	add	r3, r2
 8009f24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f28:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	891b      	ldrh	r3, [r3, #8]
 8009f2e:	085b      	lsrs	r3, r3, #1
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	005b      	lsls	r3, r3, #1
 8009f34:	b29a      	uxth	r2, r3
 8009f36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f38:	801a      	strh	r2, [r3, #0]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	657b      	str	r3, [r7, #84]	; 0x54
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	461a      	mov	r2, r3
 8009f48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f4a:	4413      	add	r3, r2
 8009f4c:	657b      	str	r3, [r7, #84]	; 0x54
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	00da      	lsls	r2, r3, #3
 8009f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f56:	4413      	add	r3, r2
 8009f58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009f5c:	653b      	str	r3, [r7, #80]	; 0x50
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	895b      	ldrh	r3, [r3, #10]
 8009f62:	085b      	lsrs	r3, r3, #1
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	005b      	lsls	r3, r3, #1
 8009f68:	b29a      	uxth	r2, r3
 8009f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f6c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	785b      	ldrb	r3, [r3, #1]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	f040 8093 	bne.w	800a09e <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	4413      	add	r3, r2
 8009f82:	881b      	ldrh	r3, [r3, #0]
 8009f84:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009f88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009f8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d01b      	beq.n	8009fcc <USB_ActivateEndpoint+0x4cc>
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	4413      	add	r3, r2
 8009f9e:	881b      	ldrh	r3, [r3, #0]
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009faa:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	441a      	add	r2, r3
 8009fb6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009fb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	4413      	add	r3, r2
 8009fd6:	881b      	ldrh	r3, [r3, #0]
 8009fd8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009fda:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d01b      	beq.n	800a01c <USB_ActivateEndpoint+0x51c>
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	4413      	add	r3, r2
 8009fee:	881b      	ldrh	r3, [r3, #0]
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ffa:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	441a      	add	r2, r3
 800a006:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a008:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a00c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a014:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a018:	b29b      	uxth	r3, r3
 800a01a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	009b      	lsls	r3, r3, #2
 800a024:	4413      	add	r3, r2
 800a026:	881b      	ldrh	r3, [r3, #0]
 800a028:	b29b      	uxth	r3, r3
 800a02a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a02e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a032:	873b      	strh	r3, [r7, #56]	; 0x38
 800a034:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a036:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a03a:	873b      	strh	r3, [r7, #56]	; 0x38
 800a03c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a03e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a042:	873b      	strh	r3, [r7, #56]	; 0x38
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	441a      	add	r2, r3
 800a04e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a050:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a054:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a058:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a05c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a060:	b29b      	uxth	r3, r3
 800a062:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	4413      	add	r3, r2
 800a06e:	881b      	ldrh	r3, [r3, #0]
 800a070:	b29b      	uxth	r3, r3
 800a072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a07a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	441a      	add	r2, r3
 800a086:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a088:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a08c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a098:	b29b      	uxth	r3, r3
 800a09a:	8013      	strh	r3, [r2, #0]
 800a09c:	e0bc      	b.n	800a218 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	4413      	add	r3, r2
 800a0a8:	881b      	ldrh	r3, [r3, #0]
 800a0aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800a0ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a0b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d01d      	beq.n	800a0f6 <USB_ActivateEndpoint+0x5f6>
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	4413      	add	r3, r2
 800a0c4:	881b      	ldrh	r3, [r3, #0]
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0d0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	441a      	add	r2, r3
 800a0de:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a0e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a0ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	4413      	add	r3, r2
 800a100:	881b      	ldrh	r3, [r3, #0]
 800a102:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a106:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a10a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d01d      	beq.n	800a14e <USB_ActivateEndpoint+0x64e>
 800a112:	687a      	ldr	r2, [r7, #4]
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	4413      	add	r3, r2
 800a11c:	881b      	ldrh	r3, [r3, #0]
 800a11e:	b29b      	uxth	r3, r3
 800a120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a128:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	441a      	add	r2, r3
 800a136:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a13a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a13e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a146:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	78db      	ldrb	r3, [r3, #3]
 800a152:	2b01      	cmp	r3, #1
 800a154:	d024      	beq.n	800a1a0 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	4413      	add	r3, r2
 800a160:	881b      	ldrh	r3, [r3, #0]
 800a162:	b29b      	uxth	r3, r3
 800a164:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a168:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a16c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a170:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a174:	f083 0320 	eor.w	r3, r3, #32
 800a178:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	441a      	add	r2, r3
 800a186:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a18a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a18e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	8013      	strh	r3, [r2, #0]
 800a19e:	e01d      	b.n	800a1dc <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	4413      	add	r3, r2
 800a1aa:	881b      	ldrh	r3, [r3, #0]
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1b6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	441a      	add	r2, r3
 800a1c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a1c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1d8:	b29b      	uxth	r3, r3
 800a1da:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	4413      	add	r3, r2
 800a1e6:	881b      	ldrh	r3, [r3, #0]
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	441a      	add	r2, r3
 800a200:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a20c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a214:	b29b      	uxth	r3, r3
 800a216:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a218:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3774      	adds	r7, #116	; 0x74
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a228:	b480      	push	{r7}
 800a22a:	b08d      	sub	sp, #52	; 0x34
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	7b1b      	ldrb	r3, [r3, #12]
 800a236:	2b00      	cmp	r3, #0
 800a238:	f040 808e 	bne.w	800a358 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	785b      	ldrb	r3, [r3, #1]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d044      	beq.n	800a2ce <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	4413      	add	r3, r2
 800a24e:	881b      	ldrh	r3, [r3, #0]
 800a250:	81bb      	strh	r3, [r7, #12]
 800a252:	89bb      	ldrh	r3, [r7, #12]
 800a254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d01b      	beq.n	800a294 <USB_DeactivateEndpoint+0x6c>
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	009b      	lsls	r3, r3, #2
 800a264:	4413      	add	r3, r2
 800a266:	881b      	ldrh	r3, [r3, #0]
 800a268:	b29b      	uxth	r3, r3
 800a26a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a26e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a272:	817b      	strh	r3, [r7, #10]
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	009b      	lsls	r3, r3, #2
 800a27c:	441a      	add	r2, r3
 800a27e:	897b      	ldrh	r3, [r7, #10]
 800a280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a284:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a28c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a290:	b29b      	uxth	r3, r3
 800a292:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	009b      	lsls	r3, r3, #2
 800a29c:	4413      	add	r3, r2
 800a29e:	881b      	ldrh	r3, [r3, #0]
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2aa:	813b      	strh	r3, [r7, #8]
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	441a      	add	r2, r3
 800a2b6:	893b      	ldrh	r3, [r7, #8]
 800a2b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	8013      	strh	r3, [r2, #0]
 800a2cc:	e192      	b.n	800a5f4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	4413      	add	r3, r2
 800a2d8:	881b      	ldrh	r3, [r3, #0]
 800a2da:	827b      	strh	r3, [r7, #18]
 800a2dc:	8a7b      	ldrh	r3, [r7, #18]
 800a2de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d01b      	beq.n	800a31e <USB_DeactivateEndpoint+0xf6>
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	009b      	lsls	r3, r3, #2
 800a2ee:	4413      	add	r3, r2
 800a2f0:	881b      	ldrh	r3, [r3, #0]
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2fc:	823b      	strh	r3, [r7, #16]
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	441a      	add	r2, r3
 800a308:	8a3b      	ldrh	r3, [r7, #16]
 800a30a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a30e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a312:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a31e:	687a      	ldr	r2, [r7, #4]
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	4413      	add	r3, r2
 800a328:	881b      	ldrh	r3, [r3, #0]
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a334:	81fb      	strh	r3, [r7, #14]
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	441a      	add	r2, r3
 800a340:	89fb      	ldrh	r3, [r7, #14]
 800a342:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a346:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a34a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a34e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a352:	b29b      	uxth	r3, r3
 800a354:	8013      	strh	r3, [r2, #0]
 800a356:	e14d      	b.n	800a5f4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	785b      	ldrb	r3, [r3, #1]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	f040 80a5 	bne.w	800a4ac <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	4413      	add	r3, r2
 800a36c:	881b      	ldrh	r3, [r3, #0]
 800a36e:	843b      	strh	r3, [r7, #32]
 800a370:	8c3b      	ldrh	r3, [r7, #32]
 800a372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a376:	2b00      	cmp	r3, #0
 800a378:	d01b      	beq.n	800a3b2 <USB_DeactivateEndpoint+0x18a>
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	4413      	add	r3, r2
 800a384:	881b      	ldrh	r3, [r3, #0]
 800a386:	b29b      	uxth	r3, r3
 800a388:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a38c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a390:	83fb      	strh	r3, [r7, #30]
 800a392:	687a      	ldr	r2, [r7, #4]
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	009b      	lsls	r3, r3, #2
 800a39a:	441a      	add	r2, r3
 800a39c:	8bfb      	ldrh	r3, [r7, #30]
 800a39e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a3aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	009b      	lsls	r3, r3, #2
 800a3ba:	4413      	add	r3, r2
 800a3bc:	881b      	ldrh	r3, [r3, #0]
 800a3be:	83bb      	strh	r3, [r7, #28]
 800a3c0:	8bbb      	ldrh	r3, [r7, #28]
 800a3c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d01b      	beq.n	800a402 <USB_DeactivateEndpoint+0x1da>
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	009b      	lsls	r3, r3, #2
 800a3d2:	4413      	add	r3, r2
 800a3d4:	881b      	ldrh	r3, [r3, #0]
 800a3d6:	b29b      	uxth	r3, r3
 800a3d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3e0:	837b      	strh	r3, [r7, #26]
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	441a      	add	r2, r3
 800a3ec:	8b7b      	ldrh	r3, [r7, #26]
 800a3ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a3fe:	b29b      	uxth	r3, r3
 800a400:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	4413      	add	r3, r2
 800a40c:	881b      	ldrh	r3, [r3, #0]
 800a40e:	b29b      	uxth	r3, r3
 800a410:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a418:	833b      	strh	r3, [r7, #24]
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	009b      	lsls	r3, r3, #2
 800a422:	441a      	add	r2, r3
 800a424:	8b3b      	ldrh	r3, [r7, #24]
 800a426:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a42a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a42e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a432:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a436:	b29b      	uxth	r3, r3
 800a438:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	009b      	lsls	r3, r3, #2
 800a442:	4413      	add	r3, r2
 800a444:	881b      	ldrh	r3, [r3, #0]
 800a446:	b29b      	uxth	r3, r3
 800a448:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a44c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a450:	82fb      	strh	r3, [r7, #22]
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	781b      	ldrb	r3, [r3, #0]
 800a458:	009b      	lsls	r3, r3, #2
 800a45a:	441a      	add	r2, r3
 800a45c:	8afb      	ldrh	r3, [r7, #22]
 800a45e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a46a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a46e:	b29b      	uxth	r3, r3
 800a470:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	009b      	lsls	r3, r3, #2
 800a47a:	4413      	add	r3, r2
 800a47c:	881b      	ldrh	r3, [r3, #0]
 800a47e:	b29b      	uxth	r3, r3
 800a480:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a488:	82bb      	strh	r3, [r7, #20]
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	009b      	lsls	r3, r3, #2
 800a492:	441a      	add	r2, r3
 800a494:	8abb      	ldrh	r3, [r7, #20]
 800a496:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a49a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a49e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	8013      	strh	r3, [r2, #0]
 800a4aa:	e0a3      	b.n	800a5f4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	4413      	add	r3, r2
 800a4b6:	881b      	ldrh	r3, [r3, #0]
 800a4b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a4ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a4bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d01b      	beq.n	800a4fc <USB_DeactivateEndpoint+0x2d4>
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	4413      	add	r3, r2
 800a4ce:	881b      	ldrh	r3, [r3, #0]
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4da:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	009b      	lsls	r3, r3, #2
 800a4e4:	441a      	add	r2, r3
 800a4e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a4e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a4f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	4413      	add	r3, r2
 800a506:	881b      	ldrh	r3, [r3, #0]
 800a508:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a50a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a50c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a510:	2b00      	cmp	r3, #0
 800a512:	d01b      	beq.n	800a54c <USB_DeactivateEndpoint+0x324>
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	4413      	add	r3, r2
 800a51e:	881b      	ldrh	r3, [r3, #0]
 800a520:	b29b      	uxth	r3, r3
 800a522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a52a:	853b      	strh	r3, [r7, #40]	; 0x28
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	009b      	lsls	r3, r3, #2
 800a534:	441a      	add	r2, r3
 800a536:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a538:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a53c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a540:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a544:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a548:	b29b      	uxth	r3, r3
 800a54a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	009b      	lsls	r3, r3, #2
 800a554:	4413      	add	r3, r2
 800a556:	881b      	ldrh	r3, [r3, #0]
 800a558:	b29b      	uxth	r3, r3
 800a55a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a55e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a562:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	781b      	ldrb	r3, [r3, #0]
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	441a      	add	r2, r3
 800a56e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a578:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a57c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a580:	b29b      	uxth	r3, r3
 800a582:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	4413      	add	r3, r2
 800a58e:	881b      	ldrh	r3, [r3, #0]
 800a590:	b29b      	uxth	r3, r3
 800a592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a59a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	441a      	add	r2, r3
 800a5a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a5a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5b8:	b29b      	uxth	r3, r3
 800a5ba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	4413      	add	r3, r2
 800a5c6:	881b      	ldrh	r3, [r3, #0]
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a5ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5d2:	847b      	strh	r3, [r7, #34]	; 0x22
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	441a      	add	r2, r3
 800a5de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a5e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a5f4:	2300      	movs	r3, #0
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3734      	adds	r7, #52	; 0x34
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a600:	4770      	bx	lr

0800a602 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a602:	b580      	push	{r7, lr}
 800a604:	b0c2      	sub	sp, #264	; 0x108
 800a606:	af00      	add	r7, sp, #0
 800a608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a60c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a610:	6018      	str	r0, [r3, #0]
 800a612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a61a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a61c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	785b      	ldrb	r3, [r3, #1]
 800a628:	2b01      	cmp	r3, #1
 800a62a:	f040 867b 	bne.w	800b324 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a62e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a632:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	699a      	ldr	r2, [r3, #24]
 800a63a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a63e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	691b      	ldr	r3, [r3, #16]
 800a646:	429a      	cmp	r2, r3
 800a648:	d908      	bls.n	800a65c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a64a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a64e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	691b      	ldr	r3, [r3, #16]
 800a656:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a65a:	e007      	b.n	800a66c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a65c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a660:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	699b      	ldr	r3, [r3, #24]
 800a668:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a66c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	7b1b      	ldrb	r3, [r3, #12]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d13a      	bne.n	800a6f2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a67c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a680:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	6959      	ldr	r1, [r3, #20]
 800a688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a68c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	88da      	ldrh	r2, [r3, #6]
 800a694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a698:	b29b      	uxth	r3, r3
 800a69a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a69e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a6a2:	6800      	ldr	r0, [r0, #0]
 800a6a4:	f001 fc1d 	bl	800bee2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a6a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	613b      	str	r3, [r7, #16]
 800a6b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	4413      	add	r3, r2
 800a6ca:	613b      	str	r3, [r7, #16]
 800a6cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	00da      	lsls	r2, r3, #3
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	4413      	add	r3, r2
 800a6de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a6e2:	60fb      	str	r3, [r7, #12]
 800a6e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6e8:	b29a      	uxth	r2, r3
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	801a      	strh	r2, [r3, #0]
 800a6ee:	f000 bde3 	b.w	800b2b8 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a6f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	78db      	ldrb	r3, [r3, #3]
 800a6fe:	2b02      	cmp	r3, #2
 800a700:	f040 843a 	bne.w	800af78 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	6a1a      	ldr	r2, [r3, #32]
 800a710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	691b      	ldr	r3, [r3, #16]
 800a71c:	429a      	cmp	r2, r3
 800a71e:	f240 83b7 	bls.w	800ae90 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a726:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a72a:	681a      	ldr	r2, [r3, #0]
 800a72c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a730:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	781b      	ldrb	r3, [r3, #0]
 800a738:	009b      	lsls	r3, r3, #2
 800a73a:	4413      	add	r3, r2
 800a73c:	881b      	ldrh	r3, [r3, #0]
 800a73e:	b29b      	uxth	r3, r3
 800a740:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a748:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a74c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a750:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a75a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	781b      	ldrb	r3, [r3, #0]
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	441a      	add	r2, r3
 800a766:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a76a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a76e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a772:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a77a:	b29b      	uxth	r3, r3
 800a77c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a77e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a782:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	6a1a      	ldr	r2, [r3, #32]
 800a78a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a78e:	1ad2      	subs	r2, r2, r3
 800a790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a79c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	009b      	lsls	r3, r3, #2
 800a7b4:	4413      	add	r3, r2
 800a7b6:	881b      	ldrh	r3, [r3, #0]
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	f000 81b3 	beq.w	800ab2a <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a7c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	633b      	str	r3, [r7, #48]	; 0x30
 800a7d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	785b      	ldrb	r3, [r3, #1]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d16d      	bne.n	800a8bc <USB_EPStartXfer+0x2ba>
 800a7e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a800:	4413      	add	r3, r2
 800a802:	62bb      	str	r3, [r7, #40]	; 0x28
 800a804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a808:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	781b      	ldrb	r3, [r3, #0]
 800a810:	00da      	lsls	r2, r3, #3
 800a812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a814:	4413      	add	r3, r2
 800a816:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a81a:	627b      	str	r3, [r7, #36]	; 0x24
 800a81c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a820:	2b3e      	cmp	r3, #62	; 0x3e
 800a822:	d91c      	bls.n	800a85e <USB_EPStartXfer+0x25c>
 800a824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a828:	095b      	lsrs	r3, r3, #5
 800a82a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a82e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a832:	f003 031f 	and.w	r3, r3, #31
 800a836:	2b00      	cmp	r3, #0
 800a838:	d104      	bne.n	800a844 <USB_EPStartXfer+0x242>
 800a83a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a83e:	3b01      	subs	r3, #1
 800a840:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a844:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a848:	b29b      	uxth	r3, r3
 800a84a:	029b      	lsls	r3, r3, #10
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a852:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a856:	b29a      	uxth	r2, r3
 800a858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a85a:	801a      	strh	r2, [r3, #0]
 800a85c:	e053      	b.n	800a906 <USB_EPStartXfer+0x304>
 800a85e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a862:	2b00      	cmp	r3, #0
 800a864:	d112      	bne.n	800a88c <USB_EPStartXfer+0x28a>
 800a866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a868:	881b      	ldrh	r3, [r3, #0]
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a870:	b29a      	uxth	r2, r3
 800a872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a874:	801a      	strh	r2, [r3, #0]
 800a876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a878:	881b      	ldrh	r3, [r3, #0]
 800a87a:	b29b      	uxth	r3, r3
 800a87c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a880:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a884:	b29a      	uxth	r2, r3
 800a886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a888:	801a      	strh	r2, [r3, #0]
 800a88a:	e03c      	b.n	800a906 <USB_EPStartXfer+0x304>
 800a88c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a890:	085b      	lsrs	r3, r3, #1
 800a892:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a89a:	f003 0301 	and.w	r3, r3, #1
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d004      	beq.n	800a8ac <USB_EPStartXfer+0x2aa>
 800a8a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a8ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	029b      	lsls	r3, r3, #10
 800a8b4:	b29a      	uxth	r2, r3
 800a8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b8:	801a      	strh	r2, [r3, #0]
 800a8ba:	e024      	b.n	800a906 <USB_EPStartXfer+0x304>
 800a8bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	785b      	ldrb	r3, [r3, #1]
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d11c      	bne.n	800a906 <USB_EPStartXfer+0x304>
 800a8cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	461a      	mov	r2, r3
 800a8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e0:	4413      	add	r3, r2
 800a8e2:	633b      	str	r3, [r7, #48]	; 0x30
 800a8e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	00da      	lsls	r2, r3, #3
 800a8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f4:	4413      	add	r3, r2
 800a8f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a8fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a8fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a900:	b29a      	uxth	r2, r3
 800a902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a904:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a90a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	895b      	ldrh	r3, [r3, #10]
 800a912:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a91a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	6959      	ldr	r1, [r3, #20]
 800a922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a926:	b29b      	uxth	r3, r3
 800a928:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a92c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a930:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a934:	6800      	ldr	r0, [r0, #0]
 800a936:	f001 fad4 	bl	800bee2 <USB_WritePMA>
            ep->xfer_buff += len;
 800a93a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a93e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	695a      	ldr	r2, [r3, #20]
 800a946:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a94a:	441a      	add	r2, r3
 800a94c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a95c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	6a1a      	ldr	r2, [r3, #32]
 800a964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	691b      	ldr	r3, [r3, #16]
 800a970:	429a      	cmp	r2, r3
 800a972:	d90f      	bls.n	800a994 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800a974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	6a1a      	ldr	r2, [r3, #32]
 800a980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a984:	1ad2      	subs	r2, r2, r3
 800a986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a98a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	621a      	str	r2, [r3, #32]
 800a992:	e00e      	b.n	800a9b2 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800a994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a998:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	6a1b      	ldr	r3, [r3, #32]
 800a9a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a9a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a9b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	785b      	ldrb	r3, [r3, #1]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d16d      	bne.n	800aa9e <USB_EPStartXfer+0x49c>
 800a9c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	61bb      	str	r3, [r7, #24]
 800a9ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	461a      	mov	r2, r3
 800a9e0:	69bb      	ldr	r3, [r7, #24]
 800a9e2:	4413      	add	r3, r2
 800a9e4:	61bb      	str	r3, [r7, #24]
 800a9e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	00da      	lsls	r2, r3, #3
 800a9f4:	69bb      	ldr	r3, [r7, #24]
 800a9f6:	4413      	add	r3, r2
 800a9f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a9fc:	617b      	str	r3, [r7, #20]
 800a9fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa02:	2b3e      	cmp	r3, #62	; 0x3e
 800aa04:	d91c      	bls.n	800aa40 <USB_EPStartXfer+0x43e>
 800aa06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa0a:	095b      	lsrs	r3, r3, #5
 800aa0c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aa10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa14:	f003 031f 	and.w	r3, r3, #31
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d104      	bne.n	800aa26 <USB_EPStartXfer+0x424>
 800aa1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa20:	3b01      	subs	r3, #1
 800aa22:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aa26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	029b      	lsls	r3, r3, #10
 800aa2e:	b29b      	uxth	r3, r3
 800aa30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa38:	b29a      	uxth	r2, r3
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	801a      	strh	r2, [r3, #0]
 800aa3e:	e059      	b.n	800aaf4 <USB_EPStartXfer+0x4f2>
 800aa40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d112      	bne.n	800aa6e <USB_EPStartXfer+0x46c>
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	881b      	ldrh	r3, [r3, #0]
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aa52:	b29a      	uxth	r2, r3
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	801a      	strh	r2, [r3, #0]
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	881b      	ldrh	r3, [r3, #0]
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa66:	b29a      	uxth	r2, r3
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	801a      	strh	r2, [r3, #0]
 800aa6c:	e042      	b.n	800aaf4 <USB_EPStartXfer+0x4f2>
 800aa6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa72:	085b      	lsrs	r3, r3, #1
 800aa74:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aa78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa7c:	f003 0301 	and.w	r3, r3, #1
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d004      	beq.n	800aa8e <USB_EPStartXfer+0x48c>
 800aa84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa88:	3301      	adds	r3, #1
 800aa8a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aa8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa92:	b29b      	uxth	r3, r3
 800aa94:	029b      	lsls	r3, r3, #10
 800aa96:	b29a      	uxth	r2, r3
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	801a      	strh	r2, [r3, #0]
 800aa9c:	e02a      	b.n	800aaf4 <USB_EPStartXfer+0x4f2>
 800aa9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	785b      	ldrb	r3, [r3, #1]
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d122      	bne.n	800aaf4 <USB_EPStartXfer+0x4f2>
 800aaae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aab2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	623b      	str	r3, [r7, #32]
 800aaba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aabe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	461a      	mov	r2, r3
 800aacc:	6a3b      	ldr	r3, [r7, #32]
 800aace:	4413      	add	r3, r2
 800aad0:	623b      	str	r3, [r7, #32]
 800aad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aad6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	00da      	lsls	r2, r3, #3
 800aae0:	6a3b      	ldr	r3, [r7, #32]
 800aae2:	4413      	add	r3, r2
 800aae4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aae8:	61fb      	str	r3, [r7, #28]
 800aaea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaee:	b29a      	uxth	r2, r3
 800aaf0:	69fb      	ldr	r3, [r7, #28]
 800aaf2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800aaf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	891b      	ldrh	r3, [r3, #8]
 800ab00:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	6959      	ldr	r1, [r3, #20]
 800ab10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab14:	b29b      	uxth	r3, r3
 800ab16:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ab1a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ab1e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ab22:	6800      	ldr	r0, [r0, #0]
 800ab24:	f001 f9dd 	bl	800bee2 <USB_WritePMA>
 800ab28:	e3c6      	b.n	800b2b8 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ab2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	785b      	ldrb	r3, [r3, #1]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d16d      	bne.n	800ac16 <USB_EPStartXfer+0x614>
 800ab3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	461a      	mov	r2, r3
 800ab58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab5a:	4413      	add	r3, r2
 800ab5c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	00da      	lsls	r2, r3, #3
 800ab6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab6e:	4413      	add	r3, r2
 800ab70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ab74:	647b      	str	r3, [r7, #68]	; 0x44
 800ab76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab7a:	2b3e      	cmp	r3, #62	; 0x3e
 800ab7c:	d91c      	bls.n	800abb8 <USB_EPStartXfer+0x5b6>
 800ab7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab82:	095b      	lsrs	r3, r3, #5
 800ab84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ab88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab8c:	f003 031f 	and.w	r3, r3, #31
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d104      	bne.n	800ab9e <USB_EPStartXfer+0x59c>
 800ab94:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ab98:	3b01      	subs	r3, #1
 800ab9a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ab9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	029b      	lsls	r3, r3, #10
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abb0:	b29a      	uxth	r2, r3
 800abb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abb4:	801a      	strh	r2, [r3, #0]
 800abb6:	e059      	b.n	800ac6c <USB_EPStartXfer+0x66a>
 800abb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d112      	bne.n	800abe6 <USB_EPStartXfer+0x5e4>
 800abc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abc2:	881b      	ldrh	r3, [r3, #0]
 800abc4:	b29b      	uxth	r3, r3
 800abc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800abca:	b29a      	uxth	r2, r3
 800abcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abce:	801a      	strh	r2, [r3, #0]
 800abd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abd2:	881b      	ldrh	r3, [r3, #0]
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abde:	b29a      	uxth	r2, r3
 800abe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abe2:	801a      	strh	r2, [r3, #0]
 800abe4:	e042      	b.n	800ac6c <USB_EPStartXfer+0x66a>
 800abe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abea:	085b      	lsrs	r3, r3, #1
 800abec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800abf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abf4:	f003 0301 	and.w	r3, r3, #1
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d004      	beq.n	800ac06 <USB_EPStartXfer+0x604>
 800abfc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ac00:	3301      	adds	r3, #1
 800ac02:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ac06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	029b      	lsls	r3, r3, #10
 800ac0e:	b29a      	uxth	r2, r3
 800ac10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac12:	801a      	strh	r2, [r3, #0]
 800ac14:	e02a      	b.n	800ac6c <USB_EPStartXfer+0x66a>
 800ac16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	785b      	ldrb	r3, [r3, #1]
 800ac22:	2b01      	cmp	r3, #1
 800ac24:	d122      	bne.n	800ac6c <USB_EPStartXfer+0x66a>
 800ac26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	653b      	str	r3, [r7, #80]	; 0x50
 800ac32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	461a      	mov	r2, r3
 800ac44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac46:	4413      	add	r3, r2
 800ac48:	653b      	str	r3, [r7, #80]	; 0x50
 800ac4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	00da      	lsls	r2, r3, #3
 800ac58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac5a:	4413      	add	r3, r2
 800ac5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ac60:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac66:	b29a      	uxth	r2, r3
 800ac68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac6a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ac6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	891b      	ldrh	r3, [r3, #8]
 800ac78:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ac7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	6959      	ldr	r1, [r3, #20]
 800ac88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ac92:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ac96:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ac9a:	6800      	ldr	r0, [r0, #0]
 800ac9c:	f001 f921 	bl	800bee2 <USB_WritePMA>
            ep->xfer_buff += len;
 800aca0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aca4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	695a      	ldr	r2, [r3, #20]
 800acac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acb0:	441a      	add	r2, r3
 800acb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800acbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	6a1a      	ldr	r2, [r3, #32]
 800acca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	691b      	ldr	r3, [r3, #16]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d90f      	bls.n	800acfa <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800acda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	6a1a      	ldr	r2, [r3, #32]
 800ace6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acea:	1ad2      	subs	r2, r2, r3
 800acec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	621a      	str	r2, [r3, #32]
 800acf8:	e00e      	b.n	800ad18 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800acfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	6a1b      	ldr	r3, [r3, #32]
 800ad06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800ad0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	2200      	movs	r2, #0
 800ad16:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ad18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	643b      	str	r3, [r7, #64]	; 0x40
 800ad24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	785b      	ldrb	r3, [r3, #1]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d16d      	bne.n	800ae10 <USB_EPStartXfer+0x80e>
 800ad34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad4e:	b29b      	uxth	r3, r3
 800ad50:	461a      	mov	r2, r3
 800ad52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad54:	4413      	add	r3, r2
 800ad56:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	00da      	lsls	r2, r3, #3
 800ad66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad68:	4413      	add	r3, r2
 800ad6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ad6e:	637b      	str	r3, [r7, #52]	; 0x34
 800ad70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad74:	2b3e      	cmp	r3, #62	; 0x3e
 800ad76:	d91c      	bls.n	800adb2 <USB_EPStartXfer+0x7b0>
 800ad78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad7c:	095b      	lsrs	r3, r3, #5
 800ad7e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ad82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad86:	f003 031f 	and.w	r3, r3, #31
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d104      	bne.n	800ad98 <USB_EPStartXfer+0x796>
 800ad8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad92:	3b01      	subs	r3, #1
 800ad94:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ad98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad9c:	b29b      	uxth	r3, r3
 800ad9e:	029b      	lsls	r3, r3, #10
 800ada0:	b29b      	uxth	r3, r3
 800ada2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ada6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adaa:	b29a      	uxth	r2, r3
 800adac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adae:	801a      	strh	r2, [r3, #0]
 800adb0:	e053      	b.n	800ae5a <USB_EPStartXfer+0x858>
 800adb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d112      	bne.n	800ade0 <USB_EPStartXfer+0x7de>
 800adba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adbc:	881b      	ldrh	r3, [r3, #0]
 800adbe:	b29b      	uxth	r3, r3
 800adc0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800adc4:	b29a      	uxth	r2, r3
 800adc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adc8:	801a      	strh	r2, [r3, #0]
 800adca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adcc:	881b      	ldrh	r3, [r3, #0]
 800adce:	b29b      	uxth	r3, r3
 800add0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800add4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800add8:	b29a      	uxth	r2, r3
 800adda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800addc:	801a      	strh	r2, [r3, #0]
 800adde:	e03c      	b.n	800ae5a <USB_EPStartXfer+0x858>
 800ade0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ade4:	085b      	lsrs	r3, r3, #1
 800ade6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800adea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adee:	f003 0301 	and.w	r3, r3, #1
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d004      	beq.n	800ae00 <USB_EPStartXfer+0x7fe>
 800adf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adfa:	3301      	adds	r3, #1
 800adfc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ae00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	029b      	lsls	r3, r3, #10
 800ae08:	b29a      	uxth	r2, r3
 800ae0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae0c:	801a      	strh	r2, [r3, #0]
 800ae0e:	e024      	b.n	800ae5a <USB_EPStartXfer+0x858>
 800ae10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	785b      	ldrb	r3, [r3, #1]
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d11c      	bne.n	800ae5a <USB_EPStartXfer+0x858>
 800ae20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	461a      	mov	r2, r3
 800ae32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae34:	4413      	add	r3, r2
 800ae36:	643b      	str	r3, [r7, #64]	; 0x40
 800ae38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	00da      	lsls	r2, r3, #3
 800ae46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae48:	4413      	add	r3, r2
 800ae4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ae4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae54:	b29a      	uxth	r2, r3
 800ae56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae58:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ae5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	895b      	ldrh	r3, [r3, #10]
 800ae66:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	6959      	ldr	r1, [r3, #20]
 800ae76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae7a:	b29b      	uxth	r3, r3
 800ae7c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ae80:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ae84:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ae88:	6800      	ldr	r0, [r0, #0]
 800ae8a:	f001 f82a 	bl	800bee2 <USB_WritePMA>
 800ae8e:	e213      	b.n	800b2b8 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ae90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	6a1b      	ldr	r3, [r3, #32]
 800ae9c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800aea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aea4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aea8:	681a      	ldr	r2, [r3, #0]
 800aeaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	009b      	lsls	r3, r3, #2
 800aeb8:	4413      	add	r3, r2
 800aeba:	881b      	ldrh	r3, [r3, #0]
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800aec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aec6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800aeca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aece:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aed8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	009b      	lsls	r3, r3, #2
 800aee2:	441a      	add	r2, r3
 800aee4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800aee8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aeec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aef8:	b29b      	uxth	r3, r3
 800aefa:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800aefc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af16:	b29b      	uxth	r3, r3
 800af18:	461a      	mov	r2, r3
 800af1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af1c:	4413      	add	r3, r2
 800af1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	00da      	lsls	r2, r3, #3
 800af2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af30:	4413      	add	r3, r2
 800af32:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800af36:	65bb      	str	r3, [r7, #88]	; 0x58
 800af38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af3c:	b29a      	uxth	r2, r3
 800af3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800af40:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800af42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	891b      	ldrh	r3, [r3, #8]
 800af4e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800af52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	6959      	ldr	r1, [r3, #20]
 800af5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af62:	b29b      	uxth	r3, r3
 800af64:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800af68:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800af6c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800af70:	6800      	ldr	r0, [r0, #0]
 800af72:	f000 ffb6 	bl	800bee2 <USB_WritePMA>
 800af76:	e19f      	b.n	800b2b8 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800af78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	6a1a      	ldr	r2, [r3, #32]
 800af84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af88:	1ad2      	subs	r2, r2, r3
 800af8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800af96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af9e:	681a      	ldr	r2, [r3, #0]
 800afa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	009b      	lsls	r3, r3, #2
 800afae:	4413      	add	r3, r2
 800afb0:	881b      	ldrh	r3, [r3, #0]
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afb8:	2b00      	cmp	r3, #0
 800afba:	f000 80bc 	beq.w	800b136 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800afbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	673b      	str	r3, [r7, #112]	; 0x70
 800afca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	785b      	ldrb	r3, [r3, #1]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d16d      	bne.n	800b0b6 <USB_EPStartXfer+0xab4>
 800afda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	66bb      	str	r3, [r7, #104]	; 0x68
 800afe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	461a      	mov	r2, r3
 800aff8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800affa:	4413      	add	r3, r2
 800affc:	66bb      	str	r3, [r7, #104]	; 0x68
 800affe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b002:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	00da      	lsls	r2, r3, #3
 800b00c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b00e:	4413      	add	r3, r2
 800b010:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b014:	667b      	str	r3, [r7, #100]	; 0x64
 800b016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b01a:	2b3e      	cmp	r3, #62	; 0x3e
 800b01c:	d91c      	bls.n	800b058 <USB_EPStartXfer+0xa56>
 800b01e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b022:	095b      	lsrs	r3, r3, #5
 800b024:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b02c:	f003 031f 	and.w	r3, r3, #31
 800b030:	2b00      	cmp	r3, #0
 800b032:	d104      	bne.n	800b03e <USB_EPStartXfer+0xa3c>
 800b034:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b038:	3b01      	subs	r3, #1
 800b03a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b03e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b042:	b29b      	uxth	r3, r3
 800b044:	029b      	lsls	r3, r3, #10
 800b046:	b29b      	uxth	r3, r3
 800b048:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b04c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b050:	b29a      	uxth	r2, r3
 800b052:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b054:	801a      	strh	r2, [r3, #0]
 800b056:	e053      	b.n	800b100 <USB_EPStartXfer+0xafe>
 800b058:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d112      	bne.n	800b086 <USB_EPStartXfer+0xa84>
 800b060:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b062:	881b      	ldrh	r3, [r3, #0]
 800b064:	b29b      	uxth	r3, r3
 800b066:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b06a:	b29a      	uxth	r2, r3
 800b06c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b06e:	801a      	strh	r2, [r3, #0]
 800b070:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b072:	881b      	ldrh	r3, [r3, #0]
 800b074:	b29b      	uxth	r3, r3
 800b076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b07a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b07e:	b29a      	uxth	r2, r3
 800b080:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b082:	801a      	strh	r2, [r3, #0]
 800b084:	e03c      	b.n	800b100 <USB_EPStartXfer+0xafe>
 800b086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b08a:	085b      	lsrs	r3, r3, #1
 800b08c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b094:	f003 0301 	and.w	r3, r3, #1
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d004      	beq.n	800b0a6 <USB_EPStartXfer+0xaa4>
 800b09c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b0a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	029b      	lsls	r3, r3, #10
 800b0ae:	b29a      	uxth	r2, r3
 800b0b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b0b2:	801a      	strh	r2, [r3, #0]
 800b0b4:	e024      	b.n	800b100 <USB_EPStartXfer+0xafe>
 800b0b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	785b      	ldrb	r3, [r3, #1]
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d11c      	bne.n	800b100 <USB_EPStartXfer+0xafe>
 800b0c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b0da:	4413      	add	r3, r2
 800b0dc:	673b      	str	r3, [r7, #112]	; 0x70
 800b0de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	00da      	lsls	r2, r3, #3
 800b0ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b0ee:	4413      	add	r3, r2
 800b0f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b0f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b0f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0fa:	b29a      	uxth	r2, r3
 800b0fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0fe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	895b      	ldrh	r3, [r3, #10]
 800b10c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	6959      	ldr	r1, [r3, #20]
 800b11c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b120:	b29b      	uxth	r3, r3
 800b122:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b126:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b12a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b12e:	6800      	ldr	r0, [r0, #0]
 800b130:	f000 fed7 	bl	800bee2 <USB_WritePMA>
 800b134:	e0c0      	b.n	800b2b8 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b13a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	785b      	ldrb	r3, [r3, #1]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d16d      	bne.n	800b222 <USB_EPStartXfer+0xc20>
 800b146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b14a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b156:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b160:	b29b      	uxth	r3, r3
 800b162:	461a      	mov	r2, r3
 800b164:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b166:	4413      	add	r3, r2
 800b168:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b16a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b16e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	781b      	ldrb	r3, [r3, #0]
 800b176:	00da      	lsls	r2, r3, #3
 800b178:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b17a:	4413      	add	r3, r2
 800b17c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b180:	67bb      	str	r3, [r7, #120]	; 0x78
 800b182:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b186:	2b3e      	cmp	r3, #62	; 0x3e
 800b188:	d91c      	bls.n	800b1c4 <USB_EPStartXfer+0xbc2>
 800b18a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b18e:	095b      	lsrs	r3, r3, #5
 800b190:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b194:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b198:	f003 031f 	and.w	r3, r3, #31
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d104      	bne.n	800b1aa <USB_EPStartXfer+0xba8>
 800b1a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b1a4:	3b01      	subs	r3, #1
 800b1a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b1aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b1ae:	b29b      	uxth	r3, r3
 800b1b0:	029b      	lsls	r3, r3, #10
 800b1b2:	b29b      	uxth	r3, r3
 800b1b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1bc:	b29a      	uxth	r2, r3
 800b1be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b1c0:	801a      	strh	r2, [r3, #0]
 800b1c2:	e05f      	b.n	800b284 <USB_EPStartXfer+0xc82>
 800b1c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d112      	bne.n	800b1f2 <USB_EPStartXfer+0xbf0>
 800b1cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b1ce:	881b      	ldrh	r3, [r3, #0]
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b1d6:	b29a      	uxth	r2, r3
 800b1d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b1da:	801a      	strh	r2, [r3, #0]
 800b1dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b1de:	881b      	ldrh	r3, [r3, #0]
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1ea:	b29a      	uxth	r2, r3
 800b1ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b1ee:	801a      	strh	r2, [r3, #0]
 800b1f0:	e048      	b.n	800b284 <USB_EPStartXfer+0xc82>
 800b1f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1f6:	085b      	lsrs	r3, r3, #1
 800b1f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b1fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b200:	f003 0301 	and.w	r3, r3, #1
 800b204:	2b00      	cmp	r3, #0
 800b206:	d004      	beq.n	800b212 <USB_EPStartXfer+0xc10>
 800b208:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b20c:	3301      	adds	r3, #1
 800b20e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b212:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b216:	b29b      	uxth	r3, r3
 800b218:	029b      	lsls	r3, r3, #10
 800b21a:	b29a      	uxth	r2, r3
 800b21c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b21e:	801a      	strh	r2, [r3, #0]
 800b220:	e030      	b.n	800b284 <USB_EPStartXfer+0xc82>
 800b222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	785b      	ldrb	r3, [r3, #1]
 800b22e:	2b01      	cmp	r3, #1
 800b230:	d128      	bne.n	800b284 <USB_EPStartXfer+0xc82>
 800b232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b236:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b244:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b24e:	b29b      	uxth	r3, r3
 800b250:	461a      	mov	r2, r3
 800b252:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b256:	4413      	add	r3, r2
 800b258:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b25c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	00da      	lsls	r2, r3, #3
 800b26a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b26e:	4413      	add	r3, r2
 800b270:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b274:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b27c:	b29a      	uxth	r2, r3
 800b27e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b282:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	891b      	ldrh	r3, [r3, #8]
 800b290:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b298:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	6959      	ldr	r1, [r3, #20]
 800b2a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2a4:	b29b      	uxth	r3, r3
 800b2a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b2aa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b2ae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b2b2:	6800      	ldr	r0, [r0, #0]
 800b2b4:	f000 fe15 	bl	800bee2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b2b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2c0:	681a      	ldr	r2, [r3, #0]
 800b2c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	781b      	ldrb	r3, [r3, #0]
 800b2ce:	009b      	lsls	r3, r3, #2
 800b2d0:	4413      	add	r3, r2
 800b2d2:	881b      	ldrh	r3, [r3, #0]
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2de:	817b      	strh	r3, [r7, #10]
 800b2e0:	897b      	ldrh	r3, [r7, #10]
 800b2e2:	f083 0310 	eor.w	r3, r3, #16
 800b2e6:	817b      	strh	r3, [r7, #10]
 800b2e8:	897b      	ldrh	r3, [r7, #10]
 800b2ea:	f083 0320 	eor.w	r3, r3, #32
 800b2ee:	817b      	strh	r3, [r7, #10]
 800b2f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2f8:	681a      	ldr	r2, [r3, #0]
 800b2fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	441a      	add	r2, r3
 800b30a:	897b      	ldrh	r3, [r7, #10]
 800b30c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	8013      	strh	r3, [r2, #0]
 800b320:	f000 bc9f 	b.w	800bc62 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	7b1b      	ldrb	r3, [r3, #12]
 800b330:	2b00      	cmp	r3, #0
 800b332:	f040 80ae 	bne.w	800b492 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b33a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	699a      	ldr	r2, [r3, #24]
 800b342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	691b      	ldr	r3, [r3, #16]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d917      	bls.n	800b382 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800b352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b356:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	691b      	ldr	r3, [r3, #16]
 800b35e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800b362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b366:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	699a      	ldr	r2, [r3, #24]
 800b36e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b372:	1ad2      	subs	r2, r2, r3
 800b374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b378:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	619a      	str	r2, [r3, #24]
 800b380:	e00e      	b.n	800b3a0 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800b382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b386:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	699b      	ldr	r3, [r3, #24]
 800b38e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800b392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b396:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	2200      	movs	r2, #0
 800b39e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b3a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b3ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	461a      	mov	r2, r3
 800b3c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b3c4:	4413      	add	r3, r2
 800b3c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b3ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	781b      	ldrb	r3, [r3, #0]
 800b3d6:	00da      	lsls	r2, r3, #3
 800b3d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b3dc:	4413      	add	r3, r2
 800b3de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b3e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b3e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ea:	2b3e      	cmp	r3, #62	; 0x3e
 800b3ec:	d91d      	bls.n	800b42a <USB_EPStartXfer+0xe28>
 800b3ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3f2:	095b      	lsrs	r3, r3, #5
 800b3f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b3f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3fc:	f003 031f 	and.w	r3, r3, #31
 800b400:	2b00      	cmp	r3, #0
 800b402:	d104      	bne.n	800b40e <USB_EPStartXfer+0xe0c>
 800b404:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b408:	3b01      	subs	r3, #1
 800b40a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b40e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b412:	b29b      	uxth	r3, r3
 800b414:	029b      	lsls	r3, r3, #10
 800b416:	b29b      	uxth	r3, r3
 800b418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b41c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b420:	b29a      	uxth	r2, r3
 800b422:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b426:	801a      	strh	r2, [r3, #0]
 800b428:	e3e1      	b.n	800bbee <USB_EPStartXfer+0x15ec>
 800b42a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d116      	bne.n	800b460 <USB_EPStartXfer+0xe5e>
 800b432:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b436:	881b      	ldrh	r3, [r3, #0]
 800b438:	b29b      	uxth	r3, r3
 800b43a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b43e:	b29a      	uxth	r2, r3
 800b440:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b444:	801a      	strh	r2, [r3, #0]
 800b446:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b44a:	881b      	ldrh	r3, [r3, #0]
 800b44c:	b29b      	uxth	r3, r3
 800b44e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b452:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b456:	b29a      	uxth	r2, r3
 800b458:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b45c:	801a      	strh	r2, [r3, #0]
 800b45e:	e3c6      	b.n	800bbee <USB_EPStartXfer+0x15ec>
 800b460:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b464:	085b      	lsrs	r3, r3, #1
 800b466:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b46a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b46e:	f003 0301 	and.w	r3, r3, #1
 800b472:	2b00      	cmp	r3, #0
 800b474:	d004      	beq.n	800b480 <USB_EPStartXfer+0xe7e>
 800b476:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b47a:	3301      	adds	r3, #1
 800b47c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b480:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b484:	b29b      	uxth	r3, r3
 800b486:	029b      	lsls	r3, r3, #10
 800b488:	b29a      	uxth	r2, r3
 800b48a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b48e:	801a      	strh	r2, [r3, #0]
 800b490:	e3ad      	b.n	800bbee <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	78db      	ldrb	r3, [r3, #3]
 800b49e:	2b02      	cmp	r3, #2
 800b4a0:	f040 8200 	bne.w	800b8a4 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b4a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	785b      	ldrb	r3, [r3, #1]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	f040 8091 	bne.w	800b5d8 <USB_EPStartXfer+0xfd6>
 800b4b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b4c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4d2:	b29b      	uxth	r3, r3
 800b4d4:	461a      	mov	r2, r3
 800b4d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b4da:	4413      	add	r3, r2
 800b4dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b4e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	00da      	lsls	r2, r3, #3
 800b4ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b4f2:	4413      	add	r3, r2
 800b4f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b4f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b4fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b500:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	691b      	ldr	r3, [r3, #16]
 800b508:	2b3e      	cmp	r3, #62	; 0x3e
 800b50a:	d925      	bls.n	800b558 <USB_EPStartXfer+0xf56>
 800b50c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	691b      	ldr	r3, [r3, #16]
 800b518:	095b      	lsrs	r3, r3, #5
 800b51a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b51e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b522:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	691b      	ldr	r3, [r3, #16]
 800b52a:	f003 031f 	and.w	r3, r3, #31
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d104      	bne.n	800b53c <USB_EPStartXfer+0xf3a>
 800b532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b536:	3b01      	subs	r3, #1
 800b538:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b53c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b540:	b29b      	uxth	r3, r3
 800b542:	029b      	lsls	r3, r3, #10
 800b544:	b29b      	uxth	r3, r3
 800b546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b54a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b54e:	b29a      	uxth	r2, r3
 800b550:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b554:	801a      	strh	r2, [r3, #0]
 800b556:	e074      	b.n	800b642 <USB_EPStartXfer+0x1040>
 800b558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b55c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	691b      	ldr	r3, [r3, #16]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d116      	bne.n	800b596 <USB_EPStartXfer+0xf94>
 800b568:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b56c:	881b      	ldrh	r3, [r3, #0]
 800b56e:	b29b      	uxth	r3, r3
 800b570:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b574:	b29a      	uxth	r2, r3
 800b576:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b57a:	801a      	strh	r2, [r3, #0]
 800b57c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b580:	881b      	ldrh	r3, [r3, #0]
 800b582:	b29b      	uxth	r3, r3
 800b584:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b588:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b58c:	b29a      	uxth	r2, r3
 800b58e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b592:	801a      	strh	r2, [r3, #0]
 800b594:	e055      	b.n	800b642 <USB_EPStartXfer+0x1040>
 800b596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b59a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	691b      	ldr	r3, [r3, #16]
 800b5a2:	085b      	lsrs	r3, r3, #1
 800b5a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b5a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	691b      	ldr	r3, [r3, #16]
 800b5b4:	f003 0301 	and.w	r3, r3, #1
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d004      	beq.n	800b5c6 <USB_EPStartXfer+0xfc4>
 800b5bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b5c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	029b      	lsls	r3, r3, #10
 800b5ce:	b29a      	uxth	r2, r3
 800b5d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b5d4:	801a      	strh	r2, [r3, #0]
 800b5d6:	e034      	b.n	800b642 <USB_EPStartXfer+0x1040>
 800b5d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	785b      	ldrb	r3, [r3, #1]
 800b5e4:	2b01      	cmp	r3, #1
 800b5e6:	d12c      	bne.n	800b642 <USB_EPStartXfer+0x1040>
 800b5e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b5f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b604:	b29b      	uxth	r3, r3
 800b606:	461a      	mov	r2, r3
 800b608:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b60c:	4413      	add	r3, r2
 800b60e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	781b      	ldrb	r3, [r3, #0]
 800b61e:	00da      	lsls	r2, r3, #3
 800b620:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b624:	4413      	add	r3, r2
 800b626:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b62a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b62e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b632:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	691b      	ldr	r3, [r3, #16]
 800b63a:	b29a      	uxth	r2, r3
 800b63c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b640:	801a      	strh	r2, [r3, #0]
 800b642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b646:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b654:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	785b      	ldrb	r3, [r3, #1]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	f040 8091 	bne.w	800b784 <USB_EPStartXfer+0x1182>
 800b662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b666:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b674:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b67e:	b29b      	uxth	r3, r3
 800b680:	461a      	mov	r2, r3
 800b682:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b686:	4413      	add	r3, r2
 800b688:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b68c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b690:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	00da      	lsls	r2, r3, #3
 800b69a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b69e:	4413      	add	r3, r2
 800b6a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b6a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b6a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	691b      	ldr	r3, [r3, #16]
 800b6b4:	2b3e      	cmp	r3, #62	; 0x3e
 800b6b6:	d925      	bls.n	800b704 <USB_EPStartXfer+0x1102>
 800b6b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	691b      	ldr	r3, [r3, #16]
 800b6c4:	095b      	lsrs	r3, r3, #5
 800b6c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b6ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	691b      	ldr	r3, [r3, #16]
 800b6d6:	f003 031f 	and.w	r3, r3, #31
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d104      	bne.n	800b6e8 <USB_EPStartXfer+0x10e6>
 800b6de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6e2:	3b01      	subs	r3, #1
 800b6e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b6e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6ec:	b29b      	uxth	r3, r3
 800b6ee:	029b      	lsls	r3, r3, #10
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6fa:	b29a      	uxth	r2, r3
 800b6fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b700:	801a      	strh	r2, [r3, #0]
 800b702:	e06d      	b.n	800b7e0 <USB_EPStartXfer+0x11de>
 800b704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	691b      	ldr	r3, [r3, #16]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d116      	bne.n	800b742 <USB_EPStartXfer+0x1140>
 800b714:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b718:	881b      	ldrh	r3, [r3, #0]
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b720:	b29a      	uxth	r2, r3
 800b722:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b726:	801a      	strh	r2, [r3, #0]
 800b728:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b72c:	881b      	ldrh	r3, [r3, #0]
 800b72e:	b29b      	uxth	r3, r3
 800b730:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b734:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b738:	b29a      	uxth	r2, r3
 800b73a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b73e:	801a      	strh	r2, [r3, #0]
 800b740:	e04e      	b.n	800b7e0 <USB_EPStartXfer+0x11de>
 800b742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	691b      	ldr	r3, [r3, #16]
 800b74e:	085b      	lsrs	r3, r3, #1
 800b750:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b758:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	691b      	ldr	r3, [r3, #16]
 800b760:	f003 0301 	and.w	r3, r3, #1
 800b764:	2b00      	cmp	r3, #0
 800b766:	d004      	beq.n	800b772 <USB_EPStartXfer+0x1170>
 800b768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b76c:	3301      	adds	r3, #1
 800b76e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b776:	b29b      	uxth	r3, r3
 800b778:	029b      	lsls	r3, r3, #10
 800b77a:	b29a      	uxth	r2, r3
 800b77c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b780:	801a      	strh	r2, [r3, #0]
 800b782:	e02d      	b.n	800b7e0 <USB_EPStartXfer+0x11de>
 800b784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	785b      	ldrb	r3, [r3, #1]
 800b790:	2b01      	cmp	r3, #1
 800b792:	d125      	bne.n	800b7e0 <USB_EPStartXfer+0x11de>
 800b794:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b798:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b7aa:	4413      	add	r3, r2
 800b7ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b7b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	00da      	lsls	r2, r3, #3
 800b7be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b7c2:	4413      	add	r3, r2
 800b7c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b7c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b7cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	691b      	ldr	r3, [r3, #16]
 800b7d8:	b29a      	uxth	r2, r3
 800b7da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b7de:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b7e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	69db      	ldr	r3, [r3, #28]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	f000 81fe 	beq.w	800bbee <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b7f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7fa:	681a      	ldr	r2, [r3, #0]
 800b7fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	4413      	add	r3, r2
 800b80c:	881b      	ldrh	r3, [r3, #0]
 800b80e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b812:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d005      	beq.n	800b82a <USB_EPStartXfer+0x1228>
 800b81e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b826:	2b00      	cmp	r3, #0
 800b828:	d10d      	bne.n	800b846 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b82a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b82e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b832:	2b00      	cmp	r3, #0
 800b834:	f040 81db 	bne.w	800bbee <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b838:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b83c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b840:	2b00      	cmp	r3, #0
 800b842:	f040 81d4 	bne.w	800bbee <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b84a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b84e:	681a      	ldr	r2, [r3, #0]
 800b850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b854:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	009b      	lsls	r3, r3, #2
 800b85e:	4413      	add	r3, r2
 800b860:	881b      	ldrh	r3, [r3, #0]
 800b862:	b29b      	uxth	r3, r3
 800b864:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b86c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800b870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b874:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b878:	681a      	ldr	r2, [r3, #0]
 800b87a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b87e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	009b      	lsls	r3, r3, #2
 800b888:	441a      	add	r2, r3
 800b88a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b88e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b89a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b89e:	b29b      	uxth	r3, r3
 800b8a0:	8013      	strh	r3, [r2, #0]
 800b8a2:	e1a4      	b.n	800bbee <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b8a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	78db      	ldrb	r3, [r3, #3]
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	f040 819a 	bne.w	800bbea <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b8b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	699a      	ldr	r2, [r3, #24]
 800b8c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	691b      	ldr	r3, [r3, #16]
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d917      	bls.n	800b902 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800b8d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	691b      	ldr	r3, [r3, #16]
 800b8de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800b8e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	699a      	ldr	r2, [r3, #24]
 800b8ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8f2:	1ad2      	subs	r2, r2, r3
 800b8f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	619a      	str	r2, [r3, #24]
 800b900:	e00e      	b.n	800b920 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800b902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b906:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	699b      	ldr	r3, [r3, #24]
 800b90e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800b912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	2200      	movs	r2, #0
 800b91e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b924:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	785b      	ldrb	r3, [r3, #1]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d178      	bne.n	800ba22 <USB_EPStartXfer+0x1420>
 800b930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b934:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b93e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b942:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b94c:	b29b      	uxth	r3, r3
 800b94e:	461a      	mov	r2, r3
 800b950:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b954:	4413      	add	r3, r2
 800b956:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b95a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b95e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	00da      	lsls	r2, r3, #3
 800b968:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b96c:	4413      	add	r3, r2
 800b96e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b972:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b97a:	2b3e      	cmp	r3, #62	; 0x3e
 800b97c:	d91d      	bls.n	800b9ba <USB_EPStartXfer+0x13b8>
 800b97e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b982:	095b      	lsrs	r3, r3, #5
 800b984:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b98c:	f003 031f 	and.w	r3, r3, #31
 800b990:	2b00      	cmp	r3, #0
 800b992:	d104      	bne.n	800b99e <USB_EPStartXfer+0x139c>
 800b994:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b998:	3b01      	subs	r3, #1
 800b99a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b99e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	029b      	lsls	r3, r3, #10
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9b0:	b29a      	uxth	r2, r3
 800b9b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b9b6:	801a      	strh	r2, [r3, #0]
 800b9b8:	e064      	b.n	800ba84 <USB_EPStartXfer+0x1482>
 800b9ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d116      	bne.n	800b9f0 <USB_EPStartXfer+0x13ee>
 800b9c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b9c6:	881b      	ldrh	r3, [r3, #0]
 800b9c8:	b29b      	uxth	r3, r3
 800b9ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b9ce:	b29a      	uxth	r2, r3
 800b9d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b9d4:	801a      	strh	r2, [r3, #0]
 800b9d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b9da:	881b      	ldrh	r3, [r3, #0]
 800b9dc:	b29b      	uxth	r3, r3
 800b9de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9e6:	b29a      	uxth	r2, r3
 800b9e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b9ec:	801a      	strh	r2, [r3, #0]
 800b9ee:	e049      	b.n	800ba84 <USB_EPStartXfer+0x1482>
 800b9f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9f4:	085b      	lsrs	r3, r3, #1
 800b9f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b9fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9fe:	f003 0301 	and.w	r3, r3, #1
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d004      	beq.n	800ba10 <USB_EPStartXfer+0x140e>
 800ba06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba0a:	3301      	adds	r3, #1
 800ba0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ba10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	029b      	lsls	r3, r3, #10
 800ba18:	b29a      	uxth	r2, r3
 800ba1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ba1e:	801a      	strh	r2, [r3, #0]
 800ba20:	e030      	b.n	800ba84 <USB_EPStartXfer+0x1482>
 800ba22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	785b      	ldrb	r3, [r3, #1]
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d128      	bne.n	800ba84 <USB_EPStartXfer+0x1482>
 800ba32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ba40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba4e:	b29b      	uxth	r3, r3
 800ba50:	461a      	mov	r2, r3
 800ba52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ba56:	4413      	add	r3, r2
 800ba58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ba5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	00da      	lsls	r2, r3, #3
 800ba6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ba6e:	4413      	add	r3, r2
 800ba70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ba74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ba78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba7c:	b29a      	uxth	r2, r3
 800ba7e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ba82:	801a      	strh	r2, [r3, #0]
 800ba84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ba92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	785b      	ldrb	r3, [r3, #1]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d178      	bne.n	800bb94 <USB_EPStartXfer+0x1592>
 800baa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800baa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bab4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800babe:	b29b      	uxth	r3, r3
 800bac0:	461a      	mov	r2, r3
 800bac2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bac6:	4413      	add	r3, r2
 800bac8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bacc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bad0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	00da      	lsls	r2, r3, #3
 800bada:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bade:	4413      	add	r3, r2
 800bae0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bae4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baec:	2b3e      	cmp	r3, #62	; 0x3e
 800baee:	d91d      	bls.n	800bb2c <USB_EPStartXfer+0x152a>
 800baf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baf4:	095b      	lsrs	r3, r3, #5
 800baf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bafa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bafe:	f003 031f 	and.w	r3, r3, #31
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d104      	bne.n	800bb10 <USB_EPStartXfer+0x150e>
 800bb06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb0a:	3b01      	subs	r3, #1
 800bb0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bb10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	029b      	lsls	r3, r3, #10
 800bb18:	b29b      	uxth	r3, r3
 800bb1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb22:	b29a      	uxth	r2, r3
 800bb24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bb28:	801a      	strh	r2, [r3, #0]
 800bb2a:	e060      	b.n	800bbee <USB_EPStartXfer+0x15ec>
 800bb2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d116      	bne.n	800bb62 <USB_EPStartXfer+0x1560>
 800bb34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bb38:	881b      	ldrh	r3, [r3, #0]
 800bb3a:	b29b      	uxth	r3, r3
 800bb3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bb40:	b29a      	uxth	r2, r3
 800bb42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bb46:	801a      	strh	r2, [r3, #0]
 800bb48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bb4c:	881b      	ldrh	r3, [r3, #0]
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb58:	b29a      	uxth	r2, r3
 800bb5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bb5e:	801a      	strh	r2, [r3, #0]
 800bb60:	e045      	b.n	800bbee <USB_EPStartXfer+0x15ec>
 800bb62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb66:	085b      	lsrs	r3, r3, #1
 800bb68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bb6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb70:	f003 0301 	and.w	r3, r3, #1
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d004      	beq.n	800bb82 <USB_EPStartXfer+0x1580>
 800bb78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb7c:	3301      	adds	r3, #1
 800bb7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bb82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	029b      	lsls	r3, r3, #10
 800bb8a:	b29a      	uxth	r2, r3
 800bb8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bb90:	801a      	strh	r2, [r3, #0]
 800bb92:	e02c      	b.n	800bbee <USB_EPStartXfer+0x15ec>
 800bb94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	785b      	ldrb	r3, [r3, #1]
 800bba0:	2b01      	cmp	r3, #1
 800bba2:	d124      	bne.n	800bbee <USB_EPStartXfer+0x15ec>
 800bba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bba8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbb2:	b29b      	uxth	r3, r3
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bbba:	4413      	add	r3, r2
 800bbbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bbc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	781b      	ldrb	r3, [r3, #0]
 800bbcc:	00da      	lsls	r2, r3, #3
 800bbce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bbd2:	4413      	add	r3, r2
 800bbd4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bbd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bbdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbe0:	b29a      	uxth	r2, r3
 800bbe2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bbe6:	801a      	strh	r2, [r3, #0]
 800bbe8:	e001      	b.n	800bbee <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800bbea:	2301      	movs	r3, #1
 800bbec:	e03a      	b.n	800bc64 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bbee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbf6:	681a      	ldr	r2, [r3, #0]
 800bbf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	781b      	ldrb	r3, [r3, #0]
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	4413      	add	r3, r2
 800bc08:	881b      	ldrh	r3, [r3, #0]
 800bc0a:	b29b      	uxth	r3, r3
 800bc0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc14:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800bc18:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bc1c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bc20:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800bc24:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bc28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bc2c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800bc30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	009b      	lsls	r3, r3, #2
 800bc48:	441a      	add	r2, r3
 800bc4a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bc4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc5e:	b29b      	uxth	r3, r3
 800bc60:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bc62:	2300      	movs	r3, #0
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}

0800bc6e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bc6e:	b480      	push	{r7}
 800bc70:	b085      	sub	sp, #20
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
 800bc76:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	785b      	ldrb	r3, [r3, #1]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d020      	beq.n	800bcc2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	009b      	lsls	r3, r3, #2
 800bc88:	4413      	add	r3, r2
 800bc8a:	881b      	ldrh	r3, [r3, #0]
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc96:	81bb      	strh	r3, [r7, #12]
 800bc98:	89bb      	ldrh	r3, [r7, #12]
 800bc9a:	f083 0310 	eor.w	r3, r3, #16
 800bc9e:	81bb      	strh	r3, [r7, #12]
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	009b      	lsls	r3, r3, #2
 800bca8:	441a      	add	r2, r3
 800bcaa:	89bb      	ldrh	r3, [r7, #12]
 800bcac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bcb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bcb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bcb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcbc:	b29b      	uxth	r3, r3
 800bcbe:	8013      	strh	r3, [r2, #0]
 800bcc0:	e01f      	b.n	800bd02 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800bcc2:	687a      	ldr	r2, [r7, #4]
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	009b      	lsls	r3, r3, #2
 800bcca:	4413      	add	r3, r2
 800bccc:	881b      	ldrh	r3, [r3, #0]
 800bcce:	b29b      	uxth	r3, r3
 800bcd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bcd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcd8:	81fb      	strh	r3, [r7, #14]
 800bcda:	89fb      	ldrh	r3, [r7, #14]
 800bcdc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bce0:	81fb      	strh	r3, [r7, #14]
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	009b      	lsls	r3, r3, #2
 800bcea:	441a      	add	r2, r3
 800bcec:	89fb      	ldrh	r3, [r7, #14]
 800bcee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bcf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bcf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bcfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcfe:	b29b      	uxth	r3, r3
 800bd00:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bd02:	2300      	movs	r3, #0
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3714      	adds	r7, #20
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr

0800bd10 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b087      	sub	sp, #28
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	7b1b      	ldrb	r3, [r3, #12]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	f040 809d 	bne.w	800be5e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	785b      	ldrb	r3, [r3, #1]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d04c      	beq.n	800bdc6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	009b      	lsls	r3, r3, #2
 800bd34:	4413      	add	r3, r2
 800bd36:	881b      	ldrh	r3, [r3, #0]
 800bd38:	823b      	strh	r3, [r7, #16]
 800bd3a:	8a3b      	ldrh	r3, [r7, #16]
 800bd3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d01b      	beq.n	800bd7c <USB_EPClearStall+0x6c>
 800bd44:	687a      	ldr	r2, [r7, #4]
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	009b      	lsls	r3, r3, #2
 800bd4c:	4413      	add	r3, r2
 800bd4e:	881b      	ldrh	r3, [r3, #0]
 800bd50:	b29b      	uxth	r3, r3
 800bd52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd5a:	81fb      	strh	r3, [r7, #14]
 800bd5c:	687a      	ldr	r2, [r7, #4]
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	009b      	lsls	r3, r3, #2
 800bd64:	441a      	add	r2, r3
 800bd66:	89fb      	ldrh	r3, [r7, #14]
 800bd68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	78db      	ldrb	r3, [r3, #3]
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d06c      	beq.n	800be5e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bd84:	687a      	ldr	r2, [r7, #4]
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	781b      	ldrb	r3, [r3, #0]
 800bd8a:	009b      	lsls	r3, r3, #2
 800bd8c:	4413      	add	r3, r2
 800bd8e:	881b      	ldrh	r3, [r3, #0]
 800bd90:	b29b      	uxth	r3, r3
 800bd92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd9a:	81bb      	strh	r3, [r7, #12]
 800bd9c:	89bb      	ldrh	r3, [r7, #12]
 800bd9e:	f083 0320 	eor.w	r3, r3, #32
 800bda2:	81bb      	strh	r3, [r7, #12]
 800bda4:	687a      	ldr	r2, [r7, #4]
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	009b      	lsls	r3, r3, #2
 800bdac:	441a      	add	r2, r3
 800bdae:	89bb      	ldrh	r3, [r7, #12]
 800bdb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bdb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bdb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bdbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdc0:	b29b      	uxth	r3, r3
 800bdc2:	8013      	strh	r3, [r2, #0]
 800bdc4:	e04b      	b.n	800be5e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bdc6:	687a      	ldr	r2, [r7, #4]
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	009b      	lsls	r3, r3, #2
 800bdce:	4413      	add	r3, r2
 800bdd0:	881b      	ldrh	r3, [r3, #0]
 800bdd2:	82fb      	strh	r3, [r7, #22]
 800bdd4:	8afb      	ldrh	r3, [r7, #22]
 800bdd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d01b      	beq.n	800be16 <USB_EPClearStall+0x106>
 800bdde:	687a      	ldr	r2, [r7, #4]
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	781b      	ldrb	r3, [r3, #0]
 800bde4:	009b      	lsls	r3, r3, #2
 800bde6:	4413      	add	r3, r2
 800bde8:	881b      	ldrh	r3, [r3, #0]
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bdf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdf4:	82bb      	strh	r3, [r7, #20]
 800bdf6:	687a      	ldr	r2, [r7, #4]
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	781b      	ldrb	r3, [r3, #0]
 800bdfc:	009b      	lsls	r3, r3, #2
 800bdfe:	441a      	add	r2, r3
 800be00:	8abb      	ldrh	r3, [r7, #20]
 800be02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800be0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be12:	b29b      	uxth	r3, r3
 800be14:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800be16:	687a      	ldr	r2, [r7, #4]
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	009b      	lsls	r3, r3, #2
 800be1e:	4413      	add	r3, r2
 800be20:	881b      	ldrh	r3, [r3, #0]
 800be22:	b29b      	uxth	r3, r3
 800be24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800be28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be2c:	827b      	strh	r3, [r7, #18]
 800be2e:	8a7b      	ldrh	r3, [r7, #18]
 800be30:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800be34:	827b      	strh	r3, [r7, #18]
 800be36:	8a7b      	ldrh	r3, [r7, #18]
 800be38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800be3c:	827b      	strh	r3, [r7, #18]
 800be3e:	687a      	ldr	r2, [r7, #4]
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	009b      	lsls	r3, r3, #2
 800be46:	441a      	add	r2, r3
 800be48:	8a7b      	ldrh	r3, [r7, #18]
 800be4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be5a:	b29b      	uxth	r3, r3
 800be5c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800be5e:	2300      	movs	r3, #0
}
 800be60:	4618      	mov	r0, r3
 800be62:	371c      	adds	r7, #28
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr

0800be6c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b083      	sub	sp, #12
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	460b      	mov	r3, r1
 800be76:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800be78:	78fb      	ldrb	r3, [r7, #3]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d103      	bne.n	800be86 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2280      	movs	r2, #128	; 0x80
 800be82:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800be86:	2300      	movs	r3, #0
}
 800be88:	4618      	mov	r0, r3
 800be8a:	370c      	adds	r7, #12
 800be8c:	46bd      	mov	sp, r7
 800be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be92:	4770      	bx	lr

0800be94 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800be94:	b480      	push	{r7}
 800be96:	b083      	sub	sp, #12
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bea2:	b29b      	uxth	r3, r3
 800bea4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bea8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800beac:	b29a      	uxth	r2, r3
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800beb4:	2300      	movs	r3, #0
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	370c      	adds	r7, #12
 800beba:	46bd      	mov	sp, r7
 800bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec0:	4770      	bx	lr

0800bec2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800bec2:	b480      	push	{r7}
 800bec4:	b085      	sub	sp, #20
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800bed4:	68fb      	ldr	r3, [r7, #12]
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3714      	adds	r7, #20
 800beda:	46bd      	mov	sp, r7
 800bedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee0:	4770      	bx	lr

0800bee2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bee2:	b480      	push	{r7}
 800bee4:	b08d      	sub	sp, #52	; 0x34
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	60f8      	str	r0, [r7, #12]
 800beea:	60b9      	str	r1, [r7, #8]
 800beec:	4611      	mov	r1, r2
 800beee:	461a      	mov	r2, r3
 800bef0:	460b      	mov	r3, r1
 800bef2:	80fb      	strh	r3, [r7, #6]
 800bef4:	4613      	mov	r3, r2
 800bef6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bef8:	88bb      	ldrh	r3, [r7, #4]
 800befa:	3301      	adds	r3, #1
 800befc:	085b      	lsrs	r3, r3, #1
 800befe:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bf08:	88fa      	ldrh	r2, [r7, #6]
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	4413      	add	r3, r2
 800bf0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf12:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800bf14:	6a3b      	ldr	r3, [r7, #32]
 800bf16:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf18:	e01b      	b.n	800bf52 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800bf1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1c:	781b      	ldrb	r3, [r3, #0]
 800bf1e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800bf20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf22:	3301      	adds	r3, #1
 800bf24:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800bf26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf28:	781b      	ldrb	r3, [r3, #0]
 800bf2a:	b29b      	uxth	r3, r3
 800bf2c:	021b      	lsls	r3, r3, #8
 800bf2e:	b29b      	uxth	r3, r3
 800bf30:	461a      	mov	r2, r3
 800bf32:	69bb      	ldr	r3, [r7, #24]
 800bf34:	4313      	orrs	r3, r2
 800bf36:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	b29a      	uxth	r2, r3
 800bf3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf3e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800bf40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf42:	3302      	adds	r3, #2
 800bf44:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800bf46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf48:	3301      	adds	r3, #1
 800bf4a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800bf4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf4e:	3b01      	subs	r3, #1
 800bf50:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d1e0      	bne.n	800bf1a <USB_WritePMA+0x38>
  }
}
 800bf58:	bf00      	nop
 800bf5a:	bf00      	nop
 800bf5c:	3734      	adds	r7, #52	; 0x34
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf64:	4770      	bx	lr

0800bf66 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bf66:	b480      	push	{r7}
 800bf68:	b08b      	sub	sp, #44	; 0x2c
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	60f8      	str	r0, [r7, #12]
 800bf6e:	60b9      	str	r1, [r7, #8]
 800bf70:	4611      	mov	r1, r2
 800bf72:	461a      	mov	r2, r3
 800bf74:	460b      	mov	r3, r1
 800bf76:	80fb      	strh	r3, [r7, #6]
 800bf78:	4613      	mov	r3, r2
 800bf7a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bf7c:	88bb      	ldrh	r3, [r7, #4]
 800bf7e:	085b      	lsrs	r3, r3, #1
 800bf80:	b29b      	uxth	r3, r3
 800bf82:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bf8c:	88fa      	ldrh	r2, [r7, #6]
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	4413      	add	r3, r2
 800bf92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf96:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800bf98:	69bb      	ldr	r3, [r7, #24]
 800bf9a:	627b      	str	r3, [r7, #36]	; 0x24
 800bf9c:	e018      	b.n	800bfd0 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800bf9e:	6a3b      	ldr	r3, [r7, #32]
 800bfa0:	881b      	ldrh	r3, [r3, #0]
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800bfa6:	6a3b      	ldr	r3, [r7, #32]
 800bfa8:	3302      	adds	r3, #2
 800bfaa:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	b2da      	uxtb	r2, r3
 800bfb0:	69fb      	ldr	r3, [r7, #28]
 800bfb2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bfb4:	69fb      	ldr	r3, [r7, #28]
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	0a1b      	lsrs	r3, r3, #8
 800bfbe:	b2da      	uxtb	r2, r3
 800bfc0:	69fb      	ldr	r3, [r7, #28]
 800bfc2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bfc4:	69fb      	ldr	r3, [r7, #28]
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800bfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfcc:	3b01      	subs	r3, #1
 800bfce:	627b      	str	r3, [r7, #36]	; 0x24
 800bfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d1e3      	bne.n	800bf9e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800bfd6:	88bb      	ldrh	r3, [r7, #4]
 800bfd8:	f003 0301 	and.w	r3, r3, #1
 800bfdc:	b29b      	uxth	r3, r3
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d007      	beq.n	800bff2 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800bfe2:	6a3b      	ldr	r3, [r7, #32]
 800bfe4:	881b      	ldrh	r3, [r3, #0]
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	b2da      	uxtb	r2, r3
 800bfee:	69fb      	ldr	r3, [r7, #28]
 800bff0:	701a      	strb	r2, [r3, #0]
  }
}
 800bff2:	bf00      	nop
 800bff4:	372c      	adds	r7, #44	; 0x2c
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr

0800bffe <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bffe:	b580      	push	{r7, lr}
 800c000:	b084      	sub	sp, #16
 800c002:	af00      	add	r7, sp, #0
 800c004:	6078      	str	r0, [r7, #4]
 800c006:	460b      	mov	r3, r1
 800c008:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c00a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c00e:	f002 f91d 	bl	800e24c <USBD_static_malloc>
 800c012:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d105      	bne.n	800c026 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2200      	movs	r2, #0
 800c01e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800c022:	2302      	movs	r3, #2
 800c024:	e066      	b.n	800c0f4 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	68fa      	ldr	r2, [r7, #12]
 800c02a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	7c1b      	ldrb	r3, [r3, #16]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d119      	bne.n	800c06a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c036:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c03a:	2202      	movs	r2, #2
 800c03c:	2181      	movs	r1, #129	; 0x81
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f001 ffa9 	bl	800df96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2201      	movs	r2, #1
 800c048:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c04a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c04e:	2202      	movs	r2, #2
 800c050:	2101      	movs	r1, #1
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f001 ff9f 	bl	800df96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2201      	movs	r2, #1
 800c05c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2210      	movs	r2, #16
 800c064:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800c068:	e016      	b.n	800c098 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c06a:	2340      	movs	r3, #64	; 0x40
 800c06c:	2202      	movs	r2, #2
 800c06e:	2181      	movs	r1, #129	; 0x81
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f001 ff90 	bl	800df96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2201      	movs	r2, #1
 800c07a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c07c:	2340      	movs	r3, #64	; 0x40
 800c07e:	2202      	movs	r2, #2
 800c080:	2101      	movs	r1, #1
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f001 ff87 	bl	800df96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2201      	movs	r2, #1
 800c08c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2210      	movs	r2, #16
 800c094:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c098:	2308      	movs	r3, #8
 800c09a:	2203      	movs	r2, #3
 800c09c:	2182      	movs	r1, #130	; 0x82
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f001 ff79 	bl	800df96 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	7c1b      	ldrb	r3, [r3, #16]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d109      	bne.n	800c0e2 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c0d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c0d8:	2101      	movs	r1, #1
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f002 f84b 	bl	800e176 <USBD_LL_PrepareReceive>
 800c0e0:	e007      	b.n	800c0f2 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c0e8:	2340      	movs	r3, #64	; 0x40
 800c0ea:	2101      	movs	r1, #1
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f002 f842 	bl	800e176 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c0f2:	2300      	movs	r3, #0
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3710      	adds	r7, #16
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	460b      	mov	r3, r1
 800c106:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c108:	2181      	movs	r1, #129	; 0x81
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f001 ff69 	bl	800dfe2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2200      	movs	r2, #0
 800c114:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c116:	2101      	movs	r1, #1
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f001 ff62 	bl	800dfe2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2200      	movs	r2, #0
 800c122:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c126:	2182      	movs	r1, #130	; 0x82
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f001 ff5a 	bl	800dfe2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2200      	movs	r2, #0
 800c132:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2200      	movs	r2, #0
 800c13a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c144:	2b00      	cmp	r3, #0
 800c146:	d00e      	beq.n	800c166 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c14e:	685b      	ldr	r3, [r3, #4]
 800c150:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c158:	4618      	mov	r0, r3
 800c15a:	f002 f885 	bl	800e268 <USBD_static_free>
    pdev->pClassData = NULL;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2200      	movs	r2, #0
 800c162:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c166:	2300      	movs	r3, #0
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3708      	adds	r7, #8
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}

0800c170 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b086      	sub	sp, #24
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c180:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c182:	2300      	movs	r3, #0
 800c184:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c186:	2300      	movs	r3, #0
 800c188:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c18a:	2300      	movs	r3, #0
 800c18c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d101      	bne.n	800c198 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800c194:	2303      	movs	r3, #3
 800c196:	e0af      	b.n	800c2f8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d03f      	beq.n	800c224 <USBD_CDC_Setup+0xb4>
 800c1a4:	2b20      	cmp	r3, #32
 800c1a6:	f040 809f 	bne.w	800c2e8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	88db      	ldrh	r3, [r3, #6]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d02e      	beq.n	800c210 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	b25b      	sxtb	r3, r3
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	da16      	bge.n	800c1ea <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c1c2:	689b      	ldr	r3, [r3, #8]
 800c1c4:	683a      	ldr	r2, [r7, #0]
 800c1c6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800c1c8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c1ca:	683a      	ldr	r2, [r7, #0]
 800c1cc:	88d2      	ldrh	r2, [r2, #6]
 800c1ce:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	88db      	ldrh	r3, [r3, #6]
 800c1d4:	2b07      	cmp	r3, #7
 800c1d6:	bf28      	it	cs
 800c1d8:	2307      	movcs	r3, #7
 800c1da:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	89fa      	ldrh	r2, [r7, #14]
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f001 faeb 	bl	800d7be <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800c1e8:	e085      	b.n	800c2f6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	785a      	ldrb	r2, [r3, #1]
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	88db      	ldrh	r3, [r3, #6]
 800c1f8:	b2da      	uxtb	r2, r3
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c200:	6939      	ldr	r1, [r7, #16]
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	88db      	ldrh	r3, [r3, #6]
 800c206:	461a      	mov	r2, r3
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f001 fb04 	bl	800d816 <USBD_CtlPrepareRx>
      break;
 800c20e:	e072      	b.n	800c2f6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c216:	689b      	ldr	r3, [r3, #8]
 800c218:	683a      	ldr	r2, [r7, #0]
 800c21a:	7850      	ldrb	r0, [r2, #1]
 800c21c:	2200      	movs	r2, #0
 800c21e:	6839      	ldr	r1, [r7, #0]
 800c220:	4798      	blx	r3
      break;
 800c222:	e068      	b.n	800c2f6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	785b      	ldrb	r3, [r3, #1]
 800c228:	2b0b      	cmp	r3, #11
 800c22a:	d852      	bhi.n	800c2d2 <USBD_CDC_Setup+0x162>
 800c22c:	a201      	add	r2, pc, #4	; (adr r2, 800c234 <USBD_CDC_Setup+0xc4>)
 800c22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c232:	bf00      	nop
 800c234:	0800c265 	.word	0x0800c265
 800c238:	0800c2e1 	.word	0x0800c2e1
 800c23c:	0800c2d3 	.word	0x0800c2d3
 800c240:	0800c2d3 	.word	0x0800c2d3
 800c244:	0800c2d3 	.word	0x0800c2d3
 800c248:	0800c2d3 	.word	0x0800c2d3
 800c24c:	0800c2d3 	.word	0x0800c2d3
 800c250:	0800c2d3 	.word	0x0800c2d3
 800c254:	0800c2d3 	.word	0x0800c2d3
 800c258:	0800c2d3 	.word	0x0800c2d3
 800c25c:	0800c28f 	.word	0x0800c28f
 800c260:	0800c2b9 	.word	0x0800c2b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c26a:	b2db      	uxtb	r3, r3
 800c26c:	2b03      	cmp	r3, #3
 800c26e:	d107      	bne.n	800c280 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c270:	f107 030a 	add.w	r3, r7, #10
 800c274:	2202      	movs	r2, #2
 800c276:	4619      	mov	r1, r3
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f001 faa0 	bl	800d7be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c27e:	e032      	b.n	800c2e6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c280:	6839      	ldr	r1, [r7, #0]
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f001 fa2a 	bl	800d6dc <USBD_CtlError>
            ret = USBD_FAIL;
 800c288:	2303      	movs	r3, #3
 800c28a:	75fb      	strb	r3, [r7, #23]
          break;
 800c28c:	e02b      	b.n	800c2e6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c294:	b2db      	uxtb	r3, r3
 800c296:	2b03      	cmp	r3, #3
 800c298:	d107      	bne.n	800c2aa <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c29a:	f107 030d 	add.w	r3, r7, #13
 800c29e:	2201      	movs	r2, #1
 800c2a0:	4619      	mov	r1, r3
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f001 fa8b 	bl	800d7be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c2a8:	e01d      	b.n	800c2e6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c2aa:	6839      	ldr	r1, [r7, #0]
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f001 fa15 	bl	800d6dc <USBD_CtlError>
            ret = USBD_FAIL;
 800c2b2:	2303      	movs	r3, #3
 800c2b4:	75fb      	strb	r3, [r7, #23]
          break;
 800c2b6:	e016      	b.n	800c2e6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2be:	b2db      	uxtb	r3, r3
 800c2c0:	2b03      	cmp	r3, #3
 800c2c2:	d00f      	beq.n	800c2e4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800c2c4:	6839      	ldr	r1, [r7, #0]
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f001 fa08 	bl	800d6dc <USBD_CtlError>
            ret = USBD_FAIL;
 800c2cc:	2303      	movs	r3, #3
 800c2ce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c2d0:	e008      	b.n	800c2e4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c2d2:	6839      	ldr	r1, [r7, #0]
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f001 fa01 	bl	800d6dc <USBD_CtlError>
          ret = USBD_FAIL;
 800c2da:	2303      	movs	r3, #3
 800c2dc:	75fb      	strb	r3, [r7, #23]
          break;
 800c2de:	e002      	b.n	800c2e6 <USBD_CDC_Setup+0x176>
          break;
 800c2e0:	bf00      	nop
 800c2e2:	e008      	b.n	800c2f6 <USBD_CDC_Setup+0x186>
          break;
 800c2e4:	bf00      	nop
      }
      break;
 800c2e6:	e006      	b.n	800c2f6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800c2e8:	6839      	ldr	r1, [r7, #0]
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f001 f9f6 	bl	800d6dc <USBD_CtlError>
      ret = USBD_FAIL;
 800c2f0:	2303      	movs	r3, #3
 800c2f2:	75fb      	strb	r3, [r7, #23]
      break;
 800c2f4:	bf00      	nop
  }

  return (uint8_t)ret;
 800c2f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3718      	adds	r7, #24
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	460b      	mov	r3, r1
 800c30a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c312:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d101      	bne.n	800c322 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c31e:	2303      	movs	r3, #3
 800c320:	e04f      	b.n	800c3c2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c328:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c32a:	78fa      	ldrb	r2, [r7, #3]
 800c32c:	6879      	ldr	r1, [r7, #4]
 800c32e:	4613      	mov	r3, r2
 800c330:	009b      	lsls	r3, r3, #2
 800c332:	4413      	add	r3, r2
 800c334:	009b      	lsls	r3, r3, #2
 800c336:	440b      	add	r3, r1
 800c338:	3318      	adds	r3, #24
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d029      	beq.n	800c394 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c340:	78fa      	ldrb	r2, [r7, #3]
 800c342:	6879      	ldr	r1, [r7, #4]
 800c344:	4613      	mov	r3, r2
 800c346:	009b      	lsls	r3, r3, #2
 800c348:	4413      	add	r3, r2
 800c34a:	009b      	lsls	r3, r3, #2
 800c34c:	440b      	add	r3, r1
 800c34e:	3318      	adds	r3, #24
 800c350:	681a      	ldr	r2, [r3, #0]
 800c352:	78f9      	ldrb	r1, [r7, #3]
 800c354:	68f8      	ldr	r0, [r7, #12]
 800c356:	460b      	mov	r3, r1
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	440b      	add	r3, r1
 800c35c:	00db      	lsls	r3, r3, #3
 800c35e:	4403      	add	r3, r0
 800c360:	3338      	adds	r3, #56	; 0x38
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	fbb2 f1f3 	udiv	r1, r2, r3
 800c368:	fb01 f303 	mul.w	r3, r1, r3
 800c36c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d110      	bne.n	800c394 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800c372:	78fa      	ldrb	r2, [r7, #3]
 800c374:	6879      	ldr	r1, [r7, #4]
 800c376:	4613      	mov	r3, r2
 800c378:	009b      	lsls	r3, r3, #2
 800c37a:	4413      	add	r3, r2
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	440b      	add	r3, r1
 800c380:	3318      	adds	r3, #24
 800c382:	2200      	movs	r2, #0
 800c384:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c386:	78f9      	ldrb	r1, [r7, #3]
 800c388:	2300      	movs	r3, #0
 800c38a:	2200      	movs	r2, #0
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f001 fed1 	bl	800e134 <USBD_LL_Transmit>
 800c392:	e015      	b.n	800c3c0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	2200      	movs	r2, #0
 800c398:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c3a2:	691b      	ldr	r3, [r3, #16]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d00b      	beq.n	800c3c0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c3ae:	691b      	ldr	r3, [r3, #16]
 800c3b0:	68ba      	ldr	r2, [r7, #8]
 800c3b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c3b6:	68ba      	ldr	r2, [r7, #8]
 800c3b8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c3bc:	78fa      	ldrb	r2, [r7, #3]
 800c3be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c3c0:	2300      	movs	r3, #0
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3710      	adds	r7, #16
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}

0800c3ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c3ca:	b580      	push	{r7, lr}
 800c3cc:	b084      	sub	sp, #16
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	6078      	str	r0, [r7, #4]
 800c3d2:	460b      	mov	r3, r1
 800c3d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c3dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d101      	bne.n	800c3ec <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c3e8:	2303      	movs	r3, #3
 800c3ea:	e015      	b.n	800c418 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c3ec:	78fb      	ldrb	r3, [r7, #3]
 800c3ee:	4619      	mov	r1, r3
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f001 fee1 	bl	800e1b8 <USBD_LL_GetRxDataSize>
 800c3f6:	4602      	mov	r2, r0
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c404:	68db      	ldr	r3, [r3, #12]
 800c406:	68fa      	ldr	r2, [r7, #12]
 800c408:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c40c:	68fa      	ldr	r2, [r7, #12]
 800c40e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c412:	4611      	mov	r1, r2
 800c414:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c416:	2300      	movs	r3, #0
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3710      	adds	r7, #16
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b084      	sub	sp, #16
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c42e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d101      	bne.n	800c43a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c436:	2303      	movs	r3, #3
 800c438:	e01b      	b.n	800c472 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c440:	2b00      	cmp	r3, #0
 800c442:	d015      	beq.n	800c470 <USBD_CDC_EP0_RxReady+0x50>
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c44a:	2bff      	cmp	r3, #255	; 0xff
 800c44c:	d010      	beq.n	800c470 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c454:	689b      	ldr	r3, [r3, #8]
 800c456:	68fa      	ldr	r2, [r7, #12]
 800c458:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800c45c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c45e:	68fa      	ldr	r2, [r7, #12]
 800c460:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c464:	b292      	uxth	r2, r2
 800c466:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	22ff      	movs	r2, #255	; 0xff
 800c46c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c470:	2300      	movs	r3, #0
}
 800c472:	4618      	mov	r0, r3
 800c474:	3710      	adds	r7, #16
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
	...

0800c47c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c47c:	b480      	push	{r7}
 800c47e:	b083      	sub	sp, #12
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2243      	movs	r2, #67	; 0x43
 800c488:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c48a:	4b03      	ldr	r3, [pc, #12]	; (800c498 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	370c      	adds	r7, #12
 800c490:	46bd      	mov	sp, r7
 800c492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c496:	4770      	bx	lr
 800c498:	20002768 	.word	0x20002768

0800c49c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c49c:	b480      	push	{r7}
 800c49e:	b083      	sub	sp, #12
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2243      	movs	r2, #67	; 0x43
 800c4a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c4aa:	4b03      	ldr	r3, [pc, #12]	; (800c4b8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	370c      	adds	r7, #12
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b6:	4770      	bx	lr
 800c4b8:	20002724 	.word	0x20002724

0800c4bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b083      	sub	sp, #12
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2243      	movs	r2, #67	; 0x43
 800c4c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c4ca:	4b03      	ldr	r3, [pc, #12]	; (800c4d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	370c      	adds	r7, #12
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr
 800c4d8:	200027ac 	.word	0x200027ac

0800c4dc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b083      	sub	sp, #12
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	220a      	movs	r2, #10
 800c4e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c4ea:	4b03      	ldr	r3, [pc, #12]	; (800c4f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	370c      	adds	r7, #12
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr
 800c4f8:	200026e0 	.word	0x200026e0

0800c4fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b083      	sub	sp, #12
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
 800c504:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d101      	bne.n	800c510 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c50c:	2303      	movs	r3, #3
 800c50e:	e004      	b.n	800c51a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	683a      	ldr	r2, [r7, #0]
 800c514:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c518:	2300      	movs	r3, #0
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	370c      	adds	r7, #12
 800c51e:	46bd      	mov	sp, r7
 800c520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c524:	4770      	bx	lr

0800c526 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c526:	b480      	push	{r7}
 800c528:	b087      	sub	sp, #28
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	60f8      	str	r0, [r7, #12]
 800c52e:	60b9      	str	r1, [r7, #8]
 800c530:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c538:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d101      	bne.n	800c544 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c540:	2303      	movs	r3, #3
 800c542:	e008      	b.n	800c556 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	68ba      	ldr	r2, [r7, #8]
 800c548:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	687a      	ldr	r2, [r7, #4]
 800c550:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c554:	2300      	movs	r3, #0
}
 800c556:	4618      	mov	r0, r3
 800c558:	371c      	adds	r7, #28
 800c55a:	46bd      	mov	sp, r7
 800c55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c560:	4770      	bx	lr

0800c562 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c562:	b480      	push	{r7}
 800c564:	b085      	sub	sp, #20
 800c566:	af00      	add	r7, sp, #0
 800c568:	6078      	str	r0, [r7, #4]
 800c56a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c572:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d101      	bne.n	800c57e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c57a:	2303      	movs	r3, #3
 800c57c:	e004      	b.n	800c588 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	683a      	ldr	r2, [r7, #0]
 800c582:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c586:	2300      	movs	r3, #0
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3714      	adds	r7, #20
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr

0800c594 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b084      	sub	sp, #16
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c5a2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d101      	bne.n	800c5b6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c5b2:	2303      	movs	r3, #3
 800c5b4:	e01a      	b.n	800c5ec <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d114      	bne.n	800c5ea <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	2201      	movs	r2, #1
 800c5c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c5de:	2181      	movs	r1, #129	; 0x81
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f001 fda7 	bl	800e134 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c5ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3710      	adds	r7, #16
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b084      	sub	sp, #16
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c602:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d101      	bne.n	800c612 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c60e:	2303      	movs	r3, #3
 800c610:	e016      	b.n	800c640 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	7c1b      	ldrb	r3, [r3, #16]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d109      	bne.n	800c62e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c620:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c624:	2101      	movs	r1, #1
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f001 fda5 	bl	800e176 <USBD_LL_PrepareReceive>
 800c62c:	e007      	b.n	800c63e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c634:	2340      	movs	r3, #64	; 0x40
 800c636:	2101      	movs	r1, #1
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f001 fd9c 	bl	800e176 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c63e:	2300      	movs	r3, #0
}
 800c640:	4618      	mov	r0, r3
 800c642:	3710      	adds	r7, #16
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b086      	sub	sp, #24
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	60f8      	str	r0, [r7, #12]
 800c650:	60b9      	str	r1, [r7, #8]
 800c652:	4613      	mov	r3, r2
 800c654:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d10a      	bne.n	800c672 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800c65c:	4817      	ldr	r0, [pc, #92]	; (800c6bc <USBD_Init+0x74>)
 800c65e:	f002 fadb 	bl	800ec18 <iprintf>
 800c662:	4817      	ldr	r0, [pc, #92]	; (800c6c0 <USBD_Init+0x78>)
 800c664:	f002 fad8 	bl	800ec18 <iprintf>
 800c668:	200a      	movs	r0, #10
 800c66a:	f002 faed 	bl	800ec48 <putchar>
#endif
    return USBD_FAIL;
 800c66e:	2303      	movs	r3, #3
 800c670:	e01f      	b.n	800c6b2 <USBD_Init+0x6a>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	2200      	movs	r2, #0
 800c676:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	2200      	movs	r2, #0
 800c67e:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	2200      	movs	r2, #0
 800c686:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d003      	beq.n	800c698 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	68ba      	ldr	r2, [r7, #8]
 800c694:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	2201      	movs	r2, #1
 800c69c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	79fa      	ldrb	r2, [r7, #7]
 800c6a4:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c6a6:	68f8      	ldr	r0, [r7, #12]
 800c6a8:	f001 fbfa 	bl	800dea0 <USBD_LL_Init>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c6b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3718      	adds	r7, #24
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}
 800c6ba:	bf00      	nop
 800c6bc:	08010ed8 	.word	0x08010ed8
 800c6c0:	08010ee0 	.word	0x08010ee0

0800c6c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b084      	sub	sp, #16
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d10a      	bne.n	800c6ee <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800c6d8:	4812      	ldr	r0, [pc, #72]	; (800c724 <USBD_RegisterClass+0x60>)
 800c6da:	f002 fa9d 	bl	800ec18 <iprintf>
 800c6de:	4812      	ldr	r0, [pc, #72]	; (800c728 <USBD_RegisterClass+0x64>)
 800c6e0:	f002 fa9a 	bl	800ec18 <iprintf>
 800c6e4:	200a      	movs	r0, #10
 800c6e6:	f002 faaf 	bl	800ec48 <putchar>
#endif
    return USBD_FAIL;
 800c6ea:	2303      	movs	r3, #3
 800c6ec:	e016      	b.n	800c71c <USBD_RegisterClass+0x58>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	683a      	ldr	r2, [r7, #0]
 800c6f2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d00b      	beq.n	800c71a <USBD_RegisterClass+0x56>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c70a:	f107 020e 	add.w	r2, r7, #14
 800c70e:	4610      	mov	r0, r2
 800c710:	4798      	blx	r3
 800c712:	4602      	mov	r2, r0
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c71a:	2300      	movs	r3, #0
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3710      	adds	r7, #16
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}
 800c724:	08010ed8 	.word	0x08010ed8
 800c728:	08010ef8 	.word	0x08010ef8

0800c72c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b082      	sub	sp, #8
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f001 fc13 	bl	800df60 <USBD_LL_Start>
 800c73a:	4603      	mov	r3, r0
}
 800c73c:	4618      	mov	r0, r3
 800c73e:	3708      	adds	r7, #8
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}

0800c744 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c744:	b480      	push	{r7}
 800c746:	b083      	sub	sp, #12
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c74c:	2300      	movs	r3, #0
}
 800c74e:	4618      	mov	r0, r3
 800c750:	370c      	adds	r7, #12
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr

0800c75a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c75a:	b580      	push	{r7, lr}
 800c75c:	b084      	sub	sp, #16
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
 800c762:	460b      	mov	r3, r1
 800c764:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c766:	2303      	movs	r3, #3
 800c768:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c770:	2b00      	cmp	r3, #0
 800c772:	d009      	beq.n	800c788 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	78fa      	ldrb	r2, [r7, #3]
 800c77e:	4611      	mov	r1, r2
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	4798      	blx	r3
 800c784:	4603      	mov	r3, r0
 800c786:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c788:	7bfb      	ldrb	r3, [r7, #15]
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	3710      	adds	r7, #16
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}

0800c792 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c792:	b580      	push	{r7, lr}
 800c794:	b082      	sub	sp, #8
 800c796:	af00      	add	r7, sp, #0
 800c798:	6078      	str	r0, [r7, #4]
 800c79a:	460b      	mov	r3, r1
 800c79c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d007      	beq.n	800c7b8 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7ae:	685b      	ldr	r3, [r3, #4]
 800c7b0:	78fa      	ldrb	r2, [r7, #3]
 800c7b2:	4611      	mov	r1, r2
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	4798      	blx	r3
  }

  return USBD_OK;
 800c7b8:	2300      	movs	r3, #0
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3708      	adds	r7, #8
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}

0800c7c2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c7c2:	b580      	push	{r7, lr}
 800c7c4:	b084      	sub	sp, #16
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
 800c7ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c7d2:	6839      	ldr	r1, [r7, #0]
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f000 ff47 	bl	800d668 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2201      	movs	r2, #1
 800c7de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c7f6:	f003 031f 	and.w	r3, r3, #31
 800c7fa:	2b02      	cmp	r3, #2
 800c7fc:	d01a      	beq.n	800c834 <USBD_LL_SetupStage+0x72>
 800c7fe:	2b02      	cmp	r3, #2
 800c800:	d822      	bhi.n	800c848 <USBD_LL_SetupStage+0x86>
 800c802:	2b00      	cmp	r3, #0
 800c804:	d002      	beq.n	800c80c <USBD_LL_SetupStage+0x4a>
 800c806:	2b01      	cmp	r3, #1
 800c808:	d00a      	beq.n	800c820 <USBD_LL_SetupStage+0x5e>
 800c80a:	e01d      	b.n	800c848 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c812:	4619      	mov	r1, r3
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f000 f9ef 	bl	800cbf8 <USBD_StdDevReq>
 800c81a:	4603      	mov	r3, r0
 800c81c:	73fb      	strb	r3, [r7, #15]
      break;
 800c81e:	e020      	b.n	800c862 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c826:	4619      	mov	r1, r3
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f000 fa53 	bl	800ccd4 <USBD_StdItfReq>
 800c82e:	4603      	mov	r3, r0
 800c830:	73fb      	strb	r3, [r7, #15]
      break;
 800c832:	e016      	b.n	800c862 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c83a:	4619      	mov	r1, r3
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f000 fa92 	bl	800cd66 <USBD_StdEPReq>
 800c842:	4603      	mov	r3, r0
 800c844:	73fb      	strb	r3, [r7, #15]
      break;
 800c846:	e00c      	b.n	800c862 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c84e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c852:	b2db      	uxtb	r3, r3
 800c854:	4619      	mov	r1, r3
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f001 fbe2 	bl	800e020 <USBD_LL_StallEP>
 800c85c:	4603      	mov	r3, r0
 800c85e:	73fb      	strb	r3, [r7, #15]
      break;
 800c860:	bf00      	nop
  }

  return ret;
 800c862:	7bfb      	ldrb	r3, [r7, #15]
}
 800c864:	4618      	mov	r0, r3
 800c866:	3710      	adds	r7, #16
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}

0800c86c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b086      	sub	sp, #24
 800c870:	af00      	add	r7, sp, #0
 800c872:	60f8      	str	r0, [r7, #12]
 800c874:	460b      	mov	r3, r1
 800c876:	607a      	str	r2, [r7, #4]
 800c878:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c87a:	7afb      	ldrb	r3, [r7, #11]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d138      	bne.n	800c8f2 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c886:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c88e:	2b03      	cmp	r3, #3
 800c890:	d14a      	bne.n	800c928 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	689a      	ldr	r2, [r3, #8]
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	68db      	ldr	r3, [r3, #12]
 800c89a:	429a      	cmp	r2, r3
 800c89c:	d913      	bls.n	800c8c6 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	689a      	ldr	r2, [r3, #8]
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	68db      	ldr	r3, [r3, #12]
 800c8a6:	1ad2      	subs	r2, r2, r3
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	68da      	ldr	r2, [r3, #12]
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	689b      	ldr	r3, [r3, #8]
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	bf28      	it	cs
 800c8b8:	4613      	movcs	r3, r2
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	6879      	ldr	r1, [r7, #4]
 800c8be:	68f8      	ldr	r0, [r7, #12]
 800c8c0:	f000 ffc6 	bl	800d850 <USBD_CtlContinueRx>
 800c8c4:	e030      	b.n	800c928 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8cc:	b2db      	uxtb	r3, r3
 800c8ce:	2b03      	cmp	r3, #3
 800c8d0:	d10b      	bne.n	800c8ea <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8d8:	691b      	ldr	r3, [r3, #16]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d005      	beq.n	800c8ea <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8e4:	691b      	ldr	r3, [r3, #16]
 800c8e6:	68f8      	ldr	r0, [r7, #12]
 800c8e8:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c8ea:	68f8      	ldr	r0, [r7, #12]
 800c8ec:	f000 ffc1 	bl	800d872 <USBD_CtlSendStatus>
 800c8f0:	e01a      	b.n	800c928 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8f8:	b2db      	uxtb	r3, r3
 800c8fa:	2b03      	cmp	r3, #3
 800c8fc:	d114      	bne.n	800c928 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c904:	699b      	ldr	r3, [r3, #24]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d00e      	beq.n	800c928 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c910:	699b      	ldr	r3, [r3, #24]
 800c912:	7afa      	ldrb	r2, [r7, #11]
 800c914:	4611      	mov	r1, r2
 800c916:	68f8      	ldr	r0, [r7, #12]
 800c918:	4798      	blx	r3
 800c91a:	4603      	mov	r3, r0
 800c91c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c91e:	7dfb      	ldrb	r3, [r7, #23]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d001      	beq.n	800c928 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c924:	7dfb      	ldrb	r3, [r7, #23]
 800c926:	e000      	b.n	800c92a <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c928:	2300      	movs	r3, #0
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3718      	adds	r7, #24
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}

0800c932 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c932:	b580      	push	{r7, lr}
 800c934:	b086      	sub	sp, #24
 800c936:	af00      	add	r7, sp, #0
 800c938:	60f8      	str	r0, [r7, #12]
 800c93a:	460b      	mov	r3, r1
 800c93c:	607a      	str	r2, [r7, #4]
 800c93e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c940:	7afb      	ldrb	r3, [r7, #11]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d16b      	bne.n	800ca1e <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	3314      	adds	r3, #20
 800c94a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c952:	2b02      	cmp	r3, #2
 800c954:	d156      	bne.n	800ca04 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	689a      	ldr	r2, [r3, #8]
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	68db      	ldr	r3, [r3, #12]
 800c95e:	429a      	cmp	r2, r3
 800c960:	d914      	bls.n	800c98c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c962:	693b      	ldr	r3, [r7, #16]
 800c964:	689a      	ldr	r2, [r3, #8]
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	68db      	ldr	r3, [r3, #12]
 800c96a:	1ad2      	subs	r2, r2, r3
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	689b      	ldr	r3, [r3, #8]
 800c974:	461a      	mov	r2, r3
 800c976:	6879      	ldr	r1, [r7, #4]
 800c978:	68f8      	ldr	r0, [r7, #12]
 800c97a:	f000 ff3b 	bl	800d7f4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c97e:	2300      	movs	r3, #0
 800c980:	2200      	movs	r2, #0
 800c982:	2100      	movs	r1, #0
 800c984:	68f8      	ldr	r0, [r7, #12]
 800c986:	f001 fbf6 	bl	800e176 <USBD_LL_PrepareReceive>
 800c98a:	e03b      	b.n	800ca04 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c98c:	693b      	ldr	r3, [r7, #16]
 800c98e:	68da      	ldr	r2, [r3, #12]
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	689b      	ldr	r3, [r3, #8]
 800c994:	429a      	cmp	r2, r3
 800c996:	d11c      	bne.n	800c9d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	685a      	ldr	r2, [r3, #4]
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	d316      	bcc.n	800c9d2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	685a      	ldr	r2, [r3, #4]
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d20f      	bcs.n	800c9d2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	2100      	movs	r1, #0
 800c9b6:	68f8      	ldr	r0, [r7, #12]
 800c9b8:	f000 ff1c 	bl	800d7f4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	2100      	movs	r1, #0
 800c9ca:	68f8      	ldr	r0, [r7, #12]
 800c9cc:	f001 fbd3 	bl	800e176 <USBD_LL_PrepareReceive>
 800c9d0:	e018      	b.n	800ca04 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9d8:	b2db      	uxtb	r3, r3
 800c9da:	2b03      	cmp	r3, #3
 800c9dc:	d10b      	bne.n	800c9f6 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9e4:	68db      	ldr	r3, [r3, #12]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d005      	beq.n	800c9f6 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9f0:	68db      	ldr	r3, [r3, #12]
 800c9f2:	68f8      	ldr	r0, [r7, #12]
 800c9f4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9f6:	2180      	movs	r1, #128	; 0x80
 800c9f8:	68f8      	ldr	r0, [r7, #12]
 800c9fa:	f001 fb11 	bl	800e020 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c9fe:	68f8      	ldr	r0, [r7, #12]
 800ca00:	f000 ff4a 	bl	800d898 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ca0a:	2b01      	cmp	r3, #1
 800ca0c:	d122      	bne.n	800ca54 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ca0e:	68f8      	ldr	r0, [r7, #12]
 800ca10:	f7ff fe98 	bl	800c744 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	2200      	movs	r2, #0
 800ca18:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ca1c:	e01a      	b.n	800ca54 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	2b03      	cmp	r3, #3
 800ca28:	d114      	bne.n	800ca54 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca30:	695b      	ldr	r3, [r3, #20]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d00e      	beq.n	800ca54 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca3c:	695b      	ldr	r3, [r3, #20]
 800ca3e:	7afa      	ldrb	r2, [r7, #11]
 800ca40:	4611      	mov	r1, r2
 800ca42:	68f8      	ldr	r0, [r7, #12]
 800ca44:	4798      	blx	r3
 800ca46:	4603      	mov	r3, r0
 800ca48:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ca4a:	7dfb      	ldrb	r3, [r7, #23]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d001      	beq.n	800ca54 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ca50:	7dfb      	ldrb	r3, [r7, #23]
 800ca52:	e000      	b.n	800ca56 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ca54:	2300      	movs	r3, #0
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3718      	adds	r7, #24
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}

0800ca5e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ca5e:	b580      	push	{r7, lr}
 800ca60:	b082      	sub	sp, #8
 800ca62:	af00      	add	r7, sp, #0
 800ca64:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2201      	movs	r2, #1
 800ca6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2200      	movs	r2, #0
 800ca72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d101      	bne.n	800ca92 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ca8e:	2303      	movs	r3, #3
 800ca90:	e02f      	b.n	800caf2 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d00f      	beq.n	800cabc <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d009      	beq.n	800cabc <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	687a      	ldr	r2, [r7, #4]
 800cab2:	6852      	ldr	r2, [r2, #4]
 800cab4:	b2d2      	uxtb	r2, r2
 800cab6:	4611      	mov	r1, r2
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cabc:	2340      	movs	r3, #64	; 0x40
 800cabe:	2200      	movs	r2, #0
 800cac0:	2100      	movs	r1, #0
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f001 fa67 	bl	800df96 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2201      	movs	r2, #1
 800cacc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2240      	movs	r2, #64	; 0x40
 800cad4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cad8:	2340      	movs	r3, #64	; 0x40
 800cada:	2200      	movs	r2, #0
 800cadc:	2180      	movs	r1, #128	; 0x80
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f001 fa59 	bl	800df96 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2201      	movs	r2, #1
 800cae8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2240      	movs	r2, #64	; 0x40
 800caee:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800caf0:	2300      	movs	r3, #0
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3708      	adds	r7, #8
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}

0800cafa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cafa:	b480      	push	{r7}
 800cafc:	b083      	sub	sp, #12
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	6078      	str	r0, [r7, #4]
 800cb02:	460b      	mov	r3, r1
 800cb04:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	78fa      	ldrb	r2, [r7, #3]
 800cb0a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cb0c:	2300      	movs	r3, #0
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	370c      	adds	r7, #12
 800cb12:	46bd      	mov	sp, r7
 800cb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb18:	4770      	bx	lr

0800cb1a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cb1a:	b480      	push	{r7}
 800cb1c:	b083      	sub	sp, #12
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb28:	b2da      	uxtb	r2, r3
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2204      	movs	r2, #4
 800cb34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cb38:	2300      	movs	r3, #0
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	370c      	adds	r7, #12
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb44:	4770      	bx	lr

0800cb46 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cb46:	b480      	push	{r7}
 800cb48:	b083      	sub	sp, #12
 800cb4a:	af00      	add	r7, sp, #0
 800cb4c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb54:	b2db      	uxtb	r3, r3
 800cb56:	2b04      	cmp	r3, #4
 800cb58:	d106      	bne.n	800cb68 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800cb60:	b2da      	uxtb	r2, r3
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800cb68:	2300      	movs	r3, #0
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	370c      	adds	r7, #12
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb74:	4770      	bx	lr

0800cb76 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cb76:	b580      	push	{r7, lr}
 800cb78:	b082      	sub	sp, #8
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d101      	bne.n	800cb8c <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800cb88:	2303      	movs	r3, #3
 800cb8a:	e012      	b.n	800cbb2 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb92:	b2db      	uxtb	r3, r3
 800cb94:	2b03      	cmp	r3, #3
 800cb96:	d10b      	bne.n	800cbb0 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb9e:	69db      	ldr	r3, [r3, #28]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d005      	beq.n	800cbb0 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbaa:	69db      	ldr	r3, [r3, #28]
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cbb0:	2300      	movs	r3, #0
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3708      	adds	r7, #8
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}

0800cbba <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cbba:	b480      	push	{r7}
 800cbbc:	b087      	sub	sp, #28
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cbc6:	697b      	ldr	r3, [r7, #20]
 800cbc8:	781b      	ldrb	r3, [r3, #0]
 800cbca:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	3301      	adds	r3, #1
 800cbd0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	781b      	ldrb	r3, [r3, #0]
 800cbd6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cbd8:	8a3b      	ldrh	r3, [r7, #16]
 800cbda:	021b      	lsls	r3, r3, #8
 800cbdc:	b21a      	sxth	r2, r3
 800cbde:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cbe2:	4313      	orrs	r3, r2
 800cbe4:	b21b      	sxth	r3, r3
 800cbe6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cbe8:	89fb      	ldrh	r3, [r7, #14]
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	371c      	adds	r7, #28
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf4:	4770      	bx	lr
	...

0800cbf8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b084      	sub	sp, #16
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc02:	2300      	movs	r3, #0
 800cc04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cc0e:	2b40      	cmp	r3, #64	; 0x40
 800cc10:	d005      	beq.n	800cc1e <USBD_StdDevReq+0x26>
 800cc12:	2b40      	cmp	r3, #64	; 0x40
 800cc14:	d853      	bhi.n	800ccbe <USBD_StdDevReq+0xc6>
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d00b      	beq.n	800cc32 <USBD_StdDevReq+0x3a>
 800cc1a:	2b20      	cmp	r3, #32
 800cc1c:	d14f      	bne.n	800ccbe <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc24:	689b      	ldr	r3, [r3, #8]
 800cc26:	6839      	ldr	r1, [r7, #0]
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	4798      	blx	r3
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	73fb      	strb	r3, [r7, #15]
      break;
 800cc30:	e04a      	b.n	800ccc8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	785b      	ldrb	r3, [r3, #1]
 800cc36:	2b09      	cmp	r3, #9
 800cc38:	d83b      	bhi.n	800ccb2 <USBD_StdDevReq+0xba>
 800cc3a:	a201      	add	r2, pc, #4	; (adr r2, 800cc40 <USBD_StdDevReq+0x48>)
 800cc3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc40:	0800cc95 	.word	0x0800cc95
 800cc44:	0800cca9 	.word	0x0800cca9
 800cc48:	0800ccb3 	.word	0x0800ccb3
 800cc4c:	0800cc9f 	.word	0x0800cc9f
 800cc50:	0800ccb3 	.word	0x0800ccb3
 800cc54:	0800cc73 	.word	0x0800cc73
 800cc58:	0800cc69 	.word	0x0800cc69
 800cc5c:	0800ccb3 	.word	0x0800ccb3
 800cc60:	0800cc8b 	.word	0x0800cc8b
 800cc64:	0800cc7d 	.word	0x0800cc7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cc68:	6839      	ldr	r1, [r7, #0]
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f000 f9de 	bl	800d02c <USBD_GetDescriptor>
          break;
 800cc70:	e024      	b.n	800ccbc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cc72:	6839      	ldr	r1, [r7, #0]
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f000 fb6d 	bl	800d354 <USBD_SetAddress>
          break;
 800cc7a:	e01f      	b.n	800ccbc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cc7c:	6839      	ldr	r1, [r7, #0]
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f000 fbac 	bl	800d3dc <USBD_SetConfig>
 800cc84:	4603      	mov	r3, r0
 800cc86:	73fb      	strb	r3, [r7, #15]
          break;
 800cc88:	e018      	b.n	800ccbc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cc8a:	6839      	ldr	r1, [r7, #0]
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f000 fc4b 	bl	800d528 <USBD_GetConfig>
          break;
 800cc92:	e013      	b.n	800ccbc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cc94:	6839      	ldr	r1, [r7, #0]
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f000 fc7c 	bl	800d594 <USBD_GetStatus>
          break;
 800cc9c:	e00e      	b.n	800ccbc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cc9e:	6839      	ldr	r1, [r7, #0]
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f000 fcab 	bl	800d5fc <USBD_SetFeature>
          break;
 800cca6:	e009      	b.n	800ccbc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cca8:	6839      	ldr	r1, [r7, #0]
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f000 fcba 	bl	800d624 <USBD_ClrFeature>
          break;
 800ccb0:	e004      	b.n	800ccbc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ccb2:	6839      	ldr	r1, [r7, #0]
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f000 fd11 	bl	800d6dc <USBD_CtlError>
          break;
 800ccba:	bf00      	nop
      }
      break;
 800ccbc:	e004      	b.n	800ccc8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ccbe:	6839      	ldr	r1, [r7, #0]
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f000 fd0b 	bl	800d6dc <USBD_CtlError>
      break;
 800ccc6:	bf00      	nop
  }

  return ret;
 800ccc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3710      	adds	r7, #16
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}
 800ccd2:	bf00      	nop

0800ccd4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b084      	sub	sp, #16
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ccde:	2300      	movs	r3, #0
 800cce0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	781b      	ldrb	r3, [r3, #0]
 800cce6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ccea:	2b40      	cmp	r3, #64	; 0x40
 800ccec:	d005      	beq.n	800ccfa <USBD_StdItfReq+0x26>
 800ccee:	2b40      	cmp	r3, #64	; 0x40
 800ccf0:	d82f      	bhi.n	800cd52 <USBD_StdItfReq+0x7e>
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d001      	beq.n	800ccfa <USBD_StdItfReq+0x26>
 800ccf6:	2b20      	cmp	r3, #32
 800ccf8:	d12b      	bne.n	800cd52 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd00:	b2db      	uxtb	r3, r3
 800cd02:	3b01      	subs	r3, #1
 800cd04:	2b02      	cmp	r3, #2
 800cd06:	d81d      	bhi.n	800cd44 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	889b      	ldrh	r3, [r3, #4]
 800cd0c:	b2db      	uxtb	r3, r3
 800cd0e:	2b01      	cmp	r3, #1
 800cd10:	d813      	bhi.n	800cd3a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd18:	689b      	ldr	r3, [r3, #8]
 800cd1a:	6839      	ldr	r1, [r7, #0]
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	4798      	blx	r3
 800cd20:	4603      	mov	r3, r0
 800cd22:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	88db      	ldrh	r3, [r3, #6]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d110      	bne.n	800cd4e <USBD_StdItfReq+0x7a>
 800cd2c:	7bfb      	ldrb	r3, [r7, #15]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d10d      	bne.n	800cd4e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f000 fd9d 	bl	800d872 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cd38:	e009      	b.n	800cd4e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800cd3a:	6839      	ldr	r1, [r7, #0]
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f000 fccd 	bl	800d6dc <USBD_CtlError>
          break;
 800cd42:	e004      	b.n	800cd4e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800cd44:	6839      	ldr	r1, [r7, #0]
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f000 fcc8 	bl	800d6dc <USBD_CtlError>
          break;
 800cd4c:	e000      	b.n	800cd50 <USBD_StdItfReq+0x7c>
          break;
 800cd4e:	bf00      	nop
      }
      break;
 800cd50:	e004      	b.n	800cd5c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800cd52:	6839      	ldr	r1, [r7, #0]
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f000 fcc1 	bl	800d6dc <USBD_CtlError>
      break;
 800cd5a:	bf00      	nop
  }

  return ret;
 800cd5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3710      	adds	r7, #16
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}

0800cd66 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd66:	b580      	push	{r7, lr}
 800cd68:	b084      	sub	sp, #16
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	6078      	str	r0, [r7, #4]
 800cd6e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800cd70:	2300      	movs	r3, #0
 800cd72:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	889b      	ldrh	r3, [r3, #4]
 800cd78:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	781b      	ldrb	r3, [r3, #0]
 800cd7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cd82:	2b40      	cmp	r3, #64	; 0x40
 800cd84:	d007      	beq.n	800cd96 <USBD_StdEPReq+0x30>
 800cd86:	2b40      	cmp	r3, #64	; 0x40
 800cd88:	f200 8145 	bhi.w	800d016 <USBD_StdEPReq+0x2b0>
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d00c      	beq.n	800cdaa <USBD_StdEPReq+0x44>
 800cd90:	2b20      	cmp	r3, #32
 800cd92:	f040 8140 	bne.w	800d016 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd9c:	689b      	ldr	r3, [r3, #8]
 800cd9e:	6839      	ldr	r1, [r7, #0]
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	4798      	blx	r3
 800cda4:	4603      	mov	r3, r0
 800cda6:	73fb      	strb	r3, [r7, #15]
      break;
 800cda8:	e13a      	b.n	800d020 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	785b      	ldrb	r3, [r3, #1]
 800cdae:	2b03      	cmp	r3, #3
 800cdb0:	d007      	beq.n	800cdc2 <USBD_StdEPReq+0x5c>
 800cdb2:	2b03      	cmp	r3, #3
 800cdb4:	f300 8129 	bgt.w	800d00a <USBD_StdEPReq+0x2a4>
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d07f      	beq.n	800cebc <USBD_StdEPReq+0x156>
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	d03c      	beq.n	800ce3a <USBD_StdEPReq+0xd4>
 800cdc0:	e123      	b.n	800d00a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdc8:	b2db      	uxtb	r3, r3
 800cdca:	2b02      	cmp	r3, #2
 800cdcc:	d002      	beq.n	800cdd4 <USBD_StdEPReq+0x6e>
 800cdce:	2b03      	cmp	r3, #3
 800cdd0:	d016      	beq.n	800ce00 <USBD_StdEPReq+0x9a>
 800cdd2:	e02c      	b.n	800ce2e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cdd4:	7bbb      	ldrb	r3, [r7, #14]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d00d      	beq.n	800cdf6 <USBD_StdEPReq+0x90>
 800cdda:	7bbb      	ldrb	r3, [r7, #14]
 800cddc:	2b80      	cmp	r3, #128	; 0x80
 800cdde:	d00a      	beq.n	800cdf6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cde0:	7bbb      	ldrb	r3, [r7, #14]
 800cde2:	4619      	mov	r1, r3
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f001 f91b 	bl	800e020 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cdea:	2180      	movs	r1, #128	; 0x80
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f001 f917 	bl	800e020 <USBD_LL_StallEP>
 800cdf2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cdf4:	e020      	b.n	800ce38 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800cdf6:	6839      	ldr	r1, [r7, #0]
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f000 fc6f 	bl	800d6dc <USBD_CtlError>
              break;
 800cdfe:	e01b      	b.n	800ce38 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	885b      	ldrh	r3, [r3, #2]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d10e      	bne.n	800ce26 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ce08:	7bbb      	ldrb	r3, [r7, #14]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d00b      	beq.n	800ce26 <USBD_StdEPReq+0xc0>
 800ce0e:	7bbb      	ldrb	r3, [r7, #14]
 800ce10:	2b80      	cmp	r3, #128	; 0x80
 800ce12:	d008      	beq.n	800ce26 <USBD_StdEPReq+0xc0>
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	88db      	ldrh	r3, [r3, #6]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d104      	bne.n	800ce26 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ce1c:	7bbb      	ldrb	r3, [r7, #14]
 800ce1e:	4619      	mov	r1, r3
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f001 f8fd 	bl	800e020 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f000 fd23 	bl	800d872 <USBD_CtlSendStatus>

              break;
 800ce2c:	e004      	b.n	800ce38 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ce2e:	6839      	ldr	r1, [r7, #0]
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f000 fc53 	bl	800d6dc <USBD_CtlError>
              break;
 800ce36:	bf00      	nop
          }
          break;
 800ce38:	e0ec      	b.n	800d014 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce40:	b2db      	uxtb	r3, r3
 800ce42:	2b02      	cmp	r3, #2
 800ce44:	d002      	beq.n	800ce4c <USBD_StdEPReq+0xe6>
 800ce46:	2b03      	cmp	r3, #3
 800ce48:	d016      	beq.n	800ce78 <USBD_StdEPReq+0x112>
 800ce4a:	e030      	b.n	800ceae <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ce4c:	7bbb      	ldrb	r3, [r7, #14]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d00d      	beq.n	800ce6e <USBD_StdEPReq+0x108>
 800ce52:	7bbb      	ldrb	r3, [r7, #14]
 800ce54:	2b80      	cmp	r3, #128	; 0x80
 800ce56:	d00a      	beq.n	800ce6e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ce58:	7bbb      	ldrb	r3, [r7, #14]
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f001 f8df 	bl	800e020 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce62:	2180      	movs	r1, #128	; 0x80
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f001 f8db 	bl	800e020 <USBD_LL_StallEP>
 800ce6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ce6c:	e025      	b.n	800ceba <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ce6e:	6839      	ldr	r1, [r7, #0]
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f000 fc33 	bl	800d6dc <USBD_CtlError>
              break;
 800ce76:	e020      	b.n	800ceba <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	885b      	ldrh	r3, [r3, #2]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d11b      	bne.n	800ceb8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ce80:	7bbb      	ldrb	r3, [r7, #14]
 800ce82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d004      	beq.n	800ce94 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ce8a:	7bbb      	ldrb	r3, [r7, #14]
 800ce8c:	4619      	mov	r1, r3
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f001 f8e5 	bl	800e05e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f000 fcec 	bl	800d872 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cea0:	689b      	ldr	r3, [r3, #8]
 800cea2:	6839      	ldr	r1, [r7, #0]
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	4798      	blx	r3
 800cea8:	4603      	mov	r3, r0
 800ceaa:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ceac:	e004      	b.n	800ceb8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ceae:	6839      	ldr	r1, [r7, #0]
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f000 fc13 	bl	800d6dc <USBD_CtlError>
              break;
 800ceb6:	e000      	b.n	800ceba <USBD_StdEPReq+0x154>
              break;
 800ceb8:	bf00      	nop
          }
          break;
 800ceba:	e0ab      	b.n	800d014 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cec2:	b2db      	uxtb	r3, r3
 800cec4:	2b02      	cmp	r3, #2
 800cec6:	d002      	beq.n	800cece <USBD_StdEPReq+0x168>
 800cec8:	2b03      	cmp	r3, #3
 800ceca:	d032      	beq.n	800cf32 <USBD_StdEPReq+0x1cc>
 800cecc:	e097      	b.n	800cffe <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cece:	7bbb      	ldrb	r3, [r7, #14]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d007      	beq.n	800cee4 <USBD_StdEPReq+0x17e>
 800ced4:	7bbb      	ldrb	r3, [r7, #14]
 800ced6:	2b80      	cmp	r3, #128	; 0x80
 800ced8:	d004      	beq.n	800cee4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ceda:	6839      	ldr	r1, [r7, #0]
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f000 fbfd 	bl	800d6dc <USBD_CtlError>
                break;
 800cee2:	e091      	b.n	800d008 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cee4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	da0b      	bge.n	800cf04 <USBD_StdEPReq+0x19e>
 800ceec:	7bbb      	ldrb	r3, [r7, #14]
 800ceee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cef2:	4613      	mov	r3, r2
 800cef4:	009b      	lsls	r3, r3, #2
 800cef6:	4413      	add	r3, r2
 800cef8:	009b      	lsls	r3, r3, #2
 800cefa:	3310      	adds	r3, #16
 800cefc:	687a      	ldr	r2, [r7, #4]
 800cefe:	4413      	add	r3, r2
 800cf00:	3304      	adds	r3, #4
 800cf02:	e00b      	b.n	800cf1c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cf04:	7bbb      	ldrb	r3, [r7, #14]
 800cf06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf0a:	4613      	mov	r3, r2
 800cf0c:	009b      	lsls	r3, r3, #2
 800cf0e:	4413      	add	r3, r2
 800cf10:	009b      	lsls	r3, r3, #2
 800cf12:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cf16:	687a      	ldr	r2, [r7, #4]
 800cf18:	4413      	add	r3, r2
 800cf1a:	3304      	adds	r3, #4
 800cf1c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	2200      	movs	r2, #0
 800cf22:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	2202      	movs	r2, #2
 800cf28:	4619      	mov	r1, r3
 800cf2a:	6878      	ldr	r0, [r7, #4]
 800cf2c:	f000 fc47 	bl	800d7be <USBD_CtlSendData>
              break;
 800cf30:	e06a      	b.n	800d008 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cf32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	da11      	bge.n	800cf5e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cf3a:	7bbb      	ldrb	r3, [r7, #14]
 800cf3c:	f003 020f 	and.w	r2, r3, #15
 800cf40:	6879      	ldr	r1, [r7, #4]
 800cf42:	4613      	mov	r3, r2
 800cf44:	009b      	lsls	r3, r3, #2
 800cf46:	4413      	add	r3, r2
 800cf48:	009b      	lsls	r3, r3, #2
 800cf4a:	440b      	add	r3, r1
 800cf4c:	3324      	adds	r3, #36	; 0x24
 800cf4e:	881b      	ldrh	r3, [r3, #0]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d117      	bne.n	800cf84 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cf54:	6839      	ldr	r1, [r7, #0]
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f000 fbc0 	bl	800d6dc <USBD_CtlError>
                  break;
 800cf5c:	e054      	b.n	800d008 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cf5e:	7bbb      	ldrb	r3, [r7, #14]
 800cf60:	f003 020f 	and.w	r2, r3, #15
 800cf64:	6879      	ldr	r1, [r7, #4]
 800cf66:	4613      	mov	r3, r2
 800cf68:	009b      	lsls	r3, r3, #2
 800cf6a:	4413      	add	r3, r2
 800cf6c:	009b      	lsls	r3, r3, #2
 800cf6e:	440b      	add	r3, r1
 800cf70:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cf74:	881b      	ldrh	r3, [r3, #0]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d104      	bne.n	800cf84 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cf7a:	6839      	ldr	r1, [r7, #0]
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f000 fbad 	bl	800d6dc <USBD_CtlError>
                  break;
 800cf82:	e041      	b.n	800d008 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	da0b      	bge.n	800cfa4 <USBD_StdEPReq+0x23e>
 800cf8c:	7bbb      	ldrb	r3, [r7, #14]
 800cf8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cf92:	4613      	mov	r3, r2
 800cf94:	009b      	lsls	r3, r3, #2
 800cf96:	4413      	add	r3, r2
 800cf98:	009b      	lsls	r3, r3, #2
 800cf9a:	3310      	adds	r3, #16
 800cf9c:	687a      	ldr	r2, [r7, #4]
 800cf9e:	4413      	add	r3, r2
 800cfa0:	3304      	adds	r3, #4
 800cfa2:	e00b      	b.n	800cfbc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cfa4:	7bbb      	ldrb	r3, [r7, #14]
 800cfa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cfaa:	4613      	mov	r3, r2
 800cfac:	009b      	lsls	r3, r3, #2
 800cfae:	4413      	add	r3, r2
 800cfb0:	009b      	lsls	r3, r3, #2
 800cfb2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cfb6:	687a      	ldr	r2, [r7, #4]
 800cfb8:	4413      	add	r3, r2
 800cfba:	3304      	adds	r3, #4
 800cfbc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cfbe:	7bbb      	ldrb	r3, [r7, #14]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d002      	beq.n	800cfca <USBD_StdEPReq+0x264>
 800cfc4:	7bbb      	ldrb	r3, [r7, #14]
 800cfc6:	2b80      	cmp	r3, #128	; 0x80
 800cfc8:	d103      	bne.n	800cfd2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	2200      	movs	r2, #0
 800cfce:	601a      	str	r2, [r3, #0]
 800cfd0:	e00e      	b.n	800cff0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cfd2:	7bbb      	ldrb	r3, [r7, #14]
 800cfd4:	4619      	mov	r1, r3
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f001 f860 	bl	800e09c <USBD_LL_IsStallEP>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d003      	beq.n	800cfea <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	2201      	movs	r2, #1
 800cfe6:	601a      	str	r2, [r3, #0]
 800cfe8:	e002      	b.n	800cff0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	2200      	movs	r2, #0
 800cfee:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	2202      	movs	r2, #2
 800cff4:	4619      	mov	r1, r3
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f000 fbe1 	bl	800d7be <USBD_CtlSendData>
              break;
 800cffc:	e004      	b.n	800d008 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800cffe:	6839      	ldr	r1, [r7, #0]
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f000 fb6b 	bl	800d6dc <USBD_CtlError>
              break;
 800d006:	bf00      	nop
          }
          break;
 800d008:	e004      	b.n	800d014 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800d00a:	6839      	ldr	r1, [r7, #0]
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f000 fb65 	bl	800d6dc <USBD_CtlError>
          break;
 800d012:	bf00      	nop
      }
      break;
 800d014:	e004      	b.n	800d020 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800d016:	6839      	ldr	r1, [r7, #0]
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	f000 fb5f 	bl	800d6dc <USBD_CtlError>
      break;
 800d01e:	bf00      	nop
  }

  return ret;
 800d020:	7bfb      	ldrb	r3, [r7, #15]
}
 800d022:	4618      	mov	r0, r3
 800d024:	3710      	adds	r7, #16
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
	...

0800d02c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b084      	sub	sp, #16
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d036:	2300      	movs	r3, #0
 800d038:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d03a:	2300      	movs	r3, #0
 800d03c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d03e:	2300      	movs	r3, #0
 800d040:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	885b      	ldrh	r3, [r3, #2]
 800d046:	0a1b      	lsrs	r3, r3, #8
 800d048:	b29b      	uxth	r3, r3
 800d04a:	3b01      	subs	r3, #1
 800d04c:	2b0e      	cmp	r3, #14
 800d04e:	f200 8152 	bhi.w	800d2f6 <USBD_GetDescriptor+0x2ca>
 800d052:	a201      	add	r2, pc, #4	; (adr r2, 800d058 <USBD_GetDescriptor+0x2c>)
 800d054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d058:	0800d0c9 	.word	0x0800d0c9
 800d05c:	0800d0e1 	.word	0x0800d0e1
 800d060:	0800d121 	.word	0x0800d121
 800d064:	0800d2f7 	.word	0x0800d2f7
 800d068:	0800d2f7 	.word	0x0800d2f7
 800d06c:	0800d297 	.word	0x0800d297
 800d070:	0800d2c3 	.word	0x0800d2c3
 800d074:	0800d2f7 	.word	0x0800d2f7
 800d078:	0800d2f7 	.word	0x0800d2f7
 800d07c:	0800d2f7 	.word	0x0800d2f7
 800d080:	0800d2f7 	.word	0x0800d2f7
 800d084:	0800d2f7 	.word	0x0800d2f7
 800d088:	0800d2f7 	.word	0x0800d2f7
 800d08c:	0800d2f7 	.word	0x0800d2f7
 800d090:	0800d095 	.word	0x0800d095
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d09a:	69db      	ldr	r3, [r3, #28]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d00b      	beq.n	800d0b8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0a6:	69db      	ldr	r3, [r3, #28]
 800d0a8:	687a      	ldr	r2, [r7, #4]
 800d0aa:	7c12      	ldrb	r2, [r2, #16]
 800d0ac:	f107 0108 	add.w	r1, r7, #8
 800d0b0:	4610      	mov	r0, r2
 800d0b2:	4798      	blx	r3
 800d0b4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d0b6:	e126      	b.n	800d306 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d0b8:	6839      	ldr	r1, [r7, #0]
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f000 fb0e 	bl	800d6dc <USBD_CtlError>
        err++;
 800d0c0:	7afb      	ldrb	r3, [r7, #11]
 800d0c2:	3301      	adds	r3, #1
 800d0c4:	72fb      	strb	r3, [r7, #11]
      break;
 800d0c6:	e11e      	b.n	800d306 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	687a      	ldr	r2, [r7, #4]
 800d0d2:	7c12      	ldrb	r2, [r2, #16]
 800d0d4:	f107 0108 	add.w	r1, r7, #8
 800d0d8:	4610      	mov	r0, r2
 800d0da:	4798      	blx	r3
 800d0dc:	60f8      	str	r0, [r7, #12]
      break;
 800d0de:	e112      	b.n	800d306 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	7c1b      	ldrb	r3, [r3, #16]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d10d      	bne.n	800d104 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0f0:	f107 0208 	add.w	r2, r7, #8
 800d0f4:	4610      	mov	r0, r2
 800d0f6:	4798      	blx	r3
 800d0f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	2202      	movs	r2, #2
 800d100:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d102:	e100      	b.n	800d306 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d10c:	f107 0208 	add.w	r2, r7, #8
 800d110:	4610      	mov	r0, r2
 800d112:	4798      	blx	r3
 800d114:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	3301      	adds	r3, #1
 800d11a:	2202      	movs	r2, #2
 800d11c:	701a      	strb	r2, [r3, #0]
      break;
 800d11e:	e0f2      	b.n	800d306 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	885b      	ldrh	r3, [r3, #2]
 800d124:	b2db      	uxtb	r3, r3
 800d126:	2b05      	cmp	r3, #5
 800d128:	f200 80ac 	bhi.w	800d284 <USBD_GetDescriptor+0x258>
 800d12c:	a201      	add	r2, pc, #4	; (adr r2, 800d134 <USBD_GetDescriptor+0x108>)
 800d12e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d132:	bf00      	nop
 800d134:	0800d14d 	.word	0x0800d14d
 800d138:	0800d181 	.word	0x0800d181
 800d13c:	0800d1b5 	.word	0x0800d1b5
 800d140:	0800d1e9 	.word	0x0800d1e9
 800d144:	0800d21d 	.word	0x0800d21d
 800d148:	0800d251 	.word	0x0800d251
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d152:	685b      	ldr	r3, [r3, #4]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d00b      	beq.n	800d170 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d15e:	685b      	ldr	r3, [r3, #4]
 800d160:	687a      	ldr	r2, [r7, #4]
 800d162:	7c12      	ldrb	r2, [r2, #16]
 800d164:	f107 0108 	add.w	r1, r7, #8
 800d168:	4610      	mov	r0, r2
 800d16a:	4798      	blx	r3
 800d16c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d16e:	e091      	b.n	800d294 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d170:	6839      	ldr	r1, [r7, #0]
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f000 fab2 	bl	800d6dc <USBD_CtlError>
            err++;
 800d178:	7afb      	ldrb	r3, [r7, #11]
 800d17a:	3301      	adds	r3, #1
 800d17c:	72fb      	strb	r3, [r7, #11]
          break;
 800d17e:	e089      	b.n	800d294 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d186:	689b      	ldr	r3, [r3, #8]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d00b      	beq.n	800d1a4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d192:	689b      	ldr	r3, [r3, #8]
 800d194:	687a      	ldr	r2, [r7, #4]
 800d196:	7c12      	ldrb	r2, [r2, #16]
 800d198:	f107 0108 	add.w	r1, r7, #8
 800d19c:	4610      	mov	r0, r2
 800d19e:	4798      	blx	r3
 800d1a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d1a2:	e077      	b.n	800d294 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d1a4:	6839      	ldr	r1, [r7, #0]
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f000 fa98 	bl	800d6dc <USBD_CtlError>
            err++;
 800d1ac:	7afb      	ldrb	r3, [r7, #11]
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	72fb      	strb	r3, [r7, #11]
          break;
 800d1b2:	e06f      	b.n	800d294 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1ba:	68db      	ldr	r3, [r3, #12]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d00b      	beq.n	800d1d8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1c6:	68db      	ldr	r3, [r3, #12]
 800d1c8:	687a      	ldr	r2, [r7, #4]
 800d1ca:	7c12      	ldrb	r2, [r2, #16]
 800d1cc:	f107 0108 	add.w	r1, r7, #8
 800d1d0:	4610      	mov	r0, r2
 800d1d2:	4798      	blx	r3
 800d1d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d1d6:	e05d      	b.n	800d294 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d1d8:	6839      	ldr	r1, [r7, #0]
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f000 fa7e 	bl	800d6dc <USBD_CtlError>
            err++;
 800d1e0:	7afb      	ldrb	r3, [r7, #11]
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	72fb      	strb	r3, [r7, #11]
          break;
 800d1e6:	e055      	b.n	800d294 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1ee:	691b      	ldr	r3, [r3, #16]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d00b      	beq.n	800d20c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1fa:	691b      	ldr	r3, [r3, #16]
 800d1fc:	687a      	ldr	r2, [r7, #4]
 800d1fe:	7c12      	ldrb	r2, [r2, #16]
 800d200:	f107 0108 	add.w	r1, r7, #8
 800d204:	4610      	mov	r0, r2
 800d206:	4798      	blx	r3
 800d208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d20a:	e043      	b.n	800d294 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d20c:	6839      	ldr	r1, [r7, #0]
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f000 fa64 	bl	800d6dc <USBD_CtlError>
            err++;
 800d214:	7afb      	ldrb	r3, [r7, #11]
 800d216:	3301      	adds	r3, #1
 800d218:	72fb      	strb	r3, [r7, #11]
          break;
 800d21a:	e03b      	b.n	800d294 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d222:	695b      	ldr	r3, [r3, #20]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d00b      	beq.n	800d240 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d22e:	695b      	ldr	r3, [r3, #20]
 800d230:	687a      	ldr	r2, [r7, #4]
 800d232:	7c12      	ldrb	r2, [r2, #16]
 800d234:	f107 0108 	add.w	r1, r7, #8
 800d238:	4610      	mov	r0, r2
 800d23a:	4798      	blx	r3
 800d23c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d23e:	e029      	b.n	800d294 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d240:	6839      	ldr	r1, [r7, #0]
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f000 fa4a 	bl	800d6dc <USBD_CtlError>
            err++;
 800d248:	7afb      	ldrb	r3, [r7, #11]
 800d24a:	3301      	adds	r3, #1
 800d24c:	72fb      	strb	r3, [r7, #11]
          break;
 800d24e:	e021      	b.n	800d294 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d256:	699b      	ldr	r3, [r3, #24]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d00b      	beq.n	800d274 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d262:	699b      	ldr	r3, [r3, #24]
 800d264:	687a      	ldr	r2, [r7, #4]
 800d266:	7c12      	ldrb	r2, [r2, #16]
 800d268:	f107 0108 	add.w	r1, r7, #8
 800d26c:	4610      	mov	r0, r2
 800d26e:	4798      	blx	r3
 800d270:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d272:	e00f      	b.n	800d294 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d274:	6839      	ldr	r1, [r7, #0]
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f000 fa30 	bl	800d6dc <USBD_CtlError>
            err++;
 800d27c:	7afb      	ldrb	r3, [r7, #11]
 800d27e:	3301      	adds	r3, #1
 800d280:	72fb      	strb	r3, [r7, #11]
          break;
 800d282:	e007      	b.n	800d294 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d284:	6839      	ldr	r1, [r7, #0]
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f000 fa28 	bl	800d6dc <USBD_CtlError>
          err++;
 800d28c:	7afb      	ldrb	r3, [r7, #11]
 800d28e:	3301      	adds	r3, #1
 800d290:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800d292:	bf00      	nop
      }
      break;
 800d294:	e037      	b.n	800d306 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	7c1b      	ldrb	r3, [r3, #16]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d109      	bne.n	800d2b2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2a6:	f107 0208 	add.w	r2, r7, #8
 800d2aa:	4610      	mov	r0, r2
 800d2ac:	4798      	blx	r3
 800d2ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d2b0:	e029      	b.n	800d306 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d2b2:	6839      	ldr	r1, [r7, #0]
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f000 fa11 	bl	800d6dc <USBD_CtlError>
        err++;
 800d2ba:	7afb      	ldrb	r3, [r7, #11]
 800d2bc:	3301      	adds	r3, #1
 800d2be:	72fb      	strb	r3, [r7, #11]
      break;
 800d2c0:	e021      	b.n	800d306 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	7c1b      	ldrb	r3, [r3, #16]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d10d      	bne.n	800d2e6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2d2:	f107 0208 	add.w	r2, r7, #8
 800d2d6:	4610      	mov	r0, r2
 800d2d8:	4798      	blx	r3
 800d2da:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	3301      	adds	r3, #1
 800d2e0:	2207      	movs	r2, #7
 800d2e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d2e4:	e00f      	b.n	800d306 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d2e6:	6839      	ldr	r1, [r7, #0]
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f000 f9f7 	bl	800d6dc <USBD_CtlError>
        err++;
 800d2ee:	7afb      	ldrb	r3, [r7, #11]
 800d2f0:	3301      	adds	r3, #1
 800d2f2:	72fb      	strb	r3, [r7, #11]
      break;
 800d2f4:	e007      	b.n	800d306 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d2f6:	6839      	ldr	r1, [r7, #0]
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f000 f9ef 	bl	800d6dc <USBD_CtlError>
      err++;
 800d2fe:	7afb      	ldrb	r3, [r7, #11]
 800d300:	3301      	adds	r3, #1
 800d302:	72fb      	strb	r3, [r7, #11]
      break;
 800d304:	bf00      	nop
  }

  if (err != 0U)
 800d306:	7afb      	ldrb	r3, [r7, #11]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d11e      	bne.n	800d34a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	88db      	ldrh	r3, [r3, #6]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d016      	beq.n	800d342 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d314:	893b      	ldrh	r3, [r7, #8]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d00e      	beq.n	800d338 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	88da      	ldrh	r2, [r3, #6]
 800d31e:	893b      	ldrh	r3, [r7, #8]
 800d320:	4293      	cmp	r3, r2
 800d322:	bf28      	it	cs
 800d324:	4613      	movcs	r3, r2
 800d326:	b29b      	uxth	r3, r3
 800d328:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d32a:	893b      	ldrh	r3, [r7, #8]
 800d32c:	461a      	mov	r2, r3
 800d32e:	68f9      	ldr	r1, [r7, #12]
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f000 fa44 	bl	800d7be <USBD_CtlSendData>
 800d336:	e009      	b.n	800d34c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d338:	6839      	ldr	r1, [r7, #0]
 800d33a:	6878      	ldr	r0, [r7, #4]
 800d33c:	f000 f9ce 	bl	800d6dc <USBD_CtlError>
 800d340:	e004      	b.n	800d34c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f000 fa95 	bl	800d872 <USBD_CtlSendStatus>
 800d348:	e000      	b.n	800d34c <USBD_GetDescriptor+0x320>
    return;
 800d34a:	bf00      	nop
  }
}
 800d34c:	3710      	adds	r7, #16
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}
 800d352:	bf00      	nop

0800d354 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b084      	sub	sp, #16
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	889b      	ldrh	r3, [r3, #4]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d131      	bne.n	800d3ca <USBD_SetAddress+0x76>
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	88db      	ldrh	r3, [r3, #6]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d12d      	bne.n	800d3ca <USBD_SetAddress+0x76>
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	885b      	ldrh	r3, [r3, #2]
 800d372:	2b7f      	cmp	r3, #127	; 0x7f
 800d374:	d829      	bhi.n	800d3ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	885b      	ldrh	r3, [r3, #2]
 800d37a:	b2db      	uxtb	r3, r3
 800d37c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d380:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d388:	b2db      	uxtb	r3, r3
 800d38a:	2b03      	cmp	r3, #3
 800d38c:	d104      	bne.n	800d398 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d38e:	6839      	ldr	r1, [r7, #0]
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f000 f9a3 	bl	800d6dc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d396:	e01d      	b.n	800d3d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	7bfa      	ldrb	r2, [r7, #15]
 800d39c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d3a0:	7bfb      	ldrb	r3, [r7, #15]
 800d3a2:	4619      	mov	r1, r3
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f000 fea6 	bl	800e0f6 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f000 fa61 	bl	800d872 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d3b0:	7bfb      	ldrb	r3, [r7, #15]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d004      	beq.n	800d3c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2202      	movs	r2, #2
 800d3ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3be:	e009      	b.n	800d3d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2201      	movs	r2, #1
 800d3c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3c8:	e004      	b.n	800d3d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d3ca:	6839      	ldr	r1, [r7, #0]
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f000 f985 	bl	800d6dc <USBD_CtlError>
  }
}
 800d3d2:	bf00      	nop
 800d3d4:	bf00      	nop
 800d3d6:	3710      	adds	r7, #16
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}

0800d3dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b084      	sub	sp, #16
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	885b      	ldrh	r3, [r3, #2]
 800d3ee:	b2da      	uxtb	r2, r3
 800d3f0:	4b4c      	ldr	r3, [pc, #304]	; (800d524 <USBD_SetConfig+0x148>)
 800d3f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d3f4:	4b4b      	ldr	r3, [pc, #300]	; (800d524 <USBD_SetConfig+0x148>)
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	2b01      	cmp	r3, #1
 800d3fa:	d905      	bls.n	800d408 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d3fc:	6839      	ldr	r1, [r7, #0]
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f000 f96c 	bl	800d6dc <USBD_CtlError>
    return USBD_FAIL;
 800d404:	2303      	movs	r3, #3
 800d406:	e088      	b.n	800d51a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d40e:	b2db      	uxtb	r3, r3
 800d410:	2b02      	cmp	r3, #2
 800d412:	d002      	beq.n	800d41a <USBD_SetConfig+0x3e>
 800d414:	2b03      	cmp	r3, #3
 800d416:	d025      	beq.n	800d464 <USBD_SetConfig+0x88>
 800d418:	e071      	b.n	800d4fe <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d41a:	4b42      	ldr	r3, [pc, #264]	; (800d524 <USBD_SetConfig+0x148>)
 800d41c:	781b      	ldrb	r3, [r3, #0]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d01c      	beq.n	800d45c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d422:	4b40      	ldr	r3, [pc, #256]	; (800d524 <USBD_SetConfig+0x148>)
 800d424:	781b      	ldrb	r3, [r3, #0]
 800d426:	461a      	mov	r2, r3
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d42c:	4b3d      	ldr	r3, [pc, #244]	; (800d524 <USBD_SetConfig+0x148>)
 800d42e:	781b      	ldrb	r3, [r3, #0]
 800d430:	4619      	mov	r1, r3
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f7ff f991 	bl	800c75a <USBD_SetClassConfig>
 800d438:	4603      	mov	r3, r0
 800d43a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d43c:	7bfb      	ldrb	r3, [r7, #15]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d004      	beq.n	800d44c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d442:	6839      	ldr	r1, [r7, #0]
 800d444:	6878      	ldr	r0, [r7, #4]
 800d446:	f000 f949 	bl	800d6dc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d44a:	e065      	b.n	800d518 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f000 fa10 	bl	800d872 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2203      	movs	r2, #3
 800d456:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d45a:	e05d      	b.n	800d518 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f000 fa08 	bl	800d872 <USBD_CtlSendStatus>
      break;
 800d462:	e059      	b.n	800d518 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d464:	4b2f      	ldr	r3, [pc, #188]	; (800d524 <USBD_SetConfig+0x148>)
 800d466:	781b      	ldrb	r3, [r3, #0]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d112      	bne.n	800d492 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2202      	movs	r2, #2
 800d470:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d474:	4b2b      	ldr	r3, [pc, #172]	; (800d524 <USBD_SetConfig+0x148>)
 800d476:	781b      	ldrb	r3, [r3, #0]
 800d478:	461a      	mov	r2, r3
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d47e:	4b29      	ldr	r3, [pc, #164]	; (800d524 <USBD_SetConfig+0x148>)
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	4619      	mov	r1, r3
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f7ff f984 	bl	800c792 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f000 f9f1 	bl	800d872 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d490:	e042      	b.n	800d518 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d492:	4b24      	ldr	r3, [pc, #144]	; (800d524 <USBD_SetConfig+0x148>)
 800d494:	781b      	ldrb	r3, [r3, #0]
 800d496:	461a      	mov	r2, r3
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	685b      	ldr	r3, [r3, #4]
 800d49c:	429a      	cmp	r2, r3
 800d49e:	d02a      	beq.n	800d4f6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	685b      	ldr	r3, [r3, #4]
 800d4a4:	b2db      	uxtb	r3, r3
 800d4a6:	4619      	mov	r1, r3
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f7ff f972 	bl	800c792 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d4ae:	4b1d      	ldr	r3, [pc, #116]	; (800d524 <USBD_SetConfig+0x148>)
 800d4b0:	781b      	ldrb	r3, [r3, #0]
 800d4b2:	461a      	mov	r2, r3
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d4b8:	4b1a      	ldr	r3, [pc, #104]	; (800d524 <USBD_SetConfig+0x148>)
 800d4ba:	781b      	ldrb	r3, [r3, #0]
 800d4bc:	4619      	mov	r1, r3
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	f7ff f94b 	bl	800c75a <USBD_SetClassConfig>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d4c8:	7bfb      	ldrb	r3, [r7, #15]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d00f      	beq.n	800d4ee <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d4ce:	6839      	ldr	r1, [r7, #0]
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f000 f903 	bl	800d6dc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	b2db      	uxtb	r3, r3
 800d4dc:	4619      	mov	r1, r3
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f7ff f957 	bl	800c792 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2202      	movs	r2, #2
 800d4e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d4ec:	e014      	b.n	800d518 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f000 f9bf 	bl	800d872 <USBD_CtlSendStatus>
      break;
 800d4f4:	e010      	b.n	800d518 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f000 f9bb 	bl	800d872 <USBD_CtlSendStatus>
      break;
 800d4fc:	e00c      	b.n	800d518 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d4fe:	6839      	ldr	r1, [r7, #0]
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f000 f8eb 	bl	800d6dc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d506:	4b07      	ldr	r3, [pc, #28]	; (800d524 <USBD_SetConfig+0x148>)
 800d508:	781b      	ldrb	r3, [r3, #0]
 800d50a:	4619      	mov	r1, r3
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f7ff f940 	bl	800c792 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d512:	2303      	movs	r3, #3
 800d514:	73fb      	strb	r3, [r7, #15]
      break;
 800d516:	bf00      	nop
  }

  return ret;
 800d518:	7bfb      	ldrb	r3, [r7, #15]
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3710      	adds	r7, #16
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}
 800d522:	bf00      	nop
 800d524:	20002d58 	.word	0x20002d58

0800d528 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b082      	sub	sp, #8
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	88db      	ldrh	r3, [r3, #6]
 800d536:	2b01      	cmp	r3, #1
 800d538:	d004      	beq.n	800d544 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d53a:	6839      	ldr	r1, [r7, #0]
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f000 f8cd 	bl	800d6dc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d542:	e023      	b.n	800d58c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d54a:	b2db      	uxtb	r3, r3
 800d54c:	2b02      	cmp	r3, #2
 800d54e:	dc02      	bgt.n	800d556 <USBD_GetConfig+0x2e>
 800d550:	2b00      	cmp	r3, #0
 800d552:	dc03      	bgt.n	800d55c <USBD_GetConfig+0x34>
 800d554:	e015      	b.n	800d582 <USBD_GetConfig+0x5a>
 800d556:	2b03      	cmp	r3, #3
 800d558:	d00b      	beq.n	800d572 <USBD_GetConfig+0x4a>
 800d55a:	e012      	b.n	800d582 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2200      	movs	r2, #0
 800d560:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	3308      	adds	r3, #8
 800d566:	2201      	movs	r2, #1
 800d568:	4619      	mov	r1, r3
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f000 f927 	bl	800d7be <USBD_CtlSendData>
        break;
 800d570:	e00c      	b.n	800d58c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	3304      	adds	r3, #4
 800d576:	2201      	movs	r2, #1
 800d578:	4619      	mov	r1, r3
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f000 f91f 	bl	800d7be <USBD_CtlSendData>
        break;
 800d580:	e004      	b.n	800d58c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d582:	6839      	ldr	r1, [r7, #0]
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f000 f8a9 	bl	800d6dc <USBD_CtlError>
        break;
 800d58a:	bf00      	nop
}
 800d58c:	bf00      	nop
 800d58e:	3708      	adds	r7, #8
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}

0800d594 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b082      	sub	sp, #8
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5a4:	b2db      	uxtb	r3, r3
 800d5a6:	3b01      	subs	r3, #1
 800d5a8:	2b02      	cmp	r3, #2
 800d5aa:	d81e      	bhi.n	800d5ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	88db      	ldrh	r3, [r3, #6]
 800d5b0:	2b02      	cmp	r3, #2
 800d5b2:	d004      	beq.n	800d5be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d5b4:	6839      	ldr	r1, [r7, #0]
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f000 f890 	bl	800d6dc <USBD_CtlError>
        break;
 800d5bc:	e01a      	b.n	800d5f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2201      	movs	r2, #1
 800d5c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d005      	beq.n	800d5da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	68db      	ldr	r3, [r3, #12]
 800d5d2:	f043 0202 	orr.w	r2, r3, #2
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	330c      	adds	r3, #12
 800d5de:	2202      	movs	r2, #2
 800d5e0:	4619      	mov	r1, r3
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f000 f8eb 	bl	800d7be <USBD_CtlSendData>
      break;
 800d5e8:	e004      	b.n	800d5f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d5ea:	6839      	ldr	r1, [r7, #0]
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f000 f875 	bl	800d6dc <USBD_CtlError>
      break;
 800d5f2:	bf00      	nop
  }
}
 800d5f4:	bf00      	nop
 800d5f6:	3708      	adds	r7, #8
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}

0800d5fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b082      	sub	sp, #8
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	885b      	ldrh	r3, [r3, #2]
 800d60a:	2b01      	cmp	r3, #1
 800d60c:	d106      	bne.n	800d61c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2201      	movs	r2, #1
 800d612:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f000 f92b 	bl	800d872 <USBD_CtlSendStatus>
  }
}
 800d61c:	bf00      	nop
 800d61e:	3708      	adds	r7, #8
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}

0800d624 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b082      	sub	sp, #8
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d634:	b2db      	uxtb	r3, r3
 800d636:	3b01      	subs	r3, #1
 800d638:	2b02      	cmp	r3, #2
 800d63a:	d80b      	bhi.n	800d654 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	885b      	ldrh	r3, [r3, #2]
 800d640:	2b01      	cmp	r3, #1
 800d642:	d10c      	bne.n	800d65e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2200      	movs	r2, #0
 800d648:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f000 f910 	bl	800d872 <USBD_CtlSendStatus>
      }
      break;
 800d652:	e004      	b.n	800d65e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d654:	6839      	ldr	r1, [r7, #0]
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f000 f840 	bl	800d6dc <USBD_CtlError>
      break;
 800d65c:	e000      	b.n	800d660 <USBD_ClrFeature+0x3c>
      break;
 800d65e:	bf00      	nop
  }
}
 800d660:	bf00      	nop
 800d662:	3708      	adds	r7, #8
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}

0800d668 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b084      	sub	sp, #16
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
 800d670:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	781a      	ldrb	r2, [r3, #0]
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	3301      	adds	r3, #1
 800d682:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	781a      	ldrb	r2, [r3, #0]
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	3301      	adds	r3, #1
 800d690:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d692:	68f8      	ldr	r0, [r7, #12]
 800d694:	f7ff fa91 	bl	800cbba <SWAPBYTE>
 800d698:	4603      	mov	r3, r0
 800d69a:	461a      	mov	r2, r3
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	3301      	adds	r3, #1
 800d6aa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d6ac:	68f8      	ldr	r0, [r7, #12]
 800d6ae:	f7ff fa84 	bl	800cbba <SWAPBYTE>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	461a      	mov	r2, r3
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	3301      	adds	r3, #1
 800d6be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	3301      	adds	r3, #1
 800d6c4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d6c6:	68f8      	ldr	r0, [r7, #12]
 800d6c8:	f7ff fa77 	bl	800cbba <SWAPBYTE>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	461a      	mov	r2, r3
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	80da      	strh	r2, [r3, #6]
}
 800d6d4:	bf00      	nop
 800d6d6:	3710      	adds	r7, #16
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}

0800d6dc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b082      	sub	sp, #8
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d6e6:	2180      	movs	r1, #128	; 0x80
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f000 fc99 	bl	800e020 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d6ee:	2100      	movs	r1, #0
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f000 fc95 	bl	800e020 <USBD_LL_StallEP>
}
 800d6f6:	bf00      	nop
 800d6f8:	3708      	adds	r7, #8
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}

0800d6fe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d6fe:	b580      	push	{r7, lr}
 800d700:	b086      	sub	sp, #24
 800d702:	af00      	add	r7, sp, #0
 800d704:	60f8      	str	r0, [r7, #12]
 800d706:	60b9      	str	r1, [r7, #8]
 800d708:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d70a:	2300      	movs	r3, #0
 800d70c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d036      	beq.n	800d782 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d718:	6938      	ldr	r0, [r7, #16]
 800d71a:	f000 f836 	bl	800d78a <USBD_GetLen>
 800d71e:	4603      	mov	r3, r0
 800d720:	3301      	adds	r3, #1
 800d722:	b29b      	uxth	r3, r3
 800d724:	005b      	lsls	r3, r3, #1
 800d726:	b29a      	uxth	r2, r3
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d72c:	7dfb      	ldrb	r3, [r7, #23]
 800d72e:	68ba      	ldr	r2, [r7, #8]
 800d730:	4413      	add	r3, r2
 800d732:	687a      	ldr	r2, [r7, #4]
 800d734:	7812      	ldrb	r2, [r2, #0]
 800d736:	701a      	strb	r2, [r3, #0]
  idx++;
 800d738:	7dfb      	ldrb	r3, [r7, #23]
 800d73a:	3301      	adds	r3, #1
 800d73c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d73e:	7dfb      	ldrb	r3, [r7, #23]
 800d740:	68ba      	ldr	r2, [r7, #8]
 800d742:	4413      	add	r3, r2
 800d744:	2203      	movs	r2, #3
 800d746:	701a      	strb	r2, [r3, #0]
  idx++;
 800d748:	7dfb      	ldrb	r3, [r7, #23]
 800d74a:	3301      	adds	r3, #1
 800d74c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d74e:	e013      	b.n	800d778 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d750:	7dfb      	ldrb	r3, [r7, #23]
 800d752:	68ba      	ldr	r2, [r7, #8]
 800d754:	4413      	add	r3, r2
 800d756:	693a      	ldr	r2, [r7, #16]
 800d758:	7812      	ldrb	r2, [r2, #0]
 800d75a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	3301      	adds	r3, #1
 800d760:	613b      	str	r3, [r7, #16]
    idx++;
 800d762:	7dfb      	ldrb	r3, [r7, #23]
 800d764:	3301      	adds	r3, #1
 800d766:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d768:	7dfb      	ldrb	r3, [r7, #23]
 800d76a:	68ba      	ldr	r2, [r7, #8]
 800d76c:	4413      	add	r3, r2
 800d76e:	2200      	movs	r2, #0
 800d770:	701a      	strb	r2, [r3, #0]
    idx++;
 800d772:	7dfb      	ldrb	r3, [r7, #23]
 800d774:	3301      	adds	r3, #1
 800d776:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d778:	693b      	ldr	r3, [r7, #16]
 800d77a:	781b      	ldrb	r3, [r3, #0]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d1e7      	bne.n	800d750 <USBD_GetString+0x52>
 800d780:	e000      	b.n	800d784 <USBD_GetString+0x86>
    return;
 800d782:	bf00      	nop
  }
}
 800d784:	3718      	adds	r7, #24
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}

0800d78a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d78a:	b480      	push	{r7}
 800d78c:	b085      	sub	sp, #20
 800d78e:	af00      	add	r7, sp, #0
 800d790:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d792:	2300      	movs	r3, #0
 800d794:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d79a:	e005      	b.n	800d7a8 <USBD_GetLen+0x1e>
  {
    len++;
 800d79c:	7bfb      	ldrb	r3, [r7, #15]
 800d79e:	3301      	adds	r3, #1
 800d7a0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	3301      	adds	r3, #1
 800d7a6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	781b      	ldrb	r3, [r3, #0]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d1f5      	bne.n	800d79c <USBD_GetLen+0x12>
  }

  return len;
 800d7b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3714      	adds	r7, #20
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7bc:	4770      	bx	lr

0800d7be <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d7be:	b580      	push	{r7, lr}
 800d7c0:	b084      	sub	sp, #16
 800d7c2:	af00      	add	r7, sp, #0
 800d7c4:	60f8      	str	r0, [r7, #12]
 800d7c6:	60b9      	str	r1, [r7, #8]
 800d7c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	2202      	movs	r2, #2
 800d7ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	687a      	ldr	r2, [r7, #4]
 800d7d6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	687a      	ldr	r2, [r7, #4]
 800d7dc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	68ba      	ldr	r2, [r7, #8]
 800d7e2:	2100      	movs	r1, #0
 800d7e4:	68f8      	ldr	r0, [r7, #12]
 800d7e6:	f000 fca5 	bl	800e134 <USBD_LL_Transmit>

  return USBD_OK;
 800d7ea:	2300      	movs	r3, #0
}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	3710      	adds	r7, #16
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}

0800d7f4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b084      	sub	sp, #16
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	60f8      	str	r0, [r7, #12]
 800d7fc:	60b9      	str	r1, [r7, #8]
 800d7fe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	68ba      	ldr	r2, [r7, #8]
 800d804:	2100      	movs	r1, #0
 800d806:	68f8      	ldr	r0, [r7, #12]
 800d808:	f000 fc94 	bl	800e134 <USBD_LL_Transmit>

  return USBD_OK;
 800d80c:	2300      	movs	r3, #0
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3710      	adds	r7, #16
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}

0800d816 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d816:	b580      	push	{r7, lr}
 800d818:	b084      	sub	sp, #16
 800d81a:	af00      	add	r7, sp, #0
 800d81c:	60f8      	str	r0, [r7, #12]
 800d81e:	60b9      	str	r1, [r7, #8]
 800d820:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	2203      	movs	r2, #3
 800d826:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	687a      	ldr	r2, [r7, #4]
 800d82e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	687a      	ldr	r2, [r7, #4]
 800d836:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	68ba      	ldr	r2, [r7, #8]
 800d83e:	2100      	movs	r1, #0
 800d840:	68f8      	ldr	r0, [r7, #12]
 800d842:	f000 fc98 	bl	800e176 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d846:	2300      	movs	r3, #0
}
 800d848:	4618      	mov	r0, r3
 800d84a:	3710      	adds	r7, #16
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}

0800d850 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b084      	sub	sp, #16
 800d854:	af00      	add	r7, sp, #0
 800d856:	60f8      	str	r0, [r7, #12]
 800d858:	60b9      	str	r1, [r7, #8]
 800d85a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	68ba      	ldr	r2, [r7, #8]
 800d860:	2100      	movs	r1, #0
 800d862:	68f8      	ldr	r0, [r7, #12]
 800d864:	f000 fc87 	bl	800e176 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d868:	2300      	movs	r3, #0
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3710      	adds	r7, #16
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}

0800d872 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d872:	b580      	push	{r7, lr}
 800d874:	b082      	sub	sp, #8
 800d876:	af00      	add	r7, sp, #0
 800d878:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2204      	movs	r2, #4
 800d87e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d882:	2300      	movs	r3, #0
 800d884:	2200      	movs	r2, #0
 800d886:	2100      	movs	r1, #0
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f000 fc53 	bl	800e134 <USBD_LL_Transmit>

  return USBD_OK;
 800d88e:	2300      	movs	r3, #0
}
 800d890:	4618      	mov	r0, r3
 800d892:	3708      	adds	r7, #8
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}

0800d898 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b082      	sub	sp, #8
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2205      	movs	r2, #5
 800d8a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	2100      	movs	r1, #0
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f000 fc61 	bl	800e176 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d8b4:	2300      	movs	r3, #0
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3708      	adds	r7, #8
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
	...

0800d8c0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	4912      	ldr	r1, [pc, #72]	; (800d910 <MX_USB_Device_Init+0x50>)
 800d8c8:	4812      	ldr	r0, [pc, #72]	; (800d914 <MX_USB_Device_Init+0x54>)
 800d8ca:	f7fe febd 	bl	800c648 <USBD_Init>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d001      	beq.n	800d8d8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800d8d4:	f7f3 ffcc 	bl	8001870 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800d8d8:	490f      	ldr	r1, [pc, #60]	; (800d918 <MX_USB_Device_Init+0x58>)
 800d8da:	480e      	ldr	r0, [pc, #56]	; (800d914 <MX_USB_Device_Init+0x54>)
 800d8dc:	f7fe fef2 	bl	800c6c4 <USBD_RegisterClass>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d001      	beq.n	800d8ea <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800d8e6:	f7f3 ffc3 	bl	8001870 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800d8ea:	490c      	ldr	r1, [pc, #48]	; (800d91c <MX_USB_Device_Init+0x5c>)
 800d8ec:	4809      	ldr	r0, [pc, #36]	; (800d914 <MX_USB_Device_Init+0x54>)
 800d8ee:	f7fe fe05 	bl	800c4fc <USBD_CDC_RegisterInterface>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d001      	beq.n	800d8fc <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800d8f8:	f7f3 ffba 	bl	8001870 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800d8fc:	4805      	ldr	r0, [pc, #20]	; (800d914 <MX_USB_Device_Init+0x54>)
 800d8fe:	f7fe ff15 	bl	800c72c <USBD_Start>
 800d902:	4603      	mov	r3, r0
 800d904:	2b00      	cmp	r3, #0
 800d906:	d001      	beq.n	800d90c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800d908:	f7f3 ffb2 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800d90c:	bf00      	nop
 800d90e:	bd80      	pop	{r7, pc}
 800d910:	20002804 	.word	0x20002804
 800d914:	20002d5c 	.word	0x20002d5c
 800d918:	200026ec 	.word	0x200026ec
 800d91c:	200027f0 	.word	0x200027f0

0800d920 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d924:	2200      	movs	r2, #0
 800d926:	4905      	ldr	r1, [pc, #20]	; (800d93c <CDC_Init_FS+0x1c>)
 800d928:	4805      	ldr	r0, [pc, #20]	; (800d940 <CDC_Init_FS+0x20>)
 800d92a:	f7fe fdfc 	bl	800c526 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d92e:	4905      	ldr	r1, [pc, #20]	; (800d944 <CDC_Init_FS+0x24>)
 800d930:	4803      	ldr	r0, [pc, #12]	; (800d940 <CDC_Init_FS+0x20>)
 800d932:	f7fe fe16 	bl	800c562 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d936:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d938:	4618      	mov	r0, r3
 800d93a:	bd80      	pop	{r7, pc}
 800d93c:	2000382c 	.word	0x2000382c
 800d940:	20002d5c 	.word	0x20002d5c
 800d944:	2000302c 	.word	0x2000302c

0800d948 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d948:	b480      	push	{r7}
 800d94a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d94c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d94e:	4618      	mov	r0, r3
 800d950:	46bd      	mov	sp, r7
 800d952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d956:	4770      	bx	lr

0800d958 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d958:	b480      	push	{r7}
 800d95a:	b083      	sub	sp, #12
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	4603      	mov	r3, r0
 800d960:	6039      	str	r1, [r7, #0]
 800d962:	71fb      	strb	r3, [r7, #7]
 800d964:	4613      	mov	r3, r2
 800d966:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d968:	79fb      	ldrb	r3, [r7, #7]
 800d96a:	2b23      	cmp	r3, #35	; 0x23
 800d96c:	d84a      	bhi.n	800da04 <CDC_Control_FS+0xac>
 800d96e:	a201      	add	r2, pc, #4	; (adr r2, 800d974 <CDC_Control_FS+0x1c>)
 800d970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d974:	0800da05 	.word	0x0800da05
 800d978:	0800da05 	.word	0x0800da05
 800d97c:	0800da05 	.word	0x0800da05
 800d980:	0800da05 	.word	0x0800da05
 800d984:	0800da05 	.word	0x0800da05
 800d988:	0800da05 	.word	0x0800da05
 800d98c:	0800da05 	.word	0x0800da05
 800d990:	0800da05 	.word	0x0800da05
 800d994:	0800da05 	.word	0x0800da05
 800d998:	0800da05 	.word	0x0800da05
 800d99c:	0800da05 	.word	0x0800da05
 800d9a0:	0800da05 	.word	0x0800da05
 800d9a4:	0800da05 	.word	0x0800da05
 800d9a8:	0800da05 	.word	0x0800da05
 800d9ac:	0800da05 	.word	0x0800da05
 800d9b0:	0800da05 	.word	0x0800da05
 800d9b4:	0800da05 	.word	0x0800da05
 800d9b8:	0800da05 	.word	0x0800da05
 800d9bc:	0800da05 	.word	0x0800da05
 800d9c0:	0800da05 	.word	0x0800da05
 800d9c4:	0800da05 	.word	0x0800da05
 800d9c8:	0800da05 	.word	0x0800da05
 800d9cc:	0800da05 	.word	0x0800da05
 800d9d0:	0800da05 	.word	0x0800da05
 800d9d4:	0800da05 	.word	0x0800da05
 800d9d8:	0800da05 	.word	0x0800da05
 800d9dc:	0800da05 	.word	0x0800da05
 800d9e0:	0800da05 	.word	0x0800da05
 800d9e4:	0800da05 	.word	0x0800da05
 800d9e8:	0800da05 	.word	0x0800da05
 800d9ec:	0800da05 	.word	0x0800da05
 800d9f0:	0800da05 	.word	0x0800da05
 800d9f4:	0800da05 	.word	0x0800da05
 800d9f8:	0800da05 	.word	0x0800da05
 800d9fc:	0800da05 	.word	0x0800da05
 800da00:	0800da05 	.word	0x0800da05
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800da04:	bf00      	nop
  }

  return (USBD_OK);
 800da06:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800da08:	4618      	mov	r0, r3
 800da0a:	370c      	adds	r7, #12
 800da0c:	46bd      	mov	sp, r7
 800da0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da12:	4770      	bx	lr

0800da14 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b082      	sub	sp, #8
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
 800da1c:	6039      	str	r1, [r7, #0]
//  memset (UserRxBufferFS, '\0', APP_RX_DATA_SIZE);  // clear the buffer
//  uint8_t len = (uint8_t) Len;
//  if (Buf[0]!='\0') {
//	  memcpy(UserRxBufferFS, Buf, len);  // copy the data to the buffer
//	  memset(Buf, '\0', len);   // clear the Buf also
	  input_received_flag = 1;
 800da1e:	4b07      	ldr	r3, [pc, #28]	; (800da3c <CDC_Receive_FS+0x28>)
 800da20:	2201      	movs	r2, #1
 800da22:	701a      	strb	r2, [r3, #0]
//  }
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800da24:	6879      	ldr	r1, [r7, #4]
 800da26:	4806      	ldr	r0, [pc, #24]	; (800da40 <CDC_Receive_FS+0x2c>)
 800da28:	f7fe fd9b 	bl	800c562 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800da2c:	4804      	ldr	r0, [pc, #16]	; (800da40 <CDC_Receive_FS+0x2c>)
 800da2e:	f7fe fde1 	bl	800c5f4 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 800da32:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800da34:	4618      	mov	r0, r3
 800da36:	3708      	adds	r7, #8
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}
 800da3c:	2000402c 	.word	0x2000402c
 800da40:	20002d5c 	.word	0x20002d5c

0800da44 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b084      	sub	sp, #16
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	460b      	mov	r3, r1
 800da4e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800da50:	2300      	movs	r3, #0
 800da52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800da54:	4b0d      	ldr	r3, [pc, #52]	; (800da8c <CDC_Transmit_FS+0x48>)
 800da56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da5a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800da62:	2b00      	cmp	r3, #0
 800da64:	d001      	beq.n	800da6a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800da66:	2301      	movs	r3, #1
 800da68:	e00b      	b.n	800da82 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800da6a:	887b      	ldrh	r3, [r7, #2]
 800da6c:	461a      	mov	r2, r3
 800da6e:	6879      	ldr	r1, [r7, #4]
 800da70:	4806      	ldr	r0, [pc, #24]	; (800da8c <CDC_Transmit_FS+0x48>)
 800da72:	f7fe fd58 	bl	800c526 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800da76:	4805      	ldr	r0, [pc, #20]	; (800da8c <CDC_Transmit_FS+0x48>)
 800da78:	f7fe fd8c 	bl	800c594 <USBD_CDC_TransmitPacket>
 800da7c:	4603      	mov	r3, r0
 800da7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800da80:	7bfb      	ldrb	r3, [r7, #15]
}
 800da82:	4618      	mov	r0, r3
 800da84:	3710      	adds	r7, #16
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}
 800da8a:	bf00      	nop
 800da8c:	20002d5c 	.word	0x20002d5c

0800da90 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800da90:	b480      	push	{r7}
 800da92:	b087      	sub	sp, #28
 800da94:	af00      	add	r7, sp, #0
 800da96:	60f8      	str	r0, [r7, #12]
 800da98:	60b9      	str	r1, [r7, #8]
 800da9a:	4613      	mov	r3, r2
 800da9c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800da9e:	2300      	movs	r3, #0
 800daa0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800daa2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	371c      	adds	r7, #28
 800daaa:	46bd      	mov	sp, r7
 800daac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab0:	4770      	bx	lr
	...

0800dab4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dab4:	b480      	push	{r7}
 800dab6:	b083      	sub	sp, #12
 800dab8:	af00      	add	r7, sp, #0
 800daba:	4603      	mov	r3, r0
 800dabc:	6039      	str	r1, [r7, #0]
 800dabe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	2212      	movs	r2, #18
 800dac4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800dac6:	4b03      	ldr	r3, [pc, #12]	; (800dad4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800dac8:	4618      	mov	r0, r3
 800daca:	370c      	adds	r7, #12
 800dacc:	46bd      	mov	sp, r7
 800dace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad2:	4770      	bx	lr
 800dad4:	20002824 	.word	0x20002824

0800dad8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dad8:	b480      	push	{r7}
 800dada:	b083      	sub	sp, #12
 800dadc:	af00      	add	r7, sp, #0
 800dade:	4603      	mov	r3, r0
 800dae0:	6039      	str	r1, [r7, #0]
 800dae2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	2204      	movs	r2, #4
 800dae8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800daea:	4b03      	ldr	r3, [pc, #12]	; (800daf8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800daec:	4618      	mov	r0, r3
 800daee:	370c      	adds	r7, #12
 800daf0:	46bd      	mov	sp, r7
 800daf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf6:	4770      	bx	lr
 800daf8:	20002838 	.word	0x20002838

0800dafc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b082      	sub	sp, #8
 800db00:	af00      	add	r7, sp, #0
 800db02:	4603      	mov	r3, r0
 800db04:	6039      	str	r1, [r7, #0]
 800db06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800db08:	79fb      	ldrb	r3, [r7, #7]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d105      	bne.n	800db1a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800db0e:	683a      	ldr	r2, [r7, #0]
 800db10:	4907      	ldr	r1, [pc, #28]	; (800db30 <USBD_CDC_ProductStrDescriptor+0x34>)
 800db12:	4808      	ldr	r0, [pc, #32]	; (800db34 <USBD_CDC_ProductStrDescriptor+0x38>)
 800db14:	f7ff fdf3 	bl	800d6fe <USBD_GetString>
 800db18:	e004      	b.n	800db24 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800db1a:	683a      	ldr	r2, [r7, #0]
 800db1c:	4904      	ldr	r1, [pc, #16]	; (800db30 <USBD_CDC_ProductStrDescriptor+0x34>)
 800db1e:	4805      	ldr	r0, [pc, #20]	; (800db34 <USBD_CDC_ProductStrDescriptor+0x38>)
 800db20:	f7ff fded 	bl	800d6fe <USBD_GetString>
  }
  return USBD_StrDesc;
 800db24:	4b02      	ldr	r3, [pc, #8]	; (800db30 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800db26:	4618      	mov	r0, r3
 800db28:	3708      	adds	r7, #8
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}
 800db2e:	bf00      	nop
 800db30:	20004030 	.word	0x20004030
 800db34:	08010f10 	.word	0x08010f10

0800db38 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b082      	sub	sp, #8
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	4603      	mov	r3, r0
 800db40:	6039      	str	r1, [r7, #0]
 800db42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800db44:	683a      	ldr	r2, [r7, #0]
 800db46:	4904      	ldr	r1, [pc, #16]	; (800db58 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800db48:	4804      	ldr	r0, [pc, #16]	; (800db5c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800db4a:	f7ff fdd8 	bl	800d6fe <USBD_GetString>
  return USBD_StrDesc;
 800db4e:	4b02      	ldr	r3, [pc, #8]	; (800db58 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800db50:	4618      	mov	r0, r3
 800db52:	3708      	adds	r7, #8
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}
 800db58:	20004030 	.word	0x20004030
 800db5c:	08010f28 	.word	0x08010f28

0800db60 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
 800db66:	4603      	mov	r3, r0
 800db68:	6039      	str	r1, [r7, #0]
 800db6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	221a      	movs	r2, #26
 800db70:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800db72:	f000 f843 	bl	800dbfc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800db76:	4b02      	ldr	r3, [pc, #8]	; (800db80 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800db78:	4618      	mov	r0, r3
 800db7a:	3708      	adds	r7, #8
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}
 800db80:	2000283c 	.word	0x2000283c

0800db84 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b082      	sub	sp, #8
 800db88:	af00      	add	r7, sp, #0
 800db8a:	4603      	mov	r3, r0
 800db8c:	6039      	str	r1, [r7, #0]
 800db8e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800db90:	79fb      	ldrb	r3, [r7, #7]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d105      	bne.n	800dba2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800db96:	683a      	ldr	r2, [r7, #0]
 800db98:	4907      	ldr	r1, [pc, #28]	; (800dbb8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800db9a:	4808      	ldr	r0, [pc, #32]	; (800dbbc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800db9c:	f7ff fdaf 	bl	800d6fe <USBD_GetString>
 800dba0:	e004      	b.n	800dbac <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800dba2:	683a      	ldr	r2, [r7, #0]
 800dba4:	4904      	ldr	r1, [pc, #16]	; (800dbb8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800dba6:	4805      	ldr	r0, [pc, #20]	; (800dbbc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800dba8:	f7ff fda9 	bl	800d6fe <USBD_GetString>
  }
  return USBD_StrDesc;
 800dbac:	4b02      	ldr	r3, [pc, #8]	; (800dbb8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3708      	adds	r7, #8
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	20004030 	.word	0x20004030
 800dbbc:	08010f3c 	.word	0x08010f3c

0800dbc0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b082      	sub	sp, #8
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	6039      	str	r1, [r7, #0]
 800dbca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dbcc:	79fb      	ldrb	r3, [r7, #7]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d105      	bne.n	800dbde <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800dbd2:	683a      	ldr	r2, [r7, #0]
 800dbd4:	4907      	ldr	r1, [pc, #28]	; (800dbf4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800dbd6:	4808      	ldr	r0, [pc, #32]	; (800dbf8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800dbd8:	f7ff fd91 	bl	800d6fe <USBD_GetString>
 800dbdc:	e004      	b.n	800dbe8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800dbde:	683a      	ldr	r2, [r7, #0]
 800dbe0:	4904      	ldr	r1, [pc, #16]	; (800dbf4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800dbe2:	4805      	ldr	r0, [pc, #20]	; (800dbf8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800dbe4:	f7ff fd8b 	bl	800d6fe <USBD_GetString>
  }
  return USBD_StrDesc;
 800dbe8:	4b02      	ldr	r3, [pc, #8]	; (800dbf4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	3708      	adds	r7, #8
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	20004030 	.word	0x20004030
 800dbf8:	08010f48 	.word	0x08010f48

0800dbfc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b084      	sub	sp, #16
 800dc00:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dc02:	4b0f      	ldr	r3, [pc, #60]	; (800dc40 <Get_SerialNum+0x44>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dc08:	4b0e      	ldr	r3, [pc, #56]	; (800dc44 <Get_SerialNum+0x48>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dc0e:	4b0e      	ldr	r3, [pc, #56]	; (800dc48 <Get_SerialNum+0x4c>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dc14:	68fa      	ldr	r2, [r7, #12]
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	4413      	add	r3, r2
 800dc1a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d009      	beq.n	800dc36 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dc22:	2208      	movs	r2, #8
 800dc24:	4909      	ldr	r1, [pc, #36]	; (800dc4c <Get_SerialNum+0x50>)
 800dc26:	68f8      	ldr	r0, [r7, #12]
 800dc28:	f000 f814 	bl	800dc54 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dc2c:	2204      	movs	r2, #4
 800dc2e:	4908      	ldr	r1, [pc, #32]	; (800dc50 <Get_SerialNum+0x54>)
 800dc30:	68b8      	ldr	r0, [r7, #8]
 800dc32:	f000 f80f 	bl	800dc54 <IntToUnicode>
  }
}
 800dc36:	bf00      	nop
 800dc38:	3710      	adds	r7, #16
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd80      	pop	{r7, pc}
 800dc3e:	bf00      	nop
 800dc40:	1fff7590 	.word	0x1fff7590
 800dc44:	1fff7594 	.word	0x1fff7594
 800dc48:	1fff7598 	.word	0x1fff7598
 800dc4c:	2000283e 	.word	0x2000283e
 800dc50:	2000284e 	.word	0x2000284e

0800dc54 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b087      	sub	sp, #28
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	60f8      	str	r0, [r7, #12]
 800dc5c:	60b9      	str	r1, [r7, #8]
 800dc5e:	4613      	mov	r3, r2
 800dc60:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dc62:	2300      	movs	r3, #0
 800dc64:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dc66:	2300      	movs	r3, #0
 800dc68:	75fb      	strb	r3, [r7, #23]
 800dc6a:	e027      	b.n	800dcbc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	0f1b      	lsrs	r3, r3, #28
 800dc70:	2b09      	cmp	r3, #9
 800dc72:	d80b      	bhi.n	800dc8c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	0f1b      	lsrs	r3, r3, #28
 800dc78:	b2da      	uxtb	r2, r3
 800dc7a:	7dfb      	ldrb	r3, [r7, #23]
 800dc7c:	005b      	lsls	r3, r3, #1
 800dc7e:	4619      	mov	r1, r3
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	440b      	add	r3, r1
 800dc84:	3230      	adds	r2, #48	; 0x30
 800dc86:	b2d2      	uxtb	r2, r2
 800dc88:	701a      	strb	r2, [r3, #0]
 800dc8a:	e00a      	b.n	800dca2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	0f1b      	lsrs	r3, r3, #28
 800dc90:	b2da      	uxtb	r2, r3
 800dc92:	7dfb      	ldrb	r3, [r7, #23]
 800dc94:	005b      	lsls	r3, r3, #1
 800dc96:	4619      	mov	r1, r3
 800dc98:	68bb      	ldr	r3, [r7, #8]
 800dc9a:	440b      	add	r3, r1
 800dc9c:	3237      	adds	r2, #55	; 0x37
 800dc9e:	b2d2      	uxtb	r2, r2
 800dca0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	011b      	lsls	r3, r3, #4
 800dca6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dca8:	7dfb      	ldrb	r3, [r7, #23]
 800dcaa:	005b      	lsls	r3, r3, #1
 800dcac:	3301      	adds	r3, #1
 800dcae:	68ba      	ldr	r2, [r7, #8]
 800dcb0:	4413      	add	r3, r2
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dcb6:	7dfb      	ldrb	r3, [r7, #23]
 800dcb8:	3301      	adds	r3, #1
 800dcba:	75fb      	strb	r3, [r7, #23]
 800dcbc:	7dfa      	ldrb	r2, [r7, #23]
 800dcbe:	79fb      	ldrb	r3, [r7, #7]
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d3d3      	bcc.n	800dc6c <IntToUnicode+0x18>
  }
}
 800dcc4:	bf00      	nop
 800dcc6:	bf00      	nop
 800dcc8:	371c      	adds	r7, #28
 800dcca:	46bd      	mov	sp, r7
 800dccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd0:	4770      	bx	lr
	...

0800dcd4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b098      	sub	sp, #96	; 0x60
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800dcdc:	f107 030c 	add.w	r3, r7, #12
 800dce0:	2254      	movs	r2, #84	; 0x54
 800dce2:	2100      	movs	r1, #0
 800dce4:	4618      	mov	r0, r3
 800dce6:	f000 fb25 	bl	800e334 <memset>
  if(pcdHandle->Instance==USB)
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	4a15      	ldr	r2, [pc, #84]	; (800dd44 <HAL_PCD_MspInit+0x70>)
 800dcf0:	4293      	cmp	r3, r2
 800dcf2:	d123      	bne.n	800dd3c <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800dcf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dcf8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800dcfa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dcfe:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800dd00:	f107 030c 	add.w	r3, r7, #12
 800dd04:	4618      	mov	r0, r3
 800dd06:	f7f9 fb19 	bl	800733c <HAL_RCCEx_PeriphCLKConfig>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d001      	beq.n	800dd14 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800dd10:	f7f3 fdae 	bl	8001870 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800dd14:	4b0c      	ldr	r3, [pc, #48]	; (800dd48 <HAL_PCD_MspInit+0x74>)
 800dd16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd18:	4a0b      	ldr	r2, [pc, #44]	; (800dd48 <HAL_PCD_MspInit+0x74>)
 800dd1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800dd1e:	6593      	str	r3, [r2, #88]	; 0x58
 800dd20:	4b09      	ldr	r3, [pc, #36]	; (800dd48 <HAL_PCD_MspInit+0x74>)
 800dd22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dd28:	60bb      	str	r3, [r7, #8]
 800dd2a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	2100      	movs	r1, #0
 800dd30:	2014      	movs	r0, #20
 800dd32:	f7f5 fdba 	bl	80038aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800dd36:	2014      	movs	r0, #20
 800dd38:	f7f5 fdd1 	bl	80038de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800dd3c:	bf00      	nop
 800dd3e:	3760      	adds	r7, #96	; 0x60
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}
 800dd44:	40005c00 	.word	0x40005c00
 800dd48:	40021000 	.word	0x40021000

0800dd4c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b082      	sub	sp, #8
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800dd60:	4619      	mov	r1, r3
 800dd62:	4610      	mov	r0, r2
 800dd64:	f7fe fd2d 	bl	800c7c2 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800dd68:	bf00      	nop
 800dd6a:	3708      	adds	r7, #8
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}

0800dd70 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b082      	sub	sp, #8
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	460b      	mov	r3, r1
 800dd7a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800dd82:	78fa      	ldrb	r2, [r7, #3]
 800dd84:	6879      	ldr	r1, [r7, #4]
 800dd86:	4613      	mov	r3, r2
 800dd88:	009b      	lsls	r3, r3, #2
 800dd8a:	4413      	add	r3, r2
 800dd8c:	00db      	lsls	r3, r3, #3
 800dd8e:	440b      	add	r3, r1
 800dd90:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800dd94:	681a      	ldr	r2, [r3, #0]
 800dd96:	78fb      	ldrb	r3, [r7, #3]
 800dd98:	4619      	mov	r1, r3
 800dd9a:	f7fe fd67 	bl	800c86c <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800dd9e:	bf00      	nop
 800dda0:	3708      	adds	r7, #8
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}

0800dda6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dda6:	b580      	push	{r7, lr}
 800dda8:	b082      	sub	sp, #8
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	6078      	str	r0, [r7, #4]
 800ddae:	460b      	mov	r3, r1
 800ddb0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800ddb8:	78fa      	ldrb	r2, [r7, #3]
 800ddba:	6879      	ldr	r1, [r7, #4]
 800ddbc:	4613      	mov	r3, r2
 800ddbe:	009b      	lsls	r3, r3, #2
 800ddc0:	4413      	add	r3, r2
 800ddc2:	00db      	lsls	r3, r3, #3
 800ddc4:	440b      	add	r3, r1
 800ddc6:	333c      	adds	r3, #60	; 0x3c
 800ddc8:	681a      	ldr	r2, [r3, #0]
 800ddca:	78fb      	ldrb	r3, [r7, #3]
 800ddcc:	4619      	mov	r1, r3
 800ddce:	f7fe fdb0 	bl	800c932 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800ddd2:	bf00      	nop
 800ddd4:	3708      	adds	r7, #8
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}

0800ddda <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddda:	b580      	push	{r7, lr}
 800dddc:	b082      	sub	sp, #8
 800ddde:	af00      	add	r7, sp, #0
 800dde0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800dde8:	4618      	mov	r0, r3
 800ddea:	f7fe fec4 	bl	800cb76 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800ddee:	bf00      	nop
 800ddf0:	3708      	adds	r7, #8
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}

0800ddf6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddf6:	b580      	push	{r7, lr}
 800ddf8:	b084      	sub	sp, #16
 800ddfa:	af00      	add	r7, sp, #0
 800ddfc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ddfe:	2301      	movs	r3, #1
 800de00:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	689b      	ldr	r3, [r3, #8]
 800de06:	2b02      	cmp	r3, #2
 800de08:	d001      	beq.n	800de0e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800de0a:	f7f3 fd31 	bl	8001870 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800de14:	7bfa      	ldrb	r2, [r7, #15]
 800de16:	4611      	mov	r1, r2
 800de18:	4618      	mov	r0, r3
 800de1a:	f7fe fe6e 	bl	800cafa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800de24:	4618      	mov	r0, r3
 800de26:	f7fe fe1a 	bl	800ca5e <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800de2a:	bf00      	nop
 800de2c:	3710      	adds	r7, #16
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}
	...

0800de34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b082      	sub	sp, #8
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800de42:	4618      	mov	r0, r3
 800de44:	f7fe fe69 	bl	800cb1a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	699b      	ldr	r3, [r3, #24]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d005      	beq.n	800de5c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800de50:	4b04      	ldr	r3, [pc, #16]	; (800de64 <HAL_PCD_SuspendCallback+0x30>)
 800de52:	691b      	ldr	r3, [r3, #16]
 800de54:	4a03      	ldr	r2, [pc, #12]	; (800de64 <HAL_PCD_SuspendCallback+0x30>)
 800de56:	f043 0306 	orr.w	r3, r3, #6
 800de5a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800de5c:	bf00      	nop
 800de5e:	3708      	adds	r7, #8
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}
 800de64:	e000ed00 	.word	0xe000ed00

0800de68 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b082      	sub	sp, #8
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	699b      	ldr	r3, [r3, #24]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d007      	beq.n	800de88 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800de78:	4b08      	ldr	r3, [pc, #32]	; (800de9c <HAL_PCD_ResumeCallback+0x34>)
 800de7a:	691b      	ldr	r3, [r3, #16]
 800de7c:	4a07      	ldr	r2, [pc, #28]	; (800de9c <HAL_PCD_ResumeCallback+0x34>)
 800de7e:	f023 0306 	bic.w	r3, r3, #6
 800de82:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800de84:	f000 f9fa 	bl	800e27c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800de8e:	4618      	mov	r0, r3
 800de90:	f7fe fe59 	bl	800cb46 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800de94:	bf00      	nop
 800de96:	3708      	adds	r7, #8
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}
 800de9c:	e000ed00 	.word	0xe000ed00

0800dea0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b082      	sub	sp, #8
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800dea8:	4a2b      	ldr	r2, [pc, #172]	; (800df58 <USBD_LL_Init+0xb8>)
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	4a29      	ldr	r2, [pc, #164]	; (800df58 <USBD_LL_Init+0xb8>)
 800deb4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800deb8:	4b27      	ldr	r3, [pc, #156]	; (800df58 <USBD_LL_Init+0xb8>)
 800deba:	4a28      	ldr	r2, [pc, #160]	; (800df5c <USBD_LL_Init+0xbc>)
 800debc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800debe:	4b26      	ldr	r3, [pc, #152]	; (800df58 <USBD_LL_Init+0xb8>)
 800dec0:	2208      	movs	r2, #8
 800dec2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800dec4:	4b24      	ldr	r3, [pc, #144]	; (800df58 <USBD_LL_Init+0xb8>)
 800dec6:	2202      	movs	r2, #2
 800dec8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800deca:	4b23      	ldr	r3, [pc, #140]	; (800df58 <USBD_LL_Init+0xb8>)
 800decc:	2202      	movs	r2, #2
 800dece:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800ded0:	4b21      	ldr	r3, [pc, #132]	; (800df58 <USBD_LL_Init+0xb8>)
 800ded2:	2200      	movs	r2, #0
 800ded4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ded6:	4b20      	ldr	r3, [pc, #128]	; (800df58 <USBD_LL_Init+0xb8>)
 800ded8:	2200      	movs	r2, #0
 800deda:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800dedc:	4b1e      	ldr	r3, [pc, #120]	; (800df58 <USBD_LL_Init+0xb8>)
 800dede:	2200      	movs	r2, #0
 800dee0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800dee2:	4b1d      	ldr	r3, [pc, #116]	; (800df58 <USBD_LL_Init+0xb8>)
 800dee4:	2200      	movs	r2, #0
 800dee6:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800dee8:	481b      	ldr	r0, [pc, #108]	; (800df58 <USBD_LL_Init+0xb8>)
 800deea:	f7f6 ff4c 	bl	8004d86 <HAL_PCD_Init>
 800deee:	4603      	mov	r3, r0
 800def0:	2b00      	cmp	r3, #0
 800def2:	d001      	beq.n	800def8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800def4:	f7f3 fcbc 	bl	8001870 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800defe:	2318      	movs	r3, #24
 800df00:	2200      	movs	r2, #0
 800df02:	2100      	movs	r1, #0
 800df04:	f7f8 fc05 	bl	8006712 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800df0e:	2358      	movs	r3, #88	; 0x58
 800df10:	2200      	movs	r2, #0
 800df12:	2180      	movs	r1, #128	; 0x80
 800df14:	f7f8 fbfd 	bl	8006712 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800df1e:	23c0      	movs	r3, #192	; 0xc0
 800df20:	2200      	movs	r2, #0
 800df22:	2181      	movs	r1, #129	; 0x81
 800df24:	f7f8 fbf5 	bl	8006712 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800df2e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800df32:	2200      	movs	r2, #0
 800df34:	2101      	movs	r1, #1
 800df36:	f7f8 fbec 	bl	8006712 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800df40:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df44:	2200      	movs	r2, #0
 800df46:	2182      	movs	r1, #130	; 0x82
 800df48:	f7f8 fbe3 	bl	8006712 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800df4c:	2300      	movs	r3, #0
}
 800df4e:	4618      	mov	r0, r3
 800df50:	3708      	adds	r7, #8
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}
 800df56:	bf00      	nop
 800df58:	20004230 	.word	0x20004230
 800df5c:	40005c00 	.word	0x40005c00

0800df60 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b084      	sub	sp, #16
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df68:	2300      	movs	r3, #0
 800df6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df6c:	2300      	movs	r3, #0
 800df6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800df76:	4618      	mov	r0, r3
 800df78:	f7f6 ffea 	bl	8004f50 <HAL_PCD_Start>
 800df7c:	4603      	mov	r3, r0
 800df7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df80:	7bfb      	ldrb	r3, [r7, #15]
 800df82:	4618      	mov	r0, r3
 800df84:	f000 f980 	bl	800e288 <USBD_Get_USB_Status>
 800df88:	4603      	mov	r3, r0
 800df8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800df8e:	4618      	mov	r0, r3
 800df90:	3710      	adds	r7, #16
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}

0800df96 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800df96:	b580      	push	{r7, lr}
 800df98:	b084      	sub	sp, #16
 800df9a:	af00      	add	r7, sp, #0
 800df9c:	6078      	str	r0, [r7, #4]
 800df9e:	4608      	mov	r0, r1
 800dfa0:	4611      	mov	r1, r2
 800dfa2:	461a      	mov	r2, r3
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	70fb      	strb	r3, [r7, #3]
 800dfa8:	460b      	mov	r3, r1
 800dfaa:	70bb      	strb	r3, [r7, #2]
 800dfac:	4613      	mov	r3, r2
 800dfae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dfbe:	78bb      	ldrb	r3, [r7, #2]
 800dfc0:	883a      	ldrh	r2, [r7, #0]
 800dfc2:	78f9      	ldrb	r1, [r7, #3]
 800dfc4:	f7f7 f932 	bl	800522c <HAL_PCD_EP_Open>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dfcc:	7bfb      	ldrb	r3, [r7, #15]
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f000 f95a 	bl	800e288 <USBD_Get_USB_Status>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfd8:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3710      	adds	r7, #16
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}

0800dfe2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dfe2:	b580      	push	{r7, lr}
 800dfe4:	b084      	sub	sp, #16
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	6078      	str	r0, [r7, #4]
 800dfea:	460b      	mov	r3, r1
 800dfec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfee:	2300      	movs	r3, #0
 800dff0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dff2:	2300      	movs	r3, #0
 800dff4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dffc:	78fa      	ldrb	r2, [r7, #3]
 800dffe:	4611      	mov	r1, r2
 800e000:	4618      	mov	r0, r3
 800e002:	f7f7 f979 	bl	80052f8 <HAL_PCD_EP_Close>
 800e006:	4603      	mov	r3, r0
 800e008:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e00a:	7bfb      	ldrb	r3, [r7, #15]
 800e00c:	4618      	mov	r0, r3
 800e00e:	f000 f93b 	bl	800e288 <USBD_Get_USB_Status>
 800e012:	4603      	mov	r3, r0
 800e014:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e016:	7bbb      	ldrb	r3, [r7, #14]
}
 800e018:	4618      	mov	r0, r3
 800e01a:	3710      	adds	r7, #16
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bd80      	pop	{r7, pc}

0800e020 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b084      	sub	sp, #16
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
 800e028:	460b      	mov	r3, r1
 800e02a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e02c:	2300      	movs	r3, #0
 800e02e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e030:	2300      	movs	r3, #0
 800e032:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e03a:	78fa      	ldrb	r2, [r7, #3]
 800e03c:	4611      	mov	r1, r2
 800e03e:	4618      	mov	r0, r3
 800e040:	f7f7 fa3a 	bl	80054b8 <HAL_PCD_EP_SetStall>
 800e044:	4603      	mov	r3, r0
 800e046:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e048:	7bfb      	ldrb	r3, [r7, #15]
 800e04a:	4618      	mov	r0, r3
 800e04c:	f000 f91c 	bl	800e288 <USBD_Get_USB_Status>
 800e050:	4603      	mov	r3, r0
 800e052:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e054:	7bbb      	ldrb	r3, [r7, #14]
}
 800e056:	4618      	mov	r0, r3
 800e058:	3710      	adds	r7, #16
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}

0800e05e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e05e:	b580      	push	{r7, lr}
 800e060:	b084      	sub	sp, #16
 800e062:	af00      	add	r7, sp, #0
 800e064:	6078      	str	r0, [r7, #4]
 800e066:	460b      	mov	r3, r1
 800e068:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e06a:	2300      	movs	r3, #0
 800e06c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e06e:	2300      	movs	r3, #0
 800e070:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e078:	78fa      	ldrb	r2, [r7, #3]
 800e07a:	4611      	mov	r1, r2
 800e07c:	4618      	mov	r0, r3
 800e07e:	f7f7 fa6d 	bl	800555c <HAL_PCD_EP_ClrStall>
 800e082:	4603      	mov	r3, r0
 800e084:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e086:	7bfb      	ldrb	r3, [r7, #15]
 800e088:	4618      	mov	r0, r3
 800e08a:	f000 f8fd 	bl	800e288 <USBD_Get_USB_Status>
 800e08e:	4603      	mov	r3, r0
 800e090:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e092:	7bbb      	ldrb	r3, [r7, #14]
}
 800e094:	4618      	mov	r0, r3
 800e096:	3710      	adds	r7, #16
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}

0800e09c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e09c:	b480      	push	{r7}
 800e09e:	b085      	sub	sp, #20
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
 800e0a4:	460b      	mov	r3, r1
 800e0a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e0ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e0b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	da0c      	bge.n	800e0d2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e0b8:	78fb      	ldrb	r3, [r7, #3]
 800e0ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0be:	68f9      	ldr	r1, [r7, #12]
 800e0c0:	1c5a      	adds	r2, r3, #1
 800e0c2:	4613      	mov	r3, r2
 800e0c4:	009b      	lsls	r3, r3, #2
 800e0c6:	4413      	add	r3, r2
 800e0c8:	00db      	lsls	r3, r3, #3
 800e0ca:	440b      	add	r3, r1
 800e0cc:	3302      	adds	r3, #2
 800e0ce:	781b      	ldrb	r3, [r3, #0]
 800e0d0:	e00b      	b.n	800e0ea <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e0d2:	78fb      	ldrb	r3, [r7, #3]
 800e0d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e0d8:	68f9      	ldr	r1, [r7, #12]
 800e0da:	4613      	mov	r3, r2
 800e0dc:	009b      	lsls	r3, r3, #2
 800e0de:	4413      	add	r3, r2
 800e0e0:	00db      	lsls	r3, r3, #3
 800e0e2:	440b      	add	r3, r1
 800e0e4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800e0e8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3714      	adds	r7, #20
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f4:	4770      	bx	lr

0800e0f6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e0f6:	b580      	push	{r7, lr}
 800e0f8:	b084      	sub	sp, #16
 800e0fa:	af00      	add	r7, sp, #0
 800e0fc:	6078      	str	r0, [r7, #4]
 800e0fe:	460b      	mov	r3, r1
 800e100:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e102:	2300      	movs	r3, #0
 800e104:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e106:	2300      	movs	r3, #0
 800e108:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e110:	78fa      	ldrb	r2, [r7, #3]
 800e112:	4611      	mov	r1, r2
 800e114:	4618      	mov	r0, r3
 800e116:	f7f7 f864 	bl	80051e2 <HAL_PCD_SetAddress>
 800e11a:	4603      	mov	r3, r0
 800e11c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e11e:	7bfb      	ldrb	r3, [r7, #15]
 800e120:	4618      	mov	r0, r3
 800e122:	f000 f8b1 	bl	800e288 <USBD_Get_USB_Status>
 800e126:	4603      	mov	r3, r0
 800e128:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e12a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3710      	adds	r7, #16
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}

0800e134 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b086      	sub	sp, #24
 800e138:	af00      	add	r7, sp, #0
 800e13a:	60f8      	str	r0, [r7, #12]
 800e13c:	607a      	str	r2, [r7, #4]
 800e13e:	603b      	str	r3, [r7, #0]
 800e140:	460b      	mov	r3, r1
 800e142:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e144:	2300      	movs	r3, #0
 800e146:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e148:	2300      	movs	r3, #0
 800e14a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e152:	7af9      	ldrb	r1, [r7, #11]
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	687a      	ldr	r2, [r7, #4]
 800e158:	f7f7 f96b 	bl	8005432 <HAL_PCD_EP_Transmit>
 800e15c:	4603      	mov	r3, r0
 800e15e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e160:	7dfb      	ldrb	r3, [r7, #23]
 800e162:	4618      	mov	r0, r3
 800e164:	f000 f890 	bl	800e288 <USBD_Get_USB_Status>
 800e168:	4603      	mov	r3, r0
 800e16a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e16c:	7dbb      	ldrb	r3, [r7, #22]
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3718      	adds	r7, #24
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}

0800e176 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e176:	b580      	push	{r7, lr}
 800e178:	b086      	sub	sp, #24
 800e17a:	af00      	add	r7, sp, #0
 800e17c:	60f8      	str	r0, [r7, #12]
 800e17e:	607a      	str	r2, [r7, #4]
 800e180:	603b      	str	r3, [r7, #0]
 800e182:	460b      	mov	r3, r1
 800e184:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e186:	2300      	movs	r3, #0
 800e188:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e18a:	2300      	movs	r3, #0
 800e18c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e194:	7af9      	ldrb	r1, [r7, #11]
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	687a      	ldr	r2, [r7, #4]
 800e19a:	f7f7 f8f5 	bl	8005388 <HAL_PCD_EP_Receive>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1a2:	7dfb      	ldrb	r3, [r7, #23]
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	f000 f86f 	bl	800e288 <USBD_Get_USB_Status>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e1ae:	7dbb      	ldrb	r3, [r7, #22]
}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	3718      	adds	r7, #24
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bd80      	pop	{r7, pc}

0800e1b8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b082      	sub	sp, #8
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
 800e1c0:	460b      	mov	r3, r1
 800e1c2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e1ca:	78fa      	ldrb	r2, [r7, #3]
 800e1cc:	4611      	mov	r1, r2
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f7f7 f917 	bl	8005402 <HAL_PCD_EP_GetRxCount>
 800e1d4:	4603      	mov	r3, r0
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	3708      	adds	r7, #8
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}
	...

0800e1e0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800e1ec:	78fb      	ldrb	r3, [r7, #3]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d002      	beq.n	800e1f8 <HAL_PCDEx_LPM_Callback+0x18>
 800e1f2:	2b01      	cmp	r3, #1
 800e1f4:	d013      	beq.n	800e21e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800e1f6:	e023      	b.n	800e240 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	699b      	ldr	r3, [r3, #24]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d007      	beq.n	800e210 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e200:	f000 f83c 	bl	800e27c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e204:	4b10      	ldr	r3, [pc, #64]	; (800e248 <HAL_PCDEx_LPM_Callback+0x68>)
 800e206:	691b      	ldr	r3, [r3, #16]
 800e208:	4a0f      	ldr	r2, [pc, #60]	; (800e248 <HAL_PCDEx_LPM_Callback+0x68>)
 800e20a:	f023 0306 	bic.w	r3, r3, #6
 800e20e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800e216:	4618      	mov	r0, r3
 800e218:	f7fe fc95 	bl	800cb46 <USBD_LL_Resume>
    break;
 800e21c:	e010      	b.n	800e240 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800e224:	4618      	mov	r0, r3
 800e226:	f7fe fc78 	bl	800cb1a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	699b      	ldr	r3, [r3, #24]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d005      	beq.n	800e23e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e232:	4b05      	ldr	r3, [pc, #20]	; (800e248 <HAL_PCDEx_LPM_Callback+0x68>)
 800e234:	691b      	ldr	r3, [r3, #16]
 800e236:	4a04      	ldr	r2, [pc, #16]	; (800e248 <HAL_PCDEx_LPM_Callback+0x68>)
 800e238:	f043 0306 	orr.w	r3, r3, #6
 800e23c:	6113      	str	r3, [r2, #16]
    break;
 800e23e:	bf00      	nop
}
 800e240:	bf00      	nop
 800e242:	3708      	adds	r7, #8
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}
 800e248:	e000ed00 	.word	0xe000ed00

0800e24c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e24c:	b480      	push	{r7}
 800e24e:	b083      	sub	sp, #12
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e254:	4b03      	ldr	r3, [pc, #12]	; (800e264 <USBD_static_malloc+0x18>)
}
 800e256:	4618      	mov	r0, r3
 800e258:	370c      	adds	r7, #12
 800e25a:	46bd      	mov	sp, r7
 800e25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e260:	4770      	bx	lr
 800e262:	bf00      	nop
 800e264:	20004524 	.word	0x20004524

0800e268 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e268:	b480      	push	{r7}
 800e26a:	b083      	sub	sp, #12
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]

}
 800e270:	bf00      	nop
 800e272:	370c      	adds	r7, #12
 800e274:	46bd      	mov	sp, r7
 800e276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27a:	4770      	bx	lr

0800e27c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e280:	f7f2 fd62 	bl	8000d48 <SystemClock_Config>
}
 800e284:	bf00      	nop
 800e286:	bd80      	pop	{r7, pc}

0800e288 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e288:	b480      	push	{r7}
 800e28a:	b085      	sub	sp, #20
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	4603      	mov	r3, r0
 800e290:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e292:	2300      	movs	r3, #0
 800e294:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e296:	79fb      	ldrb	r3, [r7, #7]
 800e298:	2b03      	cmp	r3, #3
 800e29a:	d817      	bhi.n	800e2cc <USBD_Get_USB_Status+0x44>
 800e29c:	a201      	add	r2, pc, #4	; (adr r2, 800e2a4 <USBD_Get_USB_Status+0x1c>)
 800e29e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2a2:	bf00      	nop
 800e2a4:	0800e2b5 	.word	0x0800e2b5
 800e2a8:	0800e2bb 	.word	0x0800e2bb
 800e2ac:	0800e2c1 	.word	0x0800e2c1
 800e2b0:	0800e2c7 	.word	0x0800e2c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	73fb      	strb	r3, [r7, #15]
    break;
 800e2b8:	e00b      	b.n	800e2d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e2ba:	2303      	movs	r3, #3
 800e2bc:	73fb      	strb	r3, [r7, #15]
    break;
 800e2be:	e008      	b.n	800e2d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	73fb      	strb	r3, [r7, #15]
    break;
 800e2c4:	e005      	b.n	800e2d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e2c6:	2303      	movs	r3, #3
 800e2c8:	73fb      	strb	r3, [r7, #15]
    break;
 800e2ca:	e002      	b.n	800e2d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e2cc:	2303      	movs	r3, #3
 800e2ce:	73fb      	strb	r3, [r7, #15]
    break;
 800e2d0:	bf00      	nop
  }
  return usb_status;
 800e2d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3714      	adds	r7, #20
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2de:	4770      	bx	lr

0800e2e0 <__errno>:
 800e2e0:	4b01      	ldr	r3, [pc, #4]	; (800e2e8 <__errno+0x8>)
 800e2e2:	6818      	ldr	r0, [r3, #0]
 800e2e4:	4770      	bx	lr
 800e2e6:	bf00      	nop
 800e2e8:	20002858 	.word	0x20002858

0800e2ec <__libc_init_array>:
 800e2ec:	b570      	push	{r4, r5, r6, lr}
 800e2ee:	4d0d      	ldr	r5, [pc, #52]	; (800e324 <__libc_init_array+0x38>)
 800e2f0:	4c0d      	ldr	r4, [pc, #52]	; (800e328 <__libc_init_array+0x3c>)
 800e2f2:	1b64      	subs	r4, r4, r5
 800e2f4:	10a4      	asrs	r4, r4, #2
 800e2f6:	2600      	movs	r6, #0
 800e2f8:	42a6      	cmp	r6, r4
 800e2fa:	d109      	bne.n	800e310 <__libc_init_array+0x24>
 800e2fc:	4d0b      	ldr	r5, [pc, #44]	; (800e32c <__libc_init_array+0x40>)
 800e2fe:	4c0c      	ldr	r4, [pc, #48]	; (800e330 <__libc_init_array+0x44>)
 800e300:	f002 fdae 	bl	8010e60 <_init>
 800e304:	1b64      	subs	r4, r4, r5
 800e306:	10a4      	asrs	r4, r4, #2
 800e308:	2600      	movs	r6, #0
 800e30a:	42a6      	cmp	r6, r4
 800e30c:	d105      	bne.n	800e31a <__libc_init_array+0x2e>
 800e30e:	bd70      	pop	{r4, r5, r6, pc}
 800e310:	f855 3b04 	ldr.w	r3, [r5], #4
 800e314:	4798      	blx	r3
 800e316:	3601      	adds	r6, #1
 800e318:	e7ee      	b.n	800e2f8 <__libc_init_array+0xc>
 800e31a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e31e:	4798      	blx	r3
 800e320:	3601      	adds	r6, #1
 800e322:	e7f2      	b.n	800e30a <__libc_init_array+0x1e>
 800e324:	08011344 	.word	0x08011344
 800e328:	08011344 	.word	0x08011344
 800e32c:	08011344 	.word	0x08011344
 800e330:	08011348 	.word	0x08011348

0800e334 <memset>:
 800e334:	4402      	add	r2, r0
 800e336:	4603      	mov	r3, r0
 800e338:	4293      	cmp	r3, r2
 800e33a:	d100      	bne.n	800e33e <memset+0xa>
 800e33c:	4770      	bx	lr
 800e33e:	f803 1b01 	strb.w	r1, [r3], #1
 800e342:	e7f9      	b.n	800e338 <memset+0x4>

0800e344 <__cvt>:
 800e344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e348:	ec55 4b10 	vmov	r4, r5, d0
 800e34c:	2d00      	cmp	r5, #0
 800e34e:	460e      	mov	r6, r1
 800e350:	4619      	mov	r1, r3
 800e352:	462b      	mov	r3, r5
 800e354:	bfbb      	ittet	lt
 800e356:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e35a:	461d      	movlt	r5, r3
 800e35c:	2300      	movge	r3, #0
 800e35e:	232d      	movlt	r3, #45	; 0x2d
 800e360:	700b      	strb	r3, [r1, #0]
 800e362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e364:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e368:	4691      	mov	r9, r2
 800e36a:	f023 0820 	bic.w	r8, r3, #32
 800e36e:	bfbc      	itt	lt
 800e370:	4622      	movlt	r2, r4
 800e372:	4614      	movlt	r4, r2
 800e374:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e378:	d005      	beq.n	800e386 <__cvt+0x42>
 800e37a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e37e:	d100      	bne.n	800e382 <__cvt+0x3e>
 800e380:	3601      	adds	r6, #1
 800e382:	2102      	movs	r1, #2
 800e384:	e000      	b.n	800e388 <__cvt+0x44>
 800e386:	2103      	movs	r1, #3
 800e388:	ab03      	add	r3, sp, #12
 800e38a:	9301      	str	r3, [sp, #4]
 800e38c:	ab02      	add	r3, sp, #8
 800e38e:	9300      	str	r3, [sp, #0]
 800e390:	ec45 4b10 	vmov	d0, r4, r5
 800e394:	4653      	mov	r3, sl
 800e396:	4632      	mov	r2, r6
 800e398:	f000 fcfa 	bl	800ed90 <_dtoa_r>
 800e39c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e3a0:	4607      	mov	r7, r0
 800e3a2:	d102      	bne.n	800e3aa <__cvt+0x66>
 800e3a4:	f019 0f01 	tst.w	r9, #1
 800e3a8:	d022      	beq.n	800e3f0 <__cvt+0xac>
 800e3aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e3ae:	eb07 0906 	add.w	r9, r7, r6
 800e3b2:	d110      	bne.n	800e3d6 <__cvt+0x92>
 800e3b4:	783b      	ldrb	r3, [r7, #0]
 800e3b6:	2b30      	cmp	r3, #48	; 0x30
 800e3b8:	d10a      	bne.n	800e3d0 <__cvt+0x8c>
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	2300      	movs	r3, #0
 800e3be:	4620      	mov	r0, r4
 800e3c0:	4629      	mov	r1, r5
 800e3c2:	f7f2 fba9 	bl	8000b18 <__aeabi_dcmpeq>
 800e3c6:	b918      	cbnz	r0, 800e3d0 <__cvt+0x8c>
 800e3c8:	f1c6 0601 	rsb	r6, r6, #1
 800e3cc:	f8ca 6000 	str.w	r6, [sl]
 800e3d0:	f8da 3000 	ldr.w	r3, [sl]
 800e3d4:	4499      	add	r9, r3
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	2300      	movs	r3, #0
 800e3da:	4620      	mov	r0, r4
 800e3dc:	4629      	mov	r1, r5
 800e3de:	f7f2 fb9b 	bl	8000b18 <__aeabi_dcmpeq>
 800e3e2:	b108      	cbz	r0, 800e3e8 <__cvt+0xa4>
 800e3e4:	f8cd 900c 	str.w	r9, [sp, #12]
 800e3e8:	2230      	movs	r2, #48	; 0x30
 800e3ea:	9b03      	ldr	r3, [sp, #12]
 800e3ec:	454b      	cmp	r3, r9
 800e3ee:	d307      	bcc.n	800e400 <__cvt+0xbc>
 800e3f0:	9b03      	ldr	r3, [sp, #12]
 800e3f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e3f4:	1bdb      	subs	r3, r3, r7
 800e3f6:	4638      	mov	r0, r7
 800e3f8:	6013      	str	r3, [r2, #0]
 800e3fa:	b004      	add	sp, #16
 800e3fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e400:	1c59      	adds	r1, r3, #1
 800e402:	9103      	str	r1, [sp, #12]
 800e404:	701a      	strb	r2, [r3, #0]
 800e406:	e7f0      	b.n	800e3ea <__cvt+0xa6>

0800e408 <__exponent>:
 800e408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e40a:	4603      	mov	r3, r0
 800e40c:	2900      	cmp	r1, #0
 800e40e:	bfb8      	it	lt
 800e410:	4249      	neglt	r1, r1
 800e412:	f803 2b02 	strb.w	r2, [r3], #2
 800e416:	bfb4      	ite	lt
 800e418:	222d      	movlt	r2, #45	; 0x2d
 800e41a:	222b      	movge	r2, #43	; 0x2b
 800e41c:	2909      	cmp	r1, #9
 800e41e:	7042      	strb	r2, [r0, #1]
 800e420:	dd2a      	ble.n	800e478 <__exponent+0x70>
 800e422:	f10d 0407 	add.w	r4, sp, #7
 800e426:	46a4      	mov	ip, r4
 800e428:	270a      	movs	r7, #10
 800e42a:	46a6      	mov	lr, r4
 800e42c:	460a      	mov	r2, r1
 800e42e:	fb91 f6f7 	sdiv	r6, r1, r7
 800e432:	fb07 1516 	mls	r5, r7, r6, r1
 800e436:	3530      	adds	r5, #48	; 0x30
 800e438:	2a63      	cmp	r2, #99	; 0x63
 800e43a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800e43e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e442:	4631      	mov	r1, r6
 800e444:	dcf1      	bgt.n	800e42a <__exponent+0x22>
 800e446:	3130      	adds	r1, #48	; 0x30
 800e448:	f1ae 0502 	sub.w	r5, lr, #2
 800e44c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e450:	1c44      	adds	r4, r0, #1
 800e452:	4629      	mov	r1, r5
 800e454:	4561      	cmp	r1, ip
 800e456:	d30a      	bcc.n	800e46e <__exponent+0x66>
 800e458:	f10d 0209 	add.w	r2, sp, #9
 800e45c:	eba2 020e 	sub.w	r2, r2, lr
 800e460:	4565      	cmp	r5, ip
 800e462:	bf88      	it	hi
 800e464:	2200      	movhi	r2, #0
 800e466:	4413      	add	r3, r2
 800e468:	1a18      	subs	r0, r3, r0
 800e46a:	b003      	add	sp, #12
 800e46c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e46e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e472:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e476:	e7ed      	b.n	800e454 <__exponent+0x4c>
 800e478:	2330      	movs	r3, #48	; 0x30
 800e47a:	3130      	adds	r1, #48	; 0x30
 800e47c:	7083      	strb	r3, [r0, #2]
 800e47e:	70c1      	strb	r1, [r0, #3]
 800e480:	1d03      	adds	r3, r0, #4
 800e482:	e7f1      	b.n	800e468 <__exponent+0x60>

0800e484 <_printf_float>:
 800e484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e488:	ed2d 8b02 	vpush	{d8}
 800e48c:	b08d      	sub	sp, #52	; 0x34
 800e48e:	460c      	mov	r4, r1
 800e490:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e494:	4616      	mov	r6, r2
 800e496:	461f      	mov	r7, r3
 800e498:	4605      	mov	r5, r0
 800e49a:	f001 fb5d 	bl	800fb58 <_localeconv_r>
 800e49e:	f8d0 a000 	ldr.w	sl, [r0]
 800e4a2:	4650      	mov	r0, sl
 800e4a4:	f7f1 febc 	bl	8000220 <strlen>
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	930a      	str	r3, [sp, #40]	; 0x28
 800e4ac:	6823      	ldr	r3, [r4, #0]
 800e4ae:	9305      	str	r3, [sp, #20]
 800e4b0:	f8d8 3000 	ldr.w	r3, [r8]
 800e4b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e4b8:	3307      	adds	r3, #7
 800e4ba:	f023 0307 	bic.w	r3, r3, #7
 800e4be:	f103 0208 	add.w	r2, r3, #8
 800e4c2:	f8c8 2000 	str.w	r2, [r8]
 800e4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e4ce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e4d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e4d6:	9307      	str	r3, [sp, #28]
 800e4d8:	f8cd 8018 	str.w	r8, [sp, #24]
 800e4dc:	ee08 0a10 	vmov	s16, r0
 800e4e0:	4b9f      	ldr	r3, [pc, #636]	; (800e760 <_printf_float+0x2dc>)
 800e4e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e4e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e4ea:	f7f2 fb47 	bl	8000b7c <__aeabi_dcmpun>
 800e4ee:	bb88      	cbnz	r0, 800e554 <_printf_float+0xd0>
 800e4f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e4f4:	4b9a      	ldr	r3, [pc, #616]	; (800e760 <_printf_float+0x2dc>)
 800e4f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e4fa:	f7f2 fb21 	bl	8000b40 <__aeabi_dcmple>
 800e4fe:	bb48      	cbnz	r0, 800e554 <_printf_float+0xd0>
 800e500:	2200      	movs	r2, #0
 800e502:	2300      	movs	r3, #0
 800e504:	4640      	mov	r0, r8
 800e506:	4649      	mov	r1, r9
 800e508:	f7f2 fb10 	bl	8000b2c <__aeabi_dcmplt>
 800e50c:	b110      	cbz	r0, 800e514 <_printf_float+0x90>
 800e50e:	232d      	movs	r3, #45	; 0x2d
 800e510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e514:	4b93      	ldr	r3, [pc, #588]	; (800e764 <_printf_float+0x2e0>)
 800e516:	4894      	ldr	r0, [pc, #592]	; (800e768 <_printf_float+0x2e4>)
 800e518:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e51c:	bf94      	ite	ls
 800e51e:	4698      	movls	r8, r3
 800e520:	4680      	movhi	r8, r0
 800e522:	2303      	movs	r3, #3
 800e524:	6123      	str	r3, [r4, #16]
 800e526:	9b05      	ldr	r3, [sp, #20]
 800e528:	f023 0204 	bic.w	r2, r3, #4
 800e52c:	6022      	str	r2, [r4, #0]
 800e52e:	f04f 0900 	mov.w	r9, #0
 800e532:	9700      	str	r7, [sp, #0]
 800e534:	4633      	mov	r3, r6
 800e536:	aa0b      	add	r2, sp, #44	; 0x2c
 800e538:	4621      	mov	r1, r4
 800e53a:	4628      	mov	r0, r5
 800e53c:	f000 f9d8 	bl	800e8f0 <_printf_common>
 800e540:	3001      	adds	r0, #1
 800e542:	f040 8090 	bne.w	800e666 <_printf_float+0x1e2>
 800e546:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e54a:	b00d      	add	sp, #52	; 0x34
 800e54c:	ecbd 8b02 	vpop	{d8}
 800e550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e554:	4642      	mov	r2, r8
 800e556:	464b      	mov	r3, r9
 800e558:	4640      	mov	r0, r8
 800e55a:	4649      	mov	r1, r9
 800e55c:	f7f2 fb0e 	bl	8000b7c <__aeabi_dcmpun>
 800e560:	b140      	cbz	r0, 800e574 <_printf_float+0xf0>
 800e562:	464b      	mov	r3, r9
 800e564:	2b00      	cmp	r3, #0
 800e566:	bfbc      	itt	lt
 800e568:	232d      	movlt	r3, #45	; 0x2d
 800e56a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e56e:	487f      	ldr	r0, [pc, #508]	; (800e76c <_printf_float+0x2e8>)
 800e570:	4b7f      	ldr	r3, [pc, #508]	; (800e770 <_printf_float+0x2ec>)
 800e572:	e7d1      	b.n	800e518 <_printf_float+0x94>
 800e574:	6863      	ldr	r3, [r4, #4]
 800e576:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e57a:	9206      	str	r2, [sp, #24]
 800e57c:	1c5a      	adds	r2, r3, #1
 800e57e:	d13f      	bne.n	800e600 <_printf_float+0x17c>
 800e580:	2306      	movs	r3, #6
 800e582:	6063      	str	r3, [r4, #4]
 800e584:	9b05      	ldr	r3, [sp, #20]
 800e586:	6861      	ldr	r1, [r4, #4]
 800e588:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e58c:	2300      	movs	r3, #0
 800e58e:	9303      	str	r3, [sp, #12]
 800e590:	ab0a      	add	r3, sp, #40	; 0x28
 800e592:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e596:	ab09      	add	r3, sp, #36	; 0x24
 800e598:	ec49 8b10 	vmov	d0, r8, r9
 800e59c:	9300      	str	r3, [sp, #0]
 800e59e:	6022      	str	r2, [r4, #0]
 800e5a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e5a4:	4628      	mov	r0, r5
 800e5a6:	f7ff fecd 	bl	800e344 <__cvt>
 800e5aa:	9b06      	ldr	r3, [sp, #24]
 800e5ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e5ae:	2b47      	cmp	r3, #71	; 0x47
 800e5b0:	4680      	mov	r8, r0
 800e5b2:	d108      	bne.n	800e5c6 <_printf_float+0x142>
 800e5b4:	1cc8      	adds	r0, r1, #3
 800e5b6:	db02      	blt.n	800e5be <_printf_float+0x13a>
 800e5b8:	6863      	ldr	r3, [r4, #4]
 800e5ba:	4299      	cmp	r1, r3
 800e5bc:	dd41      	ble.n	800e642 <_printf_float+0x1be>
 800e5be:	f1ab 0b02 	sub.w	fp, fp, #2
 800e5c2:	fa5f fb8b 	uxtb.w	fp, fp
 800e5c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e5ca:	d820      	bhi.n	800e60e <_printf_float+0x18a>
 800e5cc:	3901      	subs	r1, #1
 800e5ce:	465a      	mov	r2, fp
 800e5d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e5d4:	9109      	str	r1, [sp, #36]	; 0x24
 800e5d6:	f7ff ff17 	bl	800e408 <__exponent>
 800e5da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e5dc:	1813      	adds	r3, r2, r0
 800e5de:	2a01      	cmp	r2, #1
 800e5e0:	4681      	mov	r9, r0
 800e5e2:	6123      	str	r3, [r4, #16]
 800e5e4:	dc02      	bgt.n	800e5ec <_printf_float+0x168>
 800e5e6:	6822      	ldr	r2, [r4, #0]
 800e5e8:	07d2      	lsls	r2, r2, #31
 800e5ea:	d501      	bpl.n	800e5f0 <_printf_float+0x16c>
 800e5ec:	3301      	adds	r3, #1
 800e5ee:	6123      	str	r3, [r4, #16]
 800e5f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d09c      	beq.n	800e532 <_printf_float+0xae>
 800e5f8:	232d      	movs	r3, #45	; 0x2d
 800e5fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e5fe:	e798      	b.n	800e532 <_printf_float+0xae>
 800e600:	9a06      	ldr	r2, [sp, #24]
 800e602:	2a47      	cmp	r2, #71	; 0x47
 800e604:	d1be      	bne.n	800e584 <_printf_float+0x100>
 800e606:	2b00      	cmp	r3, #0
 800e608:	d1bc      	bne.n	800e584 <_printf_float+0x100>
 800e60a:	2301      	movs	r3, #1
 800e60c:	e7b9      	b.n	800e582 <_printf_float+0xfe>
 800e60e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e612:	d118      	bne.n	800e646 <_printf_float+0x1c2>
 800e614:	2900      	cmp	r1, #0
 800e616:	6863      	ldr	r3, [r4, #4]
 800e618:	dd0b      	ble.n	800e632 <_printf_float+0x1ae>
 800e61a:	6121      	str	r1, [r4, #16]
 800e61c:	b913      	cbnz	r3, 800e624 <_printf_float+0x1a0>
 800e61e:	6822      	ldr	r2, [r4, #0]
 800e620:	07d0      	lsls	r0, r2, #31
 800e622:	d502      	bpl.n	800e62a <_printf_float+0x1a6>
 800e624:	3301      	adds	r3, #1
 800e626:	440b      	add	r3, r1
 800e628:	6123      	str	r3, [r4, #16]
 800e62a:	65a1      	str	r1, [r4, #88]	; 0x58
 800e62c:	f04f 0900 	mov.w	r9, #0
 800e630:	e7de      	b.n	800e5f0 <_printf_float+0x16c>
 800e632:	b913      	cbnz	r3, 800e63a <_printf_float+0x1b6>
 800e634:	6822      	ldr	r2, [r4, #0]
 800e636:	07d2      	lsls	r2, r2, #31
 800e638:	d501      	bpl.n	800e63e <_printf_float+0x1ba>
 800e63a:	3302      	adds	r3, #2
 800e63c:	e7f4      	b.n	800e628 <_printf_float+0x1a4>
 800e63e:	2301      	movs	r3, #1
 800e640:	e7f2      	b.n	800e628 <_printf_float+0x1a4>
 800e642:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e648:	4299      	cmp	r1, r3
 800e64a:	db05      	blt.n	800e658 <_printf_float+0x1d4>
 800e64c:	6823      	ldr	r3, [r4, #0]
 800e64e:	6121      	str	r1, [r4, #16]
 800e650:	07d8      	lsls	r0, r3, #31
 800e652:	d5ea      	bpl.n	800e62a <_printf_float+0x1a6>
 800e654:	1c4b      	adds	r3, r1, #1
 800e656:	e7e7      	b.n	800e628 <_printf_float+0x1a4>
 800e658:	2900      	cmp	r1, #0
 800e65a:	bfd4      	ite	le
 800e65c:	f1c1 0202 	rsble	r2, r1, #2
 800e660:	2201      	movgt	r2, #1
 800e662:	4413      	add	r3, r2
 800e664:	e7e0      	b.n	800e628 <_printf_float+0x1a4>
 800e666:	6823      	ldr	r3, [r4, #0]
 800e668:	055a      	lsls	r2, r3, #21
 800e66a:	d407      	bmi.n	800e67c <_printf_float+0x1f8>
 800e66c:	6923      	ldr	r3, [r4, #16]
 800e66e:	4642      	mov	r2, r8
 800e670:	4631      	mov	r1, r6
 800e672:	4628      	mov	r0, r5
 800e674:	47b8      	blx	r7
 800e676:	3001      	adds	r0, #1
 800e678:	d12c      	bne.n	800e6d4 <_printf_float+0x250>
 800e67a:	e764      	b.n	800e546 <_printf_float+0xc2>
 800e67c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e680:	f240 80e0 	bls.w	800e844 <_printf_float+0x3c0>
 800e684:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e688:	2200      	movs	r2, #0
 800e68a:	2300      	movs	r3, #0
 800e68c:	f7f2 fa44 	bl	8000b18 <__aeabi_dcmpeq>
 800e690:	2800      	cmp	r0, #0
 800e692:	d034      	beq.n	800e6fe <_printf_float+0x27a>
 800e694:	4a37      	ldr	r2, [pc, #220]	; (800e774 <_printf_float+0x2f0>)
 800e696:	2301      	movs	r3, #1
 800e698:	4631      	mov	r1, r6
 800e69a:	4628      	mov	r0, r5
 800e69c:	47b8      	blx	r7
 800e69e:	3001      	adds	r0, #1
 800e6a0:	f43f af51 	beq.w	800e546 <_printf_float+0xc2>
 800e6a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	db02      	blt.n	800e6b2 <_printf_float+0x22e>
 800e6ac:	6823      	ldr	r3, [r4, #0]
 800e6ae:	07d8      	lsls	r0, r3, #31
 800e6b0:	d510      	bpl.n	800e6d4 <_printf_float+0x250>
 800e6b2:	ee18 3a10 	vmov	r3, s16
 800e6b6:	4652      	mov	r2, sl
 800e6b8:	4631      	mov	r1, r6
 800e6ba:	4628      	mov	r0, r5
 800e6bc:	47b8      	blx	r7
 800e6be:	3001      	adds	r0, #1
 800e6c0:	f43f af41 	beq.w	800e546 <_printf_float+0xc2>
 800e6c4:	f04f 0800 	mov.w	r8, #0
 800e6c8:	f104 091a 	add.w	r9, r4, #26
 800e6cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6ce:	3b01      	subs	r3, #1
 800e6d0:	4543      	cmp	r3, r8
 800e6d2:	dc09      	bgt.n	800e6e8 <_printf_float+0x264>
 800e6d4:	6823      	ldr	r3, [r4, #0]
 800e6d6:	079b      	lsls	r3, r3, #30
 800e6d8:	f100 8105 	bmi.w	800e8e6 <_printf_float+0x462>
 800e6dc:	68e0      	ldr	r0, [r4, #12]
 800e6de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e6e0:	4298      	cmp	r0, r3
 800e6e2:	bfb8      	it	lt
 800e6e4:	4618      	movlt	r0, r3
 800e6e6:	e730      	b.n	800e54a <_printf_float+0xc6>
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	464a      	mov	r2, r9
 800e6ec:	4631      	mov	r1, r6
 800e6ee:	4628      	mov	r0, r5
 800e6f0:	47b8      	blx	r7
 800e6f2:	3001      	adds	r0, #1
 800e6f4:	f43f af27 	beq.w	800e546 <_printf_float+0xc2>
 800e6f8:	f108 0801 	add.w	r8, r8, #1
 800e6fc:	e7e6      	b.n	800e6cc <_printf_float+0x248>
 800e6fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e700:	2b00      	cmp	r3, #0
 800e702:	dc39      	bgt.n	800e778 <_printf_float+0x2f4>
 800e704:	4a1b      	ldr	r2, [pc, #108]	; (800e774 <_printf_float+0x2f0>)
 800e706:	2301      	movs	r3, #1
 800e708:	4631      	mov	r1, r6
 800e70a:	4628      	mov	r0, r5
 800e70c:	47b8      	blx	r7
 800e70e:	3001      	adds	r0, #1
 800e710:	f43f af19 	beq.w	800e546 <_printf_float+0xc2>
 800e714:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e718:	4313      	orrs	r3, r2
 800e71a:	d102      	bne.n	800e722 <_printf_float+0x29e>
 800e71c:	6823      	ldr	r3, [r4, #0]
 800e71e:	07d9      	lsls	r1, r3, #31
 800e720:	d5d8      	bpl.n	800e6d4 <_printf_float+0x250>
 800e722:	ee18 3a10 	vmov	r3, s16
 800e726:	4652      	mov	r2, sl
 800e728:	4631      	mov	r1, r6
 800e72a:	4628      	mov	r0, r5
 800e72c:	47b8      	blx	r7
 800e72e:	3001      	adds	r0, #1
 800e730:	f43f af09 	beq.w	800e546 <_printf_float+0xc2>
 800e734:	f04f 0900 	mov.w	r9, #0
 800e738:	f104 0a1a 	add.w	sl, r4, #26
 800e73c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e73e:	425b      	negs	r3, r3
 800e740:	454b      	cmp	r3, r9
 800e742:	dc01      	bgt.n	800e748 <_printf_float+0x2c4>
 800e744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e746:	e792      	b.n	800e66e <_printf_float+0x1ea>
 800e748:	2301      	movs	r3, #1
 800e74a:	4652      	mov	r2, sl
 800e74c:	4631      	mov	r1, r6
 800e74e:	4628      	mov	r0, r5
 800e750:	47b8      	blx	r7
 800e752:	3001      	adds	r0, #1
 800e754:	f43f aef7 	beq.w	800e546 <_printf_float+0xc2>
 800e758:	f109 0901 	add.w	r9, r9, #1
 800e75c:	e7ee      	b.n	800e73c <_printf_float+0x2b8>
 800e75e:	bf00      	nop
 800e760:	7fefffff 	.word	0x7fefffff
 800e764:	08010f6c 	.word	0x08010f6c
 800e768:	08010f70 	.word	0x08010f70
 800e76c:	08010f78 	.word	0x08010f78
 800e770:	08010f74 	.word	0x08010f74
 800e774:	08010f7c 	.word	0x08010f7c
 800e778:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e77a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e77c:	429a      	cmp	r2, r3
 800e77e:	bfa8      	it	ge
 800e780:	461a      	movge	r2, r3
 800e782:	2a00      	cmp	r2, #0
 800e784:	4691      	mov	r9, r2
 800e786:	dc37      	bgt.n	800e7f8 <_printf_float+0x374>
 800e788:	f04f 0b00 	mov.w	fp, #0
 800e78c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e790:	f104 021a 	add.w	r2, r4, #26
 800e794:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e796:	9305      	str	r3, [sp, #20]
 800e798:	eba3 0309 	sub.w	r3, r3, r9
 800e79c:	455b      	cmp	r3, fp
 800e79e:	dc33      	bgt.n	800e808 <_printf_float+0x384>
 800e7a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	db3b      	blt.n	800e820 <_printf_float+0x39c>
 800e7a8:	6823      	ldr	r3, [r4, #0]
 800e7aa:	07da      	lsls	r2, r3, #31
 800e7ac:	d438      	bmi.n	800e820 <_printf_float+0x39c>
 800e7ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7b0:	9a05      	ldr	r2, [sp, #20]
 800e7b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e7b4:	1a9a      	subs	r2, r3, r2
 800e7b6:	eba3 0901 	sub.w	r9, r3, r1
 800e7ba:	4591      	cmp	r9, r2
 800e7bc:	bfa8      	it	ge
 800e7be:	4691      	movge	r9, r2
 800e7c0:	f1b9 0f00 	cmp.w	r9, #0
 800e7c4:	dc35      	bgt.n	800e832 <_printf_float+0x3ae>
 800e7c6:	f04f 0800 	mov.w	r8, #0
 800e7ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e7ce:	f104 0a1a 	add.w	sl, r4, #26
 800e7d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e7d6:	1a9b      	subs	r3, r3, r2
 800e7d8:	eba3 0309 	sub.w	r3, r3, r9
 800e7dc:	4543      	cmp	r3, r8
 800e7de:	f77f af79 	ble.w	800e6d4 <_printf_float+0x250>
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	4652      	mov	r2, sl
 800e7e6:	4631      	mov	r1, r6
 800e7e8:	4628      	mov	r0, r5
 800e7ea:	47b8      	blx	r7
 800e7ec:	3001      	adds	r0, #1
 800e7ee:	f43f aeaa 	beq.w	800e546 <_printf_float+0xc2>
 800e7f2:	f108 0801 	add.w	r8, r8, #1
 800e7f6:	e7ec      	b.n	800e7d2 <_printf_float+0x34e>
 800e7f8:	4613      	mov	r3, r2
 800e7fa:	4631      	mov	r1, r6
 800e7fc:	4642      	mov	r2, r8
 800e7fe:	4628      	mov	r0, r5
 800e800:	47b8      	blx	r7
 800e802:	3001      	adds	r0, #1
 800e804:	d1c0      	bne.n	800e788 <_printf_float+0x304>
 800e806:	e69e      	b.n	800e546 <_printf_float+0xc2>
 800e808:	2301      	movs	r3, #1
 800e80a:	4631      	mov	r1, r6
 800e80c:	4628      	mov	r0, r5
 800e80e:	9205      	str	r2, [sp, #20]
 800e810:	47b8      	blx	r7
 800e812:	3001      	adds	r0, #1
 800e814:	f43f ae97 	beq.w	800e546 <_printf_float+0xc2>
 800e818:	9a05      	ldr	r2, [sp, #20]
 800e81a:	f10b 0b01 	add.w	fp, fp, #1
 800e81e:	e7b9      	b.n	800e794 <_printf_float+0x310>
 800e820:	ee18 3a10 	vmov	r3, s16
 800e824:	4652      	mov	r2, sl
 800e826:	4631      	mov	r1, r6
 800e828:	4628      	mov	r0, r5
 800e82a:	47b8      	blx	r7
 800e82c:	3001      	adds	r0, #1
 800e82e:	d1be      	bne.n	800e7ae <_printf_float+0x32a>
 800e830:	e689      	b.n	800e546 <_printf_float+0xc2>
 800e832:	9a05      	ldr	r2, [sp, #20]
 800e834:	464b      	mov	r3, r9
 800e836:	4442      	add	r2, r8
 800e838:	4631      	mov	r1, r6
 800e83a:	4628      	mov	r0, r5
 800e83c:	47b8      	blx	r7
 800e83e:	3001      	adds	r0, #1
 800e840:	d1c1      	bne.n	800e7c6 <_printf_float+0x342>
 800e842:	e680      	b.n	800e546 <_printf_float+0xc2>
 800e844:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e846:	2a01      	cmp	r2, #1
 800e848:	dc01      	bgt.n	800e84e <_printf_float+0x3ca>
 800e84a:	07db      	lsls	r3, r3, #31
 800e84c:	d538      	bpl.n	800e8c0 <_printf_float+0x43c>
 800e84e:	2301      	movs	r3, #1
 800e850:	4642      	mov	r2, r8
 800e852:	4631      	mov	r1, r6
 800e854:	4628      	mov	r0, r5
 800e856:	47b8      	blx	r7
 800e858:	3001      	adds	r0, #1
 800e85a:	f43f ae74 	beq.w	800e546 <_printf_float+0xc2>
 800e85e:	ee18 3a10 	vmov	r3, s16
 800e862:	4652      	mov	r2, sl
 800e864:	4631      	mov	r1, r6
 800e866:	4628      	mov	r0, r5
 800e868:	47b8      	blx	r7
 800e86a:	3001      	adds	r0, #1
 800e86c:	f43f ae6b 	beq.w	800e546 <_printf_float+0xc2>
 800e870:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e874:	2200      	movs	r2, #0
 800e876:	2300      	movs	r3, #0
 800e878:	f7f2 f94e 	bl	8000b18 <__aeabi_dcmpeq>
 800e87c:	b9d8      	cbnz	r0, 800e8b6 <_printf_float+0x432>
 800e87e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e880:	f108 0201 	add.w	r2, r8, #1
 800e884:	3b01      	subs	r3, #1
 800e886:	4631      	mov	r1, r6
 800e888:	4628      	mov	r0, r5
 800e88a:	47b8      	blx	r7
 800e88c:	3001      	adds	r0, #1
 800e88e:	d10e      	bne.n	800e8ae <_printf_float+0x42a>
 800e890:	e659      	b.n	800e546 <_printf_float+0xc2>
 800e892:	2301      	movs	r3, #1
 800e894:	4652      	mov	r2, sl
 800e896:	4631      	mov	r1, r6
 800e898:	4628      	mov	r0, r5
 800e89a:	47b8      	blx	r7
 800e89c:	3001      	adds	r0, #1
 800e89e:	f43f ae52 	beq.w	800e546 <_printf_float+0xc2>
 800e8a2:	f108 0801 	add.w	r8, r8, #1
 800e8a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8a8:	3b01      	subs	r3, #1
 800e8aa:	4543      	cmp	r3, r8
 800e8ac:	dcf1      	bgt.n	800e892 <_printf_float+0x40e>
 800e8ae:	464b      	mov	r3, r9
 800e8b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e8b4:	e6dc      	b.n	800e670 <_printf_float+0x1ec>
 800e8b6:	f04f 0800 	mov.w	r8, #0
 800e8ba:	f104 0a1a 	add.w	sl, r4, #26
 800e8be:	e7f2      	b.n	800e8a6 <_printf_float+0x422>
 800e8c0:	2301      	movs	r3, #1
 800e8c2:	4642      	mov	r2, r8
 800e8c4:	e7df      	b.n	800e886 <_printf_float+0x402>
 800e8c6:	2301      	movs	r3, #1
 800e8c8:	464a      	mov	r2, r9
 800e8ca:	4631      	mov	r1, r6
 800e8cc:	4628      	mov	r0, r5
 800e8ce:	47b8      	blx	r7
 800e8d0:	3001      	adds	r0, #1
 800e8d2:	f43f ae38 	beq.w	800e546 <_printf_float+0xc2>
 800e8d6:	f108 0801 	add.w	r8, r8, #1
 800e8da:	68e3      	ldr	r3, [r4, #12]
 800e8dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e8de:	1a5b      	subs	r3, r3, r1
 800e8e0:	4543      	cmp	r3, r8
 800e8e2:	dcf0      	bgt.n	800e8c6 <_printf_float+0x442>
 800e8e4:	e6fa      	b.n	800e6dc <_printf_float+0x258>
 800e8e6:	f04f 0800 	mov.w	r8, #0
 800e8ea:	f104 0919 	add.w	r9, r4, #25
 800e8ee:	e7f4      	b.n	800e8da <_printf_float+0x456>

0800e8f0 <_printf_common>:
 800e8f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8f4:	4616      	mov	r6, r2
 800e8f6:	4699      	mov	r9, r3
 800e8f8:	688a      	ldr	r2, [r1, #8]
 800e8fa:	690b      	ldr	r3, [r1, #16]
 800e8fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e900:	4293      	cmp	r3, r2
 800e902:	bfb8      	it	lt
 800e904:	4613      	movlt	r3, r2
 800e906:	6033      	str	r3, [r6, #0]
 800e908:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e90c:	4607      	mov	r7, r0
 800e90e:	460c      	mov	r4, r1
 800e910:	b10a      	cbz	r2, 800e916 <_printf_common+0x26>
 800e912:	3301      	adds	r3, #1
 800e914:	6033      	str	r3, [r6, #0]
 800e916:	6823      	ldr	r3, [r4, #0]
 800e918:	0699      	lsls	r1, r3, #26
 800e91a:	bf42      	ittt	mi
 800e91c:	6833      	ldrmi	r3, [r6, #0]
 800e91e:	3302      	addmi	r3, #2
 800e920:	6033      	strmi	r3, [r6, #0]
 800e922:	6825      	ldr	r5, [r4, #0]
 800e924:	f015 0506 	ands.w	r5, r5, #6
 800e928:	d106      	bne.n	800e938 <_printf_common+0x48>
 800e92a:	f104 0a19 	add.w	sl, r4, #25
 800e92e:	68e3      	ldr	r3, [r4, #12]
 800e930:	6832      	ldr	r2, [r6, #0]
 800e932:	1a9b      	subs	r3, r3, r2
 800e934:	42ab      	cmp	r3, r5
 800e936:	dc26      	bgt.n	800e986 <_printf_common+0x96>
 800e938:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e93c:	1e13      	subs	r3, r2, #0
 800e93e:	6822      	ldr	r2, [r4, #0]
 800e940:	bf18      	it	ne
 800e942:	2301      	movne	r3, #1
 800e944:	0692      	lsls	r2, r2, #26
 800e946:	d42b      	bmi.n	800e9a0 <_printf_common+0xb0>
 800e948:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e94c:	4649      	mov	r1, r9
 800e94e:	4638      	mov	r0, r7
 800e950:	47c0      	blx	r8
 800e952:	3001      	adds	r0, #1
 800e954:	d01e      	beq.n	800e994 <_printf_common+0xa4>
 800e956:	6823      	ldr	r3, [r4, #0]
 800e958:	68e5      	ldr	r5, [r4, #12]
 800e95a:	6832      	ldr	r2, [r6, #0]
 800e95c:	f003 0306 	and.w	r3, r3, #6
 800e960:	2b04      	cmp	r3, #4
 800e962:	bf08      	it	eq
 800e964:	1aad      	subeq	r5, r5, r2
 800e966:	68a3      	ldr	r3, [r4, #8]
 800e968:	6922      	ldr	r2, [r4, #16]
 800e96a:	bf0c      	ite	eq
 800e96c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e970:	2500      	movne	r5, #0
 800e972:	4293      	cmp	r3, r2
 800e974:	bfc4      	itt	gt
 800e976:	1a9b      	subgt	r3, r3, r2
 800e978:	18ed      	addgt	r5, r5, r3
 800e97a:	2600      	movs	r6, #0
 800e97c:	341a      	adds	r4, #26
 800e97e:	42b5      	cmp	r5, r6
 800e980:	d11a      	bne.n	800e9b8 <_printf_common+0xc8>
 800e982:	2000      	movs	r0, #0
 800e984:	e008      	b.n	800e998 <_printf_common+0xa8>
 800e986:	2301      	movs	r3, #1
 800e988:	4652      	mov	r2, sl
 800e98a:	4649      	mov	r1, r9
 800e98c:	4638      	mov	r0, r7
 800e98e:	47c0      	blx	r8
 800e990:	3001      	adds	r0, #1
 800e992:	d103      	bne.n	800e99c <_printf_common+0xac>
 800e994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e99c:	3501      	adds	r5, #1
 800e99e:	e7c6      	b.n	800e92e <_printf_common+0x3e>
 800e9a0:	18e1      	adds	r1, r4, r3
 800e9a2:	1c5a      	adds	r2, r3, #1
 800e9a4:	2030      	movs	r0, #48	; 0x30
 800e9a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e9aa:	4422      	add	r2, r4
 800e9ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e9b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e9b4:	3302      	adds	r3, #2
 800e9b6:	e7c7      	b.n	800e948 <_printf_common+0x58>
 800e9b8:	2301      	movs	r3, #1
 800e9ba:	4622      	mov	r2, r4
 800e9bc:	4649      	mov	r1, r9
 800e9be:	4638      	mov	r0, r7
 800e9c0:	47c0      	blx	r8
 800e9c2:	3001      	adds	r0, #1
 800e9c4:	d0e6      	beq.n	800e994 <_printf_common+0xa4>
 800e9c6:	3601      	adds	r6, #1
 800e9c8:	e7d9      	b.n	800e97e <_printf_common+0x8e>
	...

0800e9cc <_printf_i>:
 800e9cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e9d0:	7e0f      	ldrb	r7, [r1, #24]
 800e9d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e9d4:	2f78      	cmp	r7, #120	; 0x78
 800e9d6:	4691      	mov	r9, r2
 800e9d8:	4680      	mov	r8, r0
 800e9da:	460c      	mov	r4, r1
 800e9dc:	469a      	mov	sl, r3
 800e9de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e9e2:	d807      	bhi.n	800e9f4 <_printf_i+0x28>
 800e9e4:	2f62      	cmp	r7, #98	; 0x62
 800e9e6:	d80a      	bhi.n	800e9fe <_printf_i+0x32>
 800e9e8:	2f00      	cmp	r7, #0
 800e9ea:	f000 80d8 	beq.w	800eb9e <_printf_i+0x1d2>
 800e9ee:	2f58      	cmp	r7, #88	; 0x58
 800e9f0:	f000 80a3 	beq.w	800eb3a <_printf_i+0x16e>
 800e9f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e9f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e9fc:	e03a      	b.n	800ea74 <_printf_i+0xa8>
 800e9fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ea02:	2b15      	cmp	r3, #21
 800ea04:	d8f6      	bhi.n	800e9f4 <_printf_i+0x28>
 800ea06:	a101      	add	r1, pc, #4	; (adr r1, 800ea0c <_printf_i+0x40>)
 800ea08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ea0c:	0800ea65 	.word	0x0800ea65
 800ea10:	0800ea79 	.word	0x0800ea79
 800ea14:	0800e9f5 	.word	0x0800e9f5
 800ea18:	0800e9f5 	.word	0x0800e9f5
 800ea1c:	0800e9f5 	.word	0x0800e9f5
 800ea20:	0800e9f5 	.word	0x0800e9f5
 800ea24:	0800ea79 	.word	0x0800ea79
 800ea28:	0800e9f5 	.word	0x0800e9f5
 800ea2c:	0800e9f5 	.word	0x0800e9f5
 800ea30:	0800e9f5 	.word	0x0800e9f5
 800ea34:	0800e9f5 	.word	0x0800e9f5
 800ea38:	0800eb85 	.word	0x0800eb85
 800ea3c:	0800eaa9 	.word	0x0800eaa9
 800ea40:	0800eb67 	.word	0x0800eb67
 800ea44:	0800e9f5 	.word	0x0800e9f5
 800ea48:	0800e9f5 	.word	0x0800e9f5
 800ea4c:	0800eba7 	.word	0x0800eba7
 800ea50:	0800e9f5 	.word	0x0800e9f5
 800ea54:	0800eaa9 	.word	0x0800eaa9
 800ea58:	0800e9f5 	.word	0x0800e9f5
 800ea5c:	0800e9f5 	.word	0x0800e9f5
 800ea60:	0800eb6f 	.word	0x0800eb6f
 800ea64:	682b      	ldr	r3, [r5, #0]
 800ea66:	1d1a      	adds	r2, r3, #4
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	602a      	str	r2, [r5, #0]
 800ea6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ea70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ea74:	2301      	movs	r3, #1
 800ea76:	e0a3      	b.n	800ebc0 <_printf_i+0x1f4>
 800ea78:	6820      	ldr	r0, [r4, #0]
 800ea7a:	6829      	ldr	r1, [r5, #0]
 800ea7c:	0606      	lsls	r6, r0, #24
 800ea7e:	f101 0304 	add.w	r3, r1, #4
 800ea82:	d50a      	bpl.n	800ea9a <_printf_i+0xce>
 800ea84:	680e      	ldr	r6, [r1, #0]
 800ea86:	602b      	str	r3, [r5, #0]
 800ea88:	2e00      	cmp	r6, #0
 800ea8a:	da03      	bge.n	800ea94 <_printf_i+0xc8>
 800ea8c:	232d      	movs	r3, #45	; 0x2d
 800ea8e:	4276      	negs	r6, r6
 800ea90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea94:	485e      	ldr	r0, [pc, #376]	; (800ec10 <_printf_i+0x244>)
 800ea96:	230a      	movs	r3, #10
 800ea98:	e019      	b.n	800eace <_printf_i+0x102>
 800ea9a:	680e      	ldr	r6, [r1, #0]
 800ea9c:	602b      	str	r3, [r5, #0]
 800ea9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800eaa2:	bf18      	it	ne
 800eaa4:	b236      	sxthne	r6, r6
 800eaa6:	e7ef      	b.n	800ea88 <_printf_i+0xbc>
 800eaa8:	682b      	ldr	r3, [r5, #0]
 800eaaa:	6820      	ldr	r0, [r4, #0]
 800eaac:	1d19      	adds	r1, r3, #4
 800eaae:	6029      	str	r1, [r5, #0]
 800eab0:	0601      	lsls	r1, r0, #24
 800eab2:	d501      	bpl.n	800eab8 <_printf_i+0xec>
 800eab4:	681e      	ldr	r6, [r3, #0]
 800eab6:	e002      	b.n	800eabe <_printf_i+0xf2>
 800eab8:	0646      	lsls	r6, r0, #25
 800eaba:	d5fb      	bpl.n	800eab4 <_printf_i+0xe8>
 800eabc:	881e      	ldrh	r6, [r3, #0]
 800eabe:	4854      	ldr	r0, [pc, #336]	; (800ec10 <_printf_i+0x244>)
 800eac0:	2f6f      	cmp	r7, #111	; 0x6f
 800eac2:	bf0c      	ite	eq
 800eac4:	2308      	moveq	r3, #8
 800eac6:	230a      	movne	r3, #10
 800eac8:	2100      	movs	r1, #0
 800eaca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eace:	6865      	ldr	r5, [r4, #4]
 800ead0:	60a5      	str	r5, [r4, #8]
 800ead2:	2d00      	cmp	r5, #0
 800ead4:	bfa2      	ittt	ge
 800ead6:	6821      	ldrge	r1, [r4, #0]
 800ead8:	f021 0104 	bicge.w	r1, r1, #4
 800eadc:	6021      	strge	r1, [r4, #0]
 800eade:	b90e      	cbnz	r6, 800eae4 <_printf_i+0x118>
 800eae0:	2d00      	cmp	r5, #0
 800eae2:	d04d      	beq.n	800eb80 <_printf_i+0x1b4>
 800eae4:	4615      	mov	r5, r2
 800eae6:	fbb6 f1f3 	udiv	r1, r6, r3
 800eaea:	fb03 6711 	mls	r7, r3, r1, r6
 800eaee:	5dc7      	ldrb	r7, [r0, r7]
 800eaf0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800eaf4:	4637      	mov	r7, r6
 800eaf6:	42bb      	cmp	r3, r7
 800eaf8:	460e      	mov	r6, r1
 800eafa:	d9f4      	bls.n	800eae6 <_printf_i+0x11a>
 800eafc:	2b08      	cmp	r3, #8
 800eafe:	d10b      	bne.n	800eb18 <_printf_i+0x14c>
 800eb00:	6823      	ldr	r3, [r4, #0]
 800eb02:	07de      	lsls	r6, r3, #31
 800eb04:	d508      	bpl.n	800eb18 <_printf_i+0x14c>
 800eb06:	6923      	ldr	r3, [r4, #16]
 800eb08:	6861      	ldr	r1, [r4, #4]
 800eb0a:	4299      	cmp	r1, r3
 800eb0c:	bfde      	ittt	le
 800eb0e:	2330      	movle	r3, #48	; 0x30
 800eb10:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eb14:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800eb18:	1b52      	subs	r2, r2, r5
 800eb1a:	6122      	str	r2, [r4, #16]
 800eb1c:	f8cd a000 	str.w	sl, [sp]
 800eb20:	464b      	mov	r3, r9
 800eb22:	aa03      	add	r2, sp, #12
 800eb24:	4621      	mov	r1, r4
 800eb26:	4640      	mov	r0, r8
 800eb28:	f7ff fee2 	bl	800e8f0 <_printf_common>
 800eb2c:	3001      	adds	r0, #1
 800eb2e:	d14c      	bne.n	800ebca <_printf_i+0x1fe>
 800eb30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb34:	b004      	add	sp, #16
 800eb36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb3a:	4835      	ldr	r0, [pc, #212]	; (800ec10 <_printf_i+0x244>)
 800eb3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800eb40:	6829      	ldr	r1, [r5, #0]
 800eb42:	6823      	ldr	r3, [r4, #0]
 800eb44:	f851 6b04 	ldr.w	r6, [r1], #4
 800eb48:	6029      	str	r1, [r5, #0]
 800eb4a:	061d      	lsls	r5, r3, #24
 800eb4c:	d514      	bpl.n	800eb78 <_printf_i+0x1ac>
 800eb4e:	07df      	lsls	r7, r3, #31
 800eb50:	bf44      	itt	mi
 800eb52:	f043 0320 	orrmi.w	r3, r3, #32
 800eb56:	6023      	strmi	r3, [r4, #0]
 800eb58:	b91e      	cbnz	r6, 800eb62 <_printf_i+0x196>
 800eb5a:	6823      	ldr	r3, [r4, #0]
 800eb5c:	f023 0320 	bic.w	r3, r3, #32
 800eb60:	6023      	str	r3, [r4, #0]
 800eb62:	2310      	movs	r3, #16
 800eb64:	e7b0      	b.n	800eac8 <_printf_i+0xfc>
 800eb66:	6823      	ldr	r3, [r4, #0]
 800eb68:	f043 0320 	orr.w	r3, r3, #32
 800eb6c:	6023      	str	r3, [r4, #0]
 800eb6e:	2378      	movs	r3, #120	; 0x78
 800eb70:	4828      	ldr	r0, [pc, #160]	; (800ec14 <_printf_i+0x248>)
 800eb72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800eb76:	e7e3      	b.n	800eb40 <_printf_i+0x174>
 800eb78:	0659      	lsls	r1, r3, #25
 800eb7a:	bf48      	it	mi
 800eb7c:	b2b6      	uxthmi	r6, r6
 800eb7e:	e7e6      	b.n	800eb4e <_printf_i+0x182>
 800eb80:	4615      	mov	r5, r2
 800eb82:	e7bb      	b.n	800eafc <_printf_i+0x130>
 800eb84:	682b      	ldr	r3, [r5, #0]
 800eb86:	6826      	ldr	r6, [r4, #0]
 800eb88:	6961      	ldr	r1, [r4, #20]
 800eb8a:	1d18      	adds	r0, r3, #4
 800eb8c:	6028      	str	r0, [r5, #0]
 800eb8e:	0635      	lsls	r5, r6, #24
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	d501      	bpl.n	800eb98 <_printf_i+0x1cc>
 800eb94:	6019      	str	r1, [r3, #0]
 800eb96:	e002      	b.n	800eb9e <_printf_i+0x1d2>
 800eb98:	0670      	lsls	r0, r6, #25
 800eb9a:	d5fb      	bpl.n	800eb94 <_printf_i+0x1c8>
 800eb9c:	8019      	strh	r1, [r3, #0]
 800eb9e:	2300      	movs	r3, #0
 800eba0:	6123      	str	r3, [r4, #16]
 800eba2:	4615      	mov	r5, r2
 800eba4:	e7ba      	b.n	800eb1c <_printf_i+0x150>
 800eba6:	682b      	ldr	r3, [r5, #0]
 800eba8:	1d1a      	adds	r2, r3, #4
 800ebaa:	602a      	str	r2, [r5, #0]
 800ebac:	681d      	ldr	r5, [r3, #0]
 800ebae:	6862      	ldr	r2, [r4, #4]
 800ebb0:	2100      	movs	r1, #0
 800ebb2:	4628      	mov	r0, r5
 800ebb4:	f7f1 fb3c 	bl	8000230 <memchr>
 800ebb8:	b108      	cbz	r0, 800ebbe <_printf_i+0x1f2>
 800ebba:	1b40      	subs	r0, r0, r5
 800ebbc:	6060      	str	r0, [r4, #4]
 800ebbe:	6863      	ldr	r3, [r4, #4]
 800ebc0:	6123      	str	r3, [r4, #16]
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ebc8:	e7a8      	b.n	800eb1c <_printf_i+0x150>
 800ebca:	6923      	ldr	r3, [r4, #16]
 800ebcc:	462a      	mov	r2, r5
 800ebce:	4649      	mov	r1, r9
 800ebd0:	4640      	mov	r0, r8
 800ebd2:	47d0      	blx	sl
 800ebd4:	3001      	adds	r0, #1
 800ebd6:	d0ab      	beq.n	800eb30 <_printf_i+0x164>
 800ebd8:	6823      	ldr	r3, [r4, #0]
 800ebda:	079b      	lsls	r3, r3, #30
 800ebdc:	d413      	bmi.n	800ec06 <_printf_i+0x23a>
 800ebde:	68e0      	ldr	r0, [r4, #12]
 800ebe0:	9b03      	ldr	r3, [sp, #12]
 800ebe2:	4298      	cmp	r0, r3
 800ebe4:	bfb8      	it	lt
 800ebe6:	4618      	movlt	r0, r3
 800ebe8:	e7a4      	b.n	800eb34 <_printf_i+0x168>
 800ebea:	2301      	movs	r3, #1
 800ebec:	4632      	mov	r2, r6
 800ebee:	4649      	mov	r1, r9
 800ebf0:	4640      	mov	r0, r8
 800ebf2:	47d0      	blx	sl
 800ebf4:	3001      	adds	r0, #1
 800ebf6:	d09b      	beq.n	800eb30 <_printf_i+0x164>
 800ebf8:	3501      	adds	r5, #1
 800ebfa:	68e3      	ldr	r3, [r4, #12]
 800ebfc:	9903      	ldr	r1, [sp, #12]
 800ebfe:	1a5b      	subs	r3, r3, r1
 800ec00:	42ab      	cmp	r3, r5
 800ec02:	dcf2      	bgt.n	800ebea <_printf_i+0x21e>
 800ec04:	e7eb      	b.n	800ebde <_printf_i+0x212>
 800ec06:	2500      	movs	r5, #0
 800ec08:	f104 0619 	add.w	r6, r4, #25
 800ec0c:	e7f5      	b.n	800ebfa <_printf_i+0x22e>
 800ec0e:	bf00      	nop
 800ec10:	08010f7e 	.word	0x08010f7e
 800ec14:	08010f8f 	.word	0x08010f8f

0800ec18 <iprintf>:
 800ec18:	b40f      	push	{r0, r1, r2, r3}
 800ec1a:	4b0a      	ldr	r3, [pc, #40]	; (800ec44 <iprintf+0x2c>)
 800ec1c:	b513      	push	{r0, r1, r4, lr}
 800ec1e:	681c      	ldr	r4, [r3, #0]
 800ec20:	b124      	cbz	r4, 800ec2c <iprintf+0x14>
 800ec22:	69a3      	ldr	r3, [r4, #24]
 800ec24:	b913      	cbnz	r3, 800ec2c <iprintf+0x14>
 800ec26:	4620      	mov	r0, r4
 800ec28:	f000 fef8 	bl	800fa1c <__sinit>
 800ec2c:	ab05      	add	r3, sp, #20
 800ec2e:	9a04      	ldr	r2, [sp, #16]
 800ec30:	68a1      	ldr	r1, [r4, #8]
 800ec32:	9301      	str	r3, [sp, #4]
 800ec34:	4620      	mov	r0, r4
 800ec36:	f001 fc51 	bl	80104dc <_vfiprintf_r>
 800ec3a:	b002      	add	sp, #8
 800ec3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec40:	b004      	add	sp, #16
 800ec42:	4770      	bx	lr
 800ec44:	20002858 	.word	0x20002858

0800ec48 <putchar>:
 800ec48:	4b09      	ldr	r3, [pc, #36]	; (800ec70 <putchar+0x28>)
 800ec4a:	b513      	push	{r0, r1, r4, lr}
 800ec4c:	681c      	ldr	r4, [r3, #0]
 800ec4e:	4601      	mov	r1, r0
 800ec50:	b134      	cbz	r4, 800ec60 <putchar+0x18>
 800ec52:	69a3      	ldr	r3, [r4, #24]
 800ec54:	b923      	cbnz	r3, 800ec60 <putchar+0x18>
 800ec56:	9001      	str	r0, [sp, #4]
 800ec58:	4620      	mov	r0, r4
 800ec5a:	f000 fedf 	bl	800fa1c <__sinit>
 800ec5e:	9901      	ldr	r1, [sp, #4]
 800ec60:	68a2      	ldr	r2, [r4, #8]
 800ec62:	4620      	mov	r0, r4
 800ec64:	b002      	add	sp, #8
 800ec66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec6a:	f001 bd67 	b.w	801073c <_putc_r>
 800ec6e:	bf00      	nop
 800ec70:	20002858 	.word	0x20002858

0800ec74 <quorem>:
 800ec74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec78:	6903      	ldr	r3, [r0, #16]
 800ec7a:	690c      	ldr	r4, [r1, #16]
 800ec7c:	42a3      	cmp	r3, r4
 800ec7e:	4607      	mov	r7, r0
 800ec80:	f2c0 8081 	blt.w	800ed86 <quorem+0x112>
 800ec84:	3c01      	subs	r4, #1
 800ec86:	f101 0814 	add.w	r8, r1, #20
 800ec8a:	f100 0514 	add.w	r5, r0, #20
 800ec8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ec92:	9301      	str	r3, [sp, #4]
 800ec94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ec98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ec9c:	3301      	adds	r3, #1
 800ec9e:	429a      	cmp	r2, r3
 800eca0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800eca4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800eca8:	fbb2 f6f3 	udiv	r6, r2, r3
 800ecac:	d331      	bcc.n	800ed12 <quorem+0x9e>
 800ecae:	f04f 0e00 	mov.w	lr, #0
 800ecb2:	4640      	mov	r0, r8
 800ecb4:	46ac      	mov	ip, r5
 800ecb6:	46f2      	mov	sl, lr
 800ecb8:	f850 2b04 	ldr.w	r2, [r0], #4
 800ecbc:	b293      	uxth	r3, r2
 800ecbe:	fb06 e303 	mla	r3, r6, r3, lr
 800ecc2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ecc6:	b29b      	uxth	r3, r3
 800ecc8:	ebaa 0303 	sub.w	r3, sl, r3
 800eccc:	f8dc a000 	ldr.w	sl, [ip]
 800ecd0:	0c12      	lsrs	r2, r2, #16
 800ecd2:	fa13 f38a 	uxtah	r3, r3, sl
 800ecd6:	fb06 e202 	mla	r2, r6, r2, lr
 800ecda:	9300      	str	r3, [sp, #0]
 800ecdc:	9b00      	ldr	r3, [sp, #0]
 800ecde:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ece2:	b292      	uxth	r2, r2
 800ece4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ece8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ecec:	f8bd 3000 	ldrh.w	r3, [sp]
 800ecf0:	4581      	cmp	r9, r0
 800ecf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ecf6:	f84c 3b04 	str.w	r3, [ip], #4
 800ecfa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ecfe:	d2db      	bcs.n	800ecb8 <quorem+0x44>
 800ed00:	f855 300b 	ldr.w	r3, [r5, fp]
 800ed04:	b92b      	cbnz	r3, 800ed12 <quorem+0x9e>
 800ed06:	9b01      	ldr	r3, [sp, #4]
 800ed08:	3b04      	subs	r3, #4
 800ed0a:	429d      	cmp	r5, r3
 800ed0c:	461a      	mov	r2, r3
 800ed0e:	d32e      	bcc.n	800ed6e <quorem+0xfa>
 800ed10:	613c      	str	r4, [r7, #16]
 800ed12:	4638      	mov	r0, r7
 800ed14:	f001 f9c0 	bl	8010098 <__mcmp>
 800ed18:	2800      	cmp	r0, #0
 800ed1a:	db24      	blt.n	800ed66 <quorem+0xf2>
 800ed1c:	3601      	adds	r6, #1
 800ed1e:	4628      	mov	r0, r5
 800ed20:	f04f 0c00 	mov.w	ip, #0
 800ed24:	f858 2b04 	ldr.w	r2, [r8], #4
 800ed28:	f8d0 e000 	ldr.w	lr, [r0]
 800ed2c:	b293      	uxth	r3, r2
 800ed2e:	ebac 0303 	sub.w	r3, ip, r3
 800ed32:	0c12      	lsrs	r2, r2, #16
 800ed34:	fa13 f38e 	uxtah	r3, r3, lr
 800ed38:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ed3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ed40:	b29b      	uxth	r3, r3
 800ed42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ed46:	45c1      	cmp	r9, r8
 800ed48:	f840 3b04 	str.w	r3, [r0], #4
 800ed4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ed50:	d2e8      	bcs.n	800ed24 <quorem+0xb0>
 800ed52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ed56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ed5a:	b922      	cbnz	r2, 800ed66 <quorem+0xf2>
 800ed5c:	3b04      	subs	r3, #4
 800ed5e:	429d      	cmp	r5, r3
 800ed60:	461a      	mov	r2, r3
 800ed62:	d30a      	bcc.n	800ed7a <quorem+0x106>
 800ed64:	613c      	str	r4, [r7, #16]
 800ed66:	4630      	mov	r0, r6
 800ed68:	b003      	add	sp, #12
 800ed6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed6e:	6812      	ldr	r2, [r2, #0]
 800ed70:	3b04      	subs	r3, #4
 800ed72:	2a00      	cmp	r2, #0
 800ed74:	d1cc      	bne.n	800ed10 <quorem+0x9c>
 800ed76:	3c01      	subs	r4, #1
 800ed78:	e7c7      	b.n	800ed0a <quorem+0x96>
 800ed7a:	6812      	ldr	r2, [r2, #0]
 800ed7c:	3b04      	subs	r3, #4
 800ed7e:	2a00      	cmp	r2, #0
 800ed80:	d1f0      	bne.n	800ed64 <quorem+0xf0>
 800ed82:	3c01      	subs	r4, #1
 800ed84:	e7eb      	b.n	800ed5e <quorem+0xea>
 800ed86:	2000      	movs	r0, #0
 800ed88:	e7ee      	b.n	800ed68 <quorem+0xf4>
 800ed8a:	0000      	movs	r0, r0
 800ed8c:	0000      	movs	r0, r0
	...

0800ed90 <_dtoa_r>:
 800ed90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed94:	ed2d 8b04 	vpush	{d8-d9}
 800ed98:	ec57 6b10 	vmov	r6, r7, d0
 800ed9c:	b093      	sub	sp, #76	; 0x4c
 800ed9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800eda0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800eda4:	9106      	str	r1, [sp, #24]
 800eda6:	ee10 aa10 	vmov	sl, s0
 800edaa:	4604      	mov	r4, r0
 800edac:	9209      	str	r2, [sp, #36]	; 0x24
 800edae:	930c      	str	r3, [sp, #48]	; 0x30
 800edb0:	46bb      	mov	fp, r7
 800edb2:	b975      	cbnz	r5, 800edd2 <_dtoa_r+0x42>
 800edb4:	2010      	movs	r0, #16
 800edb6:	f000 fed7 	bl	800fb68 <malloc>
 800edba:	4602      	mov	r2, r0
 800edbc:	6260      	str	r0, [r4, #36]	; 0x24
 800edbe:	b920      	cbnz	r0, 800edca <_dtoa_r+0x3a>
 800edc0:	4ba7      	ldr	r3, [pc, #668]	; (800f060 <_dtoa_r+0x2d0>)
 800edc2:	21ea      	movs	r1, #234	; 0xea
 800edc4:	48a7      	ldr	r0, [pc, #668]	; (800f064 <_dtoa_r+0x2d4>)
 800edc6:	f001 fe27 	bl	8010a18 <__assert_func>
 800edca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800edce:	6005      	str	r5, [r0, #0]
 800edd0:	60c5      	str	r5, [r0, #12]
 800edd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800edd4:	6819      	ldr	r1, [r3, #0]
 800edd6:	b151      	cbz	r1, 800edee <_dtoa_r+0x5e>
 800edd8:	685a      	ldr	r2, [r3, #4]
 800edda:	604a      	str	r2, [r1, #4]
 800eddc:	2301      	movs	r3, #1
 800edde:	4093      	lsls	r3, r2
 800ede0:	608b      	str	r3, [r1, #8]
 800ede2:	4620      	mov	r0, r4
 800ede4:	f000 ff16 	bl	800fc14 <_Bfree>
 800ede8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800edea:	2200      	movs	r2, #0
 800edec:	601a      	str	r2, [r3, #0]
 800edee:	1e3b      	subs	r3, r7, #0
 800edf0:	bfaa      	itet	ge
 800edf2:	2300      	movge	r3, #0
 800edf4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800edf8:	f8c8 3000 	strge.w	r3, [r8]
 800edfc:	4b9a      	ldr	r3, [pc, #616]	; (800f068 <_dtoa_r+0x2d8>)
 800edfe:	bfbc      	itt	lt
 800ee00:	2201      	movlt	r2, #1
 800ee02:	f8c8 2000 	strlt.w	r2, [r8]
 800ee06:	ea33 030b 	bics.w	r3, r3, fp
 800ee0a:	d11b      	bne.n	800ee44 <_dtoa_r+0xb4>
 800ee0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ee0e:	f242 730f 	movw	r3, #9999	; 0x270f
 800ee12:	6013      	str	r3, [r2, #0]
 800ee14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ee18:	4333      	orrs	r3, r6
 800ee1a:	f000 8592 	beq.w	800f942 <_dtoa_r+0xbb2>
 800ee1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee20:	b963      	cbnz	r3, 800ee3c <_dtoa_r+0xac>
 800ee22:	4b92      	ldr	r3, [pc, #584]	; (800f06c <_dtoa_r+0x2dc>)
 800ee24:	e022      	b.n	800ee6c <_dtoa_r+0xdc>
 800ee26:	4b92      	ldr	r3, [pc, #584]	; (800f070 <_dtoa_r+0x2e0>)
 800ee28:	9301      	str	r3, [sp, #4]
 800ee2a:	3308      	adds	r3, #8
 800ee2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ee2e:	6013      	str	r3, [r2, #0]
 800ee30:	9801      	ldr	r0, [sp, #4]
 800ee32:	b013      	add	sp, #76	; 0x4c
 800ee34:	ecbd 8b04 	vpop	{d8-d9}
 800ee38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee3c:	4b8b      	ldr	r3, [pc, #556]	; (800f06c <_dtoa_r+0x2dc>)
 800ee3e:	9301      	str	r3, [sp, #4]
 800ee40:	3303      	adds	r3, #3
 800ee42:	e7f3      	b.n	800ee2c <_dtoa_r+0x9c>
 800ee44:	2200      	movs	r2, #0
 800ee46:	2300      	movs	r3, #0
 800ee48:	4650      	mov	r0, sl
 800ee4a:	4659      	mov	r1, fp
 800ee4c:	f7f1 fe64 	bl	8000b18 <__aeabi_dcmpeq>
 800ee50:	ec4b ab19 	vmov	d9, sl, fp
 800ee54:	4680      	mov	r8, r0
 800ee56:	b158      	cbz	r0, 800ee70 <_dtoa_r+0xe0>
 800ee58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ee5a:	2301      	movs	r3, #1
 800ee5c:	6013      	str	r3, [r2, #0]
 800ee5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	f000 856b 	beq.w	800f93c <_dtoa_r+0xbac>
 800ee66:	4883      	ldr	r0, [pc, #524]	; (800f074 <_dtoa_r+0x2e4>)
 800ee68:	6018      	str	r0, [r3, #0]
 800ee6a:	1e43      	subs	r3, r0, #1
 800ee6c:	9301      	str	r3, [sp, #4]
 800ee6e:	e7df      	b.n	800ee30 <_dtoa_r+0xa0>
 800ee70:	ec4b ab10 	vmov	d0, sl, fp
 800ee74:	aa10      	add	r2, sp, #64	; 0x40
 800ee76:	a911      	add	r1, sp, #68	; 0x44
 800ee78:	4620      	mov	r0, r4
 800ee7a:	f001 f9b3 	bl	80101e4 <__d2b>
 800ee7e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ee82:	ee08 0a10 	vmov	s16, r0
 800ee86:	2d00      	cmp	r5, #0
 800ee88:	f000 8084 	beq.w	800ef94 <_dtoa_r+0x204>
 800ee8c:	ee19 3a90 	vmov	r3, s19
 800ee90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ee94:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ee98:	4656      	mov	r6, sl
 800ee9a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ee9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800eea2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800eea6:	4b74      	ldr	r3, [pc, #464]	; (800f078 <_dtoa_r+0x2e8>)
 800eea8:	2200      	movs	r2, #0
 800eeaa:	4630      	mov	r0, r6
 800eeac:	4639      	mov	r1, r7
 800eeae:	f7f1 fa13 	bl	80002d8 <__aeabi_dsub>
 800eeb2:	a365      	add	r3, pc, #404	; (adr r3, 800f048 <_dtoa_r+0x2b8>)
 800eeb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb8:	f7f1 fbc6 	bl	8000648 <__aeabi_dmul>
 800eebc:	a364      	add	r3, pc, #400	; (adr r3, 800f050 <_dtoa_r+0x2c0>)
 800eebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eec2:	f7f1 fa0b 	bl	80002dc <__adddf3>
 800eec6:	4606      	mov	r6, r0
 800eec8:	4628      	mov	r0, r5
 800eeca:	460f      	mov	r7, r1
 800eecc:	f7f1 fb52 	bl	8000574 <__aeabi_i2d>
 800eed0:	a361      	add	r3, pc, #388	; (adr r3, 800f058 <_dtoa_r+0x2c8>)
 800eed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed6:	f7f1 fbb7 	bl	8000648 <__aeabi_dmul>
 800eeda:	4602      	mov	r2, r0
 800eedc:	460b      	mov	r3, r1
 800eede:	4630      	mov	r0, r6
 800eee0:	4639      	mov	r1, r7
 800eee2:	f7f1 f9fb 	bl	80002dc <__adddf3>
 800eee6:	4606      	mov	r6, r0
 800eee8:	460f      	mov	r7, r1
 800eeea:	f7f1 fe5d 	bl	8000ba8 <__aeabi_d2iz>
 800eeee:	2200      	movs	r2, #0
 800eef0:	9000      	str	r0, [sp, #0]
 800eef2:	2300      	movs	r3, #0
 800eef4:	4630      	mov	r0, r6
 800eef6:	4639      	mov	r1, r7
 800eef8:	f7f1 fe18 	bl	8000b2c <__aeabi_dcmplt>
 800eefc:	b150      	cbz	r0, 800ef14 <_dtoa_r+0x184>
 800eefe:	9800      	ldr	r0, [sp, #0]
 800ef00:	f7f1 fb38 	bl	8000574 <__aeabi_i2d>
 800ef04:	4632      	mov	r2, r6
 800ef06:	463b      	mov	r3, r7
 800ef08:	f7f1 fe06 	bl	8000b18 <__aeabi_dcmpeq>
 800ef0c:	b910      	cbnz	r0, 800ef14 <_dtoa_r+0x184>
 800ef0e:	9b00      	ldr	r3, [sp, #0]
 800ef10:	3b01      	subs	r3, #1
 800ef12:	9300      	str	r3, [sp, #0]
 800ef14:	9b00      	ldr	r3, [sp, #0]
 800ef16:	2b16      	cmp	r3, #22
 800ef18:	d85a      	bhi.n	800efd0 <_dtoa_r+0x240>
 800ef1a:	9a00      	ldr	r2, [sp, #0]
 800ef1c:	4b57      	ldr	r3, [pc, #348]	; (800f07c <_dtoa_r+0x2ec>)
 800ef1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ef22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef26:	ec51 0b19 	vmov	r0, r1, d9
 800ef2a:	f7f1 fdff 	bl	8000b2c <__aeabi_dcmplt>
 800ef2e:	2800      	cmp	r0, #0
 800ef30:	d050      	beq.n	800efd4 <_dtoa_r+0x244>
 800ef32:	9b00      	ldr	r3, [sp, #0]
 800ef34:	3b01      	subs	r3, #1
 800ef36:	9300      	str	r3, [sp, #0]
 800ef38:	2300      	movs	r3, #0
 800ef3a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ef3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ef3e:	1b5d      	subs	r5, r3, r5
 800ef40:	1e6b      	subs	r3, r5, #1
 800ef42:	9305      	str	r3, [sp, #20]
 800ef44:	bf45      	ittet	mi
 800ef46:	f1c5 0301 	rsbmi	r3, r5, #1
 800ef4a:	9304      	strmi	r3, [sp, #16]
 800ef4c:	2300      	movpl	r3, #0
 800ef4e:	2300      	movmi	r3, #0
 800ef50:	bf4c      	ite	mi
 800ef52:	9305      	strmi	r3, [sp, #20]
 800ef54:	9304      	strpl	r3, [sp, #16]
 800ef56:	9b00      	ldr	r3, [sp, #0]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	db3d      	blt.n	800efd8 <_dtoa_r+0x248>
 800ef5c:	9b05      	ldr	r3, [sp, #20]
 800ef5e:	9a00      	ldr	r2, [sp, #0]
 800ef60:	920a      	str	r2, [sp, #40]	; 0x28
 800ef62:	4413      	add	r3, r2
 800ef64:	9305      	str	r3, [sp, #20]
 800ef66:	2300      	movs	r3, #0
 800ef68:	9307      	str	r3, [sp, #28]
 800ef6a:	9b06      	ldr	r3, [sp, #24]
 800ef6c:	2b09      	cmp	r3, #9
 800ef6e:	f200 8089 	bhi.w	800f084 <_dtoa_r+0x2f4>
 800ef72:	2b05      	cmp	r3, #5
 800ef74:	bfc4      	itt	gt
 800ef76:	3b04      	subgt	r3, #4
 800ef78:	9306      	strgt	r3, [sp, #24]
 800ef7a:	9b06      	ldr	r3, [sp, #24]
 800ef7c:	f1a3 0302 	sub.w	r3, r3, #2
 800ef80:	bfcc      	ite	gt
 800ef82:	2500      	movgt	r5, #0
 800ef84:	2501      	movle	r5, #1
 800ef86:	2b03      	cmp	r3, #3
 800ef88:	f200 8087 	bhi.w	800f09a <_dtoa_r+0x30a>
 800ef8c:	e8df f003 	tbb	[pc, r3]
 800ef90:	59383a2d 	.word	0x59383a2d
 800ef94:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ef98:	441d      	add	r5, r3
 800ef9a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ef9e:	2b20      	cmp	r3, #32
 800efa0:	bfc1      	itttt	gt
 800efa2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800efa6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800efaa:	fa0b f303 	lslgt.w	r3, fp, r3
 800efae:	fa26 f000 	lsrgt.w	r0, r6, r0
 800efb2:	bfda      	itte	le
 800efb4:	f1c3 0320 	rsble	r3, r3, #32
 800efb8:	fa06 f003 	lslle.w	r0, r6, r3
 800efbc:	4318      	orrgt	r0, r3
 800efbe:	f7f1 fac9 	bl	8000554 <__aeabi_ui2d>
 800efc2:	2301      	movs	r3, #1
 800efc4:	4606      	mov	r6, r0
 800efc6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800efca:	3d01      	subs	r5, #1
 800efcc:	930e      	str	r3, [sp, #56]	; 0x38
 800efce:	e76a      	b.n	800eea6 <_dtoa_r+0x116>
 800efd0:	2301      	movs	r3, #1
 800efd2:	e7b2      	b.n	800ef3a <_dtoa_r+0x1aa>
 800efd4:	900b      	str	r0, [sp, #44]	; 0x2c
 800efd6:	e7b1      	b.n	800ef3c <_dtoa_r+0x1ac>
 800efd8:	9b04      	ldr	r3, [sp, #16]
 800efda:	9a00      	ldr	r2, [sp, #0]
 800efdc:	1a9b      	subs	r3, r3, r2
 800efde:	9304      	str	r3, [sp, #16]
 800efe0:	4253      	negs	r3, r2
 800efe2:	9307      	str	r3, [sp, #28]
 800efe4:	2300      	movs	r3, #0
 800efe6:	930a      	str	r3, [sp, #40]	; 0x28
 800efe8:	e7bf      	b.n	800ef6a <_dtoa_r+0x1da>
 800efea:	2300      	movs	r3, #0
 800efec:	9308      	str	r3, [sp, #32]
 800efee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	dc55      	bgt.n	800f0a0 <_dtoa_r+0x310>
 800eff4:	2301      	movs	r3, #1
 800eff6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800effa:	461a      	mov	r2, r3
 800effc:	9209      	str	r2, [sp, #36]	; 0x24
 800effe:	e00c      	b.n	800f01a <_dtoa_r+0x28a>
 800f000:	2301      	movs	r3, #1
 800f002:	e7f3      	b.n	800efec <_dtoa_r+0x25c>
 800f004:	2300      	movs	r3, #0
 800f006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f008:	9308      	str	r3, [sp, #32]
 800f00a:	9b00      	ldr	r3, [sp, #0]
 800f00c:	4413      	add	r3, r2
 800f00e:	9302      	str	r3, [sp, #8]
 800f010:	3301      	adds	r3, #1
 800f012:	2b01      	cmp	r3, #1
 800f014:	9303      	str	r3, [sp, #12]
 800f016:	bfb8      	it	lt
 800f018:	2301      	movlt	r3, #1
 800f01a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f01c:	2200      	movs	r2, #0
 800f01e:	6042      	str	r2, [r0, #4]
 800f020:	2204      	movs	r2, #4
 800f022:	f102 0614 	add.w	r6, r2, #20
 800f026:	429e      	cmp	r6, r3
 800f028:	6841      	ldr	r1, [r0, #4]
 800f02a:	d93d      	bls.n	800f0a8 <_dtoa_r+0x318>
 800f02c:	4620      	mov	r0, r4
 800f02e:	f000 fdb1 	bl	800fb94 <_Balloc>
 800f032:	9001      	str	r0, [sp, #4]
 800f034:	2800      	cmp	r0, #0
 800f036:	d13b      	bne.n	800f0b0 <_dtoa_r+0x320>
 800f038:	4b11      	ldr	r3, [pc, #68]	; (800f080 <_dtoa_r+0x2f0>)
 800f03a:	4602      	mov	r2, r0
 800f03c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f040:	e6c0      	b.n	800edc4 <_dtoa_r+0x34>
 800f042:	2301      	movs	r3, #1
 800f044:	e7df      	b.n	800f006 <_dtoa_r+0x276>
 800f046:	bf00      	nop
 800f048:	636f4361 	.word	0x636f4361
 800f04c:	3fd287a7 	.word	0x3fd287a7
 800f050:	8b60c8b3 	.word	0x8b60c8b3
 800f054:	3fc68a28 	.word	0x3fc68a28
 800f058:	509f79fb 	.word	0x509f79fb
 800f05c:	3fd34413 	.word	0x3fd34413
 800f060:	08010fad 	.word	0x08010fad
 800f064:	08010fc4 	.word	0x08010fc4
 800f068:	7ff00000 	.word	0x7ff00000
 800f06c:	08010fa9 	.word	0x08010fa9
 800f070:	08010fa0 	.word	0x08010fa0
 800f074:	08010f7d 	.word	0x08010f7d
 800f078:	3ff80000 	.word	0x3ff80000
 800f07c:	08011118 	.word	0x08011118
 800f080:	0801101f 	.word	0x0801101f
 800f084:	2501      	movs	r5, #1
 800f086:	2300      	movs	r3, #0
 800f088:	9306      	str	r3, [sp, #24]
 800f08a:	9508      	str	r5, [sp, #32]
 800f08c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f090:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f094:	2200      	movs	r2, #0
 800f096:	2312      	movs	r3, #18
 800f098:	e7b0      	b.n	800effc <_dtoa_r+0x26c>
 800f09a:	2301      	movs	r3, #1
 800f09c:	9308      	str	r3, [sp, #32]
 800f09e:	e7f5      	b.n	800f08c <_dtoa_r+0x2fc>
 800f0a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f0a6:	e7b8      	b.n	800f01a <_dtoa_r+0x28a>
 800f0a8:	3101      	adds	r1, #1
 800f0aa:	6041      	str	r1, [r0, #4]
 800f0ac:	0052      	lsls	r2, r2, #1
 800f0ae:	e7b8      	b.n	800f022 <_dtoa_r+0x292>
 800f0b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f0b2:	9a01      	ldr	r2, [sp, #4]
 800f0b4:	601a      	str	r2, [r3, #0]
 800f0b6:	9b03      	ldr	r3, [sp, #12]
 800f0b8:	2b0e      	cmp	r3, #14
 800f0ba:	f200 809d 	bhi.w	800f1f8 <_dtoa_r+0x468>
 800f0be:	2d00      	cmp	r5, #0
 800f0c0:	f000 809a 	beq.w	800f1f8 <_dtoa_r+0x468>
 800f0c4:	9b00      	ldr	r3, [sp, #0]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	dd32      	ble.n	800f130 <_dtoa_r+0x3a0>
 800f0ca:	4ab7      	ldr	r2, [pc, #732]	; (800f3a8 <_dtoa_r+0x618>)
 800f0cc:	f003 030f 	and.w	r3, r3, #15
 800f0d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f0d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f0d8:	9b00      	ldr	r3, [sp, #0]
 800f0da:	05d8      	lsls	r0, r3, #23
 800f0dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f0e0:	d516      	bpl.n	800f110 <_dtoa_r+0x380>
 800f0e2:	4bb2      	ldr	r3, [pc, #712]	; (800f3ac <_dtoa_r+0x61c>)
 800f0e4:	ec51 0b19 	vmov	r0, r1, d9
 800f0e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f0ec:	f7f1 fbd6 	bl	800089c <__aeabi_ddiv>
 800f0f0:	f007 070f 	and.w	r7, r7, #15
 800f0f4:	4682      	mov	sl, r0
 800f0f6:	468b      	mov	fp, r1
 800f0f8:	2503      	movs	r5, #3
 800f0fa:	4eac      	ldr	r6, [pc, #688]	; (800f3ac <_dtoa_r+0x61c>)
 800f0fc:	b957      	cbnz	r7, 800f114 <_dtoa_r+0x384>
 800f0fe:	4642      	mov	r2, r8
 800f100:	464b      	mov	r3, r9
 800f102:	4650      	mov	r0, sl
 800f104:	4659      	mov	r1, fp
 800f106:	f7f1 fbc9 	bl	800089c <__aeabi_ddiv>
 800f10a:	4682      	mov	sl, r0
 800f10c:	468b      	mov	fp, r1
 800f10e:	e028      	b.n	800f162 <_dtoa_r+0x3d2>
 800f110:	2502      	movs	r5, #2
 800f112:	e7f2      	b.n	800f0fa <_dtoa_r+0x36a>
 800f114:	07f9      	lsls	r1, r7, #31
 800f116:	d508      	bpl.n	800f12a <_dtoa_r+0x39a>
 800f118:	4640      	mov	r0, r8
 800f11a:	4649      	mov	r1, r9
 800f11c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f120:	f7f1 fa92 	bl	8000648 <__aeabi_dmul>
 800f124:	3501      	adds	r5, #1
 800f126:	4680      	mov	r8, r0
 800f128:	4689      	mov	r9, r1
 800f12a:	107f      	asrs	r7, r7, #1
 800f12c:	3608      	adds	r6, #8
 800f12e:	e7e5      	b.n	800f0fc <_dtoa_r+0x36c>
 800f130:	f000 809b 	beq.w	800f26a <_dtoa_r+0x4da>
 800f134:	9b00      	ldr	r3, [sp, #0]
 800f136:	4f9d      	ldr	r7, [pc, #628]	; (800f3ac <_dtoa_r+0x61c>)
 800f138:	425e      	negs	r6, r3
 800f13a:	4b9b      	ldr	r3, [pc, #620]	; (800f3a8 <_dtoa_r+0x618>)
 800f13c:	f006 020f 	and.w	r2, r6, #15
 800f140:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f148:	ec51 0b19 	vmov	r0, r1, d9
 800f14c:	f7f1 fa7c 	bl	8000648 <__aeabi_dmul>
 800f150:	1136      	asrs	r6, r6, #4
 800f152:	4682      	mov	sl, r0
 800f154:	468b      	mov	fp, r1
 800f156:	2300      	movs	r3, #0
 800f158:	2502      	movs	r5, #2
 800f15a:	2e00      	cmp	r6, #0
 800f15c:	d17a      	bne.n	800f254 <_dtoa_r+0x4c4>
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d1d3      	bne.n	800f10a <_dtoa_r+0x37a>
 800f162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f164:	2b00      	cmp	r3, #0
 800f166:	f000 8082 	beq.w	800f26e <_dtoa_r+0x4de>
 800f16a:	4b91      	ldr	r3, [pc, #580]	; (800f3b0 <_dtoa_r+0x620>)
 800f16c:	2200      	movs	r2, #0
 800f16e:	4650      	mov	r0, sl
 800f170:	4659      	mov	r1, fp
 800f172:	f7f1 fcdb 	bl	8000b2c <__aeabi_dcmplt>
 800f176:	2800      	cmp	r0, #0
 800f178:	d079      	beq.n	800f26e <_dtoa_r+0x4de>
 800f17a:	9b03      	ldr	r3, [sp, #12]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d076      	beq.n	800f26e <_dtoa_r+0x4de>
 800f180:	9b02      	ldr	r3, [sp, #8]
 800f182:	2b00      	cmp	r3, #0
 800f184:	dd36      	ble.n	800f1f4 <_dtoa_r+0x464>
 800f186:	9b00      	ldr	r3, [sp, #0]
 800f188:	4650      	mov	r0, sl
 800f18a:	4659      	mov	r1, fp
 800f18c:	1e5f      	subs	r7, r3, #1
 800f18e:	2200      	movs	r2, #0
 800f190:	4b88      	ldr	r3, [pc, #544]	; (800f3b4 <_dtoa_r+0x624>)
 800f192:	f7f1 fa59 	bl	8000648 <__aeabi_dmul>
 800f196:	9e02      	ldr	r6, [sp, #8]
 800f198:	4682      	mov	sl, r0
 800f19a:	468b      	mov	fp, r1
 800f19c:	3501      	adds	r5, #1
 800f19e:	4628      	mov	r0, r5
 800f1a0:	f7f1 f9e8 	bl	8000574 <__aeabi_i2d>
 800f1a4:	4652      	mov	r2, sl
 800f1a6:	465b      	mov	r3, fp
 800f1a8:	f7f1 fa4e 	bl	8000648 <__aeabi_dmul>
 800f1ac:	4b82      	ldr	r3, [pc, #520]	; (800f3b8 <_dtoa_r+0x628>)
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	f7f1 f894 	bl	80002dc <__adddf3>
 800f1b4:	46d0      	mov	r8, sl
 800f1b6:	46d9      	mov	r9, fp
 800f1b8:	4682      	mov	sl, r0
 800f1ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f1be:	2e00      	cmp	r6, #0
 800f1c0:	d158      	bne.n	800f274 <_dtoa_r+0x4e4>
 800f1c2:	4b7e      	ldr	r3, [pc, #504]	; (800f3bc <_dtoa_r+0x62c>)
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	4640      	mov	r0, r8
 800f1c8:	4649      	mov	r1, r9
 800f1ca:	f7f1 f885 	bl	80002d8 <__aeabi_dsub>
 800f1ce:	4652      	mov	r2, sl
 800f1d0:	465b      	mov	r3, fp
 800f1d2:	4680      	mov	r8, r0
 800f1d4:	4689      	mov	r9, r1
 800f1d6:	f7f1 fcc7 	bl	8000b68 <__aeabi_dcmpgt>
 800f1da:	2800      	cmp	r0, #0
 800f1dc:	f040 8295 	bne.w	800f70a <_dtoa_r+0x97a>
 800f1e0:	4652      	mov	r2, sl
 800f1e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f1e6:	4640      	mov	r0, r8
 800f1e8:	4649      	mov	r1, r9
 800f1ea:	f7f1 fc9f 	bl	8000b2c <__aeabi_dcmplt>
 800f1ee:	2800      	cmp	r0, #0
 800f1f0:	f040 8289 	bne.w	800f706 <_dtoa_r+0x976>
 800f1f4:	ec5b ab19 	vmov	sl, fp, d9
 800f1f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	f2c0 8148 	blt.w	800f490 <_dtoa_r+0x700>
 800f200:	9a00      	ldr	r2, [sp, #0]
 800f202:	2a0e      	cmp	r2, #14
 800f204:	f300 8144 	bgt.w	800f490 <_dtoa_r+0x700>
 800f208:	4b67      	ldr	r3, [pc, #412]	; (800f3a8 <_dtoa_r+0x618>)
 800f20a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f20e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f214:	2b00      	cmp	r3, #0
 800f216:	f280 80d5 	bge.w	800f3c4 <_dtoa_r+0x634>
 800f21a:	9b03      	ldr	r3, [sp, #12]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	f300 80d1 	bgt.w	800f3c4 <_dtoa_r+0x634>
 800f222:	f040 826f 	bne.w	800f704 <_dtoa_r+0x974>
 800f226:	4b65      	ldr	r3, [pc, #404]	; (800f3bc <_dtoa_r+0x62c>)
 800f228:	2200      	movs	r2, #0
 800f22a:	4640      	mov	r0, r8
 800f22c:	4649      	mov	r1, r9
 800f22e:	f7f1 fa0b 	bl	8000648 <__aeabi_dmul>
 800f232:	4652      	mov	r2, sl
 800f234:	465b      	mov	r3, fp
 800f236:	f7f1 fc8d 	bl	8000b54 <__aeabi_dcmpge>
 800f23a:	9e03      	ldr	r6, [sp, #12]
 800f23c:	4637      	mov	r7, r6
 800f23e:	2800      	cmp	r0, #0
 800f240:	f040 8245 	bne.w	800f6ce <_dtoa_r+0x93e>
 800f244:	9d01      	ldr	r5, [sp, #4]
 800f246:	2331      	movs	r3, #49	; 0x31
 800f248:	f805 3b01 	strb.w	r3, [r5], #1
 800f24c:	9b00      	ldr	r3, [sp, #0]
 800f24e:	3301      	adds	r3, #1
 800f250:	9300      	str	r3, [sp, #0]
 800f252:	e240      	b.n	800f6d6 <_dtoa_r+0x946>
 800f254:	07f2      	lsls	r2, r6, #31
 800f256:	d505      	bpl.n	800f264 <_dtoa_r+0x4d4>
 800f258:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f25c:	f7f1 f9f4 	bl	8000648 <__aeabi_dmul>
 800f260:	3501      	adds	r5, #1
 800f262:	2301      	movs	r3, #1
 800f264:	1076      	asrs	r6, r6, #1
 800f266:	3708      	adds	r7, #8
 800f268:	e777      	b.n	800f15a <_dtoa_r+0x3ca>
 800f26a:	2502      	movs	r5, #2
 800f26c:	e779      	b.n	800f162 <_dtoa_r+0x3d2>
 800f26e:	9f00      	ldr	r7, [sp, #0]
 800f270:	9e03      	ldr	r6, [sp, #12]
 800f272:	e794      	b.n	800f19e <_dtoa_r+0x40e>
 800f274:	9901      	ldr	r1, [sp, #4]
 800f276:	4b4c      	ldr	r3, [pc, #304]	; (800f3a8 <_dtoa_r+0x618>)
 800f278:	4431      	add	r1, r6
 800f27a:	910d      	str	r1, [sp, #52]	; 0x34
 800f27c:	9908      	ldr	r1, [sp, #32]
 800f27e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f282:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f286:	2900      	cmp	r1, #0
 800f288:	d043      	beq.n	800f312 <_dtoa_r+0x582>
 800f28a:	494d      	ldr	r1, [pc, #308]	; (800f3c0 <_dtoa_r+0x630>)
 800f28c:	2000      	movs	r0, #0
 800f28e:	f7f1 fb05 	bl	800089c <__aeabi_ddiv>
 800f292:	4652      	mov	r2, sl
 800f294:	465b      	mov	r3, fp
 800f296:	f7f1 f81f 	bl	80002d8 <__aeabi_dsub>
 800f29a:	9d01      	ldr	r5, [sp, #4]
 800f29c:	4682      	mov	sl, r0
 800f29e:	468b      	mov	fp, r1
 800f2a0:	4649      	mov	r1, r9
 800f2a2:	4640      	mov	r0, r8
 800f2a4:	f7f1 fc80 	bl	8000ba8 <__aeabi_d2iz>
 800f2a8:	4606      	mov	r6, r0
 800f2aa:	f7f1 f963 	bl	8000574 <__aeabi_i2d>
 800f2ae:	4602      	mov	r2, r0
 800f2b0:	460b      	mov	r3, r1
 800f2b2:	4640      	mov	r0, r8
 800f2b4:	4649      	mov	r1, r9
 800f2b6:	f7f1 f80f 	bl	80002d8 <__aeabi_dsub>
 800f2ba:	3630      	adds	r6, #48	; 0x30
 800f2bc:	f805 6b01 	strb.w	r6, [r5], #1
 800f2c0:	4652      	mov	r2, sl
 800f2c2:	465b      	mov	r3, fp
 800f2c4:	4680      	mov	r8, r0
 800f2c6:	4689      	mov	r9, r1
 800f2c8:	f7f1 fc30 	bl	8000b2c <__aeabi_dcmplt>
 800f2cc:	2800      	cmp	r0, #0
 800f2ce:	d163      	bne.n	800f398 <_dtoa_r+0x608>
 800f2d0:	4642      	mov	r2, r8
 800f2d2:	464b      	mov	r3, r9
 800f2d4:	4936      	ldr	r1, [pc, #216]	; (800f3b0 <_dtoa_r+0x620>)
 800f2d6:	2000      	movs	r0, #0
 800f2d8:	f7f0 fffe 	bl	80002d8 <__aeabi_dsub>
 800f2dc:	4652      	mov	r2, sl
 800f2de:	465b      	mov	r3, fp
 800f2e0:	f7f1 fc24 	bl	8000b2c <__aeabi_dcmplt>
 800f2e4:	2800      	cmp	r0, #0
 800f2e6:	f040 80b5 	bne.w	800f454 <_dtoa_r+0x6c4>
 800f2ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f2ec:	429d      	cmp	r5, r3
 800f2ee:	d081      	beq.n	800f1f4 <_dtoa_r+0x464>
 800f2f0:	4b30      	ldr	r3, [pc, #192]	; (800f3b4 <_dtoa_r+0x624>)
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	4650      	mov	r0, sl
 800f2f6:	4659      	mov	r1, fp
 800f2f8:	f7f1 f9a6 	bl	8000648 <__aeabi_dmul>
 800f2fc:	4b2d      	ldr	r3, [pc, #180]	; (800f3b4 <_dtoa_r+0x624>)
 800f2fe:	4682      	mov	sl, r0
 800f300:	468b      	mov	fp, r1
 800f302:	4640      	mov	r0, r8
 800f304:	4649      	mov	r1, r9
 800f306:	2200      	movs	r2, #0
 800f308:	f7f1 f99e 	bl	8000648 <__aeabi_dmul>
 800f30c:	4680      	mov	r8, r0
 800f30e:	4689      	mov	r9, r1
 800f310:	e7c6      	b.n	800f2a0 <_dtoa_r+0x510>
 800f312:	4650      	mov	r0, sl
 800f314:	4659      	mov	r1, fp
 800f316:	f7f1 f997 	bl	8000648 <__aeabi_dmul>
 800f31a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f31c:	9d01      	ldr	r5, [sp, #4]
 800f31e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f320:	4682      	mov	sl, r0
 800f322:	468b      	mov	fp, r1
 800f324:	4649      	mov	r1, r9
 800f326:	4640      	mov	r0, r8
 800f328:	f7f1 fc3e 	bl	8000ba8 <__aeabi_d2iz>
 800f32c:	4606      	mov	r6, r0
 800f32e:	f7f1 f921 	bl	8000574 <__aeabi_i2d>
 800f332:	3630      	adds	r6, #48	; 0x30
 800f334:	4602      	mov	r2, r0
 800f336:	460b      	mov	r3, r1
 800f338:	4640      	mov	r0, r8
 800f33a:	4649      	mov	r1, r9
 800f33c:	f7f0 ffcc 	bl	80002d8 <__aeabi_dsub>
 800f340:	f805 6b01 	strb.w	r6, [r5], #1
 800f344:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f346:	429d      	cmp	r5, r3
 800f348:	4680      	mov	r8, r0
 800f34a:	4689      	mov	r9, r1
 800f34c:	f04f 0200 	mov.w	r2, #0
 800f350:	d124      	bne.n	800f39c <_dtoa_r+0x60c>
 800f352:	4b1b      	ldr	r3, [pc, #108]	; (800f3c0 <_dtoa_r+0x630>)
 800f354:	4650      	mov	r0, sl
 800f356:	4659      	mov	r1, fp
 800f358:	f7f0 ffc0 	bl	80002dc <__adddf3>
 800f35c:	4602      	mov	r2, r0
 800f35e:	460b      	mov	r3, r1
 800f360:	4640      	mov	r0, r8
 800f362:	4649      	mov	r1, r9
 800f364:	f7f1 fc00 	bl	8000b68 <__aeabi_dcmpgt>
 800f368:	2800      	cmp	r0, #0
 800f36a:	d173      	bne.n	800f454 <_dtoa_r+0x6c4>
 800f36c:	4652      	mov	r2, sl
 800f36e:	465b      	mov	r3, fp
 800f370:	4913      	ldr	r1, [pc, #76]	; (800f3c0 <_dtoa_r+0x630>)
 800f372:	2000      	movs	r0, #0
 800f374:	f7f0 ffb0 	bl	80002d8 <__aeabi_dsub>
 800f378:	4602      	mov	r2, r0
 800f37a:	460b      	mov	r3, r1
 800f37c:	4640      	mov	r0, r8
 800f37e:	4649      	mov	r1, r9
 800f380:	f7f1 fbd4 	bl	8000b2c <__aeabi_dcmplt>
 800f384:	2800      	cmp	r0, #0
 800f386:	f43f af35 	beq.w	800f1f4 <_dtoa_r+0x464>
 800f38a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f38c:	1e6b      	subs	r3, r5, #1
 800f38e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f390:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f394:	2b30      	cmp	r3, #48	; 0x30
 800f396:	d0f8      	beq.n	800f38a <_dtoa_r+0x5fa>
 800f398:	9700      	str	r7, [sp, #0]
 800f39a:	e049      	b.n	800f430 <_dtoa_r+0x6a0>
 800f39c:	4b05      	ldr	r3, [pc, #20]	; (800f3b4 <_dtoa_r+0x624>)
 800f39e:	f7f1 f953 	bl	8000648 <__aeabi_dmul>
 800f3a2:	4680      	mov	r8, r0
 800f3a4:	4689      	mov	r9, r1
 800f3a6:	e7bd      	b.n	800f324 <_dtoa_r+0x594>
 800f3a8:	08011118 	.word	0x08011118
 800f3ac:	080110f0 	.word	0x080110f0
 800f3b0:	3ff00000 	.word	0x3ff00000
 800f3b4:	40240000 	.word	0x40240000
 800f3b8:	401c0000 	.word	0x401c0000
 800f3bc:	40140000 	.word	0x40140000
 800f3c0:	3fe00000 	.word	0x3fe00000
 800f3c4:	9d01      	ldr	r5, [sp, #4]
 800f3c6:	4656      	mov	r6, sl
 800f3c8:	465f      	mov	r7, fp
 800f3ca:	4642      	mov	r2, r8
 800f3cc:	464b      	mov	r3, r9
 800f3ce:	4630      	mov	r0, r6
 800f3d0:	4639      	mov	r1, r7
 800f3d2:	f7f1 fa63 	bl	800089c <__aeabi_ddiv>
 800f3d6:	f7f1 fbe7 	bl	8000ba8 <__aeabi_d2iz>
 800f3da:	4682      	mov	sl, r0
 800f3dc:	f7f1 f8ca 	bl	8000574 <__aeabi_i2d>
 800f3e0:	4642      	mov	r2, r8
 800f3e2:	464b      	mov	r3, r9
 800f3e4:	f7f1 f930 	bl	8000648 <__aeabi_dmul>
 800f3e8:	4602      	mov	r2, r0
 800f3ea:	460b      	mov	r3, r1
 800f3ec:	4630      	mov	r0, r6
 800f3ee:	4639      	mov	r1, r7
 800f3f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800f3f4:	f7f0 ff70 	bl	80002d8 <__aeabi_dsub>
 800f3f8:	f805 6b01 	strb.w	r6, [r5], #1
 800f3fc:	9e01      	ldr	r6, [sp, #4]
 800f3fe:	9f03      	ldr	r7, [sp, #12]
 800f400:	1bae      	subs	r6, r5, r6
 800f402:	42b7      	cmp	r7, r6
 800f404:	4602      	mov	r2, r0
 800f406:	460b      	mov	r3, r1
 800f408:	d135      	bne.n	800f476 <_dtoa_r+0x6e6>
 800f40a:	f7f0 ff67 	bl	80002dc <__adddf3>
 800f40e:	4642      	mov	r2, r8
 800f410:	464b      	mov	r3, r9
 800f412:	4606      	mov	r6, r0
 800f414:	460f      	mov	r7, r1
 800f416:	f7f1 fba7 	bl	8000b68 <__aeabi_dcmpgt>
 800f41a:	b9d0      	cbnz	r0, 800f452 <_dtoa_r+0x6c2>
 800f41c:	4642      	mov	r2, r8
 800f41e:	464b      	mov	r3, r9
 800f420:	4630      	mov	r0, r6
 800f422:	4639      	mov	r1, r7
 800f424:	f7f1 fb78 	bl	8000b18 <__aeabi_dcmpeq>
 800f428:	b110      	cbz	r0, 800f430 <_dtoa_r+0x6a0>
 800f42a:	f01a 0f01 	tst.w	sl, #1
 800f42e:	d110      	bne.n	800f452 <_dtoa_r+0x6c2>
 800f430:	4620      	mov	r0, r4
 800f432:	ee18 1a10 	vmov	r1, s16
 800f436:	f000 fbed 	bl	800fc14 <_Bfree>
 800f43a:	2300      	movs	r3, #0
 800f43c:	9800      	ldr	r0, [sp, #0]
 800f43e:	702b      	strb	r3, [r5, #0]
 800f440:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f442:	3001      	adds	r0, #1
 800f444:	6018      	str	r0, [r3, #0]
 800f446:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f448:	2b00      	cmp	r3, #0
 800f44a:	f43f acf1 	beq.w	800ee30 <_dtoa_r+0xa0>
 800f44e:	601d      	str	r5, [r3, #0]
 800f450:	e4ee      	b.n	800ee30 <_dtoa_r+0xa0>
 800f452:	9f00      	ldr	r7, [sp, #0]
 800f454:	462b      	mov	r3, r5
 800f456:	461d      	mov	r5, r3
 800f458:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f45c:	2a39      	cmp	r2, #57	; 0x39
 800f45e:	d106      	bne.n	800f46e <_dtoa_r+0x6de>
 800f460:	9a01      	ldr	r2, [sp, #4]
 800f462:	429a      	cmp	r2, r3
 800f464:	d1f7      	bne.n	800f456 <_dtoa_r+0x6c6>
 800f466:	9901      	ldr	r1, [sp, #4]
 800f468:	2230      	movs	r2, #48	; 0x30
 800f46a:	3701      	adds	r7, #1
 800f46c:	700a      	strb	r2, [r1, #0]
 800f46e:	781a      	ldrb	r2, [r3, #0]
 800f470:	3201      	adds	r2, #1
 800f472:	701a      	strb	r2, [r3, #0]
 800f474:	e790      	b.n	800f398 <_dtoa_r+0x608>
 800f476:	4ba6      	ldr	r3, [pc, #664]	; (800f710 <_dtoa_r+0x980>)
 800f478:	2200      	movs	r2, #0
 800f47a:	f7f1 f8e5 	bl	8000648 <__aeabi_dmul>
 800f47e:	2200      	movs	r2, #0
 800f480:	2300      	movs	r3, #0
 800f482:	4606      	mov	r6, r0
 800f484:	460f      	mov	r7, r1
 800f486:	f7f1 fb47 	bl	8000b18 <__aeabi_dcmpeq>
 800f48a:	2800      	cmp	r0, #0
 800f48c:	d09d      	beq.n	800f3ca <_dtoa_r+0x63a>
 800f48e:	e7cf      	b.n	800f430 <_dtoa_r+0x6a0>
 800f490:	9a08      	ldr	r2, [sp, #32]
 800f492:	2a00      	cmp	r2, #0
 800f494:	f000 80d7 	beq.w	800f646 <_dtoa_r+0x8b6>
 800f498:	9a06      	ldr	r2, [sp, #24]
 800f49a:	2a01      	cmp	r2, #1
 800f49c:	f300 80ba 	bgt.w	800f614 <_dtoa_r+0x884>
 800f4a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f4a2:	2a00      	cmp	r2, #0
 800f4a4:	f000 80b2 	beq.w	800f60c <_dtoa_r+0x87c>
 800f4a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f4ac:	9e07      	ldr	r6, [sp, #28]
 800f4ae:	9d04      	ldr	r5, [sp, #16]
 800f4b0:	9a04      	ldr	r2, [sp, #16]
 800f4b2:	441a      	add	r2, r3
 800f4b4:	9204      	str	r2, [sp, #16]
 800f4b6:	9a05      	ldr	r2, [sp, #20]
 800f4b8:	2101      	movs	r1, #1
 800f4ba:	441a      	add	r2, r3
 800f4bc:	4620      	mov	r0, r4
 800f4be:	9205      	str	r2, [sp, #20]
 800f4c0:	f000 fc60 	bl	800fd84 <__i2b>
 800f4c4:	4607      	mov	r7, r0
 800f4c6:	2d00      	cmp	r5, #0
 800f4c8:	dd0c      	ble.n	800f4e4 <_dtoa_r+0x754>
 800f4ca:	9b05      	ldr	r3, [sp, #20]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	dd09      	ble.n	800f4e4 <_dtoa_r+0x754>
 800f4d0:	42ab      	cmp	r3, r5
 800f4d2:	9a04      	ldr	r2, [sp, #16]
 800f4d4:	bfa8      	it	ge
 800f4d6:	462b      	movge	r3, r5
 800f4d8:	1ad2      	subs	r2, r2, r3
 800f4da:	9204      	str	r2, [sp, #16]
 800f4dc:	9a05      	ldr	r2, [sp, #20]
 800f4de:	1aed      	subs	r5, r5, r3
 800f4e0:	1ad3      	subs	r3, r2, r3
 800f4e2:	9305      	str	r3, [sp, #20]
 800f4e4:	9b07      	ldr	r3, [sp, #28]
 800f4e6:	b31b      	cbz	r3, 800f530 <_dtoa_r+0x7a0>
 800f4e8:	9b08      	ldr	r3, [sp, #32]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	f000 80af 	beq.w	800f64e <_dtoa_r+0x8be>
 800f4f0:	2e00      	cmp	r6, #0
 800f4f2:	dd13      	ble.n	800f51c <_dtoa_r+0x78c>
 800f4f4:	4639      	mov	r1, r7
 800f4f6:	4632      	mov	r2, r6
 800f4f8:	4620      	mov	r0, r4
 800f4fa:	f000 fd03 	bl	800ff04 <__pow5mult>
 800f4fe:	ee18 2a10 	vmov	r2, s16
 800f502:	4601      	mov	r1, r0
 800f504:	4607      	mov	r7, r0
 800f506:	4620      	mov	r0, r4
 800f508:	f000 fc52 	bl	800fdb0 <__multiply>
 800f50c:	ee18 1a10 	vmov	r1, s16
 800f510:	4680      	mov	r8, r0
 800f512:	4620      	mov	r0, r4
 800f514:	f000 fb7e 	bl	800fc14 <_Bfree>
 800f518:	ee08 8a10 	vmov	s16, r8
 800f51c:	9b07      	ldr	r3, [sp, #28]
 800f51e:	1b9a      	subs	r2, r3, r6
 800f520:	d006      	beq.n	800f530 <_dtoa_r+0x7a0>
 800f522:	ee18 1a10 	vmov	r1, s16
 800f526:	4620      	mov	r0, r4
 800f528:	f000 fcec 	bl	800ff04 <__pow5mult>
 800f52c:	ee08 0a10 	vmov	s16, r0
 800f530:	2101      	movs	r1, #1
 800f532:	4620      	mov	r0, r4
 800f534:	f000 fc26 	bl	800fd84 <__i2b>
 800f538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	4606      	mov	r6, r0
 800f53e:	f340 8088 	ble.w	800f652 <_dtoa_r+0x8c2>
 800f542:	461a      	mov	r2, r3
 800f544:	4601      	mov	r1, r0
 800f546:	4620      	mov	r0, r4
 800f548:	f000 fcdc 	bl	800ff04 <__pow5mult>
 800f54c:	9b06      	ldr	r3, [sp, #24]
 800f54e:	2b01      	cmp	r3, #1
 800f550:	4606      	mov	r6, r0
 800f552:	f340 8081 	ble.w	800f658 <_dtoa_r+0x8c8>
 800f556:	f04f 0800 	mov.w	r8, #0
 800f55a:	6933      	ldr	r3, [r6, #16]
 800f55c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f560:	6918      	ldr	r0, [r3, #16]
 800f562:	f000 fbbf 	bl	800fce4 <__hi0bits>
 800f566:	f1c0 0020 	rsb	r0, r0, #32
 800f56a:	9b05      	ldr	r3, [sp, #20]
 800f56c:	4418      	add	r0, r3
 800f56e:	f010 001f 	ands.w	r0, r0, #31
 800f572:	f000 8092 	beq.w	800f69a <_dtoa_r+0x90a>
 800f576:	f1c0 0320 	rsb	r3, r0, #32
 800f57a:	2b04      	cmp	r3, #4
 800f57c:	f340 808a 	ble.w	800f694 <_dtoa_r+0x904>
 800f580:	f1c0 001c 	rsb	r0, r0, #28
 800f584:	9b04      	ldr	r3, [sp, #16]
 800f586:	4403      	add	r3, r0
 800f588:	9304      	str	r3, [sp, #16]
 800f58a:	9b05      	ldr	r3, [sp, #20]
 800f58c:	4403      	add	r3, r0
 800f58e:	4405      	add	r5, r0
 800f590:	9305      	str	r3, [sp, #20]
 800f592:	9b04      	ldr	r3, [sp, #16]
 800f594:	2b00      	cmp	r3, #0
 800f596:	dd07      	ble.n	800f5a8 <_dtoa_r+0x818>
 800f598:	ee18 1a10 	vmov	r1, s16
 800f59c:	461a      	mov	r2, r3
 800f59e:	4620      	mov	r0, r4
 800f5a0:	f000 fd0a 	bl	800ffb8 <__lshift>
 800f5a4:	ee08 0a10 	vmov	s16, r0
 800f5a8:	9b05      	ldr	r3, [sp, #20]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	dd05      	ble.n	800f5ba <_dtoa_r+0x82a>
 800f5ae:	4631      	mov	r1, r6
 800f5b0:	461a      	mov	r2, r3
 800f5b2:	4620      	mov	r0, r4
 800f5b4:	f000 fd00 	bl	800ffb8 <__lshift>
 800f5b8:	4606      	mov	r6, r0
 800f5ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d06e      	beq.n	800f69e <_dtoa_r+0x90e>
 800f5c0:	ee18 0a10 	vmov	r0, s16
 800f5c4:	4631      	mov	r1, r6
 800f5c6:	f000 fd67 	bl	8010098 <__mcmp>
 800f5ca:	2800      	cmp	r0, #0
 800f5cc:	da67      	bge.n	800f69e <_dtoa_r+0x90e>
 800f5ce:	9b00      	ldr	r3, [sp, #0]
 800f5d0:	3b01      	subs	r3, #1
 800f5d2:	ee18 1a10 	vmov	r1, s16
 800f5d6:	9300      	str	r3, [sp, #0]
 800f5d8:	220a      	movs	r2, #10
 800f5da:	2300      	movs	r3, #0
 800f5dc:	4620      	mov	r0, r4
 800f5de:	f000 fb3b 	bl	800fc58 <__multadd>
 800f5e2:	9b08      	ldr	r3, [sp, #32]
 800f5e4:	ee08 0a10 	vmov	s16, r0
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	f000 81b1 	beq.w	800f950 <_dtoa_r+0xbc0>
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	4639      	mov	r1, r7
 800f5f2:	220a      	movs	r2, #10
 800f5f4:	4620      	mov	r0, r4
 800f5f6:	f000 fb2f 	bl	800fc58 <__multadd>
 800f5fa:	9b02      	ldr	r3, [sp, #8]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	4607      	mov	r7, r0
 800f600:	f300 808e 	bgt.w	800f720 <_dtoa_r+0x990>
 800f604:	9b06      	ldr	r3, [sp, #24]
 800f606:	2b02      	cmp	r3, #2
 800f608:	dc51      	bgt.n	800f6ae <_dtoa_r+0x91e>
 800f60a:	e089      	b.n	800f720 <_dtoa_r+0x990>
 800f60c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f60e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f612:	e74b      	b.n	800f4ac <_dtoa_r+0x71c>
 800f614:	9b03      	ldr	r3, [sp, #12]
 800f616:	1e5e      	subs	r6, r3, #1
 800f618:	9b07      	ldr	r3, [sp, #28]
 800f61a:	42b3      	cmp	r3, r6
 800f61c:	bfbf      	itttt	lt
 800f61e:	9b07      	ldrlt	r3, [sp, #28]
 800f620:	9607      	strlt	r6, [sp, #28]
 800f622:	1af2      	sublt	r2, r6, r3
 800f624:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f626:	bfb6      	itet	lt
 800f628:	189b      	addlt	r3, r3, r2
 800f62a:	1b9e      	subge	r6, r3, r6
 800f62c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f62e:	9b03      	ldr	r3, [sp, #12]
 800f630:	bfb8      	it	lt
 800f632:	2600      	movlt	r6, #0
 800f634:	2b00      	cmp	r3, #0
 800f636:	bfb7      	itett	lt
 800f638:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f63c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f640:	1a9d      	sublt	r5, r3, r2
 800f642:	2300      	movlt	r3, #0
 800f644:	e734      	b.n	800f4b0 <_dtoa_r+0x720>
 800f646:	9e07      	ldr	r6, [sp, #28]
 800f648:	9d04      	ldr	r5, [sp, #16]
 800f64a:	9f08      	ldr	r7, [sp, #32]
 800f64c:	e73b      	b.n	800f4c6 <_dtoa_r+0x736>
 800f64e:	9a07      	ldr	r2, [sp, #28]
 800f650:	e767      	b.n	800f522 <_dtoa_r+0x792>
 800f652:	9b06      	ldr	r3, [sp, #24]
 800f654:	2b01      	cmp	r3, #1
 800f656:	dc18      	bgt.n	800f68a <_dtoa_r+0x8fa>
 800f658:	f1ba 0f00 	cmp.w	sl, #0
 800f65c:	d115      	bne.n	800f68a <_dtoa_r+0x8fa>
 800f65e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f662:	b993      	cbnz	r3, 800f68a <_dtoa_r+0x8fa>
 800f664:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f668:	0d1b      	lsrs	r3, r3, #20
 800f66a:	051b      	lsls	r3, r3, #20
 800f66c:	b183      	cbz	r3, 800f690 <_dtoa_r+0x900>
 800f66e:	9b04      	ldr	r3, [sp, #16]
 800f670:	3301      	adds	r3, #1
 800f672:	9304      	str	r3, [sp, #16]
 800f674:	9b05      	ldr	r3, [sp, #20]
 800f676:	3301      	adds	r3, #1
 800f678:	9305      	str	r3, [sp, #20]
 800f67a:	f04f 0801 	mov.w	r8, #1
 800f67e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f680:	2b00      	cmp	r3, #0
 800f682:	f47f af6a 	bne.w	800f55a <_dtoa_r+0x7ca>
 800f686:	2001      	movs	r0, #1
 800f688:	e76f      	b.n	800f56a <_dtoa_r+0x7da>
 800f68a:	f04f 0800 	mov.w	r8, #0
 800f68e:	e7f6      	b.n	800f67e <_dtoa_r+0x8ee>
 800f690:	4698      	mov	r8, r3
 800f692:	e7f4      	b.n	800f67e <_dtoa_r+0x8ee>
 800f694:	f43f af7d 	beq.w	800f592 <_dtoa_r+0x802>
 800f698:	4618      	mov	r0, r3
 800f69a:	301c      	adds	r0, #28
 800f69c:	e772      	b.n	800f584 <_dtoa_r+0x7f4>
 800f69e:	9b03      	ldr	r3, [sp, #12]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	dc37      	bgt.n	800f714 <_dtoa_r+0x984>
 800f6a4:	9b06      	ldr	r3, [sp, #24]
 800f6a6:	2b02      	cmp	r3, #2
 800f6a8:	dd34      	ble.n	800f714 <_dtoa_r+0x984>
 800f6aa:	9b03      	ldr	r3, [sp, #12]
 800f6ac:	9302      	str	r3, [sp, #8]
 800f6ae:	9b02      	ldr	r3, [sp, #8]
 800f6b0:	b96b      	cbnz	r3, 800f6ce <_dtoa_r+0x93e>
 800f6b2:	4631      	mov	r1, r6
 800f6b4:	2205      	movs	r2, #5
 800f6b6:	4620      	mov	r0, r4
 800f6b8:	f000 face 	bl	800fc58 <__multadd>
 800f6bc:	4601      	mov	r1, r0
 800f6be:	4606      	mov	r6, r0
 800f6c0:	ee18 0a10 	vmov	r0, s16
 800f6c4:	f000 fce8 	bl	8010098 <__mcmp>
 800f6c8:	2800      	cmp	r0, #0
 800f6ca:	f73f adbb 	bgt.w	800f244 <_dtoa_r+0x4b4>
 800f6ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6d0:	9d01      	ldr	r5, [sp, #4]
 800f6d2:	43db      	mvns	r3, r3
 800f6d4:	9300      	str	r3, [sp, #0]
 800f6d6:	f04f 0800 	mov.w	r8, #0
 800f6da:	4631      	mov	r1, r6
 800f6dc:	4620      	mov	r0, r4
 800f6de:	f000 fa99 	bl	800fc14 <_Bfree>
 800f6e2:	2f00      	cmp	r7, #0
 800f6e4:	f43f aea4 	beq.w	800f430 <_dtoa_r+0x6a0>
 800f6e8:	f1b8 0f00 	cmp.w	r8, #0
 800f6ec:	d005      	beq.n	800f6fa <_dtoa_r+0x96a>
 800f6ee:	45b8      	cmp	r8, r7
 800f6f0:	d003      	beq.n	800f6fa <_dtoa_r+0x96a>
 800f6f2:	4641      	mov	r1, r8
 800f6f4:	4620      	mov	r0, r4
 800f6f6:	f000 fa8d 	bl	800fc14 <_Bfree>
 800f6fa:	4639      	mov	r1, r7
 800f6fc:	4620      	mov	r0, r4
 800f6fe:	f000 fa89 	bl	800fc14 <_Bfree>
 800f702:	e695      	b.n	800f430 <_dtoa_r+0x6a0>
 800f704:	2600      	movs	r6, #0
 800f706:	4637      	mov	r7, r6
 800f708:	e7e1      	b.n	800f6ce <_dtoa_r+0x93e>
 800f70a:	9700      	str	r7, [sp, #0]
 800f70c:	4637      	mov	r7, r6
 800f70e:	e599      	b.n	800f244 <_dtoa_r+0x4b4>
 800f710:	40240000 	.word	0x40240000
 800f714:	9b08      	ldr	r3, [sp, #32]
 800f716:	2b00      	cmp	r3, #0
 800f718:	f000 80ca 	beq.w	800f8b0 <_dtoa_r+0xb20>
 800f71c:	9b03      	ldr	r3, [sp, #12]
 800f71e:	9302      	str	r3, [sp, #8]
 800f720:	2d00      	cmp	r5, #0
 800f722:	dd05      	ble.n	800f730 <_dtoa_r+0x9a0>
 800f724:	4639      	mov	r1, r7
 800f726:	462a      	mov	r2, r5
 800f728:	4620      	mov	r0, r4
 800f72a:	f000 fc45 	bl	800ffb8 <__lshift>
 800f72e:	4607      	mov	r7, r0
 800f730:	f1b8 0f00 	cmp.w	r8, #0
 800f734:	d05b      	beq.n	800f7ee <_dtoa_r+0xa5e>
 800f736:	6879      	ldr	r1, [r7, #4]
 800f738:	4620      	mov	r0, r4
 800f73a:	f000 fa2b 	bl	800fb94 <_Balloc>
 800f73e:	4605      	mov	r5, r0
 800f740:	b928      	cbnz	r0, 800f74e <_dtoa_r+0x9be>
 800f742:	4b87      	ldr	r3, [pc, #540]	; (800f960 <_dtoa_r+0xbd0>)
 800f744:	4602      	mov	r2, r0
 800f746:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f74a:	f7ff bb3b 	b.w	800edc4 <_dtoa_r+0x34>
 800f74e:	693a      	ldr	r2, [r7, #16]
 800f750:	3202      	adds	r2, #2
 800f752:	0092      	lsls	r2, r2, #2
 800f754:	f107 010c 	add.w	r1, r7, #12
 800f758:	300c      	adds	r0, #12
 800f75a:	f000 fa0d 	bl	800fb78 <memcpy>
 800f75e:	2201      	movs	r2, #1
 800f760:	4629      	mov	r1, r5
 800f762:	4620      	mov	r0, r4
 800f764:	f000 fc28 	bl	800ffb8 <__lshift>
 800f768:	9b01      	ldr	r3, [sp, #4]
 800f76a:	f103 0901 	add.w	r9, r3, #1
 800f76e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f772:	4413      	add	r3, r2
 800f774:	9305      	str	r3, [sp, #20]
 800f776:	f00a 0301 	and.w	r3, sl, #1
 800f77a:	46b8      	mov	r8, r7
 800f77c:	9304      	str	r3, [sp, #16]
 800f77e:	4607      	mov	r7, r0
 800f780:	4631      	mov	r1, r6
 800f782:	ee18 0a10 	vmov	r0, s16
 800f786:	f7ff fa75 	bl	800ec74 <quorem>
 800f78a:	4641      	mov	r1, r8
 800f78c:	9002      	str	r0, [sp, #8]
 800f78e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f792:	ee18 0a10 	vmov	r0, s16
 800f796:	f000 fc7f 	bl	8010098 <__mcmp>
 800f79a:	463a      	mov	r2, r7
 800f79c:	9003      	str	r0, [sp, #12]
 800f79e:	4631      	mov	r1, r6
 800f7a0:	4620      	mov	r0, r4
 800f7a2:	f000 fc95 	bl	80100d0 <__mdiff>
 800f7a6:	68c2      	ldr	r2, [r0, #12]
 800f7a8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800f7ac:	4605      	mov	r5, r0
 800f7ae:	bb02      	cbnz	r2, 800f7f2 <_dtoa_r+0xa62>
 800f7b0:	4601      	mov	r1, r0
 800f7b2:	ee18 0a10 	vmov	r0, s16
 800f7b6:	f000 fc6f 	bl	8010098 <__mcmp>
 800f7ba:	4602      	mov	r2, r0
 800f7bc:	4629      	mov	r1, r5
 800f7be:	4620      	mov	r0, r4
 800f7c0:	9207      	str	r2, [sp, #28]
 800f7c2:	f000 fa27 	bl	800fc14 <_Bfree>
 800f7c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f7ca:	ea43 0102 	orr.w	r1, r3, r2
 800f7ce:	9b04      	ldr	r3, [sp, #16]
 800f7d0:	430b      	orrs	r3, r1
 800f7d2:	464d      	mov	r5, r9
 800f7d4:	d10f      	bne.n	800f7f6 <_dtoa_r+0xa66>
 800f7d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f7da:	d02a      	beq.n	800f832 <_dtoa_r+0xaa2>
 800f7dc:	9b03      	ldr	r3, [sp, #12]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	dd02      	ble.n	800f7e8 <_dtoa_r+0xa58>
 800f7e2:	9b02      	ldr	r3, [sp, #8]
 800f7e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f7e8:	f88b a000 	strb.w	sl, [fp]
 800f7ec:	e775      	b.n	800f6da <_dtoa_r+0x94a>
 800f7ee:	4638      	mov	r0, r7
 800f7f0:	e7ba      	b.n	800f768 <_dtoa_r+0x9d8>
 800f7f2:	2201      	movs	r2, #1
 800f7f4:	e7e2      	b.n	800f7bc <_dtoa_r+0xa2c>
 800f7f6:	9b03      	ldr	r3, [sp, #12]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	db04      	blt.n	800f806 <_dtoa_r+0xa76>
 800f7fc:	9906      	ldr	r1, [sp, #24]
 800f7fe:	430b      	orrs	r3, r1
 800f800:	9904      	ldr	r1, [sp, #16]
 800f802:	430b      	orrs	r3, r1
 800f804:	d122      	bne.n	800f84c <_dtoa_r+0xabc>
 800f806:	2a00      	cmp	r2, #0
 800f808:	ddee      	ble.n	800f7e8 <_dtoa_r+0xa58>
 800f80a:	ee18 1a10 	vmov	r1, s16
 800f80e:	2201      	movs	r2, #1
 800f810:	4620      	mov	r0, r4
 800f812:	f000 fbd1 	bl	800ffb8 <__lshift>
 800f816:	4631      	mov	r1, r6
 800f818:	ee08 0a10 	vmov	s16, r0
 800f81c:	f000 fc3c 	bl	8010098 <__mcmp>
 800f820:	2800      	cmp	r0, #0
 800f822:	dc03      	bgt.n	800f82c <_dtoa_r+0xa9c>
 800f824:	d1e0      	bne.n	800f7e8 <_dtoa_r+0xa58>
 800f826:	f01a 0f01 	tst.w	sl, #1
 800f82a:	d0dd      	beq.n	800f7e8 <_dtoa_r+0xa58>
 800f82c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f830:	d1d7      	bne.n	800f7e2 <_dtoa_r+0xa52>
 800f832:	2339      	movs	r3, #57	; 0x39
 800f834:	f88b 3000 	strb.w	r3, [fp]
 800f838:	462b      	mov	r3, r5
 800f83a:	461d      	mov	r5, r3
 800f83c:	3b01      	subs	r3, #1
 800f83e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f842:	2a39      	cmp	r2, #57	; 0x39
 800f844:	d071      	beq.n	800f92a <_dtoa_r+0xb9a>
 800f846:	3201      	adds	r2, #1
 800f848:	701a      	strb	r2, [r3, #0]
 800f84a:	e746      	b.n	800f6da <_dtoa_r+0x94a>
 800f84c:	2a00      	cmp	r2, #0
 800f84e:	dd07      	ble.n	800f860 <_dtoa_r+0xad0>
 800f850:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f854:	d0ed      	beq.n	800f832 <_dtoa_r+0xaa2>
 800f856:	f10a 0301 	add.w	r3, sl, #1
 800f85a:	f88b 3000 	strb.w	r3, [fp]
 800f85e:	e73c      	b.n	800f6da <_dtoa_r+0x94a>
 800f860:	9b05      	ldr	r3, [sp, #20]
 800f862:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f866:	4599      	cmp	r9, r3
 800f868:	d047      	beq.n	800f8fa <_dtoa_r+0xb6a>
 800f86a:	ee18 1a10 	vmov	r1, s16
 800f86e:	2300      	movs	r3, #0
 800f870:	220a      	movs	r2, #10
 800f872:	4620      	mov	r0, r4
 800f874:	f000 f9f0 	bl	800fc58 <__multadd>
 800f878:	45b8      	cmp	r8, r7
 800f87a:	ee08 0a10 	vmov	s16, r0
 800f87e:	f04f 0300 	mov.w	r3, #0
 800f882:	f04f 020a 	mov.w	r2, #10
 800f886:	4641      	mov	r1, r8
 800f888:	4620      	mov	r0, r4
 800f88a:	d106      	bne.n	800f89a <_dtoa_r+0xb0a>
 800f88c:	f000 f9e4 	bl	800fc58 <__multadd>
 800f890:	4680      	mov	r8, r0
 800f892:	4607      	mov	r7, r0
 800f894:	f109 0901 	add.w	r9, r9, #1
 800f898:	e772      	b.n	800f780 <_dtoa_r+0x9f0>
 800f89a:	f000 f9dd 	bl	800fc58 <__multadd>
 800f89e:	4639      	mov	r1, r7
 800f8a0:	4680      	mov	r8, r0
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	220a      	movs	r2, #10
 800f8a6:	4620      	mov	r0, r4
 800f8a8:	f000 f9d6 	bl	800fc58 <__multadd>
 800f8ac:	4607      	mov	r7, r0
 800f8ae:	e7f1      	b.n	800f894 <_dtoa_r+0xb04>
 800f8b0:	9b03      	ldr	r3, [sp, #12]
 800f8b2:	9302      	str	r3, [sp, #8]
 800f8b4:	9d01      	ldr	r5, [sp, #4]
 800f8b6:	ee18 0a10 	vmov	r0, s16
 800f8ba:	4631      	mov	r1, r6
 800f8bc:	f7ff f9da 	bl	800ec74 <quorem>
 800f8c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f8c4:	9b01      	ldr	r3, [sp, #4]
 800f8c6:	f805 ab01 	strb.w	sl, [r5], #1
 800f8ca:	1aea      	subs	r2, r5, r3
 800f8cc:	9b02      	ldr	r3, [sp, #8]
 800f8ce:	4293      	cmp	r3, r2
 800f8d0:	dd09      	ble.n	800f8e6 <_dtoa_r+0xb56>
 800f8d2:	ee18 1a10 	vmov	r1, s16
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	220a      	movs	r2, #10
 800f8da:	4620      	mov	r0, r4
 800f8dc:	f000 f9bc 	bl	800fc58 <__multadd>
 800f8e0:	ee08 0a10 	vmov	s16, r0
 800f8e4:	e7e7      	b.n	800f8b6 <_dtoa_r+0xb26>
 800f8e6:	9b02      	ldr	r3, [sp, #8]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	bfc8      	it	gt
 800f8ec:	461d      	movgt	r5, r3
 800f8ee:	9b01      	ldr	r3, [sp, #4]
 800f8f0:	bfd8      	it	le
 800f8f2:	2501      	movle	r5, #1
 800f8f4:	441d      	add	r5, r3
 800f8f6:	f04f 0800 	mov.w	r8, #0
 800f8fa:	ee18 1a10 	vmov	r1, s16
 800f8fe:	2201      	movs	r2, #1
 800f900:	4620      	mov	r0, r4
 800f902:	f000 fb59 	bl	800ffb8 <__lshift>
 800f906:	4631      	mov	r1, r6
 800f908:	ee08 0a10 	vmov	s16, r0
 800f90c:	f000 fbc4 	bl	8010098 <__mcmp>
 800f910:	2800      	cmp	r0, #0
 800f912:	dc91      	bgt.n	800f838 <_dtoa_r+0xaa8>
 800f914:	d102      	bne.n	800f91c <_dtoa_r+0xb8c>
 800f916:	f01a 0f01 	tst.w	sl, #1
 800f91a:	d18d      	bne.n	800f838 <_dtoa_r+0xaa8>
 800f91c:	462b      	mov	r3, r5
 800f91e:	461d      	mov	r5, r3
 800f920:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f924:	2a30      	cmp	r2, #48	; 0x30
 800f926:	d0fa      	beq.n	800f91e <_dtoa_r+0xb8e>
 800f928:	e6d7      	b.n	800f6da <_dtoa_r+0x94a>
 800f92a:	9a01      	ldr	r2, [sp, #4]
 800f92c:	429a      	cmp	r2, r3
 800f92e:	d184      	bne.n	800f83a <_dtoa_r+0xaaa>
 800f930:	9b00      	ldr	r3, [sp, #0]
 800f932:	3301      	adds	r3, #1
 800f934:	9300      	str	r3, [sp, #0]
 800f936:	2331      	movs	r3, #49	; 0x31
 800f938:	7013      	strb	r3, [r2, #0]
 800f93a:	e6ce      	b.n	800f6da <_dtoa_r+0x94a>
 800f93c:	4b09      	ldr	r3, [pc, #36]	; (800f964 <_dtoa_r+0xbd4>)
 800f93e:	f7ff ba95 	b.w	800ee6c <_dtoa_r+0xdc>
 800f942:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f944:	2b00      	cmp	r3, #0
 800f946:	f47f aa6e 	bne.w	800ee26 <_dtoa_r+0x96>
 800f94a:	4b07      	ldr	r3, [pc, #28]	; (800f968 <_dtoa_r+0xbd8>)
 800f94c:	f7ff ba8e 	b.w	800ee6c <_dtoa_r+0xdc>
 800f950:	9b02      	ldr	r3, [sp, #8]
 800f952:	2b00      	cmp	r3, #0
 800f954:	dcae      	bgt.n	800f8b4 <_dtoa_r+0xb24>
 800f956:	9b06      	ldr	r3, [sp, #24]
 800f958:	2b02      	cmp	r3, #2
 800f95a:	f73f aea8 	bgt.w	800f6ae <_dtoa_r+0x91e>
 800f95e:	e7a9      	b.n	800f8b4 <_dtoa_r+0xb24>
 800f960:	0801101f 	.word	0x0801101f
 800f964:	08010f7c 	.word	0x08010f7c
 800f968:	08010fa0 	.word	0x08010fa0

0800f96c <std>:
 800f96c:	2300      	movs	r3, #0
 800f96e:	b510      	push	{r4, lr}
 800f970:	4604      	mov	r4, r0
 800f972:	e9c0 3300 	strd	r3, r3, [r0]
 800f976:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f97a:	6083      	str	r3, [r0, #8]
 800f97c:	8181      	strh	r1, [r0, #12]
 800f97e:	6643      	str	r3, [r0, #100]	; 0x64
 800f980:	81c2      	strh	r2, [r0, #14]
 800f982:	6183      	str	r3, [r0, #24]
 800f984:	4619      	mov	r1, r3
 800f986:	2208      	movs	r2, #8
 800f988:	305c      	adds	r0, #92	; 0x5c
 800f98a:	f7fe fcd3 	bl	800e334 <memset>
 800f98e:	4b05      	ldr	r3, [pc, #20]	; (800f9a4 <std+0x38>)
 800f990:	6263      	str	r3, [r4, #36]	; 0x24
 800f992:	4b05      	ldr	r3, [pc, #20]	; (800f9a8 <std+0x3c>)
 800f994:	62a3      	str	r3, [r4, #40]	; 0x28
 800f996:	4b05      	ldr	r3, [pc, #20]	; (800f9ac <std+0x40>)
 800f998:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f99a:	4b05      	ldr	r3, [pc, #20]	; (800f9b0 <std+0x44>)
 800f99c:	6224      	str	r4, [r4, #32]
 800f99e:	6323      	str	r3, [r4, #48]	; 0x30
 800f9a0:	bd10      	pop	{r4, pc}
 800f9a2:	bf00      	nop
 800f9a4:	080107ed 	.word	0x080107ed
 800f9a8:	0801080f 	.word	0x0801080f
 800f9ac:	08010847 	.word	0x08010847
 800f9b0:	0801086b 	.word	0x0801086b

0800f9b4 <_cleanup_r>:
 800f9b4:	4901      	ldr	r1, [pc, #4]	; (800f9bc <_cleanup_r+0x8>)
 800f9b6:	f000 b8af 	b.w	800fb18 <_fwalk_reent>
 800f9ba:	bf00      	nop
 800f9bc:	08010b81 	.word	0x08010b81

0800f9c0 <__sfmoreglue>:
 800f9c0:	b570      	push	{r4, r5, r6, lr}
 800f9c2:	2268      	movs	r2, #104	; 0x68
 800f9c4:	1e4d      	subs	r5, r1, #1
 800f9c6:	4355      	muls	r5, r2
 800f9c8:	460e      	mov	r6, r1
 800f9ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f9ce:	f000 fce7 	bl	80103a0 <_malloc_r>
 800f9d2:	4604      	mov	r4, r0
 800f9d4:	b140      	cbz	r0, 800f9e8 <__sfmoreglue+0x28>
 800f9d6:	2100      	movs	r1, #0
 800f9d8:	e9c0 1600 	strd	r1, r6, [r0]
 800f9dc:	300c      	adds	r0, #12
 800f9de:	60a0      	str	r0, [r4, #8]
 800f9e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f9e4:	f7fe fca6 	bl	800e334 <memset>
 800f9e8:	4620      	mov	r0, r4
 800f9ea:	bd70      	pop	{r4, r5, r6, pc}

0800f9ec <__sfp_lock_acquire>:
 800f9ec:	4801      	ldr	r0, [pc, #4]	; (800f9f4 <__sfp_lock_acquire+0x8>)
 800f9ee:	f000 b8b8 	b.w	800fb62 <__retarget_lock_acquire_recursive>
 800f9f2:	bf00      	nop
 800f9f4:	20004745 	.word	0x20004745

0800f9f8 <__sfp_lock_release>:
 800f9f8:	4801      	ldr	r0, [pc, #4]	; (800fa00 <__sfp_lock_release+0x8>)
 800f9fa:	f000 b8b3 	b.w	800fb64 <__retarget_lock_release_recursive>
 800f9fe:	bf00      	nop
 800fa00:	20004745 	.word	0x20004745

0800fa04 <__sinit_lock_acquire>:
 800fa04:	4801      	ldr	r0, [pc, #4]	; (800fa0c <__sinit_lock_acquire+0x8>)
 800fa06:	f000 b8ac 	b.w	800fb62 <__retarget_lock_acquire_recursive>
 800fa0a:	bf00      	nop
 800fa0c:	20004746 	.word	0x20004746

0800fa10 <__sinit_lock_release>:
 800fa10:	4801      	ldr	r0, [pc, #4]	; (800fa18 <__sinit_lock_release+0x8>)
 800fa12:	f000 b8a7 	b.w	800fb64 <__retarget_lock_release_recursive>
 800fa16:	bf00      	nop
 800fa18:	20004746 	.word	0x20004746

0800fa1c <__sinit>:
 800fa1c:	b510      	push	{r4, lr}
 800fa1e:	4604      	mov	r4, r0
 800fa20:	f7ff fff0 	bl	800fa04 <__sinit_lock_acquire>
 800fa24:	69a3      	ldr	r3, [r4, #24]
 800fa26:	b11b      	cbz	r3, 800fa30 <__sinit+0x14>
 800fa28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa2c:	f7ff bff0 	b.w	800fa10 <__sinit_lock_release>
 800fa30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fa34:	6523      	str	r3, [r4, #80]	; 0x50
 800fa36:	4b13      	ldr	r3, [pc, #76]	; (800fa84 <__sinit+0x68>)
 800fa38:	4a13      	ldr	r2, [pc, #76]	; (800fa88 <__sinit+0x6c>)
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	62a2      	str	r2, [r4, #40]	; 0x28
 800fa3e:	42a3      	cmp	r3, r4
 800fa40:	bf04      	itt	eq
 800fa42:	2301      	moveq	r3, #1
 800fa44:	61a3      	streq	r3, [r4, #24]
 800fa46:	4620      	mov	r0, r4
 800fa48:	f000 f820 	bl	800fa8c <__sfp>
 800fa4c:	6060      	str	r0, [r4, #4]
 800fa4e:	4620      	mov	r0, r4
 800fa50:	f000 f81c 	bl	800fa8c <__sfp>
 800fa54:	60a0      	str	r0, [r4, #8]
 800fa56:	4620      	mov	r0, r4
 800fa58:	f000 f818 	bl	800fa8c <__sfp>
 800fa5c:	2200      	movs	r2, #0
 800fa5e:	60e0      	str	r0, [r4, #12]
 800fa60:	2104      	movs	r1, #4
 800fa62:	6860      	ldr	r0, [r4, #4]
 800fa64:	f7ff ff82 	bl	800f96c <std>
 800fa68:	68a0      	ldr	r0, [r4, #8]
 800fa6a:	2201      	movs	r2, #1
 800fa6c:	2109      	movs	r1, #9
 800fa6e:	f7ff ff7d 	bl	800f96c <std>
 800fa72:	68e0      	ldr	r0, [r4, #12]
 800fa74:	2202      	movs	r2, #2
 800fa76:	2112      	movs	r1, #18
 800fa78:	f7ff ff78 	bl	800f96c <std>
 800fa7c:	2301      	movs	r3, #1
 800fa7e:	61a3      	str	r3, [r4, #24]
 800fa80:	e7d2      	b.n	800fa28 <__sinit+0xc>
 800fa82:	bf00      	nop
 800fa84:	08010f68 	.word	0x08010f68
 800fa88:	0800f9b5 	.word	0x0800f9b5

0800fa8c <__sfp>:
 800fa8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa8e:	4607      	mov	r7, r0
 800fa90:	f7ff ffac 	bl	800f9ec <__sfp_lock_acquire>
 800fa94:	4b1e      	ldr	r3, [pc, #120]	; (800fb10 <__sfp+0x84>)
 800fa96:	681e      	ldr	r6, [r3, #0]
 800fa98:	69b3      	ldr	r3, [r6, #24]
 800fa9a:	b913      	cbnz	r3, 800faa2 <__sfp+0x16>
 800fa9c:	4630      	mov	r0, r6
 800fa9e:	f7ff ffbd 	bl	800fa1c <__sinit>
 800faa2:	3648      	adds	r6, #72	; 0x48
 800faa4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800faa8:	3b01      	subs	r3, #1
 800faaa:	d503      	bpl.n	800fab4 <__sfp+0x28>
 800faac:	6833      	ldr	r3, [r6, #0]
 800faae:	b30b      	cbz	r3, 800faf4 <__sfp+0x68>
 800fab0:	6836      	ldr	r6, [r6, #0]
 800fab2:	e7f7      	b.n	800faa4 <__sfp+0x18>
 800fab4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fab8:	b9d5      	cbnz	r5, 800faf0 <__sfp+0x64>
 800faba:	4b16      	ldr	r3, [pc, #88]	; (800fb14 <__sfp+0x88>)
 800fabc:	60e3      	str	r3, [r4, #12]
 800fabe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fac2:	6665      	str	r5, [r4, #100]	; 0x64
 800fac4:	f000 f84c 	bl	800fb60 <__retarget_lock_init_recursive>
 800fac8:	f7ff ff96 	bl	800f9f8 <__sfp_lock_release>
 800facc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fad0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fad4:	6025      	str	r5, [r4, #0]
 800fad6:	61a5      	str	r5, [r4, #24]
 800fad8:	2208      	movs	r2, #8
 800fada:	4629      	mov	r1, r5
 800fadc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fae0:	f7fe fc28 	bl	800e334 <memset>
 800fae4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fae8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800faec:	4620      	mov	r0, r4
 800faee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800faf0:	3468      	adds	r4, #104	; 0x68
 800faf2:	e7d9      	b.n	800faa8 <__sfp+0x1c>
 800faf4:	2104      	movs	r1, #4
 800faf6:	4638      	mov	r0, r7
 800faf8:	f7ff ff62 	bl	800f9c0 <__sfmoreglue>
 800fafc:	4604      	mov	r4, r0
 800fafe:	6030      	str	r0, [r6, #0]
 800fb00:	2800      	cmp	r0, #0
 800fb02:	d1d5      	bne.n	800fab0 <__sfp+0x24>
 800fb04:	f7ff ff78 	bl	800f9f8 <__sfp_lock_release>
 800fb08:	230c      	movs	r3, #12
 800fb0a:	603b      	str	r3, [r7, #0]
 800fb0c:	e7ee      	b.n	800faec <__sfp+0x60>
 800fb0e:	bf00      	nop
 800fb10:	08010f68 	.word	0x08010f68
 800fb14:	ffff0001 	.word	0xffff0001

0800fb18 <_fwalk_reent>:
 800fb18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb1c:	4606      	mov	r6, r0
 800fb1e:	4688      	mov	r8, r1
 800fb20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fb24:	2700      	movs	r7, #0
 800fb26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fb2a:	f1b9 0901 	subs.w	r9, r9, #1
 800fb2e:	d505      	bpl.n	800fb3c <_fwalk_reent+0x24>
 800fb30:	6824      	ldr	r4, [r4, #0]
 800fb32:	2c00      	cmp	r4, #0
 800fb34:	d1f7      	bne.n	800fb26 <_fwalk_reent+0xe>
 800fb36:	4638      	mov	r0, r7
 800fb38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb3c:	89ab      	ldrh	r3, [r5, #12]
 800fb3e:	2b01      	cmp	r3, #1
 800fb40:	d907      	bls.n	800fb52 <_fwalk_reent+0x3a>
 800fb42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fb46:	3301      	adds	r3, #1
 800fb48:	d003      	beq.n	800fb52 <_fwalk_reent+0x3a>
 800fb4a:	4629      	mov	r1, r5
 800fb4c:	4630      	mov	r0, r6
 800fb4e:	47c0      	blx	r8
 800fb50:	4307      	orrs	r7, r0
 800fb52:	3568      	adds	r5, #104	; 0x68
 800fb54:	e7e9      	b.n	800fb2a <_fwalk_reent+0x12>
	...

0800fb58 <_localeconv_r>:
 800fb58:	4800      	ldr	r0, [pc, #0]	; (800fb5c <_localeconv_r+0x4>)
 800fb5a:	4770      	bx	lr
 800fb5c:	200029ac 	.word	0x200029ac

0800fb60 <__retarget_lock_init_recursive>:
 800fb60:	4770      	bx	lr

0800fb62 <__retarget_lock_acquire_recursive>:
 800fb62:	4770      	bx	lr

0800fb64 <__retarget_lock_release_recursive>:
 800fb64:	4770      	bx	lr
	...

0800fb68 <malloc>:
 800fb68:	4b02      	ldr	r3, [pc, #8]	; (800fb74 <malloc+0xc>)
 800fb6a:	4601      	mov	r1, r0
 800fb6c:	6818      	ldr	r0, [r3, #0]
 800fb6e:	f000 bc17 	b.w	80103a0 <_malloc_r>
 800fb72:	bf00      	nop
 800fb74:	20002858 	.word	0x20002858

0800fb78 <memcpy>:
 800fb78:	440a      	add	r2, r1
 800fb7a:	4291      	cmp	r1, r2
 800fb7c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fb80:	d100      	bne.n	800fb84 <memcpy+0xc>
 800fb82:	4770      	bx	lr
 800fb84:	b510      	push	{r4, lr}
 800fb86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb8e:	4291      	cmp	r1, r2
 800fb90:	d1f9      	bne.n	800fb86 <memcpy+0xe>
 800fb92:	bd10      	pop	{r4, pc}

0800fb94 <_Balloc>:
 800fb94:	b570      	push	{r4, r5, r6, lr}
 800fb96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fb98:	4604      	mov	r4, r0
 800fb9a:	460d      	mov	r5, r1
 800fb9c:	b976      	cbnz	r6, 800fbbc <_Balloc+0x28>
 800fb9e:	2010      	movs	r0, #16
 800fba0:	f7ff ffe2 	bl	800fb68 <malloc>
 800fba4:	4602      	mov	r2, r0
 800fba6:	6260      	str	r0, [r4, #36]	; 0x24
 800fba8:	b920      	cbnz	r0, 800fbb4 <_Balloc+0x20>
 800fbaa:	4b18      	ldr	r3, [pc, #96]	; (800fc0c <_Balloc+0x78>)
 800fbac:	4818      	ldr	r0, [pc, #96]	; (800fc10 <_Balloc+0x7c>)
 800fbae:	2166      	movs	r1, #102	; 0x66
 800fbb0:	f000 ff32 	bl	8010a18 <__assert_func>
 800fbb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fbb8:	6006      	str	r6, [r0, #0]
 800fbba:	60c6      	str	r6, [r0, #12]
 800fbbc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fbbe:	68f3      	ldr	r3, [r6, #12]
 800fbc0:	b183      	cbz	r3, 800fbe4 <_Balloc+0x50>
 800fbc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbc4:	68db      	ldr	r3, [r3, #12]
 800fbc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fbca:	b9b8      	cbnz	r0, 800fbfc <_Balloc+0x68>
 800fbcc:	2101      	movs	r1, #1
 800fbce:	fa01 f605 	lsl.w	r6, r1, r5
 800fbd2:	1d72      	adds	r2, r6, #5
 800fbd4:	0092      	lsls	r2, r2, #2
 800fbd6:	4620      	mov	r0, r4
 800fbd8:	f000 fb60 	bl	801029c <_calloc_r>
 800fbdc:	b160      	cbz	r0, 800fbf8 <_Balloc+0x64>
 800fbde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fbe2:	e00e      	b.n	800fc02 <_Balloc+0x6e>
 800fbe4:	2221      	movs	r2, #33	; 0x21
 800fbe6:	2104      	movs	r1, #4
 800fbe8:	4620      	mov	r0, r4
 800fbea:	f000 fb57 	bl	801029c <_calloc_r>
 800fbee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbf0:	60f0      	str	r0, [r6, #12]
 800fbf2:	68db      	ldr	r3, [r3, #12]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d1e4      	bne.n	800fbc2 <_Balloc+0x2e>
 800fbf8:	2000      	movs	r0, #0
 800fbfa:	bd70      	pop	{r4, r5, r6, pc}
 800fbfc:	6802      	ldr	r2, [r0, #0]
 800fbfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fc02:	2300      	movs	r3, #0
 800fc04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fc08:	e7f7      	b.n	800fbfa <_Balloc+0x66>
 800fc0a:	bf00      	nop
 800fc0c:	08010fad 	.word	0x08010fad
 800fc10:	08011090 	.word	0x08011090

0800fc14 <_Bfree>:
 800fc14:	b570      	push	{r4, r5, r6, lr}
 800fc16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fc18:	4605      	mov	r5, r0
 800fc1a:	460c      	mov	r4, r1
 800fc1c:	b976      	cbnz	r6, 800fc3c <_Bfree+0x28>
 800fc1e:	2010      	movs	r0, #16
 800fc20:	f7ff ffa2 	bl	800fb68 <malloc>
 800fc24:	4602      	mov	r2, r0
 800fc26:	6268      	str	r0, [r5, #36]	; 0x24
 800fc28:	b920      	cbnz	r0, 800fc34 <_Bfree+0x20>
 800fc2a:	4b09      	ldr	r3, [pc, #36]	; (800fc50 <_Bfree+0x3c>)
 800fc2c:	4809      	ldr	r0, [pc, #36]	; (800fc54 <_Bfree+0x40>)
 800fc2e:	218a      	movs	r1, #138	; 0x8a
 800fc30:	f000 fef2 	bl	8010a18 <__assert_func>
 800fc34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fc38:	6006      	str	r6, [r0, #0]
 800fc3a:	60c6      	str	r6, [r0, #12]
 800fc3c:	b13c      	cbz	r4, 800fc4e <_Bfree+0x3a>
 800fc3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fc40:	6862      	ldr	r2, [r4, #4]
 800fc42:	68db      	ldr	r3, [r3, #12]
 800fc44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fc48:	6021      	str	r1, [r4, #0]
 800fc4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fc4e:	bd70      	pop	{r4, r5, r6, pc}
 800fc50:	08010fad 	.word	0x08010fad
 800fc54:	08011090 	.word	0x08011090

0800fc58 <__multadd>:
 800fc58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc5c:	690d      	ldr	r5, [r1, #16]
 800fc5e:	4607      	mov	r7, r0
 800fc60:	460c      	mov	r4, r1
 800fc62:	461e      	mov	r6, r3
 800fc64:	f101 0c14 	add.w	ip, r1, #20
 800fc68:	2000      	movs	r0, #0
 800fc6a:	f8dc 3000 	ldr.w	r3, [ip]
 800fc6e:	b299      	uxth	r1, r3
 800fc70:	fb02 6101 	mla	r1, r2, r1, r6
 800fc74:	0c1e      	lsrs	r6, r3, #16
 800fc76:	0c0b      	lsrs	r3, r1, #16
 800fc78:	fb02 3306 	mla	r3, r2, r6, r3
 800fc7c:	b289      	uxth	r1, r1
 800fc7e:	3001      	adds	r0, #1
 800fc80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fc84:	4285      	cmp	r5, r0
 800fc86:	f84c 1b04 	str.w	r1, [ip], #4
 800fc8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fc8e:	dcec      	bgt.n	800fc6a <__multadd+0x12>
 800fc90:	b30e      	cbz	r6, 800fcd6 <__multadd+0x7e>
 800fc92:	68a3      	ldr	r3, [r4, #8]
 800fc94:	42ab      	cmp	r3, r5
 800fc96:	dc19      	bgt.n	800fccc <__multadd+0x74>
 800fc98:	6861      	ldr	r1, [r4, #4]
 800fc9a:	4638      	mov	r0, r7
 800fc9c:	3101      	adds	r1, #1
 800fc9e:	f7ff ff79 	bl	800fb94 <_Balloc>
 800fca2:	4680      	mov	r8, r0
 800fca4:	b928      	cbnz	r0, 800fcb2 <__multadd+0x5a>
 800fca6:	4602      	mov	r2, r0
 800fca8:	4b0c      	ldr	r3, [pc, #48]	; (800fcdc <__multadd+0x84>)
 800fcaa:	480d      	ldr	r0, [pc, #52]	; (800fce0 <__multadd+0x88>)
 800fcac:	21b5      	movs	r1, #181	; 0xb5
 800fcae:	f000 feb3 	bl	8010a18 <__assert_func>
 800fcb2:	6922      	ldr	r2, [r4, #16]
 800fcb4:	3202      	adds	r2, #2
 800fcb6:	f104 010c 	add.w	r1, r4, #12
 800fcba:	0092      	lsls	r2, r2, #2
 800fcbc:	300c      	adds	r0, #12
 800fcbe:	f7ff ff5b 	bl	800fb78 <memcpy>
 800fcc2:	4621      	mov	r1, r4
 800fcc4:	4638      	mov	r0, r7
 800fcc6:	f7ff ffa5 	bl	800fc14 <_Bfree>
 800fcca:	4644      	mov	r4, r8
 800fccc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fcd0:	3501      	adds	r5, #1
 800fcd2:	615e      	str	r6, [r3, #20]
 800fcd4:	6125      	str	r5, [r4, #16]
 800fcd6:	4620      	mov	r0, r4
 800fcd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcdc:	0801101f 	.word	0x0801101f
 800fce0:	08011090 	.word	0x08011090

0800fce4 <__hi0bits>:
 800fce4:	0c03      	lsrs	r3, r0, #16
 800fce6:	041b      	lsls	r3, r3, #16
 800fce8:	b9d3      	cbnz	r3, 800fd20 <__hi0bits+0x3c>
 800fcea:	0400      	lsls	r0, r0, #16
 800fcec:	2310      	movs	r3, #16
 800fcee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fcf2:	bf04      	itt	eq
 800fcf4:	0200      	lsleq	r0, r0, #8
 800fcf6:	3308      	addeq	r3, #8
 800fcf8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fcfc:	bf04      	itt	eq
 800fcfe:	0100      	lsleq	r0, r0, #4
 800fd00:	3304      	addeq	r3, #4
 800fd02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fd06:	bf04      	itt	eq
 800fd08:	0080      	lsleq	r0, r0, #2
 800fd0a:	3302      	addeq	r3, #2
 800fd0c:	2800      	cmp	r0, #0
 800fd0e:	db05      	blt.n	800fd1c <__hi0bits+0x38>
 800fd10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fd14:	f103 0301 	add.w	r3, r3, #1
 800fd18:	bf08      	it	eq
 800fd1a:	2320      	moveq	r3, #32
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	4770      	bx	lr
 800fd20:	2300      	movs	r3, #0
 800fd22:	e7e4      	b.n	800fcee <__hi0bits+0xa>

0800fd24 <__lo0bits>:
 800fd24:	6803      	ldr	r3, [r0, #0]
 800fd26:	f013 0207 	ands.w	r2, r3, #7
 800fd2a:	4601      	mov	r1, r0
 800fd2c:	d00b      	beq.n	800fd46 <__lo0bits+0x22>
 800fd2e:	07da      	lsls	r2, r3, #31
 800fd30:	d423      	bmi.n	800fd7a <__lo0bits+0x56>
 800fd32:	0798      	lsls	r0, r3, #30
 800fd34:	bf49      	itett	mi
 800fd36:	085b      	lsrmi	r3, r3, #1
 800fd38:	089b      	lsrpl	r3, r3, #2
 800fd3a:	2001      	movmi	r0, #1
 800fd3c:	600b      	strmi	r3, [r1, #0]
 800fd3e:	bf5c      	itt	pl
 800fd40:	600b      	strpl	r3, [r1, #0]
 800fd42:	2002      	movpl	r0, #2
 800fd44:	4770      	bx	lr
 800fd46:	b298      	uxth	r0, r3
 800fd48:	b9a8      	cbnz	r0, 800fd76 <__lo0bits+0x52>
 800fd4a:	0c1b      	lsrs	r3, r3, #16
 800fd4c:	2010      	movs	r0, #16
 800fd4e:	b2da      	uxtb	r2, r3
 800fd50:	b90a      	cbnz	r2, 800fd56 <__lo0bits+0x32>
 800fd52:	3008      	adds	r0, #8
 800fd54:	0a1b      	lsrs	r3, r3, #8
 800fd56:	071a      	lsls	r2, r3, #28
 800fd58:	bf04      	itt	eq
 800fd5a:	091b      	lsreq	r3, r3, #4
 800fd5c:	3004      	addeq	r0, #4
 800fd5e:	079a      	lsls	r2, r3, #30
 800fd60:	bf04      	itt	eq
 800fd62:	089b      	lsreq	r3, r3, #2
 800fd64:	3002      	addeq	r0, #2
 800fd66:	07da      	lsls	r2, r3, #31
 800fd68:	d403      	bmi.n	800fd72 <__lo0bits+0x4e>
 800fd6a:	085b      	lsrs	r3, r3, #1
 800fd6c:	f100 0001 	add.w	r0, r0, #1
 800fd70:	d005      	beq.n	800fd7e <__lo0bits+0x5a>
 800fd72:	600b      	str	r3, [r1, #0]
 800fd74:	4770      	bx	lr
 800fd76:	4610      	mov	r0, r2
 800fd78:	e7e9      	b.n	800fd4e <__lo0bits+0x2a>
 800fd7a:	2000      	movs	r0, #0
 800fd7c:	4770      	bx	lr
 800fd7e:	2020      	movs	r0, #32
 800fd80:	4770      	bx	lr
	...

0800fd84 <__i2b>:
 800fd84:	b510      	push	{r4, lr}
 800fd86:	460c      	mov	r4, r1
 800fd88:	2101      	movs	r1, #1
 800fd8a:	f7ff ff03 	bl	800fb94 <_Balloc>
 800fd8e:	4602      	mov	r2, r0
 800fd90:	b928      	cbnz	r0, 800fd9e <__i2b+0x1a>
 800fd92:	4b05      	ldr	r3, [pc, #20]	; (800fda8 <__i2b+0x24>)
 800fd94:	4805      	ldr	r0, [pc, #20]	; (800fdac <__i2b+0x28>)
 800fd96:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fd9a:	f000 fe3d 	bl	8010a18 <__assert_func>
 800fd9e:	2301      	movs	r3, #1
 800fda0:	6144      	str	r4, [r0, #20]
 800fda2:	6103      	str	r3, [r0, #16]
 800fda4:	bd10      	pop	{r4, pc}
 800fda6:	bf00      	nop
 800fda8:	0801101f 	.word	0x0801101f
 800fdac:	08011090 	.word	0x08011090

0800fdb0 <__multiply>:
 800fdb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdb4:	4691      	mov	r9, r2
 800fdb6:	690a      	ldr	r2, [r1, #16]
 800fdb8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fdbc:	429a      	cmp	r2, r3
 800fdbe:	bfb8      	it	lt
 800fdc0:	460b      	movlt	r3, r1
 800fdc2:	460c      	mov	r4, r1
 800fdc4:	bfbc      	itt	lt
 800fdc6:	464c      	movlt	r4, r9
 800fdc8:	4699      	movlt	r9, r3
 800fdca:	6927      	ldr	r7, [r4, #16]
 800fdcc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fdd0:	68a3      	ldr	r3, [r4, #8]
 800fdd2:	6861      	ldr	r1, [r4, #4]
 800fdd4:	eb07 060a 	add.w	r6, r7, sl
 800fdd8:	42b3      	cmp	r3, r6
 800fdda:	b085      	sub	sp, #20
 800fddc:	bfb8      	it	lt
 800fdde:	3101      	addlt	r1, #1
 800fde0:	f7ff fed8 	bl	800fb94 <_Balloc>
 800fde4:	b930      	cbnz	r0, 800fdf4 <__multiply+0x44>
 800fde6:	4602      	mov	r2, r0
 800fde8:	4b44      	ldr	r3, [pc, #272]	; (800fefc <__multiply+0x14c>)
 800fdea:	4845      	ldr	r0, [pc, #276]	; (800ff00 <__multiply+0x150>)
 800fdec:	f240 115d 	movw	r1, #349	; 0x15d
 800fdf0:	f000 fe12 	bl	8010a18 <__assert_func>
 800fdf4:	f100 0514 	add.w	r5, r0, #20
 800fdf8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fdfc:	462b      	mov	r3, r5
 800fdfe:	2200      	movs	r2, #0
 800fe00:	4543      	cmp	r3, r8
 800fe02:	d321      	bcc.n	800fe48 <__multiply+0x98>
 800fe04:	f104 0314 	add.w	r3, r4, #20
 800fe08:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fe0c:	f109 0314 	add.w	r3, r9, #20
 800fe10:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fe14:	9202      	str	r2, [sp, #8]
 800fe16:	1b3a      	subs	r2, r7, r4
 800fe18:	3a15      	subs	r2, #21
 800fe1a:	f022 0203 	bic.w	r2, r2, #3
 800fe1e:	3204      	adds	r2, #4
 800fe20:	f104 0115 	add.w	r1, r4, #21
 800fe24:	428f      	cmp	r7, r1
 800fe26:	bf38      	it	cc
 800fe28:	2204      	movcc	r2, #4
 800fe2a:	9201      	str	r2, [sp, #4]
 800fe2c:	9a02      	ldr	r2, [sp, #8]
 800fe2e:	9303      	str	r3, [sp, #12]
 800fe30:	429a      	cmp	r2, r3
 800fe32:	d80c      	bhi.n	800fe4e <__multiply+0x9e>
 800fe34:	2e00      	cmp	r6, #0
 800fe36:	dd03      	ble.n	800fe40 <__multiply+0x90>
 800fe38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d05a      	beq.n	800fef6 <__multiply+0x146>
 800fe40:	6106      	str	r6, [r0, #16]
 800fe42:	b005      	add	sp, #20
 800fe44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe48:	f843 2b04 	str.w	r2, [r3], #4
 800fe4c:	e7d8      	b.n	800fe00 <__multiply+0x50>
 800fe4e:	f8b3 a000 	ldrh.w	sl, [r3]
 800fe52:	f1ba 0f00 	cmp.w	sl, #0
 800fe56:	d024      	beq.n	800fea2 <__multiply+0xf2>
 800fe58:	f104 0e14 	add.w	lr, r4, #20
 800fe5c:	46a9      	mov	r9, r5
 800fe5e:	f04f 0c00 	mov.w	ip, #0
 800fe62:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fe66:	f8d9 1000 	ldr.w	r1, [r9]
 800fe6a:	fa1f fb82 	uxth.w	fp, r2
 800fe6e:	b289      	uxth	r1, r1
 800fe70:	fb0a 110b 	mla	r1, sl, fp, r1
 800fe74:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fe78:	f8d9 2000 	ldr.w	r2, [r9]
 800fe7c:	4461      	add	r1, ip
 800fe7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fe82:	fb0a c20b 	mla	r2, sl, fp, ip
 800fe86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fe8a:	b289      	uxth	r1, r1
 800fe8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fe90:	4577      	cmp	r7, lr
 800fe92:	f849 1b04 	str.w	r1, [r9], #4
 800fe96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fe9a:	d8e2      	bhi.n	800fe62 <__multiply+0xb2>
 800fe9c:	9a01      	ldr	r2, [sp, #4]
 800fe9e:	f845 c002 	str.w	ip, [r5, r2]
 800fea2:	9a03      	ldr	r2, [sp, #12]
 800fea4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fea8:	3304      	adds	r3, #4
 800feaa:	f1b9 0f00 	cmp.w	r9, #0
 800feae:	d020      	beq.n	800fef2 <__multiply+0x142>
 800feb0:	6829      	ldr	r1, [r5, #0]
 800feb2:	f104 0c14 	add.w	ip, r4, #20
 800feb6:	46ae      	mov	lr, r5
 800feb8:	f04f 0a00 	mov.w	sl, #0
 800febc:	f8bc b000 	ldrh.w	fp, [ip]
 800fec0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fec4:	fb09 220b 	mla	r2, r9, fp, r2
 800fec8:	4492      	add	sl, r2
 800feca:	b289      	uxth	r1, r1
 800fecc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800fed0:	f84e 1b04 	str.w	r1, [lr], #4
 800fed4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fed8:	f8be 1000 	ldrh.w	r1, [lr]
 800fedc:	0c12      	lsrs	r2, r2, #16
 800fede:	fb09 1102 	mla	r1, r9, r2, r1
 800fee2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800fee6:	4567      	cmp	r7, ip
 800fee8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800feec:	d8e6      	bhi.n	800febc <__multiply+0x10c>
 800feee:	9a01      	ldr	r2, [sp, #4]
 800fef0:	50a9      	str	r1, [r5, r2]
 800fef2:	3504      	adds	r5, #4
 800fef4:	e79a      	b.n	800fe2c <__multiply+0x7c>
 800fef6:	3e01      	subs	r6, #1
 800fef8:	e79c      	b.n	800fe34 <__multiply+0x84>
 800fefa:	bf00      	nop
 800fefc:	0801101f 	.word	0x0801101f
 800ff00:	08011090 	.word	0x08011090

0800ff04 <__pow5mult>:
 800ff04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff08:	4615      	mov	r5, r2
 800ff0a:	f012 0203 	ands.w	r2, r2, #3
 800ff0e:	4606      	mov	r6, r0
 800ff10:	460f      	mov	r7, r1
 800ff12:	d007      	beq.n	800ff24 <__pow5mult+0x20>
 800ff14:	4c25      	ldr	r4, [pc, #148]	; (800ffac <__pow5mult+0xa8>)
 800ff16:	3a01      	subs	r2, #1
 800ff18:	2300      	movs	r3, #0
 800ff1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ff1e:	f7ff fe9b 	bl	800fc58 <__multadd>
 800ff22:	4607      	mov	r7, r0
 800ff24:	10ad      	asrs	r5, r5, #2
 800ff26:	d03d      	beq.n	800ffa4 <__pow5mult+0xa0>
 800ff28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ff2a:	b97c      	cbnz	r4, 800ff4c <__pow5mult+0x48>
 800ff2c:	2010      	movs	r0, #16
 800ff2e:	f7ff fe1b 	bl	800fb68 <malloc>
 800ff32:	4602      	mov	r2, r0
 800ff34:	6270      	str	r0, [r6, #36]	; 0x24
 800ff36:	b928      	cbnz	r0, 800ff44 <__pow5mult+0x40>
 800ff38:	4b1d      	ldr	r3, [pc, #116]	; (800ffb0 <__pow5mult+0xac>)
 800ff3a:	481e      	ldr	r0, [pc, #120]	; (800ffb4 <__pow5mult+0xb0>)
 800ff3c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ff40:	f000 fd6a 	bl	8010a18 <__assert_func>
 800ff44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ff48:	6004      	str	r4, [r0, #0]
 800ff4a:	60c4      	str	r4, [r0, #12]
 800ff4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ff50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ff54:	b94c      	cbnz	r4, 800ff6a <__pow5mult+0x66>
 800ff56:	f240 2171 	movw	r1, #625	; 0x271
 800ff5a:	4630      	mov	r0, r6
 800ff5c:	f7ff ff12 	bl	800fd84 <__i2b>
 800ff60:	2300      	movs	r3, #0
 800ff62:	f8c8 0008 	str.w	r0, [r8, #8]
 800ff66:	4604      	mov	r4, r0
 800ff68:	6003      	str	r3, [r0, #0]
 800ff6a:	f04f 0900 	mov.w	r9, #0
 800ff6e:	07eb      	lsls	r3, r5, #31
 800ff70:	d50a      	bpl.n	800ff88 <__pow5mult+0x84>
 800ff72:	4639      	mov	r1, r7
 800ff74:	4622      	mov	r2, r4
 800ff76:	4630      	mov	r0, r6
 800ff78:	f7ff ff1a 	bl	800fdb0 <__multiply>
 800ff7c:	4639      	mov	r1, r7
 800ff7e:	4680      	mov	r8, r0
 800ff80:	4630      	mov	r0, r6
 800ff82:	f7ff fe47 	bl	800fc14 <_Bfree>
 800ff86:	4647      	mov	r7, r8
 800ff88:	106d      	asrs	r5, r5, #1
 800ff8a:	d00b      	beq.n	800ffa4 <__pow5mult+0xa0>
 800ff8c:	6820      	ldr	r0, [r4, #0]
 800ff8e:	b938      	cbnz	r0, 800ffa0 <__pow5mult+0x9c>
 800ff90:	4622      	mov	r2, r4
 800ff92:	4621      	mov	r1, r4
 800ff94:	4630      	mov	r0, r6
 800ff96:	f7ff ff0b 	bl	800fdb0 <__multiply>
 800ff9a:	6020      	str	r0, [r4, #0]
 800ff9c:	f8c0 9000 	str.w	r9, [r0]
 800ffa0:	4604      	mov	r4, r0
 800ffa2:	e7e4      	b.n	800ff6e <__pow5mult+0x6a>
 800ffa4:	4638      	mov	r0, r7
 800ffa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffaa:	bf00      	nop
 800ffac:	080111e0 	.word	0x080111e0
 800ffb0:	08010fad 	.word	0x08010fad
 800ffb4:	08011090 	.word	0x08011090

0800ffb8 <__lshift>:
 800ffb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffbc:	460c      	mov	r4, r1
 800ffbe:	6849      	ldr	r1, [r1, #4]
 800ffc0:	6923      	ldr	r3, [r4, #16]
 800ffc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ffc6:	68a3      	ldr	r3, [r4, #8]
 800ffc8:	4607      	mov	r7, r0
 800ffca:	4691      	mov	r9, r2
 800ffcc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ffd0:	f108 0601 	add.w	r6, r8, #1
 800ffd4:	42b3      	cmp	r3, r6
 800ffd6:	db0b      	blt.n	800fff0 <__lshift+0x38>
 800ffd8:	4638      	mov	r0, r7
 800ffda:	f7ff fddb 	bl	800fb94 <_Balloc>
 800ffde:	4605      	mov	r5, r0
 800ffe0:	b948      	cbnz	r0, 800fff6 <__lshift+0x3e>
 800ffe2:	4602      	mov	r2, r0
 800ffe4:	4b2a      	ldr	r3, [pc, #168]	; (8010090 <__lshift+0xd8>)
 800ffe6:	482b      	ldr	r0, [pc, #172]	; (8010094 <__lshift+0xdc>)
 800ffe8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ffec:	f000 fd14 	bl	8010a18 <__assert_func>
 800fff0:	3101      	adds	r1, #1
 800fff2:	005b      	lsls	r3, r3, #1
 800fff4:	e7ee      	b.n	800ffd4 <__lshift+0x1c>
 800fff6:	2300      	movs	r3, #0
 800fff8:	f100 0114 	add.w	r1, r0, #20
 800fffc:	f100 0210 	add.w	r2, r0, #16
 8010000:	4618      	mov	r0, r3
 8010002:	4553      	cmp	r3, sl
 8010004:	db37      	blt.n	8010076 <__lshift+0xbe>
 8010006:	6920      	ldr	r0, [r4, #16]
 8010008:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801000c:	f104 0314 	add.w	r3, r4, #20
 8010010:	f019 091f 	ands.w	r9, r9, #31
 8010014:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010018:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801001c:	d02f      	beq.n	801007e <__lshift+0xc6>
 801001e:	f1c9 0e20 	rsb	lr, r9, #32
 8010022:	468a      	mov	sl, r1
 8010024:	f04f 0c00 	mov.w	ip, #0
 8010028:	681a      	ldr	r2, [r3, #0]
 801002a:	fa02 f209 	lsl.w	r2, r2, r9
 801002e:	ea42 020c 	orr.w	r2, r2, ip
 8010032:	f84a 2b04 	str.w	r2, [sl], #4
 8010036:	f853 2b04 	ldr.w	r2, [r3], #4
 801003a:	4298      	cmp	r0, r3
 801003c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010040:	d8f2      	bhi.n	8010028 <__lshift+0x70>
 8010042:	1b03      	subs	r3, r0, r4
 8010044:	3b15      	subs	r3, #21
 8010046:	f023 0303 	bic.w	r3, r3, #3
 801004a:	3304      	adds	r3, #4
 801004c:	f104 0215 	add.w	r2, r4, #21
 8010050:	4290      	cmp	r0, r2
 8010052:	bf38      	it	cc
 8010054:	2304      	movcc	r3, #4
 8010056:	f841 c003 	str.w	ip, [r1, r3]
 801005a:	f1bc 0f00 	cmp.w	ip, #0
 801005e:	d001      	beq.n	8010064 <__lshift+0xac>
 8010060:	f108 0602 	add.w	r6, r8, #2
 8010064:	3e01      	subs	r6, #1
 8010066:	4638      	mov	r0, r7
 8010068:	612e      	str	r6, [r5, #16]
 801006a:	4621      	mov	r1, r4
 801006c:	f7ff fdd2 	bl	800fc14 <_Bfree>
 8010070:	4628      	mov	r0, r5
 8010072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010076:	f842 0f04 	str.w	r0, [r2, #4]!
 801007a:	3301      	adds	r3, #1
 801007c:	e7c1      	b.n	8010002 <__lshift+0x4a>
 801007e:	3904      	subs	r1, #4
 8010080:	f853 2b04 	ldr.w	r2, [r3], #4
 8010084:	f841 2f04 	str.w	r2, [r1, #4]!
 8010088:	4298      	cmp	r0, r3
 801008a:	d8f9      	bhi.n	8010080 <__lshift+0xc8>
 801008c:	e7ea      	b.n	8010064 <__lshift+0xac>
 801008e:	bf00      	nop
 8010090:	0801101f 	.word	0x0801101f
 8010094:	08011090 	.word	0x08011090

08010098 <__mcmp>:
 8010098:	b530      	push	{r4, r5, lr}
 801009a:	6902      	ldr	r2, [r0, #16]
 801009c:	690c      	ldr	r4, [r1, #16]
 801009e:	1b12      	subs	r2, r2, r4
 80100a0:	d10e      	bne.n	80100c0 <__mcmp+0x28>
 80100a2:	f100 0314 	add.w	r3, r0, #20
 80100a6:	3114      	adds	r1, #20
 80100a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80100ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80100b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80100b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80100b8:	42a5      	cmp	r5, r4
 80100ba:	d003      	beq.n	80100c4 <__mcmp+0x2c>
 80100bc:	d305      	bcc.n	80100ca <__mcmp+0x32>
 80100be:	2201      	movs	r2, #1
 80100c0:	4610      	mov	r0, r2
 80100c2:	bd30      	pop	{r4, r5, pc}
 80100c4:	4283      	cmp	r3, r0
 80100c6:	d3f3      	bcc.n	80100b0 <__mcmp+0x18>
 80100c8:	e7fa      	b.n	80100c0 <__mcmp+0x28>
 80100ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80100ce:	e7f7      	b.n	80100c0 <__mcmp+0x28>

080100d0 <__mdiff>:
 80100d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100d4:	460c      	mov	r4, r1
 80100d6:	4606      	mov	r6, r0
 80100d8:	4611      	mov	r1, r2
 80100da:	4620      	mov	r0, r4
 80100dc:	4690      	mov	r8, r2
 80100de:	f7ff ffdb 	bl	8010098 <__mcmp>
 80100e2:	1e05      	subs	r5, r0, #0
 80100e4:	d110      	bne.n	8010108 <__mdiff+0x38>
 80100e6:	4629      	mov	r1, r5
 80100e8:	4630      	mov	r0, r6
 80100ea:	f7ff fd53 	bl	800fb94 <_Balloc>
 80100ee:	b930      	cbnz	r0, 80100fe <__mdiff+0x2e>
 80100f0:	4b3a      	ldr	r3, [pc, #232]	; (80101dc <__mdiff+0x10c>)
 80100f2:	4602      	mov	r2, r0
 80100f4:	f240 2132 	movw	r1, #562	; 0x232
 80100f8:	4839      	ldr	r0, [pc, #228]	; (80101e0 <__mdiff+0x110>)
 80100fa:	f000 fc8d 	bl	8010a18 <__assert_func>
 80100fe:	2301      	movs	r3, #1
 8010100:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010104:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010108:	bfa4      	itt	ge
 801010a:	4643      	movge	r3, r8
 801010c:	46a0      	movge	r8, r4
 801010e:	4630      	mov	r0, r6
 8010110:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010114:	bfa6      	itte	ge
 8010116:	461c      	movge	r4, r3
 8010118:	2500      	movge	r5, #0
 801011a:	2501      	movlt	r5, #1
 801011c:	f7ff fd3a 	bl	800fb94 <_Balloc>
 8010120:	b920      	cbnz	r0, 801012c <__mdiff+0x5c>
 8010122:	4b2e      	ldr	r3, [pc, #184]	; (80101dc <__mdiff+0x10c>)
 8010124:	4602      	mov	r2, r0
 8010126:	f44f 7110 	mov.w	r1, #576	; 0x240
 801012a:	e7e5      	b.n	80100f8 <__mdiff+0x28>
 801012c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010130:	6926      	ldr	r6, [r4, #16]
 8010132:	60c5      	str	r5, [r0, #12]
 8010134:	f104 0914 	add.w	r9, r4, #20
 8010138:	f108 0514 	add.w	r5, r8, #20
 801013c:	f100 0e14 	add.w	lr, r0, #20
 8010140:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010144:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010148:	f108 0210 	add.w	r2, r8, #16
 801014c:	46f2      	mov	sl, lr
 801014e:	2100      	movs	r1, #0
 8010150:	f859 3b04 	ldr.w	r3, [r9], #4
 8010154:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010158:	fa1f f883 	uxth.w	r8, r3
 801015c:	fa11 f18b 	uxtah	r1, r1, fp
 8010160:	0c1b      	lsrs	r3, r3, #16
 8010162:	eba1 0808 	sub.w	r8, r1, r8
 8010166:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801016a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801016e:	fa1f f888 	uxth.w	r8, r8
 8010172:	1419      	asrs	r1, r3, #16
 8010174:	454e      	cmp	r6, r9
 8010176:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801017a:	f84a 3b04 	str.w	r3, [sl], #4
 801017e:	d8e7      	bhi.n	8010150 <__mdiff+0x80>
 8010180:	1b33      	subs	r3, r6, r4
 8010182:	3b15      	subs	r3, #21
 8010184:	f023 0303 	bic.w	r3, r3, #3
 8010188:	3304      	adds	r3, #4
 801018a:	3415      	adds	r4, #21
 801018c:	42a6      	cmp	r6, r4
 801018e:	bf38      	it	cc
 8010190:	2304      	movcc	r3, #4
 8010192:	441d      	add	r5, r3
 8010194:	4473      	add	r3, lr
 8010196:	469e      	mov	lr, r3
 8010198:	462e      	mov	r6, r5
 801019a:	4566      	cmp	r6, ip
 801019c:	d30e      	bcc.n	80101bc <__mdiff+0xec>
 801019e:	f10c 0203 	add.w	r2, ip, #3
 80101a2:	1b52      	subs	r2, r2, r5
 80101a4:	f022 0203 	bic.w	r2, r2, #3
 80101a8:	3d03      	subs	r5, #3
 80101aa:	45ac      	cmp	ip, r5
 80101ac:	bf38      	it	cc
 80101ae:	2200      	movcc	r2, #0
 80101b0:	441a      	add	r2, r3
 80101b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80101b6:	b17b      	cbz	r3, 80101d8 <__mdiff+0x108>
 80101b8:	6107      	str	r7, [r0, #16]
 80101ba:	e7a3      	b.n	8010104 <__mdiff+0x34>
 80101bc:	f856 8b04 	ldr.w	r8, [r6], #4
 80101c0:	fa11 f288 	uxtah	r2, r1, r8
 80101c4:	1414      	asrs	r4, r2, #16
 80101c6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80101ca:	b292      	uxth	r2, r2
 80101cc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80101d0:	f84e 2b04 	str.w	r2, [lr], #4
 80101d4:	1421      	asrs	r1, r4, #16
 80101d6:	e7e0      	b.n	801019a <__mdiff+0xca>
 80101d8:	3f01      	subs	r7, #1
 80101da:	e7ea      	b.n	80101b2 <__mdiff+0xe2>
 80101dc:	0801101f 	.word	0x0801101f
 80101e0:	08011090 	.word	0x08011090

080101e4 <__d2b>:
 80101e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80101e8:	4689      	mov	r9, r1
 80101ea:	2101      	movs	r1, #1
 80101ec:	ec57 6b10 	vmov	r6, r7, d0
 80101f0:	4690      	mov	r8, r2
 80101f2:	f7ff fccf 	bl	800fb94 <_Balloc>
 80101f6:	4604      	mov	r4, r0
 80101f8:	b930      	cbnz	r0, 8010208 <__d2b+0x24>
 80101fa:	4602      	mov	r2, r0
 80101fc:	4b25      	ldr	r3, [pc, #148]	; (8010294 <__d2b+0xb0>)
 80101fe:	4826      	ldr	r0, [pc, #152]	; (8010298 <__d2b+0xb4>)
 8010200:	f240 310a 	movw	r1, #778	; 0x30a
 8010204:	f000 fc08 	bl	8010a18 <__assert_func>
 8010208:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801020c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010210:	bb35      	cbnz	r5, 8010260 <__d2b+0x7c>
 8010212:	2e00      	cmp	r6, #0
 8010214:	9301      	str	r3, [sp, #4]
 8010216:	d028      	beq.n	801026a <__d2b+0x86>
 8010218:	4668      	mov	r0, sp
 801021a:	9600      	str	r6, [sp, #0]
 801021c:	f7ff fd82 	bl	800fd24 <__lo0bits>
 8010220:	9900      	ldr	r1, [sp, #0]
 8010222:	b300      	cbz	r0, 8010266 <__d2b+0x82>
 8010224:	9a01      	ldr	r2, [sp, #4]
 8010226:	f1c0 0320 	rsb	r3, r0, #32
 801022a:	fa02 f303 	lsl.w	r3, r2, r3
 801022e:	430b      	orrs	r3, r1
 8010230:	40c2      	lsrs	r2, r0
 8010232:	6163      	str	r3, [r4, #20]
 8010234:	9201      	str	r2, [sp, #4]
 8010236:	9b01      	ldr	r3, [sp, #4]
 8010238:	61a3      	str	r3, [r4, #24]
 801023a:	2b00      	cmp	r3, #0
 801023c:	bf14      	ite	ne
 801023e:	2202      	movne	r2, #2
 8010240:	2201      	moveq	r2, #1
 8010242:	6122      	str	r2, [r4, #16]
 8010244:	b1d5      	cbz	r5, 801027c <__d2b+0x98>
 8010246:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801024a:	4405      	add	r5, r0
 801024c:	f8c9 5000 	str.w	r5, [r9]
 8010250:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010254:	f8c8 0000 	str.w	r0, [r8]
 8010258:	4620      	mov	r0, r4
 801025a:	b003      	add	sp, #12
 801025c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010260:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010264:	e7d5      	b.n	8010212 <__d2b+0x2e>
 8010266:	6161      	str	r1, [r4, #20]
 8010268:	e7e5      	b.n	8010236 <__d2b+0x52>
 801026a:	a801      	add	r0, sp, #4
 801026c:	f7ff fd5a 	bl	800fd24 <__lo0bits>
 8010270:	9b01      	ldr	r3, [sp, #4]
 8010272:	6163      	str	r3, [r4, #20]
 8010274:	2201      	movs	r2, #1
 8010276:	6122      	str	r2, [r4, #16]
 8010278:	3020      	adds	r0, #32
 801027a:	e7e3      	b.n	8010244 <__d2b+0x60>
 801027c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010280:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010284:	f8c9 0000 	str.w	r0, [r9]
 8010288:	6918      	ldr	r0, [r3, #16]
 801028a:	f7ff fd2b 	bl	800fce4 <__hi0bits>
 801028e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010292:	e7df      	b.n	8010254 <__d2b+0x70>
 8010294:	0801101f 	.word	0x0801101f
 8010298:	08011090 	.word	0x08011090

0801029c <_calloc_r>:
 801029c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801029e:	fba1 2402 	umull	r2, r4, r1, r2
 80102a2:	b94c      	cbnz	r4, 80102b8 <_calloc_r+0x1c>
 80102a4:	4611      	mov	r1, r2
 80102a6:	9201      	str	r2, [sp, #4]
 80102a8:	f000 f87a 	bl	80103a0 <_malloc_r>
 80102ac:	9a01      	ldr	r2, [sp, #4]
 80102ae:	4605      	mov	r5, r0
 80102b0:	b930      	cbnz	r0, 80102c0 <_calloc_r+0x24>
 80102b2:	4628      	mov	r0, r5
 80102b4:	b003      	add	sp, #12
 80102b6:	bd30      	pop	{r4, r5, pc}
 80102b8:	220c      	movs	r2, #12
 80102ba:	6002      	str	r2, [r0, #0]
 80102bc:	2500      	movs	r5, #0
 80102be:	e7f8      	b.n	80102b2 <_calloc_r+0x16>
 80102c0:	4621      	mov	r1, r4
 80102c2:	f7fe f837 	bl	800e334 <memset>
 80102c6:	e7f4      	b.n	80102b2 <_calloc_r+0x16>

080102c8 <_free_r>:
 80102c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80102ca:	2900      	cmp	r1, #0
 80102cc:	d044      	beq.n	8010358 <_free_r+0x90>
 80102ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80102d2:	9001      	str	r0, [sp, #4]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	f1a1 0404 	sub.w	r4, r1, #4
 80102da:	bfb8      	it	lt
 80102dc:	18e4      	addlt	r4, r4, r3
 80102de:	f000 fd27 	bl	8010d30 <__malloc_lock>
 80102e2:	4a1e      	ldr	r2, [pc, #120]	; (801035c <_free_r+0x94>)
 80102e4:	9801      	ldr	r0, [sp, #4]
 80102e6:	6813      	ldr	r3, [r2, #0]
 80102e8:	b933      	cbnz	r3, 80102f8 <_free_r+0x30>
 80102ea:	6063      	str	r3, [r4, #4]
 80102ec:	6014      	str	r4, [r2, #0]
 80102ee:	b003      	add	sp, #12
 80102f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80102f4:	f000 bd22 	b.w	8010d3c <__malloc_unlock>
 80102f8:	42a3      	cmp	r3, r4
 80102fa:	d908      	bls.n	801030e <_free_r+0x46>
 80102fc:	6825      	ldr	r5, [r4, #0]
 80102fe:	1961      	adds	r1, r4, r5
 8010300:	428b      	cmp	r3, r1
 8010302:	bf01      	itttt	eq
 8010304:	6819      	ldreq	r1, [r3, #0]
 8010306:	685b      	ldreq	r3, [r3, #4]
 8010308:	1949      	addeq	r1, r1, r5
 801030a:	6021      	streq	r1, [r4, #0]
 801030c:	e7ed      	b.n	80102ea <_free_r+0x22>
 801030e:	461a      	mov	r2, r3
 8010310:	685b      	ldr	r3, [r3, #4]
 8010312:	b10b      	cbz	r3, 8010318 <_free_r+0x50>
 8010314:	42a3      	cmp	r3, r4
 8010316:	d9fa      	bls.n	801030e <_free_r+0x46>
 8010318:	6811      	ldr	r1, [r2, #0]
 801031a:	1855      	adds	r5, r2, r1
 801031c:	42a5      	cmp	r5, r4
 801031e:	d10b      	bne.n	8010338 <_free_r+0x70>
 8010320:	6824      	ldr	r4, [r4, #0]
 8010322:	4421      	add	r1, r4
 8010324:	1854      	adds	r4, r2, r1
 8010326:	42a3      	cmp	r3, r4
 8010328:	6011      	str	r1, [r2, #0]
 801032a:	d1e0      	bne.n	80102ee <_free_r+0x26>
 801032c:	681c      	ldr	r4, [r3, #0]
 801032e:	685b      	ldr	r3, [r3, #4]
 8010330:	6053      	str	r3, [r2, #4]
 8010332:	4421      	add	r1, r4
 8010334:	6011      	str	r1, [r2, #0]
 8010336:	e7da      	b.n	80102ee <_free_r+0x26>
 8010338:	d902      	bls.n	8010340 <_free_r+0x78>
 801033a:	230c      	movs	r3, #12
 801033c:	6003      	str	r3, [r0, #0]
 801033e:	e7d6      	b.n	80102ee <_free_r+0x26>
 8010340:	6825      	ldr	r5, [r4, #0]
 8010342:	1961      	adds	r1, r4, r5
 8010344:	428b      	cmp	r3, r1
 8010346:	bf04      	itt	eq
 8010348:	6819      	ldreq	r1, [r3, #0]
 801034a:	685b      	ldreq	r3, [r3, #4]
 801034c:	6063      	str	r3, [r4, #4]
 801034e:	bf04      	itt	eq
 8010350:	1949      	addeq	r1, r1, r5
 8010352:	6021      	streq	r1, [r4, #0]
 8010354:	6054      	str	r4, [r2, #4]
 8010356:	e7ca      	b.n	80102ee <_free_r+0x26>
 8010358:	b003      	add	sp, #12
 801035a:	bd30      	pop	{r4, r5, pc}
 801035c:	20004748 	.word	0x20004748

08010360 <sbrk_aligned>:
 8010360:	b570      	push	{r4, r5, r6, lr}
 8010362:	4e0e      	ldr	r6, [pc, #56]	; (801039c <sbrk_aligned+0x3c>)
 8010364:	460c      	mov	r4, r1
 8010366:	6831      	ldr	r1, [r6, #0]
 8010368:	4605      	mov	r5, r0
 801036a:	b911      	cbnz	r1, 8010372 <sbrk_aligned+0x12>
 801036c:	f000 fa2e 	bl	80107cc <_sbrk_r>
 8010370:	6030      	str	r0, [r6, #0]
 8010372:	4621      	mov	r1, r4
 8010374:	4628      	mov	r0, r5
 8010376:	f000 fa29 	bl	80107cc <_sbrk_r>
 801037a:	1c43      	adds	r3, r0, #1
 801037c:	d00a      	beq.n	8010394 <sbrk_aligned+0x34>
 801037e:	1cc4      	adds	r4, r0, #3
 8010380:	f024 0403 	bic.w	r4, r4, #3
 8010384:	42a0      	cmp	r0, r4
 8010386:	d007      	beq.n	8010398 <sbrk_aligned+0x38>
 8010388:	1a21      	subs	r1, r4, r0
 801038a:	4628      	mov	r0, r5
 801038c:	f000 fa1e 	bl	80107cc <_sbrk_r>
 8010390:	3001      	adds	r0, #1
 8010392:	d101      	bne.n	8010398 <sbrk_aligned+0x38>
 8010394:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010398:	4620      	mov	r0, r4
 801039a:	bd70      	pop	{r4, r5, r6, pc}
 801039c:	2000474c 	.word	0x2000474c

080103a0 <_malloc_r>:
 80103a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103a4:	1ccd      	adds	r5, r1, #3
 80103a6:	f025 0503 	bic.w	r5, r5, #3
 80103aa:	3508      	adds	r5, #8
 80103ac:	2d0c      	cmp	r5, #12
 80103ae:	bf38      	it	cc
 80103b0:	250c      	movcc	r5, #12
 80103b2:	2d00      	cmp	r5, #0
 80103b4:	4607      	mov	r7, r0
 80103b6:	db01      	blt.n	80103bc <_malloc_r+0x1c>
 80103b8:	42a9      	cmp	r1, r5
 80103ba:	d905      	bls.n	80103c8 <_malloc_r+0x28>
 80103bc:	230c      	movs	r3, #12
 80103be:	603b      	str	r3, [r7, #0]
 80103c0:	2600      	movs	r6, #0
 80103c2:	4630      	mov	r0, r6
 80103c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103c8:	4e2e      	ldr	r6, [pc, #184]	; (8010484 <_malloc_r+0xe4>)
 80103ca:	f000 fcb1 	bl	8010d30 <__malloc_lock>
 80103ce:	6833      	ldr	r3, [r6, #0]
 80103d0:	461c      	mov	r4, r3
 80103d2:	bb34      	cbnz	r4, 8010422 <_malloc_r+0x82>
 80103d4:	4629      	mov	r1, r5
 80103d6:	4638      	mov	r0, r7
 80103d8:	f7ff ffc2 	bl	8010360 <sbrk_aligned>
 80103dc:	1c43      	adds	r3, r0, #1
 80103de:	4604      	mov	r4, r0
 80103e0:	d14d      	bne.n	801047e <_malloc_r+0xde>
 80103e2:	6834      	ldr	r4, [r6, #0]
 80103e4:	4626      	mov	r6, r4
 80103e6:	2e00      	cmp	r6, #0
 80103e8:	d140      	bne.n	801046c <_malloc_r+0xcc>
 80103ea:	6823      	ldr	r3, [r4, #0]
 80103ec:	4631      	mov	r1, r6
 80103ee:	4638      	mov	r0, r7
 80103f0:	eb04 0803 	add.w	r8, r4, r3
 80103f4:	f000 f9ea 	bl	80107cc <_sbrk_r>
 80103f8:	4580      	cmp	r8, r0
 80103fa:	d13a      	bne.n	8010472 <_malloc_r+0xd2>
 80103fc:	6821      	ldr	r1, [r4, #0]
 80103fe:	3503      	adds	r5, #3
 8010400:	1a6d      	subs	r5, r5, r1
 8010402:	f025 0503 	bic.w	r5, r5, #3
 8010406:	3508      	adds	r5, #8
 8010408:	2d0c      	cmp	r5, #12
 801040a:	bf38      	it	cc
 801040c:	250c      	movcc	r5, #12
 801040e:	4629      	mov	r1, r5
 8010410:	4638      	mov	r0, r7
 8010412:	f7ff ffa5 	bl	8010360 <sbrk_aligned>
 8010416:	3001      	adds	r0, #1
 8010418:	d02b      	beq.n	8010472 <_malloc_r+0xd2>
 801041a:	6823      	ldr	r3, [r4, #0]
 801041c:	442b      	add	r3, r5
 801041e:	6023      	str	r3, [r4, #0]
 8010420:	e00e      	b.n	8010440 <_malloc_r+0xa0>
 8010422:	6822      	ldr	r2, [r4, #0]
 8010424:	1b52      	subs	r2, r2, r5
 8010426:	d41e      	bmi.n	8010466 <_malloc_r+0xc6>
 8010428:	2a0b      	cmp	r2, #11
 801042a:	d916      	bls.n	801045a <_malloc_r+0xba>
 801042c:	1961      	adds	r1, r4, r5
 801042e:	42a3      	cmp	r3, r4
 8010430:	6025      	str	r5, [r4, #0]
 8010432:	bf18      	it	ne
 8010434:	6059      	strne	r1, [r3, #4]
 8010436:	6863      	ldr	r3, [r4, #4]
 8010438:	bf08      	it	eq
 801043a:	6031      	streq	r1, [r6, #0]
 801043c:	5162      	str	r2, [r4, r5]
 801043e:	604b      	str	r3, [r1, #4]
 8010440:	4638      	mov	r0, r7
 8010442:	f104 060b 	add.w	r6, r4, #11
 8010446:	f000 fc79 	bl	8010d3c <__malloc_unlock>
 801044a:	f026 0607 	bic.w	r6, r6, #7
 801044e:	1d23      	adds	r3, r4, #4
 8010450:	1af2      	subs	r2, r6, r3
 8010452:	d0b6      	beq.n	80103c2 <_malloc_r+0x22>
 8010454:	1b9b      	subs	r3, r3, r6
 8010456:	50a3      	str	r3, [r4, r2]
 8010458:	e7b3      	b.n	80103c2 <_malloc_r+0x22>
 801045a:	6862      	ldr	r2, [r4, #4]
 801045c:	42a3      	cmp	r3, r4
 801045e:	bf0c      	ite	eq
 8010460:	6032      	streq	r2, [r6, #0]
 8010462:	605a      	strne	r2, [r3, #4]
 8010464:	e7ec      	b.n	8010440 <_malloc_r+0xa0>
 8010466:	4623      	mov	r3, r4
 8010468:	6864      	ldr	r4, [r4, #4]
 801046a:	e7b2      	b.n	80103d2 <_malloc_r+0x32>
 801046c:	4634      	mov	r4, r6
 801046e:	6876      	ldr	r6, [r6, #4]
 8010470:	e7b9      	b.n	80103e6 <_malloc_r+0x46>
 8010472:	230c      	movs	r3, #12
 8010474:	603b      	str	r3, [r7, #0]
 8010476:	4638      	mov	r0, r7
 8010478:	f000 fc60 	bl	8010d3c <__malloc_unlock>
 801047c:	e7a1      	b.n	80103c2 <_malloc_r+0x22>
 801047e:	6025      	str	r5, [r4, #0]
 8010480:	e7de      	b.n	8010440 <_malloc_r+0xa0>
 8010482:	bf00      	nop
 8010484:	20004748 	.word	0x20004748

08010488 <__sfputc_r>:
 8010488:	6893      	ldr	r3, [r2, #8]
 801048a:	3b01      	subs	r3, #1
 801048c:	2b00      	cmp	r3, #0
 801048e:	b410      	push	{r4}
 8010490:	6093      	str	r3, [r2, #8]
 8010492:	da08      	bge.n	80104a6 <__sfputc_r+0x1e>
 8010494:	6994      	ldr	r4, [r2, #24]
 8010496:	42a3      	cmp	r3, r4
 8010498:	db01      	blt.n	801049e <__sfputc_r+0x16>
 801049a:	290a      	cmp	r1, #10
 801049c:	d103      	bne.n	80104a6 <__sfputc_r+0x1e>
 801049e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104a2:	f000 b9e7 	b.w	8010874 <__swbuf_r>
 80104a6:	6813      	ldr	r3, [r2, #0]
 80104a8:	1c58      	adds	r0, r3, #1
 80104aa:	6010      	str	r0, [r2, #0]
 80104ac:	7019      	strb	r1, [r3, #0]
 80104ae:	4608      	mov	r0, r1
 80104b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104b4:	4770      	bx	lr

080104b6 <__sfputs_r>:
 80104b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104b8:	4606      	mov	r6, r0
 80104ba:	460f      	mov	r7, r1
 80104bc:	4614      	mov	r4, r2
 80104be:	18d5      	adds	r5, r2, r3
 80104c0:	42ac      	cmp	r4, r5
 80104c2:	d101      	bne.n	80104c8 <__sfputs_r+0x12>
 80104c4:	2000      	movs	r0, #0
 80104c6:	e007      	b.n	80104d8 <__sfputs_r+0x22>
 80104c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104cc:	463a      	mov	r2, r7
 80104ce:	4630      	mov	r0, r6
 80104d0:	f7ff ffda 	bl	8010488 <__sfputc_r>
 80104d4:	1c43      	adds	r3, r0, #1
 80104d6:	d1f3      	bne.n	80104c0 <__sfputs_r+0xa>
 80104d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080104dc <_vfiprintf_r>:
 80104dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104e0:	460d      	mov	r5, r1
 80104e2:	b09d      	sub	sp, #116	; 0x74
 80104e4:	4614      	mov	r4, r2
 80104e6:	4698      	mov	r8, r3
 80104e8:	4606      	mov	r6, r0
 80104ea:	b118      	cbz	r0, 80104f4 <_vfiprintf_r+0x18>
 80104ec:	6983      	ldr	r3, [r0, #24]
 80104ee:	b90b      	cbnz	r3, 80104f4 <_vfiprintf_r+0x18>
 80104f0:	f7ff fa94 	bl	800fa1c <__sinit>
 80104f4:	4b89      	ldr	r3, [pc, #548]	; (801071c <_vfiprintf_r+0x240>)
 80104f6:	429d      	cmp	r5, r3
 80104f8:	d11b      	bne.n	8010532 <_vfiprintf_r+0x56>
 80104fa:	6875      	ldr	r5, [r6, #4]
 80104fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80104fe:	07d9      	lsls	r1, r3, #31
 8010500:	d405      	bmi.n	801050e <_vfiprintf_r+0x32>
 8010502:	89ab      	ldrh	r3, [r5, #12]
 8010504:	059a      	lsls	r2, r3, #22
 8010506:	d402      	bmi.n	801050e <_vfiprintf_r+0x32>
 8010508:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801050a:	f7ff fb2a 	bl	800fb62 <__retarget_lock_acquire_recursive>
 801050e:	89ab      	ldrh	r3, [r5, #12]
 8010510:	071b      	lsls	r3, r3, #28
 8010512:	d501      	bpl.n	8010518 <_vfiprintf_r+0x3c>
 8010514:	692b      	ldr	r3, [r5, #16]
 8010516:	b9eb      	cbnz	r3, 8010554 <_vfiprintf_r+0x78>
 8010518:	4629      	mov	r1, r5
 801051a:	4630      	mov	r0, r6
 801051c:	f000 fa0e 	bl	801093c <__swsetup_r>
 8010520:	b1c0      	cbz	r0, 8010554 <_vfiprintf_r+0x78>
 8010522:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010524:	07dc      	lsls	r4, r3, #31
 8010526:	d50e      	bpl.n	8010546 <_vfiprintf_r+0x6a>
 8010528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801052c:	b01d      	add	sp, #116	; 0x74
 801052e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010532:	4b7b      	ldr	r3, [pc, #492]	; (8010720 <_vfiprintf_r+0x244>)
 8010534:	429d      	cmp	r5, r3
 8010536:	d101      	bne.n	801053c <_vfiprintf_r+0x60>
 8010538:	68b5      	ldr	r5, [r6, #8]
 801053a:	e7df      	b.n	80104fc <_vfiprintf_r+0x20>
 801053c:	4b79      	ldr	r3, [pc, #484]	; (8010724 <_vfiprintf_r+0x248>)
 801053e:	429d      	cmp	r5, r3
 8010540:	bf08      	it	eq
 8010542:	68f5      	ldreq	r5, [r6, #12]
 8010544:	e7da      	b.n	80104fc <_vfiprintf_r+0x20>
 8010546:	89ab      	ldrh	r3, [r5, #12]
 8010548:	0598      	lsls	r0, r3, #22
 801054a:	d4ed      	bmi.n	8010528 <_vfiprintf_r+0x4c>
 801054c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801054e:	f7ff fb09 	bl	800fb64 <__retarget_lock_release_recursive>
 8010552:	e7e9      	b.n	8010528 <_vfiprintf_r+0x4c>
 8010554:	2300      	movs	r3, #0
 8010556:	9309      	str	r3, [sp, #36]	; 0x24
 8010558:	2320      	movs	r3, #32
 801055a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801055e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010562:	2330      	movs	r3, #48	; 0x30
 8010564:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010728 <_vfiprintf_r+0x24c>
 8010568:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801056c:	f04f 0901 	mov.w	r9, #1
 8010570:	4623      	mov	r3, r4
 8010572:	469a      	mov	sl, r3
 8010574:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010578:	b10a      	cbz	r2, 801057e <_vfiprintf_r+0xa2>
 801057a:	2a25      	cmp	r2, #37	; 0x25
 801057c:	d1f9      	bne.n	8010572 <_vfiprintf_r+0x96>
 801057e:	ebba 0b04 	subs.w	fp, sl, r4
 8010582:	d00b      	beq.n	801059c <_vfiprintf_r+0xc0>
 8010584:	465b      	mov	r3, fp
 8010586:	4622      	mov	r2, r4
 8010588:	4629      	mov	r1, r5
 801058a:	4630      	mov	r0, r6
 801058c:	f7ff ff93 	bl	80104b6 <__sfputs_r>
 8010590:	3001      	adds	r0, #1
 8010592:	f000 80aa 	beq.w	80106ea <_vfiprintf_r+0x20e>
 8010596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010598:	445a      	add	r2, fp
 801059a:	9209      	str	r2, [sp, #36]	; 0x24
 801059c:	f89a 3000 	ldrb.w	r3, [sl]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	f000 80a2 	beq.w	80106ea <_vfiprintf_r+0x20e>
 80105a6:	2300      	movs	r3, #0
 80105a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80105ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105b0:	f10a 0a01 	add.w	sl, sl, #1
 80105b4:	9304      	str	r3, [sp, #16]
 80105b6:	9307      	str	r3, [sp, #28]
 80105b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80105bc:	931a      	str	r3, [sp, #104]	; 0x68
 80105be:	4654      	mov	r4, sl
 80105c0:	2205      	movs	r2, #5
 80105c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105c6:	4858      	ldr	r0, [pc, #352]	; (8010728 <_vfiprintf_r+0x24c>)
 80105c8:	f7ef fe32 	bl	8000230 <memchr>
 80105cc:	9a04      	ldr	r2, [sp, #16]
 80105ce:	b9d8      	cbnz	r0, 8010608 <_vfiprintf_r+0x12c>
 80105d0:	06d1      	lsls	r1, r2, #27
 80105d2:	bf44      	itt	mi
 80105d4:	2320      	movmi	r3, #32
 80105d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80105da:	0713      	lsls	r3, r2, #28
 80105dc:	bf44      	itt	mi
 80105de:	232b      	movmi	r3, #43	; 0x2b
 80105e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80105e4:	f89a 3000 	ldrb.w	r3, [sl]
 80105e8:	2b2a      	cmp	r3, #42	; 0x2a
 80105ea:	d015      	beq.n	8010618 <_vfiprintf_r+0x13c>
 80105ec:	9a07      	ldr	r2, [sp, #28]
 80105ee:	4654      	mov	r4, sl
 80105f0:	2000      	movs	r0, #0
 80105f2:	f04f 0c0a 	mov.w	ip, #10
 80105f6:	4621      	mov	r1, r4
 80105f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105fc:	3b30      	subs	r3, #48	; 0x30
 80105fe:	2b09      	cmp	r3, #9
 8010600:	d94e      	bls.n	80106a0 <_vfiprintf_r+0x1c4>
 8010602:	b1b0      	cbz	r0, 8010632 <_vfiprintf_r+0x156>
 8010604:	9207      	str	r2, [sp, #28]
 8010606:	e014      	b.n	8010632 <_vfiprintf_r+0x156>
 8010608:	eba0 0308 	sub.w	r3, r0, r8
 801060c:	fa09 f303 	lsl.w	r3, r9, r3
 8010610:	4313      	orrs	r3, r2
 8010612:	9304      	str	r3, [sp, #16]
 8010614:	46a2      	mov	sl, r4
 8010616:	e7d2      	b.n	80105be <_vfiprintf_r+0xe2>
 8010618:	9b03      	ldr	r3, [sp, #12]
 801061a:	1d19      	adds	r1, r3, #4
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	9103      	str	r1, [sp, #12]
 8010620:	2b00      	cmp	r3, #0
 8010622:	bfbb      	ittet	lt
 8010624:	425b      	neglt	r3, r3
 8010626:	f042 0202 	orrlt.w	r2, r2, #2
 801062a:	9307      	strge	r3, [sp, #28]
 801062c:	9307      	strlt	r3, [sp, #28]
 801062e:	bfb8      	it	lt
 8010630:	9204      	strlt	r2, [sp, #16]
 8010632:	7823      	ldrb	r3, [r4, #0]
 8010634:	2b2e      	cmp	r3, #46	; 0x2e
 8010636:	d10c      	bne.n	8010652 <_vfiprintf_r+0x176>
 8010638:	7863      	ldrb	r3, [r4, #1]
 801063a:	2b2a      	cmp	r3, #42	; 0x2a
 801063c:	d135      	bne.n	80106aa <_vfiprintf_r+0x1ce>
 801063e:	9b03      	ldr	r3, [sp, #12]
 8010640:	1d1a      	adds	r2, r3, #4
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	9203      	str	r2, [sp, #12]
 8010646:	2b00      	cmp	r3, #0
 8010648:	bfb8      	it	lt
 801064a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801064e:	3402      	adds	r4, #2
 8010650:	9305      	str	r3, [sp, #20]
 8010652:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010738 <_vfiprintf_r+0x25c>
 8010656:	7821      	ldrb	r1, [r4, #0]
 8010658:	2203      	movs	r2, #3
 801065a:	4650      	mov	r0, sl
 801065c:	f7ef fde8 	bl	8000230 <memchr>
 8010660:	b140      	cbz	r0, 8010674 <_vfiprintf_r+0x198>
 8010662:	2340      	movs	r3, #64	; 0x40
 8010664:	eba0 000a 	sub.w	r0, r0, sl
 8010668:	fa03 f000 	lsl.w	r0, r3, r0
 801066c:	9b04      	ldr	r3, [sp, #16]
 801066e:	4303      	orrs	r3, r0
 8010670:	3401      	adds	r4, #1
 8010672:	9304      	str	r3, [sp, #16]
 8010674:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010678:	482c      	ldr	r0, [pc, #176]	; (801072c <_vfiprintf_r+0x250>)
 801067a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801067e:	2206      	movs	r2, #6
 8010680:	f7ef fdd6 	bl	8000230 <memchr>
 8010684:	2800      	cmp	r0, #0
 8010686:	d03f      	beq.n	8010708 <_vfiprintf_r+0x22c>
 8010688:	4b29      	ldr	r3, [pc, #164]	; (8010730 <_vfiprintf_r+0x254>)
 801068a:	bb1b      	cbnz	r3, 80106d4 <_vfiprintf_r+0x1f8>
 801068c:	9b03      	ldr	r3, [sp, #12]
 801068e:	3307      	adds	r3, #7
 8010690:	f023 0307 	bic.w	r3, r3, #7
 8010694:	3308      	adds	r3, #8
 8010696:	9303      	str	r3, [sp, #12]
 8010698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801069a:	443b      	add	r3, r7
 801069c:	9309      	str	r3, [sp, #36]	; 0x24
 801069e:	e767      	b.n	8010570 <_vfiprintf_r+0x94>
 80106a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80106a4:	460c      	mov	r4, r1
 80106a6:	2001      	movs	r0, #1
 80106a8:	e7a5      	b.n	80105f6 <_vfiprintf_r+0x11a>
 80106aa:	2300      	movs	r3, #0
 80106ac:	3401      	adds	r4, #1
 80106ae:	9305      	str	r3, [sp, #20]
 80106b0:	4619      	mov	r1, r3
 80106b2:	f04f 0c0a 	mov.w	ip, #10
 80106b6:	4620      	mov	r0, r4
 80106b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106bc:	3a30      	subs	r2, #48	; 0x30
 80106be:	2a09      	cmp	r2, #9
 80106c0:	d903      	bls.n	80106ca <_vfiprintf_r+0x1ee>
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d0c5      	beq.n	8010652 <_vfiprintf_r+0x176>
 80106c6:	9105      	str	r1, [sp, #20]
 80106c8:	e7c3      	b.n	8010652 <_vfiprintf_r+0x176>
 80106ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80106ce:	4604      	mov	r4, r0
 80106d0:	2301      	movs	r3, #1
 80106d2:	e7f0      	b.n	80106b6 <_vfiprintf_r+0x1da>
 80106d4:	ab03      	add	r3, sp, #12
 80106d6:	9300      	str	r3, [sp, #0]
 80106d8:	462a      	mov	r2, r5
 80106da:	4b16      	ldr	r3, [pc, #88]	; (8010734 <_vfiprintf_r+0x258>)
 80106dc:	a904      	add	r1, sp, #16
 80106de:	4630      	mov	r0, r6
 80106e0:	f7fd fed0 	bl	800e484 <_printf_float>
 80106e4:	4607      	mov	r7, r0
 80106e6:	1c78      	adds	r0, r7, #1
 80106e8:	d1d6      	bne.n	8010698 <_vfiprintf_r+0x1bc>
 80106ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80106ec:	07d9      	lsls	r1, r3, #31
 80106ee:	d405      	bmi.n	80106fc <_vfiprintf_r+0x220>
 80106f0:	89ab      	ldrh	r3, [r5, #12]
 80106f2:	059a      	lsls	r2, r3, #22
 80106f4:	d402      	bmi.n	80106fc <_vfiprintf_r+0x220>
 80106f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80106f8:	f7ff fa34 	bl	800fb64 <__retarget_lock_release_recursive>
 80106fc:	89ab      	ldrh	r3, [r5, #12]
 80106fe:	065b      	lsls	r3, r3, #25
 8010700:	f53f af12 	bmi.w	8010528 <_vfiprintf_r+0x4c>
 8010704:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010706:	e711      	b.n	801052c <_vfiprintf_r+0x50>
 8010708:	ab03      	add	r3, sp, #12
 801070a:	9300      	str	r3, [sp, #0]
 801070c:	462a      	mov	r2, r5
 801070e:	4b09      	ldr	r3, [pc, #36]	; (8010734 <_vfiprintf_r+0x258>)
 8010710:	a904      	add	r1, sp, #16
 8010712:	4630      	mov	r0, r6
 8010714:	f7fe f95a 	bl	800e9cc <_printf_i>
 8010718:	e7e4      	b.n	80106e4 <_vfiprintf_r+0x208>
 801071a:	bf00      	nop
 801071c:	08011050 	.word	0x08011050
 8010720:	08011070 	.word	0x08011070
 8010724:	08011030 	.word	0x08011030
 8010728:	080111ec 	.word	0x080111ec
 801072c:	080111f6 	.word	0x080111f6
 8010730:	0800e485 	.word	0x0800e485
 8010734:	080104b7 	.word	0x080104b7
 8010738:	080111f2 	.word	0x080111f2

0801073c <_putc_r>:
 801073c:	b570      	push	{r4, r5, r6, lr}
 801073e:	460d      	mov	r5, r1
 8010740:	4614      	mov	r4, r2
 8010742:	4606      	mov	r6, r0
 8010744:	b118      	cbz	r0, 801074e <_putc_r+0x12>
 8010746:	6983      	ldr	r3, [r0, #24]
 8010748:	b90b      	cbnz	r3, 801074e <_putc_r+0x12>
 801074a:	f7ff f967 	bl	800fa1c <__sinit>
 801074e:	4b1c      	ldr	r3, [pc, #112]	; (80107c0 <_putc_r+0x84>)
 8010750:	429c      	cmp	r4, r3
 8010752:	d124      	bne.n	801079e <_putc_r+0x62>
 8010754:	6874      	ldr	r4, [r6, #4]
 8010756:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010758:	07d8      	lsls	r0, r3, #31
 801075a:	d405      	bmi.n	8010768 <_putc_r+0x2c>
 801075c:	89a3      	ldrh	r3, [r4, #12]
 801075e:	0599      	lsls	r1, r3, #22
 8010760:	d402      	bmi.n	8010768 <_putc_r+0x2c>
 8010762:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010764:	f7ff f9fd 	bl	800fb62 <__retarget_lock_acquire_recursive>
 8010768:	68a3      	ldr	r3, [r4, #8]
 801076a:	3b01      	subs	r3, #1
 801076c:	2b00      	cmp	r3, #0
 801076e:	60a3      	str	r3, [r4, #8]
 8010770:	da05      	bge.n	801077e <_putc_r+0x42>
 8010772:	69a2      	ldr	r2, [r4, #24]
 8010774:	4293      	cmp	r3, r2
 8010776:	db1c      	blt.n	80107b2 <_putc_r+0x76>
 8010778:	b2eb      	uxtb	r3, r5
 801077a:	2b0a      	cmp	r3, #10
 801077c:	d019      	beq.n	80107b2 <_putc_r+0x76>
 801077e:	6823      	ldr	r3, [r4, #0]
 8010780:	1c5a      	adds	r2, r3, #1
 8010782:	6022      	str	r2, [r4, #0]
 8010784:	701d      	strb	r5, [r3, #0]
 8010786:	b2ed      	uxtb	r5, r5
 8010788:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801078a:	07da      	lsls	r2, r3, #31
 801078c:	d405      	bmi.n	801079a <_putc_r+0x5e>
 801078e:	89a3      	ldrh	r3, [r4, #12]
 8010790:	059b      	lsls	r3, r3, #22
 8010792:	d402      	bmi.n	801079a <_putc_r+0x5e>
 8010794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010796:	f7ff f9e5 	bl	800fb64 <__retarget_lock_release_recursive>
 801079a:	4628      	mov	r0, r5
 801079c:	bd70      	pop	{r4, r5, r6, pc}
 801079e:	4b09      	ldr	r3, [pc, #36]	; (80107c4 <_putc_r+0x88>)
 80107a0:	429c      	cmp	r4, r3
 80107a2:	d101      	bne.n	80107a8 <_putc_r+0x6c>
 80107a4:	68b4      	ldr	r4, [r6, #8]
 80107a6:	e7d6      	b.n	8010756 <_putc_r+0x1a>
 80107a8:	4b07      	ldr	r3, [pc, #28]	; (80107c8 <_putc_r+0x8c>)
 80107aa:	429c      	cmp	r4, r3
 80107ac:	bf08      	it	eq
 80107ae:	68f4      	ldreq	r4, [r6, #12]
 80107b0:	e7d1      	b.n	8010756 <_putc_r+0x1a>
 80107b2:	4629      	mov	r1, r5
 80107b4:	4622      	mov	r2, r4
 80107b6:	4630      	mov	r0, r6
 80107b8:	f000 f85c 	bl	8010874 <__swbuf_r>
 80107bc:	4605      	mov	r5, r0
 80107be:	e7e3      	b.n	8010788 <_putc_r+0x4c>
 80107c0:	08011050 	.word	0x08011050
 80107c4:	08011070 	.word	0x08011070
 80107c8:	08011030 	.word	0x08011030

080107cc <_sbrk_r>:
 80107cc:	b538      	push	{r3, r4, r5, lr}
 80107ce:	4d06      	ldr	r5, [pc, #24]	; (80107e8 <_sbrk_r+0x1c>)
 80107d0:	2300      	movs	r3, #0
 80107d2:	4604      	mov	r4, r0
 80107d4:	4608      	mov	r0, r1
 80107d6:	602b      	str	r3, [r5, #0]
 80107d8:	f7f1 fb62 	bl	8001ea0 <_sbrk>
 80107dc:	1c43      	adds	r3, r0, #1
 80107de:	d102      	bne.n	80107e6 <_sbrk_r+0x1a>
 80107e0:	682b      	ldr	r3, [r5, #0]
 80107e2:	b103      	cbz	r3, 80107e6 <_sbrk_r+0x1a>
 80107e4:	6023      	str	r3, [r4, #0]
 80107e6:	bd38      	pop	{r3, r4, r5, pc}
 80107e8:	20004750 	.word	0x20004750

080107ec <__sread>:
 80107ec:	b510      	push	{r4, lr}
 80107ee:	460c      	mov	r4, r1
 80107f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107f4:	f000 faa8 	bl	8010d48 <_read_r>
 80107f8:	2800      	cmp	r0, #0
 80107fa:	bfab      	itete	ge
 80107fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80107fe:	89a3      	ldrhlt	r3, [r4, #12]
 8010800:	181b      	addge	r3, r3, r0
 8010802:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010806:	bfac      	ite	ge
 8010808:	6563      	strge	r3, [r4, #84]	; 0x54
 801080a:	81a3      	strhlt	r3, [r4, #12]
 801080c:	bd10      	pop	{r4, pc}

0801080e <__swrite>:
 801080e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010812:	461f      	mov	r7, r3
 8010814:	898b      	ldrh	r3, [r1, #12]
 8010816:	05db      	lsls	r3, r3, #23
 8010818:	4605      	mov	r5, r0
 801081a:	460c      	mov	r4, r1
 801081c:	4616      	mov	r6, r2
 801081e:	d505      	bpl.n	801082c <__swrite+0x1e>
 8010820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010824:	2302      	movs	r3, #2
 8010826:	2200      	movs	r2, #0
 8010828:	f000 f9f8 	bl	8010c1c <_lseek_r>
 801082c:	89a3      	ldrh	r3, [r4, #12]
 801082e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010836:	81a3      	strh	r3, [r4, #12]
 8010838:	4632      	mov	r2, r6
 801083a:	463b      	mov	r3, r7
 801083c:	4628      	mov	r0, r5
 801083e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010842:	f000 b869 	b.w	8010918 <_write_r>

08010846 <__sseek>:
 8010846:	b510      	push	{r4, lr}
 8010848:	460c      	mov	r4, r1
 801084a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801084e:	f000 f9e5 	bl	8010c1c <_lseek_r>
 8010852:	1c43      	adds	r3, r0, #1
 8010854:	89a3      	ldrh	r3, [r4, #12]
 8010856:	bf15      	itete	ne
 8010858:	6560      	strne	r0, [r4, #84]	; 0x54
 801085a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801085e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010862:	81a3      	strheq	r3, [r4, #12]
 8010864:	bf18      	it	ne
 8010866:	81a3      	strhne	r3, [r4, #12]
 8010868:	bd10      	pop	{r4, pc}

0801086a <__sclose>:
 801086a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801086e:	f000 b8f1 	b.w	8010a54 <_close_r>
	...

08010874 <__swbuf_r>:
 8010874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010876:	460e      	mov	r6, r1
 8010878:	4614      	mov	r4, r2
 801087a:	4605      	mov	r5, r0
 801087c:	b118      	cbz	r0, 8010886 <__swbuf_r+0x12>
 801087e:	6983      	ldr	r3, [r0, #24]
 8010880:	b90b      	cbnz	r3, 8010886 <__swbuf_r+0x12>
 8010882:	f7ff f8cb 	bl	800fa1c <__sinit>
 8010886:	4b21      	ldr	r3, [pc, #132]	; (801090c <__swbuf_r+0x98>)
 8010888:	429c      	cmp	r4, r3
 801088a:	d12b      	bne.n	80108e4 <__swbuf_r+0x70>
 801088c:	686c      	ldr	r4, [r5, #4]
 801088e:	69a3      	ldr	r3, [r4, #24]
 8010890:	60a3      	str	r3, [r4, #8]
 8010892:	89a3      	ldrh	r3, [r4, #12]
 8010894:	071a      	lsls	r2, r3, #28
 8010896:	d52f      	bpl.n	80108f8 <__swbuf_r+0x84>
 8010898:	6923      	ldr	r3, [r4, #16]
 801089a:	b36b      	cbz	r3, 80108f8 <__swbuf_r+0x84>
 801089c:	6923      	ldr	r3, [r4, #16]
 801089e:	6820      	ldr	r0, [r4, #0]
 80108a0:	1ac0      	subs	r0, r0, r3
 80108a2:	6963      	ldr	r3, [r4, #20]
 80108a4:	b2f6      	uxtb	r6, r6
 80108a6:	4283      	cmp	r3, r0
 80108a8:	4637      	mov	r7, r6
 80108aa:	dc04      	bgt.n	80108b6 <__swbuf_r+0x42>
 80108ac:	4621      	mov	r1, r4
 80108ae:	4628      	mov	r0, r5
 80108b0:	f000 f966 	bl	8010b80 <_fflush_r>
 80108b4:	bb30      	cbnz	r0, 8010904 <__swbuf_r+0x90>
 80108b6:	68a3      	ldr	r3, [r4, #8]
 80108b8:	3b01      	subs	r3, #1
 80108ba:	60a3      	str	r3, [r4, #8]
 80108bc:	6823      	ldr	r3, [r4, #0]
 80108be:	1c5a      	adds	r2, r3, #1
 80108c0:	6022      	str	r2, [r4, #0]
 80108c2:	701e      	strb	r6, [r3, #0]
 80108c4:	6963      	ldr	r3, [r4, #20]
 80108c6:	3001      	adds	r0, #1
 80108c8:	4283      	cmp	r3, r0
 80108ca:	d004      	beq.n	80108d6 <__swbuf_r+0x62>
 80108cc:	89a3      	ldrh	r3, [r4, #12]
 80108ce:	07db      	lsls	r3, r3, #31
 80108d0:	d506      	bpl.n	80108e0 <__swbuf_r+0x6c>
 80108d2:	2e0a      	cmp	r6, #10
 80108d4:	d104      	bne.n	80108e0 <__swbuf_r+0x6c>
 80108d6:	4621      	mov	r1, r4
 80108d8:	4628      	mov	r0, r5
 80108da:	f000 f951 	bl	8010b80 <_fflush_r>
 80108de:	b988      	cbnz	r0, 8010904 <__swbuf_r+0x90>
 80108e0:	4638      	mov	r0, r7
 80108e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108e4:	4b0a      	ldr	r3, [pc, #40]	; (8010910 <__swbuf_r+0x9c>)
 80108e6:	429c      	cmp	r4, r3
 80108e8:	d101      	bne.n	80108ee <__swbuf_r+0x7a>
 80108ea:	68ac      	ldr	r4, [r5, #8]
 80108ec:	e7cf      	b.n	801088e <__swbuf_r+0x1a>
 80108ee:	4b09      	ldr	r3, [pc, #36]	; (8010914 <__swbuf_r+0xa0>)
 80108f0:	429c      	cmp	r4, r3
 80108f2:	bf08      	it	eq
 80108f4:	68ec      	ldreq	r4, [r5, #12]
 80108f6:	e7ca      	b.n	801088e <__swbuf_r+0x1a>
 80108f8:	4621      	mov	r1, r4
 80108fa:	4628      	mov	r0, r5
 80108fc:	f000 f81e 	bl	801093c <__swsetup_r>
 8010900:	2800      	cmp	r0, #0
 8010902:	d0cb      	beq.n	801089c <__swbuf_r+0x28>
 8010904:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010908:	e7ea      	b.n	80108e0 <__swbuf_r+0x6c>
 801090a:	bf00      	nop
 801090c:	08011050 	.word	0x08011050
 8010910:	08011070 	.word	0x08011070
 8010914:	08011030 	.word	0x08011030

08010918 <_write_r>:
 8010918:	b538      	push	{r3, r4, r5, lr}
 801091a:	4d07      	ldr	r5, [pc, #28]	; (8010938 <_write_r+0x20>)
 801091c:	4604      	mov	r4, r0
 801091e:	4608      	mov	r0, r1
 8010920:	4611      	mov	r1, r2
 8010922:	2200      	movs	r2, #0
 8010924:	602a      	str	r2, [r5, #0]
 8010926:	461a      	mov	r2, r3
 8010928:	f7f1 fa69 	bl	8001dfe <_write>
 801092c:	1c43      	adds	r3, r0, #1
 801092e:	d102      	bne.n	8010936 <_write_r+0x1e>
 8010930:	682b      	ldr	r3, [r5, #0]
 8010932:	b103      	cbz	r3, 8010936 <_write_r+0x1e>
 8010934:	6023      	str	r3, [r4, #0]
 8010936:	bd38      	pop	{r3, r4, r5, pc}
 8010938:	20004750 	.word	0x20004750

0801093c <__swsetup_r>:
 801093c:	4b32      	ldr	r3, [pc, #200]	; (8010a08 <__swsetup_r+0xcc>)
 801093e:	b570      	push	{r4, r5, r6, lr}
 8010940:	681d      	ldr	r5, [r3, #0]
 8010942:	4606      	mov	r6, r0
 8010944:	460c      	mov	r4, r1
 8010946:	b125      	cbz	r5, 8010952 <__swsetup_r+0x16>
 8010948:	69ab      	ldr	r3, [r5, #24]
 801094a:	b913      	cbnz	r3, 8010952 <__swsetup_r+0x16>
 801094c:	4628      	mov	r0, r5
 801094e:	f7ff f865 	bl	800fa1c <__sinit>
 8010952:	4b2e      	ldr	r3, [pc, #184]	; (8010a0c <__swsetup_r+0xd0>)
 8010954:	429c      	cmp	r4, r3
 8010956:	d10f      	bne.n	8010978 <__swsetup_r+0x3c>
 8010958:	686c      	ldr	r4, [r5, #4]
 801095a:	89a3      	ldrh	r3, [r4, #12]
 801095c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010960:	0719      	lsls	r1, r3, #28
 8010962:	d42c      	bmi.n	80109be <__swsetup_r+0x82>
 8010964:	06dd      	lsls	r5, r3, #27
 8010966:	d411      	bmi.n	801098c <__swsetup_r+0x50>
 8010968:	2309      	movs	r3, #9
 801096a:	6033      	str	r3, [r6, #0]
 801096c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010970:	81a3      	strh	r3, [r4, #12]
 8010972:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010976:	e03e      	b.n	80109f6 <__swsetup_r+0xba>
 8010978:	4b25      	ldr	r3, [pc, #148]	; (8010a10 <__swsetup_r+0xd4>)
 801097a:	429c      	cmp	r4, r3
 801097c:	d101      	bne.n	8010982 <__swsetup_r+0x46>
 801097e:	68ac      	ldr	r4, [r5, #8]
 8010980:	e7eb      	b.n	801095a <__swsetup_r+0x1e>
 8010982:	4b24      	ldr	r3, [pc, #144]	; (8010a14 <__swsetup_r+0xd8>)
 8010984:	429c      	cmp	r4, r3
 8010986:	bf08      	it	eq
 8010988:	68ec      	ldreq	r4, [r5, #12]
 801098a:	e7e6      	b.n	801095a <__swsetup_r+0x1e>
 801098c:	0758      	lsls	r0, r3, #29
 801098e:	d512      	bpl.n	80109b6 <__swsetup_r+0x7a>
 8010990:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010992:	b141      	cbz	r1, 80109a6 <__swsetup_r+0x6a>
 8010994:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010998:	4299      	cmp	r1, r3
 801099a:	d002      	beq.n	80109a2 <__swsetup_r+0x66>
 801099c:	4630      	mov	r0, r6
 801099e:	f7ff fc93 	bl	80102c8 <_free_r>
 80109a2:	2300      	movs	r3, #0
 80109a4:	6363      	str	r3, [r4, #52]	; 0x34
 80109a6:	89a3      	ldrh	r3, [r4, #12]
 80109a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80109ac:	81a3      	strh	r3, [r4, #12]
 80109ae:	2300      	movs	r3, #0
 80109b0:	6063      	str	r3, [r4, #4]
 80109b2:	6923      	ldr	r3, [r4, #16]
 80109b4:	6023      	str	r3, [r4, #0]
 80109b6:	89a3      	ldrh	r3, [r4, #12]
 80109b8:	f043 0308 	orr.w	r3, r3, #8
 80109bc:	81a3      	strh	r3, [r4, #12]
 80109be:	6923      	ldr	r3, [r4, #16]
 80109c0:	b94b      	cbnz	r3, 80109d6 <__swsetup_r+0x9a>
 80109c2:	89a3      	ldrh	r3, [r4, #12]
 80109c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80109c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80109cc:	d003      	beq.n	80109d6 <__swsetup_r+0x9a>
 80109ce:	4621      	mov	r1, r4
 80109d0:	4630      	mov	r0, r6
 80109d2:	f000 f95b 	bl	8010c8c <__smakebuf_r>
 80109d6:	89a0      	ldrh	r0, [r4, #12]
 80109d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80109dc:	f010 0301 	ands.w	r3, r0, #1
 80109e0:	d00a      	beq.n	80109f8 <__swsetup_r+0xbc>
 80109e2:	2300      	movs	r3, #0
 80109e4:	60a3      	str	r3, [r4, #8]
 80109e6:	6963      	ldr	r3, [r4, #20]
 80109e8:	425b      	negs	r3, r3
 80109ea:	61a3      	str	r3, [r4, #24]
 80109ec:	6923      	ldr	r3, [r4, #16]
 80109ee:	b943      	cbnz	r3, 8010a02 <__swsetup_r+0xc6>
 80109f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80109f4:	d1ba      	bne.n	801096c <__swsetup_r+0x30>
 80109f6:	bd70      	pop	{r4, r5, r6, pc}
 80109f8:	0781      	lsls	r1, r0, #30
 80109fa:	bf58      	it	pl
 80109fc:	6963      	ldrpl	r3, [r4, #20]
 80109fe:	60a3      	str	r3, [r4, #8]
 8010a00:	e7f4      	b.n	80109ec <__swsetup_r+0xb0>
 8010a02:	2000      	movs	r0, #0
 8010a04:	e7f7      	b.n	80109f6 <__swsetup_r+0xba>
 8010a06:	bf00      	nop
 8010a08:	20002858 	.word	0x20002858
 8010a0c:	08011050 	.word	0x08011050
 8010a10:	08011070 	.word	0x08011070
 8010a14:	08011030 	.word	0x08011030

08010a18 <__assert_func>:
 8010a18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010a1a:	4614      	mov	r4, r2
 8010a1c:	461a      	mov	r2, r3
 8010a1e:	4b09      	ldr	r3, [pc, #36]	; (8010a44 <__assert_func+0x2c>)
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	4605      	mov	r5, r0
 8010a24:	68d8      	ldr	r0, [r3, #12]
 8010a26:	b14c      	cbz	r4, 8010a3c <__assert_func+0x24>
 8010a28:	4b07      	ldr	r3, [pc, #28]	; (8010a48 <__assert_func+0x30>)
 8010a2a:	9100      	str	r1, [sp, #0]
 8010a2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010a30:	4906      	ldr	r1, [pc, #24]	; (8010a4c <__assert_func+0x34>)
 8010a32:	462b      	mov	r3, r5
 8010a34:	f000 f8e0 	bl	8010bf8 <fiprintf>
 8010a38:	f000 f9a5 	bl	8010d86 <abort>
 8010a3c:	4b04      	ldr	r3, [pc, #16]	; (8010a50 <__assert_func+0x38>)
 8010a3e:	461c      	mov	r4, r3
 8010a40:	e7f3      	b.n	8010a2a <__assert_func+0x12>
 8010a42:	bf00      	nop
 8010a44:	20002858 	.word	0x20002858
 8010a48:	080111fd 	.word	0x080111fd
 8010a4c:	0801120a 	.word	0x0801120a
 8010a50:	08011238 	.word	0x08011238

08010a54 <_close_r>:
 8010a54:	b538      	push	{r3, r4, r5, lr}
 8010a56:	4d06      	ldr	r5, [pc, #24]	; (8010a70 <_close_r+0x1c>)
 8010a58:	2300      	movs	r3, #0
 8010a5a:	4604      	mov	r4, r0
 8010a5c:	4608      	mov	r0, r1
 8010a5e:	602b      	str	r3, [r5, #0]
 8010a60:	f7f1 f9e9 	bl	8001e36 <_close>
 8010a64:	1c43      	adds	r3, r0, #1
 8010a66:	d102      	bne.n	8010a6e <_close_r+0x1a>
 8010a68:	682b      	ldr	r3, [r5, #0]
 8010a6a:	b103      	cbz	r3, 8010a6e <_close_r+0x1a>
 8010a6c:	6023      	str	r3, [r4, #0]
 8010a6e:	bd38      	pop	{r3, r4, r5, pc}
 8010a70:	20004750 	.word	0x20004750

08010a74 <__sflush_r>:
 8010a74:	898a      	ldrh	r2, [r1, #12]
 8010a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a7a:	4605      	mov	r5, r0
 8010a7c:	0710      	lsls	r0, r2, #28
 8010a7e:	460c      	mov	r4, r1
 8010a80:	d458      	bmi.n	8010b34 <__sflush_r+0xc0>
 8010a82:	684b      	ldr	r3, [r1, #4]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	dc05      	bgt.n	8010a94 <__sflush_r+0x20>
 8010a88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	dc02      	bgt.n	8010a94 <__sflush_r+0x20>
 8010a8e:	2000      	movs	r0, #0
 8010a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010a96:	2e00      	cmp	r6, #0
 8010a98:	d0f9      	beq.n	8010a8e <__sflush_r+0x1a>
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010aa0:	682f      	ldr	r7, [r5, #0]
 8010aa2:	602b      	str	r3, [r5, #0]
 8010aa4:	d032      	beq.n	8010b0c <__sflush_r+0x98>
 8010aa6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010aa8:	89a3      	ldrh	r3, [r4, #12]
 8010aaa:	075a      	lsls	r2, r3, #29
 8010aac:	d505      	bpl.n	8010aba <__sflush_r+0x46>
 8010aae:	6863      	ldr	r3, [r4, #4]
 8010ab0:	1ac0      	subs	r0, r0, r3
 8010ab2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010ab4:	b10b      	cbz	r3, 8010aba <__sflush_r+0x46>
 8010ab6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010ab8:	1ac0      	subs	r0, r0, r3
 8010aba:	2300      	movs	r3, #0
 8010abc:	4602      	mov	r2, r0
 8010abe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010ac0:	6a21      	ldr	r1, [r4, #32]
 8010ac2:	4628      	mov	r0, r5
 8010ac4:	47b0      	blx	r6
 8010ac6:	1c43      	adds	r3, r0, #1
 8010ac8:	89a3      	ldrh	r3, [r4, #12]
 8010aca:	d106      	bne.n	8010ada <__sflush_r+0x66>
 8010acc:	6829      	ldr	r1, [r5, #0]
 8010ace:	291d      	cmp	r1, #29
 8010ad0:	d82c      	bhi.n	8010b2c <__sflush_r+0xb8>
 8010ad2:	4a2a      	ldr	r2, [pc, #168]	; (8010b7c <__sflush_r+0x108>)
 8010ad4:	40ca      	lsrs	r2, r1
 8010ad6:	07d6      	lsls	r6, r2, #31
 8010ad8:	d528      	bpl.n	8010b2c <__sflush_r+0xb8>
 8010ada:	2200      	movs	r2, #0
 8010adc:	6062      	str	r2, [r4, #4]
 8010ade:	04d9      	lsls	r1, r3, #19
 8010ae0:	6922      	ldr	r2, [r4, #16]
 8010ae2:	6022      	str	r2, [r4, #0]
 8010ae4:	d504      	bpl.n	8010af0 <__sflush_r+0x7c>
 8010ae6:	1c42      	adds	r2, r0, #1
 8010ae8:	d101      	bne.n	8010aee <__sflush_r+0x7a>
 8010aea:	682b      	ldr	r3, [r5, #0]
 8010aec:	b903      	cbnz	r3, 8010af0 <__sflush_r+0x7c>
 8010aee:	6560      	str	r0, [r4, #84]	; 0x54
 8010af0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010af2:	602f      	str	r7, [r5, #0]
 8010af4:	2900      	cmp	r1, #0
 8010af6:	d0ca      	beq.n	8010a8e <__sflush_r+0x1a>
 8010af8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010afc:	4299      	cmp	r1, r3
 8010afe:	d002      	beq.n	8010b06 <__sflush_r+0x92>
 8010b00:	4628      	mov	r0, r5
 8010b02:	f7ff fbe1 	bl	80102c8 <_free_r>
 8010b06:	2000      	movs	r0, #0
 8010b08:	6360      	str	r0, [r4, #52]	; 0x34
 8010b0a:	e7c1      	b.n	8010a90 <__sflush_r+0x1c>
 8010b0c:	6a21      	ldr	r1, [r4, #32]
 8010b0e:	2301      	movs	r3, #1
 8010b10:	4628      	mov	r0, r5
 8010b12:	47b0      	blx	r6
 8010b14:	1c41      	adds	r1, r0, #1
 8010b16:	d1c7      	bne.n	8010aa8 <__sflush_r+0x34>
 8010b18:	682b      	ldr	r3, [r5, #0]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d0c4      	beq.n	8010aa8 <__sflush_r+0x34>
 8010b1e:	2b1d      	cmp	r3, #29
 8010b20:	d001      	beq.n	8010b26 <__sflush_r+0xb2>
 8010b22:	2b16      	cmp	r3, #22
 8010b24:	d101      	bne.n	8010b2a <__sflush_r+0xb6>
 8010b26:	602f      	str	r7, [r5, #0]
 8010b28:	e7b1      	b.n	8010a8e <__sflush_r+0x1a>
 8010b2a:	89a3      	ldrh	r3, [r4, #12]
 8010b2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b30:	81a3      	strh	r3, [r4, #12]
 8010b32:	e7ad      	b.n	8010a90 <__sflush_r+0x1c>
 8010b34:	690f      	ldr	r7, [r1, #16]
 8010b36:	2f00      	cmp	r7, #0
 8010b38:	d0a9      	beq.n	8010a8e <__sflush_r+0x1a>
 8010b3a:	0793      	lsls	r3, r2, #30
 8010b3c:	680e      	ldr	r6, [r1, #0]
 8010b3e:	bf08      	it	eq
 8010b40:	694b      	ldreq	r3, [r1, #20]
 8010b42:	600f      	str	r7, [r1, #0]
 8010b44:	bf18      	it	ne
 8010b46:	2300      	movne	r3, #0
 8010b48:	eba6 0807 	sub.w	r8, r6, r7
 8010b4c:	608b      	str	r3, [r1, #8]
 8010b4e:	f1b8 0f00 	cmp.w	r8, #0
 8010b52:	dd9c      	ble.n	8010a8e <__sflush_r+0x1a>
 8010b54:	6a21      	ldr	r1, [r4, #32]
 8010b56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010b58:	4643      	mov	r3, r8
 8010b5a:	463a      	mov	r2, r7
 8010b5c:	4628      	mov	r0, r5
 8010b5e:	47b0      	blx	r6
 8010b60:	2800      	cmp	r0, #0
 8010b62:	dc06      	bgt.n	8010b72 <__sflush_r+0xfe>
 8010b64:	89a3      	ldrh	r3, [r4, #12]
 8010b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b6a:	81a3      	strh	r3, [r4, #12]
 8010b6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010b70:	e78e      	b.n	8010a90 <__sflush_r+0x1c>
 8010b72:	4407      	add	r7, r0
 8010b74:	eba8 0800 	sub.w	r8, r8, r0
 8010b78:	e7e9      	b.n	8010b4e <__sflush_r+0xda>
 8010b7a:	bf00      	nop
 8010b7c:	20400001 	.word	0x20400001

08010b80 <_fflush_r>:
 8010b80:	b538      	push	{r3, r4, r5, lr}
 8010b82:	690b      	ldr	r3, [r1, #16]
 8010b84:	4605      	mov	r5, r0
 8010b86:	460c      	mov	r4, r1
 8010b88:	b913      	cbnz	r3, 8010b90 <_fflush_r+0x10>
 8010b8a:	2500      	movs	r5, #0
 8010b8c:	4628      	mov	r0, r5
 8010b8e:	bd38      	pop	{r3, r4, r5, pc}
 8010b90:	b118      	cbz	r0, 8010b9a <_fflush_r+0x1a>
 8010b92:	6983      	ldr	r3, [r0, #24]
 8010b94:	b90b      	cbnz	r3, 8010b9a <_fflush_r+0x1a>
 8010b96:	f7fe ff41 	bl	800fa1c <__sinit>
 8010b9a:	4b14      	ldr	r3, [pc, #80]	; (8010bec <_fflush_r+0x6c>)
 8010b9c:	429c      	cmp	r4, r3
 8010b9e:	d11b      	bne.n	8010bd8 <_fflush_r+0x58>
 8010ba0:	686c      	ldr	r4, [r5, #4]
 8010ba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d0ef      	beq.n	8010b8a <_fflush_r+0xa>
 8010baa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010bac:	07d0      	lsls	r0, r2, #31
 8010bae:	d404      	bmi.n	8010bba <_fflush_r+0x3a>
 8010bb0:	0599      	lsls	r1, r3, #22
 8010bb2:	d402      	bmi.n	8010bba <_fflush_r+0x3a>
 8010bb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010bb6:	f7fe ffd4 	bl	800fb62 <__retarget_lock_acquire_recursive>
 8010bba:	4628      	mov	r0, r5
 8010bbc:	4621      	mov	r1, r4
 8010bbe:	f7ff ff59 	bl	8010a74 <__sflush_r>
 8010bc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010bc4:	07da      	lsls	r2, r3, #31
 8010bc6:	4605      	mov	r5, r0
 8010bc8:	d4e0      	bmi.n	8010b8c <_fflush_r+0xc>
 8010bca:	89a3      	ldrh	r3, [r4, #12]
 8010bcc:	059b      	lsls	r3, r3, #22
 8010bce:	d4dd      	bmi.n	8010b8c <_fflush_r+0xc>
 8010bd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010bd2:	f7fe ffc7 	bl	800fb64 <__retarget_lock_release_recursive>
 8010bd6:	e7d9      	b.n	8010b8c <_fflush_r+0xc>
 8010bd8:	4b05      	ldr	r3, [pc, #20]	; (8010bf0 <_fflush_r+0x70>)
 8010bda:	429c      	cmp	r4, r3
 8010bdc:	d101      	bne.n	8010be2 <_fflush_r+0x62>
 8010bde:	68ac      	ldr	r4, [r5, #8]
 8010be0:	e7df      	b.n	8010ba2 <_fflush_r+0x22>
 8010be2:	4b04      	ldr	r3, [pc, #16]	; (8010bf4 <_fflush_r+0x74>)
 8010be4:	429c      	cmp	r4, r3
 8010be6:	bf08      	it	eq
 8010be8:	68ec      	ldreq	r4, [r5, #12]
 8010bea:	e7da      	b.n	8010ba2 <_fflush_r+0x22>
 8010bec:	08011050 	.word	0x08011050
 8010bf0:	08011070 	.word	0x08011070
 8010bf4:	08011030 	.word	0x08011030

08010bf8 <fiprintf>:
 8010bf8:	b40e      	push	{r1, r2, r3}
 8010bfa:	b503      	push	{r0, r1, lr}
 8010bfc:	4601      	mov	r1, r0
 8010bfe:	ab03      	add	r3, sp, #12
 8010c00:	4805      	ldr	r0, [pc, #20]	; (8010c18 <fiprintf+0x20>)
 8010c02:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c06:	6800      	ldr	r0, [r0, #0]
 8010c08:	9301      	str	r3, [sp, #4]
 8010c0a:	f7ff fc67 	bl	80104dc <_vfiprintf_r>
 8010c0e:	b002      	add	sp, #8
 8010c10:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c14:	b003      	add	sp, #12
 8010c16:	4770      	bx	lr
 8010c18:	20002858 	.word	0x20002858

08010c1c <_lseek_r>:
 8010c1c:	b538      	push	{r3, r4, r5, lr}
 8010c1e:	4d07      	ldr	r5, [pc, #28]	; (8010c3c <_lseek_r+0x20>)
 8010c20:	4604      	mov	r4, r0
 8010c22:	4608      	mov	r0, r1
 8010c24:	4611      	mov	r1, r2
 8010c26:	2200      	movs	r2, #0
 8010c28:	602a      	str	r2, [r5, #0]
 8010c2a:	461a      	mov	r2, r3
 8010c2c:	f7f1 f92a 	bl	8001e84 <_lseek>
 8010c30:	1c43      	adds	r3, r0, #1
 8010c32:	d102      	bne.n	8010c3a <_lseek_r+0x1e>
 8010c34:	682b      	ldr	r3, [r5, #0]
 8010c36:	b103      	cbz	r3, 8010c3a <_lseek_r+0x1e>
 8010c38:	6023      	str	r3, [r4, #0]
 8010c3a:	bd38      	pop	{r3, r4, r5, pc}
 8010c3c:	20004750 	.word	0x20004750

08010c40 <__swhatbuf_r>:
 8010c40:	b570      	push	{r4, r5, r6, lr}
 8010c42:	460e      	mov	r6, r1
 8010c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c48:	2900      	cmp	r1, #0
 8010c4a:	b096      	sub	sp, #88	; 0x58
 8010c4c:	4614      	mov	r4, r2
 8010c4e:	461d      	mov	r5, r3
 8010c50:	da08      	bge.n	8010c64 <__swhatbuf_r+0x24>
 8010c52:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010c56:	2200      	movs	r2, #0
 8010c58:	602a      	str	r2, [r5, #0]
 8010c5a:	061a      	lsls	r2, r3, #24
 8010c5c:	d410      	bmi.n	8010c80 <__swhatbuf_r+0x40>
 8010c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c62:	e00e      	b.n	8010c82 <__swhatbuf_r+0x42>
 8010c64:	466a      	mov	r2, sp
 8010c66:	f000 f895 	bl	8010d94 <_fstat_r>
 8010c6a:	2800      	cmp	r0, #0
 8010c6c:	dbf1      	blt.n	8010c52 <__swhatbuf_r+0x12>
 8010c6e:	9a01      	ldr	r2, [sp, #4]
 8010c70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010c74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010c78:	425a      	negs	r2, r3
 8010c7a:	415a      	adcs	r2, r3
 8010c7c:	602a      	str	r2, [r5, #0]
 8010c7e:	e7ee      	b.n	8010c5e <__swhatbuf_r+0x1e>
 8010c80:	2340      	movs	r3, #64	; 0x40
 8010c82:	2000      	movs	r0, #0
 8010c84:	6023      	str	r3, [r4, #0]
 8010c86:	b016      	add	sp, #88	; 0x58
 8010c88:	bd70      	pop	{r4, r5, r6, pc}
	...

08010c8c <__smakebuf_r>:
 8010c8c:	898b      	ldrh	r3, [r1, #12]
 8010c8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010c90:	079d      	lsls	r5, r3, #30
 8010c92:	4606      	mov	r6, r0
 8010c94:	460c      	mov	r4, r1
 8010c96:	d507      	bpl.n	8010ca8 <__smakebuf_r+0x1c>
 8010c98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010c9c:	6023      	str	r3, [r4, #0]
 8010c9e:	6123      	str	r3, [r4, #16]
 8010ca0:	2301      	movs	r3, #1
 8010ca2:	6163      	str	r3, [r4, #20]
 8010ca4:	b002      	add	sp, #8
 8010ca6:	bd70      	pop	{r4, r5, r6, pc}
 8010ca8:	ab01      	add	r3, sp, #4
 8010caa:	466a      	mov	r2, sp
 8010cac:	f7ff ffc8 	bl	8010c40 <__swhatbuf_r>
 8010cb0:	9900      	ldr	r1, [sp, #0]
 8010cb2:	4605      	mov	r5, r0
 8010cb4:	4630      	mov	r0, r6
 8010cb6:	f7ff fb73 	bl	80103a0 <_malloc_r>
 8010cba:	b948      	cbnz	r0, 8010cd0 <__smakebuf_r+0x44>
 8010cbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cc0:	059a      	lsls	r2, r3, #22
 8010cc2:	d4ef      	bmi.n	8010ca4 <__smakebuf_r+0x18>
 8010cc4:	f023 0303 	bic.w	r3, r3, #3
 8010cc8:	f043 0302 	orr.w	r3, r3, #2
 8010ccc:	81a3      	strh	r3, [r4, #12]
 8010cce:	e7e3      	b.n	8010c98 <__smakebuf_r+0xc>
 8010cd0:	4b0d      	ldr	r3, [pc, #52]	; (8010d08 <__smakebuf_r+0x7c>)
 8010cd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8010cd4:	89a3      	ldrh	r3, [r4, #12]
 8010cd6:	6020      	str	r0, [r4, #0]
 8010cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cdc:	81a3      	strh	r3, [r4, #12]
 8010cde:	9b00      	ldr	r3, [sp, #0]
 8010ce0:	6163      	str	r3, [r4, #20]
 8010ce2:	9b01      	ldr	r3, [sp, #4]
 8010ce4:	6120      	str	r0, [r4, #16]
 8010ce6:	b15b      	cbz	r3, 8010d00 <__smakebuf_r+0x74>
 8010ce8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010cec:	4630      	mov	r0, r6
 8010cee:	f000 f863 	bl	8010db8 <_isatty_r>
 8010cf2:	b128      	cbz	r0, 8010d00 <__smakebuf_r+0x74>
 8010cf4:	89a3      	ldrh	r3, [r4, #12]
 8010cf6:	f023 0303 	bic.w	r3, r3, #3
 8010cfa:	f043 0301 	orr.w	r3, r3, #1
 8010cfe:	81a3      	strh	r3, [r4, #12]
 8010d00:	89a0      	ldrh	r0, [r4, #12]
 8010d02:	4305      	orrs	r5, r0
 8010d04:	81a5      	strh	r5, [r4, #12]
 8010d06:	e7cd      	b.n	8010ca4 <__smakebuf_r+0x18>
 8010d08:	0800f9b5 	.word	0x0800f9b5

08010d0c <__ascii_mbtowc>:
 8010d0c:	b082      	sub	sp, #8
 8010d0e:	b901      	cbnz	r1, 8010d12 <__ascii_mbtowc+0x6>
 8010d10:	a901      	add	r1, sp, #4
 8010d12:	b142      	cbz	r2, 8010d26 <__ascii_mbtowc+0x1a>
 8010d14:	b14b      	cbz	r3, 8010d2a <__ascii_mbtowc+0x1e>
 8010d16:	7813      	ldrb	r3, [r2, #0]
 8010d18:	600b      	str	r3, [r1, #0]
 8010d1a:	7812      	ldrb	r2, [r2, #0]
 8010d1c:	1e10      	subs	r0, r2, #0
 8010d1e:	bf18      	it	ne
 8010d20:	2001      	movne	r0, #1
 8010d22:	b002      	add	sp, #8
 8010d24:	4770      	bx	lr
 8010d26:	4610      	mov	r0, r2
 8010d28:	e7fb      	b.n	8010d22 <__ascii_mbtowc+0x16>
 8010d2a:	f06f 0001 	mvn.w	r0, #1
 8010d2e:	e7f8      	b.n	8010d22 <__ascii_mbtowc+0x16>

08010d30 <__malloc_lock>:
 8010d30:	4801      	ldr	r0, [pc, #4]	; (8010d38 <__malloc_lock+0x8>)
 8010d32:	f7fe bf16 	b.w	800fb62 <__retarget_lock_acquire_recursive>
 8010d36:	bf00      	nop
 8010d38:	20004744 	.word	0x20004744

08010d3c <__malloc_unlock>:
 8010d3c:	4801      	ldr	r0, [pc, #4]	; (8010d44 <__malloc_unlock+0x8>)
 8010d3e:	f7fe bf11 	b.w	800fb64 <__retarget_lock_release_recursive>
 8010d42:	bf00      	nop
 8010d44:	20004744 	.word	0x20004744

08010d48 <_read_r>:
 8010d48:	b538      	push	{r3, r4, r5, lr}
 8010d4a:	4d07      	ldr	r5, [pc, #28]	; (8010d68 <_read_r+0x20>)
 8010d4c:	4604      	mov	r4, r0
 8010d4e:	4608      	mov	r0, r1
 8010d50:	4611      	mov	r1, r2
 8010d52:	2200      	movs	r2, #0
 8010d54:	602a      	str	r2, [r5, #0]
 8010d56:	461a      	mov	r2, r3
 8010d58:	f7f1 f834 	bl	8001dc4 <_read>
 8010d5c:	1c43      	adds	r3, r0, #1
 8010d5e:	d102      	bne.n	8010d66 <_read_r+0x1e>
 8010d60:	682b      	ldr	r3, [r5, #0]
 8010d62:	b103      	cbz	r3, 8010d66 <_read_r+0x1e>
 8010d64:	6023      	str	r3, [r4, #0]
 8010d66:	bd38      	pop	{r3, r4, r5, pc}
 8010d68:	20004750 	.word	0x20004750

08010d6c <__ascii_wctomb>:
 8010d6c:	b149      	cbz	r1, 8010d82 <__ascii_wctomb+0x16>
 8010d6e:	2aff      	cmp	r2, #255	; 0xff
 8010d70:	bf85      	ittet	hi
 8010d72:	238a      	movhi	r3, #138	; 0x8a
 8010d74:	6003      	strhi	r3, [r0, #0]
 8010d76:	700a      	strbls	r2, [r1, #0]
 8010d78:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8010d7c:	bf98      	it	ls
 8010d7e:	2001      	movls	r0, #1
 8010d80:	4770      	bx	lr
 8010d82:	4608      	mov	r0, r1
 8010d84:	4770      	bx	lr

08010d86 <abort>:
 8010d86:	b508      	push	{r3, lr}
 8010d88:	2006      	movs	r0, #6
 8010d8a:	f000 f84d 	bl	8010e28 <raise>
 8010d8e:	2001      	movs	r0, #1
 8010d90:	f7f1 f80e 	bl	8001db0 <_exit>

08010d94 <_fstat_r>:
 8010d94:	b538      	push	{r3, r4, r5, lr}
 8010d96:	4d07      	ldr	r5, [pc, #28]	; (8010db4 <_fstat_r+0x20>)
 8010d98:	2300      	movs	r3, #0
 8010d9a:	4604      	mov	r4, r0
 8010d9c:	4608      	mov	r0, r1
 8010d9e:	4611      	mov	r1, r2
 8010da0:	602b      	str	r3, [r5, #0]
 8010da2:	f7f1 f854 	bl	8001e4e <_fstat>
 8010da6:	1c43      	adds	r3, r0, #1
 8010da8:	d102      	bne.n	8010db0 <_fstat_r+0x1c>
 8010daa:	682b      	ldr	r3, [r5, #0]
 8010dac:	b103      	cbz	r3, 8010db0 <_fstat_r+0x1c>
 8010dae:	6023      	str	r3, [r4, #0]
 8010db0:	bd38      	pop	{r3, r4, r5, pc}
 8010db2:	bf00      	nop
 8010db4:	20004750 	.word	0x20004750

08010db8 <_isatty_r>:
 8010db8:	b538      	push	{r3, r4, r5, lr}
 8010dba:	4d06      	ldr	r5, [pc, #24]	; (8010dd4 <_isatty_r+0x1c>)
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	4604      	mov	r4, r0
 8010dc0:	4608      	mov	r0, r1
 8010dc2:	602b      	str	r3, [r5, #0]
 8010dc4:	f7f1 f853 	bl	8001e6e <_isatty>
 8010dc8:	1c43      	adds	r3, r0, #1
 8010dca:	d102      	bne.n	8010dd2 <_isatty_r+0x1a>
 8010dcc:	682b      	ldr	r3, [r5, #0]
 8010dce:	b103      	cbz	r3, 8010dd2 <_isatty_r+0x1a>
 8010dd0:	6023      	str	r3, [r4, #0]
 8010dd2:	bd38      	pop	{r3, r4, r5, pc}
 8010dd4:	20004750 	.word	0x20004750

08010dd8 <_raise_r>:
 8010dd8:	291f      	cmp	r1, #31
 8010dda:	b538      	push	{r3, r4, r5, lr}
 8010ddc:	4604      	mov	r4, r0
 8010dde:	460d      	mov	r5, r1
 8010de0:	d904      	bls.n	8010dec <_raise_r+0x14>
 8010de2:	2316      	movs	r3, #22
 8010de4:	6003      	str	r3, [r0, #0]
 8010de6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010dea:	bd38      	pop	{r3, r4, r5, pc}
 8010dec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010dee:	b112      	cbz	r2, 8010df6 <_raise_r+0x1e>
 8010df0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010df4:	b94b      	cbnz	r3, 8010e0a <_raise_r+0x32>
 8010df6:	4620      	mov	r0, r4
 8010df8:	f000 f830 	bl	8010e5c <_getpid_r>
 8010dfc:	462a      	mov	r2, r5
 8010dfe:	4601      	mov	r1, r0
 8010e00:	4620      	mov	r0, r4
 8010e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e06:	f000 b817 	b.w	8010e38 <_kill_r>
 8010e0a:	2b01      	cmp	r3, #1
 8010e0c:	d00a      	beq.n	8010e24 <_raise_r+0x4c>
 8010e0e:	1c59      	adds	r1, r3, #1
 8010e10:	d103      	bne.n	8010e1a <_raise_r+0x42>
 8010e12:	2316      	movs	r3, #22
 8010e14:	6003      	str	r3, [r0, #0]
 8010e16:	2001      	movs	r0, #1
 8010e18:	e7e7      	b.n	8010dea <_raise_r+0x12>
 8010e1a:	2400      	movs	r4, #0
 8010e1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010e20:	4628      	mov	r0, r5
 8010e22:	4798      	blx	r3
 8010e24:	2000      	movs	r0, #0
 8010e26:	e7e0      	b.n	8010dea <_raise_r+0x12>

08010e28 <raise>:
 8010e28:	4b02      	ldr	r3, [pc, #8]	; (8010e34 <raise+0xc>)
 8010e2a:	4601      	mov	r1, r0
 8010e2c:	6818      	ldr	r0, [r3, #0]
 8010e2e:	f7ff bfd3 	b.w	8010dd8 <_raise_r>
 8010e32:	bf00      	nop
 8010e34:	20002858 	.word	0x20002858

08010e38 <_kill_r>:
 8010e38:	b538      	push	{r3, r4, r5, lr}
 8010e3a:	4d07      	ldr	r5, [pc, #28]	; (8010e58 <_kill_r+0x20>)
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	4604      	mov	r4, r0
 8010e40:	4608      	mov	r0, r1
 8010e42:	4611      	mov	r1, r2
 8010e44:	602b      	str	r3, [r5, #0]
 8010e46:	f7f0 ffa3 	bl	8001d90 <_kill>
 8010e4a:	1c43      	adds	r3, r0, #1
 8010e4c:	d102      	bne.n	8010e54 <_kill_r+0x1c>
 8010e4e:	682b      	ldr	r3, [r5, #0]
 8010e50:	b103      	cbz	r3, 8010e54 <_kill_r+0x1c>
 8010e52:	6023      	str	r3, [r4, #0]
 8010e54:	bd38      	pop	{r3, r4, r5, pc}
 8010e56:	bf00      	nop
 8010e58:	20004750 	.word	0x20004750

08010e5c <_getpid_r>:
 8010e5c:	f7f0 bf90 	b.w	8001d80 <_getpid>

08010e60 <_init>:
 8010e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e62:	bf00      	nop
 8010e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e66:	bc08      	pop	{r3}
 8010e68:	469e      	mov	lr, r3
 8010e6a:	4770      	bx	lr

08010e6c <_fini>:
 8010e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e6e:	bf00      	nop
 8010e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010e72:	bc08      	pop	{r3}
 8010e74:	469e      	mov	lr, r3
 8010e76:	4770      	bx	lr
