
radar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001082c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08010a10  08010a10  00020a10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010ed4  08010ed4  00032a28  2**0
                  CONTENTS
  4 .ARM          00000000  08010ed4  08010ed4  00032a28  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010ed4  08010ed4  00032a28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010ed4  08010ed4  00020ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010ed8  08010ed8  00020ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002a28  20000000  08010edc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000224c  20002a28  08013904  00032a28  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c74  08013904  00034c74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00032a28  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002950c  00000000  00000000  00032a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004866  00000000  00000000  0005bf64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002400  00000000  00000000  000607d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021f8  00000000  00000000  00062bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027b0a  00000000  00000000  00064dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023fe2  00000000  00000000  0008c8d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9f4c  00000000  00000000  000b08b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001aa800  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000abd8  00000000  00000000  001aa850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20002a28 	.word	0x20002a28
 80001fc:	00000000 	.word	0x00000000
 8000200:	080109f4 	.word	0x080109f4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20002a2c 	.word	0x20002a2c
 800021c:	080109f4 	.word	0x080109f4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <lsm6dsl_read_reg>:
  *
  */
int32_t __weak lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b087      	sub	sp, #28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	607a      	str	r2, [r7, #4]
 8000c02:	461a      	mov	r2, r3
 8000c04:	460b      	mov	r3, r1
 8000c06:	72fb      	strb	r3, [r7, #11]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	685c      	ldr	r4, [r3, #4]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	68d8      	ldr	r0, [r3, #12]
 8000c14:	893b      	ldrh	r3, [r7, #8]
 8000c16:	7af9      	ldrb	r1, [r7, #11]
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	47a0      	blx	r4
 8000c1c:	6178      	str	r0, [r7, #20]

  return ret;
 8000c1e:	697b      	ldr	r3, [r7, #20]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	371c      	adds	r7, #28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd90      	pop	{r4, r7, pc}

08000c28 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8000c32:	2301      	movs	r3, #1
 8000c34:	683a      	ldr	r2, [r7, #0]
 8000c36:	210f      	movs	r1, #15
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f7ff ffdd 	bl	8000bf8 <lsm6dsl_read_reg>
 8000c3e:	60f8      	str	r0, [r7, #12]

  return ret;
 8000c40:	68fb      	ldr	r3, [r7, #12]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c4c:	b5b0      	push	{r4, r5, r7, lr}
 8000c4e:	b08e      	sub	sp, #56	; 0x38
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
input_received_flag = 0;
 8000c52:	4b39      	ldr	r3, [pc, #228]	; (8000d38 <main+0xec>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
uint8_t message2[] ="message in";
 8000c58:	4a38      	ldr	r2, [pc, #224]	; (8000d3c <main+0xf0>)
 8000c5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c60:	c303      	stmia	r3!, {r0, r1}
 8000c62:	801a      	strh	r2, [r3, #0]
 8000c64:	3302      	adds	r3, #2
 8000c66:	0c12      	lsrs	r2, r2, #16
 8000c68:	701a      	strb	r2, [r3, #0]
uint8_t lsm6dslError[] ="LSM6DSL whoAmI error";
 8000c6a:	4b35      	ldr	r3, [pc, #212]	; (8000d40 <main+0xf4>)
 8000c6c:	f107 0414 	add.w	r4, r7, #20
 8000c70:	461d      	mov	r5, r3
 8000c72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c76:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c7a:	6020      	str	r0, [r4, #0]
 8000c7c:	3404      	adds	r4, #4
 8000c7e:	7021      	strb	r1, [r4, #0]


// initialize command struct
control user_input;
user_input.mode_instructed = 'r'; // r:range, s:speed
 8000c80:	2372      	movs	r3, #114	; 0x72
 8000c82:	74bb      	strb	r3, [r7, #18]
user_input.mode_running = 'x'; // x:none
 8000c84:	2378      	movs	r3, #120	; 0x78
 8000c86:	74fb      	strb	r3, [r7, #19]
user_input.run_time_sec=0; // length of time in seconds to operate
 8000c88:	2300      	movs	r3, #0
 8000c8a:	823b      	strh	r3, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c8c:	f001 f853 	bl	8001d36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c90:	f000 f868 	bl	8000d64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c94:	f000 fade 	bl	8001254 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c98:	f000 faaa 	bl	80011f0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c9c:	f000 f8ae 	bl	8000dfc <MX_ADC1_Init>
  MX_DAC1_Init();
 8000ca0:	f000 f930 	bl	8000f04 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000ca4:	f000 fa56 	bl	8001154 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000ca8:	f000 f966 	bl	8000f78 <MX_SPI1_Init>
  MX_USB_Device_Init();
 8000cac:	f00c fbbc 	bl	800d428 <MX_USB_Device_Init>
  MX_TIM1_Init();
 8000cb0:	f000 f9a0 	bl	8000ff4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  set_VCO_input_DAC(&user_input); // starts timer and sets dac output used for VCO
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f000 fcc1 	bl	8001640 <set_VCO_input_DAC>
  HAL_TIM_Base_Start(&htim1); // start timer 1 for adc1 conversion for radar mixer o/p
 8000cbe:	4821      	ldr	r0, [pc, #132]	; (8000d44 <main+0xf8>)
 8000cc0:	f007 fb12 	bl	80082e8 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_3); // sets output compare for timer1, sets PA10 to toggle on timer1 register reload (40kHz)
 8000cc4:	2108      	movs	r1, #8
 8000cc6:	481f      	ldr	r0, [pc, #124]	; (8000d44 <main+0xf8>)
 8000cc8:	f007 fc06 	bl	80084d8 <HAL_TIM_OC_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_dma_buf_mixer_out, DMA_BUF_LEN); // start the adc with dma
 8000ccc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cd0:	491d      	ldr	r1, [pc, #116]	; (8000d48 <main+0xfc>)
 8000cd2:	481e      	ldr	r0, [pc, #120]	; (8000d4c <main+0x100>)
 8000cd4:	f001 fca6 	bl	8002624 <HAL_ADC_Start_DMA>

  /* initialize accelerometer/gyroscope on lsm6dsl */
  stmdev_ctx_t dev_ctx;
  dev_ctx.write_reg = platform_write;
 8000cd8:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <main+0x104>)
 8000cda:	603b      	str	r3, [r7, #0]
  dev_ctx.read_reg = platform_read;
 8000cdc:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <main+0x108>)
 8000cde:	607b      	str	r3, [r7, #4]
  dev_ctx.handle = &hspi1;
 8000ce0:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <main+0x10c>)
 8000ce2:	60fb      	str	r3, [r7, #12]
  /* Check device ID */
    whoamI = 0;
 8000ce4:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <main+0x110>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
    lsm6dsl_device_id_get(&dev_ctx, &whoamI);
 8000cea:	463b      	mov	r3, r7
 8000cec:	491b      	ldr	r1, [pc, #108]	; (8000d5c <main+0x110>)
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ff9a 	bl	8000c28 <lsm6dsl_device_id_get>

    if ( whoamI != LSM6DSL_ID ) {
 8000cf4:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <main+0x110>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b6a      	cmp	r3, #106	; 0x6a
 8000cfa:	d005      	beq.n	8000d08 <main+0xbc>
    	CDC_Transmit_FS(lsm6dslError,sizeof(lsm6dslError));
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2115      	movs	r1, #21
 8000d02:	4618      	mov	r0, r3
 8000d04:	f00c fc68 	bl	800d5d8 <CDC_Transmit_FS>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (input_received_flag)
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <main+0xec>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d00e      	beq.n	8000d2e <main+0xe2>
	  {
	 	    	process_input(&UserRxBufferFS,&user_input);
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	4619      	mov	r1, r3
 8000d16:	4812      	ldr	r0, [pc, #72]	; (8000d60 <main+0x114>)
 8000d18:	f000 fbfc 	bl	8001514 <process_input>
	 	    	set_VCO_input_DAC(&user_input);
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 fc8d 	bl	8001640 <set_VCO_input_DAC>
	 	    	//perform_trial(&user_input);
	 	        input_received_flag=0;
 8000d26:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <main+0xec>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
 8000d2c:	e7ec      	b.n	8000d08 <main+0xbc>
	  }
	  else
	  {
	 	    	HAL_Delay(250);
 8000d2e:	20fa      	movs	r0, #250	; 0xfa
 8000d30:	f001 f872 	bl	8001e18 <HAL_Delay>
	  if (input_received_flag)
 8000d34:	e7e8      	b.n	8000d08 <main+0xbc>
 8000d36:	bf00      	nop
 8000d38:	2000454c 	.word	0x2000454c
 8000d3c:	08010a10 	.word	0x08010a10
 8000d40:	08010a1c 	.word	0x08010a1c
 8000d44:	20002be8 	.word	0x20002be8
 8000d48:	20002c80 	.word	0x20002c80
 8000d4c:	20002a44 	.word	0x20002a44
 8000d50:	0800139d 	.word	0x0800139d
 8000d54:	080013f9 	.word	0x080013f9
 8000d58:	20002b84 	.word	0x20002b84
 8000d5c:	20002e80 	.word	0x20002e80
 8000d60:	2000354c 	.word	0x2000354c

08000d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b094      	sub	sp, #80	; 0x50
 8000d68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6a:	f107 0318 	add.w	r3, r7, #24
 8000d6e:	2238      	movs	r2, #56	; 0x38
 8000d70:	2100      	movs	r1, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f00d f8b6 	bl	800dee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000d86:	2000      	movs	r0, #0
 8000d88:	f005 fae4 	bl	8006354 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000d8c:	2321      	movs	r3, #33	; 0x21
 8000d8e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d94:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000d96:	2301      	movs	r3, #1
 8000d98:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000da2:	2302      	movs	r3, #2
 8000da4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8000da6:	232a      	movs	r3, #42	; 0x2a
 8000da8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV12;
 8000daa:	230c      	movs	r3, #12
 8000dac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000dae:	2306      	movs	r3, #6
 8000db0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000db2:	2302      	movs	r3, #2
 8000db4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db6:	f107 0318 	add.w	r3, r7, #24
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f005 fb6e 	bl	800649c <HAL_RCC_OscConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000dc6:	f000 fc87 	bl	80016d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dca:	230f      	movs	r3, #15
 8000dcc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	2104      	movs	r1, #4
 8000de4:	4618      	mov	r0, r3
 8000de6:	f005 fe71 	bl	8006acc <HAL_RCC_ClockConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000df0:	f000 fc72 	bl	80016d8 <Error_Handler>
  }
}
 8000df4:	bf00      	nop
 8000df6:	3750      	adds	r7, #80	; 0x50
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08c      	sub	sp, #48	; 0x30
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	2220      	movs	r2, #32
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f00d f865 	bl	800dee4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e1a:	4b38      	ldr	r3, [pc, #224]	; (8000efc <MX_ADC1_Init+0x100>)
 8000e1c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e22:	4b36      	ldr	r3, [pc, #216]	; (8000efc <MX_ADC1_Init+0x100>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e28:	4b34      	ldr	r3, [pc, #208]	; (8000efc <MX_ADC1_Init+0x100>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e2e:	4b33      	ldr	r3, [pc, #204]	; (8000efc <MX_ADC1_Init+0x100>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e34:	4b31      	ldr	r3, [pc, #196]	; (8000efc <MX_ADC1_Init+0x100>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e3a:	4b30      	ldr	r3, [pc, #192]	; (8000efc <MX_ADC1_Init+0x100>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e40:	4b2e      	ldr	r3, [pc, #184]	; (8000efc <MX_ADC1_Init+0x100>)
 8000e42:	2204      	movs	r2, #4
 8000e44:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e46:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <MX_ADC1_Init+0x100>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e4c:	4b2b      	ldr	r3, [pc, #172]	; (8000efc <MX_ADC1_Init+0x100>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000e52:	4b2a      	ldr	r3, [pc, #168]	; (8000efc <MX_ADC1_Init+0x100>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e58:	4b28      	ldr	r3, [pc, #160]	; (8000efc <MX_ADC1_Init+0x100>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000e60:	4b26      	ldr	r3, [pc, #152]	; (8000efc <MX_ADC1_Init+0x100>)
 8000e62:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000e66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8000e68:	4b24      	ldr	r3, [pc, #144]	; (8000efc <MX_ADC1_Init+0x100>)
 8000e6a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000e6e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e70:	4b22      	ldr	r3, [pc, #136]	; (8000efc <MX_ADC1_Init+0x100>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e78:	4b20      	ldr	r3, [pc, #128]	; (8000efc <MX_ADC1_Init+0x100>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8000e7e:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <MX_ADC1_Init+0x100>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000e86:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <MX_ADC1_Init+0x100>)
 8000e88:	220c      	movs	r2, #12
 8000e8a:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_NONE;
 8000e8c:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <MX_ADC1_Init+0x100>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000e92:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <MX_ADC1_Init+0x100>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000e98:	4b18      	ldr	r3, [pc, #96]	; (8000efc <MX_ADC1_Init+0x100>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e9e:	4817      	ldr	r0, [pc, #92]	; (8000efc <MX_ADC1_Init+0x100>)
 8000ea0:	f001 f9fe 	bl	80022a0 <HAL_ADC_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000eaa:	f000 fc15 	bl	80016d8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4810      	ldr	r0, [pc, #64]	; (8000efc <MX_ADC1_Init+0x100>)
 8000eba:	f002 f9ed 	bl	8003298 <HAL_ADCEx_MultiModeConfigChannel>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000ec4:	f000 fc08 	bl	80016d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ec8:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <MX_ADC1_Init+0x104>)
 8000eca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ecc:	2306      	movs	r3, #6
 8000ece:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ed4:	237f      	movs	r3, #127	; 0x7f
 8000ed6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ed8:	2304      	movs	r3, #4
 8000eda:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_ADC1_Init+0x100>)
 8000ee6:	f001 fc7b 	bl	80027e0 <HAL_ADC_ConfigChannel>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8000ef0:	f000 fbf2 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	3730      	adds	r7, #48	; 0x30
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20002a44 	.word	0x20002a44
 8000f00:	04300002 	.word	0x04300002

08000f04 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08c      	sub	sp, #48	; 0x30
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	2230      	movs	r2, #48	; 0x30
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f00c ffe7 	bl	800dee4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000f16:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <MX_DAC1_Init+0x6c>)
 8000f18:	4a16      	ldr	r2, [pc, #88]	; (8000f74 <MX_DAC1_Init+0x70>)
 8000f1a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000f1c:	4814      	ldr	r0, [pc, #80]	; (8000f70 <MX_DAC1_Init+0x6c>)
 8000f1e:	f002 fbd2 	bl	80036c6 <HAL_DAC_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000f28:	f000 fbd6 	bl	80016d8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000f3c:	2312      	movs	r3, #18
 8000f3e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f50:	463b      	mov	r3, r7
 8000f52:	2200      	movs	r2, #0
 8000f54:	4619      	mov	r1, r3
 8000f56:	4806      	ldr	r0, [pc, #24]	; (8000f70 <MX_DAC1_Init+0x6c>)
 8000f58:	f002 fda8 	bl	8003aac <HAL_DAC_ConfigChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000f62:	f000 fbb9 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000f66:	bf00      	nop
 8000f68:	3730      	adds	r7, #48	; 0x30
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20002b10 	.word	0x20002b10
 8000f74:	50000800 	.word	0x50000800

08000f78 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <MX_SPI1_Init+0x74>)
 8000f7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ff0 <MX_SPI1_Init+0x78>)
 8000f80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f82:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <MX_SPI1_Init+0x74>)
 8000f84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <MX_SPI1_Init+0x74>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f90:	4b16      	ldr	r3, [pc, #88]	; (8000fec <MX_SPI1_Init+0x74>)
 8000f92:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f96:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <MX_SPI1_Init+0x74>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f9e:	4b13      	ldr	r3, [pc, #76]	; (8000fec <MX_SPI1_Init+0x74>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_SPI1_Init+0x74>)
 8000fa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000faa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_SPI1_Init+0x74>)
 8000fae:	2220      	movs	r2, #32
 8000fb0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_SPI1_Init+0x74>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_SPI1_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <MX_SPI1_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_SPI1_Init+0x74>)
 8000fc6:	2207      	movs	r2, #7
 8000fc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <MX_SPI1_Init+0x74>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_SPI1_Init+0x74>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_SPI1_Init+0x74>)
 8000fd8:	f006 f9b2 	bl	8007340 <HAL_SPI_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000fe2:	f000 fb79 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20002b84 	.word	0x20002b84
 8000ff0:	40013000 	.word	0x40013000

08000ff4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b09c      	sub	sp, #112	; 0x70
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001008:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001014:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
 8001024:	615a      	str	r2, [r3, #20]
 8001026:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	2234      	movs	r2, #52	; 0x34
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f00c ff58 	bl	800dee4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001034:	4b45      	ldr	r3, [pc, #276]	; (800114c <MX_TIM1_Init+0x158>)
 8001036:	4a46      	ldr	r2, [pc, #280]	; (8001150 <MX_TIM1_Init+0x15c>)
 8001038:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800103a:	4b44      	ldr	r3, [pc, #272]	; (800114c <MX_TIM1_Init+0x158>)
 800103c:	2200      	movs	r2, #0
 800103e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001040:	4b42      	ldr	r3, [pc, #264]	; (800114c <MX_TIM1_Init+0x158>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1099;
 8001046:	4b41      	ldr	r3, [pc, #260]	; (800114c <MX_TIM1_Init+0x158>)
 8001048:	f240 424b 	movw	r2, #1099	; 0x44b
 800104c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104e:	4b3f      	ldr	r3, [pc, #252]	; (800114c <MX_TIM1_Init+0x158>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001054:	4b3d      	ldr	r3, [pc, #244]	; (800114c <MX_TIM1_Init+0x158>)
 8001056:	2200      	movs	r2, #0
 8001058:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800105a:	4b3c      	ldr	r3, [pc, #240]	; (800114c <MX_TIM1_Init+0x158>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001060:	483a      	ldr	r0, [pc, #232]	; (800114c <MX_TIM1_Init+0x158>)
 8001062:	f007 f8e9 	bl	8008238 <HAL_TIM_Base_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800106c:	f000 fb34 	bl	80016d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001074:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001076:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800107a:	4619      	mov	r1, r3
 800107c:	4833      	ldr	r0, [pc, #204]	; (800114c <MX_TIM1_Init+0x158>)
 800107e:	f007 fbb7 	bl	80087f0 <HAL_TIM_ConfigClockSource>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001088:	f000 fb26 	bl	80016d8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800108c:	482f      	ldr	r0, [pc, #188]	; (800114c <MX_TIM1_Init+0x158>)
 800108e:	f007 f9c2 	bl	8008416 <HAL_TIM_OC_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001098:	f000 fb1e 	bl	80016d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800109c:	2320      	movs	r3, #32
 800109e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010a0:	2300      	movs	r3, #0
 80010a2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010ac:	4619      	mov	r1, r3
 80010ae:	4827      	ldr	r0, [pc, #156]	; (800114c <MX_TIM1_Init+0x158>)
 80010b0:	f008 f93e 	bl	8009330 <HAL_TIMEx_MasterConfigSynchronization>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80010ba:	f000 fb0d 	bl	80016d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80010be:	2330      	movs	r3, #48	; 0x30
 80010c0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010c6:	2300      	movs	r3, #0
 80010c8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010ca:	2300      	movs	r3, #0
 80010cc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010d2:	2300      	movs	r3, #0
 80010d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010d6:	2300      	movs	r3, #0
 80010d8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010de:	2208      	movs	r2, #8
 80010e0:	4619      	mov	r1, r3
 80010e2:	481a      	ldr	r0, [pc, #104]	; (800114c <MX_TIM1_Init+0x158>)
 80010e4:	f007 fb0a 	bl	80086fc <HAL_TIM_OC_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80010ee:	f000 faf3 	bl	80016d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001106:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800110a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001114:	2300      	movs	r3, #0
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001118:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001122:	2300      	movs	r3, #0
 8001124:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001126:	2300      	movs	r3, #0
 8001128:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	4619      	mov	r1, r3
 800112e:	4807      	ldr	r0, [pc, #28]	; (800114c <MX_TIM1_Init+0x158>)
 8001130:	f008 f994 	bl	800945c <HAL_TIMEx_ConfigBreakDeadTime>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800113a:	f000 facd 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800113e:	4803      	ldr	r0, [pc, #12]	; (800114c <MX_TIM1_Init+0x158>)
 8001140:	f000 fc60 	bl	8001a04 <HAL_TIM_MspPostInit>

}
 8001144:	bf00      	nop
 8001146:	3770      	adds	r7, #112	; 0x70
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20002be8 	.word	0x20002be8
 8001150:	40012c00 	.word	0x40012c00

08001154 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115a:	f107 0310 	add.w	r3, r7, #16
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001172:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <MX_TIM2_Init+0x98>)
 8001174:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001178:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800117a:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <MX_TIM2_Init+0x98>)
 800117c:	2200      	movs	r2, #0
 800117e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001180:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <MX_TIM2_Init+0x98>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2704;
 8001186:	4b19      	ldr	r3, [pc, #100]	; (80011ec <MX_TIM2_Init+0x98>)
 8001188:	f44f 6229 	mov.w	r2, #2704	; 0xa90
 800118c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118e:	4b17      	ldr	r3, [pc, #92]	; (80011ec <MX_TIM2_Init+0x98>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001194:	4b15      	ldr	r3, [pc, #84]	; (80011ec <MX_TIM2_Init+0x98>)
 8001196:	2200      	movs	r2, #0
 8001198:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800119a:	4814      	ldr	r0, [pc, #80]	; (80011ec <MX_TIM2_Init+0x98>)
 800119c:	f007 f84c 	bl	8008238 <HAL_TIM_Base_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80011a6:	f000 fa97 	bl	80016d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011b0:	f107 0310 	add.w	r3, r7, #16
 80011b4:	4619      	mov	r1, r3
 80011b6:	480d      	ldr	r0, [pc, #52]	; (80011ec <MX_TIM2_Init+0x98>)
 80011b8:	f007 fb1a 	bl	80087f0 <HAL_TIM_ConfigClockSource>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80011c2:	f000 fa89 	bl	80016d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011c6:	2320      	movs	r3, #32
 80011c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	4619      	mov	r1, r3
 80011d2:	4806      	ldr	r0, [pc, #24]	; (80011ec <MX_TIM2_Init+0x98>)
 80011d4:	f008 f8ac 	bl	8009330 <HAL_TIMEx_MasterConfigSynchronization>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80011de:	f000 fa7b 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	3720      	adds	r7, #32
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20002c34 	.word	0x20002c34

080011f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <MX_DMA_Init+0x60>)
 80011f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011fa:	4a15      	ldr	r2, [pc, #84]	; (8001250 <MX_DMA_Init+0x60>)
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	6493      	str	r3, [r2, #72]	; 0x48
 8001202:	4b13      	ldr	r3, [pc, #76]	; (8001250 <MX_DMA_Init+0x60>)
 8001204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <MX_DMA_Init+0x60>)
 8001210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001212:	4a0f      	ldr	r2, [pc, #60]	; (8001250 <MX_DMA_Init+0x60>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6493      	str	r3, [r2, #72]	; 0x48
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <MX_DMA_Init+0x60>)
 800121c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	200b      	movs	r0, #11
 800122c:	f002 fa17 	bl	800365e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001230:	200b      	movs	r0, #11
 8001232:	f002 fa2e 	bl	8003692 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	200c      	movs	r0, #12
 800123c:	f002 fa0f 	bl	800365e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001240:	200c      	movs	r0, #12
 8001242:	f002 fa26 	bl	8003692 <HAL_NVIC_EnableIRQ>

}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40021000 	.word	0x40021000

08001254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800126a:	4b4a      	ldr	r3, [pc, #296]	; (8001394 <MX_GPIO_Init+0x140>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	4a49      	ldr	r2, [pc, #292]	; (8001394 <MX_GPIO_Init+0x140>)
 8001270:	f043 0320 	orr.w	r3, r3, #32
 8001274:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001276:	4b47      	ldr	r3, [pc, #284]	; (8001394 <MX_GPIO_Init+0x140>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	f003 0320 	and.w	r3, r3, #32
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001282:	4b44      	ldr	r3, [pc, #272]	; (8001394 <MX_GPIO_Init+0x140>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	4a43      	ldr	r2, [pc, #268]	; (8001394 <MX_GPIO_Init+0x140>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128e:	4b41      	ldr	r3, [pc, #260]	; (8001394 <MX_GPIO_Init+0x140>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	4b3e      	ldr	r3, [pc, #248]	; (8001394 <MX_GPIO_Init+0x140>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	4a3d      	ldr	r2, [pc, #244]	; (8001394 <MX_GPIO_Init+0x140>)
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a6:	4b3b      	ldr	r3, [pc, #236]	; (8001394 <MX_GPIO_Init+0x140>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80012b2:	2201      	movs	r2, #1
 80012b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012b8:	4837      	ldr	r0, [pc, #220]	; (8001398 <MX_GPIO_Init+0x144>)
 80012ba:	f003 fadd 	bl	8004878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c8:	f003 fad6 	bl	8004878 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012cc:	2303      	movs	r3, #3
 80012ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012d0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012da:	f107 030c 	add.w	r3, r7, #12
 80012de:	4619      	mov	r1, r3
 80012e0:	482d      	ldr	r0, [pc, #180]	; (8001398 <MX_GPIO_Init+0x144>)
 80012e2:	f003 f947 	bl	8004574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ec:	2301      	movs	r3, #1
 80012ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	4619      	mov	r1, r3
 80012fe:	4826      	ldr	r0, [pc, #152]	; (8001398 <MX_GPIO_Init+0x144>)
 8001300:	f003 f938 	bl	8004574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001304:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001308:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800130a:	2312      	movs	r3, #18
 800130c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	2300      	movs	r3, #0
 8001314:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8001316:	2302      	movs	r3, #2
 8001318:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	f107 030c 	add.w	r3, r7, #12
 800131e:	4619      	mov	r1, r3
 8001320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001324:	f003 f926 	bl	8004574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001328:	f44f 7300 	mov.w	r3, #512	; 0x200
 800132c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800132e:	2312      	movs	r3, #18
 8001330:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800133a:	2304      	movs	r3, #4
 800133c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 030c 	add.w	r3, r7, #12
 8001342:	4619      	mov	r1, r3
 8001344:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001348:	f003 f914 	bl	8004574 <HAL_GPIO_Init>

  /*Configure GPIO pin : LSM6DSL_ncs_Pin */
  GPIO_InitStruct.Pin = LSM6DSL_ncs_Pin;
 800134c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001350:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LSM6DSL_ncs_GPIO_Port, &GPIO_InitStruct);
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	4619      	mov	r1, r3
 8001364:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001368:	f003 f904 	bl	8004574 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800136c:	2200      	movs	r2, #0
 800136e:	2100      	movs	r1, #0
 8001370:	2006      	movs	r0, #6
 8001372:	f002 f974 	bl	800365e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001376:	2006      	movs	r0, #6
 8001378:	f002 f98b 	bl	8003692 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2100      	movs	r1, #0
 8001380:	2007      	movs	r0, #7
 8001382:	f002 f96c 	bl	800365e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001386:	2007      	movs	r0, #7
 8001388:	f002 f983 	bl	8003692 <HAL_NVIC_EnableIRQ>

}
 800138c:	bf00      	nop
 800138e:	3720      	adds	r7, #32
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40021000 	.word	0x40021000
 8001398:	48000400 	.word	0x48000400

0800139c <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	461a      	mov	r2, r3
 80013a8:	460b      	mov	r3, r1
 80013aa:	72fb      	strb	r3, [r7, #11]
 80013ac:	4613      	mov	r3, r2
 80013ae:	813b      	strh	r3, [r7, #8]
  HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_RESET);
 80013b0:	2200      	movs	r2, #0
 80013b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ba:	f003 fa5d 	bl	8004878 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &reg, 1, 2);
 80013be:	f107 010b 	add.w	r1, r7, #11
 80013c2:	2302      	movs	r3, #2
 80013c4:	2201      	movs	r2, #1
 80013c6:	480b      	ldr	r0, [pc, #44]	; (80013f4 <platform_write+0x58>)
 80013c8:	f006 f865 	bl	8007496 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, (uint8_t*) bufp, len, 1000);
 80013cc:	893a      	ldrh	r2, [r7, #8]
 80013ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	4807      	ldr	r0, [pc, #28]	; (80013f4 <platform_write+0x58>)
 80013d6:	f006 f85e 	bl	8007496 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_SET);
 80013da:	2201      	movs	r2, #1
 80013dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e4:	f003 fa48 	bl	8004878 <HAL_GPIO_WritePin>
  return 0;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20002b84 	.word	0x20002b84

080013f8 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	461a      	mov	r2, r3
 8001404:	460b      	mov	r3, r1
 8001406:	72fb      	strb	r3, [r7, #11]
 8001408:	4613      	mov	r3, r2
 800140a:	813b      	strh	r3, [r7, #8]
	uint8_t tx_data[2];
	tx_data[0] = 0x80 | reg;
 800140c:	7afb      	ldrb	r3, [r7, #11]
 800140e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001412:	b2db      	uxtb	r3, r3
 8001414:	753b      	strb	r3, [r7, #20]
	tx_data[1] = 0x00;
 8001416:	2300      	movs	r3, #0
 8001418:	757b      	strb	r3, [r7, #21]
	// get spi state
	HAL_SPI_StateTypeDef tmp_state;
	tmp_state = HAL_SPI_GetState(handle);
 800141a:	68f8      	ldr	r0, [r7, #12]
 800141c:	f006 fc54 	bl	8007cc8 <HAL_SPI_GetState>
 8001420:	4603      	mov	r3, r0
 8001422:	75fb      	strb	r3, [r7, #23]

	// Start the SPI transfer
	HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_RESET);
 8001424:	2200      	movs	r2, #0
 8001426:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800142a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800142e:	f003 fa23 	bl	8004878 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(handle, &tx_data, bufp, len + 1);
 8001432:	893b      	ldrh	r3, [r7, #8]
 8001434:	3301      	adds	r3, #1
 8001436:	b29b      	uxth	r3, r3
 8001438:	f107 0114 	add.w	r1, r7, #20
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f006 f998 	bl	8007774 <HAL_SPI_TransmitReceive_DMA>
//	  {
//	    /* Transfer error in transmission process */
//	    Error_Handler();
//	  }
	// Wait for the transfer to complete
    while(HAL_SPI_GetState(handle) != tmp_state);
 8001444:	bf00      	nop
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f006 fc3e 	bl	8007cc8 <HAL_SPI_GetState>
 800144c:	4603      	mov	r3, r0
 800144e:	461a      	mov	r2, r3
 8001450:	7dfb      	ldrb	r3, [r7, #23]
 8001452:	4293      	cmp	r3, r2
 8001454:	d1f7      	bne.n	8001446 <platform_read+0x4e>

	HAL_GPIO_WritePin(LSM6DSL_ncs_GPIO_Port, LSM6DSL_ncs_Pin, GPIO_PIN_SET);
 8001456:	2201      	movs	r2, #1
 8001458:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800145c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001460:	f003 fa0a 	bl	8004878 <HAL_GPIO_WritePin>
  return 0;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  spi_complete_flag = 1;
 8001478:	4b04      	ldr	r3, [pc, #16]	; (800148c <HAL_SPI_RxCpltCallback+0x1c>)
 800147a:	2201      	movs	r2, #1
 800147c:	701a      	strb	r2, [r3, #0]
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	2000326c 	.word	0x2000326c

08001490 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  spi_complete_flag = 1;
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <HAL_SPI_TxRxCpltCallback+0x1c>)
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	2000326c 	.word	0x2000326c

080014b0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	memcpy(tx_buffer,adc1_dma_buf_mixer_out[DMA_BUF_LEN/2-1],DMA_BUF_LEN/2);
 80014b8:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <HAL_ADC_ConvCpltCallback+0x28>)
 80014ba:	f8b3 30fe 	ldrh.w	r3, [r3, #254]	; 0xfe
 80014be:	2280      	movs	r2, #128	; 0x80
 80014c0:	4619      	mov	r1, r3
 80014c2:	4806      	ldr	r0, [pc, #24]	; (80014dc <HAL_ADC_ConvCpltCallback+0x2c>)
 80014c4:	f00c fd00 	bl	800dec8 <memcpy>
	CDC_Transmit_FS(tx_buffer, DMA_BUF_LEN/2);
 80014c8:	2180      	movs	r1, #128	; 0x80
 80014ca:	4804      	ldr	r0, [pc, #16]	; (80014dc <HAL_ADC_ConvCpltCallback+0x2c>)
 80014cc:	f00c f884 	bl	800d5d8 <CDC_Transmit_FS>
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20002c80 	.word	0x20002c80
 80014dc:	20002e84 	.word	0x20002e84

080014e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	uint8_t len = DMA_BUF_LEN/2;
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	73fb      	strb	r3, [r7, #15]
//	uint8_t m1 = 'sending first half';
//	uint8_t m2 = 'first half sent';
	memcpy(tx_buffer,adc1_dma_buf_mixer_out,len);
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	461a      	mov	r2, r3
 80014f0:	4906      	ldr	r1, [pc, #24]	; (800150c <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 80014f2:	4807      	ldr	r0, [pc, #28]	; (8001510 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 80014f4:	f00c fce8 	bl	800dec8 <memcpy>
//	CDC_Transmit_FS(m1,sizeof(m1));
	CDC_Transmit_FS(tx_buffer,len);
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	4619      	mov	r1, r3
 80014fe:	4804      	ldr	r0, [pc, #16]	; (8001510 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8001500:	f00c f86a 	bl	800d5d8 <CDC_Transmit_FS>
//	CDC_Transmit_FS(m2,sizeof(m2));
}
 8001504:	bf00      	nop
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20002c80 	.word	0x20002c80
 8001510:	20002e84 	.word	0x20002e84

08001514 <process_input>:
 * process the input received over usb to extract the operating mode and the time of operation
 *
 * @param arr    user input array
 * @param pCommand command struct to return mode and time
*/
void process_input(const uint8_t *arr, control *pControl) {
 8001514:	b5b0      	push	{r4, r5, r7, lr}
 8001516:	b092      	sub	sp, #72	; 0x48
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
	uint8_t messageIn[] ="processing input";
 800151e:	4b44      	ldr	r3, [pc, #272]	; (8001630 <process_input+0x11c>)
 8001520:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001524:	461d      	mov	r5, r3
 8001526:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001528:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800152a:	682b      	ldr	r3, [r5, #0]
 800152c:	7023      	strb	r3, [r4, #0]
	uint8_t messageComplete[] ="processing complete";
 800152e:	4b41      	ldr	r3, [pc, #260]	; (8001634 <process_input+0x120>)
 8001530:	f107 0418 	add.w	r4, r7, #24
 8001534:	461d      	mov	r5, r3
 8001536:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001538:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800153a:	682b      	ldr	r3, [r5, #0]
 800153c:	6023      	str	r3, [r4, #0]
	CDC_Transmit_FS(messageIn,sizeof(messageIn));
 800153e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001542:	2111      	movs	r1, #17
 8001544:	4618      	mov	r0, r3
 8001546:	f00c f847 	bl	800d5d8 <CDC_Transmit_FS>
	uint8_t mode[]={'m','o','d','e',':'};
 800154a:	4a3b      	ldr	r2, [pc, #236]	; (8001638 <process_input+0x124>)
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001554:	6018      	str	r0, [r3, #0]
 8001556:	3304      	adds	r3, #4
 8001558:	7019      	strb	r1, [r3, #0]
    uint8_t time[] = {'t','i','m','e',':'};
 800155a:	4a38      	ldr	r2, [pc, #224]	; (800163c <process_input+0x128>)
 800155c:	f107 0308 	add.w	r3, r7, #8
 8001560:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001564:	6018      	str	r0, [r3, #0]
 8001566:	3304      	adds	r3, #4
 8001568:	7019      	strb	r1, [r3, #0]
    int i = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	647b      	str	r3, [r7, #68]	; 0x44
    int j = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	643b      	str	r3, [r7, #64]	; 0x40
    // check input to ensure "mode:" is received
    while (arr[i]==mode[i]) {
 8001572:	e002      	b.n	800157a <process_input+0x66>
        i++;
 8001574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001576:	3301      	adds	r3, #1
 8001578:	647b      	str	r3, [r7, #68]	; 0x44
    while (arr[i]==mode[i]) {
 800157a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	4413      	add	r3, r2
 8001580:	781a      	ldrb	r2, [r3, #0]
 8001582:	f107 0110 	add.w	r1, r7, #16
 8001586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001588:	440b      	add	r3, r1
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d0f1      	beq.n	8001574 <process_input+0x60>
    }
    // set mode in command
    // pControl->mode_instr ucted=arr[i];
    // move index past command for mode and '\n'
    while (arr[i]!='t') {
 8001590:	e002      	b.n	8001598 <process_input+0x84>
        i++;
 8001592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001594:	3301      	adds	r3, #1
 8001596:	647b      	str	r3, [r7, #68]	; 0x44
    while (arr[i]!='t') {
 8001598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b74      	cmp	r3, #116	; 0x74
 80015a2:	d1f6      	bne.n	8001592 <process_input+0x7e>
    }
    // check input to ensure "time:" is received
    while (arr[i]==time[j]) {
 80015a4:	e005      	b.n	80015b2 <process_input+0x9e>
        i++;
 80015a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015a8:	3301      	adds	r3, #1
 80015aa:	647b      	str	r3, [r7, #68]	; 0x44
        j++;
 80015ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015ae:	3301      	adds	r3, #1
 80015b0:	643b      	str	r3, [r7, #64]	; 0x40
    while (arr[i]==time[j]) {
 80015b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	4413      	add	r3, r2
 80015b8:	781a      	ldrb	r2, [r3, #0]
 80015ba:	f107 0108 	add.w	r1, r7, #8
 80015be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015c0:	440b      	add	r3, r1
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d0ee      	beq.n	80015a6 <process_input+0x92>
    }
    // set j to index one past first digit of command for time
    j=i+1;
 80015c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015ca:	3301      	adds	r3, #1
 80015cc:	643b      	str	r3, [r7, #64]	; 0x40
    // get index of last digit
    while (arr[j]!='\n') {
 80015ce:	e002      	b.n	80015d6 <process_input+0xc2>
        j++;
 80015d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015d2:	3301      	adds	r3, #1
 80015d4:	643b      	str	r3, [r7, #64]	; 0x40
    while (arr[j]!='\n') {
 80015d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	4413      	add	r3, r2
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b0a      	cmp	r3, #10
 80015e0:	d1f6      	bne.n	80015d0 <process_input+0xbc>
    }
    // set runt time to zero
    pControl->run_time_sec=0;
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	2200      	movs	r2, #0
 80015e6:	801a      	strh	r2, [r3, #0]
    // add each digits value,
    // *10 to shift current value left one digit for adding next digit
    // -48 converts from ascii to int
    while (i < j) {
 80015e8:	e014      	b.n	8001614 <process_input+0x100>
        pControl->run_time_sec=(pControl->run_time_sec*10)+arr[i]-48;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	461a      	mov	r2, r3
 80015f0:	0092      	lsls	r2, r2, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	440b      	add	r3, r1
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	b29b      	uxth	r3, r3
 8001602:	4413      	add	r3, r2
 8001604:	b29b      	uxth	r3, r3
 8001606:	3b30      	subs	r3, #48	; 0x30
 8001608:	b29a      	uxth	r2, r3
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	801a      	strh	r2, [r3, #0]
        i++;
 800160e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001610:	3301      	adds	r3, #1
 8001612:	647b      	str	r3, [r7, #68]	; 0x44
    while (i < j) {
 8001614:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001618:	429a      	cmp	r2, r3
 800161a:	dbe6      	blt.n	80015ea <process_input+0xd6>
    }
	CDC_Transmit_FS(messageComplete,sizeof(messageComplete));
 800161c:	f107 0318 	add.w	r3, r7, #24
 8001620:	2114      	movs	r1, #20
 8001622:	4618      	mov	r0, r3
 8001624:	f00b ffd8 	bl	800d5d8 <CDC_Transmit_FS>
}
 8001628:	bf00      	nop
 800162a:	3748      	adds	r7, #72	; 0x48
 800162c:	46bd      	mov	sp, r7
 800162e:	bdb0      	pop	{r4, r5, r7, pc}
 8001630:	08010a34 	.word	0x08010a34
 8001634:	08010a48 	.word	0x08010a48
 8001638:	08010a5c 	.word	0x08010a5c
 800163c:	08010a64 	.word	0x08010a64

08001640 <set_VCO_input_DAC>:

void set_VCO_input_DAC(control *ctrl_ptr) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af02      	add	r7, sp, #8
 8001646:	6078      	str	r0, [r7, #4]
	// if currently running is as instructed, return
	if (ctrl_ptr->mode_running==ctrl_ptr->mode_instructed) {
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	78da      	ldrb	r2, [r3, #3]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	789b      	ldrb	r3, [r3, #2]
 8001650:	429a      	cmp	r2, r3
 8001652:	d035      	beq.n	80016c0 <set_VCO_input_DAC+0x80>
		return;
	}

	  /* Set DAC_CH_1 to CTune or VTune based on user input for mode, defaults to range(r)*/
	if (ctrl_ptr->mode_instructed=='r')
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	789b      	ldrb	r3, [r3, #2]
 8001658:	2b72      	cmp	r3, #114	; 0x72
 800165a:	d117      	bne.n	800168c <set_VCO_input_DAC+0x4c>
	{
		// if currently running in other mode, turn it off
		if (ctrl_ptr->mode_running=='s') {
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	78db      	ldrb	r3, [r3, #3]
 8001660:	2b73      	cmp	r3, #115	; 0x73
 8001662:	d103      	bne.n	800166c <set_VCO_input_DAC+0x2c>
			HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
 8001664:	2100      	movs	r1, #0
 8001666:	4818      	ldr	r0, [pc, #96]	; (80016c8 <set_VCO_input_DAC+0x88>)
 8001668:	f002 f8a2 	bl	80037b0 <HAL_DAC_Stop>
		}
		// turn on dac using dma and timer 2
		HAL_DAC_Start_DMA(&hdac1,DAC_CHANNEL_1,(uint32_t*)VTune,2484,DAC_ALIGN_12B_R);
 800166c:	2300      	movs	r3, #0
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	f640 13b4 	movw	r3, #2484	; 0x9b4
 8001674:	4a15      	ldr	r2, [pc, #84]	; (80016cc <set_VCO_input_DAC+0x8c>)
 8001676:	2100      	movs	r1, #0
 8001678:	4813      	ldr	r0, [pc, #76]	; (80016c8 <set_VCO_input_DAC+0x88>)
 800167a:	f002 f8b7 	bl	80037ec <HAL_DAC_Start_DMA>
		HAL_TIM_Base_Start(&htim2);
 800167e:	4814      	ldr	r0, [pc, #80]	; (80016d0 <set_VCO_input_DAC+0x90>)
 8001680:	f006 fe32 	bl	80082e8 <HAL_TIM_Base_Start>
		ctrl_ptr->mode_running='r';
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2272      	movs	r2, #114	; 0x72
 8001688:	70da      	strb	r2, [r3, #3]
 800168a:	e01a      	b.n	80016c2 <set_VCO_input_DAC+0x82>
	}
	else
	{
		if (ctrl_ptr->mode_running=='r') {
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	78db      	ldrb	r3, [r3, #3]
 8001690:	2b72      	cmp	r3, #114	; 0x72
 8001692:	d106      	bne.n	80016a2 <set_VCO_input_DAC+0x62>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001694:	2100      	movs	r1, #0
 8001696:	480c      	ldr	r0, [pc, #48]	; (80016c8 <set_VCO_input_DAC+0x88>)
 8001698:	f002 f976 	bl	8003988 <HAL_DAC_Stop_DMA>
			HAL_TIM_Base_Stop(&htim2);
 800169c:	480c      	ldr	r0, [pc, #48]	; (80016d0 <set_VCO_input_DAC+0x90>)
 800169e:	f006 fe93 	bl	80083c8 <HAL_TIM_Base_Stop>

		}
		HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80016a2:	2100      	movs	r1, #0
 80016a4:	4808      	ldr	r0, [pc, #32]	; (80016c8 <set_VCO_input_DAC+0x88>)
 80016a6:	f002 f830 	bl	800370a <HAL_DAC_Start>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, CTune);
 80016aa:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <set_VCO_input_DAC+0x94>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	4805      	ldr	r0, [pc, #20]	; (80016c8 <set_VCO_input_DAC+0x88>)
 80016b4:	f002 f9b3 	bl	8003a1e <HAL_DAC_SetValue>
		ctrl_ptr->mode_running='s';
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2273      	movs	r2, #115	; 0x73
 80016bc:	70da      	strb	r2, [r3, #3]
 80016be:	e000      	b.n	80016c2 <set_VCO_input_DAC+0x82>
		return;
 80016c0:	bf00      	nop
	}
}
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20002b10 	.word	0x20002b10
 80016cc:	20000004 	.word	0x20000004
 80016d0:	20002c34 	.word	0x20002c34
 80016d4:	20000000 	.word	0x20000000

080016d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016dc:	b672      	cpsid	i
}
 80016de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <Error_Handler+0x8>
	...

080016e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <HAL_MspInit+0x44>)
 80016ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ee:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <HAL_MspInit+0x44>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6613      	str	r3, [r2, #96]	; 0x60
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <HAL_MspInit+0x44>)
 80016f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <HAL_MspInit+0x44>)
 8001704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001706:	4a08      	ldr	r2, [pc, #32]	; (8001728 <HAL_MspInit+0x44>)
 8001708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170c:	6593      	str	r3, [r2, #88]	; 0x58
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_MspInit+0x44>)
 8001710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000

0800172c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b09e      	sub	sp, #120	; 0x78
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001744:	f107 0310 	add.w	r3, r7, #16
 8001748:	2254      	movs	r2, #84	; 0x54
 800174a:	2100      	movs	r1, #0
 800174c:	4618      	mov	r0, r3
 800174e:	f00c fbc9 	bl	800dee4 <memset>
  if(hadc->Instance==ADC1)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800175a:	d15f      	bne.n	800181c <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800175c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001760:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8001762:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001766:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001768:	f107 0310 	add.w	r3, r7, #16
 800176c:	4618      	mov	r0, r3
 800176e:	f005 fb99 	bl	8006ea4 <HAL_RCCEx_PeriphCLKConfig>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001778:	f7ff ffae 	bl	80016d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800177c:	4b29      	ldr	r3, [pc, #164]	; (8001824 <HAL_ADC_MspInit+0xf8>)
 800177e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001780:	4a28      	ldr	r2, [pc, #160]	; (8001824 <HAL_ADC_MspInit+0xf8>)
 8001782:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001786:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001788:	4b26      	ldr	r3, [pc, #152]	; (8001824 <HAL_ADC_MspInit+0xf8>)
 800178a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001794:	4b23      	ldr	r3, [pc, #140]	; (8001824 <HAL_ADC_MspInit+0xf8>)
 8001796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001798:	4a22      	ldr	r2, [pc, #136]	; (8001824 <HAL_ADC_MspInit+0xf8>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a0:	4b20      	ldr	r3, [pc, #128]	; (8001824 <HAL_ADC_MspInit+0xf8>)
 80017a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = mixer_op_filtered_Pin;
 80017ac:	2301      	movs	r3, #1
 80017ae:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b0:	2303      	movs	r3, #3
 80017b2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(mixer_op_filtered_GPIO_Port, &GPIO_InitStruct);
 80017b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017bc:	4619      	mov	r1, r3
 80017be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c2:	f002 fed7 	bl	8004574 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 80017c6:	4b18      	ldr	r3, [pc, #96]	; (8001828 <HAL_ADC_MspInit+0xfc>)
 80017c8:	4a18      	ldr	r2, [pc, #96]	; (800182c <HAL_ADC_MspInit+0x100>)
 80017ca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80017cc:	4b16      	ldr	r3, [pc, #88]	; (8001828 <HAL_ADC_MspInit+0xfc>)
 80017ce:	2205      	movs	r2, #5
 80017d0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <HAL_ADC_MspInit+0xfc>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017d8:	4b13      	ldr	r3, [pc, #76]	; (8001828 <HAL_ADC_MspInit+0xfc>)
 80017da:	2200      	movs	r2, #0
 80017dc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017de:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_ADC_MspInit+0xfc>)
 80017e0:	2280      	movs	r2, #128	; 0x80
 80017e2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017e4:	4b10      	ldr	r3, [pc, #64]	; (8001828 <HAL_ADC_MspInit+0xfc>)
 80017e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017ec:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <HAL_ADC_MspInit+0xfc>)
 80017ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017f2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <HAL_ADC_MspInit+0xfc>)
 80017f6:	2220      	movs	r2, #32
 80017f8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <HAL_ADC_MspInit+0xfc>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001800:	4809      	ldr	r0, [pc, #36]	; (8001828 <HAL_ADC_MspInit+0xfc>)
 8001802:	f002 fb85 	bl	8003f10 <HAL_DMA_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 800180c:	f7ff ff64 	bl	80016d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a05      	ldr	r2, [pc, #20]	; (8001828 <HAL_ADC_MspInit+0xfc>)
 8001814:	655a      	str	r2, [r3, #84]	; 0x54
 8001816:	4a04      	ldr	r2, [pc, #16]	; (8001828 <HAL_ADC_MspInit+0xfc>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800181c:	bf00      	nop
 800181e:	3778      	adds	r7, #120	; 0x78
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40021000 	.word	0x40021000
 8001828:	20002ab0 	.word	0x20002ab0
 800182c:	4002001c 	.word	0x4002001c

08001830 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a2b      	ldr	r2, [pc, #172]	; (80018fc <HAL_DAC_MspInit+0xcc>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d150      	bne.n	80018f4 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001852:	4b2b      	ldr	r3, [pc, #172]	; (8001900 <HAL_DAC_MspInit+0xd0>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	4a2a      	ldr	r2, [pc, #168]	; (8001900 <HAL_DAC_MspInit+0xd0>)
 8001858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800185c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800185e:	4b28      	ldr	r3, [pc, #160]	; (8001900 <HAL_DAC_MspInit+0xd0>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186a:	4b25      	ldr	r3, [pc, #148]	; (8001900 <HAL_DAC_MspInit+0xd0>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	4a24      	ldr	r2, [pc, #144]	; (8001900 <HAL_DAC_MspInit+0xd0>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001876:	4b22      	ldr	r3, [pc, #136]	; (8001900 <HAL_DAC_MspInit+0xd0>)
 8001878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001882:	2310      	movs	r3, #16
 8001884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001886:	2303      	movs	r3, #3
 8001888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001898:	f002 fe6c 	bl	8004574 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 800189c:	4b19      	ldr	r3, [pc, #100]	; (8001904 <HAL_DAC_MspInit+0xd4>)
 800189e:	4a1a      	ldr	r2, [pc, #104]	; (8001908 <HAL_DAC_MspInit+0xd8>)
 80018a0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80018a2:	4b18      	ldr	r3, [pc, #96]	; (8001904 <HAL_DAC_MspInit+0xd4>)
 80018a4:	2206      	movs	r2, #6
 80018a6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018a8:	4b16      	ldr	r3, [pc, #88]	; (8001904 <HAL_DAC_MspInit+0xd4>)
 80018aa:	2210      	movs	r2, #16
 80018ac:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ae:	4b15      	ldr	r3, [pc, #84]	; (8001904 <HAL_DAC_MspInit+0xd4>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80018b4:	4b13      	ldr	r3, [pc, #76]	; (8001904 <HAL_DAC_MspInit+0xd4>)
 80018b6:	2280      	movs	r2, #128	; 0x80
 80018b8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018ba:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_DAC_MspInit+0xd4>)
 80018bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <HAL_DAC_MspInit+0xd4>)
 80018c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018c8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <HAL_DAC_MspInit+0xd4>)
 80018cc:	2220      	movs	r2, #32
 80018ce:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <HAL_DAC_MspInit+0xd4>)
 80018d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018d6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80018d8:	480a      	ldr	r0, [pc, #40]	; (8001904 <HAL_DAC_MspInit+0xd4>)
 80018da:	f002 fb19 	bl	8003f10 <HAL_DMA_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 80018e4:	f7ff fef8 	bl	80016d8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a06      	ldr	r2, [pc, #24]	; (8001904 <HAL_DAC_MspInit+0xd4>)
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	4a05      	ldr	r2, [pc, #20]	; (8001904 <HAL_DAC_MspInit+0xd4>)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80018f4:	bf00      	nop
 80018f6:	3728      	adds	r7, #40	; 0x28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	50000800 	.word	0x50000800
 8001900:	40021000 	.word	0x40021000
 8001904:	20002b24 	.word	0x20002b24
 8001908:	40020008 	.word	0x40020008

0800190c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	; 0x28
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <HAL_SPI_MspInit+0x8c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d130      	bne.n	8001990 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800192e:	4b1b      	ldr	r3, [pc, #108]	; (800199c <HAL_SPI_MspInit+0x90>)
 8001930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001932:	4a1a      	ldr	r2, [pc, #104]	; (800199c <HAL_SPI_MspInit+0x90>)
 8001934:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001938:	6613      	str	r3, [r2, #96]	; 0x60
 800193a:	4b18      	ldr	r3, [pc, #96]	; (800199c <HAL_SPI_MspInit+0x90>)
 800193c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800193e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <HAL_SPI_MspInit+0x90>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	4a14      	ldr	r2, [pc, #80]	; (800199c <HAL_SPI_MspInit+0x90>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001952:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_SPI_MspInit+0x90>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800195e:	23e0      	movs	r3, #224	; 0xe0
 8001960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2300      	movs	r3, #0
 800196c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800196e:	2305      	movs	r3, #5
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4619      	mov	r1, r3
 8001978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197c:	f002 fdfa 	bl	8004574 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001980:	2200      	movs	r2, #0
 8001982:	2100      	movs	r1, #0
 8001984:	2023      	movs	r0, #35	; 0x23
 8001986:	f001 fe6a 	bl	800365e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800198a:	2023      	movs	r0, #35	; 0x23
 800198c:	f001 fe81 	bl	8003692 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001990:	bf00      	nop
 8001992:	3728      	adds	r7, #40	; 0x28
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40013000 	.word	0x40013000
 800199c:	40021000 	.word	0x40021000

080019a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a13      	ldr	r2, [pc, #76]	; (80019fc <HAL_TIM_Base_MspInit+0x5c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d10c      	bne.n	80019cc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019b2:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <HAL_TIM_Base_MspInit+0x60>)
 80019b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b6:	4a12      	ldr	r2, [pc, #72]	; (8001a00 <HAL_TIM_Base_MspInit+0x60>)
 80019b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019bc:	6613      	str	r3, [r2, #96]	; 0x60
 80019be:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <HAL_TIM_Base_MspInit+0x60>)
 80019c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019ca:	e010      	b.n	80019ee <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019d4:	d10b      	bne.n	80019ee <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019d6:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <HAL_TIM_Base_MspInit+0x60>)
 80019d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019da:	4a09      	ldr	r2, [pc, #36]	; (8001a00 <HAL_TIM_Base_MspInit+0x60>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6593      	str	r3, [r2, #88]	; 0x58
 80019e2:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <HAL_TIM_Base_MspInit+0x60>)
 80019e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	68bb      	ldr	r3, [r7, #8]
}
 80019ee:	bf00      	nop
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40012c00 	.word	0x40012c00
 8001a00:	40021000 	.word	0x40021000

08001a04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 030c 	add.w	r3, r7, #12
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a12      	ldr	r2, [pc, #72]	; (8001a6c <HAL_TIM_MspPostInit+0x68>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d11d      	bne.n	8001a62 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_TIM_MspPostInit+0x6c>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2a:	4a11      	ldr	r2, [pc, #68]	; (8001a70 <HAL_TIM_MspPostInit+0x6c>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a32:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <HAL_TIM_MspPostInit+0x6c>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a44:	2302      	movs	r3, #2
 8001a46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001a50:	2306      	movs	r3, #6
 8001a52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a54:	f107 030c 	add.w	r3, r7, #12
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a5e:	f002 fd89 	bl	8004574 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a62:	bf00      	nop
 8001a64:	3720      	adds	r7, #32
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40012c00 	.word	0x40012c00
 8001a70:	40021000 	.word	0x40021000

08001a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <NMI_Handler+0x4>

08001a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a7e:	e7fe      	b.n	8001a7e <HardFault_Handler+0x4>

08001a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a84:	e7fe      	b.n	8001a84 <MemManage_Handler+0x4>

08001a86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a8a:	e7fe      	b.n	8001a8a <BusFault_Handler+0x4>

08001a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a90:	e7fe      	b.n	8001a90 <UsageFault_Handler+0x4>

08001a92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ac0:	f000 f98c 	bl	8001ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001acc:	2001      	movs	r0, #1
 8001ace:	f002 feeb 	bl	80048a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001ada:	2002      	movs	r0, #2
 8001adc:	f002 fee4 	bl	80048a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001ae8:	4802      	ldr	r0, [pc, #8]	; (8001af4 <DMA1_Channel1_IRQHandler+0x10>)
 8001aea:	f002 fbf4 	bl	80042d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20002b24 	.word	0x20002b24

08001af8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001afc:	4802      	ldr	r0, [pc, #8]	; (8001b08 <DMA1_Channel2_IRQHandler+0x10>)
 8001afe:	f002 fbea 	bl	80042d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20002ab0 	.word	0x20002ab0

08001b0c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b10:	4802      	ldr	r0, [pc, #8]	; (8001b1c <USB_LP_IRQHandler+0x10>)
 8001b12:	f002 fff3 	bl	8004afc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20004750 	.word	0x20004750

08001b20 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <SPI1_IRQHandler+0x10>)
 8001b26:	f005 ffb1 	bl	8007a8c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20002b84 	.word	0x20002b84

08001b34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
	return 1;
 8001b38:	2301      	movs	r3, #1
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_kill>:

int _kill(int pid, int sig)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b4e:	f00c f991 	bl	800de74 <__errno>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2216      	movs	r2, #22
 8001b56:	601a      	str	r2, [r3, #0]
	return -1;
 8001b58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_exit>:

void _exit (int status)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ffe7 	bl	8001b44 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b76:	e7fe      	b.n	8001b76 <_exit+0x12>

08001b78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	e00a      	b.n	8001ba0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b8a:	f3af 8000 	nop.w
 8001b8e:	4601      	mov	r1, r0
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	60ba      	str	r2, [r7, #8]
 8001b96:	b2ca      	uxtb	r2, r1
 8001b98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	dbf0      	blt.n	8001b8a <_read+0x12>
	}

return len;
 8001ba8:	687b      	ldr	r3, [r7, #4]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b086      	sub	sp, #24
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	60f8      	str	r0, [r7, #12]
 8001bba:	60b9      	str	r1, [r7, #8]
 8001bbc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	e009      	b.n	8001bd8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	60ba      	str	r2, [r7, #8]
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	dbf1      	blt.n	8001bc4 <_write+0x12>
	}
	return len;
 8001be0:	687b      	ldr	r3, [r7, #4]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <_close>:

int _close(int file)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
	return -1;
 8001bf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c12:	605a      	str	r2, [r3, #4]
	return 0;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <_isatty>:

int _isatty(int file)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
	return 1;
 8001c2a:	2301      	movs	r3, #1
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
	return 0;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c5c:	4a14      	ldr	r2, [pc, #80]	; (8001cb0 <_sbrk+0x5c>)
 8001c5e:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <_sbrk+0x60>)
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c68:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <_sbrk+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d102      	bne.n	8001c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c70:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <_sbrk+0x64>)
 8001c72:	4a12      	ldr	r2, [pc, #72]	; (8001cbc <_sbrk+0x68>)
 8001c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <_sbrk+0x64>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d207      	bcs.n	8001c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c84:	f00c f8f6 	bl	800de74 <__errno>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c92:	e009      	b.n	8001ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c94:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <_sbrk+0x64>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4a05      	ldr	r2, [pc, #20]	; (8001cb8 <_sbrk+0x64>)
 8001ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20020000 	.word	0x20020000
 8001cb4:	00000400 	.word	0x00000400
 8001cb8:	20003270 	.word	0x20003270
 8001cbc:	20004c78 	.word	0x20004c78

08001cc0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <SystemInit+0x20>)
 8001cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cca:	4a05      	ldr	r2, [pc, #20]	; (8001ce0 <SystemInit+0x20>)
 8001ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ce4:	480d      	ldr	r0, [pc, #52]	; (8001d1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ce6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ce8:	480d      	ldr	r0, [pc, #52]	; (8001d20 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cea:	490e      	ldr	r1, [pc, #56]	; (8001d24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cec:	4a0e      	ldr	r2, [pc, #56]	; (8001d28 <LoopForever+0xe>)
  movs r3, #0
 8001cee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001cf0:	e002      	b.n	8001cf8 <LoopCopyDataInit>

08001cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cf6:	3304      	adds	r3, #4

08001cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cfc:	d3f9      	bcc.n	8001cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cfe:	4a0b      	ldr	r2, [pc, #44]	; (8001d2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d00:	4c0b      	ldr	r4, [pc, #44]	; (8001d30 <LoopForever+0x16>)
  movs r3, #0
 8001d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d04:	e001      	b.n	8001d0a <LoopFillZerobss>

08001d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d08:	3204      	adds	r2, #4

08001d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d0c:	d3fb      	bcc.n	8001d06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d0e:	f7ff ffd7 	bl	8001cc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d12:	f00c f8b5 	bl	800de80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d16:	f7fe ff99 	bl	8000c4c <main>

08001d1a <LoopForever>:

LoopForever:
    b LoopForever
 8001d1a:	e7fe      	b.n	8001d1a <LoopForever>
  ldr   r0, =_estack
 8001d1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d24:	20002a28 	.word	0x20002a28
  ldr r2, =_sidata
 8001d28:	08010edc 	.word	0x08010edc
  ldr r2, =_sbss
 8001d2c:	20002a28 	.word	0x20002a28
  ldr r4, =_ebss
 8001d30:	20004c74 	.word	0x20004c74

08001d34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d34:	e7fe      	b.n	8001d34 <ADC1_2_IRQHandler>

08001d36 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d40:	2003      	movs	r0, #3
 8001d42:	f001 fc81 	bl	8003648 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d46:	200f      	movs	r0, #15
 8001d48:	f000 f80e 	bl	8001d68 <HAL_InitTick>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	71fb      	strb	r3, [r7, #7]
 8001d56:	e001      	b.n	8001d5c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d58:	f7ff fcc4 	bl	80016e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d5c:	79fb      	ldrb	r3, [r7, #7]

}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d74:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <HAL_InitTick+0x68>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d022      	beq.n	8001dc2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d7c:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <HAL_InitTick+0x6c>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <HAL_InitTick+0x68>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d88:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d90:	4618      	mov	r0, r3
 8001d92:	f001 fc8c 	bl	80036ae <HAL_SYSTICK_Config>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10f      	bne.n	8001dbc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b0f      	cmp	r3, #15
 8001da0:	d809      	bhi.n	8001db6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da2:	2200      	movs	r2, #0
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	f04f 30ff 	mov.w	r0, #4294967295
 8001daa:	f001 fc58 	bl	800365e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <HAL_InitTick+0x70>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	e007      	b.n	8001dc6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	73fb      	strb	r3, [r7, #15]
 8001dba:	e004      	b.n	8001dc6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	73fb      	strb	r3, [r7, #15]
 8001dc0:	e001      	b.n	8001dc6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	200026dc 	.word	0x200026dc
 8001dd4:	200026d4 	.word	0x200026d4
 8001dd8:	200026d8 	.word	0x200026d8

08001ddc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <HAL_IncTick+0x1c>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <HAL_IncTick+0x20>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4413      	add	r3, r2
 8001dea:	4a03      	ldr	r2, [pc, #12]	; (8001df8 <HAL_IncTick+0x1c>)
 8001dec:	6013      	str	r3, [r2, #0]
}
 8001dee:	bf00      	nop
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	20003274 	.word	0x20003274
 8001dfc:	200026dc 	.word	0x200026dc

08001e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return uwTick;
 8001e04:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <HAL_GetTick+0x14>)
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	20003274 	.word	0x20003274

08001e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e20:	f7ff ffee 	bl	8001e00 <HAL_GetTick>
 8001e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e30:	d004      	beq.n	8001e3c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <HAL_Delay+0x40>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	4413      	add	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e3c:	bf00      	nop
 8001e3e:	f7ff ffdf 	bl	8001e00 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d8f7      	bhi.n	8001e3e <HAL_Delay+0x26>
  {
  }
}
 8001e4e:	bf00      	nop
 8001e50:	bf00      	nop
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	200026dc 	.word	0x200026dc

08001e5c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	431a      	orrs	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	609a      	str	r2, [r3, #8]
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b087      	sub	sp, #28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
 8001ed0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	3360      	adds	r3, #96	; 0x60
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <LL_ADC_SetOffset+0x44>)
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001efc:	bf00      	nop
 8001efe:	371c      	adds	r7, #28
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	03fff000 	.word	0x03fff000

08001f0c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3360      	adds	r3, #96	; 0x60
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b087      	sub	sp, #28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	3360      	adds	r3, #96	; 0x60
 8001f48:	461a      	mov	r2, r3
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f62:	bf00      	nop
 8001f64:	371c      	adds	r7, #28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b087      	sub	sp, #28
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	60f8      	str	r0, [r7, #12]
 8001f76:	60b9      	str	r1, [r7, #8]
 8001f78:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	3360      	adds	r3, #96	; 0x60
 8001f7e:	461a      	mov	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	431a      	orrs	r2, r3
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001f98:	bf00      	nop
 8001f9a:	371c      	adds	r7, #28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b087      	sub	sp, #28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	3360      	adds	r3, #96	; 0x60
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001fce:	bf00      	nop
 8001fd0:	371c      	adds	r7, #28
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	615a      	str	r2, [r3, #20]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002014:	2301      	movs	r3, #1
 8002016:	e000      	b.n	800201a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002026:	b480      	push	{r7}
 8002028:	b087      	sub	sp, #28
 800202a:	af00      	add	r7, sp, #0
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	3330      	adds	r3, #48	; 0x30
 8002036:	461a      	mov	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	0a1b      	lsrs	r3, r3, #8
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	4413      	add	r3, r2
 8002044:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	f003 031f 	and.w	r3, r3, #31
 8002050:	211f      	movs	r1, #31
 8002052:	fa01 f303 	lsl.w	r3, r1, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	401a      	ands	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	0e9b      	lsrs	r3, r3, #26
 800205e:	f003 011f 	and.w	r1, r3, #31
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	f003 031f 	and.w	r3, r3, #31
 8002068:	fa01 f303 	lsl.w	r3, r1, r3
 800206c:	431a      	orrs	r2, r3
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002072:	bf00      	nop
 8002074:	371c      	adds	r7, #28
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800207e:	b480      	push	{r7}
 8002080:	b087      	sub	sp, #28
 8002082:	af00      	add	r7, sp, #0
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	3314      	adds	r3, #20
 800208e:	461a      	mov	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	0e5b      	lsrs	r3, r3, #25
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	4413      	add	r3, r2
 800209c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	0d1b      	lsrs	r3, r3, #20
 80020a6:	f003 031f 	and.w	r3, r3, #31
 80020aa:	2107      	movs	r1, #7
 80020ac:	fa01 f303 	lsl.w	r3, r1, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	401a      	ands	r2, r3
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	0d1b      	lsrs	r3, r3, #20
 80020b8:	f003 031f 	and.w	r3, r3, #31
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	431a      	orrs	r2, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80020c8:	bf00      	nop
 80020ca:	371c      	adds	r7, #28
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a0f      	ldr	r2, [pc, #60]	; (8002120 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d10a      	bne.n	80020fe <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f4:	431a      	orrs	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80020fc:	e00a      	b.n	8002114 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800210a:	43db      	mvns	r3, r3
 800210c:	401a      	ands	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002114:	bf00      	nop
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	407f0000 	.word	0x407f0000

08002124 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 031f 	and.w	r3, r3, #31
}
 8002134:	4618      	mov	r0, r3
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002150:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6093      	str	r3, [r2, #8]
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002174:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002178:	d101      	bne.n	800217e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800219c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021c8:	d101      	bne.n	80021ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021ca:	2301      	movs	r3, #1
 80021cc:	e000      	b.n	80021d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021f0:	f043 0201 	orr.w	r2, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b01      	cmp	r3, #1
 8002216:	d101      	bne.n	800221c <LL_ADC_IsEnabled+0x18>
 8002218:	2301      	movs	r3, #1
 800221a:	e000      	b.n	800221e <LL_ADC_IsEnabled+0x1a>
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800223a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800223e:	f043 0204 	orr.w	r2, r3, #4
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	2b04      	cmp	r3, #4
 8002264:	d101      	bne.n	800226a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	2b08      	cmp	r3, #8
 800228a:	d101      	bne.n	8002290 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800228c:	2301      	movs	r3, #1
 800228e:	e000      	b.n	8002292 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022a0:	b590      	push	{r4, r7, lr}
 80022a2:	b089      	sub	sp, #36	; 0x24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022a8:	2300      	movs	r3, #0
 80022aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e1af      	b.n	800261a <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d109      	bne.n	80022dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff fa2f 	bl	800172c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff ff3f 	bl	8002164 <LL_ADC_IsDeepPowerDownEnabled>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d004      	beq.n	80022f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff ff25 	bl	8002140 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff ff5a 	bl	80021b4 <LL_ADC_IsInternalRegulatorEnabled>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d115      	bne.n	8002332 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff ff3e 	bl	800218c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002310:	4b9f      	ldr	r3, [pc, #636]	; (8002590 <HAL_ADC_Init+0x2f0>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	099b      	lsrs	r3, r3, #6
 8002316:	4a9f      	ldr	r2, [pc, #636]	; (8002594 <HAL_ADC_Init+0x2f4>)
 8002318:	fba2 2303 	umull	r2, r3, r2, r3
 800231c:	099b      	lsrs	r3, r3, #6
 800231e:	3301      	adds	r3, #1
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002324:	e002      	b.n	800232c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	3b01      	subs	r3, #1
 800232a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f9      	bne.n	8002326 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff ff3c 	bl	80021b4 <LL_ADC_IsInternalRegulatorEnabled>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10d      	bne.n	800235e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002346:	f043 0210 	orr.w	r2, r3, #16
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002352:	f043 0201 	orr.w	r2, r3, #1
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff ff75 	bl	8002252 <LL_ADC_REG_IsConversionOngoing>
 8002368:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236e:	f003 0310 	and.w	r3, r3, #16
 8002372:	2b00      	cmp	r3, #0
 8002374:	f040 8148 	bne.w	8002608 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	2b00      	cmp	r3, #0
 800237c:	f040 8144 	bne.w	8002608 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002384:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002388:	f043 0202 	orr.w	r2, r3, #2
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff ff35 	bl	8002204 <LL_ADC_IsEnabled>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d141      	bne.n	8002424 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023a8:	d004      	beq.n	80023b4 <HAL_ADC_Init+0x114>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a7a      	ldr	r2, [pc, #488]	; (8002598 <HAL_ADC_Init+0x2f8>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d10f      	bne.n	80023d4 <HAL_ADC_Init+0x134>
 80023b4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80023b8:	f7ff ff24 	bl	8002204 <LL_ADC_IsEnabled>
 80023bc:	4604      	mov	r4, r0
 80023be:	4876      	ldr	r0, [pc, #472]	; (8002598 <HAL_ADC_Init+0x2f8>)
 80023c0:	f7ff ff20 	bl	8002204 <LL_ADC_IsEnabled>
 80023c4:	4603      	mov	r3, r0
 80023c6:	4323      	orrs	r3, r4
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	bf0c      	ite	eq
 80023cc:	2301      	moveq	r3, #1
 80023ce:	2300      	movne	r3, #0
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	e012      	b.n	80023fa <HAL_ADC_Init+0x15a>
 80023d4:	4871      	ldr	r0, [pc, #452]	; (800259c <HAL_ADC_Init+0x2fc>)
 80023d6:	f7ff ff15 	bl	8002204 <LL_ADC_IsEnabled>
 80023da:	4604      	mov	r4, r0
 80023dc:	4870      	ldr	r0, [pc, #448]	; (80025a0 <HAL_ADC_Init+0x300>)
 80023de:	f7ff ff11 	bl	8002204 <LL_ADC_IsEnabled>
 80023e2:	4603      	mov	r3, r0
 80023e4:	431c      	orrs	r4, r3
 80023e6:	486f      	ldr	r0, [pc, #444]	; (80025a4 <HAL_ADC_Init+0x304>)
 80023e8:	f7ff ff0c 	bl	8002204 <LL_ADC_IsEnabled>
 80023ec:	4603      	mov	r3, r0
 80023ee:	4323      	orrs	r3, r4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	bf0c      	ite	eq
 80023f4:	2301      	moveq	r3, #1
 80023f6:	2300      	movne	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d012      	beq.n	8002424 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002406:	d004      	beq.n	8002412 <HAL_ADC_Init+0x172>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a62      	ldr	r2, [pc, #392]	; (8002598 <HAL_ADC_Init+0x2f8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d101      	bne.n	8002416 <HAL_ADC_Init+0x176>
 8002412:	4a65      	ldr	r2, [pc, #404]	; (80025a8 <HAL_ADC_Init+0x308>)
 8002414:	e000      	b.n	8002418 <HAL_ADC_Init+0x178>
 8002416:	4a65      	ldr	r2, [pc, #404]	; (80025ac <HAL_ADC_Init+0x30c>)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	4619      	mov	r1, r3
 800241e:	4610      	mov	r0, r2
 8002420:	f7ff fd1c 	bl	8001e5c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	7f5b      	ldrb	r3, [r3, #29]
 8002428:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800242e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002434:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800243a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002442:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800244e:	2b01      	cmp	r3, #1
 8002450:	d106      	bne.n	8002460 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	3b01      	subs	r3, #1
 8002458:	045b      	lsls	r3, r3, #17
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002464:	2b00      	cmp	r3, #0
 8002466:	d009      	beq.n	800247c <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002474:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4313      	orrs	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	4b4b      	ldr	r3, [pc, #300]	; (80025b0 <HAL_ADC_Init+0x310>)
 8002484:	4013      	ands	r3, r2
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	6812      	ldr	r2, [r2, #0]
 800248a:	69b9      	ldr	r1, [r7, #24]
 800248c:	430b      	orrs	r3, r1
 800248e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff fed1 	bl	8002252 <LL_ADC_REG_IsConversionOngoing>
 80024b0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff fede 	bl	8002278 <LL_ADC_INJ_IsConversionOngoing>
 80024bc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d17f      	bne.n	80025c4 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d17c      	bne.n	80025c4 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80024ce:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024d6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024e6:	f023 0302 	bic.w	r3, r3, #2
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6812      	ldr	r2, [r2, #0]
 80024ee:	69b9      	ldr	r1, [r7, #24]
 80024f0:	430b      	orrs	r3, r1
 80024f2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d017      	beq.n	800252c <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691a      	ldr	r2, [r3, #16]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800250a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002514:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002518:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6911      	ldr	r1, [r2, #16]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6812      	ldr	r2, [r2, #0]
 8002524:	430b      	orrs	r3, r1
 8002526:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800252a:	e013      	b.n	8002554 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	691a      	ldr	r2, [r3, #16]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800253a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800254c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002550:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800255a:	2b01      	cmp	r3, #1
 800255c:	d12a      	bne.n	80025b4 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002568:	f023 0304 	bic.w	r3, r3, #4
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002574:	4311      	orrs	r1, r2
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800257a:	4311      	orrs	r1, r2
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002580:	430a      	orrs	r2, r1
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f042 0201 	orr.w	r2, r2, #1
 800258c:	611a      	str	r2, [r3, #16]
 800258e:	e019      	b.n	80025c4 <HAL_ADC_Init+0x324>
 8002590:	200026d4 	.word	0x200026d4
 8002594:	053e2d63 	.word	0x053e2d63
 8002598:	50000100 	.word	0x50000100
 800259c:	50000400 	.word	0x50000400
 80025a0:	50000500 	.word	0x50000500
 80025a4:	50000600 	.word	0x50000600
 80025a8:	50000300 	.word	0x50000300
 80025ac:	50000700 	.word	0x50000700
 80025b0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691a      	ldr	r2, [r3, #16]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0201 	bic.w	r2, r2, #1
 80025c2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d10c      	bne.n	80025e6 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	f023 010f 	bic.w	r1, r3, #15
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	1e5a      	subs	r2, r3, #1
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	631a      	str	r2, [r3, #48]	; 0x30
 80025e4:	e007      	b.n	80025f6 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 020f 	bic.w	r2, r2, #15
 80025f4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fa:	f023 0303 	bic.w	r3, r3, #3
 80025fe:	f043 0201 	orr.w	r2, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	65da      	str	r2, [r3, #92]	; 0x5c
 8002606:	e007      	b.n	8002618 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260c:	f043 0210 	orr.w	r2, r3, #16
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002618:	7ffb      	ldrb	r3, [r7, #31]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3724      	adds	r7, #36	; 0x24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd90      	pop	{r4, r7, pc}
 8002622:	bf00      	nop

08002624 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002638:	d004      	beq.n	8002644 <HAL_ADC_Start_DMA+0x20>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a5a      	ldr	r2, [pc, #360]	; (80027a8 <HAL_ADC_Start_DMA+0x184>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d101      	bne.n	8002648 <HAL_ADC_Start_DMA+0x24>
 8002644:	4b59      	ldr	r3, [pc, #356]	; (80027ac <HAL_ADC_Start_DMA+0x188>)
 8002646:	e000      	b.n	800264a <HAL_ADC_Start_DMA+0x26>
 8002648:	4b59      	ldr	r3, [pc, #356]	; (80027b0 <HAL_ADC_Start_DMA+0x18c>)
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff fd6a 	bl	8002124 <LL_ADC_GetMultimode>
 8002650:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff fdfb 	bl	8002252 <LL_ADC_REG_IsConversionOngoing>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	f040 809b 	bne.w	800279a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_ADC_Start_DMA+0x4e>
 800266e:	2302      	movs	r3, #2
 8002670:	e096      	b.n	80027a0 <HAL_ADC_Start_DMA+0x17c>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a4d      	ldr	r2, [pc, #308]	; (80027b4 <HAL_ADC_Start_DMA+0x190>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d008      	beq.n	8002696 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d005      	beq.n	8002696 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	2b05      	cmp	r3, #5
 800268e:	d002      	beq.n	8002696 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	2b09      	cmp	r3, #9
 8002694:	d17a      	bne.n	800278c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 fce2 	bl	8003060 <ADC_Enable>
 800269c:	4603      	mov	r3, r0
 800269e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80026a0:	7dfb      	ldrb	r3, [r7, #23]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d16d      	bne.n	8002782 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026ae:	f023 0301 	bic.w	r3, r3, #1
 80026b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a3a      	ldr	r2, [pc, #232]	; (80027a8 <HAL_ADC_Start_DMA+0x184>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d009      	beq.n	80026d8 <HAL_ADC_Start_DMA+0xb4>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a3b      	ldr	r2, [pc, #236]	; (80027b8 <HAL_ADC_Start_DMA+0x194>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d002      	beq.n	80026d4 <HAL_ADC_Start_DMA+0xb0>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	e003      	b.n	80026dc <HAL_ADC_Start_DMA+0xb8>
 80026d4:	4b39      	ldr	r3, [pc, #228]	; (80027bc <HAL_ADC_Start_DMA+0x198>)
 80026d6:	e001      	b.n	80026dc <HAL_ADC_Start_DMA+0xb8>
 80026d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d002      	beq.n	80026ea <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d105      	bne.n	80026f6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d006      	beq.n	8002710 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002706:	f023 0206 	bic.w	r2, r3, #6
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	661a      	str	r2, [r3, #96]	; 0x60
 800270e:	e002      	b.n	8002716 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271a:	4a29      	ldr	r2, [pc, #164]	; (80027c0 <HAL_ADC_Start_DMA+0x19c>)
 800271c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002722:	4a28      	ldr	r2, [pc, #160]	; (80027c4 <HAL_ADC_Start_DMA+0x1a0>)
 8002724:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272a:	4a27      	ldr	r2, [pc, #156]	; (80027c8 <HAL_ADC_Start_DMA+0x1a4>)
 800272c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	221c      	movs	r2, #28
 8002734:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f042 0210 	orr.w	r2, r2, #16
 800274c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f042 0201 	orr.w	r2, r2, #1
 800275c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	3340      	adds	r3, #64	; 0x40
 8002768:	4619      	mov	r1, r3
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f001 fc77 	bl	8004060 <HAL_DMA_Start_IT>
 8002772:	4603      	mov	r3, r0
 8002774:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fd55 	bl	800222a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002780:	e00d      	b.n	800279e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800278a:	e008      	b.n	800279e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002798:	e001      	b.n	800279e <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800279a:	2302      	movs	r3, #2
 800279c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800279e:	7dfb      	ldrb	r3, [r7, #23]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	50000100 	.word	0x50000100
 80027ac:	50000300 	.word	0x50000300
 80027b0:	50000700 	.word	0x50000700
 80027b4:	50000600 	.word	0x50000600
 80027b8:	50000500 	.word	0x50000500
 80027bc:	50000400 	.word	0x50000400
 80027c0:	08003125 	.word	0x08003125
 80027c4:	080031fd 	.word	0x080031fd
 80027c8:	08003219 	.word	0x08003219

080027cc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b0b6      	sub	sp, #216	; 0xd8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027ea:	2300      	movs	r3, #0
 80027ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d102      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x24>
 80027fe:	2302      	movs	r3, #2
 8002800:	f000 bc13 	b.w	800302a <HAL_ADC_ConfigChannel+0x84a>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff fd1e 	bl	8002252 <LL_ADC_REG_IsConversionOngoing>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	f040 83f3 	bne.w	8003004 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6818      	ldr	r0, [r3, #0]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	6859      	ldr	r1, [r3, #4]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	461a      	mov	r2, r3
 800282c:	f7ff fbfb 	bl	8002026 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fd0c 	bl	8002252 <LL_ADC_REG_IsConversionOngoing>
 800283a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fd18 	bl	8002278 <LL_ADC_INJ_IsConversionOngoing>
 8002848:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800284c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002850:	2b00      	cmp	r3, #0
 8002852:	f040 81d9 	bne.w	8002c08 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002856:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800285a:	2b00      	cmp	r3, #0
 800285c:	f040 81d4 	bne.w	8002c08 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002868:	d10f      	bne.n	800288a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6818      	ldr	r0, [r3, #0]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2200      	movs	r2, #0
 8002874:	4619      	mov	r1, r3
 8002876:	f7ff fc02 	bl	800207e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff fba9 	bl	8001fda <LL_ADC_SetSamplingTimeCommonConfig>
 8002888:	e00e      	b.n	80028a8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6818      	ldr	r0, [r3, #0]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	6819      	ldr	r1, [r3, #0]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	461a      	mov	r2, r3
 8002898:	f7ff fbf1 	bl	800207e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2100      	movs	r1, #0
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff fb99 	bl	8001fda <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	695a      	ldr	r2, [r3, #20]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	08db      	lsrs	r3, r3, #3
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d022      	beq.n	8002910 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	6919      	ldr	r1, [r3, #16]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028da:	f7ff faf3 	bl	8001ec4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	6919      	ldr	r1, [r3, #16]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	461a      	mov	r2, r3
 80028ec:	f7ff fb3f 	bl	8001f6e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6818      	ldr	r0, [r3, #0]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	6919      	ldr	r1, [r3, #16]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	7f1b      	ldrb	r3, [r3, #28]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d102      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x126>
 8002900:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002904:	e000      	b.n	8002908 <HAL_ADC_ConfigChannel+0x128>
 8002906:	2300      	movs	r3, #0
 8002908:	461a      	mov	r2, r3
 800290a:	f7ff fb4b 	bl	8001fa4 <LL_ADC_SetOffsetSaturation>
 800290e:	e17b      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2100      	movs	r1, #0
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff faf8 	bl	8001f0c <LL_ADC_GetOffsetChannel>
 800291c:	4603      	mov	r3, r0
 800291e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10a      	bne.n	800293c <HAL_ADC_ConfigChannel+0x15c>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2100      	movs	r1, #0
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff faed 	bl	8001f0c <LL_ADC_GetOffsetChannel>
 8002932:	4603      	mov	r3, r0
 8002934:	0e9b      	lsrs	r3, r3, #26
 8002936:	f003 021f 	and.w	r2, r3, #31
 800293a:	e01e      	b.n	800297a <HAL_ADC_ConfigChannel+0x19a>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2100      	movs	r1, #0
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fae2 	bl	8001f0c <LL_ADC_GetOffsetChannel>
 8002948:	4603      	mov	r3, r0
 800294a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800295a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800295e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002962:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800296a:	2320      	movs	r3, #32
 800296c:	e004      	b.n	8002978 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800296e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002972:	fab3 f383 	clz	r3, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002982:	2b00      	cmp	r3, #0
 8002984:	d105      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x1b2>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	0e9b      	lsrs	r3, r3, #26
 800298c:	f003 031f 	and.w	r3, r3, #31
 8002990:	e018      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x1e4>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800299e:	fa93 f3a3 	rbit	r3, r3
 80029a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80029a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80029ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80029b6:	2320      	movs	r3, #32
 80029b8:	e004      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80029ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d106      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2200      	movs	r2, #0
 80029ce:	2100      	movs	r1, #0
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff fab1 	bl	8001f38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2101      	movs	r1, #1
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff fa95 	bl	8001f0c <LL_ADC_GetOffsetChannel>
 80029e2:	4603      	mov	r3, r0
 80029e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10a      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x222>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2101      	movs	r1, #1
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fa8a 	bl	8001f0c <LL_ADC_GetOffsetChannel>
 80029f8:	4603      	mov	r3, r0
 80029fa:	0e9b      	lsrs	r3, r3, #26
 80029fc:	f003 021f 	and.w	r2, r3, #31
 8002a00:	e01e      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x260>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2101      	movs	r1, #1
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff fa7f 	bl	8001f0c <LL_ADC_GetOffsetChannel>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a18:	fa93 f3a3 	rbit	r3, r3
 8002a1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002a20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002a28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002a30:	2320      	movs	r3, #32
 8002a32:	e004      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002a34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a38:	fab3 f383 	clz	r3, r3
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d105      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x278>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	0e9b      	lsrs	r3, r3, #26
 8002a52:	f003 031f 	and.w	r3, r3, #31
 8002a56:	e018      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x2aa>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002a6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002a74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002a7c:	2320      	movs	r3, #32
 8002a7e:	e004      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002a80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a84:	fab3 f383 	clz	r3, r3
 8002a88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d106      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2200      	movs	r2, #0
 8002a94:	2101      	movs	r1, #1
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fa4e 	bl	8001f38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2102      	movs	r1, #2
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff fa32 	bl	8001f0c <LL_ADC_GetOffsetChannel>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10a      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x2e8>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2102      	movs	r1, #2
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff fa27 	bl	8001f0c <LL_ADC_GetOffsetChannel>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	0e9b      	lsrs	r3, r3, #26
 8002ac2:	f003 021f 	and.w	r2, r3, #31
 8002ac6:	e01e      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x326>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2102      	movs	r1, #2
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fa1c 	bl	8001f0c <LL_ADC_GetOffsetChannel>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ada:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ade:	fa93 f3a3 	rbit	r3, r3
 8002ae2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002ae6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002aea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002aee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002af6:	2320      	movs	r3, #32
 8002af8:	e004      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002afa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002afe:	fab3 f383 	clz	r3, r3
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d105      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x33e>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	0e9b      	lsrs	r3, r3, #26
 8002b18:	f003 031f 	and.w	r3, r3, #31
 8002b1c:	e016      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x36c>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002b30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002b36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002b3e:	2320      	movs	r3, #32
 8002b40:	e004      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002b42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b46:	fab3 f383 	clz	r3, r3
 8002b4a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d106      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2200      	movs	r2, #0
 8002b56:	2102      	movs	r1, #2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff f9ed 	bl	8001f38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2103      	movs	r1, #3
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff f9d1 	bl	8001f0c <LL_ADC_GetOffsetChannel>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10a      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x3aa>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2103      	movs	r1, #3
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff f9c6 	bl	8001f0c <LL_ADC_GetOffsetChannel>
 8002b80:	4603      	mov	r3, r0
 8002b82:	0e9b      	lsrs	r3, r3, #26
 8002b84:	f003 021f 	and.w	r2, r3, #31
 8002b88:	e017      	b.n	8002bba <HAL_ADC_ConfigChannel+0x3da>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2103      	movs	r1, #3
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff f9bb 	bl	8001f0c <LL_ADC_GetOffsetChannel>
 8002b96:	4603      	mov	r3, r0
 8002b98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b9c:	fa93 f3a3 	rbit	r3, r3
 8002ba0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002ba2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ba4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002ba6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002bac:	2320      	movs	r3, #32
 8002bae:	e003      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002bb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bb2:	fab3 f383 	clz	r3, r3
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d105      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x3f2>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	0e9b      	lsrs	r3, r3, #26
 8002bcc:	f003 031f 	and.w	r3, r3, #31
 8002bd0:	e011      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x416>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bda:	fa93 f3a3 	rbit	r3, r3
 8002bde:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002be0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002be2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002bea:	2320      	movs	r3, #32
 8002bec:	e003      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bf0:	fab3 f383 	clz	r3, r3
 8002bf4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d106      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2103      	movs	r1, #3
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff f998 	bl	8001f38 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff faf9 	bl	8002204 <LL_ADC_IsEnabled>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f040 813d 	bne.w	8002e94 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6819      	ldr	r1, [r3, #0]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	461a      	mov	r2, r3
 8002c28:	f7ff fa54 	bl	80020d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	4aa2      	ldr	r2, [pc, #648]	; (8002ebc <HAL_ADC_ConfigChannel+0x6dc>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	f040 812e 	bne.w	8002e94 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10b      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x480>
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	0e9b      	lsrs	r3, r3, #26
 8002c4e:	3301      	adds	r3, #1
 8002c50:	f003 031f 	and.w	r3, r3, #31
 8002c54:	2b09      	cmp	r3, #9
 8002c56:	bf94      	ite	ls
 8002c58:	2301      	movls	r3, #1
 8002c5a:	2300      	movhi	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	e019      	b.n	8002c94 <HAL_ADC_ConfigChannel+0x4b4>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c68:	fa93 f3a3 	rbit	r3, r3
 8002c6c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002c6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c70:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002c72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002c78:	2320      	movs	r3, #32
 8002c7a:	e003      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002c7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c7e:	fab3 f383 	clz	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	3301      	adds	r3, #1
 8002c86:	f003 031f 	and.w	r3, r3, #31
 8002c8a:	2b09      	cmp	r3, #9
 8002c8c:	bf94      	ite	ls
 8002c8e:	2301      	movls	r3, #1
 8002c90:	2300      	movhi	r3, #0
 8002c92:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d079      	beq.n	8002d8c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d107      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x4d4>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	0e9b      	lsrs	r3, r3, #26
 8002caa:	3301      	adds	r3, #1
 8002cac:	069b      	lsls	r3, r3, #26
 8002cae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cb2:	e015      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x500>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cbc:	fa93 f3a3 	rbit	r3, r3
 8002cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cc4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002ccc:	2320      	movs	r3, #32
 8002cce:	e003      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cd2:	fab3 f383 	clz	r3, r3
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	3301      	adds	r3, #1
 8002cda:	069b      	lsls	r3, r3, #26
 8002cdc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d109      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x520>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	0e9b      	lsrs	r3, r3, #26
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	f003 031f 	and.w	r3, r3, #31
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfe:	e017      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x550>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d08:	fa93 f3a3 	rbit	r3, r3
 8002d0c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d10:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002d12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002d18:	2320      	movs	r3, #32
 8002d1a:	e003      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d1e:	fab3 f383 	clz	r3, r3
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	3301      	adds	r3, #1
 8002d26:	f003 031f 	and.w	r3, r3, #31
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d30:	ea42 0103 	orr.w	r1, r2, r3
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10a      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x576>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	0e9b      	lsrs	r3, r3, #26
 8002d46:	3301      	adds	r3, #1
 8002d48:	f003 021f 	and.w	r2, r3, #31
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4413      	add	r3, r2
 8002d52:	051b      	lsls	r3, r3, #20
 8002d54:	e018      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x5a8>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5e:	fa93 f3a3 	rbit	r3, r3
 8002d62:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002d6e:	2320      	movs	r3, #32
 8002d70:	e003      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d74:	fab3 f383 	clz	r3, r3
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	f003 021f 	and.w	r2, r3, #31
 8002d80:	4613      	mov	r3, r2
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	4413      	add	r3, r2
 8002d86:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	e07e      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d107      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x5c8>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	0e9b      	lsrs	r3, r3, #26
 8002d9e:	3301      	adds	r3, #1
 8002da0:	069b      	lsls	r3, r3, #26
 8002da2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002da6:	e015      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x5f4>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db0:	fa93 f3a3 	rbit	r3, r3
 8002db4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002dc0:	2320      	movs	r3, #32
 8002dc2:	e003      	b.n	8002dcc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc6:	fab3 f383 	clz	r3, r3
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	3301      	adds	r3, #1
 8002dce:	069b      	lsls	r3, r3, #26
 8002dd0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d109      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x614>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	0e9b      	lsrs	r3, r3, #26
 8002de6:	3301      	adds	r3, #1
 8002de8:	f003 031f 	and.w	r3, r3, #31
 8002dec:	2101      	movs	r1, #1
 8002dee:	fa01 f303 	lsl.w	r3, r1, r3
 8002df2:	e017      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x644>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	fa93 f3a3 	rbit	r3, r3
 8002e00:	61fb      	str	r3, [r7, #28]
  return result;
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002e0c:	2320      	movs	r3, #32
 8002e0e:	e003      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	fab3 f383 	clz	r3, r3
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	3301      	adds	r3, #1
 8002e1a:	f003 031f 	and.w	r3, r3, #31
 8002e1e:	2101      	movs	r1, #1
 8002e20:	fa01 f303 	lsl.w	r3, r1, r3
 8002e24:	ea42 0103 	orr.w	r1, r2, r3
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10d      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x670>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	0e9b      	lsrs	r3, r3, #26
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	f003 021f 	and.w	r2, r3, #31
 8002e40:	4613      	mov	r3, r2
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	4413      	add	r3, r2
 8002e46:	3b1e      	subs	r3, #30
 8002e48:	051b      	lsls	r3, r3, #20
 8002e4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e4e:	e01b      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x6a8>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	fa93 f3a3 	rbit	r3, r3
 8002e5c:	613b      	str	r3, [r7, #16]
  return result;
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002e68:	2320      	movs	r3, #32
 8002e6a:	e003      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	fab3 f383 	clz	r3, r3
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	3301      	adds	r3, #1
 8002e76:	f003 021f 	and.w	r2, r3, #31
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	4413      	add	r3, r2
 8002e80:	3b1e      	subs	r3, #30
 8002e82:	051b      	lsls	r3, r3, #20
 8002e84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e88:	430b      	orrs	r3, r1
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	6892      	ldr	r2, [r2, #8]
 8002e8e:	4619      	mov	r1, r3
 8002e90:	f7ff f8f5 	bl	800207e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <HAL_ADC_ConfigChannel+0x6e0>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 80be 	beq.w	800301e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eaa:	d004      	beq.n	8002eb6 <HAL_ADC_ConfigChannel+0x6d6>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a04      	ldr	r2, [pc, #16]	; (8002ec4 <HAL_ADC_ConfigChannel+0x6e4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d10a      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x6ec>
 8002eb6:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <HAL_ADC_ConfigChannel+0x6e8>)
 8002eb8:	e009      	b.n	8002ece <HAL_ADC_ConfigChannel+0x6ee>
 8002eba:	bf00      	nop
 8002ebc:	407f0000 	.word	0x407f0000
 8002ec0:	80080000 	.word	0x80080000
 8002ec4:	50000100 	.word	0x50000100
 8002ec8:	50000300 	.word	0x50000300
 8002ecc:	4b59      	ldr	r3, [pc, #356]	; (8003034 <HAL_ADC_ConfigChannel+0x854>)
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fe ffea 	bl	8001ea8 <LL_ADC_GetCommonPathInternalCh>
 8002ed4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a56      	ldr	r2, [pc, #344]	; (8003038 <HAL_ADC_ConfigChannel+0x858>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d004      	beq.n	8002eec <HAL_ADC_ConfigChannel+0x70c>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a55      	ldr	r2, [pc, #340]	; (800303c <HAL_ADC_ConfigChannel+0x85c>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d13a      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002eec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ef0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d134      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f00:	d005      	beq.n	8002f0e <HAL_ADC_ConfigChannel+0x72e>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a4e      	ldr	r2, [pc, #312]	; (8003040 <HAL_ADC_ConfigChannel+0x860>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	f040 8085 	bne.w	8003018 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f16:	d004      	beq.n	8002f22 <HAL_ADC_ConfigChannel+0x742>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a49      	ldr	r2, [pc, #292]	; (8003044 <HAL_ADC_ConfigChannel+0x864>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d101      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x746>
 8002f22:	4a49      	ldr	r2, [pc, #292]	; (8003048 <HAL_ADC_ConfigChannel+0x868>)
 8002f24:	e000      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x748>
 8002f26:	4a43      	ldr	r2, [pc, #268]	; (8003034 <HAL_ADC_ConfigChannel+0x854>)
 8002f28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f30:	4619      	mov	r1, r3
 8002f32:	4610      	mov	r0, r2
 8002f34:	f7fe ffa5 	bl	8001e82 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f38:	4b44      	ldr	r3, [pc, #272]	; (800304c <HAL_ADC_ConfigChannel+0x86c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	099b      	lsrs	r3, r3, #6
 8002f3e:	4a44      	ldr	r2, [pc, #272]	; (8003050 <HAL_ADC_ConfigChannel+0x870>)
 8002f40:	fba2 2303 	umull	r2, r3, r2, r3
 8002f44:	099b      	lsrs	r3, r3, #6
 8002f46:	1c5a      	adds	r2, r3, #1
 8002f48:	4613      	mov	r3, r2
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	4413      	add	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f52:	e002      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1f9      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f60:	e05a      	b.n	8003018 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a3b      	ldr	r2, [pc, #236]	; (8003054 <HAL_ADC_ConfigChannel+0x874>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d125      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x7d8>
 8002f6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d11f      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a31      	ldr	r2, [pc, #196]	; (8003044 <HAL_ADC_ConfigChannel+0x864>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d104      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x7ac>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a34      	ldr	r2, [pc, #208]	; (8003058 <HAL_ADC_ConfigChannel+0x878>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d047      	beq.n	800301c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f94:	d004      	beq.n	8002fa0 <HAL_ADC_ConfigChannel+0x7c0>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a2a      	ldr	r2, [pc, #168]	; (8003044 <HAL_ADC_ConfigChannel+0x864>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d101      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x7c4>
 8002fa0:	4a29      	ldr	r2, [pc, #164]	; (8003048 <HAL_ADC_ConfigChannel+0x868>)
 8002fa2:	e000      	b.n	8002fa6 <HAL_ADC_ConfigChannel+0x7c6>
 8002fa4:	4a23      	ldr	r2, [pc, #140]	; (8003034 <HAL_ADC_ConfigChannel+0x854>)
 8002fa6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	f7fe ff66 	bl	8001e82 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fb6:	e031      	b.n	800301c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a27      	ldr	r2, [pc, #156]	; (800305c <HAL_ADC_ConfigChannel+0x87c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d12d      	bne.n	800301e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002fc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d127      	bne.n	800301e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a1c      	ldr	r2, [pc, #112]	; (8003044 <HAL_ADC_ConfigChannel+0x864>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d022      	beq.n	800301e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fe0:	d004      	beq.n	8002fec <HAL_ADC_ConfigChannel+0x80c>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a17      	ldr	r2, [pc, #92]	; (8003044 <HAL_ADC_ConfigChannel+0x864>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d101      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x810>
 8002fec:	4a16      	ldr	r2, [pc, #88]	; (8003048 <HAL_ADC_ConfigChannel+0x868>)
 8002fee:	e000      	b.n	8002ff2 <HAL_ADC_ConfigChannel+0x812>
 8002ff0:	4a10      	ldr	r2, [pc, #64]	; (8003034 <HAL_ADC_ConfigChannel+0x854>)
 8002ff2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ff6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	f7fe ff40 	bl	8001e82 <LL_ADC_SetCommonPathInternalCh>
 8003002:	e00c      	b.n	800301e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003008:	f043 0220 	orr.w	r2, r3, #32
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003016:	e002      	b.n	800301e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003018:	bf00      	nop
 800301a:	e000      	b.n	800301e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800301c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003026:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800302a:	4618      	mov	r0, r3
 800302c:	37d8      	adds	r7, #216	; 0xd8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	50000700 	.word	0x50000700
 8003038:	c3210000 	.word	0xc3210000
 800303c:	90c00010 	.word	0x90c00010
 8003040:	50000600 	.word	0x50000600
 8003044:	50000100 	.word	0x50000100
 8003048:	50000300 	.word	0x50000300
 800304c:	200026d4 	.word	0x200026d4
 8003050:	053e2d63 	.word	0x053e2d63
 8003054:	c7520000 	.word	0xc7520000
 8003058:	50000500 	.word	0x50000500
 800305c:	cb840000 	.word	0xcb840000

08003060 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff f8c9 	bl	8002204 <LL_ADC_IsEnabled>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d14d      	bne.n	8003114 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	4b28      	ldr	r3, [pc, #160]	; (8003120 <ADC_Enable+0xc0>)
 8003080:	4013      	ands	r3, r2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00d      	beq.n	80030a2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308a:	f043 0210 	orr.w	r2, r3, #16
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003096:	f043 0201 	orr.w	r2, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e039      	b.n	8003116 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff f898 	bl	80021dc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80030ac:	f7fe fea8 	bl	8001e00 <HAL_GetTick>
 80030b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030b2:	e028      	b.n	8003106 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff f8a3 	bl	8002204 <LL_ADC_IsEnabled>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d104      	bne.n	80030ce <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff f887 	bl	80021dc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030ce:	f7fe fe97 	bl	8001e00 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d914      	bls.n	8003106 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d00d      	beq.n	8003106 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ee:	f043 0210 	orr.w	r2, r3, #16
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030fa:	f043 0201 	orr.w	r2, r3, #1
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e007      	b.n	8003116 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b01      	cmp	r3, #1
 8003112:	d1cf      	bne.n	80030b4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	8000003f 	.word	0x8000003f

08003124 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003130:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003136:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800313a:	2b00      	cmp	r3, #0
 800313c:	d14b      	bne.n	80031d6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003142:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d021      	beq.n	800319c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f7fe ff4f 	bl	8002000 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d032      	beq.n	80031ce <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d12b      	bne.n	80031ce <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003186:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d11f      	bne.n	80031ce <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003192:	f043 0201 	orr.w	r2, r3, #1
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	65da      	str	r2, [r3, #92]	; 0x5c
 800319a:	e018      	b.n	80031ce <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d111      	bne.n	80031ce <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d105      	bne.n	80031ce <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c6:	f043 0201 	orr.w	r2, r3, #1
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f7fe f96e 	bl	80014b0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031d4:	e00e      	b.n	80031f4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031da:	f003 0310 	and.w	r3, r3, #16
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f7ff faf2 	bl	80027cc <HAL_ADC_ErrorCallback>
}
 80031e8:	e004      	b.n	80031f4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	4798      	blx	r3
}
 80031f4:	bf00      	nop
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003208:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f7fe f968 	bl	80014e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003210:	bf00      	nop
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003224:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003236:	f043 0204 	orr.w	r2, r3, #4
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f7ff fac4 	bl	80027cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003244:	bf00      	nop
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <LL_ADC_IsEnabled>:
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b01      	cmp	r3, #1
 800325e:	d101      	bne.n	8003264 <LL_ADC_IsEnabled+0x18>
 8003260:	2301      	movs	r3, #1
 8003262:	e000      	b.n	8003266 <LL_ADC_IsEnabled+0x1a>
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <LL_ADC_REG_IsConversionOngoing>:
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 0304 	and.w	r3, r3, #4
 8003282:	2b04      	cmp	r3, #4
 8003284:	d101      	bne.n	800328a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003286:	2301      	movs	r3, #1
 8003288:	e000      	b.n	800328c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003298:	b590      	push	{r4, r7, lr}
 800329a:	b0a1      	sub	sp, #132	; 0x84
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d101      	bne.n	80032b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80032b2:	2302      	movs	r3, #2
 80032b4:	e0e7      	b.n	8003486 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80032be:	2300      	movs	r3, #0
 80032c0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80032c2:	2300      	movs	r3, #0
 80032c4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032ce:	d102      	bne.n	80032d6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80032d0:	4b6f      	ldr	r3, [pc, #444]	; (8003490 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80032d2:	60bb      	str	r3, [r7, #8]
 80032d4:	e009      	b.n	80032ea <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a6e      	ldr	r2, [pc, #440]	; (8003494 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d102      	bne.n	80032e6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80032e0:	4b6d      	ldr	r3, [pc, #436]	; (8003498 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80032e2:	60bb      	str	r3, [r7, #8]
 80032e4:	e001      	b.n	80032ea <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80032e6:	2300      	movs	r3, #0
 80032e8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10b      	bne.n	8003308 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f4:	f043 0220 	orr.w	r2, r3, #32
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0be      	b.n	8003486 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff ffb1 	bl	8003272 <LL_ADC_REG_IsConversionOngoing>
 8003310:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff ffab 	bl	8003272 <LL_ADC_REG_IsConversionOngoing>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	f040 80a0 	bne.w	8003464 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003326:	2b00      	cmp	r3, #0
 8003328:	f040 809c 	bne.w	8003464 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003334:	d004      	beq.n	8003340 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a55      	ldr	r2, [pc, #340]	; (8003490 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d101      	bne.n	8003344 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003340:	4b56      	ldr	r3, [pc, #344]	; (800349c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003342:	e000      	b.n	8003346 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003344:	4b56      	ldr	r3, [pc, #344]	; (80034a0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003346:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d04b      	beq.n	80033e8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003350:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	6859      	ldr	r1, [r3, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003362:	035b      	lsls	r3, r3, #13
 8003364:	430b      	orrs	r3, r1
 8003366:	431a      	orrs	r2, r3
 8003368:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800336a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003374:	d004      	beq.n	8003380 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a45      	ldr	r2, [pc, #276]	; (8003490 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d10f      	bne.n	80033a0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003380:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003384:	f7ff ff62 	bl	800324c <LL_ADC_IsEnabled>
 8003388:	4604      	mov	r4, r0
 800338a:	4841      	ldr	r0, [pc, #260]	; (8003490 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800338c:	f7ff ff5e 	bl	800324c <LL_ADC_IsEnabled>
 8003390:	4603      	mov	r3, r0
 8003392:	4323      	orrs	r3, r4
 8003394:	2b00      	cmp	r3, #0
 8003396:	bf0c      	ite	eq
 8003398:	2301      	moveq	r3, #1
 800339a:	2300      	movne	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	e012      	b.n	80033c6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80033a0:	483c      	ldr	r0, [pc, #240]	; (8003494 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80033a2:	f7ff ff53 	bl	800324c <LL_ADC_IsEnabled>
 80033a6:	4604      	mov	r4, r0
 80033a8:	483b      	ldr	r0, [pc, #236]	; (8003498 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80033aa:	f7ff ff4f 	bl	800324c <LL_ADC_IsEnabled>
 80033ae:	4603      	mov	r3, r0
 80033b0:	431c      	orrs	r4, r3
 80033b2:	483c      	ldr	r0, [pc, #240]	; (80034a4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80033b4:	f7ff ff4a 	bl	800324c <LL_ADC_IsEnabled>
 80033b8:	4603      	mov	r3, r0
 80033ba:	4323      	orrs	r3, r4
 80033bc:	2b00      	cmp	r3, #0
 80033be:	bf0c      	ite	eq
 80033c0:	2301      	moveq	r3, #1
 80033c2:	2300      	movne	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d056      	beq.n	8003478 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80033ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80033d2:	f023 030f 	bic.w	r3, r3, #15
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	6811      	ldr	r1, [r2, #0]
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	6892      	ldr	r2, [r2, #8]
 80033de:	430a      	orrs	r2, r1
 80033e0:	431a      	orrs	r2, r3
 80033e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033e4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033e6:	e047      	b.n	8003478 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80033e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033f2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033fc:	d004      	beq.n	8003408 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a23      	ldr	r2, [pc, #140]	; (8003490 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d10f      	bne.n	8003428 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003408:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800340c:	f7ff ff1e 	bl	800324c <LL_ADC_IsEnabled>
 8003410:	4604      	mov	r4, r0
 8003412:	481f      	ldr	r0, [pc, #124]	; (8003490 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003414:	f7ff ff1a 	bl	800324c <LL_ADC_IsEnabled>
 8003418:	4603      	mov	r3, r0
 800341a:	4323      	orrs	r3, r4
 800341c:	2b00      	cmp	r3, #0
 800341e:	bf0c      	ite	eq
 8003420:	2301      	moveq	r3, #1
 8003422:	2300      	movne	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	e012      	b.n	800344e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003428:	481a      	ldr	r0, [pc, #104]	; (8003494 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800342a:	f7ff ff0f 	bl	800324c <LL_ADC_IsEnabled>
 800342e:	4604      	mov	r4, r0
 8003430:	4819      	ldr	r0, [pc, #100]	; (8003498 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003432:	f7ff ff0b 	bl	800324c <LL_ADC_IsEnabled>
 8003436:	4603      	mov	r3, r0
 8003438:	431c      	orrs	r4, r3
 800343a:	481a      	ldr	r0, [pc, #104]	; (80034a4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800343c:	f7ff ff06 	bl	800324c <LL_ADC_IsEnabled>
 8003440:	4603      	mov	r3, r0
 8003442:	4323      	orrs	r3, r4
 8003444:	2b00      	cmp	r3, #0
 8003446:	bf0c      	ite	eq
 8003448:	2301      	moveq	r3, #1
 800344a:	2300      	movne	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d012      	beq.n	8003478 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003452:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800345a:	f023 030f 	bic.w	r3, r3, #15
 800345e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003460:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003462:	e009      	b.n	8003478 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003468:	f043 0220 	orr.w	r2, r3, #32
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003476:	e000      	b.n	800347a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003478:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003482:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003486:	4618      	mov	r0, r3
 8003488:	3784      	adds	r7, #132	; 0x84
 800348a:	46bd      	mov	sp, r7
 800348c:	bd90      	pop	{r4, r7, pc}
 800348e:	bf00      	nop
 8003490:	50000100 	.word	0x50000100
 8003494:	50000400 	.word	0x50000400
 8003498:	50000500 	.word	0x50000500
 800349c:	50000300 	.word	0x50000300
 80034a0:	50000700 	.word	0x50000700
 80034a4:	50000600 	.word	0x50000600

080034a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034b8:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <__NVIC_SetPriorityGrouping+0x44>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034c4:	4013      	ands	r3, r2
 80034c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034da:	4a04      	ldr	r2, [pc, #16]	; (80034ec <__NVIC_SetPriorityGrouping+0x44>)
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	60d3      	str	r3, [r2, #12]
}
 80034e0:	bf00      	nop
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	e000ed00 	.word	0xe000ed00

080034f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034f4:	4b04      	ldr	r3, [pc, #16]	; (8003508 <__NVIC_GetPriorityGrouping+0x18>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	0a1b      	lsrs	r3, r3, #8
 80034fa:	f003 0307 	and.w	r3, r3, #7
}
 80034fe:	4618      	mov	r0, r3
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	e000ed00 	.word	0xe000ed00

0800350c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351a:	2b00      	cmp	r3, #0
 800351c:	db0b      	blt.n	8003536 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	f003 021f 	and.w	r2, r3, #31
 8003524:	4907      	ldr	r1, [pc, #28]	; (8003544 <__NVIC_EnableIRQ+0x38>)
 8003526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	2001      	movs	r0, #1
 800352e:	fa00 f202 	lsl.w	r2, r0, r2
 8003532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	e000e100 	.word	0xe000e100

08003548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	4603      	mov	r3, r0
 8003550:	6039      	str	r1, [r7, #0]
 8003552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003558:	2b00      	cmp	r3, #0
 800355a:	db0a      	blt.n	8003572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	b2da      	uxtb	r2, r3
 8003560:	490c      	ldr	r1, [pc, #48]	; (8003594 <__NVIC_SetPriority+0x4c>)
 8003562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003566:	0112      	lsls	r2, r2, #4
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	440b      	add	r3, r1
 800356c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003570:	e00a      	b.n	8003588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	b2da      	uxtb	r2, r3
 8003576:	4908      	ldr	r1, [pc, #32]	; (8003598 <__NVIC_SetPriority+0x50>)
 8003578:	79fb      	ldrb	r3, [r7, #7]
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	3b04      	subs	r3, #4
 8003580:	0112      	lsls	r2, r2, #4
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	440b      	add	r3, r1
 8003586:	761a      	strb	r2, [r3, #24]
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	e000e100 	.word	0xe000e100
 8003598:	e000ed00 	.word	0xe000ed00

0800359c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800359c:	b480      	push	{r7}
 800359e:	b089      	sub	sp, #36	; 0x24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f1c3 0307 	rsb	r3, r3, #7
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	bf28      	it	cs
 80035ba:	2304      	movcs	r3, #4
 80035bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	3304      	adds	r3, #4
 80035c2:	2b06      	cmp	r3, #6
 80035c4:	d902      	bls.n	80035cc <NVIC_EncodePriority+0x30>
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	3b03      	subs	r3, #3
 80035ca:	e000      	b.n	80035ce <NVIC_EncodePriority+0x32>
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d0:	f04f 32ff 	mov.w	r2, #4294967295
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	43da      	mvns	r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	401a      	ands	r2, r3
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035e4:	f04f 31ff 	mov.w	r1, #4294967295
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	fa01 f303 	lsl.w	r3, r1, r3
 80035ee:	43d9      	mvns	r1, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f4:	4313      	orrs	r3, r2
         );
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3724      	adds	r7, #36	; 0x24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
	...

08003604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3b01      	subs	r3, #1
 8003610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003614:	d301      	bcc.n	800361a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003616:	2301      	movs	r3, #1
 8003618:	e00f      	b.n	800363a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800361a:	4a0a      	ldr	r2, [pc, #40]	; (8003644 <SysTick_Config+0x40>)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3b01      	subs	r3, #1
 8003620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003622:	210f      	movs	r1, #15
 8003624:	f04f 30ff 	mov.w	r0, #4294967295
 8003628:	f7ff ff8e 	bl	8003548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800362c:	4b05      	ldr	r3, [pc, #20]	; (8003644 <SysTick_Config+0x40>)
 800362e:	2200      	movs	r2, #0
 8003630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003632:	4b04      	ldr	r3, [pc, #16]	; (8003644 <SysTick_Config+0x40>)
 8003634:	2207      	movs	r2, #7
 8003636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	e000e010 	.word	0xe000e010

08003648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff ff29 	bl	80034a8 <__NVIC_SetPriorityGrouping>
}
 8003656:	bf00      	nop
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b086      	sub	sp, #24
 8003662:	af00      	add	r7, sp, #0
 8003664:	4603      	mov	r3, r0
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	607a      	str	r2, [r7, #4]
 800366a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800366c:	f7ff ff40 	bl	80034f0 <__NVIC_GetPriorityGrouping>
 8003670:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	6978      	ldr	r0, [r7, #20]
 8003678:	f7ff ff90 	bl	800359c <NVIC_EncodePriority>
 800367c:	4602      	mov	r2, r0
 800367e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003682:	4611      	mov	r1, r2
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff ff5f 	bl	8003548 <__NVIC_SetPriority>
}
 800368a:	bf00      	nop
 800368c:	3718      	adds	r7, #24
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	4603      	mov	r3, r0
 800369a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800369c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff ff33 	bl	800350c <__NVIC_EnableIRQ>
}
 80036a6:	bf00      	nop
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b082      	sub	sp, #8
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7ff ffa4 	bl	8003604 <SysTick_Config>
 80036bc:	4603      	mov	r3, r0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b082      	sub	sp, #8
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e014      	b.n	8003702 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	791b      	ldrb	r3, [r3, #4]
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d105      	bne.n	80036ee <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7fe f8a1 	bl	8001830 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2202      	movs	r2, #2
 80036f2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b082      	sub	sp, #8
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	795b      	ldrb	r3, [r3, #5]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d101      	bne.n	8003720 <HAL_DAC_Start+0x16>
 800371c:	2302      	movs	r3, #2
 800371e:	e043      	b.n	80037a8 <HAL_DAC_Start+0x9e>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2202      	movs	r2, #2
 800372a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6819      	ldr	r1, [r3, #0]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	f003 0310 	and.w	r3, r3, #16
 8003738:	2201      	movs	r2, #1
 800373a:	409a      	lsls	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8003744:	2001      	movs	r0, #1
 8003746:	f7fe fb67 	bl	8001e18 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10f      	bne.n	8003770 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800375a:	2b02      	cmp	r3, #2
 800375c:	d11d      	bne.n	800379a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f042 0201 	orr.w	r2, r2, #1
 800376c:	605a      	str	r2, [r3, #4]
 800376e:	e014      	b.n	800379a <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	f003 0310 	and.w	r3, r3, #16
 8003780:	2102      	movs	r1, #2
 8003782:	fa01 f303 	lsl.w	r3, r1, r3
 8003786:	429a      	cmp	r2, r3
 8003788:	d107      	bne.n	800379a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f042 0202 	orr.w	r2, r2, #2
 8003798:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_DAC_Stop>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6819      	ldr	r1, [r3, #0]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	f003 0310 	and.w	r3, r3, #16
 80037c6:	2201      	movs	r2, #1
 80037c8:	fa02 f303 	lsl.w	r3, r2, r3
 80037cc:	43da      	mvns	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	400a      	ands	r2, r1
 80037d4:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 80037d6:	2001      	movs	r0, #1
 80037d8:	f7fe fb1e 	bl	8001e18 <HAL_Delay>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3708      	adds	r7, #8
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
 80037f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	795b      	ldrb	r3, [r3, #5]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d101      	bne.n	800380a <HAL_DAC_Start_DMA+0x1e>
 8003806:	2302      	movs	r3, #2
 8003808:	e0ae      	b.n	8003968 <HAL_DAC_Start_DMA+0x17c>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2201      	movs	r2, #1
 800380e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2202      	movs	r2, #2
 8003814:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d12f      	bne.n	800387c <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	4a53      	ldr	r2, [pc, #332]	; (8003970 <HAL_DAC_Start_DMA+0x184>)
 8003822:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	4a52      	ldr	r2, [pc, #328]	; (8003974 <HAL_DAC_Start_DMA+0x188>)
 800382a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	4a51      	ldr	r2, [pc, #324]	; (8003978 <HAL_DAC_Start_DMA+0x18c>)
 8003832:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003842:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003844:	6a3b      	ldr	r3, [r7, #32]
 8003846:	2b08      	cmp	r3, #8
 8003848:	d013      	beq.n	8003872 <HAL_DAC_Start_DMA+0x86>
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	2b08      	cmp	r3, #8
 800384e:	d845      	bhi.n	80038dc <HAL_DAC_Start_DMA+0xf0>
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_DAC_Start_DMA+0x72>
 8003856:	6a3b      	ldr	r3, [r7, #32]
 8003858:	2b04      	cmp	r3, #4
 800385a:	d005      	beq.n	8003868 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800385c:	e03e      	b.n	80038dc <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	3308      	adds	r3, #8
 8003864:	613b      	str	r3, [r7, #16]
        break;
 8003866:	e03c      	b.n	80038e2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	330c      	adds	r3, #12
 800386e:	613b      	str	r3, [r7, #16]
        break;
 8003870:	e037      	b.n	80038e2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	3310      	adds	r3, #16
 8003878:	613b      	str	r3, [r7, #16]
        break;
 800387a:	e032      	b.n	80038e2 <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	4a3e      	ldr	r2, [pc, #248]	; (800397c <HAL_DAC_Start_DMA+0x190>)
 8003882:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	4a3d      	ldr	r2, [pc, #244]	; (8003980 <HAL_DAC_Start_DMA+0x194>)
 800388a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	4a3c      	ldr	r2, [pc, #240]	; (8003984 <HAL_DAC_Start_DMA+0x198>)
 8003892:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80038a2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	d013      	beq.n	80038d2 <HAL_DAC_Start_DMA+0xe6>
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d817      	bhi.n	80038e0 <HAL_DAC_Start_DMA+0xf4>
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_DAC_Start_DMA+0xd2>
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d005      	beq.n	80038c8 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80038bc:	e010      	b.n	80038e0 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3314      	adds	r3, #20
 80038c4:	613b      	str	r3, [r7, #16]
        break;
 80038c6:	e00c      	b.n	80038e2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3318      	adds	r3, #24
 80038ce:	613b      	str	r3, [r7, #16]
        break;
 80038d0:	e007      	b.n	80038e2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	331c      	adds	r3, #28
 80038d8:	613b      	str	r3, [r7, #16]
        break;
 80038da:	e002      	b.n	80038e2 <HAL_DAC_Start_DMA+0xf6>
        break;
 80038dc:	bf00      	nop
 80038de:	e000      	b.n	80038e2 <HAL_DAC_Start_DMA+0xf6>
        break;
 80038e0:	bf00      	nop
    }
  }


  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d111      	bne.n	800390c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038f6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6898      	ldr	r0, [r3, #8]
 80038fc:	6879      	ldr	r1, [r7, #4]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	f000 fbad 	bl	8004060 <HAL_DMA_Start_IT>
 8003906:	4603      	mov	r3, r0
 8003908:	75fb      	strb	r3, [r7, #23]
 800390a:	e010      	b.n	800392e <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800391a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	68d8      	ldr	r0, [r3, #12]
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	f000 fb9b 	bl	8004060 <HAL_DMA_Start_IT>
 800392a:	4603      	mov	r3, r0
 800392c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003934:	7dfb      	ldrb	r3, [r7, #23]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10f      	bne.n	800395a <HAL_DAC_Start_DMA+0x16e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6819      	ldr	r1, [r3, #0]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f003 0310 	and.w	r3, r3, #16
 8003946:	2201      	movs	r2, #1
 8003948:	409a      	lsls	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8003952:	2001      	movs	r0, #1
 8003954:	f7fe fa60 	bl	8001e18 <HAL_Delay>
 8003958:	e005      	b.n	8003966 <HAL_DAC_Start_DMA+0x17a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f043 0204 	orr.w	r2, r3, #4
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003966:	7dfb      	ldrb	r3, [r7, #23]
}
 8003968:	4618      	mov	r0, r3
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	08003dfd 	.word	0x08003dfd
 8003974:	08003e1f 	.word	0x08003e1f
 8003978:	08003e3b 	.word	0x08003e3b
 800397c:	08003ea5 	.word	0x08003ea5
 8003980:	08003ec7 	.word	0x08003ec7
 8003984:	08003ee3 	.word	0x08003ee3

08003988 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6819      	ldr	r1, [r3, #0]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	f003 0310 	and.w	r3, r3, #16
 800399e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	43da      	mvns	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	400a      	ands	r2, r1
 80039ae:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6819      	ldr	r1, [r3, #0]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	f003 0310 	and.w	r3, r3, #16
 80039bc:	2201      	movs	r2, #1
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	43da      	mvns	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	400a      	ands	r2, r1
 80039ca:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 80039cc:	2001      	movs	r0, #1
 80039ce:	f7fe fa23 	bl	8001e18 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10d      	bne.n	80039f4 <HAL_DAC_Stop_DMA+0x6c>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 fbba 	bl	8004156 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	e00c      	b.n	8003a0e <HAL_DAC_Stop_DMA+0x86>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 fbac 	bl	8004156 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003a0c:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b087      	sub	sp, #28
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	60f8      	str	r0, [r7, #12]
 8003a26:	60b9      	str	r1, [r7, #8]
 8003a28:	607a      	str	r2, [r7, #4]
 8003a2a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d105      	bne.n	8003a4e <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4413      	add	r3, r2
 8003a48:	3308      	adds	r3, #8
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	e004      	b.n	8003a58 <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4413      	add	r3, r2
 8003a54:	3314      	adds	r3, #20
 8003a56:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	371c      	adds	r7, #28
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
	...

08003aac <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08a      	sub	sp, #40	; 0x28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	795b      	ldrb	r3, [r3, #5]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_DAC_ConfigChannel+0x18>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e192      	b.n	8003dea <HAL_DAC_ConfigChannel+0x33e>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2202      	movs	r2, #2
 8003ace:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d174      	bne.n	8003bc2 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003ad8:	f7fe f992 	bl	8001e00 <HAL_GetTick>
 8003adc:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d134      	bne.n	8003b4e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003ae4:	e011      	b.n	8003b0a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003ae6:	f7fe f98b 	bl	8001e00 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d90a      	bls.n	8003b0a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	f043 0208 	orr.w	r2, r3, #8
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2203      	movs	r2, #3
 8003b04:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e16f      	b.n	8003dea <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1e6      	bne.n	8003ae6 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8003b18:	2001      	movs	r0, #1
 8003b1a:	f7fe f97d 	bl	8001e18 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b26:	641a      	str	r2, [r3, #64]	; 0x40
 8003b28:	e01e      	b.n	8003b68 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003b2a:	f7fe f969 	bl	8001e00 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d90a      	bls.n	8003b4e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	f043 0208 	orr.w	r2, r3, #8
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2203      	movs	r2, #3
 8003b48:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e14d      	b.n	8003dea <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	dbe8      	blt.n	8003b2a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003b58:	2001      	movs	r0, #1
 8003b5a:	f7fe f95d 	bl	8001e18 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b66:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f003 0310 	and.w	r3, r3, #16
 8003b74:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003b78:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	ea02 0103 	and.w	r1, r2, r3
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	409a      	lsls	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f003 0310 	and.w	r3, r3, #16
 8003ba2:	21ff      	movs	r1, #255	; 0xff
 8003ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	ea02 0103 	and.w	r1, r2, r3
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f003 0310 	and.w	r3, r3, #16
 8003bb8:	409a      	lsls	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d11d      	bne.n	8003c06 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f003 0310 	and.w	r3, r3, #16
 8003bd8:	221f      	movs	r2, #31
 8003bda:	fa02 f303 	lsl.w	r3, r2, r3
 8003bde:	43db      	mvns	r3, r3
 8003be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be2:	4013      	ands	r3, r2
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f003 0310 	and.w	r3, r3, #16
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c04:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f003 0310 	and.w	r3, r3, #16
 8003c14:	2207      	movs	r2, #7
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c1e:	4013      	ands	r3, r2
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d102      	bne.n	8003c30 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	623b      	str	r3, [r7, #32]
 8003c2e:	e00f      	b.n	8003c50 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d102      	bne.n	8003c3e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	623b      	str	r3, [r7, #32]
 8003c3c:	e008      	b.n	8003c50 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d102      	bne.n	8003c4c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003c46:	2301      	movs	r3, #1
 8003c48:	623b      	str	r3, [r7, #32]
 8003c4a:	e001      	b.n	8003c50 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	6a3a      	ldr	r2, [r7, #32]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f003 0310 	and.w	r3, r3, #16
 8003c66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c72:	4013      	ands	r3, r2
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	791b      	ldrb	r3, [r3, #4]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d102      	bne.n	8003c84 <HAL_DAC_ConfigChannel+0x1d8>
 8003c7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c82:	e000      	b.n	8003c86 <HAL_DAC_ConfigChannel+0x1da>
 8003c84:	2300      	movs	r3, #0
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f003 0310 	and.w	r3, r3, #16
 8003c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	43db      	mvns	r3, r3
 8003c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	795b      	ldrb	r3, [r3, #5]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d102      	bne.n	8003cb0 <HAL_DAC_ConfigChannel+0x204>
 8003caa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cae:	e000      	b.n	8003cb2 <HAL_DAC_ConfigChannel+0x206>
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003cbe:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d114      	bne.n	8003cf2 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003cc8:	f003 f89c 	bl	8006e04 <HAL_RCC_GetHCLKFreq>
 8003ccc:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	4a48      	ldr	r2, [pc, #288]	; (8003df4 <HAL_DAC_ConfigChannel+0x348>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d904      	bls.n	8003ce0 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cde:	e00f      	b.n	8003d00 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	4a45      	ldr	r2, [pc, #276]	; (8003df8 <HAL_DAC_ConfigChannel+0x34c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d90a      	bls.n	8003cfe <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cee:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf0:	e006      	b.n	8003d00 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8003cfc:	e000      	b.n	8003d00 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003cfe:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f003 0310 	and.w	r3, r3, #16
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6819      	ldr	r1, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f003 0310 	and.w	r3, r3, #16
 8003d26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	43da      	mvns	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	400a      	ands	r2, r1
 8003d36:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d52:	4013      	ands	r3, r2
 8003d54:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f003 0310 	and.w	r3, r3, #16
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d74:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6819      	ldr	r1, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f003 0310 	and.w	r3, r3, #16
 8003d82:	22c0      	movs	r2, #192	; 0xc0
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	43da      	mvns	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	400a      	ands	r2, r1
 8003d90:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	089b      	lsrs	r3, r3, #2
 8003d98:	f003 030f 	and.w	r3, r3, #15
 8003d9c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	089b      	lsrs	r3, r3, #2
 8003da4:	021b      	lsls	r3, r3, #8
 8003da6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f003 0310 	and.w	r3, r3, #16
 8003dbc:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	ea02 0103 	and.w	r1, r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f003 0310 	and.w	r3, r3, #16
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	409a      	lsls	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2201      	movs	r2, #1
 8003de0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3728      	adds	r7, #40	; 0x28
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	09896800 	.word	0x09896800
 8003df8:	04c4b400 	.word	0x04c4b400

08003dfc <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e08:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f7ff fe2f 	bl	8003a6e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2201      	movs	r2, #1
 8003e14:	711a      	strb	r2, [r3, #4]
}
 8003e16:	bf00      	nop
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b084      	sub	sp, #16
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f7ff fe28 	bl	8003a82 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003e32:	bf00      	nop
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b084      	sub	sp, #16
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	f043 0204 	orr.w	r2, r3, #4
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f7ff fe1e 	bl	8003a96 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	711a      	strb	r2, [r3, #4]
}
 8003e60:	bf00      	nop
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f7ff ffd8 	bl	8003e68 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	711a      	strb	r2, [r3, #4]
}
 8003ebe:	bf00      	nop
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f7ff ffd1 	bl	8003e7c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003eda:	bf00      	nop
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b084      	sub	sp, #16
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	f043 0204 	orr.w	r2, r3, #4
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f7ff ffc7 	bl	8003e90 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2201      	movs	r2, #1
 8003f06:	711a      	strb	r2, [r3, #4]
}
 8003f08:	bf00      	nop
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e08d      	b.n	800403e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	4b47      	ldr	r3, [pc, #284]	; (8004048 <HAL_DMA_Init+0x138>)
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d80f      	bhi.n	8003f4e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	461a      	mov	r2, r3
 8003f34:	4b45      	ldr	r3, [pc, #276]	; (800404c <HAL_DMA_Init+0x13c>)
 8003f36:	4413      	add	r3, r2
 8003f38:	4a45      	ldr	r2, [pc, #276]	; (8004050 <HAL_DMA_Init+0x140>)
 8003f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3e:	091b      	lsrs	r3, r3, #4
 8003f40:	009a      	lsls	r2, r3, #2
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a42      	ldr	r2, [pc, #264]	; (8004054 <HAL_DMA_Init+0x144>)
 8003f4a:	641a      	str	r2, [r3, #64]	; 0x40
 8003f4c:	e00e      	b.n	8003f6c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	461a      	mov	r2, r3
 8003f54:	4b40      	ldr	r3, [pc, #256]	; (8004058 <HAL_DMA_Init+0x148>)
 8003f56:	4413      	add	r3, r2
 8003f58:	4a3d      	ldr	r2, [pc, #244]	; (8004050 <HAL_DMA_Init+0x140>)
 8003f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5e:	091b      	lsrs	r3, r3, #4
 8003f60:	009a      	lsls	r2, r3, #2
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a3c      	ldr	r2, [pc, #240]	; (800405c <HAL_DMA_Init+0x14c>)
 8003f6a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f86:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003f90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fa8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fa76 	bl	80044b0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fcc:	d102      	bne.n	8003fd4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fdc:	b2d2      	uxtb	r2, r2
 8003fde:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003fe8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d010      	beq.n	8004014 <HAL_DMA_Init+0x104>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d80c      	bhi.n	8004014 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fa96 	bl	800452c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004010:	605a      	str	r2, [r3, #4]
 8004012:	e008      	b.n	8004026 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40020407 	.word	0x40020407
 800404c:	bffdfff8 	.word	0xbffdfff8
 8004050:	cccccccd 	.word	0xcccccccd
 8004054:	40020000 	.word	0x40020000
 8004058:	bffdfbf8 	.word	0xbffdfbf8
 800405c:	40020400 	.word	0x40020400

08004060 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
 800406c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004078:	2b01      	cmp	r3, #1
 800407a:	d101      	bne.n	8004080 <HAL_DMA_Start_IT+0x20>
 800407c:	2302      	movs	r3, #2
 800407e:	e066      	b.n	800414e <HAL_DMA_Start_IT+0xee>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b01      	cmp	r3, #1
 8004092:	d155      	bne.n	8004140 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0201 	bic.w	r2, r2, #1
 80040b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	68b9      	ldr	r1, [r7, #8]
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 f9bb 	bl	8004434 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d008      	beq.n	80040d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f042 020e 	orr.w	r2, r2, #14
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	e00f      	b.n	80040f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0204 	bic.w	r2, r2, #4
 80040e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 020a 	orr.w	r2, r2, #10
 80040f6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d007      	beq.n	8004116 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004110:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004114:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411a:	2b00      	cmp	r3, #0
 800411c:	d007      	beq.n	800412e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004128:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800412c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f042 0201 	orr.w	r2, r2, #1
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	e005      	b.n	800414c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004148:	2302      	movs	r3, #2
 800414a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800414c:	7dfb      	ldrb	r3, [r7, #23]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004156:	b480      	push	{r7}
 8004158:	b085      	sub	sp, #20
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d005      	beq.n	800417a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2204      	movs	r2, #4
 8004172:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	73fb      	strb	r3, [r7, #15]
 8004178:	e037      	b.n	80041ea <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 020e 	bic.w	r2, r2, #14
 8004188:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004194:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004198:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0201 	bic.w	r2, r2, #1
 80041a8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ae:	f003 021f 	and.w	r2, r3, #31
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	2101      	movs	r1, #1
 80041b8:	fa01 f202 	lsl.w	r2, r1, r2
 80041bc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041c6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00c      	beq.n	80041ea <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041de:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80041e8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004210:	2300      	movs	r3, #0
 8004212:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d00d      	beq.n	800423c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2204      	movs	r2, #4
 8004224:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	73fb      	strb	r3, [r7, #15]
 800423a:	e047      	b.n	80042cc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 020e 	bic.w	r2, r2, #14
 800424a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0201 	bic.w	r2, r2, #1
 800425a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004266:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800426a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004270:	f003 021f 	and.w	r2, r3, #31
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	2101      	movs	r1, #1
 800427a:	fa01 f202 	lsl.w	r2, r1, r2
 800427e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004288:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00c      	beq.n	80042ac <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80042aa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d003      	beq.n	80042cc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	4798      	blx	r3
    }
  }
  return status;
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b084      	sub	sp, #16
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	2204      	movs	r2, #4
 80042f8:	409a      	lsls	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4013      	ands	r3, r2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d026      	beq.n	8004350 <HAL_DMA_IRQHandler+0x7a>
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	d021      	beq.n	8004350 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0320 	and.w	r3, r3, #32
 8004316:	2b00      	cmp	r3, #0
 8004318:	d107      	bne.n	800432a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0204 	bic.w	r2, r2, #4
 8004328:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432e:	f003 021f 	and.w	r2, r3, #31
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	2104      	movs	r1, #4
 8004338:	fa01 f202 	lsl.w	r2, r1, r2
 800433c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004342:	2b00      	cmp	r3, #0
 8004344:	d071      	beq.n	800442a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800434e:	e06c      	b.n	800442a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004354:	f003 031f 	and.w	r3, r3, #31
 8004358:	2202      	movs	r2, #2
 800435a:	409a      	lsls	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4013      	ands	r3, r2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d02e      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d029      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0320 	and.w	r3, r3, #32
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10b      	bne.n	8004394 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 020a 	bic.w	r2, r2, #10
 800438a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004398:	f003 021f 	and.w	r2, r3, #31
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	2102      	movs	r1, #2
 80043a2:	fa01 f202 	lsl.w	r2, r1, r2
 80043a6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d038      	beq.n	800442a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80043c0:	e033      	b.n	800442a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c6:	f003 031f 	and.w	r3, r3, #31
 80043ca:	2208      	movs	r2, #8
 80043cc:	409a      	lsls	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	4013      	ands	r3, r2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d02a      	beq.n	800442c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f003 0308 	and.w	r3, r3, #8
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d025      	beq.n	800442c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 020e 	bic.w	r2, r2, #14
 80043ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f4:	f003 021f 	and.w	r2, r3, #31
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fc:	2101      	movs	r1, #1
 80043fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004402:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441e:	2b00      	cmp	r3, #0
 8004420:	d004      	beq.n	800442c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800442a:	bf00      	nop
 800442c:	bf00      	nop
}
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
 8004440:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800444a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004450:	2b00      	cmp	r3, #0
 8004452:	d004      	beq.n	800445e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800445c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004462:	f003 021f 	and.w	r2, r3, #31
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	2101      	movs	r1, #1
 800446c:	fa01 f202 	lsl.w	r2, r1, r2
 8004470:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	2b10      	cmp	r3, #16
 8004480:	d108      	bne.n	8004494 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004492:	e007      	b.n	80044a4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	60da      	str	r2, [r3, #12]
}
 80044a4:	bf00      	nop
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	461a      	mov	r2, r3
 80044be:	4b16      	ldr	r3, [pc, #88]	; (8004518 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d802      	bhi.n	80044ca <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80044c4:	4b15      	ldr	r3, [pc, #84]	; (800451c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	e001      	b.n	80044ce <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80044ca:	4b15      	ldr	r3, [pc, #84]	; (8004520 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80044cc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	3b08      	subs	r3, #8
 80044da:	4a12      	ldr	r2, [pc, #72]	; (8004524 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80044dc:	fba2 2303 	umull	r2, r3, r2, r3
 80044e0:	091b      	lsrs	r3, r3, #4
 80044e2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e8:	089b      	lsrs	r3, r3, #2
 80044ea:	009a      	lsls	r2, r3, #2
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	4413      	add	r3, r2
 80044f0:	461a      	mov	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a0b      	ldr	r2, [pc, #44]	; (8004528 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80044fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f003 031f 	and.w	r3, r3, #31
 8004502:	2201      	movs	r2, #1
 8004504:	409a      	lsls	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	651a      	str	r2, [r3, #80]	; 0x50
}
 800450a:	bf00      	nop
 800450c:	371c      	adds	r7, #28
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40020407 	.word	0x40020407
 800451c:	40020800 	.word	0x40020800
 8004520:	40020820 	.word	0x40020820
 8004524:	cccccccd 	.word	0xcccccccd
 8004528:	40020880 	.word	0x40020880

0800452c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	b2db      	uxtb	r3, r3
 800453a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	4b0b      	ldr	r3, [pc, #44]	; (800456c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004540:	4413      	add	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	461a      	mov	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a08      	ldr	r2, [pc, #32]	; (8004570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800454e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	3b01      	subs	r3, #1
 8004554:	f003 031f 	and.w	r3, r3, #31
 8004558:	2201      	movs	r2, #1
 800455a:	409a      	lsls	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004560:	bf00      	nop
 8004562:	3714      	adds	r7, #20
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	1000823f 	.word	0x1000823f
 8004570:	40020940 	.word	0x40020940

08004574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800457e:	2300      	movs	r3, #0
 8004580:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004582:	e15a      	b.n	800483a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	2101      	movs	r1, #1
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	fa01 f303 	lsl.w	r3, r1, r3
 8004590:	4013      	ands	r3, r2
 8004592:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 814c 	beq.w	8004834 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f003 0303 	and.w	r3, r3, #3
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d005      	beq.n	80045b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d130      	bne.n	8004616 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	2203      	movs	r2, #3
 80045c0:	fa02 f303 	lsl.w	r3, r2, r3
 80045c4:	43db      	mvns	r3, r3
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	4013      	ands	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	68da      	ldr	r2, [r3, #12]
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4313      	orrs	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045ea:	2201      	movs	r2, #1
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	43db      	mvns	r3, r3
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4013      	ands	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	091b      	lsrs	r3, r3, #4
 8004600:	f003 0201 	and.w	r2, r3, #1
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4313      	orrs	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f003 0303 	and.w	r3, r3, #3
 800461e:	2b03      	cmp	r3, #3
 8004620:	d017      	beq.n	8004652 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	2203      	movs	r2, #3
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
 8004632:	43db      	mvns	r3, r3
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	4013      	ands	r3, r2
 8004638:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	689a      	ldr	r2, [r3, #8]
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	4313      	orrs	r3, r2
 800464a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d123      	bne.n	80046a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	08da      	lsrs	r2, r3, #3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	3208      	adds	r2, #8
 8004666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800466a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f003 0307 	and.w	r3, r3, #7
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	220f      	movs	r2, #15
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
 800467a:	43db      	mvns	r3, r3
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	4013      	ands	r3, r2
 8004680:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	691a      	ldr	r2, [r3, #16]
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	fa02 f303 	lsl.w	r3, r2, r3
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	4313      	orrs	r3, r2
 8004696:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	08da      	lsrs	r2, r3, #3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	3208      	adds	r2, #8
 80046a0:	6939      	ldr	r1, [r7, #16]
 80046a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	2203      	movs	r2, #3
 80046b2:	fa02 f303 	lsl.w	r3, r2, r3
 80046b6:	43db      	mvns	r3, r3
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	4013      	ands	r3, r2
 80046bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f003 0203 	and.w	r2, r3, #3
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 80a6 	beq.w	8004834 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046e8:	4b5b      	ldr	r3, [pc, #364]	; (8004858 <HAL_GPIO_Init+0x2e4>)
 80046ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ec:	4a5a      	ldr	r2, [pc, #360]	; (8004858 <HAL_GPIO_Init+0x2e4>)
 80046ee:	f043 0301 	orr.w	r3, r3, #1
 80046f2:	6613      	str	r3, [r2, #96]	; 0x60
 80046f4:	4b58      	ldr	r3, [pc, #352]	; (8004858 <HAL_GPIO_Init+0x2e4>)
 80046f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	60bb      	str	r3, [r7, #8]
 80046fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004700:	4a56      	ldr	r2, [pc, #344]	; (800485c <HAL_GPIO_Init+0x2e8>)
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	089b      	lsrs	r3, r3, #2
 8004706:	3302      	adds	r3, #2
 8004708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800470c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f003 0303 	and.w	r3, r3, #3
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	220f      	movs	r2, #15
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	43db      	mvns	r3, r3
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4013      	ands	r3, r2
 8004722:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800472a:	d01f      	beq.n	800476c <HAL_GPIO_Init+0x1f8>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a4c      	ldr	r2, [pc, #304]	; (8004860 <HAL_GPIO_Init+0x2ec>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d019      	beq.n	8004768 <HAL_GPIO_Init+0x1f4>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a4b      	ldr	r2, [pc, #300]	; (8004864 <HAL_GPIO_Init+0x2f0>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d013      	beq.n	8004764 <HAL_GPIO_Init+0x1f0>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a4a      	ldr	r2, [pc, #296]	; (8004868 <HAL_GPIO_Init+0x2f4>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00d      	beq.n	8004760 <HAL_GPIO_Init+0x1ec>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a49      	ldr	r2, [pc, #292]	; (800486c <HAL_GPIO_Init+0x2f8>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d007      	beq.n	800475c <HAL_GPIO_Init+0x1e8>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a48      	ldr	r2, [pc, #288]	; (8004870 <HAL_GPIO_Init+0x2fc>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d101      	bne.n	8004758 <HAL_GPIO_Init+0x1e4>
 8004754:	2305      	movs	r3, #5
 8004756:	e00a      	b.n	800476e <HAL_GPIO_Init+0x1fa>
 8004758:	2306      	movs	r3, #6
 800475a:	e008      	b.n	800476e <HAL_GPIO_Init+0x1fa>
 800475c:	2304      	movs	r3, #4
 800475e:	e006      	b.n	800476e <HAL_GPIO_Init+0x1fa>
 8004760:	2303      	movs	r3, #3
 8004762:	e004      	b.n	800476e <HAL_GPIO_Init+0x1fa>
 8004764:	2302      	movs	r3, #2
 8004766:	e002      	b.n	800476e <HAL_GPIO_Init+0x1fa>
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <HAL_GPIO_Init+0x1fa>
 800476c:	2300      	movs	r3, #0
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	f002 0203 	and.w	r2, r2, #3
 8004774:	0092      	lsls	r2, r2, #2
 8004776:	4093      	lsls	r3, r2
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	4313      	orrs	r3, r2
 800477c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800477e:	4937      	ldr	r1, [pc, #220]	; (800485c <HAL_GPIO_Init+0x2e8>)
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	089b      	lsrs	r3, r3, #2
 8004784:	3302      	adds	r3, #2
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800478c:	4b39      	ldr	r3, [pc, #228]	; (8004874 <HAL_GPIO_Init+0x300>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	43db      	mvns	r3, r3
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	4013      	ands	r3, r2
 800479a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80047b0:	4a30      	ldr	r2, [pc, #192]	; (8004874 <HAL_GPIO_Init+0x300>)
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80047b6:	4b2f      	ldr	r3, [pc, #188]	; (8004874 <HAL_GPIO_Init+0x300>)
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	43db      	mvns	r3, r3
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	4013      	ands	r3, r2
 80047c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047da:	4a26      	ldr	r2, [pc, #152]	; (8004874 <HAL_GPIO_Init+0x300>)
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80047e0:	4b24      	ldr	r3, [pc, #144]	; (8004874 <HAL_GPIO_Init+0x300>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	43db      	mvns	r3, r3
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	4013      	ands	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d003      	beq.n	8004804 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4313      	orrs	r3, r2
 8004802:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004804:	4a1b      	ldr	r2, [pc, #108]	; (8004874 <HAL_GPIO_Init+0x300>)
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800480a:	4b1a      	ldr	r3, [pc, #104]	; (8004874 <HAL_GPIO_Init+0x300>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	43db      	mvns	r3, r3
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	4013      	ands	r3, r2
 8004818:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4313      	orrs	r3, r2
 800482c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800482e:	4a11      	ldr	r2, [pc, #68]	; (8004874 <HAL_GPIO_Init+0x300>)
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	3301      	adds	r3, #1
 8004838:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	fa22 f303 	lsr.w	r3, r2, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	f47f ae9d 	bne.w	8004584 <HAL_GPIO_Init+0x10>
  }
}
 800484a:	bf00      	nop
 800484c:	bf00      	nop
 800484e:	371c      	adds	r7, #28
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	40021000 	.word	0x40021000
 800485c:	40010000 	.word	0x40010000
 8004860:	48000400 	.word	0x48000400
 8004864:	48000800 	.word	0x48000800
 8004868:	48000c00 	.word	0x48000c00
 800486c:	48001000 	.word	0x48001000
 8004870:	48001400 	.word	0x48001400
 8004874:	40010400 	.word	0x40010400

08004878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	460b      	mov	r3, r1
 8004882:	807b      	strh	r3, [r7, #2]
 8004884:	4613      	mov	r3, r2
 8004886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004888:	787b      	ldrb	r3, [r7, #1]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800488e:	887a      	ldrh	r2, [r7, #2]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004894:	e002      	b.n	800489c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004896:	887a      	ldrh	r2, [r7, #2]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	4603      	mov	r3, r0
 80048b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80048b2:	4b08      	ldr	r3, [pc, #32]	; (80048d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048b4:	695a      	ldr	r2, [r3, #20]
 80048b6:	88fb      	ldrh	r3, [r7, #6]
 80048b8:	4013      	ands	r3, r2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d006      	beq.n	80048cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048be:	4a05      	ldr	r2, [pc, #20]	; (80048d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048c0:	88fb      	ldrh	r3, [r7, #6]
 80048c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048c4:	88fb      	ldrh	r3, [r7, #6]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 f806 	bl	80048d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80048cc:	bf00      	nop
 80048ce:	3708      	adds	r7, #8
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40010400 	.word	0x40010400

080048d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	4603      	mov	r3, r0
 80048e0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80048ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048f0:	b08b      	sub	sp, #44	; 0x2c
 80048f2:	af06      	add	r7, sp, #24
 80048f4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e0d7      	b.n	8004ab0 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b00      	cmp	r3, #0
 800490a:	d106      	bne.n	800491a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f008 ffa7 	bl	800d868 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2203      	movs	r2, #3
 800491e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4618      	mov	r0, r3
 8004928:	f004 fe61 	bl	80095ee <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800492c:	2300      	movs	r3, #0
 800492e:	73fb      	strb	r3, [r7, #15]
 8004930:	e04c      	b.n	80049cc <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004932:	7bfb      	ldrb	r3, [r7, #15]
 8004934:	6879      	ldr	r1, [r7, #4]
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	4613      	mov	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	440b      	add	r3, r1
 8004942:	3301      	adds	r3, #1
 8004944:	2201      	movs	r2, #1
 8004946:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004948:	7bfb      	ldrb	r3, [r7, #15]
 800494a:	6879      	ldr	r1, [r7, #4]
 800494c:	1c5a      	adds	r2, r3, #1
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	00db      	lsls	r3, r3, #3
 8004956:	440b      	add	r3, r1
 8004958:	7bfa      	ldrb	r2, [r7, #15]
 800495a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800495c:	7bfa      	ldrb	r2, [r7, #15]
 800495e:	7bfb      	ldrb	r3, [r7, #15]
 8004960:	b298      	uxth	r0, r3
 8004962:	6879      	ldr	r1, [r7, #4]
 8004964:	4613      	mov	r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	440b      	add	r3, r1
 800496e:	3336      	adds	r3, #54	; 0x36
 8004970:	4602      	mov	r2, r0
 8004972:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004974:	7bfb      	ldrb	r3, [r7, #15]
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	4613      	mov	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	00db      	lsls	r3, r3, #3
 8004982:	440b      	add	r3, r1
 8004984:	3303      	adds	r3, #3
 8004986:	2200      	movs	r2, #0
 8004988:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800498a:	7bfa      	ldrb	r2, [r7, #15]
 800498c:	6879      	ldr	r1, [r7, #4]
 800498e:	4613      	mov	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4413      	add	r3, r2
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	440b      	add	r3, r1
 8004998:	3338      	adds	r3, #56	; 0x38
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800499e:	7bfa      	ldrb	r2, [r7, #15]
 80049a0:	6879      	ldr	r1, [r7, #4]
 80049a2:	4613      	mov	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	440b      	add	r3, r1
 80049ac:	333c      	adds	r3, #60	; 0x3c
 80049ae:	2200      	movs	r2, #0
 80049b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80049b2:	7bfa      	ldrb	r2, [r7, #15]
 80049b4:	6879      	ldr	r1, [r7, #4]
 80049b6:	4613      	mov	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	00db      	lsls	r3, r3, #3
 80049be:	440b      	add	r3, r1
 80049c0:	3340      	adds	r3, #64	; 0x40
 80049c2:	2200      	movs	r2, #0
 80049c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	3301      	adds	r3, #1
 80049ca:	73fb      	strb	r3, [r7, #15]
 80049cc:	7bfa      	ldrb	r2, [r7, #15]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d3ad      	bcc.n	8004932 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049d6:	2300      	movs	r3, #0
 80049d8:	73fb      	strb	r3, [r7, #15]
 80049da:	e044      	b.n	8004a66 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80049dc:	7bfa      	ldrb	r2, [r7, #15]
 80049de:	6879      	ldr	r1, [r7, #4]
 80049e0:	4613      	mov	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4413      	add	r3, r2
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	440b      	add	r3, r1
 80049ea:	f203 1369 	addw	r3, r3, #361	; 0x169
 80049ee:	2200      	movs	r2, #0
 80049f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80049f2:	7bfa      	ldrb	r2, [r7, #15]
 80049f4:	6879      	ldr	r1, [r7, #4]
 80049f6:	4613      	mov	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	440b      	add	r3, r1
 8004a00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a04:	7bfa      	ldrb	r2, [r7, #15]
 8004a06:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a08:	7bfa      	ldrb	r2, [r7, #15]
 8004a0a:	6879      	ldr	r1, [r7, #4]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4413      	add	r3, r2
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	440b      	add	r3, r1
 8004a16:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a1e:	7bfa      	ldrb	r2, [r7, #15]
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	4613      	mov	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	440b      	add	r3, r1
 8004a2c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a34:	7bfa      	ldrb	r2, [r7, #15]
 8004a36:	6879      	ldr	r1, [r7, #4]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	440b      	add	r3, r1
 8004a42:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004a46:	2200      	movs	r2, #0
 8004a48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a4a:	7bfa      	ldrb	r2, [r7, #15]
 8004a4c:	6879      	ldr	r1, [r7, #4]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	440b      	add	r3, r1
 8004a58:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a60:	7bfb      	ldrb	r3, [r7, #15]
 8004a62:	3301      	adds	r3, #1
 8004a64:	73fb      	strb	r3, [r7, #15]
 8004a66:	7bfa      	ldrb	r2, [r7, #15]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d3b5      	bcc.n	80049dc <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	603b      	str	r3, [r7, #0]
 8004a76:	687e      	ldr	r6, [r7, #4]
 8004a78:	466d      	mov	r5, sp
 8004a7a:	f106 0410 	add.w	r4, r6, #16
 8004a7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	602b      	str	r3, [r5, #0]
 8004a86:	1d33      	adds	r3, r6, #4
 8004a88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a8a:	6838      	ldr	r0, [r7, #0]
 8004a8c:	f004 fdca 	bl	8009624 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d102      	bne.n	8004aae <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f001 fc29 	bl	8006300 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ab8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d101      	bne.n	8004ace <HAL_PCD_Start+0x16>
 8004aca:	2302      	movs	r3, #2
 8004acc:	e012      	b.n	8004af4 <HAL_PCD_Start+0x3c>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f004 fd70 	bl	80095c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f006 ff89 	bl	800b9fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f006 ff8e 	bl	800ba2a <USB_ReadInterrupts>
 8004b0e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 fb26 	bl	800516c <PCD_EP_ISR_Handler>

    return;
 8004b20:	e110      	b.n	8004d44 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d013      	beq.n	8004b54 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b3e:	b292      	uxth	r2, r2
 8004b40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f008 ff20 	bl	800d98a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f8fc 	bl	8004d4a <HAL_PCD_SetAddress>

    return;
 8004b52:	e0f7      	b.n	8004d44 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00c      	beq.n	8004b78 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b70:	b292      	uxth	r2, r2
 8004b72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004b76:	e0e5      	b.n	8004d44 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00c      	beq.n	8004b9c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b94:	b292      	uxth	r2, r2
 8004b96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004b9a:	e0d3      	b.n	8004d44 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d034      	beq.n	8004c10 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 0204 	bic.w	r2, r2, #4
 8004bb8:	b292      	uxth	r2, r2
 8004bba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 0208 	bic.w	r2, r2, #8
 8004bd0:	b292      	uxth	r2, r2
 8004bd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d107      	bne.n	8004bf0 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004be8:	2100      	movs	r1, #0
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f009 f8c2 	bl	800dd74 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f008 ff03 	bl	800d9fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c08:	b292      	uxth	r2, r2
 8004c0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004c0e:	e099      	b.n	8004d44 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d027      	beq.n	8004c6a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f042 0208 	orr.w	r2, r2, #8
 8004c2c:	b292      	uxth	r2, r2
 8004c2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c44:	b292      	uxth	r2, r2
 8004c46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f042 0204 	orr.w	r2, r2, #4
 8004c5c:	b292      	uxth	r2, r2
 8004c5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f008 feb0 	bl	800d9c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004c68:	e06c      	b.n	8004d44 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d040      	beq.n	8004cf6 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c86:	b292      	uxth	r2, r2
 8004c88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d12b      	bne.n	8004cee <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f042 0204 	orr.w	r2, r2, #4
 8004ca8:	b292      	uxth	r2, r2
 8004caa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f042 0208 	orr.w	r2, r2, #8
 8004cc0:	b292      	uxth	r2, r2
 8004cc2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	089b      	lsrs	r3, r3, #2
 8004cda:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f009 f844 	bl	800dd74 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004cec:	e02a      	b.n	8004d44 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f008 fe6a 	bl	800d9c8 <HAL_PCD_SuspendCallback>
    return;
 8004cf4:	e026      	b.n	8004d44 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00f      	beq.n	8004d20 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d12:	b292      	uxth	r2, r2
 8004d14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f008 fe28 	bl	800d96e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004d1e:	e011      	b.n	8004d44 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00c      	beq.n	8004d44 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d3c:	b292      	uxth	r2, r2
 8004d3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004d42:	bf00      	nop
  }
}
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b082      	sub	sp, #8
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
 8004d52:	460b      	mov	r3, r1
 8004d54:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d101      	bne.n	8004d64 <HAL_PCD_SetAddress+0x1a>
 8004d60:	2302      	movs	r3, #2
 8004d62:	e013      	b.n	8004d8c <HAL_PCD_SetAddress+0x42>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	78fa      	ldrb	r2, [r7, #3]
 8004d70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	78fa      	ldrb	r2, [r7, #3]
 8004d7a:	4611      	mov	r1, r2
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f006 fe29 	bl	800b9d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	4608      	mov	r0, r1
 8004d9e:	4611      	mov	r1, r2
 8004da0:	461a      	mov	r2, r3
 8004da2:	4603      	mov	r3, r0
 8004da4:	70fb      	strb	r3, [r7, #3]
 8004da6:	460b      	mov	r3, r1
 8004da8:	803b      	strh	r3, [r7, #0]
 8004daa:	4613      	mov	r3, r2
 8004dac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004dae:	2300      	movs	r3, #0
 8004db0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004db2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	da0e      	bge.n	8004dd8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dba:	78fb      	ldrb	r3, [r7, #3]
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4413      	add	r3, r2
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	4413      	add	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	705a      	strb	r2, [r3, #1]
 8004dd6:	e00e      	b.n	8004df6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dd8:	78fb      	ldrb	r3, [r7, #3]
 8004dda:	f003 0207 	and.w	r2, r3, #7
 8004dde:	4613      	mov	r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	4413      	add	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004df6:	78fb      	ldrb	r3, [r7, #3]
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004e02:	883a      	ldrh	r2, [r7, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	78ba      	ldrb	r2, [r7, #2]
 8004e0c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	785b      	ldrb	r3, [r3, #1]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d004      	beq.n	8004e20 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004e20:	78bb      	ldrb	r3, [r7, #2]
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d102      	bne.n	8004e2c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d101      	bne.n	8004e3a <HAL_PCD_EP_Open+0xa6>
 8004e36:	2302      	movs	r3, #2
 8004e38:	e00e      	b.n	8004e58 <HAL_PCD_EP_Open+0xc4>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68f9      	ldr	r1, [r7, #12]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f004 fc0d 	bl	8009668 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004e56:	7afb      	ldrb	r3, [r7, #11]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	460b      	mov	r3, r1
 8004e6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	da0e      	bge.n	8004e92 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e74:	78fb      	ldrb	r3, [r7, #3]
 8004e76:	f003 0307 	and.w	r3, r3, #7
 8004e7a:	1c5a      	adds	r2, r3, #1
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	4413      	add	r3, r2
 8004e88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	705a      	strb	r2, [r3, #1]
 8004e90:	e00e      	b.n	8004eb0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e92:	78fb      	ldrb	r3, [r7, #3]
 8004e94:	f003 0207 	and.w	r2, r3, #7
 8004e98:	4613      	mov	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004eb0:	78fb      	ldrb	r3, [r7, #3]
 8004eb2:	f003 0307 	and.w	r3, r3, #7
 8004eb6:	b2da      	uxtb	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d101      	bne.n	8004eca <HAL_PCD_EP_Close+0x6a>
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	e00e      	b.n	8004ee8 <HAL_PCD_EP_Close+0x88>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68f9      	ldr	r1, [r7, #12]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f004 ff59 	bl	8009d90 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	607a      	str	r2, [r7, #4]
 8004efa:	603b      	str	r3, [r7, #0]
 8004efc:	460b      	mov	r3, r1
 8004efe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f00:	7afb      	ldrb	r3, [r7, #11]
 8004f02:	f003 0207 	and.w	r2, r3, #7
 8004f06:	4613      	mov	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	00db      	lsls	r3, r3, #3
 8004f0e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	4413      	add	r3, r2
 8004f16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	2200      	movs	r2, #0
 8004f28:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f30:	7afb      	ldrb	r3, [r7, #11]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f3c:	7afb      	ldrb	r3, [r7, #11]
 8004f3e:	f003 0307 	and.w	r3, r3, #7
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d106      	bne.n	8004f54 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6979      	ldr	r1, [r7, #20]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f005 f90c 	bl	800a16a <USB_EPStartXfer>
 8004f52:	e005      	b.n	8004f60 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6979      	ldr	r1, [r7, #20]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f005 f905 	bl	800a16a <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3718      	adds	r7, #24
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b083      	sub	sp, #12
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
 8004f72:	460b      	mov	r3, r1
 8004f74:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004f76:	78fb      	ldrb	r3, [r7, #3]
 8004f78:	f003 0207 	and.w	r2, r3, #7
 8004f7c:	6879      	ldr	r1, [r7, #4]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	440b      	add	r3, r1
 8004f88:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004f8c:	681b      	ldr	r3, [r3, #0]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b086      	sub	sp, #24
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	60f8      	str	r0, [r7, #12]
 8004fa2:	607a      	str	r2, [r7, #4]
 8004fa4:	603b      	str	r3, [r7, #0]
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004faa:	7afb      	ldrb	r3, [r7, #11]
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	4413      	add	r3, r2
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fe6:	7afb      	ldrb	r3, [r7, #11]
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ff2:	7afb      	ldrb	r3, [r7, #11]
 8004ff4:	f003 0307 	and.w	r3, r3, #7
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d106      	bne.n	800500a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6979      	ldr	r1, [r7, #20]
 8005002:	4618      	mov	r0, r3
 8005004:	f005 f8b1 	bl	800a16a <USB_EPStartXfer>
 8005008:	e005      	b.n	8005016 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6979      	ldr	r1, [r7, #20]
 8005010:	4618      	mov	r0, r3
 8005012:	f005 f8aa 	bl	800a16a <USB_EPStartXfer>
  }

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3718      	adds	r7, #24
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	460b      	mov	r3, r1
 800502a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800502c:	78fb      	ldrb	r3, [r7, #3]
 800502e:	f003 0207 	and.w	r2, r3, #7
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	429a      	cmp	r2, r3
 8005038:	d901      	bls.n	800503e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e03e      	b.n	80050bc <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800503e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005042:	2b00      	cmp	r3, #0
 8005044:	da0e      	bge.n	8005064 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005046:	78fb      	ldrb	r3, [r7, #3]
 8005048:	f003 0307 	and.w	r3, r3, #7
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	4613      	mov	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	00db      	lsls	r3, r3, #3
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	4413      	add	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2201      	movs	r2, #1
 8005060:	705a      	strb	r2, [r3, #1]
 8005062:	e00c      	b.n	800507e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005064:	78fa      	ldrb	r2, [r7, #3]
 8005066:	4613      	mov	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	00db      	lsls	r3, r3, #3
 800506e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	4413      	add	r3, r2
 8005076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2201      	movs	r2, #1
 8005082:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005084:	78fb      	ldrb	r3, [r7, #3]
 8005086:	f003 0307 	and.w	r3, r3, #7
 800508a:	b2da      	uxtb	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005096:	2b01      	cmp	r3, #1
 8005098:	d101      	bne.n	800509e <HAL_PCD_EP_SetStall+0x7e>
 800509a:	2302      	movs	r3, #2
 800509c:	e00e      	b.n	80050bc <HAL_PCD_EP_SetStall+0x9c>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68f9      	ldr	r1, [r7, #12]
 80050ac:	4618      	mov	r0, r3
 80050ae:	f006 fb92 	bl	800b7d6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	460b      	mov	r3, r1
 80050ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80050d0:	78fb      	ldrb	r3, [r7, #3]
 80050d2:	f003 020f 	and.w	r2, r3, #15
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d901      	bls.n	80050e2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e040      	b.n	8005164 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80050e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	da0e      	bge.n	8005108 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050ea:	78fb      	ldrb	r3, [r7, #3]
 80050ec:	f003 0307 	and.w	r3, r3, #7
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	4613      	mov	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	4413      	add	r3, r2
 80050fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2201      	movs	r2, #1
 8005104:	705a      	strb	r2, [r3, #1]
 8005106:	e00e      	b.n	8005126 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005108:	78fb      	ldrb	r3, [r7, #3]
 800510a:	f003 0207 	and.w	r2, r3, #7
 800510e:	4613      	mov	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	00db      	lsls	r3, r3, #3
 8005116:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	4413      	add	r3, r2
 800511e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800512c:	78fb      	ldrb	r3, [r7, #3]
 800512e:	f003 0307 	and.w	r3, r3, #7
 8005132:	b2da      	uxtb	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800513e:	2b01      	cmp	r3, #1
 8005140:	d101      	bne.n	8005146 <HAL_PCD_EP_ClrStall+0x82>
 8005142:	2302      	movs	r3, #2
 8005144:	e00e      	b.n	8005164 <HAL_PCD_EP_ClrStall+0xa0>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68f9      	ldr	r1, [r7, #12]
 8005154:	4618      	mov	r0, r3
 8005156:	f006 fb8f 	bl	800b878 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b096      	sub	sp, #88	; 0x58
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005174:	e39c      	b.n	80058b0 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800517e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005182:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005186:	b2db      	uxtb	r3, r3
 8005188:	f003 030f 	and.w	r3, r3, #15
 800518c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8005190:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005194:	2b00      	cmp	r3, #0
 8005196:	f040 815e 	bne.w	8005456 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800519a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800519e:	f003 0310 	and.w	r3, r3, #16
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d150      	bne.n	8005248 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	881b      	ldrh	r3, [r3, #0]
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80051b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b6:	81fb      	strh	r3, [r7, #14]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	89fb      	ldrh	r3, [r7, #14]
 80051be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3328      	adds	r3, #40	; 0x28
 80051ce:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051d8:	b29b      	uxth	r3, r3
 80051da:	461a      	mov	r2, r3
 80051dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	00db      	lsls	r3, r3, #3
 80051e2:	4413      	add	r3, r2
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6812      	ldr	r2, [r2, #0]
 80051e8:	4413      	add	r3, r2
 80051ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80051ee:	881b      	ldrh	r3, [r3, #0]
 80051f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80051f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051f6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80051f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051fa:	695a      	ldr	r2, [r3, #20]
 80051fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	441a      	add	r2, r3
 8005202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005204:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005206:	2100      	movs	r1, #0
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f008 fb96 	bl	800d93a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 834a 	beq.w	80058b0 <PCD_EP_ISR_Handler+0x744>
 800521c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	2b00      	cmp	r3, #0
 8005222:	f040 8345 	bne.w	80058b0 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800522c:	b2db      	uxtb	r3, r3
 800522e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005232:	b2da      	uxtb	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	b292      	uxth	r2, r2
 800523a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005246:	e333      	b.n	80058b0 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800524e:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	881b      	ldrh	r3, [r3, #0]
 8005256:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800525a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800525e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005262:	2b00      	cmp	r3, #0
 8005264:	d032      	beq.n	80052cc <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800526e:	b29b      	uxth	r3, r3
 8005270:	461a      	mov	r2, r3
 8005272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	4413      	add	r3, r2
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	6812      	ldr	r2, [r2, #0]
 800527e:	4413      	add	r3, r2
 8005280:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005284:	881b      	ldrh	r3, [r3, #0]
 8005286:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800528a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800528c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6818      	ldr	r0, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800529a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800529c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800529e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	f006 fc14 	bl	800bace <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	881b      	ldrh	r3, [r3, #0]
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	f640 738f 	movw	r3, #3983	; 0xf8f
 80052b2:	4013      	ands	r3, r2
 80052b4:	823b      	strh	r3, [r7, #16]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	8a3a      	ldrh	r2, [r7, #16]
 80052bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052c0:	b292      	uxth	r2, r2
 80052c2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f008 fb0b 	bl	800d8e0 <HAL_PCD_SetupStageCallback>
 80052ca:	e2f1      	b.n	80058b0 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80052cc:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f280 82ed 	bge.w	80058b0 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	881b      	ldrh	r3, [r3, #0]
 80052dc:	b29a      	uxth	r2, r3
 80052de:	f640 738f 	movw	r3, #3983	; 0xf8f
 80052e2:	4013      	ands	r3, r2
 80052e4:	83fb      	strh	r3, [r7, #30]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	8bfa      	ldrh	r2, [r7, #30]
 80052ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052f0:	b292      	uxth	r2, r2
 80052f2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	461a      	mov	r2, r3
 8005300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	00db      	lsls	r3, r3, #3
 8005306:	4413      	add	r3, r2
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	6812      	ldr	r2, [r2, #0]
 800530c:	4413      	add	r3, r2
 800530e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005312:	881b      	ldrh	r3, [r3, #0]
 8005314:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800531a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800531c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800531e:	69db      	ldr	r3, [r3, #28]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d019      	beq.n	8005358 <PCD_EP_ISR_Handler+0x1ec>
 8005324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d015      	beq.n	8005358 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6818      	ldr	r0, [r3, #0]
 8005330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005332:	6959      	ldr	r1, [r3, #20]
 8005334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005336:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800533a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800533c:	b29b      	uxth	r3, r3
 800533e:	f006 fbc6 	bl	800bace <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005344:	695a      	ldr	r2, [r3, #20]
 8005346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	441a      	add	r2, r3
 800534c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800534e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005350:	2100      	movs	r1, #0
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f008 fad6 	bl	800d904 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	b29b      	uxth	r3, r3
 8005360:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005364:	2b00      	cmp	r3, #0
 8005366:	f040 82a3 	bne.w	80058b0 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	61bb      	str	r3, [r7, #24]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005378:	b29b      	uxth	r3, r3
 800537a:	461a      	mov	r2, r3
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	4413      	add	r3, r2
 8005380:	61bb      	str	r3, [r7, #24]
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005388:	617b      	str	r3, [r7, #20]
 800538a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	2b3e      	cmp	r3, #62	; 0x3e
 8005390:	d918      	bls.n	80053c4 <PCD_EP_ISR_Handler+0x258>
 8005392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	095b      	lsrs	r3, r3, #5
 8005398:	647b      	str	r3, [r7, #68]	; 0x44
 800539a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f003 031f 	and.w	r3, r3, #31
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d102      	bne.n	80053ac <PCD_EP_ISR_Handler+0x240>
 80053a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053a8:	3b01      	subs	r3, #1
 80053aa:	647b      	str	r3, [r7, #68]	; 0x44
 80053ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	029b      	lsls	r3, r3, #10
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053bc:	b29a      	uxth	r2, r3
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	801a      	strh	r2, [r3, #0]
 80053c2:	e029      	b.n	8005418 <PCD_EP_ISR_Handler+0x2ac>
 80053c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d112      	bne.n	80053f2 <PCD_EP_ISR_Handler+0x286>
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	881b      	ldrh	r3, [r3, #0]
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	801a      	strh	r2, [r3, #0]
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	801a      	strh	r2, [r3, #0]
 80053f0:	e012      	b.n	8005418 <PCD_EP_ISR_Handler+0x2ac>
 80053f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	085b      	lsrs	r3, r3, #1
 80053f8:	647b      	str	r3, [r7, #68]	; 0x44
 80053fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b00      	cmp	r3, #0
 8005404:	d002      	beq.n	800540c <PCD_EP_ISR_Handler+0x2a0>
 8005406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005408:	3301      	adds	r3, #1
 800540a:	647b      	str	r3, [r7, #68]	; 0x44
 800540c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800540e:	b29b      	uxth	r3, r3
 8005410:	029b      	lsls	r3, r3, #10
 8005412:	b29a      	uxth	r2, r3
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	b29b      	uxth	r3, r3
 8005420:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005428:	827b      	strh	r3, [r7, #18]
 800542a:	8a7b      	ldrh	r3, [r7, #18]
 800542c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005430:	827b      	strh	r3, [r7, #18]
 8005432:	8a7b      	ldrh	r3, [r7, #18]
 8005434:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005438:	827b      	strh	r3, [r7, #18]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	8a7b      	ldrh	r3, [r7, #18]
 8005440:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005444:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800544c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005450:	b29b      	uxth	r3, r3
 8005452:	8013      	strh	r3, [r2, #0]
 8005454:	e22c      	b.n	80058b0 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	461a      	mov	r2, r3
 800545c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800546a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800546e:	2b00      	cmp	r3, #0
 8005470:	f280 80f6 	bge.w	8005660 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	461a      	mov	r2, r3
 800547a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	881b      	ldrh	r3, [r3, #0]
 8005484:	b29a      	uxth	r2, r3
 8005486:	f640 738f 	movw	r3, #3983	; 0xf8f
 800548a:	4013      	ands	r3, r2
 800548c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	461a      	mov	r2, r3
 8005496:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80054a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80054a6:	b292      	uxth	r2, r2
 80054a8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80054aa:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80054ae:	4613      	mov	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	4413      	add	r3, r2
 80054be:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80054c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c2:	7b1b      	ldrb	r3, [r3, #12]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d123      	bne.n	8005510 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	461a      	mov	r2, r3
 80054d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	4413      	add	r3, r2
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	6812      	ldr	r2, [r2, #0]
 80054e0:	4413      	add	r3, r2
 80054e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80054e6:	881b      	ldrh	r3, [r3, #0]
 80054e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054ec:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80054f0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f000 808e 	beq.w	8005616 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6818      	ldr	r0, [r3, #0]
 80054fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005500:	6959      	ldr	r1, [r3, #20]
 8005502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005504:	88da      	ldrh	r2, [r3, #6]
 8005506:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800550a:	f006 fae0 	bl	800bace <USB_ReadPMA>
 800550e:	e082      	b.n	8005616 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005512:	78db      	ldrb	r3, [r3, #3]
 8005514:	2b02      	cmp	r3, #2
 8005516:	d10a      	bne.n	800552e <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005518:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800551c:	461a      	mov	r2, r3
 800551e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f9d3 	bl	80058cc <HAL_PCD_EP_DB_Receive>
 8005526:	4603      	mov	r3, r0
 8005528:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800552c:	e073      	b.n	8005616 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	461a      	mov	r2, r3
 8005534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4413      	add	r3, r2
 800553c:	881b      	ldrh	r3, [r3, #0]
 800553e:	b29b      	uxth	r3, r3
 8005540:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005548:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	461a      	mov	r2, r3
 8005552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	441a      	add	r2, r3
 800555a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800555e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800556a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800556e:	b29b      	uxth	r3, r3
 8005570:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	461a      	mov	r2, r3
 8005578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4413      	add	r3, r2
 8005580:	881b      	ldrh	r3, [r3, #0]
 8005582:	b29b      	uxth	r3, r3
 8005584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d022      	beq.n	80055d2 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005594:	b29b      	uxth	r3, r3
 8005596:	461a      	mov	r2, r3
 8005598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	00db      	lsls	r3, r3, #3
 800559e:	4413      	add	r3, r2
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	6812      	ldr	r2, [r2, #0]
 80055a4:	4413      	add	r3, r2
 80055a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80055aa:	881b      	ldrh	r3, [r3, #0]
 80055ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055b0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80055b4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d02c      	beq.n	8005616 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6818      	ldr	r0, [r3, #0]
 80055c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c2:	6959      	ldr	r1, [r3, #20]
 80055c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c6:	891a      	ldrh	r2, [r3, #8]
 80055c8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80055cc:	f006 fa7f 	bl	800bace <USB_ReadPMA>
 80055d0:	e021      	b.n	8005616 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055da:	b29b      	uxth	r3, r3
 80055dc:	461a      	mov	r2, r3
 80055de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	4413      	add	r3, r2
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	6812      	ldr	r2, [r2, #0]
 80055ea:	4413      	add	r3, r2
 80055ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80055f0:	881b      	ldrh	r3, [r3, #0]
 80055f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055f6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80055fa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d009      	beq.n	8005616 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6818      	ldr	r0, [r3, #0]
 8005606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005608:	6959      	ldr	r1, [r3, #20]
 800560a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800560c:	895a      	ldrh	r2, [r3, #10]
 800560e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005612:	f006 fa5c 	bl	800bace <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005618:	69da      	ldr	r2, [r3, #28]
 800561a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800561e:	441a      	add	r2, r3
 8005620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005622:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005626:	695a      	ldr	r2, [r3, #20]
 8005628:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800562c:	441a      	add	r2, r3
 800562e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005630:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d005      	beq.n	8005646 <PCD_EP_ISR_Handler+0x4da>
 800563a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800563e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	429a      	cmp	r2, r3
 8005644:	d206      	bcs.n	8005654 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	4619      	mov	r1, r3
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f008 f959 	bl	800d904 <HAL_PCD_DataOutStageCallback>
 8005652:	e005      	b.n	8005660 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800565a:	4618      	mov	r0, r3
 800565c:	f004 fd85 	bl	800a16a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005660:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 8121 	beq.w	80058b0 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 800566e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	4613      	mov	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	00db      	lsls	r3, r3, #3
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	4413      	add	r3, r2
 8005680:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	881b      	ldrh	r3, [r3, #0]
 8005692:	b29b      	uxth	r3, r3
 8005694:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	461a      	mov	r2, r3
 80056a6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	441a      	add	r2, r3
 80056ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80056b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80056be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056c0:	78db      	ldrb	r3, [r3, #3]
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	f000 80a2 	beq.w	800580c <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 80056c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ca:	2200      	movs	r2, #0
 80056cc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80056ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d0:	7b1b      	ldrb	r3, [r3, #12]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 8093 	beq.w	80057fe <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80056d8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80056dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d046      	beq.n	8005772 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80056e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056e6:	785b      	ldrb	r3, [r3, #1]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d126      	bne.n	800573a <PCD_EP_ISR_Handler+0x5ce>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	627b      	str	r3, [r7, #36]	; 0x24
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	461a      	mov	r2, r3
 80056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005700:	4413      	add	r3, r2
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
 8005704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	00da      	lsls	r2, r3, #3
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	4413      	add	r3, r2
 800570e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005712:	623b      	str	r3, [r7, #32]
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	b29b      	uxth	r3, r3
 800571a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800571e:	b29a      	uxth	r2, r3
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	801a      	strh	r2, [r3, #0]
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	881b      	ldrh	r3, [r3, #0]
 8005728:	b29b      	uxth	r3, r3
 800572a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800572e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005732:	b29a      	uxth	r2, r3
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	801a      	strh	r2, [r3, #0]
 8005738:	e061      	b.n	80057fe <PCD_EP_ISR_Handler+0x692>
 800573a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800573c:	785b      	ldrb	r3, [r3, #1]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d15d      	bne.n	80057fe <PCD_EP_ISR_Handler+0x692>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005750:	b29b      	uxth	r3, r3
 8005752:	461a      	mov	r2, r3
 8005754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005756:	4413      	add	r3, r2
 8005758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800575a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	00da      	lsls	r2, r3, #3
 8005760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005762:	4413      	add	r3, r2
 8005764:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005768:	62bb      	str	r3, [r7, #40]	; 0x28
 800576a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576c:	2200      	movs	r2, #0
 800576e:	801a      	strh	r2, [r3, #0]
 8005770:	e045      	b.n	80057fe <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800577a:	785b      	ldrb	r3, [r3, #1]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d126      	bne.n	80057ce <PCD_EP_ISR_Handler+0x662>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	637b      	str	r3, [r7, #52]	; 0x34
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800578e:	b29b      	uxth	r3, r3
 8005790:	461a      	mov	r2, r3
 8005792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005794:	4413      	add	r3, r2
 8005796:	637b      	str	r3, [r7, #52]	; 0x34
 8005798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	00da      	lsls	r2, r3, #3
 800579e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a0:	4413      	add	r3, r2
 80057a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057a6:	633b      	str	r3, [r7, #48]	; 0x30
 80057a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057aa:	881b      	ldrh	r3, [r3, #0]
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b6:	801a      	strh	r2, [r3, #0]
 80057b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ba:	881b      	ldrh	r3, [r3, #0]
 80057bc:	b29b      	uxth	r3, r3
 80057be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ca:	801a      	strh	r2, [r3, #0]
 80057cc:	e017      	b.n	80057fe <PCD_EP_ISR_Handler+0x692>
 80057ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057d0:	785b      	ldrb	r3, [r3, #1]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d113      	bne.n	80057fe <PCD_EP_ISR_Handler+0x692>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057de:	b29b      	uxth	r3, r3
 80057e0:	461a      	mov	r2, r3
 80057e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057e4:	4413      	add	r3, r2
 80057e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	00da      	lsls	r2, r3, #3
 80057ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f0:	4413      	add	r3, r2
 80057f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80057f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fa:	2200      	movs	r2, #0
 80057fc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80057fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	4619      	mov	r1, r3
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f008 f898 	bl	800d93a <HAL_PCD_DataInStageCallback>
 800580a:	e051      	b.n	80058b0 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800580c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005814:	2b00      	cmp	r3, #0
 8005816:	d144      	bne.n	80058a2 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005820:	b29b      	uxth	r3, r3
 8005822:	461a      	mov	r2, r3
 8005824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	00db      	lsls	r3, r3, #3
 800582a:	4413      	add	r3, r2
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6812      	ldr	r2, [r2, #0]
 8005830:	4413      	add	r3, r2
 8005832:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005836:	881b      	ldrh	r3, [r3, #0]
 8005838:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800583c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8005840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005842:	699a      	ldr	r2, [r3, #24]
 8005844:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005848:	429a      	cmp	r2, r3
 800584a:	d907      	bls.n	800585c <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 800584c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800584e:	699a      	ldr	r2, [r3, #24]
 8005850:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005854:	1ad2      	subs	r2, r2, r3
 8005856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005858:	619a      	str	r2, [r3, #24]
 800585a:	e002      	b.n	8005862 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 800585c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800585e:	2200      	movs	r2, #0
 8005860:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d106      	bne.n	8005878 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800586a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	4619      	mov	r1, r3
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f008 f862 	bl	800d93a <HAL_PCD_DataInStageCallback>
 8005876:	e01b      	b.n	80058b0 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800587a:	695a      	ldr	r2, [r3, #20]
 800587c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005880:	441a      	add	r2, r3
 8005882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005884:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005888:	69da      	ldr	r2, [r3, #28]
 800588a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800588e:	441a      	add	r2, r3
 8005890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005892:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800589a:	4618      	mov	r0, r3
 800589c:	f004 fc65 	bl	800a16a <USB_EPStartXfer>
 80058a0:	e006      	b.n	80058b0 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80058a2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80058a6:	461a      	mov	r2, r3
 80058a8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f917 	bl	8005ade <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	b21b      	sxth	r3, r3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f6ff ac5a 	blt.w	8005176 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3758      	adds	r7, #88	; 0x58
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b088      	sub	sp, #32
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	4613      	mov	r3, r2
 80058d8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80058da:	88fb      	ldrh	r3, [r7, #6]
 80058dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d07c      	beq.n	80059de <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	461a      	mov	r2, r3
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	00db      	lsls	r3, r3, #3
 80058f6:	4413      	add	r3, r2
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	6812      	ldr	r2, [r2, #0]
 80058fc:	4413      	add	r3, r2
 80058fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005902:	881b      	ldrh	r3, [r3, #0]
 8005904:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005908:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	699a      	ldr	r2, [r3, #24]
 800590e:	8b7b      	ldrh	r3, [r7, #26]
 8005910:	429a      	cmp	r2, r3
 8005912:	d306      	bcc.n	8005922 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	699a      	ldr	r2, [r3, #24]
 8005918:	8b7b      	ldrh	r3, [r7, #26]
 800591a:	1ad2      	subs	r2, r2, r3
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	619a      	str	r2, [r3, #24]
 8005920:	e002      	b.n	8005928 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2200      	movs	r2, #0
 8005926:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d123      	bne.n	8005978 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	461a      	mov	r2, r3
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	881b      	ldrh	r3, [r3, #0]
 8005940:	b29b      	uxth	r3, r3
 8005942:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594a:	833b      	strh	r3, [r7, #24]
 800594c:	8b3b      	ldrh	r3, [r7, #24]
 800594e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005952:	833b      	strh	r3, [r7, #24]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	461a      	mov	r2, r3
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	441a      	add	r2, r3
 8005962:	8b3b      	ldrh	r3, [r7, #24]
 8005964:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005968:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800596c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005974:	b29b      	uxth	r3, r3
 8005976:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005978:	88fb      	ldrh	r3, [r7, #6]
 800597a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597e:	2b00      	cmp	r3, #0
 8005980:	d01f      	beq.n	80059c2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	461a      	mov	r2, r3
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	881b      	ldrh	r3, [r3, #0]
 8005992:	b29b      	uxth	r3, r3
 8005994:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800599c:	82fb      	strh	r3, [r7, #22]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	461a      	mov	r2, r3
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	441a      	add	r2, r3
 80059ac:	8afb      	ldrh	r3, [r7, #22]
 80059ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059be:	b29b      	uxth	r3, r3
 80059c0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80059c2:	8b7b      	ldrh	r3, [r7, #26]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 8085 	beq.w	8005ad4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6818      	ldr	r0, [r3, #0]
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	6959      	ldr	r1, [r3, #20]
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	891a      	ldrh	r2, [r3, #8]
 80059d6:	8b7b      	ldrh	r3, [r7, #26]
 80059d8:	f006 f879 	bl	800bace <USB_ReadPMA>
 80059dc:	e07a      	b.n	8005ad4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	461a      	mov	r2, r3
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	00db      	lsls	r3, r3, #3
 80059f0:	4413      	add	r3, r2
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	6812      	ldr	r2, [r2, #0]
 80059f6:	4413      	add	r3, r2
 80059f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a02:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	699a      	ldr	r2, [r3, #24]
 8005a08:	8b7b      	ldrh	r3, [r7, #26]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d306      	bcc.n	8005a1c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	699a      	ldr	r2, [r3, #24]
 8005a12:	8b7b      	ldrh	r3, [r7, #26]
 8005a14:	1ad2      	subs	r2, r2, r3
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	619a      	str	r2, [r3, #24]
 8005a1a:	e002      	b.n	8005a22 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d123      	bne.n	8005a72 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	881b      	ldrh	r3, [r3, #0]
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a44:	83fb      	strh	r3, [r7, #30]
 8005a46:	8bfb      	ldrh	r3, [r7, #30]
 8005a48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a4c:	83fb      	strh	r3, [r7, #30]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	461a      	mov	r2, r3
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	441a      	add	r2, r3
 8005a5c:	8bfb      	ldrh	r3, [r7, #30]
 8005a5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005a72:	88fb      	ldrh	r3, [r7, #6]
 8005a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d11f      	bne.n	8005abc <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	461a      	mov	r2, r3
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	881b      	ldrh	r3, [r3, #0]
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a96:	83bb      	strh	r3, [r7, #28]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	441a      	add	r2, r3
 8005aa6:	8bbb      	ldrh	r3, [r7, #28]
 8005aa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ab4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005abc:	8b7b      	ldrh	r3, [r7, #26]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d008      	beq.n	8005ad4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6818      	ldr	r0, [r3, #0]
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	6959      	ldr	r1, [r3, #20]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	895a      	ldrh	r2, [r3, #10]
 8005ace:	8b7b      	ldrh	r3, [r7, #26]
 8005ad0:	f005 fffd 	bl	800bace <USB_ReadPMA>
    }
  }

  return count;
 8005ad4:	8b7b      	ldrh	r3, [r7, #26]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3720      	adds	r7, #32
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b0a2      	sub	sp, #136	; 0x88
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	60f8      	str	r0, [r7, #12]
 8005ae6:	60b9      	str	r1, [r7, #8]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005aec:	88fb      	ldrh	r3, [r7, #6]
 8005aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 81c5 	beq.w	8005e82 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	461a      	mov	r2, r3
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	00db      	lsls	r3, r3, #3
 8005b0a:	4413      	add	r3, r2
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	6812      	ldr	r2, [r2, #0]
 8005b10:	4413      	add	r3, r2
 8005b12:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b16:	881b      	ldrh	r3, [r3, #0]
 8005b18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b1c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	699a      	ldr	r2, [r3, #24]
 8005b24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d907      	bls.n	8005b3c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	699a      	ldr	r2, [r3, #24]
 8005b30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005b34:	1ad2      	subs	r2, r2, r3
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	619a      	str	r2, [r3, #24]
 8005b3a:	e002      	b.n	8005b42 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f040 80b9 	bne.w	8005cbe <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	785b      	ldrb	r3, [r3, #1]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d126      	bne.n	8005ba2 <HAL_PCD_EP_DB_Transmit+0xc4>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	461a      	mov	r2, r3
 8005b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b68:	4413      	add	r3, r2
 8005b6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	00da      	lsls	r2, r3, #3
 8005b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b74:	4413      	add	r3, r2
 8005b76:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8a:	801a      	strh	r2, [r3, #0]
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	801a      	strh	r2, [r3, #0]
 8005ba0:	e01a      	b.n	8005bd8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	785b      	ldrb	r3, [r3, #1]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d116      	bne.n	8005bd8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	633b      	str	r3, [r7, #48]	; 0x30
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	461a      	mov	r2, r3
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbe:	4413      	add	r3, r2
 8005bc0:	633b      	str	r3, [r7, #48]	; 0x30
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	00da      	lsls	r2, r3, #3
 8005bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bca:	4413      	add	r3, r2
 8005bcc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	623b      	str	r3, [r7, #32]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	785b      	ldrb	r3, [r3, #1]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d126      	bne.n	8005c34 <HAL_PCD_EP_DB_Transmit+0x156>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	61bb      	str	r3, [r7, #24]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	61bb      	str	r3, [r7, #24]
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	00da      	lsls	r2, r3, #3
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	4413      	add	r3, r2
 8005c08:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c0c:	617b      	str	r3, [r7, #20]
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	801a      	strh	r2, [r3, #0]
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	801a      	strh	r2, [r3, #0]
 8005c32:	e017      	b.n	8005c64 <HAL_PCD_EP_DB_Transmit+0x186>
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	785b      	ldrb	r3, [r3, #1]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d113      	bne.n	8005c64 <HAL_PCD_EP_DB_Transmit+0x186>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	461a      	mov	r2, r3
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	623b      	str	r3, [r7, #32]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	00da      	lsls	r2, r3, #3
 8005c54:	6a3b      	ldr	r3, [r7, #32]
 8005c56:	4413      	add	r3, r2
 8005c58:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c5c:	61fb      	str	r3, [r7, #28]
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	2200      	movs	r2, #0
 8005c62:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	4619      	mov	r1, r3
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f007 fe65 	bl	800d93a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005c70:	88fb      	ldrh	r3, [r7, #6]
 8005c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f000 82d2 	beq.w	8006220 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	461a      	mov	r2, r3
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4413      	add	r3, r2
 8005c8a:	881b      	ldrh	r3, [r3, #0]
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c96:	827b      	strh	r3, [r7, #18]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	441a      	add	r2, r3
 8005ca6:	8a7b      	ldrh	r3, [r7, #18]
 8005ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	8013      	strh	r3, [r2, #0]
 8005cbc:	e2b0      	b.n	8006220 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005cbe:	88fb      	ldrh	r3, [r7, #6]
 8005cc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d021      	beq.n	8005d0c <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	461a      	mov	r2, r3
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4413      	add	r3, r2
 8005cd6:	881b      	ldrh	r3, [r3, #0]
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	461a      	mov	r2, r3
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	441a      	add	r2, r3
 8005cf4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005cf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	f040 8284 	bne.w	8006220 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	695a      	ldr	r2, [r3, #20]
 8005d1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d20:	441a      	add	r2, r3
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	69da      	ldr	r2, [r3, #28]
 8005d2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d2e:	441a      	add	r2, r3
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	6a1a      	ldr	r2, [r3, #32]
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d309      	bcc.n	8005d54 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	6a1a      	ldr	r2, [r3, #32]
 8005d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d4c:	1ad2      	subs	r2, r2, r3
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	621a      	str	r2, [r3, #32]
 8005d52:	e015      	b.n	8005d80 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	6a1b      	ldr	r3, [r3, #32]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d107      	bne.n	8005d6c <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8005d5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005d60:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005d6a:	e009      	b.n	8005d80 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	785b      	ldrb	r3, [r3, #1]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d155      	bne.n	8005e34 <HAL_PCD_EP_DB_Transmit+0x356>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	461a      	mov	r2, r3
 8005d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9c:	4413      	add	r3, r2
 8005d9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	00da      	lsls	r2, r3, #3
 8005da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da8:	4413      	add	r3, r2
 8005daa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005dae:	637b      	str	r3, [r7, #52]	; 0x34
 8005db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005db2:	2b3e      	cmp	r3, #62	; 0x3e
 8005db4:	d916      	bls.n	8005de4 <HAL_PCD_EP_DB_Transmit+0x306>
 8005db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005db8:	095b      	lsrs	r3, r3, #5
 8005dba:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dbe:	f003 031f 	and.w	r3, r3, #31
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d102      	bne.n	8005dcc <HAL_PCD_EP_DB_Transmit+0x2ee>
 8005dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	029b      	lsls	r3, r3, #10
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de0:	801a      	strh	r2, [r3, #0]
 8005de2:	e043      	b.n	8005e6c <HAL_PCD_EP_DB_Transmit+0x38e>
 8005de4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d112      	bne.n	8005e10 <HAL_PCD_EP_DB_Transmit+0x332>
 8005dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dec:	881b      	ldrh	r3, [r3, #0]
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df8:	801a      	strh	r2, [r3, #0]
 8005dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e0c:	801a      	strh	r2, [r3, #0]
 8005e0e:	e02d      	b.n	8005e6c <HAL_PCD_EP_DB_Transmit+0x38e>
 8005e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e12:	085b      	lsrs	r3, r3, #1
 8005e14:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <HAL_PCD_EP_DB_Transmit+0x348>
 8005e20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e22:	3301      	adds	r3, #1
 8005e24:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	029b      	lsls	r3, r3, #10
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e30:	801a      	strh	r2, [r3, #0]
 8005e32:	e01b      	b.n	8005e6c <HAL_PCD_EP_DB_Transmit+0x38e>
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	785b      	ldrb	r3, [r3, #1]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d117      	bne.n	8005e6c <HAL_PCD_EP_DB_Transmit+0x38e>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	643b      	str	r3, [r7, #64]	; 0x40
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e50:	4413      	add	r3, r2
 8005e52:	643b      	str	r3, [r7, #64]	; 0x40
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	00da      	lsls	r2, r3, #3
 8005e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e6a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6818      	ldr	r0, [r3, #0]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	6959      	ldr	r1, [r3, #20]
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	891a      	ldrh	r2, [r3, #8]
 8005e78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	f005 fde5 	bl	800ba4a <USB_WritePMA>
 8005e80:	e1ce      	b.n	8006220 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	00db      	lsls	r3, r3, #3
 8005e94:	4413      	add	r3, r2
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	6812      	ldr	r2, [r2, #0]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ea6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	699a      	ldr	r2, [r3, #24]
 8005eae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d307      	bcc.n	8005ec6 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	699a      	ldr	r2, [r3, #24]
 8005eba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005ebe:	1ad2      	subs	r2, r2, r3
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	619a      	str	r2, [r3, #24]
 8005ec4:	e002      	b.n	8005ecc <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f040 80c4 	bne.w	800605e <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	785b      	ldrb	r3, [r3, #1]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d126      	bne.n	8005f2c <HAL_PCD_EP_DB_Transmit+0x44e>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	461a      	mov	r2, r3
 8005ef0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ef2:	4413      	add	r3, r2
 8005ef4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	00da      	lsls	r2, r3, #3
 8005efc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005efe:	4413      	add	r3, r2
 8005f00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f04:	667b      	str	r3, [r7, #100]	; 0x64
 8005f06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f08:	881b      	ldrh	r3, [r3, #0]
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f14:	801a      	strh	r2, [r3, #0]
 8005f16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f18:	881b      	ldrh	r3, [r3, #0]
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f28:	801a      	strh	r2, [r3, #0]
 8005f2a:	e01a      	b.n	8005f62 <HAL_PCD_EP_DB_Transmit+0x484>
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	785b      	ldrb	r3, [r3, #1]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d116      	bne.n	8005f62 <HAL_PCD_EP_DB_Transmit+0x484>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	673b      	str	r3, [r7, #112]	; 0x70
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	461a      	mov	r2, r3
 8005f46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f48:	4413      	add	r3, r2
 8005f4a:	673b      	str	r3, [r7, #112]	; 0x70
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	00da      	lsls	r2, r3, #3
 8005f52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f54:	4413      	add	r3, r2
 8005f56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f5e:	2200      	movs	r2, #0
 8005f60:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	785b      	ldrb	r3, [r3, #1]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d12f      	bne.n	8005fd0 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	461a      	mov	r2, r3
 8005f84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f88:	4413      	add	r3, r2
 8005f8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	00da      	lsls	r2, r3, #3
 8005f94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f98:	4413      	add	r3, r2
 8005f9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fa2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fa6:	881b      	ldrh	r3, [r3, #0]
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fb4:	801a      	strh	r2, [r3, #0]
 8005fb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fba:	881b      	ldrh	r3, [r3, #0]
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fcc:	801a      	strh	r2, [r3, #0]
 8005fce:	e017      	b.n	8006000 <HAL_PCD_EP_DB_Transmit+0x522>
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	785b      	ldrb	r3, [r3, #1]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d113      	bne.n	8006000 <HAL_PCD_EP_DB_Transmit+0x522>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fe6:	4413      	add	r3, r2
 8005fe8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	00da      	lsls	r2, r3, #3
 8005ff0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ff8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ffa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	4619      	mov	r1, r3
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f007 fc97 	bl	800d93a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800600c:	88fb      	ldrh	r3, [r7, #6]
 800600e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006012:	2b00      	cmp	r3, #0
 8006014:	f040 8104 	bne.w	8006220 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	461a      	mov	r2, r3
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	881b      	ldrh	r3, [r3, #0]
 8006028:	b29b      	uxth	r3, r3
 800602a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800602e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006032:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	461a      	mov	r2, r3
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	441a      	add	r2, r3
 8006044:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006048:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800604c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006050:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006058:	b29b      	uxth	r3, r3
 800605a:	8013      	strh	r3, [r2, #0]
 800605c:	e0e0      	b.n	8006220 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800605e:	88fb      	ldrh	r3, [r7, #6]
 8006060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d121      	bne.n	80060ac <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	461a      	mov	r2, r3
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	881b      	ldrh	r3, [r3, #0]
 8006078:	b29b      	uxth	r3, r3
 800607a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800607e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006082:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	461a      	mov	r2, r3
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	441a      	add	r2, r3
 8006094:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006098:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800609c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	f040 80b4 	bne.w	8006220 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	695a      	ldr	r2, [r3, #20]
 80060bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80060c0:	441a      	add	r2, r3
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	69da      	ldr	r2, [r3, #28]
 80060ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80060ce:	441a      	add	r2, r3
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	6a1a      	ldr	r2, [r3, #32]
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d309      	bcc.n	80060f4 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	6a1a      	ldr	r2, [r3, #32]
 80060ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060ec:	1ad2      	subs	r2, r2, r3
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	621a      	str	r2, [r3, #32]
 80060f2:	e015      	b.n	8006120 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d107      	bne.n	800610c <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80060fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006100:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800610a:	e009      	b.n	8006120 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	2200      	movs	r2, #0
 8006116:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	663b      	str	r3, [r7, #96]	; 0x60
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	785b      	ldrb	r3, [r3, #1]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d155      	bne.n	80061da <HAL_PCD_EP_DB_Transmit+0x6fc>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	65bb      	str	r3, [r7, #88]	; 0x58
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800613c:	b29b      	uxth	r3, r3
 800613e:	461a      	mov	r2, r3
 8006140:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006142:	4413      	add	r3, r2
 8006144:	65bb      	str	r3, [r7, #88]	; 0x58
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	00da      	lsls	r2, r3, #3
 800614c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800614e:	4413      	add	r3, r2
 8006150:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006154:	657b      	str	r3, [r7, #84]	; 0x54
 8006156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006158:	2b3e      	cmp	r3, #62	; 0x3e
 800615a:	d916      	bls.n	800618a <HAL_PCD_EP_DB_Transmit+0x6ac>
 800615c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800615e:	095b      	lsrs	r3, r3, #5
 8006160:	677b      	str	r3, [r7, #116]	; 0x74
 8006162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006164:	f003 031f 	and.w	r3, r3, #31
 8006168:	2b00      	cmp	r3, #0
 800616a:	d102      	bne.n	8006172 <HAL_PCD_EP_DB_Transmit+0x694>
 800616c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800616e:	3b01      	subs	r3, #1
 8006170:	677b      	str	r3, [r7, #116]	; 0x74
 8006172:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006174:	b29b      	uxth	r3, r3
 8006176:	029b      	lsls	r3, r3, #10
 8006178:	b29b      	uxth	r3, r3
 800617a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800617e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006182:	b29a      	uxth	r2, r3
 8006184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006186:	801a      	strh	r2, [r3, #0]
 8006188:	e040      	b.n	800620c <HAL_PCD_EP_DB_Transmit+0x72e>
 800618a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800618c:	2b00      	cmp	r3, #0
 800618e:	d112      	bne.n	80061b6 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8006190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006192:	881b      	ldrh	r3, [r3, #0]
 8006194:	b29b      	uxth	r3, r3
 8006196:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800619a:	b29a      	uxth	r2, r3
 800619c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800619e:	801a      	strh	r2, [r3, #0]
 80061a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061b2:	801a      	strh	r2, [r3, #0]
 80061b4:	e02a      	b.n	800620c <HAL_PCD_EP_DB_Transmit+0x72e>
 80061b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061b8:	085b      	lsrs	r3, r3, #1
 80061ba:	677b      	str	r3, [r7, #116]	; 0x74
 80061bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d002      	beq.n	80061cc <HAL_PCD_EP_DB_Transmit+0x6ee>
 80061c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061c8:	3301      	adds	r3, #1
 80061ca:	677b      	str	r3, [r7, #116]	; 0x74
 80061cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	029b      	lsls	r3, r3, #10
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061d6:	801a      	strh	r2, [r3, #0]
 80061d8:	e018      	b.n	800620c <HAL_PCD_EP_DB_Transmit+0x72e>
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	785b      	ldrb	r3, [r3, #1]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d114      	bne.n	800620c <HAL_PCD_EP_DB_Transmit+0x72e>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	461a      	mov	r2, r3
 80061ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061f0:	4413      	add	r3, r2
 80061f2:	663b      	str	r3, [r7, #96]	; 0x60
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	00da      	lsls	r2, r3, #3
 80061fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061fc:	4413      	add	r3, r2
 80061fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006202:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006206:	b29a      	uxth	r2, r3
 8006208:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800620a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6818      	ldr	r0, [r3, #0]
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	6959      	ldr	r1, [r3, #20]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	895a      	ldrh	r2, [r3, #10]
 8006218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800621a:	b29b      	uxth	r3, r3
 800621c:	f005 fc15 	bl	800ba4a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	461a      	mov	r2, r3
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	b29b      	uxth	r3, r3
 8006232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006236:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800623a:	823b      	strh	r3, [r7, #16]
 800623c:	8a3b      	ldrh	r3, [r7, #16]
 800623e:	f083 0310 	eor.w	r3, r3, #16
 8006242:	823b      	strh	r3, [r7, #16]
 8006244:	8a3b      	ldrh	r3, [r7, #16]
 8006246:	f083 0320 	eor.w	r3, r3, #32
 800624a:	823b      	strh	r3, [r7, #16]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	461a      	mov	r2, r3
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	441a      	add	r2, r3
 800625a:	8a3b      	ldrh	r3, [r7, #16]
 800625c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006260:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006264:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800626c:	b29b      	uxth	r3, r3
 800626e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3788      	adds	r7, #136	; 0x88
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800627a:	b480      	push	{r7}
 800627c:	b087      	sub	sp, #28
 800627e:	af00      	add	r7, sp, #0
 8006280:	60f8      	str	r0, [r7, #12]
 8006282:	607b      	str	r3, [r7, #4]
 8006284:	460b      	mov	r3, r1
 8006286:	817b      	strh	r3, [r7, #10]
 8006288:	4613      	mov	r3, r2
 800628a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800628c:	897b      	ldrh	r3, [r7, #10]
 800628e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006292:	b29b      	uxth	r3, r3
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00b      	beq.n	80062b0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006298:	897b      	ldrh	r3, [r7, #10]
 800629a:	f003 0307 	and.w	r3, r3, #7
 800629e:	1c5a      	adds	r2, r3, #1
 80062a0:	4613      	mov	r3, r2
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4413      	add	r3, r2
 80062a6:	00db      	lsls	r3, r3, #3
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	4413      	add	r3, r2
 80062ac:	617b      	str	r3, [r7, #20]
 80062ae:	e009      	b.n	80062c4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80062b0:	897a      	ldrh	r2, [r7, #10]
 80062b2:	4613      	mov	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	00db      	lsls	r3, r3, #3
 80062ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	4413      	add	r3, r2
 80062c2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80062c4:	893b      	ldrh	r3, [r7, #8]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d107      	bne.n	80062da <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	2200      	movs	r2, #0
 80062ce:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	80da      	strh	r2, [r3, #6]
 80062d8:	e00b      	b.n	80062f2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2201      	movs	r2, #1
 80062de:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	0c1b      	lsrs	r3, r3, #16
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	371c      	adds	r7, #28
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006324:	b29b      	uxth	r3, r3
 8006326:	f043 0301 	orr.w	r3, r3, #1
 800632a:	b29a      	uxth	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006338:	b29b      	uxth	r3, r3
 800633a:	f043 0302 	orr.w	r3, r3, #2
 800633e:	b29a      	uxth	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d141      	bne.n	80063e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006362:	4b4b      	ldr	r3, [pc, #300]	; (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800636a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800636e:	d131      	bne.n	80063d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006370:	4b47      	ldr	r3, [pc, #284]	; (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006372:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006376:	4a46      	ldr	r2, [pc, #280]	; (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006378:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800637c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006380:	4b43      	ldr	r3, [pc, #268]	; (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006388:	4a41      	ldr	r2, [pc, #260]	; (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800638a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800638e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006390:	4b40      	ldr	r3, [pc, #256]	; (8006494 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2232      	movs	r2, #50	; 0x32
 8006396:	fb02 f303 	mul.w	r3, r2, r3
 800639a:	4a3f      	ldr	r2, [pc, #252]	; (8006498 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800639c:	fba2 2303 	umull	r2, r3, r2, r3
 80063a0:	0c9b      	lsrs	r3, r3, #18
 80063a2:	3301      	adds	r3, #1
 80063a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063a6:	e002      	b.n	80063ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	3b01      	subs	r3, #1
 80063ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063ae:	4b38      	ldr	r3, [pc, #224]	; (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063ba:	d102      	bne.n	80063c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1f2      	bne.n	80063a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80063c2:	4b33      	ldr	r3, [pc, #204]	; (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063ce:	d158      	bne.n	8006482 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e057      	b.n	8006484 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80063d4:	4b2e      	ldr	r3, [pc, #184]	; (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063da:	4a2d      	ldr	r2, [pc, #180]	; (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80063e4:	e04d      	b.n	8006482 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063ec:	d141      	bne.n	8006472 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80063ee:	4b28      	ldr	r3, [pc, #160]	; (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80063f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063fa:	d131      	bne.n	8006460 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80063fc:	4b24      	ldr	r3, [pc, #144]	; (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006402:	4a23      	ldr	r2, [pc, #140]	; (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006408:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800640c:	4b20      	ldr	r3, [pc, #128]	; (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006414:	4a1e      	ldr	r2, [pc, #120]	; (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006416:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800641a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800641c:	4b1d      	ldr	r3, [pc, #116]	; (8006494 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2232      	movs	r2, #50	; 0x32
 8006422:	fb02 f303 	mul.w	r3, r2, r3
 8006426:	4a1c      	ldr	r2, [pc, #112]	; (8006498 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006428:	fba2 2303 	umull	r2, r3, r2, r3
 800642c:	0c9b      	lsrs	r3, r3, #18
 800642e:	3301      	adds	r3, #1
 8006430:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006432:	e002      	b.n	800643a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	3b01      	subs	r3, #1
 8006438:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800643a:	4b15      	ldr	r3, [pc, #84]	; (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006446:	d102      	bne.n	800644e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1f2      	bne.n	8006434 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800644e:	4b10      	ldr	r3, [pc, #64]	; (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800645a:	d112      	bne.n	8006482 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	e011      	b.n	8006484 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006460:	4b0b      	ldr	r3, [pc, #44]	; (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006462:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006466:	4a0a      	ldr	r2, [pc, #40]	; (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800646c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006470:	e007      	b.n	8006482 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006472:	4b07      	ldr	r3, [pc, #28]	; (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800647a:	4a05      	ldr	r2, [pc, #20]	; (8006490 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800647c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006480:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	40007000 	.word	0x40007000
 8006494:	200026d4 	.word	0x200026d4
 8006498:	431bde83 	.word	0x431bde83

0800649c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b088      	sub	sp, #32
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d101      	bne.n	80064ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e306      	b.n	8006abc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d075      	beq.n	80065a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064ba:	4b97      	ldr	r3, [pc, #604]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f003 030c 	and.w	r3, r3, #12
 80064c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064c4:	4b94      	ldr	r3, [pc, #592]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f003 0303 	and.w	r3, r3, #3
 80064cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	2b0c      	cmp	r3, #12
 80064d2:	d102      	bne.n	80064da <HAL_RCC_OscConfig+0x3e>
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	2b03      	cmp	r3, #3
 80064d8:	d002      	beq.n	80064e0 <HAL_RCC_OscConfig+0x44>
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	2b08      	cmp	r3, #8
 80064de:	d10b      	bne.n	80064f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064e0:	4b8d      	ldr	r3, [pc, #564]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d05b      	beq.n	80065a4 <HAL_RCC_OscConfig+0x108>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d157      	bne.n	80065a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e2e1      	b.n	8006abc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006500:	d106      	bne.n	8006510 <HAL_RCC_OscConfig+0x74>
 8006502:	4b85      	ldr	r3, [pc, #532]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a84      	ldr	r2, [pc, #528]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 8006508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800650c:	6013      	str	r3, [r2, #0]
 800650e:	e01d      	b.n	800654c <HAL_RCC_OscConfig+0xb0>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006518:	d10c      	bne.n	8006534 <HAL_RCC_OscConfig+0x98>
 800651a:	4b7f      	ldr	r3, [pc, #508]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a7e      	ldr	r2, [pc, #504]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 8006520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006524:	6013      	str	r3, [r2, #0]
 8006526:	4b7c      	ldr	r3, [pc, #496]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a7b      	ldr	r2, [pc, #492]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 800652c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006530:	6013      	str	r3, [r2, #0]
 8006532:	e00b      	b.n	800654c <HAL_RCC_OscConfig+0xb0>
 8006534:	4b78      	ldr	r3, [pc, #480]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a77      	ldr	r2, [pc, #476]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 800653a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800653e:	6013      	str	r3, [r2, #0]
 8006540:	4b75      	ldr	r3, [pc, #468]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a74      	ldr	r2, [pc, #464]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 8006546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800654a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d013      	beq.n	800657c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006554:	f7fb fc54 	bl	8001e00 <HAL_GetTick>
 8006558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800655a:	e008      	b.n	800656e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800655c:	f7fb fc50 	bl	8001e00 <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	2b64      	cmp	r3, #100	; 0x64
 8006568:	d901      	bls.n	800656e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e2a6      	b.n	8006abc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800656e:	4b6a      	ldr	r3, [pc, #424]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0f0      	beq.n	800655c <HAL_RCC_OscConfig+0xc0>
 800657a:	e014      	b.n	80065a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800657c:	f7fb fc40 	bl	8001e00 <HAL_GetTick>
 8006580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006582:	e008      	b.n	8006596 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006584:	f7fb fc3c 	bl	8001e00 <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	2b64      	cmp	r3, #100	; 0x64
 8006590:	d901      	bls.n	8006596 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e292      	b.n	8006abc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006596:	4b60      	ldr	r3, [pc, #384]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1f0      	bne.n	8006584 <HAL_RCC_OscConfig+0xe8>
 80065a2:	e000      	b.n	80065a6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d075      	beq.n	800669e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065b2:	4b59      	ldr	r3, [pc, #356]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f003 030c 	and.w	r3, r3, #12
 80065ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065bc:	4b56      	ldr	r3, [pc, #344]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	f003 0303 	and.w	r3, r3, #3
 80065c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	2b0c      	cmp	r3, #12
 80065ca:	d102      	bne.n	80065d2 <HAL_RCC_OscConfig+0x136>
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d002      	beq.n	80065d8 <HAL_RCC_OscConfig+0x13c>
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	2b04      	cmp	r3, #4
 80065d6:	d11f      	bne.n	8006618 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065d8:	4b4f      	ldr	r3, [pc, #316]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d005      	beq.n	80065f0 <HAL_RCC_OscConfig+0x154>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d101      	bne.n	80065f0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e265      	b.n	8006abc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065f0:	4b49      	ldr	r3, [pc, #292]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	061b      	lsls	r3, r3, #24
 80065fe:	4946      	ldr	r1, [pc, #280]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 8006600:	4313      	orrs	r3, r2
 8006602:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006604:	4b45      	ldr	r3, [pc, #276]	; (800671c <HAL_RCC_OscConfig+0x280>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4618      	mov	r0, r3
 800660a:	f7fb fbad 	bl	8001d68 <HAL_InitTick>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d043      	beq.n	800669c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e251      	b.n	8006abc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d023      	beq.n	8006668 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006620:	4b3d      	ldr	r3, [pc, #244]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a3c      	ldr	r2, [pc, #240]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 8006626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800662a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800662c:	f7fb fbe8 	bl	8001e00 <HAL_GetTick>
 8006630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006632:	e008      	b.n	8006646 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006634:	f7fb fbe4 	bl	8001e00 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	2b02      	cmp	r3, #2
 8006640:	d901      	bls.n	8006646 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	e23a      	b.n	8006abc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006646:	4b34      	ldr	r3, [pc, #208]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800664e:	2b00      	cmp	r3, #0
 8006650:	d0f0      	beq.n	8006634 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006652:	4b31      	ldr	r3, [pc, #196]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	061b      	lsls	r3, r3, #24
 8006660:	492d      	ldr	r1, [pc, #180]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 8006662:	4313      	orrs	r3, r2
 8006664:	604b      	str	r3, [r1, #4]
 8006666:	e01a      	b.n	800669e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006668:	4b2b      	ldr	r3, [pc, #172]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a2a      	ldr	r2, [pc, #168]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 800666e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006674:	f7fb fbc4 	bl	8001e00 <HAL_GetTick>
 8006678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800667a:	e008      	b.n	800668e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800667c:	f7fb fbc0 	bl	8001e00 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	2b02      	cmp	r3, #2
 8006688:	d901      	bls.n	800668e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e216      	b.n	8006abc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800668e:	4b22      	ldr	r3, [pc, #136]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1f0      	bne.n	800667c <HAL_RCC_OscConfig+0x1e0>
 800669a:	e000      	b.n	800669e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800669c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0308 	and.w	r3, r3, #8
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d041      	beq.n	800672e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d01c      	beq.n	80066ec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066b2:	4b19      	ldr	r3, [pc, #100]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 80066b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066b8:	4a17      	ldr	r2, [pc, #92]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 80066ba:	f043 0301 	orr.w	r3, r3, #1
 80066be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066c2:	f7fb fb9d 	bl	8001e00 <HAL_GetTick>
 80066c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066c8:	e008      	b.n	80066dc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066ca:	f7fb fb99 	bl	8001e00 <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d901      	bls.n	80066dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e1ef      	b.n	8006abc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066dc:	4b0e      	ldr	r3, [pc, #56]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 80066de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066e2:	f003 0302 	and.w	r3, r3, #2
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d0ef      	beq.n	80066ca <HAL_RCC_OscConfig+0x22e>
 80066ea:	e020      	b.n	800672e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066ec:	4b0a      	ldr	r3, [pc, #40]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 80066ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066f2:	4a09      	ldr	r2, [pc, #36]	; (8006718 <HAL_RCC_OscConfig+0x27c>)
 80066f4:	f023 0301 	bic.w	r3, r3, #1
 80066f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066fc:	f7fb fb80 	bl	8001e00 <HAL_GetTick>
 8006700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006702:	e00d      	b.n	8006720 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006704:	f7fb fb7c 	bl	8001e00 <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	2b02      	cmp	r3, #2
 8006710:	d906      	bls.n	8006720 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e1d2      	b.n	8006abc <HAL_RCC_OscConfig+0x620>
 8006716:	bf00      	nop
 8006718:	40021000 	.word	0x40021000
 800671c:	200026d8 	.word	0x200026d8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006720:	4b8c      	ldr	r3, [pc, #560]	; (8006954 <HAL_RCC_OscConfig+0x4b8>)
 8006722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1ea      	bne.n	8006704 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0304 	and.w	r3, r3, #4
 8006736:	2b00      	cmp	r3, #0
 8006738:	f000 80a6 	beq.w	8006888 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800673c:	2300      	movs	r3, #0
 800673e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006740:	4b84      	ldr	r3, [pc, #528]	; (8006954 <HAL_RCC_OscConfig+0x4b8>)
 8006742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <HAL_RCC_OscConfig+0x2b4>
 800674c:	2301      	movs	r3, #1
 800674e:	e000      	b.n	8006752 <HAL_RCC_OscConfig+0x2b6>
 8006750:	2300      	movs	r3, #0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00d      	beq.n	8006772 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006756:	4b7f      	ldr	r3, [pc, #508]	; (8006954 <HAL_RCC_OscConfig+0x4b8>)
 8006758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800675a:	4a7e      	ldr	r2, [pc, #504]	; (8006954 <HAL_RCC_OscConfig+0x4b8>)
 800675c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006760:	6593      	str	r3, [r2, #88]	; 0x58
 8006762:	4b7c      	ldr	r3, [pc, #496]	; (8006954 <HAL_RCC_OscConfig+0x4b8>)
 8006764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800676e:	2301      	movs	r3, #1
 8006770:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006772:	4b79      	ldr	r3, [pc, #484]	; (8006958 <HAL_RCC_OscConfig+0x4bc>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800677a:	2b00      	cmp	r3, #0
 800677c:	d118      	bne.n	80067b0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800677e:	4b76      	ldr	r3, [pc, #472]	; (8006958 <HAL_RCC_OscConfig+0x4bc>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a75      	ldr	r2, [pc, #468]	; (8006958 <HAL_RCC_OscConfig+0x4bc>)
 8006784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800678a:	f7fb fb39 	bl	8001e00 <HAL_GetTick>
 800678e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006790:	e008      	b.n	80067a4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006792:	f7fb fb35 	bl	8001e00 <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	2b02      	cmp	r3, #2
 800679e:	d901      	bls.n	80067a4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e18b      	b.n	8006abc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067a4:	4b6c      	ldr	r3, [pc, #432]	; (8006958 <HAL_RCC_OscConfig+0x4bc>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d0f0      	beq.n	8006792 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d108      	bne.n	80067ca <HAL_RCC_OscConfig+0x32e>
 80067b8:	4b66      	ldr	r3, [pc, #408]	; (8006954 <HAL_RCC_OscConfig+0x4b8>)
 80067ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067be:	4a65      	ldr	r2, [pc, #404]	; (8006954 <HAL_RCC_OscConfig+0x4b8>)
 80067c0:	f043 0301 	orr.w	r3, r3, #1
 80067c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80067c8:	e024      	b.n	8006814 <HAL_RCC_OscConfig+0x378>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	2b05      	cmp	r3, #5
 80067d0:	d110      	bne.n	80067f4 <HAL_RCC_OscConfig+0x358>
 80067d2:	4b60      	ldr	r3, [pc, #384]	; (8006954 <HAL_RCC_OscConfig+0x4b8>)
 80067d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067d8:	4a5e      	ldr	r2, [pc, #376]	; (8006954 <HAL_RCC_OscConfig+0x4b8>)
 80067da:	f043 0304 	orr.w	r3, r3, #4
 80067de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80067e2:	4b5c      	ldr	r3, [pc, #368]	; (8006954 <HAL_RCC_OscConfig+0x4b8>)
 80067e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067e8:	4a5a      	ldr	r2, [pc, #360]	; (8006954 <HAL_RCC_OscConfig+0x4b8>)
 80067ea:	f043 0301 	orr.w	r3, r3, #1
 80067ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80067f2:	e00f      	b.n	8006814 <HAL_RCC_OscConfig+0x378>
 80067f4:	4b57      	ldr	r3, [pc, #348]	; (8006954 <HAL_RCC_OscConfig+0x4b8>)
 80067f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067fa:	4a56      	ldr	r2, [pc, #344]	; (8006954 <HAL_RCC_OscConfig+0x4b8>)
 80067fc:	f023 0301 	bic.w	r3, r3, #1
 8006800:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006804:	4b53      	ldr	r3, [pc, #332]	; (8006954 <HAL_RCC_OscConfig+0x4b8>)
 8006806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800680a:	4a52      	ldr	r2, [pc, #328]	; (8006954 <HAL_RCC_OscConfig+0x4b8>)
 800680c:	f023 0304 	bic.w	r3, r3, #4
 8006810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d016      	beq.n	800684a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800681c:	f7fb faf0 	bl	8001e00 <HAL_GetTick>
 8006820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006822:	e00a      	b.n	800683a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006824:	f7fb faec 	bl	8001e00 <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006832:	4293      	cmp	r3, r2
 8006834:	d901      	bls.n	800683a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e140      	b.n	8006abc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800683a:	4b46      	ldr	r3, [pc, #280]	; (8006954 <HAL_RCC_OscConfig+0x4b8>)
 800683c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006840:	f003 0302 	and.w	r3, r3, #2
 8006844:	2b00      	cmp	r3, #0
 8006846:	d0ed      	beq.n	8006824 <HAL_RCC_OscConfig+0x388>
 8006848:	e015      	b.n	8006876 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800684a:	f7fb fad9 	bl	8001e00 <HAL_GetTick>
 800684e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006850:	e00a      	b.n	8006868 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006852:	f7fb fad5 	bl	8001e00 <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006860:	4293      	cmp	r3, r2
 8006862:	d901      	bls.n	8006868 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	e129      	b.n	8006abc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006868:	4b3a      	ldr	r3, [pc, #232]	; (8006954 <HAL_RCC_OscConfig+0x4b8>)
 800686a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1ed      	bne.n	8006852 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006876:	7ffb      	ldrb	r3, [r7, #31]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d105      	bne.n	8006888 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800687c:	4b35      	ldr	r3, [pc, #212]	; (8006954 <HAL_RCC_OscConfig+0x4b8>)
 800687e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006880:	4a34      	ldr	r2, [pc, #208]	; (8006954 <HAL_RCC_OscConfig+0x4b8>)
 8006882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006886:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0320 	and.w	r3, r3, #32
 8006890:	2b00      	cmp	r3, #0
 8006892:	d03c      	beq.n	800690e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d01c      	beq.n	80068d6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800689c:	4b2d      	ldr	r3, [pc, #180]	; (8006954 <HAL_RCC_OscConfig+0x4b8>)
 800689e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068a2:	4a2c      	ldr	r2, [pc, #176]	; (8006954 <HAL_RCC_OscConfig+0x4b8>)
 80068a4:	f043 0301 	orr.w	r3, r3, #1
 80068a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068ac:	f7fb faa8 	bl	8001e00 <HAL_GetTick>
 80068b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068b2:	e008      	b.n	80068c6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068b4:	f7fb faa4 	bl	8001e00 <HAL_GetTick>
 80068b8:	4602      	mov	r2, r0
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d901      	bls.n	80068c6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e0fa      	b.n	8006abc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068c6:	4b23      	ldr	r3, [pc, #140]	; (8006954 <HAL_RCC_OscConfig+0x4b8>)
 80068c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068cc:	f003 0302 	and.w	r3, r3, #2
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d0ef      	beq.n	80068b4 <HAL_RCC_OscConfig+0x418>
 80068d4:	e01b      	b.n	800690e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80068d6:	4b1f      	ldr	r3, [pc, #124]	; (8006954 <HAL_RCC_OscConfig+0x4b8>)
 80068d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068dc:	4a1d      	ldr	r2, [pc, #116]	; (8006954 <HAL_RCC_OscConfig+0x4b8>)
 80068de:	f023 0301 	bic.w	r3, r3, #1
 80068e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068e6:	f7fb fa8b 	bl	8001e00 <HAL_GetTick>
 80068ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80068ec:	e008      	b.n	8006900 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068ee:	f7fb fa87 	bl	8001e00 <HAL_GetTick>
 80068f2:	4602      	mov	r2, r0
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d901      	bls.n	8006900 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	e0dd      	b.n	8006abc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006900:	4b14      	ldr	r3, [pc, #80]	; (8006954 <HAL_RCC_OscConfig+0x4b8>)
 8006902:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006906:	f003 0302 	and.w	r3, r3, #2
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1ef      	bne.n	80068ee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	69db      	ldr	r3, [r3, #28]
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 80d1 	beq.w	8006aba <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006918:	4b0e      	ldr	r3, [pc, #56]	; (8006954 <HAL_RCC_OscConfig+0x4b8>)
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f003 030c 	and.w	r3, r3, #12
 8006920:	2b0c      	cmp	r3, #12
 8006922:	f000 808b 	beq.w	8006a3c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	69db      	ldr	r3, [r3, #28]
 800692a:	2b02      	cmp	r3, #2
 800692c:	d15e      	bne.n	80069ec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800692e:	4b09      	ldr	r3, [pc, #36]	; (8006954 <HAL_RCC_OscConfig+0x4b8>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a08      	ldr	r2, [pc, #32]	; (8006954 <HAL_RCC_OscConfig+0x4b8>)
 8006934:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800693a:	f7fb fa61 	bl	8001e00 <HAL_GetTick>
 800693e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006940:	e00c      	b.n	800695c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006942:	f7fb fa5d 	bl	8001e00 <HAL_GetTick>
 8006946:	4602      	mov	r2, r0
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	2b02      	cmp	r3, #2
 800694e:	d905      	bls.n	800695c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e0b3      	b.n	8006abc <HAL_RCC_OscConfig+0x620>
 8006954:	40021000 	.word	0x40021000
 8006958:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800695c:	4b59      	ldr	r3, [pc, #356]	; (8006ac4 <HAL_RCC_OscConfig+0x628>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1ec      	bne.n	8006942 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006968:	4b56      	ldr	r3, [pc, #344]	; (8006ac4 <HAL_RCC_OscConfig+0x628>)
 800696a:	68da      	ldr	r2, [r3, #12]
 800696c:	4b56      	ldr	r3, [pc, #344]	; (8006ac8 <HAL_RCC_OscConfig+0x62c>)
 800696e:	4013      	ands	r3, r2
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	6a11      	ldr	r1, [r2, #32]
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006978:	3a01      	subs	r2, #1
 800697a:	0112      	lsls	r2, r2, #4
 800697c:	4311      	orrs	r1, r2
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006982:	0212      	lsls	r2, r2, #8
 8006984:	4311      	orrs	r1, r2
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800698a:	0852      	lsrs	r2, r2, #1
 800698c:	3a01      	subs	r2, #1
 800698e:	0552      	lsls	r2, r2, #21
 8006990:	4311      	orrs	r1, r2
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006996:	0852      	lsrs	r2, r2, #1
 8006998:	3a01      	subs	r2, #1
 800699a:	0652      	lsls	r2, r2, #25
 800699c:	4311      	orrs	r1, r2
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80069a2:	06d2      	lsls	r2, r2, #27
 80069a4:	430a      	orrs	r2, r1
 80069a6:	4947      	ldr	r1, [pc, #284]	; (8006ac4 <HAL_RCC_OscConfig+0x628>)
 80069a8:	4313      	orrs	r3, r2
 80069aa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069ac:	4b45      	ldr	r3, [pc, #276]	; (8006ac4 <HAL_RCC_OscConfig+0x628>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a44      	ldr	r2, [pc, #272]	; (8006ac4 <HAL_RCC_OscConfig+0x628>)
 80069b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069b6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80069b8:	4b42      	ldr	r3, [pc, #264]	; (8006ac4 <HAL_RCC_OscConfig+0x628>)
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	4a41      	ldr	r2, [pc, #260]	; (8006ac4 <HAL_RCC_OscConfig+0x628>)
 80069be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c4:	f7fb fa1c 	bl	8001e00 <HAL_GetTick>
 80069c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069ca:	e008      	b.n	80069de <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069cc:	f7fb fa18 	bl	8001e00 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d901      	bls.n	80069de <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e06e      	b.n	8006abc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069de:	4b39      	ldr	r3, [pc, #228]	; (8006ac4 <HAL_RCC_OscConfig+0x628>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d0f0      	beq.n	80069cc <HAL_RCC_OscConfig+0x530>
 80069ea:	e066      	b.n	8006aba <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069ec:	4b35      	ldr	r3, [pc, #212]	; (8006ac4 <HAL_RCC_OscConfig+0x628>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a34      	ldr	r2, [pc, #208]	; (8006ac4 <HAL_RCC_OscConfig+0x628>)
 80069f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069f6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80069f8:	4b32      	ldr	r3, [pc, #200]	; (8006ac4 <HAL_RCC_OscConfig+0x628>)
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	4a31      	ldr	r2, [pc, #196]	; (8006ac4 <HAL_RCC_OscConfig+0x628>)
 80069fe:	f023 0303 	bic.w	r3, r3, #3
 8006a02:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006a04:	4b2f      	ldr	r3, [pc, #188]	; (8006ac4 <HAL_RCC_OscConfig+0x628>)
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	4a2e      	ldr	r2, [pc, #184]	; (8006ac4 <HAL_RCC_OscConfig+0x628>)
 8006a0a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a12:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a14:	f7fb f9f4 	bl	8001e00 <HAL_GetTick>
 8006a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a1a:	e008      	b.n	8006a2e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a1c:	f7fb f9f0 	bl	8001e00 <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d901      	bls.n	8006a2e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e046      	b.n	8006abc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a2e:	4b25      	ldr	r3, [pc, #148]	; (8006ac4 <HAL_RCC_OscConfig+0x628>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1f0      	bne.n	8006a1c <HAL_RCC_OscConfig+0x580>
 8006a3a:	e03e      	b.n	8006aba <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	69db      	ldr	r3, [r3, #28]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d101      	bne.n	8006a48 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e039      	b.n	8006abc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006a48:	4b1e      	ldr	r3, [pc, #120]	; (8006ac4 <HAL_RCC_OscConfig+0x628>)
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f003 0203 	and.w	r2, r3, #3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a1b      	ldr	r3, [r3, #32]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d12c      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a66:	3b01      	subs	r3, #1
 8006a68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d123      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a78:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d11b      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a88:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d113      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a98:	085b      	lsrs	r3, r3, #1
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d109      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aac:	085b      	lsrs	r3, r3, #1
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d001      	beq.n	8006aba <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e000      	b.n	8006abc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3720      	adds	r7, #32
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	40021000 	.word	0x40021000
 8006ac8:	019f800c 	.word	0x019f800c

08006acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d101      	bne.n	8006ae4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e11e      	b.n	8006d22 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ae4:	4b91      	ldr	r3, [pc, #580]	; (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 030f 	and.w	r3, r3, #15
 8006aec:	683a      	ldr	r2, [r7, #0]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d910      	bls.n	8006b14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006af2:	4b8e      	ldr	r3, [pc, #568]	; (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f023 020f 	bic.w	r2, r3, #15
 8006afa:	498c      	ldr	r1, [pc, #560]	; (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b02:	4b8a      	ldr	r3, [pc, #552]	; (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 030f 	and.w	r3, r3, #15
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d001      	beq.n	8006b14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e106      	b.n	8006d22 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0301 	and.w	r3, r3, #1
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d073      	beq.n	8006c08 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	2b03      	cmp	r3, #3
 8006b26:	d129      	bne.n	8006b7c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b28:	4b81      	ldr	r3, [pc, #516]	; (8006d30 <HAL_RCC_ClockConfig+0x264>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d101      	bne.n	8006b38 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e0f4      	b.n	8006d22 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006b38:	f000 f970 	bl	8006e1c <RCC_GetSysClockFreqFromPLLSource>
 8006b3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	4a7c      	ldr	r2, [pc, #496]	; (8006d34 <HAL_RCC_ClockConfig+0x268>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d93f      	bls.n	8006bc6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006b46:	4b7a      	ldr	r3, [pc, #488]	; (8006d30 <HAL_RCC_ClockConfig+0x264>)
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d009      	beq.n	8006b66 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d033      	beq.n	8006bc6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d12f      	bne.n	8006bc6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006b66:	4b72      	ldr	r3, [pc, #456]	; (8006d30 <HAL_RCC_ClockConfig+0x264>)
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b6e:	4a70      	ldr	r2, [pc, #448]	; (8006d30 <HAL_RCC_ClockConfig+0x264>)
 8006b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b74:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006b76:	2380      	movs	r3, #128	; 0x80
 8006b78:	617b      	str	r3, [r7, #20]
 8006b7a:	e024      	b.n	8006bc6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d107      	bne.n	8006b94 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b84:	4b6a      	ldr	r3, [pc, #424]	; (8006d30 <HAL_RCC_ClockConfig+0x264>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d109      	bne.n	8006ba4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e0c6      	b.n	8006d22 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b94:	4b66      	ldr	r3, [pc, #408]	; (8006d30 <HAL_RCC_ClockConfig+0x264>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d101      	bne.n	8006ba4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e0be      	b.n	8006d22 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006ba4:	f000 f8ce 	bl	8006d44 <HAL_RCC_GetSysClockFreq>
 8006ba8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	4a61      	ldr	r2, [pc, #388]	; (8006d34 <HAL_RCC_ClockConfig+0x268>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d909      	bls.n	8006bc6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006bb2:	4b5f      	ldr	r3, [pc, #380]	; (8006d30 <HAL_RCC_ClockConfig+0x264>)
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bba:	4a5d      	ldr	r2, [pc, #372]	; (8006d30 <HAL_RCC_ClockConfig+0x264>)
 8006bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bc0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006bc2:	2380      	movs	r3, #128	; 0x80
 8006bc4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006bc6:	4b5a      	ldr	r3, [pc, #360]	; (8006d30 <HAL_RCC_ClockConfig+0x264>)
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f023 0203 	bic.w	r2, r3, #3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	4957      	ldr	r1, [pc, #348]	; (8006d30 <HAL_RCC_ClockConfig+0x264>)
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bd8:	f7fb f912 	bl	8001e00 <HAL_GetTick>
 8006bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bde:	e00a      	b.n	8006bf6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006be0:	f7fb f90e 	bl	8001e00 <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d901      	bls.n	8006bf6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e095      	b.n	8006d22 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bf6:	4b4e      	ldr	r3, [pc, #312]	; (8006d30 <HAL_RCC_ClockConfig+0x264>)
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f003 020c 	and.w	r2, r3, #12
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d1eb      	bne.n	8006be0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0302 	and.w	r3, r3, #2
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d023      	beq.n	8006c5c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0304 	and.w	r3, r3, #4
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d005      	beq.n	8006c2c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c20:	4b43      	ldr	r3, [pc, #268]	; (8006d30 <HAL_RCC_ClockConfig+0x264>)
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	4a42      	ldr	r2, [pc, #264]	; (8006d30 <HAL_RCC_ClockConfig+0x264>)
 8006c26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006c2a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0308 	and.w	r3, r3, #8
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d007      	beq.n	8006c48 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006c38:	4b3d      	ldr	r3, [pc, #244]	; (8006d30 <HAL_RCC_ClockConfig+0x264>)
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006c40:	4a3b      	ldr	r2, [pc, #236]	; (8006d30 <HAL_RCC_ClockConfig+0x264>)
 8006c42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006c46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c48:	4b39      	ldr	r3, [pc, #228]	; (8006d30 <HAL_RCC_ClockConfig+0x264>)
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	4936      	ldr	r1, [pc, #216]	; (8006d30 <HAL_RCC_ClockConfig+0x264>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	608b      	str	r3, [r1, #8]
 8006c5a:	e008      	b.n	8006c6e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	2b80      	cmp	r3, #128	; 0x80
 8006c60:	d105      	bne.n	8006c6e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006c62:	4b33      	ldr	r3, [pc, #204]	; (8006d30 <HAL_RCC_ClockConfig+0x264>)
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	4a32      	ldr	r2, [pc, #200]	; (8006d30 <HAL_RCC_ClockConfig+0x264>)
 8006c68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c6c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c6e:	4b2f      	ldr	r3, [pc, #188]	; (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 030f 	and.w	r3, r3, #15
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d21d      	bcs.n	8006cb8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c7c:	4b2b      	ldr	r3, [pc, #172]	; (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f023 020f 	bic.w	r2, r3, #15
 8006c84:	4929      	ldr	r1, [pc, #164]	; (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006c8c:	f7fb f8b8 	bl	8001e00 <HAL_GetTick>
 8006c90:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c92:	e00a      	b.n	8006caa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c94:	f7fb f8b4 	bl	8001e00 <HAL_GetTick>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d901      	bls.n	8006caa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e03b      	b.n	8006d22 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006caa:	4b20      	ldr	r3, [pc, #128]	; (8006d2c <HAL_RCC_ClockConfig+0x260>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 030f 	and.w	r3, r3, #15
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d1ed      	bne.n	8006c94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0304 	and.w	r3, r3, #4
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d008      	beq.n	8006cd6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cc4:	4b1a      	ldr	r3, [pc, #104]	; (8006d30 <HAL_RCC_ClockConfig+0x264>)
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	4917      	ldr	r1, [pc, #92]	; (8006d30 <HAL_RCC_ClockConfig+0x264>)
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0308 	and.w	r3, r3, #8
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d009      	beq.n	8006cf6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ce2:	4b13      	ldr	r3, [pc, #76]	; (8006d30 <HAL_RCC_ClockConfig+0x264>)
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	00db      	lsls	r3, r3, #3
 8006cf0:	490f      	ldr	r1, [pc, #60]	; (8006d30 <HAL_RCC_ClockConfig+0x264>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006cf6:	f000 f825 	bl	8006d44 <HAL_RCC_GetSysClockFreq>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	4b0c      	ldr	r3, [pc, #48]	; (8006d30 <HAL_RCC_ClockConfig+0x264>)
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	091b      	lsrs	r3, r3, #4
 8006d02:	f003 030f 	and.w	r3, r3, #15
 8006d06:	490c      	ldr	r1, [pc, #48]	; (8006d38 <HAL_RCC_ClockConfig+0x26c>)
 8006d08:	5ccb      	ldrb	r3, [r1, r3]
 8006d0a:	f003 031f 	and.w	r3, r3, #31
 8006d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d12:	4a0a      	ldr	r2, [pc, #40]	; (8006d3c <HAL_RCC_ClockConfig+0x270>)
 8006d14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006d16:	4b0a      	ldr	r3, [pc, #40]	; (8006d40 <HAL_RCC_ClockConfig+0x274>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7fb f824 	bl	8001d68 <HAL_InitTick>
 8006d20:	4603      	mov	r3, r0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3718      	adds	r7, #24
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	40022000 	.word	0x40022000
 8006d30:	40021000 	.word	0x40021000
 8006d34:	04c4b400 	.word	0x04c4b400
 8006d38:	08010aec 	.word	0x08010aec
 8006d3c:	200026d4 	.word	0x200026d4
 8006d40:	200026d8 	.word	0x200026d8

08006d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b087      	sub	sp, #28
 8006d48:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006d4a:	4b2c      	ldr	r3, [pc, #176]	; (8006dfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f003 030c 	and.w	r3, r3, #12
 8006d52:	2b04      	cmp	r3, #4
 8006d54:	d102      	bne.n	8006d5c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006d56:	4b2a      	ldr	r3, [pc, #168]	; (8006e00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d58:	613b      	str	r3, [r7, #16]
 8006d5a:	e047      	b.n	8006dec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006d5c:	4b27      	ldr	r3, [pc, #156]	; (8006dfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f003 030c 	and.w	r3, r3, #12
 8006d64:	2b08      	cmp	r3, #8
 8006d66:	d102      	bne.n	8006d6e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d68:	4b25      	ldr	r3, [pc, #148]	; (8006e00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d6a:	613b      	str	r3, [r7, #16]
 8006d6c:	e03e      	b.n	8006dec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006d6e:	4b23      	ldr	r3, [pc, #140]	; (8006dfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f003 030c 	and.w	r3, r3, #12
 8006d76:	2b0c      	cmp	r3, #12
 8006d78:	d136      	bne.n	8006de8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d7a:	4b20      	ldr	r3, [pc, #128]	; (8006dfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	f003 0303 	and.w	r3, r3, #3
 8006d82:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d84:	4b1d      	ldr	r3, [pc, #116]	; (8006dfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	091b      	lsrs	r3, r3, #4
 8006d8a:	f003 030f 	and.w	r3, r3, #15
 8006d8e:	3301      	adds	r3, #1
 8006d90:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2b03      	cmp	r3, #3
 8006d96:	d10c      	bne.n	8006db2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d98:	4a19      	ldr	r2, [pc, #100]	; (8006e00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da0:	4a16      	ldr	r2, [pc, #88]	; (8006dfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006da2:	68d2      	ldr	r2, [r2, #12]
 8006da4:	0a12      	lsrs	r2, r2, #8
 8006da6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006daa:	fb02 f303 	mul.w	r3, r2, r3
 8006dae:	617b      	str	r3, [r7, #20]
      break;
 8006db0:	e00c      	b.n	8006dcc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006db2:	4a13      	ldr	r2, [pc, #76]	; (8006e00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dba:	4a10      	ldr	r2, [pc, #64]	; (8006dfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dbc:	68d2      	ldr	r2, [r2, #12]
 8006dbe:	0a12      	lsrs	r2, r2, #8
 8006dc0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006dc4:	fb02 f303 	mul.w	r3, r2, r3
 8006dc8:	617b      	str	r3, [r7, #20]
      break;
 8006dca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006dcc:	4b0b      	ldr	r3, [pc, #44]	; (8006dfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	0e5b      	lsrs	r3, r3, #25
 8006dd2:	f003 0303 	and.w	r3, r3, #3
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	005b      	lsls	r3, r3, #1
 8006dda:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006ddc:	697a      	ldr	r2, [r7, #20]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de4:	613b      	str	r3, [r7, #16]
 8006de6:	e001      	b.n	8006dec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006de8:	2300      	movs	r3, #0
 8006dea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006dec:	693b      	ldr	r3, [r7, #16]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	371c      	adds	r7, #28
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	40021000 	.word	0x40021000
 8006e00:	00f42400 	.word	0x00f42400

08006e04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e04:	b480      	push	{r7}
 8006e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e08:	4b03      	ldr	r3, [pc, #12]	; (8006e18 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	200026d4 	.word	0x200026d4

08006e1c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b087      	sub	sp, #28
 8006e20:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006e22:	4b1e      	ldr	r3, [pc, #120]	; (8006e9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	f003 0303 	and.w	r3, r3, #3
 8006e2a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006e2c:	4b1b      	ldr	r3, [pc, #108]	; (8006e9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	091b      	lsrs	r3, r3, #4
 8006e32:	f003 030f 	and.w	r3, r3, #15
 8006e36:	3301      	adds	r3, #1
 8006e38:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	2b03      	cmp	r3, #3
 8006e3e:	d10c      	bne.n	8006e5a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e40:	4a17      	ldr	r2, [pc, #92]	; (8006ea0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e48:	4a14      	ldr	r2, [pc, #80]	; (8006e9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e4a:	68d2      	ldr	r2, [r2, #12]
 8006e4c:	0a12      	lsrs	r2, r2, #8
 8006e4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006e52:	fb02 f303 	mul.w	r3, r2, r3
 8006e56:	617b      	str	r3, [r7, #20]
    break;
 8006e58:	e00c      	b.n	8006e74 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e5a:	4a11      	ldr	r2, [pc, #68]	; (8006ea0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e62:	4a0e      	ldr	r2, [pc, #56]	; (8006e9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e64:	68d2      	ldr	r2, [r2, #12]
 8006e66:	0a12      	lsrs	r2, r2, #8
 8006e68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006e6c:	fb02 f303 	mul.w	r3, r2, r3
 8006e70:	617b      	str	r3, [r7, #20]
    break;
 8006e72:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006e74:	4b09      	ldr	r3, [pc, #36]	; (8006e9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	0e5b      	lsrs	r3, r3, #25
 8006e7a:	f003 0303 	and.w	r3, r3, #3
 8006e7e:	3301      	adds	r3, #1
 8006e80:	005b      	lsls	r3, r3, #1
 8006e82:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e8c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006e8e:	687b      	ldr	r3, [r7, #4]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	371c      	adds	r7, #28
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr
 8006e9c:	40021000 	.word	0x40021000
 8006ea0:	00f42400 	.word	0x00f42400

08006ea4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006eac:	2300      	movs	r3, #0
 8006eae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f000 8098 	beq.w	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ec6:	4b43      	ldr	r3, [pc, #268]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10d      	bne.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ed2:	4b40      	ldr	r3, [pc, #256]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ed6:	4a3f      	ldr	r2, [pc, #252]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006edc:	6593      	str	r3, [r2, #88]	; 0x58
 8006ede:	4b3d      	ldr	r3, [pc, #244]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ee6:	60bb      	str	r3, [r7, #8]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006eea:	2301      	movs	r3, #1
 8006eec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006eee:	4b3a      	ldr	r3, [pc, #232]	; (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a39      	ldr	r2, [pc, #228]	; (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ef8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006efa:	f7fa ff81 	bl	8001e00 <HAL_GetTick>
 8006efe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f00:	e009      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f02:	f7fa ff7d 	bl	8001e00 <HAL_GetTick>
 8006f06:	4602      	mov	r2, r0
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d902      	bls.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	74fb      	strb	r3, [r7, #19]
        break;
 8006f14:	e005      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f16:	4b30      	ldr	r3, [pc, #192]	; (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d0ef      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006f22:	7cfb      	ldrb	r3, [r7, #19]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d159      	bne.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006f28:	4b2a      	ldr	r3, [pc, #168]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f32:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d01e      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d019      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006f44:	4b23      	ldr	r3, [pc, #140]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f50:	4b20      	ldr	r3, [pc, #128]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f56:	4a1f      	ldr	r2, [pc, #124]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f60:	4b1c      	ldr	r3, [pc, #112]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f66:	4a1b      	ldr	r2, [pc, #108]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006f70:	4a18      	ldr	r2, [pc, #96]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	f003 0301 	and.w	r3, r3, #1
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d016      	beq.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f82:	f7fa ff3d 	bl	8001e00 <HAL_GetTick>
 8006f86:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f88:	e00b      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f8a:	f7fa ff39 	bl	8001e00 <HAL_GetTick>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d902      	bls.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	74fb      	strb	r3, [r7, #19]
            break;
 8006fa0:	e006      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006fa2:	4b0c      	ldr	r3, [pc, #48]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fa8:	f003 0302 	and.w	r3, r3, #2
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d0ec      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006fb0:	7cfb      	ldrb	r3, [r7, #19]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10b      	bne.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fb6:	4b07      	ldr	r3, [pc, #28]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc4:	4903      	ldr	r1, [pc, #12]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006fcc:	e008      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006fce:	7cfb      	ldrb	r3, [r7, #19]
 8006fd0:	74bb      	strb	r3, [r7, #18]
 8006fd2:	e005      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006fd4:	40021000 	.word	0x40021000
 8006fd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fdc:	7cfb      	ldrb	r3, [r7, #19]
 8006fde:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006fe0:	7c7b      	ldrb	r3, [r7, #17]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d105      	bne.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fe6:	4ba7      	ldr	r3, [pc, #668]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fea:	4aa6      	ldr	r2, [pc, #664]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ff0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00a      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ffe:	4ba1      	ldr	r3, [pc, #644]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007004:	f023 0203 	bic.w	r2, r3, #3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	499d      	ldr	r1, [pc, #628]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800700e:	4313      	orrs	r3, r2
 8007010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0302 	and.w	r3, r3, #2
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00a      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007020:	4b98      	ldr	r3, [pc, #608]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007026:	f023 020c 	bic.w	r2, r3, #12
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	4995      	ldr	r1, [pc, #596]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007030:	4313      	orrs	r3, r2
 8007032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0304 	and.w	r3, r3, #4
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00a      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007042:	4b90      	ldr	r3, [pc, #576]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007048:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	498c      	ldr	r1, [pc, #560]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007052:	4313      	orrs	r3, r2
 8007054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0308 	and.w	r3, r3, #8
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00a      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007064:	4b87      	ldr	r3, [pc, #540]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800706a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	4984      	ldr	r1, [pc, #528]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007074:	4313      	orrs	r3, r2
 8007076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0310 	and.w	r3, r3, #16
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00a      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007086:	4b7f      	ldr	r3, [pc, #508]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800708c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	695b      	ldr	r3, [r3, #20]
 8007094:	497b      	ldr	r1, [pc, #492]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007096:	4313      	orrs	r3, r2
 8007098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0320 	and.w	r3, r3, #32
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00a      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80070a8:	4b76      	ldr	r3, [pc, #472]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	4973      	ldr	r1, [pc, #460]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070b8:	4313      	orrs	r3, r2
 80070ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00a      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80070ca:	4b6e      	ldr	r3, [pc, #440]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	69db      	ldr	r3, [r3, #28]
 80070d8:	496a      	ldr	r1, [pc, #424]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00a      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80070ec:	4b65      	ldr	r3, [pc, #404]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	4962      	ldr	r1, [pc, #392]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070fc:	4313      	orrs	r3, r2
 80070fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00a      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800710e:	4b5d      	ldr	r3, [pc, #372]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007114:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711c:	4959      	ldr	r1, [pc, #356]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800711e:	4313      	orrs	r3, r2
 8007120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00a      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007130:	4b54      	ldr	r3, [pc, #336]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007132:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007136:	f023 0203 	bic.w	r2, r3, #3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713e:	4951      	ldr	r1, [pc, #324]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007140:	4313      	orrs	r3, r2
 8007142:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00a      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007152:	4b4c      	ldr	r3, [pc, #304]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007158:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007160:	4948      	ldr	r1, [pc, #288]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007162:	4313      	orrs	r3, r2
 8007164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007170:	2b00      	cmp	r3, #0
 8007172:	d015      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007174:	4b43      	ldr	r3, [pc, #268]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800717a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007182:	4940      	ldr	r1, [pc, #256]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007184:	4313      	orrs	r3, r2
 8007186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007192:	d105      	bne.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007194:	4b3b      	ldr	r3, [pc, #236]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	4a3a      	ldr	r2, [pc, #232]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800719a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800719e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d015      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80071ac:	4b35      	ldr	r3, [pc, #212]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ba:	4932      	ldr	r1, [pc, #200]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071bc:	4313      	orrs	r3, r2
 80071be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071ca:	d105      	bne.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071cc:	4b2d      	ldr	r3, [pc, #180]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	4a2c      	ldr	r2, [pc, #176]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071d6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d015      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80071e4:	4b27      	ldr	r3, [pc, #156]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f2:	4924      	ldr	r1, [pc, #144]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071f4:	4313      	orrs	r3, r2
 80071f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007202:	d105      	bne.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007204:	4b1f      	ldr	r3, [pc, #124]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	4a1e      	ldr	r2, [pc, #120]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800720a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800720e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007218:	2b00      	cmp	r3, #0
 800721a:	d015      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800721c:	4b19      	ldr	r3, [pc, #100]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800721e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007222:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800722a:	4916      	ldr	r1, [pc, #88]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800722c:	4313      	orrs	r3, r2
 800722e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007236:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800723a:	d105      	bne.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800723c:	4b11      	ldr	r3, [pc, #68]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	4a10      	ldr	r2, [pc, #64]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007246:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007250:	2b00      	cmp	r3, #0
 8007252:	d019      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007254:	4b0b      	ldr	r3, [pc, #44]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800725a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007262:	4908      	ldr	r1, [pc, #32]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007264:	4313      	orrs	r3, r2
 8007266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007272:	d109      	bne.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007274:	4b03      	ldr	r3, [pc, #12]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	4a02      	ldr	r2, [pc, #8]	; (8007284 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800727a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800727e:	60d3      	str	r3, [r2, #12]
 8007280:	e002      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007282:	bf00      	nop
 8007284:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d015      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007294:	4b29      	ldr	r3, [pc, #164]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800729a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072a2:	4926      	ldr	r1, [pc, #152]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072a4:	4313      	orrs	r3, r2
 80072a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072b2:	d105      	bne.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80072b4:	4b21      	ldr	r3, [pc, #132]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	4a20      	ldr	r2, [pc, #128]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072be:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d015      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80072cc:	4b1b      	ldr	r3, [pc, #108]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072d2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072da:	4918      	ldr	r1, [pc, #96]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072ea:	d105      	bne.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80072ec:	4b13      	ldr	r3, [pc, #76]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	4a12      	ldr	r2, [pc, #72]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072f6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d015      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007304:	4b0d      	ldr	r3, [pc, #52]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007306:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800730a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007312:	490a      	ldr	r1, [pc, #40]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007314:	4313      	orrs	r3, r2
 8007316:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800731e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007322:	d105      	bne.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007324:	4b05      	ldr	r3, [pc, #20]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	4a04      	ldr	r2, [pc, #16]	; (800733c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800732a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800732e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007330:	7cbb      	ldrb	r3, [r7, #18]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3718      	adds	r7, #24
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	40021000 	.word	0x40021000

08007340 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d101      	bne.n	8007352 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e09d      	b.n	800748e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007356:	2b00      	cmp	r3, #0
 8007358:	d108      	bne.n	800736c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007362:	d009      	beq.n	8007378 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	61da      	str	r2, [r3, #28]
 800736a:	e005      	b.n	8007378 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	d106      	bne.n	8007398 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f7fa faba 	bl	800190c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2202      	movs	r2, #2
 800739c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073b8:	d902      	bls.n	80073c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80073ba:	2300      	movs	r3, #0
 80073bc:	60fb      	str	r3, [r7, #12]
 80073be:	e002      	b.n	80073c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80073c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80073ce:	d007      	beq.n	80073e0 <HAL_SPI_Init+0xa0>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80073d8:	d002      	beq.n	80073e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80073f0:	431a      	orrs	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	f003 0302 	and.w	r3, r3, #2
 80073fa:	431a      	orrs	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	695b      	ldr	r3, [r3, #20]
 8007400:	f003 0301 	and.w	r3, r3, #1
 8007404:	431a      	orrs	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800740e:	431a      	orrs	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	69db      	ldr	r3, [r3, #28]
 8007414:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007418:	431a      	orrs	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007422:	ea42 0103 	orr.w	r1, r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	430a      	orrs	r2, r1
 8007434:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	0c1b      	lsrs	r3, r3, #16
 800743c:	f003 0204 	and.w	r2, r3, #4
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007444:	f003 0310 	and.w	r3, r3, #16
 8007448:	431a      	orrs	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800744e:	f003 0308 	and.w	r3, r3, #8
 8007452:	431a      	orrs	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800745c:	ea42 0103 	orr.w	r1, r2, r3
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	430a      	orrs	r2, r1
 800746c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	69da      	ldr	r2, [r3, #28]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800747c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b088      	sub	sp, #32
 800749a:	af00      	add	r7, sp, #0
 800749c:	60f8      	str	r0, [r7, #12]
 800749e:	60b9      	str	r1, [r7, #8]
 80074a0:	603b      	str	r3, [r7, #0]
 80074a2:	4613      	mov	r3, r2
 80074a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80074a6:	2300      	movs	r3, #0
 80074a8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d101      	bne.n	80074b8 <HAL_SPI_Transmit+0x22>
 80074b4:	2302      	movs	r3, #2
 80074b6:	e158      	b.n	800776a <HAL_SPI_Transmit+0x2d4>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074c0:	f7fa fc9e 	bl	8001e00 <HAL_GetTick>
 80074c4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80074c6:	88fb      	ldrh	r3, [r7, #6]
 80074c8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d002      	beq.n	80074dc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80074d6:	2302      	movs	r3, #2
 80074d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074da:	e13d      	b.n	8007758 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d002      	beq.n	80074e8 <HAL_SPI_Transmit+0x52>
 80074e2:	88fb      	ldrh	r3, [r7, #6]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d102      	bne.n	80074ee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074ec:	e134      	b.n	8007758 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2203      	movs	r2, #3
 80074f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	88fa      	ldrh	r2, [r7, #6]
 8007506:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	88fa      	ldrh	r2, [r7, #6]
 800750c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2200      	movs	r2, #0
 8007512:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2200      	movs	r2, #0
 8007518:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2200      	movs	r2, #0
 8007528:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007538:	d10f      	bne.n	800755a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007548:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007558:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007564:	2b40      	cmp	r3, #64	; 0x40
 8007566:	d007      	beq.n	8007578 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007576:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007580:	d94b      	bls.n	800761a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d002      	beq.n	8007590 <HAL_SPI_Transmit+0xfa>
 800758a:	8afb      	ldrh	r3, [r7, #22]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d13e      	bne.n	800760e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007594:	881a      	ldrh	r2, [r3, #0]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a0:	1c9a      	adds	r2, r3, #2
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	3b01      	subs	r3, #1
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80075b4:	e02b      	b.n	800760e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f003 0302 	and.w	r3, r3, #2
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	d112      	bne.n	80075ea <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c8:	881a      	ldrh	r2, [r3, #0]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d4:	1c9a      	adds	r2, r3, #2
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075de:	b29b      	uxth	r3, r3
 80075e0:	3b01      	subs	r3, #1
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80075e8:	e011      	b.n	800760e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075ea:	f7fa fc09 	bl	8001e00 <HAL_GetTick>
 80075ee:	4602      	mov	r2, r0
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	683a      	ldr	r2, [r7, #0]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d803      	bhi.n	8007602 <HAL_SPI_Transmit+0x16c>
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007600:	d102      	bne.n	8007608 <HAL_SPI_Transmit+0x172>
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d102      	bne.n	800760e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007608:	2303      	movs	r3, #3
 800760a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800760c:	e0a4      	b.n	8007758 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007612:	b29b      	uxth	r3, r3
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1ce      	bne.n	80075b6 <HAL_SPI_Transmit+0x120>
 8007618:	e07c      	b.n	8007714 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d002      	beq.n	8007628 <HAL_SPI_Transmit+0x192>
 8007622:	8afb      	ldrh	r3, [r7, #22]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d170      	bne.n	800770a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800762c:	b29b      	uxth	r3, r3
 800762e:	2b01      	cmp	r3, #1
 8007630:	d912      	bls.n	8007658 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007636:	881a      	ldrh	r2, [r3, #0]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007642:	1c9a      	adds	r2, r3, #2
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800764c:	b29b      	uxth	r3, r3
 800764e:	3b02      	subs	r3, #2
 8007650:	b29a      	uxth	r2, r3
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007656:	e058      	b.n	800770a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	330c      	adds	r3, #12
 8007662:	7812      	ldrb	r2, [r2, #0]
 8007664:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800766a:	1c5a      	adds	r2, r3, #1
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007674:	b29b      	uxth	r3, r3
 8007676:	3b01      	subs	r3, #1
 8007678:	b29a      	uxth	r2, r3
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800767e:	e044      	b.n	800770a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f003 0302 	and.w	r3, r3, #2
 800768a:	2b02      	cmp	r3, #2
 800768c:	d12b      	bne.n	80076e6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007692:	b29b      	uxth	r3, r3
 8007694:	2b01      	cmp	r3, #1
 8007696:	d912      	bls.n	80076be <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769c:	881a      	ldrh	r2, [r3, #0]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a8:	1c9a      	adds	r2, r3, #2
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	3b02      	subs	r3, #2
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80076bc:	e025      	b.n	800770a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	330c      	adds	r3, #12
 80076c8:	7812      	ldrb	r2, [r2, #0]
 80076ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d0:	1c5a      	adds	r2, r3, #1
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076da:	b29b      	uxth	r3, r3
 80076dc:	3b01      	subs	r3, #1
 80076de:	b29a      	uxth	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80076e4:	e011      	b.n	800770a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076e6:	f7fa fb8b 	bl	8001e00 <HAL_GetTick>
 80076ea:	4602      	mov	r2, r0
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	1ad3      	subs	r3, r2, r3
 80076f0:	683a      	ldr	r2, [r7, #0]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d803      	bhi.n	80076fe <HAL_SPI_Transmit+0x268>
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076fc:	d102      	bne.n	8007704 <HAL_SPI_Transmit+0x26e>
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d102      	bne.n	800770a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007704:	2303      	movs	r3, #3
 8007706:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007708:	e026      	b.n	8007758 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800770e:	b29b      	uxth	r3, r3
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1b5      	bne.n	8007680 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007714:	69ba      	ldr	r2, [r7, #24]
 8007716:	6839      	ldr	r1, [r7, #0]
 8007718:	68f8      	ldr	r0, [r7, #12]
 800771a:	f000 fd47 	bl	80081ac <SPI_EndRxTxTransaction>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d002      	beq.n	800772a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2220      	movs	r2, #32
 8007728:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10a      	bne.n	8007748 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007732:	2300      	movs	r3, #0
 8007734:	613b      	str	r3, [r7, #16]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	613b      	str	r3, [r7, #16]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	613b      	str	r3, [r7, #16]
 8007746:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800774c:	2b00      	cmp	r3, #0
 800774e:	d002      	beq.n	8007756 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	77fb      	strb	r3, [r7, #31]
 8007754:	e000      	b.n	8007758 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007756:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007768:	7ffb      	ldrb	r3, [r7, #31]
}
 800776a:	4618      	mov	r0, r3
 800776c:	3720      	adds	r7, #32
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
	...

08007774 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
 8007780:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007782:	2300      	movs	r3, #0
 8007784:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800778c:	2b01      	cmp	r3, #1
 800778e:	d101      	bne.n	8007794 <HAL_SPI_TransmitReceive_DMA+0x20>
 8007790:	2302      	movs	r3, #2
 8007792:	e16c      	b.n	8007a6e <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80077a2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80077aa:	7dbb      	ldrb	r3, [r7, #22]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d00d      	beq.n	80077cc <HAL_SPI_TransmitReceive_DMA+0x58>
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077b6:	d106      	bne.n	80077c6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d102      	bne.n	80077c6 <HAL_SPI_TransmitReceive_DMA+0x52>
 80077c0:	7dbb      	ldrb	r3, [r7, #22]
 80077c2:	2b04      	cmp	r3, #4
 80077c4:	d002      	beq.n	80077cc <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80077c6:	2302      	movs	r3, #2
 80077c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80077ca:	e14b      	b.n	8007a64 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d005      	beq.n	80077de <HAL_SPI_TransmitReceive_DMA+0x6a>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d002      	beq.n	80077de <HAL_SPI_TransmitReceive_DMA+0x6a>
 80077d8:	887b      	ldrh	r3, [r7, #2]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d102      	bne.n	80077e4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80077e2:	e13f      	b.n	8007a64 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	2b04      	cmp	r3, #4
 80077ee:	d003      	beq.n	80077f8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2205      	movs	r2, #5
 80077f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	887a      	ldrh	r2, [r7, #2]
 8007808:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	887a      	ldrh	r2, [r7, #2]
 800780e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	887a      	ldrh	r2, [r7, #2]
 800781a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	887a      	ldrh	r2, [r7, #2]
 8007822:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2200      	movs	r2, #0
 8007830:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	685a      	ldr	r2, [r3, #4]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8007840:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800784a:	d908      	bls.n	800785e <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	685a      	ldr	r2, [r3, #4]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800785a:	605a      	str	r2, [r3, #4]
 800785c:	e06f      	b.n	800793e <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	685a      	ldr	r2, [r3, #4]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800786c:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007878:	d126      	bne.n	80078c8 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10f      	bne.n	80078a6 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007894:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800789a:	b29b      	uxth	r3, r3
 800789c:	085b      	lsrs	r3, r3, #1
 800789e:	b29a      	uxth	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80078a4:	e010      	b.n	80078c8 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	685a      	ldr	r2, [r3, #4]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078b4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	085b      	lsrs	r3, r3, #1
 80078be:	b29b      	uxth	r3, r3
 80078c0:	3301      	adds	r3, #1
 80078c2:	b29a      	uxth	r2, r3
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078cc:	699b      	ldr	r3, [r3, #24]
 80078ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078d2:	d134      	bne.n	800793e <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	685a      	ldr	r2, [r3, #4]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80078e2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	f003 0301 	and.w	r3, r3, #1
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d111      	bne.n	8007918 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	685a      	ldr	r2, [r3, #4]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007902:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800790a:	b29b      	uxth	r3, r3
 800790c:	085b      	lsrs	r3, r3, #1
 800790e:	b29a      	uxth	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007916:	e012      	b.n	800793e <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	685a      	ldr	r2, [r3, #4]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007926:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800792e:	b29b      	uxth	r3, r3
 8007930:	085b      	lsrs	r3, r3, #1
 8007932:	b29b      	uxth	r3, r3
 8007934:	3301      	adds	r3, #1
 8007936:	b29a      	uxth	r2, r3
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007944:	b2db      	uxtb	r3, r3
 8007946:	2b04      	cmp	r3, #4
 8007948:	d108      	bne.n	800795c <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800794e:	4a4a      	ldr	r2, [pc, #296]	; (8007a78 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8007950:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007956:	4a49      	ldr	r2, [pc, #292]	; (8007a7c <HAL_SPI_TransmitReceive_DMA+0x308>)
 8007958:	62da      	str	r2, [r3, #44]	; 0x2c
 800795a:	e007      	b.n	800796c <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007960:	4a47      	ldr	r2, [pc, #284]	; (8007a80 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8007962:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007968:	4a46      	ldr	r2, [pc, #280]	; (8007a84 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800796a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007970:	4a45      	ldr	r2, [pc, #276]	; (8007a88 <HAL_SPI_TransmitReceive_DMA+0x314>)
 8007972:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007978:	2200      	movs	r2, #0
 800797a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	330c      	adds	r3, #12
 8007986:	4619      	mov	r1, r3
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007994:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007996:	f7fc fb63 	bl	8004060 <HAL_DMA_Start_IT>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00c      	beq.n	80079ba <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079a4:	f043 0210 	orr.w	r2, r3, #16
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80079b8:	e054      	b.n	8007a64 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	685a      	ldr	r2, [r3, #4]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f042 0201 	orr.w	r2, r2, #1
 80079c8:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ce:	2200      	movs	r2, #0
 80079d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079d6:	2200      	movs	r2, #0
 80079d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079de:	2200      	movs	r2, #0
 80079e0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e6:	2200      	movs	r2, #0
 80079e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f2:	4619      	mov	r1, r3
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	330c      	adds	r3, #12
 80079fa:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a00:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007a02:	f7fc fb2d 	bl	8004060 <HAL_DMA_Start_IT>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00c      	beq.n	8007a26 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a10:	f043 0210 	orr.w	r2, r3, #16
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8007a24:	e01e      	b.n	8007a64 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a30:	2b40      	cmp	r3, #64	; 0x40
 8007a32:	d007      	beq.n	8007a44 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a42:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	685a      	ldr	r2, [r3, #4]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f042 0220 	orr.w	r2, r2, #32
 8007a52:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	685a      	ldr	r2, [r3, #4]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f042 0202 	orr.w	r2, r2, #2
 8007a62:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3718      	adds	r7, #24
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	08007e1d 	.word	0x08007e1d
 8007a7c:	08007ce5 	.word	0x08007ce5
 8007a80:	08007e39 	.word	0x08007e39
 8007a84:	08007d8d 	.word	0x08007d8d
 8007a88:	08007e55 	.word	0x08007e55

08007a8c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b088      	sub	sp, #32
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	099b      	lsrs	r3, r3, #6
 8007aa8:	f003 0301 	and.w	r3, r3, #1
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d10f      	bne.n	8007ad0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00a      	beq.n	8007ad0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	099b      	lsrs	r3, r3, #6
 8007abe:	f003 0301 	and.w	r3, r3, #1
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d004      	beq.n	8007ad0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	4798      	blx	r3
    return;
 8007ace:	e0d7      	b.n	8007c80 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	085b      	lsrs	r3, r3, #1
 8007ad4:	f003 0301 	and.w	r3, r3, #1
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00a      	beq.n	8007af2 <HAL_SPI_IRQHandler+0x66>
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	09db      	lsrs	r3, r3, #7
 8007ae0:	f003 0301 	and.w	r3, r3, #1
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d004      	beq.n	8007af2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	4798      	blx	r3
    return;
 8007af0:	e0c6      	b.n	8007c80 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	095b      	lsrs	r3, r3, #5
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d10c      	bne.n	8007b18 <HAL_SPI_IRQHandler+0x8c>
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	099b      	lsrs	r3, r3, #6
 8007b02:	f003 0301 	and.w	r3, r3, #1
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d106      	bne.n	8007b18 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	0a1b      	lsrs	r3, r3, #8
 8007b0e:	f003 0301 	and.w	r3, r3, #1
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f000 80b4 	beq.w	8007c80 <HAL_SPI_IRQHandler+0x1f4>
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	095b      	lsrs	r3, r3, #5
 8007b1c:	f003 0301 	and.w	r3, r3, #1
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f000 80ad 	beq.w	8007c80 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	099b      	lsrs	r3, r3, #6
 8007b2a:	f003 0301 	and.w	r3, r3, #1
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d023      	beq.n	8007b7a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	2b03      	cmp	r3, #3
 8007b3c:	d011      	beq.n	8007b62 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b42:	f043 0204 	orr.w	r2, r3, #4
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	617b      	str	r3, [r7, #20]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	617b      	str	r3, [r7, #20]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	617b      	str	r3, [r7, #20]
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	e00b      	b.n	8007b7a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b62:	2300      	movs	r3, #0
 8007b64:	613b      	str	r3, [r7, #16]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	613b      	str	r3, [r7, #16]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	613b      	str	r3, [r7, #16]
 8007b76:	693b      	ldr	r3, [r7, #16]
        return;
 8007b78:	e082      	b.n	8007c80 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	095b      	lsrs	r3, r3, #5
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d014      	beq.n	8007bb0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b8a:	f043 0201 	orr.w	r2, r3, #1
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007b92:	2300      	movs	r3, #0
 8007b94:	60fb      	str	r3, [r7, #12]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	60fb      	str	r3, [r7, #12]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bac:	601a      	str	r2, [r3, #0]
 8007bae:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	0a1b      	lsrs	r3, r3, #8
 8007bb4:	f003 0301 	and.w	r3, r3, #1
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00c      	beq.n	8007bd6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bc0:	f043 0208 	orr.w	r2, r3, #8
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007bc8:	2300      	movs	r3, #0
 8007bca:	60bb      	str	r3, [r7, #8]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	60bb      	str	r3, [r7, #8]
 8007bd4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d04f      	beq.n	8007c7e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	685a      	ldr	r2, [r3, #4]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007bec:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	f003 0302 	and.w	r3, r3, #2
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d104      	bne.n	8007c0a <HAL_SPI_IRQHandler+0x17e>
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d034      	beq.n	8007c74 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	685a      	ldr	r2, [r3, #4]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f022 0203 	bic.w	r2, r2, #3
 8007c18:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d011      	beq.n	8007c46 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c26:	4a18      	ldr	r2, [pc, #96]	; (8007c88 <HAL_SPI_IRQHandler+0x1fc>)
 8007c28:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fc faea 	bl	8004208 <HAL_DMA_Abort_IT>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d005      	beq.n	8007c46 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d016      	beq.n	8007c7c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c52:	4a0d      	ldr	r2, [pc, #52]	; (8007c88 <HAL_SPI_IRQHandler+0x1fc>)
 8007c54:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7fc fad4 	bl	8004208 <HAL_DMA_Abort_IT>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00a      	beq.n	8007c7c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007c72:	e003      	b.n	8007c7c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 f81d 	bl	8007cb4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007c7a:	e000      	b.n	8007c7e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007c7c:	bf00      	nop
    return;
 8007c7e:	bf00      	nop
  }
}
 8007c80:	3720      	adds	r7, #32
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	08007e95 	.word	0x08007e95

08007c8c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007ca8:	bf00      	nop
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007cd6:	b2db      	uxtb	r3, r3
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf0:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cf2:	f7fa f885 	bl	8001e00 <HAL_GetTick>
 8007cf6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 0320 	and.w	r3, r3, #32
 8007d02:	2b20      	cmp	r3, #32
 8007d04:	d03c      	beq.n	8007d80 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	685a      	ldr	r2, [r3, #4]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f022 0220 	bic.w	r2, r2, #32
 8007d14:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10d      	bne.n	8007d3a <SPI_DMAReceiveCplt+0x56>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d26:	d108      	bne.n	8007d3a <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f022 0203 	bic.w	r2, r2, #3
 8007d36:	605a      	str	r2, [r3, #4]
 8007d38:	e007      	b.n	8007d4a <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	685a      	ldr	r2, [r3, #4]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f022 0201 	bic.w	r2, r2, #1
 8007d48:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007d4a:	68ba      	ldr	r2, [r7, #8]
 8007d4c:	2164      	movs	r1, #100	; 0x64
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f000 f9d4 	bl	80080fc <SPI_EndRxTransaction>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d002      	beq.n	8007d60 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2220      	movs	r2, #32
 8007d5e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d003      	beq.n	8007d80 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f7ff ff9b 	bl	8007cb4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007d7e:	e002      	b.n	8007d86 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f7f9 fb75 	bl	8001470 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d98:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d9a:	f7fa f831 	bl	8001e00 <HAL_GetTick>
 8007d9e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f003 0320 	and.w	r3, r3, #32
 8007daa:	2b20      	cmp	r3, #32
 8007dac:	d030      	beq.n	8007e10 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	685a      	ldr	r2, [r3, #4]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f022 0220 	bic.w	r2, r2, #32
 8007dbc:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007dbe:	68ba      	ldr	r2, [r7, #8]
 8007dc0:	2164      	movs	r1, #100	; 0x64
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f000 f9f2 	bl	80081ac <SPI_EndRxTxTransaction>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d005      	beq.n	8007dda <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dd2:	f043 0220 	orr.w	r2, r3, #32
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	685a      	ldr	r2, [r3, #4]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f022 0203 	bic.w	r2, r2, #3
 8007de8:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d003      	beq.n	8007e10 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	f7ff ff53 	bl	8007cb4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007e0e:	e002      	b.n	8007e16 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f7f9 fb3d 	bl	8001490 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e28:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	f7ff ff2e 	bl	8007c8c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e30:	bf00      	nop
 8007e32:	3710      	adds	r7, #16
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e44:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8007e46:	68f8      	ldr	r0, [r7, #12]
 8007e48:	f7ff ff2a 	bl	8007ca0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e4c:	bf00      	nop
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e60:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	685a      	ldr	r2, [r3, #4]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f022 0203 	bic.w	r2, r2, #3
 8007e70:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e76:	f043 0210 	orr.w	r2, r3, #16
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f7ff ff14 	bl	8007cb4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e8c:	bf00      	nop
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f7ff feff 	bl	8007cb4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007eb6:	bf00      	nop
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
	...

08007ec0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b088      	sub	sp, #32
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	603b      	str	r3, [r7, #0]
 8007ecc:	4613      	mov	r3, r2
 8007ece:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ed0:	f7f9 ff96 	bl	8001e00 <HAL_GetTick>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed8:	1a9b      	subs	r3, r3, r2
 8007eda:	683a      	ldr	r2, [r7, #0]
 8007edc:	4413      	add	r3, r2
 8007ede:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007ee0:	f7f9 ff8e 	bl	8001e00 <HAL_GetTick>
 8007ee4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007ee6:	4b39      	ldr	r3, [pc, #228]	; (8007fcc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	015b      	lsls	r3, r3, #5
 8007eec:	0d1b      	lsrs	r3, r3, #20
 8007eee:	69fa      	ldr	r2, [r7, #28]
 8007ef0:	fb02 f303 	mul.w	r3, r2, r3
 8007ef4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ef6:	e054      	b.n	8007fa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efe:	d050      	beq.n	8007fa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f00:	f7f9 ff7e 	bl	8001e00 <HAL_GetTick>
 8007f04:	4602      	mov	r2, r0
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	69fa      	ldr	r2, [r7, #28]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d902      	bls.n	8007f16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d13d      	bne.n	8007f92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	685a      	ldr	r2, [r3, #4]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f2e:	d111      	bne.n	8007f54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f38:	d004      	beq.n	8007f44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f42:	d107      	bne.n	8007f54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f5c:	d10f      	bne.n	8007f7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f6c:	601a      	str	r2, [r3, #0]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e017      	b.n	8007fc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d101      	bne.n	8007f9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	689a      	ldr	r2, [r3, #8]
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	4013      	ands	r3, r2
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	bf0c      	ite	eq
 8007fb2:	2301      	moveq	r3, #1
 8007fb4:	2300      	movne	r3, #0
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	461a      	mov	r2, r3
 8007fba:	79fb      	ldrb	r3, [r7, #7]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d19b      	bne.n	8007ef8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3720      	adds	r7, #32
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	200026d4 	.word	0x200026d4

08007fd0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b08a      	sub	sp, #40	; 0x28
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
 8007fdc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007fe2:	f7f9 ff0d 	bl	8001e00 <HAL_GetTick>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fea:	1a9b      	subs	r3, r3, r2
 8007fec:	683a      	ldr	r2, [r7, #0]
 8007fee:	4413      	add	r3, r2
 8007ff0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007ff2:	f7f9 ff05 	bl	8001e00 <HAL_GetTick>
 8007ff6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	330c      	adds	r3, #12
 8007ffe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008000:	4b3d      	ldr	r3, [pc, #244]	; (80080f8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	4613      	mov	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	00da      	lsls	r2, r3, #3
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	0d1b      	lsrs	r3, r3, #20
 8008010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008012:	fb02 f303 	mul.w	r3, r2, r3
 8008016:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008018:	e060      	b.n	80080dc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008020:	d107      	bne.n	8008032 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d104      	bne.n	8008032 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	b2db      	uxtb	r3, r3
 800802e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008030:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008038:	d050      	beq.n	80080dc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800803a:	f7f9 fee1 	bl	8001e00 <HAL_GetTick>
 800803e:	4602      	mov	r2, r0
 8008040:	6a3b      	ldr	r3, [r7, #32]
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008046:	429a      	cmp	r2, r3
 8008048:	d902      	bls.n	8008050 <SPI_WaitFifoStateUntilTimeout+0x80>
 800804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804c:	2b00      	cmp	r3, #0
 800804e:	d13d      	bne.n	80080cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	685a      	ldr	r2, [r3, #4]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800805e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008068:	d111      	bne.n	800808e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008072:	d004      	beq.n	800807e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800807c:	d107      	bne.n	800808e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800808c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008096:	d10f      	bne.n	80080b8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080a6:	601a      	str	r2, [r3, #0]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80080c8:	2303      	movs	r3, #3
 80080ca:	e010      	b.n	80080ee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d101      	bne.n	80080d6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80080d2:	2300      	movs	r3, #0
 80080d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	3b01      	subs	r3, #1
 80080da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	689a      	ldr	r2, [r3, #8]
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	4013      	ands	r3, r2
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d196      	bne.n	800801a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3728      	adds	r7, #40	; 0x28
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	200026d4 	.word	0x200026d4

080080fc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b086      	sub	sp, #24
 8008100:	af02      	add	r7, sp, #8
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008110:	d111      	bne.n	8008136 <SPI_EndRxTransaction+0x3a>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800811a:	d004      	beq.n	8008126 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008124:	d107      	bne.n	8008136 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008134:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	2200      	movs	r2, #0
 800813e:	2180      	movs	r1, #128	; 0x80
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f7ff febd 	bl	8007ec0 <SPI_WaitFlagStateUntilTimeout>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d007      	beq.n	800815c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008150:	f043 0220 	orr.w	r2, r3, #32
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008158:	2303      	movs	r3, #3
 800815a:	e023      	b.n	80081a4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008164:	d11d      	bne.n	80081a2 <SPI_EndRxTransaction+0xa6>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800816e:	d004      	beq.n	800817a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008178:	d113      	bne.n	80081a2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	9300      	str	r3, [sp, #0]
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	2200      	movs	r2, #0
 8008182:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f7ff ff22 	bl	8007fd0 <SPI_WaitFifoStateUntilTimeout>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d007      	beq.n	80081a2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008196:	f043 0220 	orr.w	r2, r3, #32
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800819e:	2303      	movs	r3, #3
 80081a0:	e000      	b.n	80081a4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b086      	sub	sp, #24
 80081b0:	af02      	add	r7, sp, #8
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	9300      	str	r3, [sp, #0]
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	2200      	movs	r2, #0
 80081c0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f7ff ff03 	bl	8007fd0 <SPI_WaitFifoStateUntilTimeout>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d007      	beq.n	80081e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081d4:	f043 0220 	orr.w	r2, r3, #32
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80081dc:	2303      	movs	r3, #3
 80081de:	e027      	b.n	8008230 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	9300      	str	r3, [sp, #0]
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	2200      	movs	r2, #0
 80081e8:	2180      	movs	r1, #128	; 0x80
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f7ff fe68 	bl	8007ec0 <SPI_WaitFlagStateUntilTimeout>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d007      	beq.n	8008206 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081fa:	f043 0220 	orr.w	r2, r3, #32
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008202:	2303      	movs	r3, #3
 8008204:	e014      	b.n	8008230 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	9300      	str	r3, [sp, #0]
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	2200      	movs	r2, #0
 800820e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	f7ff fedc 	bl	8007fd0 <SPI_WaitFifoStateUntilTimeout>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d007      	beq.n	800822e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008222:	f043 0220 	orr.w	r2, r3, #32
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e000      	b.n	8008230 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d101      	bne.n	800824a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	e049      	b.n	80082de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008250:	b2db      	uxtb	r3, r3
 8008252:	2b00      	cmp	r3, #0
 8008254:	d106      	bne.n	8008264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f7f9 fb9e 	bl	80019a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2202      	movs	r2, #2
 8008268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	3304      	adds	r3, #4
 8008274:	4619      	mov	r1, r3
 8008276:	4610      	mov	r0, r2
 8008278:	f000 fbc6 	bl	8008a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
	...

080082e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d001      	beq.n	8008300 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80082fc:	2301      	movs	r3, #1
 80082fe:	e04c      	b.n	800839a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2202      	movs	r2, #2
 8008304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a26      	ldr	r2, [pc, #152]	; (80083a8 <HAL_TIM_Base_Start+0xc0>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d022      	beq.n	8008358 <HAL_TIM_Base_Start+0x70>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800831a:	d01d      	beq.n	8008358 <HAL_TIM_Base_Start+0x70>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a22      	ldr	r2, [pc, #136]	; (80083ac <HAL_TIM_Base_Start+0xc4>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d018      	beq.n	8008358 <HAL_TIM_Base_Start+0x70>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a21      	ldr	r2, [pc, #132]	; (80083b0 <HAL_TIM_Base_Start+0xc8>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d013      	beq.n	8008358 <HAL_TIM_Base_Start+0x70>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a1f      	ldr	r2, [pc, #124]	; (80083b4 <HAL_TIM_Base_Start+0xcc>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d00e      	beq.n	8008358 <HAL_TIM_Base_Start+0x70>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a1e      	ldr	r2, [pc, #120]	; (80083b8 <HAL_TIM_Base_Start+0xd0>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d009      	beq.n	8008358 <HAL_TIM_Base_Start+0x70>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a1c      	ldr	r2, [pc, #112]	; (80083bc <HAL_TIM_Base_Start+0xd4>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d004      	beq.n	8008358 <HAL_TIM_Base_Start+0x70>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a1b      	ldr	r2, [pc, #108]	; (80083c0 <HAL_TIM_Base_Start+0xd8>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d115      	bne.n	8008384 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	689a      	ldr	r2, [r3, #8]
 800835e:	4b19      	ldr	r3, [pc, #100]	; (80083c4 <HAL_TIM_Base_Start+0xdc>)
 8008360:	4013      	ands	r3, r2
 8008362:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2b06      	cmp	r3, #6
 8008368:	d015      	beq.n	8008396 <HAL_TIM_Base_Start+0xae>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008370:	d011      	beq.n	8008396 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f042 0201 	orr.w	r2, r2, #1
 8008380:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008382:	e008      	b.n	8008396 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f042 0201 	orr.w	r2, r2, #1
 8008392:	601a      	str	r2, [r3, #0]
 8008394:	e000      	b.n	8008398 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008396:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3714      	adds	r7, #20
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	40012c00 	.word	0x40012c00
 80083ac:	40000400 	.word	0x40000400
 80083b0:	40000800 	.word	0x40000800
 80083b4:	40000c00 	.word	0x40000c00
 80083b8:	40013400 	.word	0x40013400
 80083bc:	40014000 	.word	0x40014000
 80083c0:	40015000 	.word	0x40015000
 80083c4:	00010007 	.word	0x00010007

080083c8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6a1a      	ldr	r2, [r3, #32]
 80083d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80083da:	4013      	ands	r3, r2
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d10f      	bne.n	8008400 <HAL_TIM_Base_Stop+0x38>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	6a1a      	ldr	r2, [r3, #32]
 80083e6:	f244 4344 	movw	r3, #17476	; 0x4444
 80083ea:	4013      	ands	r3, r2
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d107      	bne.n	8008400 <HAL_TIM_Base_Stop+0x38>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f022 0201 	bic.w	r2, r2, #1
 80083fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	370c      	adds	r7, #12
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b082      	sub	sp, #8
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d101      	bne.n	8008428 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	e049      	b.n	80084bc <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800842e:	b2db      	uxtb	r3, r3
 8008430:	2b00      	cmp	r3, #0
 8008432:	d106      	bne.n	8008442 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f841 	bl	80084c4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2202      	movs	r2, #2
 8008446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	3304      	adds	r3, #4
 8008452:	4619      	mov	r1, r3
 8008454:	4610      	mov	r0, r2
 8008456:	f000 fad7 	bl	8008a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2201      	movs	r2, #1
 800845e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2201      	movs	r2, #1
 8008466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2201      	movs	r2, #1
 800846e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2201      	movs	r2, #1
 800847e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2201      	movs	r2, #1
 8008486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2201      	movs	r2, #1
 800848e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2201      	movs	r2, #1
 8008496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2201      	movs	r2, #1
 800849e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2201      	movs	r2, #1
 80084a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2201      	movs	r2, #1
 80084ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3708      	adds	r7, #8
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80084cc:	bf00      	nop
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d109      	bne.n	80084fc <HAL_TIM_OC_Start+0x24>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	bf14      	ite	ne
 80084f4:	2301      	movne	r3, #1
 80084f6:	2300      	moveq	r3, #0
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	e03c      	b.n	8008576 <HAL_TIM_OC_Start+0x9e>
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	2b04      	cmp	r3, #4
 8008500:	d109      	bne.n	8008516 <HAL_TIM_OC_Start+0x3e>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008508:	b2db      	uxtb	r3, r3
 800850a:	2b01      	cmp	r3, #1
 800850c:	bf14      	ite	ne
 800850e:	2301      	movne	r3, #1
 8008510:	2300      	moveq	r3, #0
 8008512:	b2db      	uxtb	r3, r3
 8008514:	e02f      	b.n	8008576 <HAL_TIM_OC_Start+0x9e>
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	2b08      	cmp	r3, #8
 800851a:	d109      	bne.n	8008530 <HAL_TIM_OC_Start+0x58>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008522:	b2db      	uxtb	r3, r3
 8008524:	2b01      	cmp	r3, #1
 8008526:	bf14      	ite	ne
 8008528:	2301      	movne	r3, #1
 800852a:	2300      	moveq	r3, #0
 800852c:	b2db      	uxtb	r3, r3
 800852e:	e022      	b.n	8008576 <HAL_TIM_OC_Start+0x9e>
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	2b0c      	cmp	r3, #12
 8008534:	d109      	bne.n	800854a <HAL_TIM_OC_Start+0x72>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800853c:	b2db      	uxtb	r3, r3
 800853e:	2b01      	cmp	r3, #1
 8008540:	bf14      	ite	ne
 8008542:	2301      	movne	r3, #1
 8008544:	2300      	moveq	r3, #0
 8008546:	b2db      	uxtb	r3, r3
 8008548:	e015      	b.n	8008576 <HAL_TIM_OC_Start+0x9e>
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	2b10      	cmp	r3, #16
 800854e:	d109      	bne.n	8008564 <HAL_TIM_OC_Start+0x8c>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008556:	b2db      	uxtb	r3, r3
 8008558:	2b01      	cmp	r3, #1
 800855a:	bf14      	ite	ne
 800855c:	2301      	movne	r3, #1
 800855e:	2300      	moveq	r3, #0
 8008560:	b2db      	uxtb	r3, r3
 8008562:	e008      	b.n	8008576 <HAL_TIM_OC_Start+0x9e>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800856a:	b2db      	uxtb	r3, r3
 800856c:	2b01      	cmp	r3, #1
 800856e:	bf14      	ite	ne
 8008570:	2301      	movne	r3, #1
 8008572:	2300      	moveq	r3, #0
 8008574:	b2db      	uxtb	r3, r3
 8008576:	2b00      	cmp	r3, #0
 8008578:	d001      	beq.n	800857e <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	e0a6      	b.n	80086cc <HAL_TIM_OC_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d104      	bne.n	800858e <HAL_TIM_OC_Start+0xb6>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2202      	movs	r2, #2
 8008588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800858c:	e023      	b.n	80085d6 <HAL_TIM_OC_Start+0xfe>
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	2b04      	cmp	r3, #4
 8008592:	d104      	bne.n	800859e <HAL_TIM_OC_Start+0xc6>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2202      	movs	r2, #2
 8008598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800859c:	e01b      	b.n	80085d6 <HAL_TIM_OC_Start+0xfe>
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	2b08      	cmp	r3, #8
 80085a2:	d104      	bne.n	80085ae <HAL_TIM_OC_Start+0xd6>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2202      	movs	r2, #2
 80085a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085ac:	e013      	b.n	80085d6 <HAL_TIM_OC_Start+0xfe>
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	2b0c      	cmp	r3, #12
 80085b2:	d104      	bne.n	80085be <HAL_TIM_OC_Start+0xe6>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2202      	movs	r2, #2
 80085b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085bc:	e00b      	b.n	80085d6 <HAL_TIM_OC_Start+0xfe>
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	2b10      	cmp	r3, #16
 80085c2:	d104      	bne.n	80085ce <HAL_TIM_OC_Start+0xf6>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2202      	movs	r2, #2
 80085c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085cc:	e003      	b.n	80085d6 <HAL_TIM_OC_Start+0xfe>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2202      	movs	r2, #2
 80085d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	2201      	movs	r2, #1
 80085dc:	6839      	ldr	r1, [r7, #0]
 80085de:	4618      	mov	r0, r3
 80085e0:	f000 fe80 	bl	80092e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a3a      	ldr	r2, [pc, #232]	; (80086d4 <HAL_TIM_OC_Start+0x1fc>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d018      	beq.n	8008620 <HAL_TIM_OC_Start+0x148>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a39      	ldr	r2, [pc, #228]	; (80086d8 <HAL_TIM_OC_Start+0x200>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d013      	beq.n	8008620 <HAL_TIM_OC_Start+0x148>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a37      	ldr	r2, [pc, #220]	; (80086dc <HAL_TIM_OC_Start+0x204>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d00e      	beq.n	8008620 <HAL_TIM_OC_Start+0x148>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a36      	ldr	r2, [pc, #216]	; (80086e0 <HAL_TIM_OC_Start+0x208>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d009      	beq.n	8008620 <HAL_TIM_OC_Start+0x148>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a34      	ldr	r2, [pc, #208]	; (80086e4 <HAL_TIM_OC_Start+0x20c>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d004      	beq.n	8008620 <HAL_TIM_OC_Start+0x148>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a33      	ldr	r2, [pc, #204]	; (80086e8 <HAL_TIM_OC_Start+0x210>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d101      	bne.n	8008624 <HAL_TIM_OC_Start+0x14c>
 8008620:	2301      	movs	r3, #1
 8008622:	e000      	b.n	8008626 <HAL_TIM_OC_Start+0x14e>
 8008624:	2300      	movs	r3, #0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d007      	beq.n	800863a <HAL_TIM_OC_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008638:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a25      	ldr	r2, [pc, #148]	; (80086d4 <HAL_TIM_OC_Start+0x1fc>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d022      	beq.n	800868a <HAL_TIM_OC_Start+0x1b2>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800864c:	d01d      	beq.n	800868a <HAL_TIM_OC_Start+0x1b2>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a26      	ldr	r2, [pc, #152]	; (80086ec <HAL_TIM_OC_Start+0x214>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d018      	beq.n	800868a <HAL_TIM_OC_Start+0x1b2>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a24      	ldr	r2, [pc, #144]	; (80086f0 <HAL_TIM_OC_Start+0x218>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d013      	beq.n	800868a <HAL_TIM_OC_Start+0x1b2>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a23      	ldr	r2, [pc, #140]	; (80086f4 <HAL_TIM_OC_Start+0x21c>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d00e      	beq.n	800868a <HAL_TIM_OC_Start+0x1b2>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a19      	ldr	r2, [pc, #100]	; (80086d8 <HAL_TIM_OC_Start+0x200>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d009      	beq.n	800868a <HAL_TIM_OC_Start+0x1b2>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a18      	ldr	r2, [pc, #96]	; (80086dc <HAL_TIM_OC_Start+0x204>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d004      	beq.n	800868a <HAL_TIM_OC_Start+0x1b2>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a18      	ldr	r2, [pc, #96]	; (80086e8 <HAL_TIM_OC_Start+0x210>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d115      	bne.n	80086b6 <HAL_TIM_OC_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	689a      	ldr	r2, [r3, #8]
 8008690:	4b19      	ldr	r3, [pc, #100]	; (80086f8 <HAL_TIM_OC_Start+0x220>)
 8008692:	4013      	ands	r3, r2
 8008694:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2b06      	cmp	r3, #6
 800869a:	d015      	beq.n	80086c8 <HAL_TIM_OC_Start+0x1f0>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086a2:	d011      	beq.n	80086c8 <HAL_TIM_OC_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f042 0201 	orr.w	r2, r2, #1
 80086b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086b4:	e008      	b.n	80086c8 <HAL_TIM_OC_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f042 0201 	orr.w	r2, r2, #1
 80086c4:	601a      	str	r2, [r3, #0]
 80086c6:	e000      	b.n	80086ca <HAL_TIM_OC_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	40012c00 	.word	0x40012c00
 80086d8:	40013400 	.word	0x40013400
 80086dc:	40014000 	.word	0x40014000
 80086e0:	40014400 	.word	0x40014400
 80086e4:	40014800 	.word	0x40014800
 80086e8:	40015000 	.word	0x40015000
 80086ec:	40000400 	.word	0x40000400
 80086f0:	40000800 	.word	0x40000800
 80086f4:	40000c00 	.word	0x40000c00
 80086f8:	00010007 	.word	0x00010007

080086fc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b086      	sub	sp, #24
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008708:	2300      	movs	r3, #0
 800870a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008712:	2b01      	cmp	r3, #1
 8008714:	d101      	bne.n	800871a <HAL_TIM_OC_ConfigChannel+0x1e>
 8008716:	2302      	movs	r3, #2
 8008718:	e066      	b.n	80087e8 <HAL_TIM_OC_ConfigChannel+0xec>
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2201      	movs	r2, #1
 800871e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2b14      	cmp	r3, #20
 8008726:	d857      	bhi.n	80087d8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8008728:	a201      	add	r2, pc, #4	; (adr r2, 8008730 <HAL_TIM_OC_ConfigChannel+0x34>)
 800872a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800872e:	bf00      	nop
 8008730:	08008785 	.word	0x08008785
 8008734:	080087d9 	.word	0x080087d9
 8008738:	080087d9 	.word	0x080087d9
 800873c:	080087d9 	.word	0x080087d9
 8008740:	08008793 	.word	0x08008793
 8008744:	080087d9 	.word	0x080087d9
 8008748:	080087d9 	.word	0x080087d9
 800874c:	080087d9 	.word	0x080087d9
 8008750:	080087a1 	.word	0x080087a1
 8008754:	080087d9 	.word	0x080087d9
 8008758:	080087d9 	.word	0x080087d9
 800875c:	080087d9 	.word	0x080087d9
 8008760:	080087af 	.word	0x080087af
 8008764:	080087d9 	.word	0x080087d9
 8008768:	080087d9 	.word	0x080087d9
 800876c:	080087d9 	.word	0x080087d9
 8008770:	080087bd 	.word	0x080087bd
 8008774:	080087d9 	.word	0x080087d9
 8008778:	080087d9 	.word	0x080087d9
 800877c:	080087d9 	.word	0x080087d9
 8008780:	080087cb 	.word	0x080087cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68b9      	ldr	r1, [r7, #8]
 800878a:	4618      	mov	r0, r3
 800878c:	f000 f9e4 	bl	8008b58 <TIM_OC1_SetConfig>
      break;
 8008790:	e025      	b.n	80087de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	68b9      	ldr	r1, [r7, #8]
 8008798:	4618      	mov	r0, r3
 800879a:	f000 fa77 	bl	8008c8c <TIM_OC2_SetConfig>
      break;
 800879e:	e01e      	b.n	80087de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	68b9      	ldr	r1, [r7, #8]
 80087a6:	4618      	mov	r0, r3
 80087a8:	f000 fb04 	bl	8008db4 <TIM_OC3_SetConfig>
      break;
 80087ac:	e017      	b.n	80087de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68b9      	ldr	r1, [r7, #8]
 80087b4:	4618      	mov	r0, r3
 80087b6:	f000 fb8f 	bl	8008ed8 <TIM_OC4_SetConfig>
      break;
 80087ba:	e010      	b.n	80087de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68b9      	ldr	r1, [r7, #8]
 80087c2:	4618      	mov	r0, r3
 80087c4:	f000 fc1c 	bl	8009000 <TIM_OC5_SetConfig>
      break;
 80087c8:	e009      	b.n	80087de <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	68b9      	ldr	r1, [r7, #8]
 80087d0:	4618      	mov	r0, r3
 80087d2:	f000 fc7f 	bl	80090d4 <TIM_OC6_SetConfig>
      break;
 80087d6:	e002      	b.n	80087de <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	75fb      	strb	r3, [r7, #23]
      break;
 80087dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3718      	adds	r7, #24
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087fa:	2300      	movs	r3, #0
 80087fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008804:	2b01      	cmp	r3, #1
 8008806:	d101      	bne.n	800880c <HAL_TIM_ConfigClockSource+0x1c>
 8008808:	2302      	movs	r3, #2
 800880a:	e0ee      	b.n	80089ea <HAL_TIM_ConfigClockSource+0x1fa>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2202      	movs	r2, #2
 8008818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800882a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800882e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008836:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a6b      	ldr	r2, [pc, #428]	; (80089f4 <HAL_TIM_ConfigClockSource+0x204>)
 8008846:	4293      	cmp	r3, r2
 8008848:	f000 80b9 	beq.w	80089be <HAL_TIM_ConfigClockSource+0x1ce>
 800884c:	4a69      	ldr	r2, [pc, #420]	; (80089f4 <HAL_TIM_ConfigClockSource+0x204>)
 800884e:	4293      	cmp	r3, r2
 8008850:	f200 80be 	bhi.w	80089d0 <HAL_TIM_ConfigClockSource+0x1e0>
 8008854:	4a68      	ldr	r2, [pc, #416]	; (80089f8 <HAL_TIM_ConfigClockSource+0x208>)
 8008856:	4293      	cmp	r3, r2
 8008858:	f000 80b1 	beq.w	80089be <HAL_TIM_ConfigClockSource+0x1ce>
 800885c:	4a66      	ldr	r2, [pc, #408]	; (80089f8 <HAL_TIM_ConfigClockSource+0x208>)
 800885e:	4293      	cmp	r3, r2
 8008860:	f200 80b6 	bhi.w	80089d0 <HAL_TIM_ConfigClockSource+0x1e0>
 8008864:	4a65      	ldr	r2, [pc, #404]	; (80089fc <HAL_TIM_ConfigClockSource+0x20c>)
 8008866:	4293      	cmp	r3, r2
 8008868:	f000 80a9 	beq.w	80089be <HAL_TIM_ConfigClockSource+0x1ce>
 800886c:	4a63      	ldr	r2, [pc, #396]	; (80089fc <HAL_TIM_ConfigClockSource+0x20c>)
 800886e:	4293      	cmp	r3, r2
 8008870:	f200 80ae 	bhi.w	80089d0 <HAL_TIM_ConfigClockSource+0x1e0>
 8008874:	4a62      	ldr	r2, [pc, #392]	; (8008a00 <HAL_TIM_ConfigClockSource+0x210>)
 8008876:	4293      	cmp	r3, r2
 8008878:	f000 80a1 	beq.w	80089be <HAL_TIM_ConfigClockSource+0x1ce>
 800887c:	4a60      	ldr	r2, [pc, #384]	; (8008a00 <HAL_TIM_ConfigClockSource+0x210>)
 800887e:	4293      	cmp	r3, r2
 8008880:	f200 80a6 	bhi.w	80089d0 <HAL_TIM_ConfigClockSource+0x1e0>
 8008884:	4a5f      	ldr	r2, [pc, #380]	; (8008a04 <HAL_TIM_ConfigClockSource+0x214>)
 8008886:	4293      	cmp	r3, r2
 8008888:	f000 8099 	beq.w	80089be <HAL_TIM_ConfigClockSource+0x1ce>
 800888c:	4a5d      	ldr	r2, [pc, #372]	; (8008a04 <HAL_TIM_ConfigClockSource+0x214>)
 800888e:	4293      	cmp	r3, r2
 8008890:	f200 809e 	bhi.w	80089d0 <HAL_TIM_ConfigClockSource+0x1e0>
 8008894:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008898:	f000 8091 	beq.w	80089be <HAL_TIM_ConfigClockSource+0x1ce>
 800889c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80088a0:	f200 8096 	bhi.w	80089d0 <HAL_TIM_ConfigClockSource+0x1e0>
 80088a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088a8:	f000 8089 	beq.w	80089be <HAL_TIM_ConfigClockSource+0x1ce>
 80088ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088b0:	f200 808e 	bhi.w	80089d0 <HAL_TIM_ConfigClockSource+0x1e0>
 80088b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088b8:	d03e      	beq.n	8008938 <HAL_TIM_ConfigClockSource+0x148>
 80088ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088be:	f200 8087 	bhi.w	80089d0 <HAL_TIM_ConfigClockSource+0x1e0>
 80088c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088c6:	f000 8086 	beq.w	80089d6 <HAL_TIM_ConfigClockSource+0x1e6>
 80088ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088ce:	d87f      	bhi.n	80089d0 <HAL_TIM_ConfigClockSource+0x1e0>
 80088d0:	2b70      	cmp	r3, #112	; 0x70
 80088d2:	d01a      	beq.n	800890a <HAL_TIM_ConfigClockSource+0x11a>
 80088d4:	2b70      	cmp	r3, #112	; 0x70
 80088d6:	d87b      	bhi.n	80089d0 <HAL_TIM_ConfigClockSource+0x1e0>
 80088d8:	2b60      	cmp	r3, #96	; 0x60
 80088da:	d050      	beq.n	800897e <HAL_TIM_ConfigClockSource+0x18e>
 80088dc:	2b60      	cmp	r3, #96	; 0x60
 80088de:	d877      	bhi.n	80089d0 <HAL_TIM_ConfigClockSource+0x1e0>
 80088e0:	2b50      	cmp	r3, #80	; 0x50
 80088e2:	d03c      	beq.n	800895e <HAL_TIM_ConfigClockSource+0x16e>
 80088e4:	2b50      	cmp	r3, #80	; 0x50
 80088e6:	d873      	bhi.n	80089d0 <HAL_TIM_ConfigClockSource+0x1e0>
 80088e8:	2b40      	cmp	r3, #64	; 0x40
 80088ea:	d058      	beq.n	800899e <HAL_TIM_ConfigClockSource+0x1ae>
 80088ec:	2b40      	cmp	r3, #64	; 0x40
 80088ee:	d86f      	bhi.n	80089d0 <HAL_TIM_ConfigClockSource+0x1e0>
 80088f0:	2b30      	cmp	r3, #48	; 0x30
 80088f2:	d064      	beq.n	80089be <HAL_TIM_ConfigClockSource+0x1ce>
 80088f4:	2b30      	cmp	r3, #48	; 0x30
 80088f6:	d86b      	bhi.n	80089d0 <HAL_TIM_ConfigClockSource+0x1e0>
 80088f8:	2b20      	cmp	r3, #32
 80088fa:	d060      	beq.n	80089be <HAL_TIM_ConfigClockSource+0x1ce>
 80088fc:	2b20      	cmp	r3, #32
 80088fe:	d867      	bhi.n	80089d0 <HAL_TIM_ConfigClockSource+0x1e0>
 8008900:	2b00      	cmp	r3, #0
 8008902:	d05c      	beq.n	80089be <HAL_TIM_ConfigClockSource+0x1ce>
 8008904:	2b10      	cmp	r3, #16
 8008906:	d05a      	beq.n	80089be <HAL_TIM_ConfigClockSource+0x1ce>
 8008908:	e062      	b.n	80089d0 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6818      	ldr	r0, [r3, #0]
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	6899      	ldr	r1, [r3, #8]
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	685a      	ldr	r2, [r3, #4]
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	f000 fcc3 	bl	80092a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800892c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68ba      	ldr	r2, [r7, #8]
 8008934:	609a      	str	r2, [r3, #8]
      break;
 8008936:	e04f      	b.n	80089d8 <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6818      	ldr	r0, [r3, #0]
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	6899      	ldr	r1, [r3, #8]
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	685a      	ldr	r2, [r3, #4]
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	f000 fcac 	bl	80092a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	689a      	ldr	r2, [r3, #8]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800895a:	609a      	str	r2, [r3, #8]
      break;
 800895c:	e03c      	b.n	80089d8 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6818      	ldr	r0, [r3, #0]
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	6859      	ldr	r1, [r3, #4]
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	461a      	mov	r2, r3
 800896c:	f000 fc1e 	bl	80091ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2150      	movs	r1, #80	; 0x50
 8008976:	4618      	mov	r0, r3
 8008978:	f000 fc77 	bl	800926a <TIM_ITRx_SetConfig>
      break;
 800897c:	e02c      	b.n	80089d8 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6818      	ldr	r0, [r3, #0]
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	6859      	ldr	r1, [r3, #4]
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	461a      	mov	r2, r3
 800898c:	f000 fc3d 	bl	800920a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2160      	movs	r1, #96	; 0x60
 8008996:	4618      	mov	r0, r3
 8008998:	f000 fc67 	bl	800926a <TIM_ITRx_SetConfig>
      break;
 800899c:	e01c      	b.n	80089d8 <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6818      	ldr	r0, [r3, #0]
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	6859      	ldr	r1, [r3, #4]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	461a      	mov	r2, r3
 80089ac:	f000 fbfe 	bl	80091ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2140      	movs	r1, #64	; 0x40
 80089b6:	4618      	mov	r0, r3
 80089b8:	f000 fc57 	bl	800926a <TIM_ITRx_SetConfig>
      break;
 80089bc:	e00c      	b.n	80089d8 <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4619      	mov	r1, r3
 80089c8:	4610      	mov	r0, r2
 80089ca:	f000 fc4e 	bl	800926a <TIM_ITRx_SetConfig>
      break;
 80089ce:	e003      	b.n	80089d8 <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	73fb      	strb	r3, [r7, #15]
      break;
 80089d4:	e000      	b.n	80089d8 <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 80089d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80089e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	00100070 	.word	0x00100070
 80089f8:	00100050 	.word	0x00100050
 80089fc:	00100040 	.word	0x00100040
 8008a00:	00100030 	.word	0x00100030
 8008a04:	00100020 	.word	0x00100020

08008a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	4a46      	ldr	r2, [pc, #280]	; (8008b34 <TIM_Base_SetConfig+0x12c>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d017      	beq.n	8008a50 <TIM_Base_SetConfig+0x48>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a26:	d013      	beq.n	8008a50 <TIM_Base_SetConfig+0x48>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	4a43      	ldr	r2, [pc, #268]	; (8008b38 <TIM_Base_SetConfig+0x130>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d00f      	beq.n	8008a50 <TIM_Base_SetConfig+0x48>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a42      	ldr	r2, [pc, #264]	; (8008b3c <TIM_Base_SetConfig+0x134>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d00b      	beq.n	8008a50 <TIM_Base_SetConfig+0x48>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4a41      	ldr	r2, [pc, #260]	; (8008b40 <TIM_Base_SetConfig+0x138>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d007      	beq.n	8008a50 <TIM_Base_SetConfig+0x48>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4a40      	ldr	r2, [pc, #256]	; (8008b44 <TIM_Base_SetConfig+0x13c>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d003      	beq.n	8008a50 <TIM_Base_SetConfig+0x48>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4a3f      	ldr	r2, [pc, #252]	; (8008b48 <TIM_Base_SetConfig+0x140>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d108      	bne.n	8008a62 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	68fa      	ldr	r2, [r7, #12]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4a33      	ldr	r2, [pc, #204]	; (8008b34 <TIM_Base_SetConfig+0x12c>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d023      	beq.n	8008ab2 <TIM_Base_SetConfig+0xaa>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a70:	d01f      	beq.n	8008ab2 <TIM_Base_SetConfig+0xaa>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4a30      	ldr	r2, [pc, #192]	; (8008b38 <TIM_Base_SetConfig+0x130>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d01b      	beq.n	8008ab2 <TIM_Base_SetConfig+0xaa>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4a2f      	ldr	r2, [pc, #188]	; (8008b3c <TIM_Base_SetConfig+0x134>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d017      	beq.n	8008ab2 <TIM_Base_SetConfig+0xaa>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	4a2e      	ldr	r2, [pc, #184]	; (8008b40 <TIM_Base_SetConfig+0x138>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d013      	beq.n	8008ab2 <TIM_Base_SetConfig+0xaa>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4a2d      	ldr	r2, [pc, #180]	; (8008b44 <TIM_Base_SetConfig+0x13c>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d00f      	beq.n	8008ab2 <TIM_Base_SetConfig+0xaa>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a2d      	ldr	r2, [pc, #180]	; (8008b4c <TIM_Base_SetConfig+0x144>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d00b      	beq.n	8008ab2 <TIM_Base_SetConfig+0xaa>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4a2c      	ldr	r2, [pc, #176]	; (8008b50 <TIM_Base_SetConfig+0x148>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d007      	beq.n	8008ab2 <TIM_Base_SetConfig+0xaa>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4a2b      	ldr	r2, [pc, #172]	; (8008b54 <TIM_Base_SetConfig+0x14c>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d003      	beq.n	8008ab2 <TIM_Base_SetConfig+0xaa>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4a26      	ldr	r2, [pc, #152]	; (8008b48 <TIM_Base_SetConfig+0x140>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d108      	bne.n	8008ac4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ab8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	695b      	ldr	r3, [r3, #20]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	68fa      	ldr	r2, [r7, #12]
 8008ad6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	689a      	ldr	r2, [r3, #8]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	4a12      	ldr	r2, [pc, #72]	; (8008b34 <TIM_Base_SetConfig+0x12c>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d013      	beq.n	8008b18 <TIM_Base_SetConfig+0x110>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4a14      	ldr	r2, [pc, #80]	; (8008b44 <TIM_Base_SetConfig+0x13c>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d00f      	beq.n	8008b18 <TIM_Base_SetConfig+0x110>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4a14      	ldr	r2, [pc, #80]	; (8008b4c <TIM_Base_SetConfig+0x144>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d00b      	beq.n	8008b18 <TIM_Base_SetConfig+0x110>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a13      	ldr	r2, [pc, #76]	; (8008b50 <TIM_Base_SetConfig+0x148>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d007      	beq.n	8008b18 <TIM_Base_SetConfig+0x110>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a12      	ldr	r2, [pc, #72]	; (8008b54 <TIM_Base_SetConfig+0x14c>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d003      	beq.n	8008b18 <TIM_Base_SetConfig+0x110>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4a0d      	ldr	r2, [pc, #52]	; (8008b48 <TIM_Base_SetConfig+0x140>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d103      	bne.n	8008b20 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	691a      	ldr	r2, [r3, #16]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	615a      	str	r2, [r3, #20]
}
 8008b26:	bf00      	nop
 8008b28:	3714      	adds	r7, #20
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop
 8008b34:	40012c00 	.word	0x40012c00
 8008b38:	40000400 	.word	0x40000400
 8008b3c:	40000800 	.word	0x40000800
 8008b40:	40000c00 	.word	0x40000c00
 8008b44:	40013400 	.word	0x40013400
 8008b48:	40015000 	.word	0x40015000
 8008b4c:	40014000 	.word	0x40014000
 8008b50:	40014400 	.word	0x40014400
 8008b54:	40014800 	.word	0x40014800

08008b58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b087      	sub	sp, #28
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a1b      	ldr	r3, [r3, #32]
 8008b66:	f023 0201 	bic.w	r2, r3, #1
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a1b      	ldr	r3, [r3, #32]
 8008b72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f023 0303 	bic.w	r3, r3, #3
 8008b92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	f023 0302 	bic.w	r3, r3, #2
 8008ba4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	697a      	ldr	r2, [r7, #20]
 8008bac:	4313      	orrs	r3, r2
 8008bae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4a30      	ldr	r2, [pc, #192]	; (8008c74 <TIM_OC1_SetConfig+0x11c>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d013      	beq.n	8008be0 <TIM_OC1_SetConfig+0x88>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	4a2f      	ldr	r2, [pc, #188]	; (8008c78 <TIM_OC1_SetConfig+0x120>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d00f      	beq.n	8008be0 <TIM_OC1_SetConfig+0x88>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	4a2e      	ldr	r2, [pc, #184]	; (8008c7c <TIM_OC1_SetConfig+0x124>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d00b      	beq.n	8008be0 <TIM_OC1_SetConfig+0x88>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a2d      	ldr	r2, [pc, #180]	; (8008c80 <TIM_OC1_SetConfig+0x128>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d007      	beq.n	8008be0 <TIM_OC1_SetConfig+0x88>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a2c      	ldr	r2, [pc, #176]	; (8008c84 <TIM_OC1_SetConfig+0x12c>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d003      	beq.n	8008be0 <TIM_OC1_SetConfig+0x88>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a2b      	ldr	r2, [pc, #172]	; (8008c88 <TIM_OC1_SetConfig+0x130>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d10c      	bne.n	8008bfa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	f023 0308 	bic.w	r3, r3, #8
 8008be6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	697a      	ldr	r2, [r7, #20]
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	f023 0304 	bic.w	r3, r3, #4
 8008bf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a1d      	ldr	r2, [pc, #116]	; (8008c74 <TIM_OC1_SetConfig+0x11c>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d013      	beq.n	8008c2a <TIM_OC1_SetConfig+0xd2>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4a1c      	ldr	r2, [pc, #112]	; (8008c78 <TIM_OC1_SetConfig+0x120>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d00f      	beq.n	8008c2a <TIM_OC1_SetConfig+0xd2>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4a1b      	ldr	r2, [pc, #108]	; (8008c7c <TIM_OC1_SetConfig+0x124>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d00b      	beq.n	8008c2a <TIM_OC1_SetConfig+0xd2>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4a1a      	ldr	r2, [pc, #104]	; (8008c80 <TIM_OC1_SetConfig+0x128>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d007      	beq.n	8008c2a <TIM_OC1_SetConfig+0xd2>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	4a19      	ldr	r2, [pc, #100]	; (8008c84 <TIM_OC1_SetConfig+0x12c>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d003      	beq.n	8008c2a <TIM_OC1_SetConfig+0xd2>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a18      	ldr	r2, [pc, #96]	; (8008c88 <TIM_OC1_SetConfig+0x130>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d111      	bne.n	8008c4e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	695b      	ldr	r3, [r3, #20]
 8008c3e:	693a      	ldr	r2, [r7, #16]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	699b      	ldr	r3, [r3, #24]
 8008c48:	693a      	ldr	r2, [r7, #16]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	693a      	ldr	r2, [r7, #16]
 8008c52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	68fa      	ldr	r2, [r7, #12]
 8008c58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	685a      	ldr	r2, [r3, #4]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	697a      	ldr	r2, [r7, #20]
 8008c66:	621a      	str	r2, [r3, #32]
}
 8008c68:	bf00      	nop
 8008c6a:	371c      	adds	r7, #28
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr
 8008c74:	40012c00 	.word	0x40012c00
 8008c78:	40013400 	.word	0x40013400
 8008c7c:	40014000 	.word	0x40014000
 8008c80:	40014400 	.word	0x40014400
 8008c84:	40014800 	.word	0x40014800
 8008c88:	40015000 	.word	0x40015000

08008c8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b087      	sub	sp, #28
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6a1b      	ldr	r3, [r3, #32]
 8008c9a:	f023 0210 	bic.w	r2, r3, #16
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a1b      	ldr	r3, [r3, #32]
 8008ca6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	021b      	lsls	r3, r3, #8
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	f023 0320 	bic.w	r3, r3, #32
 8008cda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	011b      	lsls	r3, r3, #4
 8008ce2:	697a      	ldr	r2, [r7, #20]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a2c      	ldr	r2, [pc, #176]	; (8008d9c <TIM_OC2_SetConfig+0x110>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d007      	beq.n	8008d00 <TIM_OC2_SetConfig+0x74>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a2b      	ldr	r2, [pc, #172]	; (8008da0 <TIM_OC2_SetConfig+0x114>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d003      	beq.n	8008d00 <TIM_OC2_SetConfig+0x74>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a2a      	ldr	r2, [pc, #168]	; (8008da4 <TIM_OC2_SetConfig+0x118>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d10d      	bne.n	8008d1c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	011b      	lsls	r3, r3, #4
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a1f      	ldr	r2, [pc, #124]	; (8008d9c <TIM_OC2_SetConfig+0x110>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d013      	beq.n	8008d4c <TIM_OC2_SetConfig+0xc0>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a1e      	ldr	r2, [pc, #120]	; (8008da0 <TIM_OC2_SetConfig+0x114>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d00f      	beq.n	8008d4c <TIM_OC2_SetConfig+0xc0>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a1e      	ldr	r2, [pc, #120]	; (8008da8 <TIM_OC2_SetConfig+0x11c>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d00b      	beq.n	8008d4c <TIM_OC2_SetConfig+0xc0>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a1d      	ldr	r2, [pc, #116]	; (8008dac <TIM_OC2_SetConfig+0x120>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d007      	beq.n	8008d4c <TIM_OC2_SetConfig+0xc0>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4a1c      	ldr	r2, [pc, #112]	; (8008db0 <TIM_OC2_SetConfig+0x124>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d003      	beq.n	8008d4c <TIM_OC2_SetConfig+0xc0>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a17      	ldr	r2, [pc, #92]	; (8008da4 <TIM_OC2_SetConfig+0x118>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d113      	bne.n	8008d74 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	695b      	ldr	r3, [r3, #20]
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	693a      	ldr	r2, [r7, #16]
 8008d64:	4313      	orrs	r3, r2
 8008d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	699b      	ldr	r3, [r3, #24]
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	693a      	ldr	r2, [r7, #16]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	693a      	ldr	r2, [r7, #16]
 8008d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	68fa      	ldr	r2, [r7, #12]
 8008d7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	685a      	ldr	r2, [r3, #4]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	697a      	ldr	r2, [r7, #20]
 8008d8c:	621a      	str	r2, [r3, #32]
}
 8008d8e:	bf00      	nop
 8008d90:	371c      	adds	r7, #28
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	40012c00 	.word	0x40012c00
 8008da0:	40013400 	.word	0x40013400
 8008da4:	40015000 	.word	0x40015000
 8008da8:	40014000 	.word	0x40014000
 8008dac:	40014400 	.word	0x40014400
 8008db0:	40014800 	.word	0x40014800

08008db4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b087      	sub	sp, #28
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a1b      	ldr	r3, [r3, #32]
 8008dc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a1b      	ldr	r3, [r3, #32]
 8008dce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	69db      	ldr	r3, [r3, #28]
 8008dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f023 0303 	bic.w	r3, r3, #3
 8008dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68fa      	ldr	r2, [r7, #12]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	021b      	lsls	r3, r3, #8
 8008e08:	697a      	ldr	r2, [r7, #20]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4a2b      	ldr	r2, [pc, #172]	; (8008ec0 <TIM_OC3_SetConfig+0x10c>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d007      	beq.n	8008e26 <TIM_OC3_SetConfig+0x72>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a2a      	ldr	r2, [pc, #168]	; (8008ec4 <TIM_OC3_SetConfig+0x110>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d003      	beq.n	8008e26 <TIM_OC3_SetConfig+0x72>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4a29      	ldr	r2, [pc, #164]	; (8008ec8 <TIM_OC3_SetConfig+0x114>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d10d      	bne.n	8008e42 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	021b      	lsls	r3, r3, #8
 8008e34:	697a      	ldr	r2, [r7, #20]
 8008e36:	4313      	orrs	r3, r2
 8008e38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a1e      	ldr	r2, [pc, #120]	; (8008ec0 <TIM_OC3_SetConfig+0x10c>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d013      	beq.n	8008e72 <TIM_OC3_SetConfig+0xbe>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4a1d      	ldr	r2, [pc, #116]	; (8008ec4 <TIM_OC3_SetConfig+0x110>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d00f      	beq.n	8008e72 <TIM_OC3_SetConfig+0xbe>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4a1d      	ldr	r2, [pc, #116]	; (8008ecc <TIM_OC3_SetConfig+0x118>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d00b      	beq.n	8008e72 <TIM_OC3_SetConfig+0xbe>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4a1c      	ldr	r2, [pc, #112]	; (8008ed0 <TIM_OC3_SetConfig+0x11c>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d007      	beq.n	8008e72 <TIM_OC3_SetConfig+0xbe>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4a1b      	ldr	r2, [pc, #108]	; (8008ed4 <TIM_OC3_SetConfig+0x120>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d003      	beq.n	8008e72 <TIM_OC3_SetConfig+0xbe>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a16      	ldr	r2, [pc, #88]	; (8008ec8 <TIM_OC3_SetConfig+0x114>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d113      	bne.n	8008e9a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	695b      	ldr	r3, [r3, #20]
 8008e86:	011b      	lsls	r3, r3, #4
 8008e88:	693a      	ldr	r2, [r7, #16]
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	699b      	ldr	r3, [r3, #24]
 8008e92:	011b      	lsls	r3, r3, #4
 8008e94:	693a      	ldr	r2, [r7, #16]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	693a      	ldr	r2, [r7, #16]
 8008e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	68fa      	ldr	r2, [r7, #12]
 8008ea4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	685a      	ldr	r2, [r3, #4]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	697a      	ldr	r2, [r7, #20]
 8008eb2:	621a      	str	r2, [r3, #32]
}
 8008eb4:	bf00      	nop
 8008eb6:	371c      	adds	r7, #28
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr
 8008ec0:	40012c00 	.word	0x40012c00
 8008ec4:	40013400 	.word	0x40013400
 8008ec8:	40015000 	.word	0x40015000
 8008ecc:	40014000 	.word	0x40014000
 8008ed0:	40014400 	.word	0x40014400
 8008ed4:	40014800 	.word	0x40014800

08008ed8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b087      	sub	sp, #28
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6a1b      	ldr	r3, [r3, #32]
 8008ee6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a1b      	ldr	r3, [r3, #32]
 8008ef2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	69db      	ldr	r3, [r3, #28]
 8008efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	021b      	lsls	r3, r3, #8
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	031b      	lsls	r3, r3, #12
 8008f2e:	697a      	ldr	r2, [r7, #20]
 8008f30:	4313      	orrs	r3, r2
 8008f32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a2c      	ldr	r2, [pc, #176]	; (8008fe8 <TIM_OC4_SetConfig+0x110>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d007      	beq.n	8008f4c <TIM_OC4_SetConfig+0x74>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a2b      	ldr	r2, [pc, #172]	; (8008fec <TIM_OC4_SetConfig+0x114>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d003      	beq.n	8008f4c <TIM_OC4_SetConfig+0x74>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a2a      	ldr	r2, [pc, #168]	; (8008ff0 <TIM_OC4_SetConfig+0x118>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d10d      	bne.n	8008f68 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	031b      	lsls	r3, r3, #12
 8008f5a:	697a      	ldr	r2, [r7, #20]
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4a1f      	ldr	r2, [pc, #124]	; (8008fe8 <TIM_OC4_SetConfig+0x110>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d013      	beq.n	8008f98 <TIM_OC4_SetConfig+0xc0>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a1e      	ldr	r2, [pc, #120]	; (8008fec <TIM_OC4_SetConfig+0x114>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d00f      	beq.n	8008f98 <TIM_OC4_SetConfig+0xc0>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a1e      	ldr	r2, [pc, #120]	; (8008ff4 <TIM_OC4_SetConfig+0x11c>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d00b      	beq.n	8008f98 <TIM_OC4_SetConfig+0xc0>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a1d      	ldr	r2, [pc, #116]	; (8008ff8 <TIM_OC4_SetConfig+0x120>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d007      	beq.n	8008f98 <TIM_OC4_SetConfig+0xc0>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a1c      	ldr	r2, [pc, #112]	; (8008ffc <TIM_OC4_SetConfig+0x124>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d003      	beq.n	8008f98 <TIM_OC4_SetConfig+0xc0>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a17      	ldr	r2, [pc, #92]	; (8008ff0 <TIM_OC4_SetConfig+0x118>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d113      	bne.n	8008fc0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f9e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008fa6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	695b      	ldr	r3, [r3, #20]
 8008fac:	019b      	lsls	r3, r3, #6
 8008fae:	693a      	ldr	r2, [r7, #16]
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	019b      	lsls	r3, r3, #6
 8008fba:	693a      	ldr	r2, [r7, #16]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	693a      	ldr	r2, [r7, #16]
 8008fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	68fa      	ldr	r2, [r7, #12]
 8008fca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	685a      	ldr	r2, [r3, #4]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	697a      	ldr	r2, [r7, #20]
 8008fd8:	621a      	str	r2, [r3, #32]
}
 8008fda:	bf00      	nop
 8008fdc:	371c      	adds	r7, #28
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	40012c00 	.word	0x40012c00
 8008fec:	40013400 	.word	0x40013400
 8008ff0:	40015000 	.word	0x40015000
 8008ff4:	40014000 	.word	0x40014000
 8008ff8:	40014400 	.word	0x40014400
 8008ffc:	40014800 	.word	0x40014800

08009000 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009000:	b480      	push	{r7}
 8009002:	b087      	sub	sp, #28
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6a1b      	ldr	r3, [r3, #32]
 800900e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6a1b      	ldr	r3, [r3, #32]
 800901a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800902e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	4313      	orrs	r3, r2
 800903c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009044:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	041b      	lsls	r3, r3, #16
 800904c:	693a      	ldr	r2, [r7, #16]
 800904e:	4313      	orrs	r3, r2
 8009050:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4a19      	ldr	r2, [pc, #100]	; (80090bc <TIM_OC5_SetConfig+0xbc>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d013      	beq.n	8009082 <TIM_OC5_SetConfig+0x82>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4a18      	ldr	r2, [pc, #96]	; (80090c0 <TIM_OC5_SetConfig+0xc0>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d00f      	beq.n	8009082 <TIM_OC5_SetConfig+0x82>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4a17      	ldr	r2, [pc, #92]	; (80090c4 <TIM_OC5_SetConfig+0xc4>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d00b      	beq.n	8009082 <TIM_OC5_SetConfig+0x82>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	4a16      	ldr	r2, [pc, #88]	; (80090c8 <TIM_OC5_SetConfig+0xc8>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d007      	beq.n	8009082 <TIM_OC5_SetConfig+0x82>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	4a15      	ldr	r2, [pc, #84]	; (80090cc <TIM_OC5_SetConfig+0xcc>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d003      	beq.n	8009082 <TIM_OC5_SetConfig+0x82>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4a14      	ldr	r2, [pc, #80]	; (80090d0 <TIM_OC5_SetConfig+0xd0>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d109      	bne.n	8009096 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009088:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	695b      	ldr	r3, [r3, #20]
 800908e:	021b      	lsls	r3, r3, #8
 8009090:	697a      	ldr	r2, [r7, #20]
 8009092:	4313      	orrs	r3, r2
 8009094:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	697a      	ldr	r2, [r7, #20]
 800909a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	68fa      	ldr	r2, [r7, #12]
 80090a0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	685a      	ldr	r2, [r3, #4]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	693a      	ldr	r2, [r7, #16]
 80090ae:	621a      	str	r2, [r3, #32]
}
 80090b0:	bf00      	nop
 80090b2:	371c      	adds	r7, #28
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr
 80090bc:	40012c00 	.word	0x40012c00
 80090c0:	40013400 	.word	0x40013400
 80090c4:	40014000 	.word	0x40014000
 80090c8:	40014400 	.word	0x40014400
 80090cc:	40014800 	.word	0x40014800
 80090d0:	40015000 	.word	0x40015000

080090d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b087      	sub	sp, #28
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6a1b      	ldr	r3, [r3, #32]
 80090e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6a1b      	ldr	r3, [r3, #32]
 80090ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	021b      	lsls	r3, r3, #8
 800910e:	68fa      	ldr	r2, [r7, #12]
 8009110:	4313      	orrs	r3, r2
 8009112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800911a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	051b      	lsls	r3, r3, #20
 8009122:	693a      	ldr	r2, [r7, #16]
 8009124:	4313      	orrs	r3, r2
 8009126:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4a1a      	ldr	r2, [pc, #104]	; (8009194 <TIM_OC6_SetConfig+0xc0>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d013      	beq.n	8009158 <TIM_OC6_SetConfig+0x84>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	4a19      	ldr	r2, [pc, #100]	; (8009198 <TIM_OC6_SetConfig+0xc4>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d00f      	beq.n	8009158 <TIM_OC6_SetConfig+0x84>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4a18      	ldr	r2, [pc, #96]	; (800919c <TIM_OC6_SetConfig+0xc8>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d00b      	beq.n	8009158 <TIM_OC6_SetConfig+0x84>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4a17      	ldr	r2, [pc, #92]	; (80091a0 <TIM_OC6_SetConfig+0xcc>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d007      	beq.n	8009158 <TIM_OC6_SetConfig+0x84>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	4a16      	ldr	r2, [pc, #88]	; (80091a4 <TIM_OC6_SetConfig+0xd0>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d003      	beq.n	8009158 <TIM_OC6_SetConfig+0x84>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	4a15      	ldr	r2, [pc, #84]	; (80091a8 <TIM_OC6_SetConfig+0xd4>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d109      	bne.n	800916c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800915e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	695b      	ldr	r3, [r3, #20]
 8009164:	029b      	lsls	r3, r3, #10
 8009166:	697a      	ldr	r2, [r7, #20]
 8009168:	4313      	orrs	r3, r2
 800916a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	697a      	ldr	r2, [r7, #20]
 8009170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	68fa      	ldr	r2, [r7, #12]
 8009176:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	685a      	ldr	r2, [r3, #4]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	693a      	ldr	r2, [r7, #16]
 8009184:	621a      	str	r2, [r3, #32]
}
 8009186:	bf00      	nop
 8009188:	371c      	adds	r7, #28
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	40012c00 	.word	0x40012c00
 8009198:	40013400 	.word	0x40013400
 800919c:	40014000 	.word	0x40014000
 80091a0:	40014400 	.word	0x40014400
 80091a4:	40014800 	.word	0x40014800
 80091a8:	40015000 	.word	0x40015000

080091ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b087      	sub	sp, #28
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6a1b      	ldr	r3, [r3, #32]
 80091bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	6a1b      	ldr	r3, [r3, #32]
 80091c2:	f023 0201 	bic.w	r2, r3, #1
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	699b      	ldr	r3, [r3, #24]
 80091ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	011b      	lsls	r3, r3, #4
 80091dc:	693a      	ldr	r2, [r7, #16]
 80091de:	4313      	orrs	r3, r2
 80091e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	f023 030a 	bic.w	r3, r3, #10
 80091e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80091ea:	697a      	ldr	r2, [r7, #20]
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	693a      	ldr	r2, [r7, #16]
 80091f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	697a      	ldr	r2, [r7, #20]
 80091fc:	621a      	str	r2, [r3, #32]
}
 80091fe:	bf00      	nop
 8009200:	371c      	adds	r7, #28
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr

0800920a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800920a:	b480      	push	{r7}
 800920c:	b087      	sub	sp, #28
 800920e:	af00      	add	r7, sp, #0
 8009210:	60f8      	str	r0, [r7, #12]
 8009212:	60b9      	str	r1, [r7, #8]
 8009214:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6a1b      	ldr	r3, [r3, #32]
 800921a:	f023 0210 	bic.w	r2, r3, #16
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	699b      	ldr	r3, [r3, #24]
 8009226:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6a1b      	ldr	r3, [r3, #32]
 800922c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009234:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	031b      	lsls	r3, r3, #12
 800923a:	697a      	ldr	r2, [r7, #20]
 800923c:	4313      	orrs	r3, r2
 800923e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009246:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	011b      	lsls	r3, r3, #4
 800924c:	693a      	ldr	r2, [r7, #16]
 800924e:	4313      	orrs	r3, r2
 8009250:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	697a      	ldr	r2, [r7, #20]
 8009256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	693a      	ldr	r2, [r7, #16]
 800925c:	621a      	str	r2, [r3, #32]
}
 800925e:	bf00      	nop
 8009260:	371c      	adds	r7, #28
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr

0800926a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800926a:	b480      	push	{r7}
 800926c:	b085      	sub	sp, #20
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
 8009272:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009284:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009286:	683a      	ldr	r2, [r7, #0]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	4313      	orrs	r3, r2
 800928c:	f043 0307 	orr.w	r3, r3, #7
 8009290:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	609a      	str	r2, [r3, #8]
}
 8009298:	bf00      	nop
 800929a:	3714      	adds	r7, #20
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b087      	sub	sp, #28
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	607a      	str	r2, [r7, #4]
 80092b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	021a      	lsls	r2, r3, #8
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	431a      	orrs	r2, r3
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	4313      	orrs	r3, r2
 80092cc:	697a      	ldr	r2, [r7, #20]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	697a      	ldr	r2, [r7, #20]
 80092d6:	609a      	str	r2, [r3, #8]
}
 80092d8:	bf00      	nop
 80092da:	371c      	adds	r7, #28
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr

080092e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b087      	sub	sp, #28
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	60b9      	str	r1, [r7, #8]
 80092ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	f003 031f 	and.w	r3, r3, #31
 80092f6:	2201      	movs	r2, #1
 80092f8:	fa02 f303 	lsl.w	r3, r2, r3
 80092fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6a1a      	ldr	r2, [r3, #32]
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	43db      	mvns	r3, r3
 8009306:	401a      	ands	r2, r3
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6a1a      	ldr	r2, [r3, #32]
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	f003 031f 	and.w	r3, r3, #31
 8009316:	6879      	ldr	r1, [r7, #4]
 8009318:	fa01 f303 	lsl.w	r3, r1, r3
 800931c:	431a      	orrs	r2, r3
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	621a      	str	r2, [r3, #32]
}
 8009322:	bf00      	nop
 8009324:	371c      	adds	r7, #28
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr
	...

08009330 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009330:	b480      	push	{r7}
 8009332:	b085      	sub	sp, #20
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009340:	2b01      	cmp	r3, #1
 8009342:	d101      	bne.n	8009348 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009344:	2302      	movs	r3, #2
 8009346:	e074      	b.n	8009432 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2202      	movs	r2, #2
 8009354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a34      	ldr	r2, [pc, #208]	; (8009440 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d009      	beq.n	8009386 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a33      	ldr	r2, [pc, #204]	; (8009444 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d004      	beq.n	8009386 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a31      	ldr	r2, [pc, #196]	; (8009448 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d108      	bne.n	8009398 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800938c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	68fa      	ldr	r2, [r7, #12]
 8009394:	4313      	orrs	r3, r2
 8009396:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800939e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	68fa      	ldr	r2, [r7, #12]
 80093aa:	4313      	orrs	r3, r2
 80093ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	68fa      	ldr	r2, [r7, #12]
 80093b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a21      	ldr	r2, [pc, #132]	; (8009440 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d022      	beq.n	8009406 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093c8:	d01d      	beq.n	8009406 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a1f      	ldr	r2, [pc, #124]	; (800944c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d018      	beq.n	8009406 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a1d      	ldr	r2, [pc, #116]	; (8009450 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d013      	beq.n	8009406 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a1c      	ldr	r2, [pc, #112]	; (8009454 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d00e      	beq.n	8009406 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a15      	ldr	r2, [pc, #84]	; (8009444 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d009      	beq.n	8009406 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a18      	ldr	r2, [pc, #96]	; (8009458 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d004      	beq.n	8009406 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a11      	ldr	r2, [pc, #68]	; (8009448 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d10c      	bne.n	8009420 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800940c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	68ba      	ldr	r2, [r7, #8]
 8009414:	4313      	orrs	r3, r2
 8009416:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	68ba      	ldr	r2, [r7, #8]
 800941e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2201      	movs	r2, #1
 8009424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009430:	2300      	movs	r3, #0
}
 8009432:	4618      	mov	r0, r3
 8009434:	3714      	adds	r7, #20
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr
 800943e:	bf00      	nop
 8009440:	40012c00 	.word	0x40012c00
 8009444:	40013400 	.word	0x40013400
 8009448:	40015000 	.word	0x40015000
 800944c:	40000400 	.word	0x40000400
 8009450:	40000800 	.word	0x40000800
 8009454:	40000c00 	.word	0x40000c00
 8009458:	40014000 	.word	0x40014000

0800945c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800945c:	b480      	push	{r7}
 800945e:	b085      	sub	sp, #20
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009466:	2300      	movs	r3, #0
 8009468:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009470:	2b01      	cmp	r3, #1
 8009472:	d101      	bne.n	8009478 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009474:	2302      	movs	r3, #2
 8009476:	e096      	b.n	80095a6 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2201      	movs	r2, #1
 800947c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	4313      	orrs	r3, r2
 800948c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	4313      	orrs	r3, r2
 800949a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	4313      	orrs	r3, r2
 80094a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4313      	orrs	r3, r2
 80094b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	4313      	orrs	r3, r2
 80094c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	695b      	ldr	r3, [r3, #20]
 80094d0:	4313      	orrs	r3, r2
 80094d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094de:	4313      	orrs	r3, r2
 80094e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	699b      	ldr	r3, [r3, #24]
 80094ec:	041b      	lsls	r3, r3, #16
 80094ee:	4313      	orrs	r3, r2
 80094f0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a2f      	ldr	r2, [pc, #188]	; (80095b4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d009      	beq.n	8009510 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a2d      	ldr	r2, [pc, #180]	; (80095b8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d004      	beq.n	8009510 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a2c      	ldr	r2, [pc, #176]	; (80095bc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d106      	bne.n	800951e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	69db      	ldr	r3, [r3, #28]
 800951a:	4313      	orrs	r3, r2
 800951c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a24      	ldr	r2, [pc, #144]	; (80095b4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d009      	beq.n	800953c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a22      	ldr	r2, [pc, #136]	; (80095b8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d004      	beq.n	800953c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a21      	ldr	r2, [pc, #132]	; (80095bc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d12b      	bne.n	8009594 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009546:	051b      	lsls	r3, r3, #20
 8009548:	4313      	orrs	r3, r2
 800954a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	6a1b      	ldr	r3, [r3, #32]
 8009556:	4313      	orrs	r3, r2
 8009558:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009564:	4313      	orrs	r3, r2
 8009566:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a11      	ldr	r2, [pc, #68]	; (80095b4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d009      	beq.n	8009586 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a10      	ldr	r2, [pc, #64]	; (80095b8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d004      	beq.n	8009586 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a0e      	ldr	r2, [pc, #56]	; (80095bc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d106      	bne.n	8009594 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009590:	4313      	orrs	r3, r2
 8009592:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	68fa      	ldr	r2, [r7, #12]
 800959a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2200      	movs	r2, #0
 80095a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3714      	adds	r7, #20
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	40012c00 	.word	0x40012c00
 80095b8:	40013400 	.word	0x40013400
 80095bc:	40015000 	.word	0x40015000

080095c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80095d0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80095d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	b29a      	uxth	r2, r3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3714      	adds	r7, #20
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr

080095ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80095ee:	b480      	push	{r7}
 80095f0:	b085      	sub	sp, #20
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80095f6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80095fa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009602:	b29a      	uxth	r2, r3
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	b29b      	uxth	r3, r3
 8009608:	43db      	mvns	r3, r3
 800960a:	b29b      	uxth	r3, r3
 800960c:	4013      	ands	r3, r2
 800960e:	b29a      	uxth	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009616:	2300      	movs	r3, #0
}
 8009618:	4618      	mov	r0, r3
 800961a:	3714      	adds	r7, #20
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009624:	b084      	sub	sp, #16
 8009626:	b480      	push	{r7}
 8009628:	b083      	sub	sp, #12
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
 800962e:	f107 0014 	add.w	r0, r7, #20
 8009632:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2201      	movs	r2, #1
 800963a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	b004      	add	sp, #16
 8009664:	4770      	bx	lr
	...

08009668 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009668:	b480      	push	{r7}
 800966a:	b09d      	sub	sp, #116	; 0x74
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009672:	2300      	movs	r3, #0
 8009674:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	4413      	add	r3, r2
 8009682:	881b      	ldrh	r3, [r3, #0]
 8009684:	b29b      	uxth	r3, r3
 8009686:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800968a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800968e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	78db      	ldrb	r3, [r3, #3]
 8009696:	2b03      	cmp	r3, #3
 8009698:	d81f      	bhi.n	80096da <USB_ActivateEndpoint+0x72>
 800969a:	a201      	add	r2, pc, #4	; (adr r2, 80096a0 <USB_ActivateEndpoint+0x38>)
 800969c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a0:	080096b1 	.word	0x080096b1
 80096a4:	080096cd 	.word	0x080096cd
 80096a8:	080096e3 	.word	0x080096e3
 80096ac:	080096bf 	.word	0x080096bf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80096b0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80096b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80096b8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80096bc:	e012      	b.n	80096e4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80096be:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80096c2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80096c6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80096ca:	e00b      	b.n	80096e4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80096cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80096d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80096d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80096d8:	e004      	b.n	80096e4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80096da:	2301      	movs	r3, #1
 80096dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80096e0:	e000      	b.n	80096e4 <USB_ActivateEndpoint+0x7c>
      break;
 80096e2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	441a      	add	r2, r3
 80096ee:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80096f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009702:	b29b      	uxth	r3, r3
 8009704:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	4413      	add	r3, r2
 8009710:	881b      	ldrh	r3, [r3, #0]
 8009712:	b29b      	uxth	r3, r3
 8009714:	b21b      	sxth	r3, r3
 8009716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800971a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800971e:	b21a      	sxth	r2, r3
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	b21b      	sxth	r3, r3
 8009726:	4313      	orrs	r3, r2
 8009728:	b21b      	sxth	r3, r3
 800972a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	441a      	add	r2, r3
 8009738:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800973c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009740:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009744:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800974c:	b29b      	uxth	r3, r3
 800974e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	7b1b      	ldrb	r3, [r3, #12]
 8009754:	2b00      	cmp	r3, #0
 8009756:	f040 8149 	bne.w	80099ec <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	785b      	ldrb	r3, [r3, #1]
 800975e:	2b00      	cmp	r3, #0
 8009760:	f000 8084 	beq.w	800986c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	61bb      	str	r3, [r7, #24]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800976e:	b29b      	uxth	r3, r3
 8009770:	461a      	mov	r2, r3
 8009772:	69bb      	ldr	r3, [r7, #24]
 8009774:	4413      	add	r3, r2
 8009776:	61bb      	str	r3, [r7, #24]
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	00da      	lsls	r2, r3, #3
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	4413      	add	r3, r2
 8009782:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009786:	617b      	str	r3, [r7, #20]
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	88db      	ldrh	r3, [r3, #6]
 800978c:	085b      	lsrs	r3, r3, #1
 800978e:	b29b      	uxth	r3, r3
 8009790:	005b      	lsls	r3, r3, #1
 8009792:	b29a      	uxth	r2, r3
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	4413      	add	r3, r2
 80097a2:	881b      	ldrh	r3, [r3, #0]
 80097a4:	827b      	strh	r3, [r7, #18]
 80097a6:	8a7b      	ldrh	r3, [r7, #18]
 80097a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d01b      	beq.n	80097e8 <USB_ActivateEndpoint+0x180>
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	4413      	add	r3, r2
 80097ba:	881b      	ldrh	r3, [r3, #0]
 80097bc:	b29b      	uxth	r3, r3
 80097be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097c6:	823b      	strh	r3, [r7, #16]
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	441a      	add	r2, r3
 80097d2:	8a3b      	ldrh	r3, [r7, #16]
 80097d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	78db      	ldrb	r3, [r3, #3]
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d020      	beq.n	8009832 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	4413      	add	r3, r2
 80097fa:	881b      	ldrh	r3, [r3, #0]
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009806:	81bb      	strh	r3, [r7, #12]
 8009808:	89bb      	ldrh	r3, [r7, #12]
 800980a:	f083 0320 	eor.w	r3, r3, #32
 800980e:	81bb      	strh	r3, [r7, #12]
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	441a      	add	r2, r3
 800981a:	89bb      	ldrh	r3, [r7, #12]
 800981c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800982c:	b29b      	uxth	r3, r3
 800982e:	8013      	strh	r3, [r2, #0]
 8009830:	e2a6      	b.n	8009d80 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	4413      	add	r3, r2
 800983c:	881b      	ldrh	r3, [r3, #0]
 800983e:	b29b      	uxth	r3, r3
 8009840:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009844:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009848:	81fb      	strh	r3, [r7, #14]
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	441a      	add	r2, r3
 8009854:	89fb      	ldrh	r3, [r7, #14]
 8009856:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800985a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800985e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009866:	b29b      	uxth	r3, r3
 8009868:	8013      	strh	r3, [r2, #0]
 800986a:	e289      	b.n	8009d80 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	633b      	str	r3, [r7, #48]	; 0x30
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009876:	b29b      	uxth	r3, r3
 8009878:	461a      	mov	r2, r3
 800987a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800987c:	4413      	add	r3, r2
 800987e:	633b      	str	r3, [r7, #48]	; 0x30
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	00da      	lsls	r2, r3, #3
 8009886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009888:	4413      	add	r3, r2
 800988a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800988e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	88db      	ldrh	r3, [r3, #6]
 8009894:	085b      	lsrs	r3, r3, #1
 8009896:	b29b      	uxth	r3, r3
 8009898:	005b      	lsls	r3, r3, #1
 800989a:	b29a      	uxth	r2, r3
 800989c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800989e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	461a      	mov	r2, r3
 80098ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b0:	4413      	add	r3, r2
 80098b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	00da      	lsls	r2, r3, #3
 80098ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098bc:	4413      	add	r3, r2
 80098be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80098c2:	627b      	str	r3, [r7, #36]	; 0x24
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	691b      	ldr	r3, [r3, #16]
 80098c8:	2b3e      	cmp	r3, #62	; 0x3e
 80098ca:	d918      	bls.n	80098fe <USB_ActivateEndpoint+0x296>
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	095b      	lsrs	r3, r3, #5
 80098d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	691b      	ldr	r3, [r3, #16]
 80098d8:	f003 031f 	and.w	r3, r3, #31
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d102      	bne.n	80098e6 <USB_ActivateEndpoint+0x27e>
 80098e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098e2:	3b01      	subs	r3, #1
 80098e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80098e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	029b      	lsls	r3, r3, #10
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098f6:	b29a      	uxth	r2, r3
 80098f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fa:	801a      	strh	r2, [r3, #0]
 80098fc:	e029      	b.n	8009952 <USB_ActivateEndpoint+0x2ea>
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	691b      	ldr	r3, [r3, #16]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d112      	bne.n	800992c <USB_ActivateEndpoint+0x2c4>
 8009906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009908:	881b      	ldrh	r3, [r3, #0]
 800990a:	b29b      	uxth	r3, r3
 800990c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009910:	b29a      	uxth	r2, r3
 8009912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009914:	801a      	strh	r2, [r3, #0]
 8009916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009918:	881b      	ldrh	r3, [r3, #0]
 800991a:	b29b      	uxth	r3, r3
 800991c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009920:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009924:	b29a      	uxth	r2, r3
 8009926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009928:	801a      	strh	r2, [r3, #0]
 800992a:	e012      	b.n	8009952 <USB_ActivateEndpoint+0x2ea>
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	691b      	ldr	r3, [r3, #16]
 8009930:	085b      	lsrs	r3, r3, #1
 8009932:	66bb      	str	r3, [r7, #104]	; 0x68
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	f003 0301 	and.w	r3, r3, #1
 800993c:	2b00      	cmp	r3, #0
 800993e:	d002      	beq.n	8009946 <USB_ActivateEndpoint+0x2de>
 8009940:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009942:	3301      	adds	r3, #1
 8009944:	66bb      	str	r3, [r7, #104]	; 0x68
 8009946:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009948:	b29b      	uxth	r3, r3
 800994a:	029b      	lsls	r3, r3, #10
 800994c:	b29a      	uxth	r2, r3
 800994e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009950:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	4413      	add	r3, r2
 800995c:	881b      	ldrh	r3, [r3, #0]
 800995e:	847b      	strh	r3, [r7, #34]	; 0x22
 8009960:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009966:	2b00      	cmp	r3, #0
 8009968:	d01b      	beq.n	80099a2 <USB_ActivateEndpoint+0x33a>
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	4413      	add	r3, r2
 8009974:	881b      	ldrh	r3, [r3, #0]
 8009976:	b29b      	uxth	r3, r3
 8009978:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800997c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009980:	843b      	strh	r3, [r7, #32]
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	441a      	add	r2, r3
 800998c:	8c3b      	ldrh	r3, [r7, #32]
 800998e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009992:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009996:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800999a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800999e:	b29b      	uxth	r3, r3
 80099a0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	4413      	add	r3, r2
 80099ac:	881b      	ldrh	r3, [r3, #0]
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099b8:	83fb      	strh	r3, [r7, #30]
 80099ba:	8bfb      	ldrh	r3, [r7, #30]
 80099bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80099c0:	83fb      	strh	r3, [r7, #30]
 80099c2:	8bfb      	ldrh	r3, [r7, #30]
 80099c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80099c8:	83fb      	strh	r3, [r7, #30]
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	441a      	add	r2, r3
 80099d4:	8bfb      	ldrh	r3, [r7, #30]
 80099d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	8013      	strh	r3, [r2, #0]
 80099ea:	e1c9      	b.n	8009d80 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	78db      	ldrb	r3, [r3, #3]
 80099f0:	2b02      	cmp	r3, #2
 80099f2:	d11e      	bne.n	8009a32 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	4413      	add	r3, r2
 80099fe:	881b      	ldrh	r3, [r3, #0]
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a0a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	441a      	add	r2, r3
 8009a18:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a24:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	8013      	strh	r3, [r2, #0]
 8009a30:	e01d      	b.n	8009a6e <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	4413      	add	r3, r2
 8009a3c:	881b      	ldrh	r3, [r3, #0]
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a48:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	441a      	add	r2, r3
 8009a56:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a7e:	4413      	add	r3, r2
 8009a80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	00da      	lsls	r2, r3, #3
 8009a88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a8a:	4413      	add	r3, r2
 8009a8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a90:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	891b      	ldrh	r3, [r3, #8]
 8009a96:	085b      	lsrs	r3, r3, #1
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	005b      	lsls	r3, r3, #1
 8009a9c:	b29a      	uxth	r2, r3
 8009a9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009aa0:	801a      	strh	r2, [r3, #0]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	657b      	str	r3, [r7, #84]	; 0x54
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	461a      	mov	r2, r3
 8009ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ab2:	4413      	add	r3, r2
 8009ab4:	657b      	str	r3, [r7, #84]	; 0x54
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	00da      	lsls	r2, r3, #3
 8009abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009abe:	4413      	add	r3, r2
 8009ac0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009ac4:	653b      	str	r3, [r7, #80]	; 0x50
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	895b      	ldrh	r3, [r3, #10]
 8009aca:	085b      	lsrs	r3, r3, #1
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	005b      	lsls	r3, r3, #1
 8009ad0:	b29a      	uxth	r2, r3
 8009ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ad4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	785b      	ldrb	r3, [r3, #1]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	f040 8093 	bne.w	8009c06 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	4413      	add	r3, r2
 8009aea:	881b      	ldrh	r3, [r3, #0]
 8009aec:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009af0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009af4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d01b      	beq.n	8009b34 <USB_ActivateEndpoint+0x4cc>
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	4413      	add	r3, r2
 8009b06:	881b      	ldrh	r3, [r3, #0]
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b12:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	441a      	add	r2, r3
 8009b1e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009b20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	4413      	add	r3, r2
 8009b3e:	881b      	ldrh	r3, [r3, #0]
 8009b40:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009b42:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d01b      	beq.n	8009b84 <USB_ActivateEndpoint+0x51c>
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	4413      	add	r3, r2
 8009b56:	881b      	ldrh	r3, [r3, #0]
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b62:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	441a      	add	r2, r3
 8009b6e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009b70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	4413      	add	r3, r2
 8009b8e:	881b      	ldrh	r3, [r3, #0]
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b9a:	873b      	strh	r3, [r7, #56]	; 0x38
 8009b9c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009b9e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009ba2:	873b      	strh	r3, [r7, #56]	; 0x38
 8009ba4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009ba6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009baa:	873b      	strh	r3, [r7, #56]	; 0x38
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	441a      	add	r2, r3
 8009bb6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009bb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	4413      	add	r3, r2
 8009bd6:	881b      	ldrh	r3, [r3, #0]
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009be2:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	441a      	add	r2, r3
 8009bee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009bf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	8013      	strh	r3, [r2, #0]
 8009c04:	e0bc      	b.n	8009d80 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	4413      	add	r3, r2
 8009c10:	881b      	ldrh	r3, [r3, #0]
 8009c12:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009c16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d01d      	beq.n	8009c5e <USB_ActivateEndpoint+0x5f6>
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	4413      	add	r3, r2
 8009c2c:	881b      	ldrh	r3, [r3, #0]
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c38:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	441a      	add	r2, r3
 8009c46:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009c4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	4413      	add	r3, r2
 8009c68:	881b      	ldrh	r3, [r3, #0]
 8009c6a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009c6e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d01d      	beq.n	8009cb6 <USB_ActivateEndpoint+0x64e>
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	4413      	add	r3, r2
 8009c84:	881b      	ldrh	r3, [r3, #0]
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c90:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	441a      	add	r2, r3
 8009c9e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	78db      	ldrb	r3, [r3, #3]
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d024      	beq.n	8009d08 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	4413      	add	r3, r2
 8009cc8:	881b      	ldrh	r3, [r3, #0]
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cd4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009cd8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009cdc:	f083 0320 	eor.w	r3, r3, #32
 8009ce0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	441a      	add	r2, r3
 8009cee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	8013      	strh	r3, [r2, #0]
 8009d06:	e01d      	b.n	8009d44 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	4413      	add	r3, r2
 8009d12:	881b      	ldrh	r3, [r3, #0]
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d1e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	441a      	add	r2, r3
 8009d2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009d30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	781b      	ldrb	r3, [r3, #0]
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	4413      	add	r3, r2
 8009d4e:	881b      	ldrh	r3, [r3, #0]
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d5a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	441a      	add	r2, r3
 8009d68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009d6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009d80:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3774      	adds	r7, #116	; 0x74
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr

08009d90 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b08d      	sub	sp, #52	; 0x34
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	7b1b      	ldrb	r3, [r3, #12]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	f040 808e 	bne.w	8009ec0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	785b      	ldrb	r3, [r3, #1]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d044      	beq.n	8009e36 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	4413      	add	r3, r2
 8009db6:	881b      	ldrh	r3, [r3, #0]
 8009db8:	81bb      	strh	r3, [r7, #12]
 8009dba:	89bb      	ldrh	r3, [r7, #12]
 8009dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d01b      	beq.n	8009dfc <USB_DeactivateEndpoint+0x6c>
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	4413      	add	r3, r2
 8009dce:	881b      	ldrh	r3, [r3, #0]
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dda:	817b      	strh	r3, [r7, #10]
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	441a      	add	r2, r3
 8009de6:	897b      	ldrh	r3, [r7, #10]
 8009de8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009df0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009df4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	009b      	lsls	r3, r3, #2
 8009e04:	4413      	add	r3, r2
 8009e06:	881b      	ldrh	r3, [r3, #0]
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e12:	813b      	strh	r3, [r7, #8]
 8009e14:	687a      	ldr	r2, [r7, #4]
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	441a      	add	r2, r3
 8009e1e:	893b      	ldrh	r3, [r7, #8]
 8009e20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	8013      	strh	r3, [r2, #0]
 8009e34:	e192      	b.n	800a15c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	009b      	lsls	r3, r3, #2
 8009e3e:	4413      	add	r3, r2
 8009e40:	881b      	ldrh	r3, [r3, #0]
 8009e42:	827b      	strh	r3, [r7, #18]
 8009e44:	8a7b      	ldrh	r3, [r7, #18]
 8009e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d01b      	beq.n	8009e86 <USB_DeactivateEndpoint+0xf6>
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	4413      	add	r3, r2
 8009e58:	881b      	ldrh	r3, [r3, #0]
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e64:	823b      	strh	r3, [r7, #16]
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	441a      	add	r2, r3
 8009e70:	8a3b      	ldrh	r3, [r7, #16]
 8009e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	009b      	lsls	r3, r3, #2
 8009e8e:	4413      	add	r3, r2
 8009e90:	881b      	ldrh	r3, [r3, #0]
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e9c:	81fb      	strh	r3, [r7, #14]
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	441a      	add	r2, r3
 8009ea8:	89fb      	ldrh	r3, [r7, #14]
 8009eaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009eae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	8013      	strh	r3, [r2, #0]
 8009ebe:	e14d      	b.n	800a15c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	785b      	ldrb	r3, [r3, #1]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	f040 80a5 	bne.w	800a014 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	4413      	add	r3, r2
 8009ed4:	881b      	ldrh	r3, [r3, #0]
 8009ed6:	843b      	strh	r3, [r7, #32]
 8009ed8:	8c3b      	ldrh	r3, [r7, #32]
 8009eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d01b      	beq.n	8009f1a <USB_DeactivateEndpoint+0x18a>
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	4413      	add	r3, r2
 8009eec:	881b      	ldrh	r3, [r3, #0]
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ef8:	83fb      	strh	r3, [r7, #30]
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	441a      	add	r2, r3
 8009f04:	8bfb      	ldrh	r3, [r7, #30]
 8009f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	009b      	lsls	r3, r3, #2
 8009f22:	4413      	add	r3, r2
 8009f24:	881b      	ldrh	r3, [r3, #0]
 8009f26:	83bb      	strh	r3, [r7, #28]
 8009f28:	8bbb      	ldrh	r3, [r7, #28]
 8009f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d01b      	beq.n	8009f6a <USB_DeactivateEndpoint+0x1da>
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	4413      	add	r3, r2
 8009f3c:	881b      	ldrh	r3, [r3, #0]
 8009f3e:	b29b      	uxth	r3, r3
 8009f40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f48:	837b      	strh	r3, [r7, #26]
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	441a      	add	r2, r3
 8009f54:	8b7b      	ldrh	r3, [r7, #26]
 8009f56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	4413      	add	r3, r2
 8009f74:	881b      	ldrh	r3, [r3, #0]
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f80:	833b      	strh	r3, [r7, #24]
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	441a      	add	r2, r3
 8009f8c:	8b3b      	ldrh	r3, [r7, #24]
 8009f8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	4413      	add	r3, r2
 8009fac:	881b      	ldrh	r3, [r3, #0]
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fb8:	82fb      	strh	r3, [r7, #22]
 8009fba:	687a      	ldr	r2, [r7, #4]
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	441a      	add	r2, r3
 8009fc4:	8afb      	ldrh	r3, [r7, #22]
 8009fc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	781b      	ldrb	r3, [r3, #0]
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	4413      	add	r3, r2
 8009fe4:	881b      	ldrh	r3, [r3, #0]
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ff0:	82bb      	strh	r3, [r7, #20]
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	441a      	add	r2, r3
 8009ffc:	8abb      	ldrh	r3, [r7, #20]
 8009ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a00a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a00e:	b29b      	uxth	r3, r3
 800a010:	8013      	strh	r3, [r2, #0]
 800a012:	e0a3      	b.n	800a15c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	4413      	add	r3, r2
 800a01e:	881b      	ldrh	r3, [r3, #0]
 800a020:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a022:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d01b      	beq.n	800a064 <USB_DeactivateEndpoint+0x2d4>
 800a02c:	687a      	ldr	r2, [r7, #4]
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	4413      	add	r3, r2
 800a036:	881b      	ldrh	r3, [r3, #0]
 800a038:	b29b      	uxth	r3, r3
 800a03a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a03e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a042:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	441a      	add	r2, r3
 800a04e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a050:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a054:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a058:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a05c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a060:	b29b      	uxth	r3, r3
 800a062:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	4413      	add	r3, r2
 800a06e:	881b      	ldrh	r3, [r3, #0]
 800a070:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a072:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d01b      	beq.n	800a0b4 <USB_DeactivateEndpoint+0x324>
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	4413      	add	r3, r2
 800a086:	881b      	ldrh	r3, [r3, #0]
 800a088:	b29b      	uxth	r3, r3
 800a08a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a08e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a092:	853b      	strh	r3, [r7, #40]	; 0x28
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	009b      	lsls	r3, r3, #2
 800a09c:	441a      	add	r2, r3
 800a09e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a0a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	4413      	add	r3, r2
 800a0be:	881b      	ldrh	r3, [r3, #0]
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0ca:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a0cc:	687a      	ldr	r2, [r7, #4]
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	441a      	add	r2, r3
 800a0d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a0d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a0e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	4413      	add	r3, r2
 800a0f6:	881b      	ldrh	r3, [r3, #0]
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a102:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	441a      	add	r2, r3
 800a10e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a110:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a114:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a118:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a11c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a120:	b29b      	uxth	r3, r3
 800a122:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	4413      	add	r3, r2
 800a12e:	881b      	ldrh	r3, [r3, #0]
 800a130:	b29b      	uxth	r3, r3
 800a132:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a13a:	847b      	strh	r3, [r7, #34]	; 0x22
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	009b      	lsls	r3, r3, #2
 800a144:	441a      	add	r2, r3
 800a146:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a148:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a14c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a158:	b29b      	uxth	r3, r3
 800a15a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a15c:	2300      	movs	r3, #0
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3734      	adds	r7, #52	; 0x34
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr

0800a16a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b0c2      	sub	sp, #264	; 0x108
 800a16e:	af00      	add	r7, sp, #0
 800a170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a174:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a178:	6018      	str	r0, [r3, #0]
 800a17a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a17e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a182:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	785b      	ldrb	r3, [r3, #1]
 800a190:	2b01      	cmp	r3, #1
 800a192:	f040 867b 	bne.w	800ae8c <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a19a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	699a      	ldr	r2, [r3, #24]
 800a1a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d908      	bls.n	800a1c4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a1b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	691b      	ldr	r3, [r3, #16]
 800a1be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a1c2:	e007      	b.n	800a1d4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a1c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	699b      	ldr	r3, [r3, #24]
 800a1d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a1d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	7b1b      	ldrb	r3, [r3, #12]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d13a      	bne.n	800a25a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a1e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	6959      	ldr	r1, [r3, #20]
 800a1f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	88da      	ldrh	r2, [r3, #6]
 800a1fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a200:	b29b      	uxth	r3, r3
 800a202:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a206:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a20a:	6800      	ldr	r0, [r0, #0]
 800a20c:	f001 fc1d 	bl	800ba4a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a210:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a214:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	613b      	str	r3, [r7, #16]
 800a21c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a220:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	461a      	mov	r2, r3
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	4413      	add	r3, r2
 800a232:	613b      	str	r3, [r7, #16]
 800a234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	00da      	lsls	r2, r3, #3
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	4413      	add	r3, r2
 800a246:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a24a:	60fb      	str	r3, [r7, #12]
 800a24c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a250:	b29a      	uxth	r2, r3
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	801a      	strh	r2, [r3, #0]
 800a256:	f000 bde3 	b.w	800ae20 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a25a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a25e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	78db      	ldrb	r3, [r3, #3]
 800a266:	2b02      	cmp	r3, #2
 800a268:	f040 843a 	bne.w	800aae0 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a26c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	6a1a      	ldr	r2, [r3, #32]
 800a278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a27c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	691b      	ldr	r3, [r3, #16]
 800a284:	429a      	cmp	r2, r3
 800a286:	f240 83b7 	bls.w	800a9f8 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a28a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a28e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a298:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	4413      	add	r3, r2
 800a2a4:	881b      	ldrh	r3, [r3, #0]
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2b0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a2b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	441a      	add	r2, r3
 800a2ce:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a2d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2da:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a2de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a2e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	6a1a      	ldr	r2, [r3, #32]
 800a2f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2f6:	1ad2      	subs	r2, r2, r3
 800a2f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a308:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a312:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	009b      	lsls	r3, r3, #2
 800a31c:	4413      	add	r3, r2
 800a31e:	881b      	ldrh	r3, [r3, #0]
 800a320:	b29b      	uxth	r3, r3
 800a322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a326:	2b00      	cmp	r3, #0
 800a328:	f000 81b3 	beq.w	800a692 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a32c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a330:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	633b      	str	r3, [r7, #48]	; 0x30
 800a338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a33c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	785b      	ldrb	r3, [r3, #1]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d16d      	bne.n	800a424 <USB_EPStartXfer+0x2ba>
 800a348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a34c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	62bb      	str	r3, [r7, #40]	; 0x28
 800a354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a358:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a362:	b29b      	uxth	r3, r3
 800a364:	461a      	mov	r2, r3
 800a366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a368:	4413      	add	r3, r2
 800a36a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a36c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	00da      	lsls	r2, r3, #3
 800a37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37c:	4413      	add	r3, r2
 800a37e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a382:	627b      	str	r3, [r7, #36]	; 0x24
 800a384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a388:	2b3e      	cmp	r3, #62	; 0x3e
 800a38a:	d91c      	bls.n	800a3c6 <USB_EPStartXfer+0x25c>
 800a38c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a390:	095b      	lsrs	r3, r3, #5
 800a392:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a396:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a39a:	f003 031f 	and.w	r3, r3, #31
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d104      	bne.n	800a3ac <USB_EPStartXfer+0x242>
 800a3a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a3a6:	3b01      	subs	r3, #1
 800a3a8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a3ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	029b      	lsls	r3, r3, #10
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3be:	b29a      	uxth	r2, r3
 800a3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c2:	801a      	strh	r2, [r3, #0]
 800a3c4:	e053      	b.n	800a46e <USB_EPStartXfer+0x304>
 800a3c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d112      	bne.n	800a3f4 <USB_EPStartXfer+0x28a>
 800a3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d0:	881b      	ldrh	r3, [r3, #0]
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a3d8:	b29a      	uxth	r2, r3
 800a3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3dc:	801a      	strh	r2, [r3, #0]
 800a3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e0:	881b      	ldrh	r3, [r3, #0]
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3ec:	b29a      	uxth	r2, r3
 800a3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f0:	801a      	strh	r2, [r3, #0]
 800a3f2:	e03c      	b.n	800a46e <USB_EPStartXfer+0x304>
 800a3f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3f8:	085b      	lsrs	r3, r3, #1
 800a3fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a3fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a402:	f003 0301 	and.w	r3, r3, #1
 800a406:	2b00      	cmp	r3, #0
 800a408:	d004      	beq.n	800a414 <USB_EPStartXfer+0x2aa>
 800a40a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a40e:	3301      	adds	r3, #1
 800a410:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a414:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a418:	b29b      	uxth	r3, r3
 800a41a:	029b      	lsls	r3, r3, #10
 800a41c:	b29a      	uxth	r2, r3
 800a41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a420:	801a      	strh	r2, [r3, #0]
 800a422:	e024      	b.n	800a46e <USB_EPStartXfer+0x304>
 800a424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	785b      	ldrb	r3, [r3, #1]
 800a430:	2b01      	cmp	r3, #1
 800a432:	d11c      	bne.n	800a46e <USB_EPStartXfer+0x304>
 800a434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a438:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a442:	b29b      	uxth	r3, r3
 800a444:	461a      	mov	r2, r3
 800a446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a448:	4413      	add	r3, r2
 800a44a:	633b      	str	r3, [r7, #48]	; 0x30
 800a44c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	781b      	ldrb	r3, [r3, #0]
 800a458:	00da      	lsls	r2, r3, #3
 800a45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a45c:	4413      	add	r3, r2
 800a45e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a462:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a468:	b29a      	uxth	r2, r3
 800a46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a46c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a46e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	895b      	ldrh	r3, [r3, #10]
 800a47a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a47e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	6959      	ldr	r1, [r3, #20]
 800a48a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a48e:	b29b      	uxth	r3, r3
 800a490:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a494:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a498:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a49c:	6800      	ldr	r0, [r0, #0]
 800a49e:	f001 fad4 	bl	800ba4a <USB_WritePMA>
            ep->xfer_buff += len;
 800a4a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	695a      	ldr	r2, [r3, #20]
 800a4ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4b2:	441a      	add	r2, r3
 800a4b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a4c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	6a1a      	ldr	r2, [r3, #32]
 800a4cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	691b      	ldr	r3, [r3, #16]
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d90f      	bls.n	800a4fc <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800a4dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	6a1a      	ldr	r2, [r3, #32]
 800a4e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4ec:	1ad2      	subs	r2, r2, r3
 800a4ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	621a      	str	r2, [r3, #32]
 800a4fa:	e00e      	b.n	800a51a <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800a4fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a500:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	6a1b      	ldr	r3, [r3, #32]
 800a508:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a50c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	2200      	movs	r2, #0
 800a518:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a51a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a51e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	785b      	ldrb	r3, [r3, #1]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d16d      	bne.n	800a606 <USB_EPStartXfer+0x49c>
 800a52a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a52e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	61bb      	str	r3, [r7, #24]
 800a536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a53a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a544:	b29b      	uxth	r3, r3
 800a546:	461a      	mov	r2, r3
 800a548:	69bb      	ldr	r3, [r7, #24]
 800a54a:	4413      	add	r3, r2
 800a54c:	61bb      	str	r3, [r7, #24]
 800a54e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a552:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	00da      	lsls	r2, r3, #3
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	4413      	add	r3, r2
 800a560:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a564:	617b      	str	r3, [r7, #20]
 800a566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a56a:	2b3e      	cmp	r3, #62	; 0x3e
 800a56c:	d91c      	bls.n	800a5a8 <USB_EPStartXfer+0x43e>
 800a56e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a572:	095b      	lsrs	r3, r3, #5
 800a574:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a578:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a57c:	f003 031f 	and.w	r3, r3, #31
 800a580:	2b00      	cmp	r3, #0
 800a582:	d104      	bne.n	800a58e <USB_EPStartXfer+0x424>
 800a584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a588:	3b01      	subs	r3, #1
 800a58a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a58e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a592:	b29b      	uxth	r3, r3
 800a594:	029b      	lsls	r3, r3, #10
 800a596:	b29b      	uxth	r3, r3
 800a598:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a59c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5a0:	b29a      	uxth	r2, r3
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	801a      	strh	r2, [r3, #0]
 800a5a6:	e059      	b.n	800a65c <USB_EPStartXfer+0x4f2>
 800a5a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d112      	bne.n	800a5d6 <USB_EPStartXfer+0x46c>
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	881b      	ldrh	r3, [r3, #0]
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a5ba:	b29a      	uxth	r2, r3
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	801a      	strh	r2, [r3, #0]
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	881b      	ldrh	r3, [r3, #0]
 800a5c4:	b29b      	uxth	r3, r3
 800a5c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5ce:	b29a      	uxth	r2, r3
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	801a      	strh	r2, [r3, #0]
 800a5d4:	e042      	b.n	800a65c <USB_EPStartXfer+0x4f2>
 800a5d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5da:	085b      	lsrs	r3, r3, #1
 800a5dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a5e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5e4:	f003 0301 	and.w	r3, r3, #1
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d004      	beq.n	800a5f6 <USB_EPStartXfer+0x48c>
 800a5ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a5f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5fa:	b29b      	uxth	r3, r3
 800a5fc:	029b      	lsls	r3, r3, #10
 800a5fe:	b29a      	uxth	r2, r3
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	801a      	strh	r2, [r3, #0]
 800a604:	e02a      	b.n	800a65c <USB_EPStartXfer+0x4f2>
 800a606:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a60a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	785b      	ldrb	r3, [r3, #1]
 800a612:	2b01      	cmp	r3, #1
 800a614:	d122      	bne.n	800a65c <USB_EPStartXfer+0x4f2>
 800a616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a61a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	623b      	str	r3, [r7, #32]
 800a622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a626:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a630:	b29b      	uxth	r3, r3
 800a632:	461a      	mov	r2, r3
 800a634:	6a3b      	ldr	r3, [r7, #32]
 800a636:	4413      	add	r3, r2
 800a638:	623b      	str	r3, [r7, #32]
 800a63a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a63e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	00da      	lsls	r2, r3, #3
 800a648:	6a3b      	ldr	r3, [r7, #32]
 800a64a:	4413      	add	r3, r2
 800a64c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a650:	61fb      	str	r3, [r7, #28]
 800a652:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a656:	b29a      	uxth	r2, r3
 800a658:	69fb      	ldr	r3, [r7, #28]
 800a65a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a65c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a660:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	891b      	ldrh	r3, [r3, #8]
 800a668:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a66c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	6959      	ldr	r1, [r3, #20]
 800a678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a682:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a686:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a68a:	6800      	ldr	r0, [r0, #0]
 800a68c:	f001 f9dd 	bl	800ba4a <USB_WritePMA>
 800a690:	e3c6      	b.n	800ae20 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a696:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	785b      	ldrb	r3, [r3, #1]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d16d      	bne.n	800a77e <USB_EPStartXfer+0x614>
 800a6a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6bc:	b29b      	uxth	r3, r3
 800a6be:	461a      	mov	r2, r3
 800a6c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6c2:	4413      	add	r3, r2
 800a6c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	00da      	lsls	r2, r3, #3
 800a6d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6d6:	4413      	add	r3, r2
 800a6d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a6dc:	647b      	str	r3, [r7, #68]	; 0x44
 800a6de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6e2:	2b3e      	cmp	r3, #62	; 0x3e
 800a6e4:	d91c      	bls.n	800a720 <USB_EPStartXfer+0x5b6>
 800a6e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6ea:	095b      	lsrs	r3, r3, #5
 800a6ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a6f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6f4:	f003 031f 	and.w	r3, r3, #31
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d104      	bne.n	800a706 <USB_EPStartXfer+0x59c>
 800a6fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a700:	3b01      	subs	r3, #1
 800a702:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a706:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	029b      	lsls	r3, r3, #10
 800a70e:	b29b      	uxth	r3, r3
 800a710:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a714:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a718:	b29a      	uxth	r2, r3
 800a71a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a71c:	801a      	strh	r2, [r3, #0]
 800a71e:	e059      	b.n	800a7d4 <USB_EPStartXfer+0x66a>
 800a720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a724:	2b00      	cmp	r3, #0
 800a726:	d112      	bne.n	800a74e <USB_EPStartXfer+0x5e4>
 800a728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a72a:	881b      	ldrh	r3, [r3, #0]
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a732:	b29a      	uxth	r2, r3
 800a734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a736:	801a      	strh	r2, [r3, #0]
 800a738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a73a:	881b      	ldrh	r3, [r3, #0]
 800a73c:	b29b      	uxth	r3, r3
 800a73e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a742:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a746:	b29a      	uxth	r2, r3
 800a748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a74a:	801a      	strh	r2, [r3, #0]
 800a74c:	e042      	b.n	800a7d4 <USB_EPStartXfer+0x66a>
 800a74e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a752:	085b      	lsrs	r3, r3, #1
 800a754:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a758:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a75c:	f003 0301 	and.w	r3, r3, #1
 800a760:	2b00      	cmp	r3, #0
 800a762:	d004      	beq.n	800a76e <USB_EPStartXfer+0x604>
 800a764:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a768:	3301      	adds	r3, #1
 800a76a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a76e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a772:	b29b      	uxth	r3, r3
 800a774:	029b      	lsls	r3, r3, #10
 800a776:	b29a      	uxth	r2, r3
 800a778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a77a:	801a      	strh	r2, [r3, #0]
 800a77c:	e02a      	b.n	800a7d4 <USB_EPStartXfer+0x66a>
 800a77e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a782:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	785b      	ldrb	r3, [r3, #1]
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d122      	bne.n	800a7d4 <USB_EPStartXfer+0x66a>
 800a78e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a792:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	653b      	str	r3, [r7, #80]	; 0x50
 800a79a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a79e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7ae:	4413      	add	r3, r2
 800a7b0:	653b      	str	r3, [r7, #80]	; 0x50
 800a7b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	00da      	lsls	r2, r3, #3
 800a7c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7c2:	4413      	add	r3, r2
 800a7c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a7c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7ce:	b29a      	uxth	r2, r3
 800a7d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7d2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a7d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	891b      	ldrh	r3, [r3, #8]
 800a7e0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a7e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	6959      	ldr	r1, [r3, #20]
 800a7f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a7fa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a7fe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a802:	6800      	ldr	r0, [r0, #0]
 800a804:	f001 f921 	bl	800ba4a <USB_WritePMA>
            ep->xfer_buff += len;
 800a808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a80c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	695a      	ldr	r2, [r3, #20]
 800a814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a818:	441a      	add	r2, r3
 800a81a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a81e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a82a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	6a1a      	ldr	r2, [r3, #32]
 800a832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a836:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	691b      	ldr	r3, [r3, #16]
 800a83e:	429a      	cmp	r2, r3
 800a840:	d90f      	bls.n	800a862 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800a842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a846:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	6a1a      	ldr	r2, [r3, #32]
 800a84e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a852:	1ad2      	subs	r2, r2, r3
 800a854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a858:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	621a      	str	r2, [r3, #32]
 800a860:	e00e      	b.n	800a880 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800a862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	6a1b      	ldr	r3, [r3, #32]
 800a86e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a876:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	2200      	movs	r2, #0
 800a87e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a884:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	643b      	str	r3, [r7, #64]	; 0x40
 800a88c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	785b      	ldrb	r3, [r3, #1]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d16d      	bne.n	800a978 <USB_EPStartXfer+0x80e>
 800a89c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8bc:	4413      	add	r3, r2
 800a8be:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	00da      	lsls	r2, r3, #3
 800a8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d0:	4413      	add	r3, r2
 800a8d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a8d6:	637b      	str	r3, [r7, #52]	; 0x34
 800a8d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8dc:	2b3e      	cmp	r3, #62	; 0x3e
 800a8de:	d91c      	bls.n	800a91a <USB_EPStartXfer+0x7b0>
 800a8e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8e4:	095b      	lsrs	r3, r3, #5
 800a8e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ee:	f003 031f 	and.w	r3, r3, #31
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d104      	bne.n	800a900 <USB_EPStartXfer+0x796>
 800a8f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8fa:	3b01      	subs	r3, #1
 800a8fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a904:	b29b      	uxth	r3, r3
 800a906:	029b      	lsls	r3, r3, #10
 800a908:	b29b      	uxth	r3, r3
 800a90a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a90e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a912:	b29a      	uxth	r2, r3
 800a914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a916:	801a      	strh	r2, [r3, #0]
 800a918:	e053      	b.n	800a9c2 <USB_EPStartXfer+0x858>
 800a91a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d112      	bne.n	800a948 <USB_EPStartXfer+0x7de>
 800a922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a924:	881b      	ldrh	r3, [r3, #0]
 800a926:	b29b      	uxth	r3, r3
 800a928:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a92c:	b29a      	uxth	r2, r3
 800a92e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a930:	801a      	strh	r2, [r3, #0]
 800a932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a934:	881b      	ldrh	r3, [r3, #0]
 800a936:	b29b      	uxth	r3, r3
 800a938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a93c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a940:	b29a      	uxth	r2, r3
 800a942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a944:	801a      	strh	r2, [r3, #0]
 800a946:	e03c      	b.n	800a9c2 <USB_EPStartXfer+0x858>
 800a948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a94c:	085b      	lsrs	r3, r3, #1
 800a94e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a956:	f003 0301 	and.w	r3, r3, #1
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d004      	beq.n	800a968 <USB_EPStartXfer+0x7fe>
 800a95e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a962:	3301      	adds	r3, #1
 800a964:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	029b      	lsls	r3, r3, #10
 800a970:	b29a      	uxth	r2, r3
 800a972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a974:	801a      	strh	r2, [r3, #0]
 800a976:	e024      	b.n	800a9c2 <USB_EPStartXfer+0x858>
 800a978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a97c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	785b      	ldrb	r3, [r3, #1]
 800a984:	2b01      	cmp	r3, #1
 800a986:	d11c      	bne.n	800a9c2 <USB_EPStartXfer+0x858>
 800a988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a98c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a996:	b29b      	uxth	r3, r3
 800a998:	461a      	mov	r2, r3
 800a99a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a99c:	4413      	add	r3, r2
 800a99e:	643b      	str	r3, [r7, #64]	; 0x40
 800a9a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	00da      	lsls	r2, r3, #3
 800a9ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9b0:	4413      	add	r3, r2
 800a9b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9bc:	b29a      	uxth	r2, r3
 800a9be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a9c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	895b      	ldrh	r3, [r3, #10]
 800a9ce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a9d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	6959      	ldr	r1, [r3, #20]
 800a9de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a9e8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a9ec:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a9f0:	6800      	ldr	r0, [r0, #0]
 800a9f2:	f001 f82a 	bl	800ba4a <USB_WritePMA>
 800a9f6:	e213      	b.n	800ae20 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a9f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	6a1b      	ldr	r3, [r3, #32]
 800aa04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800aa08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	009b      	lsls	r3, r3, #2
 800aa20:	4413      	add	r3, r2
 800aa22:	881b      	ldrh	r3, [r3, #0]
 800aa24:	b29b      	uxth	r3, r3
 800aa26:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800aa2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa2e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800aa32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	441a      	add	r2, r3
 800aa4c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800aa50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800aa64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	461a      	mov	r2, r3
 800aa82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa84:	4413      	add	r3, r2
 800aa86:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	00da      	lsls	r2, r3, #3
 800aa96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa98:	4413      	add	r3, r2
 800aa9a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa9e:	65bb      	str	r3, [r7, #88]	; 0x58
 800aaa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaa4:	b29a      	uxth	r2, r3
 800aaa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aaa8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800aaaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	891b      	ldrh	r3, [r3, #8]
 800aab6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aaba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aabe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	6959      	ldr	r1, [r3, #20]
 800aac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aad0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800aad4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800aad8:	6800      	ldr	r0, [r0, #0]
 800aada:	f000 ffb6 	bl	800ba4a <USB_WritePMA>
 800aade:	e19f      	b.n	800ae20 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800aae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	6a1a      	ldr	r2, [r3, #32]
 800aaec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaf0:	1ad2      	subs	r2, r2, r3
 800aaf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800aafe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	009b      	lsls	r3, r3, #2
 800ab16:	4413      	add	r3, r2
 800ab18:	881b      	ldrh	r3, [r3, #0]
 800ab1a:	b29b      	uxth	r3, r3
 800ab1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f000 80bc 	beq.w	800ac9e <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ab26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	673b      	str	r3, [r7, #112]	; 0x70
 800ab32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	785b      	ldrb	r3, [r3, #1]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d16d      	bne.n	800ac1e <USB_EPStartXfer+0xab4>
 800ab42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab5c:	b29b      	uxth	r3, r3
 800ab5e:	461a      	mov	r2, r3
 800ab60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab62:	4413      	add	r3, r2
 800ab64:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	00da      	lsls	r2, r3, #3
 800ab74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab76:	4413      	add	r3, r2
 800ab78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ab7c:	667b      	str	r3, [r7, #100]	; 0x64
 800ab7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab82:	2b3e      	cmp	r3, #62	; 0x3e
 800ab84:	d91c      	bls.n	800abc0 <USB_EPStartXfer+0xa56>
 800ab86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab8a:	095b      	lsrs	r3, r3, #5
 800ab8c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ab90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab94:	f003 031f 	and.w	r3, r3, #31
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d104      	bne.n	800aba6 <USB_EPStartXfer+0xa3c>
 800ab9c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800aba0:	3b01      	subs	r3, #1
 800aba2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aba6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800abaa:	b29b      	uxth	r3, r3
 800abac:	029b      	lsls	r3, r3, #10
 800abae:	b29b      	uxth	r3, r3
 800abb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abb8:	b29a      	uxth	r2, r3
 800abba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abbc:	801a      	strh	r2, [r3, #0]
 800abbe:	e053      	b.n	800ac68 <USB_EPStartXfer+0xafe>
 800abc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d112      	bne.n	800abee <USB_EPStartXfer+0xa84>
 800abc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abca:	881b      	ldrh	r3, [r3, #0]
 800abcc:	b29b      	uxth	r3, r3
 800abce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800abd2:	b29a      	uxth	r2, r3
 800abd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abd6:	801a      	strh	r2, [r3, #0]
 800abd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abda:	881b      	ldrh	r3, [r3, #0]
 800abdc:	b29b      	uxth	r3, r3
 800abde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abe2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abe6:	b29a      	uxth	r2, r3
 800abe8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abea:	801a      	strh	r2, [r3, #0]
 800abec:	e03c      	b.n	800ac68 <USB_EPStartXfer+0xafe>
 800abee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abf2:	085b      	lsrs	r3, r3, #1
 800abf4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800abf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abfc:	f003 0301 	and.w	r3, r3, #1
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d004      	beq.n	800ac0e <USB_EPStartXfer+0xaa4>
 800ac04:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ac08:	3301      	adds	r3, #1
 800ac0a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ac0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	029b      	lsls	r3, r3, #10
 800ac16:	b29a      	uxth	r2, r3
 800ac18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac1a:	801a      	strh	r2, [r3, #0]
 800ac1c:	e024      	b.n	800ac68 <USB_EPStartXfer+0xafe>
 800ac1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	785b      	ldrb	r3, [r3, #1]
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d11c      	bne.n	800ac68 <USB_EPStartXfer+0xafe>
 800ac2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	461a      	mov	r2, r3
 800ac40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac42:	4413      	add	r3, r2
 800ac44:	673b      	str	r3, [r7, #112]	; 0x70
 800ac46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	00da      	lsls	r2, r3, #3
 800ac54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac56:	4413      	add	r3, r2
 800ac58:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ac5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac62:	b29a      	uxth	r2, r3
 800ac64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac66:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ac68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	895b      	ldrh	r3, [r3, #10]
 800ac74:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ac78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	6959      	ldr	r1, [r3, #20]
 800ac84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ac8e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ac92:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ac96:	6800      	ldr	r0, [r0, #0]
 800ac98:	f000 fed7 	bl	800ba4a <USB_WritePMA>
 800ac9c:	e0c0      	b.n	800ae20 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ac9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	785b      	ldrb	r3, [r3, #1]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d16d      	bne.n	800ad8a <USB_EPStartXfer+0xc20>
 800acae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800acba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acc8:	b29b      	uxth	r3, r3
 800acca:	461a      	mov	r2, r3
 800accc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800acce:	4413      	add	r3, r2
 800acd0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800acd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	00da      	lsls	r2, r3, #3
 800ace0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ace2:	4413      	add	r3, r2
 800ace4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ace8:	67bb      	str	r3, [r7, #120]	; 0x78
 800acea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acee:	2b3e      	cmp	r3, #62	; 0x3e
 800acf0:	d91c      	bls.n	800ad2c <USB_EPStartXfer+0xbc2>
 800acf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acf6:	095b      	lsrs	r3, r3, #5
 800acf8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800acfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad00:	f003 031f 	and.w	r3, r3, #31
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d104      	bne.n	800ad12 <USB_EPStartXfer+0xba8>
 800ad08:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ad0c:	3b01      	subs	r3, #1
 800ad0e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ad12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	029b      	lsls	r3, r3, #10
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad24:	b29a      	uxth	r2, r3
 800ad26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad28:	801a      	strh	r2, [r3, #0]
 800ad2a:	e05f      	b.n	800adec <USB_EPStartXfer+0xc82>
 800ad2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d112      	bne.n	800ad5a <USB_EPStartXfer+0xbf0>
 800ad34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad36:	881b      	ldrh	r3, [r3, #0]
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ad3e:	b29a      	uxth	r2, r3
 800ad40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad42:	801a      	strh	r2, [r3, #0]
 800ad44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad46:	881b      	ldrh	r3, [r3, #0]
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad52:	b29a      	uxth	r2, r3
 800ad54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad56:	801a      	strh	r2, [r3, #0]
 800ad58:	e048      	b.n	800adec <USB_EPStartXfer+0xc82>
 800ad5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad5e:	085b      	lsrs	r3, r3, #1
 800ad60:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ad64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad68:	f003 0301 	and.w	r3, r3, #1
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d004      	beq.n	800ad7a <USB_EPStartXfer+0xc10>
 800ad70:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ad74:	3301      	adds	r3, #1
 800ad76:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ad7a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ad7e:	b29b      	uxth	r3, r3
 800ad80:	029b      	lsls	r3, r3, #10
 800ad82:	b29a      	uxth	r2, r3
 800ad84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad86:	801a      	strh	r2, [r3, #0]
 800ad88:	e030      	b.n	800adec <USB_EPStartXfer+0xc82>
 800ad8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	785b      	ldrb	r3, [r3, #1]
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d128      	bne.n	800adec <USB_EPStartXfer+0xc82>
 800ad9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ada8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800adb6:	b29b      	uxth	r3, r3
 800adb8:	461a      	mov	r2, r3
 800adba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800adbe:	4413      	add	r3, r2
 800adc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800adc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	00da      	lsls	r2, r3, #3
 800add2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800add6:	4413      	add	r3, r2
 800add8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800addc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ade0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ade4:	b29a      	uxth	r2, r3
 800ade6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800adea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800adec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	891b      	ldrh	r3, [r3, #8]
 800adf8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800adfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	6959      	ldr	r1, [r3, #20]
 800ae08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae0c:	b29b      	uxth	r3, r3
 800ae0e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ae12:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ae16:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ae1a:	6800      	ldr	r0, [r0, #0]
 800ae1c:	f000 fe15 	bl	800ba4a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ae20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae28:	681a      	ldr	r2, [r3, #0]
 800ae2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	009b      	lsls	r3, r3, #2
 800ae38:	4413      	add	r3, r2
 800ae3a:	881b      	ldrh	r3, [r3, #0]
 800ae3c:	b29b      	uxth	r3, r3
 800ae3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae46:	817b      	strh	r3, [r7, #10]
 800ae48:	897b      	ldrh	r3, [r7, #10]
 800ae4a:	f083 0310 	eor.w	r3, r3, #16
 800ae4e:	817b      	strh	r3, [r7, #10]
 800ae50:	897b      	ldrh	r3, [r7, #10]
 800ae52:	f083 0320 	eor.w	r3, r3, #32
 800ae56:	817b      	strh	r3, [r7, #10]
 800ae58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae60:	681a      	ldr	r2, [r3, #0]
 800ae62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	009b      	lsls	r3, r3, #2
 800ae70:	441a      	add	r2, r3
 800ae72:	897b      	ldrh	r3, [r7, #10]
 800ae74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	8013      	strh	r3, [r2, #0]
 800ae88:	f000 bc9f 	b.w	800b7ca <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ae8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	7b1b      	ldrb	r3, [r3, #12]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	f040 80ae 	bne.w	800affa <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ae9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aea2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	699a      	ldr	r2, [r3, #24]
 800aeaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	691b      	ldr	r3, [r3, #16]
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d917      	bls.n	800aeea <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800aeba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aebe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	691b      	ldr	r3, [r3, #16]
 800aec6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800aeca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	699a      	ldr	r2, [r3, #24]
 800aed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeda:	1ad2      	subs	r2, r2, r3
 800aedc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aee0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	619a      	str	r2, [r3, #24]
 800aee8:	e00e      	b.n	800af08 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800aeea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	699b      	ldr	r3, [r3, #24]
 800aef6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800aefa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aefe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	2200      	movs	r2, #0
 800af06:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800af08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800af16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af24:	b29b      	uxth	r3, r3
 800af26:	461a      	mov	r2, r3
 800af28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800af2c:	4413      	add	r3, r2
 800af2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800af32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	00da      	lsls	r2, r3, #3
 800af40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800af44:	4413      	add	r3, r2
 800af46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800af4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af52:	2b3e      	cmp	r3, #62	; 0x3e
 800af54:	d91d      	bls.n	800af92 <USB_EPStartXfer+0xe28>
 800af56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af5a:	095b      	lsrs	r3, r3, #5
 800af5c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800af60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af64:	f003 031f 	and.w	r3, r3, #31
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d104      	bne.n	800af76 <USB_EPStartXfer+0xe0c>
 800af6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800af70:	3b01      	subs	r3, #1
 800af72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800af76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800af7a:	b29b      	uxth	r3, r3
 800af7c:	029b      	lsls	r3, r3, #10
 800af7e:	b29b      	uxth	r3, r3
 800af80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af88:	b29a      	uxth	r2, r3
 800af8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af8e:	801a      	strh	r2, [r3, #0]
 800af90:	e3e1      	b.n	800b756 <USB_EPStartXfer+0x15ec>
 800af92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af96:	2b00      	cmp	r3, #0
 800af98:	d116      	bne.n	800afc8 <USB_EPStartXfer+0xe5e>
 800af9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af9e:	881b      	ldrh	r3, [r3, #0]
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800afa6:	b29a      	uxth	r2, r3
 800afa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afac:	801a      	strh	r2, [r3, #0]
 800afae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afb2:	881b      	ldrh	r3, [r3, #0]
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afbe:	b29a      	uxth	r2, r3
 800afc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afc4:	801a      	strh	r2, [r3, #0]
 800afc6:	e3c6      	b.n	800b756 <USB_EPStartXfer+0x15ec>
 800afc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afcc:	085b      	lsrs	r3, r3, #1
 800afce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800afd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afd6:	f003 0301 	and.w	r3, r3, #1
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d004      	beq.n	800afe8 <USB_EPStartXfer+0xe7e>
 800afde:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800afe2:	3301      	adds	r3, #1
 800afe4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800afe8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800afec:	b29b      	uxth	r3, r3
 800afee:	029b      	lsls	r3, r3, #10
 800aff0:	b29a      	uxth	r2, r3
 800aff2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aff6:	801a      	strh	r2, [r3, #0]
 800aff8:	e3ad      	b.n	800b756 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800affa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800affe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	78db      	ldrb	r3, [r3, #3]
 800b006:	2b02      	cmp	r3, #2
 800b008:	f040 8200 	bne.w	800b40c <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b00c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b010:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	785b      	ldrb	r3, [r3, #1]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	f040 8091 	bne.w	800b140 <USB_EPStartXfer+0xfd6>
 800b01e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b022:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b02c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b030:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b03a:	b29b      	uxth	r3, r3
 800b03c:	461a      	mov	r2, r3
 800b03e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b042:	4413      	add	r3, r2
 800b044:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b048:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b04c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	00da      	lsls	r2, r3, #3
 800b056:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b05a:	4413      	add	r3, r2
 800b05c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b060:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b068:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	691b      	ldr	r3, [r3, #16]
 800b070:	2b3e      	cmp	r3, #62	; 0x3e
 800b072:	d925      	bls.n	800b0c0 <USB_EPStartXfer+0xf56>
 800b074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b078:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	691b      	ldr	r3, [r3, #16]
 800b080:	095b      	lsrs	r3, r3, #5
 800b082:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b08a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	691b      	ldr	r3, [r3, #16]
 800b092:	f003 031f 	and.w	r3, r3, #31
 800b096:	2b00      	cmp	r3, #0
 800b098:	d104      	bne.n	800b0a4 <USB_EPStartXfer+0xf3a>
 800b09a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b09e:	3b01      	subs	r3, #1
 800b0a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b0a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	029b      	lsls	r3, r3, #10
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0b6:	b29a      	uxth	r2, r3
 800b0b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0bc:	801a      	strh	r2, [r3, #0]
 800b0be:	e074      	b.n	800b1aa <USB_EPStartXfer+0x1040>
 800b0c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	691b      	ldr	r3, [r3, #16]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d116      	bne.n	800b0fe <USB_EPStartXfer+0xf94>
 800b0d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0d4:	881b      	ldrh	r3, [r3, #0]
 800b0d6:	b29b      	uxth	r3, r3
 800b0d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b0dc:	b29a      	uxth	r2, r3
 800b0de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0e2:	801a      	strh	r2, [r3, #0]
 800b0e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0e8:	881b      	ldrh	r3, [r3, #0]
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0f4:	b29a      	uxth	r2, r3
 800b0f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b0fa:	801a      	strh	r2, [r3, #0]
 800b0fc:	e055      	b.n	800b1aa <USB_EPStartXfer+0x1040>
 800b0fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	691b      	ldr	r3, [r3, #16]
 800b10a:	085b      	lsrs	r3, r3, #1
 800b10c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	691b      	ldr	r3, [r3, #16]
 800b11c:	f003 0301 	and.w	r3, r3, #1
 800b120:	2b00      	cmp	r3, #0
 800b122:	d004      	beq.n	800b12e <USB_EPStartXfer+0xfc4>
 800b124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b128:	3301      	adds	r3, #1
 800b12a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b12e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b132:	b29b      	uxth	r3, r3
 800b134:	029b      	lsls	r3, r3, #10
 800b136:	b29a      	uxth	r2, r3
 800b138:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b13c:	801a      	strh	r2, [r3, #0]
 800b13e:	e034      	b.n	800b1aa <USB_EPStartXfer+0x1040>
 800b140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	785b      	ldrb	r3, [r3, #1]
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d12c      	bne.n	800b1aa <USB_EPStartXfer+0x1040>
 800b150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b154:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b15e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b162:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b16c:	b29b      	uxth	r3, r3
 800b16e:	461a      	mov	r2, r3
 800b170:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b174:	4413      	add	r3, r2
 800b176:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b17a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b17e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	00da      	lsls	r2, r3, #3
 800b188:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b18c:	4413      	add	r3, r2
 800b18e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b192:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b19a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	691b      	ldr	r3, [r3, #16]
 800b1a2:	b29a      	uxth	r2, r3
 800b1a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b1a8:	801a      	strh	r2, [r3, #0]
 800b1aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b1b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	785b      	ldrb	r3, [r3, #1]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	f040 8091 	bne.w	800b2ec <USB_EPStartXfer+0x1182>
 800b1ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b1d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b1ee:	4413      	add	r3, r2
 800b1f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b1f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	00da      	lsls	r2, r3, #3
 800b202:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b206:	4413      	add	r3, r2
 800b208:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b20c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b210:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b214:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	691b      	ldr	r3, [r3, #16]
 800b21c:	2b3e      	cmp	r3, #62	; 0x3e
 800b21e:	d925      	bls.n	800b26c <USB_EPStartXfer+0x1102>
 800b220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	691b      	ldr	r3, [r3, #16]
 800b22c:	095b      	lsrs	r3, r3, #5
 800b22e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	691b      	ldr	r3, [r3, #16]
 800b23e:	f003 031f 	and.w	r3, r3, #31
 800b242:	2b00      	cmp	r3, #0
 800b244:	d104      	bne.n	800b250 <USB_EPStartXfer+0x10e6>
 800b246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b24a:	3b01      	subs	r3, #1
 800b24c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b254:	b29b      	uxth	r3, r3
 800b256:	029b      	lsls	r3, r3, #10
 800b258:	b29b      	uxth	r3, r3
 800b25a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b25e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b262:	b29a      	uxth	r2, r3
 800b264:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b268:	801a      	strh	r2, [r3, #0]
 800b26a:	e06d      	b.n	800b348 <USB_EPStartXfer+0x11de>
 800b26c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	691b      	ldr	r3, [r3, #16]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d116      	bne.n	800b2aa <USB_EPStartXfer+0x1140>
 800b27c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b280:	881b      	ldrh	r3, [r3, #0]
 800b282:	b29b      	uxth	r3, r3
 800b284:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b288:	b29a      	uxth	r2, r3
 800b28a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b28e:	801a      	strh	r2, [r3, #0]
 800b290:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b294:	881b      	ldrh	r3, [r3, #0]
 800b296:	b29b      	uxth	r3, r3
 800b298:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b29c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2a0:	b29a      	uxth	r2, r3
 800b2a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b2a6:	801a      	strh	r2, [r3, #0]
 800b2a8:	e04e      	b.n	800b348 <USB_EPStartXfer+0x11de>
 800b2aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	691b      	ldr	r3, [r3, #16]
 800b2b6:	085b      	lsrs	r3, r3, #1
 800b2b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b2bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	691b      	ldr	r3, [r3, #16]
 800b2c8:	f003 0301 	and.w	r3, r3, #1
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d004      	beq.n	800b2da <USB_EPStartXfer+0x1170>
 800b2d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b2da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	029b      	lsls	r3, r3, #10
 800b2e2:	b29a      	uxth	r2, r3
 800b2e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b2e8:	801a      	strh	r2, [r3, #0]
 800b2ea:	e02d      	b.n	800b348 <USB_EPStartXfer+0x11de>
 800b2ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	785b      	ldrb	r3, [r3, #1]
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d125      	bne.n	800b348 <USB_EPStartXfer+0x11de>
 800b2fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b300:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	461a      	mov	r2, r3
 800b30e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b312:	4413      	add	r3, r2
 800b314:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b31c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	00da      	lsls	r2, r3, #3
 800b326:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b32a:	4413      	add	r3, r2
 800b32c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b330:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b334:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b338:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	691b      	ldr	r3, [r3, #16]
 800b340:	b29a      	uxth	r2, r3
 800b342:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b346:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b34c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	69db      	ldr	r3, [r3, #28]
 800b354:	2b00      	cmp	r3, #0
 800b356:	f000 81fe 	beq.w	800b756 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b35a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b35e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b362:	681a      	ldr	r2, [r3, #0]
 800b364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b368:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	009b      	lsls	r3, r3, #2
 800b372:	4413      	add	r3, r2
 800b374:	881b      	ldrh	r3, [r3, #0]
 800b376:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b37a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b37e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b382:	2b00      	cmp	r3, #0
 800b384:	d005      	beq.n	800b392 <USB_EPStartXfer+0x1228>
 800b386:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b38a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d10d      	bne.n	800b3ae <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b392:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	f040 81db 	bne.w	800b756 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b3a0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b3a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	f040 81d4 	bne.w	800b756 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b3ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	009b      	lsls	r3, r3, #2
 800b3c6:	4413      	add	r3, r2
 800b3c8:	881b      	ldrh	r3, [r3, #0]
 800b3ca:	b29b      	uxth	r3, r3
 800b3cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3d4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800b3d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3e0:	681a      	ldr	r2, [r3, #0]
 800b3e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	009b      	lsls	r3, r3, #2
 800b3f0:	441a      	add	r2, r3
 800b3f2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b3f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b402:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b406:	b29b      	uxth	r3, r3
 800b408:	8013      	strh	r3, [r2, #0]
 800b40a:	e1a4      	b.n	800b756 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b40c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	78db      	ldrb	r3, [r3, #3]
 800b418:	2b01      	cmp	r3, #1
 800b41a:	f040 819a 	bne.w	800b752 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b41e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	699a      	ldr	r2, [r3, #24]
 800b42a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b42e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	691b      	ldr	r3, [r3, #16]
 800b436:	429a      	cmp	r2, r3
 800b438:	d917      	bls.n	800b46a <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800b43a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b43e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	691b      	ldr	r3, [r3, #16]
 800b446:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800b44a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b44e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	699a      	ldr	r2, [r3, #24]
 800b456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b45a:	1ad2      	subs	r2, r2, r3
 800b45c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	619a      	str	r2, [r3, #24]
 800b468:	e00e      	b.n	800b488 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800b46a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b46e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	699b      	ldr	r3, [r3, #24]
 800b476:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800b47a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b47e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	2200      	movs	r2, #0
 800b486:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b48c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	785b      	ldrb	r3, [r3, #1]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d178      	bne.n	800b58a <USB_EPStartXfer+0x1420>
 800b498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b49c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b4a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4b4:	b29b      	uxth	r3, r3
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b4bc:	4413      	add	r3, r2
 800b4be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b4c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	781b      	ldrb	r3, [r3, #0]
 800b4ce:	00da      	lsls	r2, r3, #3
 800b4d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b4d4:	4413      	add	r3, r2
 800b4d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b4da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b4de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4e2:	2b3e      	cmp	r3, #62	; 0x3e
 800b4e4:	d91d      	bls.n	800b522 <USB_EPStartXfer+0x13b8>
 800b4e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ea:	095b      	lsrs	r3, r3, #5
 800b4ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b4f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4f4:	f003 031f 	and.w	r3, r3, #31
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d104      	bne.n	800b506 <USB_EPStartXfer+0x139c>
 800b4fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b500:	3b01      	subs	r3, #1
 800b502:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b50a:	b29b      	uxth	r3, r3
 800b50c:	029b      	lsls	r3, r3, #10
 800b50e:	b29b      	uxth	r3, r3
 800b510:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b514:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b518:	b29a      	uxth	r2, r3
 800b51a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b51e:	801a      	strh	r2, [r3, #0]
 800b520:	e064      	b.n	800b5ec <USB_EPStartXfer+0x1482>
 800b522:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b526:	2b00      	cmp	r3, #0
 800b528:	d116      	bne.n	800b558 <USB_EPStartXfer+0x13ee>
 800b52a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b52e:	881b      	ldrh	r3, [r3, #0]
 800b530:	b29b      	uxth	r3, r3
 800b532:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b536:	b29a      	uxth	r2, r3
 800b538:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b53c:	801a      	strh	r2, [r3, #0]
 800b53e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b542:	881b      	ldrh	r3, [r3, #0]
 800b544:	b29b      	uxth	r3, r3
 800b546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b54a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b54e:	b29a      	uxth	r2, r3
 800b550:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b554:	801a      	strh	r2, [r3, #0]
 800b556:	e049      	b.n	800b5ec <USB_EPStartXfer+0x1482>
 800b558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b55c:	085b      	lsrs	r3, r3, #1
 800b55e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b562:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b566:	f003 0301 	and.w	r3, r3, #1
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d004      	beq.n	800b578 <USB_EPStartXfer+0x140e>
 800b56e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b572:	3301      	adds	r3, #1
 800b574:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b578:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b57c:	b29b      	uxth	r3, r3
 800b57e:	029b      	lsls	r3, r3, #10
 800b580:	b29a      	uxth	r2, r3
 800b582:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b586:	801a      	strh	r2, [r3, #0]
 800b588:	e030      	b.n	800b5ec <USB_EPStartXfer+0x1482>
 800b58a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b58e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	785b      	ldrb	r3, [r3, #1]
 800b596:	2b01      	cmp	r3, #1
 800b598:	d128      	bne.n	800b5ec <USB_EPStartXfer+0x1482>
 800b59a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b59e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b5a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5b6:	b29b      	uxth	r3, r3
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b5be:	4413      	add	r3, r2
 800b5c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b5c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	00da      	lsls	r2, r3, #3
 800b5d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b5d6:	4413      	add	r3, r2
 800b5d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b5dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b5e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5e4:	b29a      	uxth	r2, r3
 800b5e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b5ea:	801a      	strh	r2, [r3, #0]
 800b5ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b5fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	785b      	ldrb	r3, [r3, #1]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d178      	bne.n	800b6fc <USB_EPStartXfer+0x1592>
 800b60a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b60e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b61c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b626:	b29b      	uxth	r3, r3
 800b628:	461a      	mov	r2, r3
 800b62a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b62e:	4413      	add	r3, r2
 800b630:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b638:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	00da      	lsls	r2, r3, #3
 800b642:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b646:	4413      	add	r3, r2
 800b648:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b64c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b654:	2b3e      	cmp	r3, #62	; 0x3e
 800b656:	d91d      	bls.n	800b694 <USB_EPStartXfer+0x152a>
 800b658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b65c:	095b      	lsrs	r3, r3, #5
 800b65e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b662:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b666:	f003 031f 	and.w	r3, r3, #31
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d104      	bne.n	800b678 <USB_EPStartXfer+0x150e>
 800b66e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b672:	3b01      	subs	r3, #1
 800b674:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b678:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	029b      	lsls	r3, r3, #10
 800b680:	b29b      	uxth	r3, r3
 800b682:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b686:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b68a:	b29a      	uxth	r2, r3
 800b68c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b690:	801a      	strh	r2, [r3, #0]
 800b692:	e060      	b.n	800b756 <USB_EPStartXfer+0x15ec>
 800b694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d116      	bne.n	800b6ca <USB_EPStartXfer+0x1560>
 800b69c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b6a0:	881b      	ldrh	r3, [r3, #0]
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b6a8:	b29a      	uxth	r2, r3
 800b6aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b6ae:	801a      	strh	r2, [r3, #0]
 800b6b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b6b4:	881b      	ldrh	r3, [r3, #0]
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6c0:	b29a      	uxth	r2, r3
 800b6c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b6c6:	801a      	strh	r2, [r3, #0]
 800b6c8:	e045      	b.n	800b756 <USB_EPStartXfer+0x15ec>
 800b6ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6ce:	085b      	lsrs	r3, r3, #1
 800b6d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b6d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6d8:	f003 0301 	and.w	r3, r3, #1
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d004      	beq.n	800b6ea <USB_EPStartXfer+0x1580>
 800b6e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6e4:	3301      	adds	r3, #1
 800b6e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b6ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6ee:	b29b      	uxth	r3, r3
 800b6f0:	029b      	lsls	r3, r3, #10
 800b6f2:	b29a      	uxth	r2, r3
 800b6f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b6f8:	801a      	strh	r2, [r3, #0]
 800b6fa:	e02c      	b.n	800b756 <USB_EPStartXfer+0x15ec>
 800b6fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	785b      	ldrb	r3, [r3, #1]
 800b708:	2b01      	cmp	r3, #1
 800b70a:	d124      	bne.n	800b756 <USB_EPStartXfer+0x15ec>
 800b70c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b710:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	461a      	mov	r2, r3
 800b71e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b722:	4413      	add	r3, r2
 800b724:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b72c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	781b      	ldrb	r3, [r3, #0]
 800b734:	00da      	lsls	r2, r3, #3
 800b736:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b73a:	4413      	add	r3, r2
 800b73c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b740:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b744:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b748:	b29a      	uxth	r2, r3
 800b74a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b74e:	801a      	strh	r2, [r3, #0]
 800b750:	e001      	b.n	800b756 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800b752:	2301      	movs	r3, #1
 800b754:	e03a      	b.n	800b7cc <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b75a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b75e:	681a      	ldr	r2, [r3, #0]
 800b760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	781b      	ldrb	r3, [r3, #0]
 800b76c:	009b      	lsls	r3, r3, #2
 800b76e:	4413      	add	r3, r2
 800b770:	881b      	ldrh	r3, [r3, #0]
 800b772:	b29b      	uxth	r3, r3
 800b774:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b77c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b780:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b784:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b788:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b78c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b790:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b794:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b79c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7a0:	681a      	ldr	r2, [r3, #0]
 800b7a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	009b      	lsls	r3, r3, #2
 800b7b0:	441a      	add	r2, r3
 800b7b2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b7b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b7ca:	2300      	movs	r3, #0
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}

0800b7d6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b7d6:	b480      	push	{r7}
 800b7d8:	b085      	sub	sp, #20
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
 800b7de:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	785b      	ldrb	r3, [r3, #1]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d020      	beq.n	800b82a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b7e8:	687a      	ldr	r2, [r7, #4]
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	009b      	lsls	r3, r3, #2
 800b7f0:	4413      	add	r3, r2
 800b7f2:	881b      	ldrh	r3, [r3, #0]
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7fe:	81bb      	strh	r3, [r7, #12]
 800b800:	89bb      	ldrh	r3, [r7, #12]
 800b802:	f083 0310 	eor.w	r3, r3, #16
 800b806:	81bb      	strh	r3, [r7, #12]
 800b808:	687a      	ldr	r2, [r7, #4]
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	009b      	lsls	r3, r3, #2
 800b810:	441a      	add	r2, r3
 800b812:	89bb      	ldrh	r3, [r7, #12]
 800b814:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b818:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b81c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b824:	b29b      	uxth	r3, r3
 800b826:	8013      	strh	r3, [r2, #0]
 800b828:	e01f      	b.n	800b86a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b82a:	687a      	ldr	r2, [r7, #4]
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	781b      	ldrb	r3, [r3, #0]
 800b830:	009b      	lsls	r3, r3, #2
 800b832:	4413      	add	r3, r2
 800b834:	881b      	ldrh	r3, [r3, #0]
 800b836:	b29b      	uxth	r3, r3
 800b838:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b83c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b840:	81fb      	strh	r3, [r7, #14]
 800b842:	89fb      	ldrh	r3, [r7, #14]
 800b844:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b848:	81fb      	strh	r3, [r7, #14]
 800b84a:	687a      	ldr	r2, [r7, #4]
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	009b      	lsls	r3, r3, #2
 800b852:	441a      	add	r2, r3
 800b854:	89fb      	ldrh	r3, [r7, #14]
 800b856:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b85a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b85e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b866:	b29b      	uxth	r3, r3
 800b868:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b86a:	2300      	movs	r3, #0
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3714      	adds	r7, #20
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr

0800b878 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b878:	b480      	push	{r7}
 800b87a:	b087      	sub	sp, #28
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	7b1b      	ldrb	r3, [r3, #12]
 800b886:	2b00      	cmp	r3, #0
 800b888:	f040 809d 	bne.w	800b9c6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	785b      	ldrb	r3, [r3, #1]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d04c      	beq.n	800b92e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	009b      	lsls	r3, r3, #2
 800b89c:	4413      	add	r3, r2
 800b89e:	881b      	ldrh	r3, [r3, #0]
 800b8a0:	823b      	strh	r3, [r7, #16]
 800b8a2:	8a3b      	ldrh	r3, [r7, #16]
 800b8a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d01b      	beq.n	800b8e4 <USB_EPClearStall+0x6c>
 800b8ac:	687a      	ldr	r2, [r7, #4]
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	009b      	lsls	r3, r3, #2
 800b8b4:	4413      	add	r3, r2
 800b8b6:	881b      	ldrh	r3, [r3, #0]
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8c2:	81fb      	strh	r3, [r7, #14]
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	009b      	lsls	r3, r3, #2
 800b8cc:	441a      	add	r2, r3
 800b8ce:	89fb      	ldrh	r3, [r7, #14]
 800b8d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b8d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b8d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b8dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	78db      	ldrb	r3, [r3, #3]
 800b8e8:	2b01      	cmp	r3, #1
 800b8ea:	d06c      	beq.n	800b9c6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b8ec:	687a      	ldr	r2, [r7, #4]
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	4413      	add	r3, r2
 800b8f6:	881b      	ldrh	r3, [r3, #0]
 800b8f8:	b29b      	uxth	r3, r3
 800b8fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b902:	81bb      	strh	r3, [r7, #12]
 800b904:	89bb      	ldrh	r3, [r7, #12]
 800b906:	f083 0320 	eor.w	r3, r3, #32
 800b90a:	81bb      	strh	r3, [r7, #12]
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	781b      	ldrb	r3, [r3, #0]
 800b912:	009b      	lsls	r3, r3, #2
 800b914:	441a      	add	r2, r3
 800b916:	89bb      	ldrh	r3, [r7, #12]
 800b918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b91c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b928:	b29b      	uxth	r3, r3
 800b92a:	8013      	strh	r3, [r2, #0]
 800b92c:	e04b      	b.n	800b9c6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b92e:	687a      	ldr	r2, [r7, #4]
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	781b      	ldrb	r3, [r3, #0]
 800b934:	009b      	lsls	r3, r3, #2
 800b936:	4413      	add	r3, r2
 800b938:	881b      	ldrh	r3, [r3, #0]
 800b93a:	82fb      	strh	r3, [r7, #22]
 800b93c:	8afb      	ldrh	r3, [r7, #22]
 800b93e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b942:	2b00      	cmp	r3, #0
 800b944:	d01b      	beq.n	800b97e <USB_EPClearStall+0x106>
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	009b      	lsls	r3, r3, #2
 800b94e:	4413      	add	r3, r2
 800b950:	881b      	ldrh	r3, [r3, #0]
 800b952:	b29b      	uxth	r3, r3
 800b954:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b95c:	82bb      	strh	r3, [r7, #20]
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	009b      	lsls	r3, r3, #2
 800b966:	441a      	add	r2, r3
 800b968:	8abb      	ldrh	r3, [r7, #20]
 800b96a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b96e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b972:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b97e:	687a      	ldr	r2, [r7, #4]
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	781b      	ldrb	r3, [r3, #0]
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	4413      	add	r3, r2
 800b988:	881b      	ldrh	r3, [r3, #0]
 800b98a:	b29b      	uxth	r3, r3
 800b98c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b994:	827b      	strh	r3, [r7, #18]
 800b996:	8a7b      	ldrh	r3, [r7, #18]
 800b998:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b99c:	827b      	strh	r3, [r7, #18]
 800b99e:	8a7b      	ldrh	r3, [r7, #18]
 800b9a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b9a4:	827b      	strh	r3, [r7, #18]
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	781b      	ldrb	r3, [r3, #0]
 800b9ac:	009b      	lsls	r3, r3, #2
 800b9ae:	441a      	add	r2, r3
 800b9b0:	8a7b      	ldrh	r3, [r7, #18]
 800b9b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b9b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b9ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9c2:	b29b      	uxth	r3, r3
 800b9c4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b9c6:	2300      	movs	r3, #0
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	371c      	adds	r7, #28
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b083      	sub	sp, #12
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	460b      	mov	r3, r1
 800b9de:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b9e0:	78fb      	ldrb	r3, [r7, #3]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d103      	bne.n	800b9ee <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2280      	movs	r2, #128	; 0x80
 800b9ea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b9ee:	2300      	movs	r3, #0
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	370c      	adds	r7, #12
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr

0800b9fc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b083      	sub	sp, #12
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ba0a:	b29b      	uxth	r3, r3
 800ba0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba14:	b29a      	uxth	r2, r3
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800ba1c:	2300      	movs	r3, #0
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	370c      	adds	r7, #12
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr

0800ba2a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800ba2a:	b480      	push	{r7}
 800ba2c:	b085      	sub	sp, #20
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3714      	adds	r7, #20
 800ba42:	46bd      	mov	sp, r7
 800ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba48:	4770      	bx	lr

0800ba4a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ba4a:	b480      	push	{r7}
 800ba4c:	b08d      	sub	sp, #52	; 0x34
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	60f8      	str	r0, [r7, #12]
 800ba52:	60b9      	str	r1, [r7, #8]
 800ba54:	4611      	mov	r1, r2
 800ba56:	461a      	mov	r2, r3
 800ba58:	460b      	mov	r3, r1
 800ba5a:	80fb      	strh	r3, [r7, #6]
 800ba5c:	4613      	mov	r3, r2
 800ba5e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ba60:	88bb      	ldrh	r3, [r7, #4]
 800ba62:	3301      	adds	r3, #1
 800ba64:	085b      	lsrs	r3, r3, #1
 800ba66:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ba70:	88fa      	ldrh	r2, [r7, #6]
 800ba72:	69fb      	ldr	r3, [r7, #28]
 800ba74:	4413      	add	r3, r2
 800ba76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba7a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800ba7c:	6a3b      	ldr	r3, [r7, #32]
 800ba7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba80:	e01b      	b.n	800baba <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800ba82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba84:	781b      	ldrb	r3, [r3, #0]
 800ba86:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800ba88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800ba8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	b29b      	uxth	r3, r3
 800ba94:	021b      	lsls	r3, r3, #8
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	461a      	mov	r2, r3
 800ba9a:	69bb      	ldr	r3, [r7, #24]
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	b29a      	uxth	r2, r3
 800baa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800baa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baaa:	3302      	adds	r3, #2
 800baac:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800baae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab0:	3301      	adds	r3, #1
 800bab2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800bab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab6:	3b01      	subs	r3, #1
 800bab8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800baba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800babc:	2b00      	cmp	r3, #0
 800babe:	d1e0      	bne.n	800ba82 <USB_WritePMA+0x38>
  }
}
 800bac0:	bf00      	nop
 800bac2:	bf00      	nop
 800bac4:	3734      	adds	r7, #52	; 0x34
 800bac6:	46bd      	mov	sp, r7
 800bac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bacc:	4770      	bx	lr

0800bace <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bace:	b480      	push	{r7}
 800bad0:	b08b      	sub	sp, #44	; 0x2c
 800bad2:	af00      	add	r7, sp, #0
 800bad4:	60f8      	str	r0, [r7, #12]
 800bad6:	60b9      	str	r1, [r7, #8]
 800bad8:	4611      	mov	r1, r2
 800bada:	461a      	mov	r2, r3
 800badc:	460b      	mov	r3, r1
 800bade:	80fb      	strh	r3, [r7, #6]
 800bae0:	4613      	mov	r3, r2
 800bae2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bae4:	88bb      	ldrh	r3, [r7, #4]
 800bae6:	085b      	lsrs	r3, r3, #1
 800bae8:	b29b      	uxth	r3, r3
 800baea:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800baf4:	88fa      	ldrh	r2, [r7, #6]
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	4413      	add	r3, r2
 800bafa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bafe:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800bb00:	69bb      	ldr	r3, [r7, #24]
 800bb02:	627b      	str	r3, [r7, #36]	; 0x24
 800bb04:	e018      	b.n	800bb38 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800bb06:	6a3b      	ldr	r3, [r7, #32]
 800bb08:	881b      	ldrh	r3, [r3, #0]
 800bb0a:	b29b      	uxth	r3, r3
 800bb0c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800bb0e:	6a3b      	ldr	r3, [r7, #32]
 800bb10:	3302      	adds	r3, #2
 800bb12:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	b2da      	uxtb	r2, r3
 800bb18:	69fb      	ldr	r3, [r7, #28]
 800bb1a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bb1c:	69fb      	ldr	r3, [r7, #28]
 800bb1e:	3301      	adds	r3, #1
 800bb20:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	0a1b      	lsrs	r3, r3, #8
 800bb26:	b2da      	uxtb	r2, r3
 800bb28:	69fb      	ldr	r3, [r7, #28]
 800bb2a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	3301      	adds	r3, #1
 800bb30:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800bb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb34:	3b01      	subs	r3, #1
 800bb36:	627b      	str	r3, [r7, #36]	; 0x24
 800bb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d1e3      	bne.n	800bb06 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800bb3e:	88bb      	ldrh	r3, [r7, #4]
 800bb40:	f003 0301 	and.w	r3, r3, #1
 800bb44:	b29b      	uxth	r3, r3
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d007      	beq.n	800bb5a <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800bb4a:	6a3b      	ldr	r3, [r7, #32]
 800bb4c:	881b      	ldrh	r3, [r3, #0]
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	b2da      	uxtb	r2, r3
 800bb56:	69fb      	ldr	r3, [r7, #28]
 800bb58:	701a      	strb	r2, [r3, #0]
  }
}
 800bb5a:	bf00      	nop
 800bb5c:	372c      	adds	r7, #44	; 0x2c
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr

0800bb66 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b084      	sub	sp, #16
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
 800bb6e:	460b      	mov	r3, r1
 800bb70:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bb72:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bb76:	f002 f933 	bl	800dde0 <USBD_static_malloc>
 800bb7a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d105      	bne.n	800bb8e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2200      	movs	r2, #0
 800bb86:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800bb8a:	2302      	movs	r3, #2
 800bb8c:	e066      	b.n	800bc5c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	68fa      	ldr	r2, [r7, #12]
 800bb92:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	7c1b      	ldrb	r3, [r3, #16]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d119      	bne.n	800bbd2 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bb9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bba2:	2202      	movs	r2, #2
 800bba4:	2181      	movs	r1, #129	; 0x81
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f001 ffbf 	bl	800db2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2201      	movs	r2, #1
 800bbb0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bbb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbb6:	2202      	movs	r2, #2
 800bbb8:	2101      	movs	r1, #1
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f001 ffb5 	bl	800db2a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2210      	movs	r2, #16
 800bbcc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800bbd0:	e016      	b.n	800bc00 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bbd2:	2340      	movs	r3, #64	; 0x40
 800bbd4:	2202      	movs	r2, #2
 800bbd6:	2181      	movs	r1, #129	; 0x81
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f001 ffa6 	bl	800db2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bbe4:	2340      	movs	r3, #64	; 0x40
 800bbe6:	2202      	movs	r2, #2
 800bbe8:	2101      	movs	r1, #1
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f001 ff9d 	bl	800db2a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2210      	movs	r2, #16
 800bbfc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bc00:	2308      	movs	r3, #8
 800bc02:	2203      	movs	r2, #3
 800bc04:	2182      	movs	r1, #130	; 0x82
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f001 ff8f 	bl	800db2a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2201      	movs	r2, #1
 800bc10:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2200      	movs	r2, #0
 800bc22:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	7c1b      	ldrb	r3, [r3, #16]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d109      	bne.n	800bc4a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc40:	2101      	movs	r1, #1
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f002 f861 	bl	800dd0a <USBD_LL_PrepareReceive>
 800bc48:	e007      	b.n	800bc5a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bc50:	2340      	movs	r3, #64	; 0x40
 800bc52:	2101      	movs	r1, #1
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f002 f858 	bl	800dd0a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bc5a:	2300      	movs	r3, #0
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3710      	adds	r7, #16
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b082      	sub	sp, #8
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bc70:	2181      	movs	r1, #129	; 0x81
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f001 ff7f 	bl	800db76 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bc7e:	2101      	movs	r1, #1
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f001 ff78 	bl	800db76 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bc8e:	2182      	movs	r1, #130	; 0x82
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f001 ff70 	bl	800db76 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2200      	movs	r2, #0
 800bca2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d00e      	beq.n	800bcce <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcb6:	685b      	ldr	r3, [r3, #4]
 800bcb8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f002 f89b 	bl	800ddfc <USBD_static_free>
    pdev->pClassData = NULL;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bcce:	2300      	movs	r3, #0
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3708      	adds	r7, #8
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b086      	sub	sp, #24
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bce8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bcea:	2300      	movs	r3, #0
 800bcec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d101      	bne.n	800bd00 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800bcfc:	2303      	movs	r3, #3
 800bcfe:	e0af      	b.n	800be60 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d03f      	beq.n	800bd8c <USBD_CDC_Setup+0xb4>
 800bd0c:	2b20      	cmp	r3, #32
 800bd0e:	f040 809f 	bne.w	800be50 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	88db      	ldrh	r3, [r3, #6]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d02e      	beq.n	800bd78 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	b25b      	sxtb	r3, r3
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	da16      	bge.n	800bd52 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd2a:	689b      	ldr	r3, [r3, #8]
 800bd2c:	683a      	ldr	r2, [r7, #0]
 800bd2e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800bd30:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd32:	683a      	ldr	r2, [r7, #0]
 800bd34:	88d2      	ldrh	r2, [r2, #6]
 800bd36:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	88db      	ldrh	r3, [r3, #6]
 800bd3c:	2b07      	cmp	r3, #7
 800bd3e:	bf28      	it	cs
 800bd40:	2307      	movcs	r3, #7
 800bd42:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	89fa      	ldrh	r2, [r7, #14]
 800bd48:	4619      	mov	r1, r3
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f001 faeb 	bl	800d326 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800bd50:	e085      	b.n	800be5e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	785a      	ldrb	r2, [r3, #1]
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	88db      	ldrh	r3, [r3, #6]
 800bd60:	b2da      	uxtb	r2, r3
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800bd68:	6939      	ldr	r1, [r7, #16]
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	88db      	ldrh	r3, [r3, #6]
 800bd6e:	461a      	mov	r2, r3
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f001 fb04 	bl	800d37e <USBD_CtlPrepareRx>
      break;
 800bd76:	e072      	b.n	800be5e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd7e:	689b      	ldr	r3, [r3, #8]
 800bd80:	683a      	ldr	r2, [r7, #0]
 800bd82:	7850      	ldrb	r0, [r2, #1]
 800bd84:	2200      	movs	r2, #0
 800bd86:	6839      	ldr	r1, [r7, #0]
 800bd88:	4798      	blx	r3
      break;
 800bd8a:	e068      	b.n	800be5e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	785b      	ldrb	r3, [r3, #1]
 800bd90:	2b0b      	cmp	r3, #11
 800bd92:	d852      	bhi.n	800be3a <USBD_CDC_Setup+0x162>
 800bd94:	a201      	add	r2, pc, #4	; (adr r2, 800bd9c <USBD_CDC_Setup+0xc4>)
 800bd96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd9a:	bf00      	nop
 800bd9c:	0800bdcd 	.word	0x0800bdcd
 800bda0:	0800be49 	.word	0x0800be49
 800bda4:	0800be3b 	.word	0x0800be3b
 800bda8:	0800be3b 	.word	0x0800be3b
 800bdac:	0800be3b 	.word	0x0800be3b
 800bdb0:	0800be3b 	.word	0x0800be3b
 800bdb4:	0800be3b 	.word	0x0800be3b
 800bdb8:	0800be3b 	.word	0x0800be3b
 800bdbc:	0800be3b 	.word	0x0800be3b
 800bdc0:	0800be3b 	.word	0x0800be3b
 800bdc4:	0800bdf7 	.word	0x0800bdf7
 800bdc8:	0800be21 	.word	0x0800be21
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdd2:	b2db      	uxtb	r3, r3
 800bdd4:	2b03      	cmp	r3, #3
 800bdd6:	d107      	bne.n	800bde8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bdd8:	f107 030a 	add.w	r3, r7, #10
 800bddc:	2202      	movs	r2, #2
 800bdde:	4619      	mov	r1, r3
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f001 faa0 	bl	800d326 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bde6:	e032      	b.n	800be4e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bde8:	6839      	ldr	r1, [r7, #0]
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f001 fa2a 	bl	800d244 <USBD_CtlError>
            ret = USBD_FAIL;
 800bdf0:	2303      	movs	r3, #3
 800bdf2:	75fb      	strb	r3, [r7, #23]
          break;
 800bdf4:	e02b      	b.n	800be4e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdfc:	b2db      	uxtb	r3, r3
 800bdfe:	2b03      	cmp	r3, #3
 800be00:	d107      	bne.n	800be12 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800be02:	f107 030d 	add.w	r3, r7, #13
 800be06:	2201      	movs	r2, #1
 800be08:	4619      	mov	r1, r3
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f001 fa8b 	bl	800d326 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800be10:	e01d      	b.n	800be4e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800be12:	6839      	ldr	r1, [r7, #0]
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f001 fa15 	bl	800d244 <USBD_CtlError>
            ret = USBD_FAIL;
 800be1a:	2303      	movs	r3, #3
 800be1c:	75fb      	strb	r3, [r7, #23]
          break;
 800be1e:	e016      	b.n	800be4e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be26:	b2db      	uxtb	r3, r3
 800be28:	2b03      	cmp	r3, #3
 800be2a:	d00f      	beq.n	800be4c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800be2c:	6839      	ldr	r1, [r7, #0]
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f001 fa08 	bl	800d244 <USBD_CtlError>
            ret = USBD_FAIL;
 800be34:	2303      	movs	r3, #3
 800be36:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800be38:	e008      	b.n	800be4c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800be3a:	6839      	ldr	r1, [r7, #0]
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f001 fa01 	bl	800d244 <USBD_CtlError>
          ret = USBD_FAIL;
 800be42:	2303      	movs	r3, #3
 800be44:	75fb      	strb	r3, [r7, #23]
          break;
 800be46:	e002      	b.n	800be4e <USBD_CDC_Setup+0x176>
          break;
 800be48:	bf00      	nop
 800be4a:	e008      	b.n	800be5e <USBD_CDC_Setup+0x186>
          break;
 800be4c:	bf00      	nop
      }
      break;
 800be4e:	e006      	b.n	800be5e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800be50:	6839      	ldr	r1, [r7, #0]
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f001 f9f6 	bl	800d244 <USBD_CtlError>
      ret = USBD_FAIL;
 800be58:	2303      	movs	r3, #3
 800be5a:	75fb      	strb	r3, [r7, #23]
      break;
 800be5c:	bf00      	nop
  }

  return (uint8_t)ret;
 800be5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800be60:	4618      	mov	r0, r3
 800be62:	3718      	adds	r7, #24
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b084      	sub	sp, #16
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	460b      	mov	r3, r1
 800be72:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800be7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be82:	2b00      	cmp	r3, #0
 800be84:	d101      	bne.n	800be8a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800be86:	2303      	movs	r3, #3
 800be88:	e04f      	b.n	800bf2a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be90:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800be92:	78fa      	ldrb	r2, [r7, #3]
 800be94:	6879      	ldr	r1, [r7, #4]
 800be96:	4613      	mov	r3, r2
 800be98:	009b      	lsls	r3, r3, #2
 800be9a:	4413      	add	r3, r2
 800be9c:	009b      	lsls	r3, r3, #2
 800be9e:	440b      	add	r3, r1
 800bea0:	3318      	adds	r3, #24
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d029      	beq.n	800befc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bea8:	78fa      	ldrb	r2, [r7, #3]
 800beaa:	6879      	ldr	r1, [r7, #4]
 800beac:	4613      	mov	r3, r2
 800beae:	009b      	lsls	r3, r3, #2
 800beb0:	4413      	add	r3, r2
 800beb2:	009b      	lsls	r3, r3, #2
 800beb4:	440b      	add	r3, r1
 800beb6:	3318      	adds	r3, #24
 800beb8:	681a      	ldr	r2, [r3, #0]
 800beba:	78f9      	ldrb	r1, [r7, #3]
 800bebc:	68f8      	ldr	r0, [r7, #12]
 800bebe:	460b      	mov	r3, r1
 800bec0:	009b      	lsls	r3, r3, #2
 800bec2:	440b      	add	r3, r1
 800bec4:	00db      	lsls	r3, r3, #3
 800bec6:	4403      	add	r3, r0
 800bec8:	3338      	adds	r3, #56	; 0x38
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	fbb2 f1f3 	udiv	r1, r2, r3
 800bed0:	fb01 f303 	mul.w	r3, r1, r3
 800bed4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d110      	bne.n	800befc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800beda:	78fa      	ldrb	r2, [r7, #3]
 800bedc:	6879      	ldr	r1, [r7, #4]
 800bede:	4613      	mov	r3, r2
 800bee0:	009b      	lsls	r3, r3, #2
 800bee2:	4413      	add	r3, r2
 800bee4:	009b      	lsls	r3, r3, #2
 800bee6:	440b      	add	r3, r1
 800bee8:	3318      	adds	r3, #24
 800beea:	2200      	movs	r2, #0
 800beec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800beee:	78f9      	ldrb	r1, [r7, #3]
 800bef0:	2300      	movs	r3, #0
 800bef2:	2200      	movs	r2, #0
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f001 fee7 	bl	800dcc8 <USBD_LL_Transmit>
 800befa:	e015      	b.n	800bf28 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	2200      	movs	r2, #0
 800bf00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf0a:	691b      	ldr	r3, [r3, #16]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d00b      	beq.n	800bf28 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf16:	691b      	ldr	r3, [r3, #16]
 800bf18:	68ba      	ldr	r2, [r7, #8]
 800bf1a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bf1e:	68ba      	ldr	r2, [r7, #8]
 800bf20:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bf24:	78fa      	ldrb	r2, [r7, #3]
 800bf26:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bf28:	2300      	movs	r3, #0
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3710      	adds	r7, #16
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}

0800bf32 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bf32:	b580      	push	{r7, lr}
 800bf34:	b084      	sub	sp, #16
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	6078      	str	r0, [r7, #4]
 800bf3a:	460b      	mov	r3, r1
 800bf3c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf44:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d101      	bne.n	800bf54 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bf50:	2303      	movs	r3, #3
 800bf52:	e015      	b.n	800bf80 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bf54:	78fb      	ldrb	r3, [r7, #3]
 800bf56:	4619      	mov	r1, r3
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f001 fef7 	bl	800dd4c <USBD_LL_GetRxDataSize>
 800bf5e:	4602      	mov	r2, r0
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf6c:	68db      	ldr	r3, [r3, #12]
 800bf6e:	68fa      	ldr	r2, [r7, #12]
 800bf70:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bf74:	68fa      	ldr	r2, [r7, #12]
 800bf76:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bf7a:	4611      	mov	r1, r2
 800bf7c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bf7e:	2300      	movs	r3, #0
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3710      	adds	r7, #16
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}

0800bf88 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b084      	sub	sp, #16
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf96:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d101      	bne.n	800bfa2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800bf9e:	2303      	movs	r3, #3
 800bfa0:	e01b      	b.n	800bfda <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d015      	beq.n	800bfd8 <USBD_CDC_EP0_RxReady+0x50>
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bfb2:	2bff      	cmp	r3, #255	; 0xff
 800bfb4:	d010      	beq.n	800bfd8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bfbc:	689b      	ldr	r3, [r3, #8]
 800bfbe:	68fa      	ldr	r2, [r7, #12]
 800bfc0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800bfc4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800bfc6:	68fa      	ldr	r2, [r7, #12]
 800bfc8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bfcc:	b292      	uxth	r2, r2
 800bfce:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	22ff      	movs	r2, #255	; 0xff
 800bfd4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800bfd8:	2300      	movs	r3, #0
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3710      	adds	r7, #16
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
	...

0800bfe4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b083      	sub	sp, #12
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2243      	movs	r2, #67	; 0x43
 800bff0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800bff2:	4b03      	ldr	r3, [pc, #12]	; (800c000 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	370c      	adds	r7, #12
 800bff8:	46bd      	mov	sp, r7
 800bffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffe:	4770      	bx	lr
 800c000:	20002768 	.word	0x20002768

0800c004 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c004:	b480      	push	{r7}
 800c006:	b083      	sub	sp, #12
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2243      	movs	r2, #67	; 0x43
 800c010:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c012:	4b03      	ldr	r3, [pc, #12]	; (800c020 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c014:	4618      	mov	r0, r3
 800c016:	370c      	adds	r7, #12
 800c018:	46bd      	mov	sp, r7
 800c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01e:	4770      	bx	lr
 800c020:	20002724 	.word	0x20002724

0800c024 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c024:	b480      	push	{r7}
 800c026:	b083      	sub	sp, #12
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2243      	movs	r2, #67	; 0x43
 800c030:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c032:	4b03      	ldr	r3, [pc, #12]	; (800c040 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c034:	4618      	mov	r0, r3
 800c036:	370c      	adds	r7, #12
 800c038:	46bd      	mov	sp, r7
 800c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03e:	4770      	bx	lr
 800c040:	200027ac 	.word	0x200027ac

0800c044 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c044:	b480      	push	{r7}
 800c046:	b083      	sub	sp, #12
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	220a      	movs	r2, #10
 800c050:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c052:	4b03      	ldr	r3, [pc, #12]	; (800c060 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c054:	4618      	mov	r0, r3
 800c056:	370c      	adds	r7, #12
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr
 800c060:	200026e0 	.word	0x200026e0

0800c064 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c064:	b480      	push	{r7}
 800c066:	b083      	sub	sp, #12
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d101      	bne.n	800c078 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c074:	2303      	movs	r3, #3
 800c076:	e004      	b.n	800c082 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	683a      	ldr	r2, [r7, #0]
 800c07c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c080:	2300      	movs	r3, #0
}
 800c082:	4618      	mov	r0, r3
 800c084:	370c      	adds	r7, #12
 800c086:	46bd      	mov	sp, r7
 800c088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08c:	4770      	bx	lr

0800c08e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c08e:	b480      	push	{r7}
 800c090:	b087      	sub	sp, #28
 800c092:	af00      	add	r7, sp, #0
 800c094:	60f8      	str	r0, [r7, #12]
 800c096:	60b9      	str	r1, [r7, #8]
 800c098:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0a0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d101      	bne.n	800c0ac <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c0a8:	2303      	movs	r3, #3
 800c0aa:	e008      	b.n	800c0be <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	68ba      	ldr	r2, [r7, #8]
 800c0b0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	687a      	ldr	r2, [r7, #4]
 800c0b8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c0bc:	2300      	movs	r3, #0
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	371c      	adds	r7, #28
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c8:	4770      	bx	lr

0800c0ca <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c0ca:	b480      	push	{r7}
 800c0cc:	b085      	sub	sp, #20
 800c0ce:	af00      	add	r7, sp, #0
 800c0d0:	6078      	str	r0, [r7, #4]
 800c0d2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0da:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d101      	bne.n	800c0e6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c0e2:	2303      	movs	r3, #3
 800c0e4:	e004      	b.n	800c0f0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	683a      	ldr	r2, [r7, #0]
 800c0ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c0ee:	2300      	movs	r3, #0
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3714      	adds	r7, #20
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr

0800c0fc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c10a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c10c:	2301      	movs	r3, #1
 800c10e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c116:	2b00      	cmp	r3, #0
 800c118:	d101      	bne.n	800c11e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c11a:	2303      	movs	r3, #3
 800c11c:	e01a      	b.n	800c154 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c124:	2b00      	cmp	r3, #0
 800c126:	d114      	bne.n	800c152 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	2201      	movs	r2, #1
 800c12c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c146:	2181      	movs	r1, #129	; 0x81
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f001 fdbd 	bl	800dcc8 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c14e:	2300      	movs	r3, #0
 800c150:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c152:	7bfb      	ldrb	r3, [r7, #15]
}
 800c154:	4618      	mov	r0, r3
 800c156:	3710      	adds	r7, #16
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}

0800c15c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b084      	sub	sp, #16
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c16a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c172:	2b00      	cmp	r3, #0
 800c174:	d101      	bne.n	800c17a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c176:	2303      	movs	r3, #3
 800c178:	e016      	b.n	800c1a8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	7c1b      	ldrb	r3, [r3, #16]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d109      	bne.n	800c196 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c188:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c18c:	2101      	movs	r1, #1
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f001 fdbb 	bl	800dd0a <USBD_LL_PrepareReceive>
 800c194:	e007      	b.n	800c1a6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c19c:	2340      	movs	r3, #64	; 0x40
 800c19e:	2101      	movs	r1, #1
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f001 fdb2 	bl	800dd0a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c1a6:	2300      	movs	r3, #0
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3710      	adds	r7, #16
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b086      	sub	sp, #24
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	60f8      	str	r0, [r7, #12]
 800c1b8:	60b9      	str	r1, [r7, #8]
 800c1ba:	4613      	mov	r3, r2
 800c1bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d10a      	bne.n	800c1da <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800c1c4:	4817      	ldr	r0, [pc, #92]	; (800c224 <USBD_Init+0x74>)
 800c1c6:	f002 faff 	bl	800e7c8 <iprintf>
 800c1ca:	4817      	ldr	r0, [pc, #92]	; (800c228 <USBD_Init+0x78>)
 800c1cc:	f002 fafc 	bl	800e7c8 <iprintf>
 800c1d0:	200a      	movs	r0, #10
 800c1d2:	f002 fb11 	bl	800e7f8 <putchar>
#endif
    return USBD_FAIL;
 800c1d6:	2303      	movs	r3, #3
 800c1d8:	e01f      	b.n	800c21a <USBD_Init+0x6a>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d003      	beq.n	800c200 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	68ba      	ldr	r2, [r7, #8]
 800c1fc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2201      	movs	r2, #1
 800c204:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	79fa      	ldrb	r2, [r7, #7]
 800c20c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c20e:	68f8      	ldr	r0, [r7, #12]
 800c210:	f001 fc10 	bl	800da34 <USBD_LL_Init>
 800c214:	4603      	mov	r3, r0
 800c216:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c218:	7dfb      	ldrb	r3, [r7, #23]
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3718      	adds	r7, #24
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
 800c222:	bf00      	nop
 800c224:	08010a6c 	.word	0x08010a6c
 800c228:	08010a74 	.word	0x08010a74

0800c22c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b084      	sub	sp, #16
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c236:	2300      	movs	r3, #0
 800c238:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d10a      	bne.n	800c256 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800c240:	4812      	ldr	r0, [pc, #72]	; (800c28c <USBD_RegisterClass+0x60>)
 800c242:	f002 fac1 	bl	800e7c8 <iprintf>
 800c246:	4812      	ldr	r0, [pc, #72]	; (800c290 <USBD_RegisterClass+0x64>)
 800c248:	f002 fabe 	bl	800e7c8 <iprintf>
 800c24c:	200a      	movs	r0, #10
 800c24e:	f002 fad3 	bl	800e7f8 <putchar>
#endif
    return USBD_FAIL;
 800c252:	2303      	movs	r3, #3
 800c254:	e016      	b.n	800c284 <USBD_RegisterClass+0x58>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	683a      	ldr	r2, [r7, #0]
 800c25a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c266:	2b00      	cmp	r3, #0
 800c268:	d00b      	beq.n	800c282 <USBD_RegisterClass+0x56>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c272:	f107 020e 	add.w	r2, r7, #14
 800c276:	4610      	mov	r0, r2
 800c278:	4798      	blx	r3
 800c27a:	4602      	mov	r2, r0
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c282:	2300      	movs	r3, #0
}
 800c284:	4618      	mov	r0, r3
 800c286:	3710      	adds	r7, #16
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	08010a6c 	.word	0x08010a6c
 800c290:	08010a8c 	.word	0x08010a8c

0800c294 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f001 fc29 	bl	800daf4 <USBD_LL_Start>
 800c2a2:	4603      	mov	r3, r0
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3708      	adds	r7, #8
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}

0800c2ac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b083      	sub	sp, #12
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c2b4:	2300      	movs	r3, #0
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	370c      	adds	r7, #12
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c0:	4770      	bx	lr

0800c2c2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c2c2:	b580      	push	{r7, lr}
 800c2c4:	b084      	sub	sp, #16
 800c2c6:	af00      	add	r7, sp, #0
 800c2c8:	6078      	str	r0, [r7, #4]
 800c2ca:	460b      	mov	r3, r1
 800c2cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c2ce:	2303      	movs	r3, #3
 800c2d0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d009      	beq.n	800c2f0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	78fa      	ldrb	r2, [r7, #3]
 800c2e6:	4611      	mov	r1, r2
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	4798      	blx	r3
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c2f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3710      	adds	r7, #16
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}

0800c2fa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c2fa:	b580      	push	{r7, lr}
 800c2fc:	b082      	sub	sp, #8
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	6078      	str	r0, [r7, #4]
 800c302:	460b      	mov	r3, r1
 800c304:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d007      	beq.n	800c320 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c316:	685b      	ldr	r3, [r3, #4]
 800c318:	78fa      	ldrb	r2, [r7, #3]
 800c31a:	4611      	mov	r1, r2
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	4798      	blx	r3
  }

  return USBD_OK;
 800c320:	2300      	movs	r3, #0
}
 800c322:	4618      	mov	r0, r3
 800c324:	3708      	adds	r7, #8
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}

0800c32a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c32a:	b580      	push	{r7, lr}
 800c32c:	b084      	sub	sp, #16
 800c32e:	af00      	add	r7, sp, #0
 800c330:	6078      	str	r0, [r7, #4]
 800c332:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c33a:	6839      	ldr	r1, [r7, #0]
 800c33c:	4618      	mov	r0, r3
 800c33e:	f000 ff47 	bl	800d1d0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2201      	movs	r2, #1
 800c346:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c350:	461a      	mov	r2, r3
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c35e:	f003 031f 	and.w	r3, r3, #31
 800c362:	2b02      	cmp	r3, #2
 800c364:	d01a      	beq.n	800c39c <USBD_LL_SetupStage+0x72>
 800c366:	2b02      	cmp	r3, #2
 800c368:	d822      	bhi.n	800c3b0 <USBD_LL_SetupStage+0x86>
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d002      	beq.n	800c374 <USBD_LL_SetupStage+0x4a>
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d00a      	beq.n	800c388 <USBD_LL_SetupStage+0x5e>
 800c372:	e01d      	b.n	800c3b0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c37a:	4619      	mov	r1, r3
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f000 f9ef 	bl	800c760 <USBD_StdDevReq>
 800c382:	4603      	mov	r3, r0
 800c384:	73fb      	strb	r3, [r7, #15]
      break;
 800c386:	e020      	b.n	800c3ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c38e:	4619      	mov	r1, r3
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f000 fa53 	bl	800c83c <USBD_StdItfReq>
 800c396:	4603      	mov	r3, r0
 800c398:	73fb      	strb	r3, [r7, #15]
      break;
 800c39a:	e016      	b.n	800c3ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c3a2:	4619      	mov	r1, r3
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f000 fa92 	bl	800c8ce <USBD_StdEPReq>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	73fb      	strb	r3, [r7, #15]
      break;
 800c3ae:	e00c      	b.n	800c3ca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c3b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c3ba:	b2db      	uxtb	r3, r3
 800c3bc:	4619      	mov	r1, r3
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f001 fbf8 	bl	800dbb4 <USBD_LL_StallEP>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	73fb      	strb	r3, [r7, #15]
      break;
 800c3c8:	bf00      	nop
  }

  return ret;
 800c3ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3710      	adds	r7, #16
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}

0800c3d4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b086      	sub	sp, #24
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	60f8      	str	r0, [r7, #12]
 800c3dc:	460b      	mov	r3, r1
 800c3de:	607a      	str	r2, [r7, #4]
 800c3e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c3e2:	7afb      	ldrb	r3, [r7, #11]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d138      	bne.n	800c45a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c3ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c3f6:	2b03      	cmp	r3, #3
 800c3f8:	d14a      	bne.n	800c490 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c3fa:	693b      	ldr	r3, [r7, #16]
 800c3fc:	689a      	ldr	r2, [r3, #8]
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	68db      	ldr	r3, [r3, #12]
 800c402:	429a      	cmp	r2, r3
 800c404:	d913      	bls.n	800c42e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	689a      	ldr	r2, [r3, #8]
 800c40a:	693b      	ldr	r3, [r7, #16]
 800c40c:	68db      	ldr	r3, [r3, #12]
 800c40e:	1ad2      	subs	r2, r2, r3
 800c410:	693b      	ldr	r3, [r7, #16]
 800c412:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c414:	693b      	ldr	r3, [r7, #16]
 800c416:	68da      	ldr	r2, [r3, #12]
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	689b      	ldr	r3, [r3, #8]
 800c41c:	4293      	cmp	r3, r2
 800c41e:	bf28      	it	cs
 800c420:	4613      	movcs	r3, r2
 800c422:	461a      	mov	r2, r3
 800c424:	6879      	ldr	r1, [r7, #4]
 800c426:	68f8      	ldr	r0, [r7, #12]
 800c428:	f000 ffc6 	bl	800d3b8 <USBD_CtlContinueRx>
 800c42c:	e030      	b.n	800c490 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c434:	b2db      	uxtb	r3, r3
 800c436:	2b03      	cmp	r3, #3
 800c438:	d10b      	bne.n	800c452 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c440:	691b      	ldr	r3, [r3, #16]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d005      	beq.n	800c452 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c44c:	691b      	ldr	r3, [r3, #16]
 800c44e:	68f8      	ldr	r0, [r7, #12]
 800c450:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c452:	68f8      	ldr	r0, [r7, #12]
 800c454:	f000 ffc1 	bl	800d3da <USBD_CtlSendStatus>
 800c458:	e01a      	b.n	800c490 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c460:	b2db      	uxtb	r3, r3
 800c462:	2b03      	cmp	r3, #3
 800c464:	d114      	bne.n	800c490 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c46c:	699b      	ldr	r3, [r3, #24]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d00e      	beq.n	800c490 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c478:	699b      	ldr	r3, [r3, #24]
 800c47a:	7afa      	ldrb	r2, [r7, #11]
 800c47c:	4611      	mov	r1, r2
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	4798      	blx	r3
 800c482:	4603      	mov	r3, r0
 800c484:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c486:	7dfb      	ldrb	r3, [r7, #23]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d001      	beq.n	800c490 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c48c:	7dfb      	ldrb	r3, [r7, #23]
 800c48e:	e000      	b.n	800c492 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c490:	2300      	movs	r3, #0
}
 800c492:	4618      	mov	r0, r3
 800c494:	3718      	adds	r7, #24
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}

0800c49a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c49a:	b580      	push	{r7, lr}
 800c49c:	b086      	sub	sp, #24
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	60f8      	str	r0, [r7, #12]
 800c4a2:	460b      	mov	r3, r1
 800c4a4:	607a      	str	r2, [r7, #4]
 800c4a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c4a8:	7afb      	ldrb	r3, [r7, #11]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d16b      	bne.n	800c586 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	3314      	adds	r3, #20
 800c4b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c4ba:	2b02      	cmp	r3, #2
 800c4bc:	d156      	bne.n	800c56c <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	689a      	ldr	r2, [r3, #8]
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	68db      	ldr	r3, [r3, #12]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d914      	bls.n	800c4f4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	689a      	ldr	r2, [r3, #8]
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	68db      	ldr	r3, [r3, #12]
 800c4d2:	1ad2      	subs	r2, r2, r3
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	689b      	ldr	r3, [r3, #8]
 800c4dc:	461a      	mov	r2, r3
 800c4de:	6879      	ldr	r1, [r7, #4]
 800c4e0:	68f8      	ldr	r0, [r7, #12]
 800c4e2:	f000 ff3b 	bl	800d35c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	2100      	movs	r1, #0
 800c4ec:	68f8      	ldr	r0, [r7, #12]
 800c4ee:	f001 fc0c 	bl	800dd0a <USBD_LL_PrepareReceive>
 800c4f2:	e03b      	b.n	800c56c <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	68da      	ldr	r2, [r3, #12]
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	689b      	ldr	r3, [r3, #8]
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	d11c      	bne.n	800c53a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	685a      	ldr	r2, [r3, #4]
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c508:	429a      	cmp	r2, r3
 800c50a:	d316      	bcc.n	800c53a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	685a      	ldr	r2, [r3, #4]
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c516:	429a      	cmp	r2, r3
 800c518:	d20f      	bcs.n	800c53a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c51a:	2200      	movs	r2, #0
 800c51c:	2100      	movs	r1, #0
 800c51e:	68f8      	ldr	r0, [r7, #12]
 800c520:	f000 ff1c 	bl	800d35c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2200      	movs	r2, #0
 800c528:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c52c:	2300      	movs	r3, #0
 800c52e:	2200      	movs	r2, #0
 800c530:	2100      	movs	r1, #0
 800c532:	68f8      	ldr	r0, [r7, #12]
 800c534:	f001 fbe9 	bl	800dd0a <USBD_LL_PrepareReceive>
 800c538:	e018      	b.n	800c56c <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c540:	b2db      	uxtb	r3, r3
 800c542:	2b03      	cmp	r3, #3
 800c544:	d10b      	bne.n	800c55e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c54c:	68db      	ldr	r3, [r3, #12]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d005      	beq.n	800c55e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c558:	68db      	ldr	r3, [r3, #12]
 800c55a:	68f8      	ldr	r0, [r7, #12]
 800c55c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c55e:	2180      	movs	r1, #128	; 0x80
 800c560:	68f8      	ldr	r0, [r7, #12]
 800c562:	f001 fb27 	bl	800dbb4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c566:	68f8      	ldr	r0, [r7, #12]
 800c568:	f000 ff4a 	bl	800d400 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c572:	2b01      	cmp	r3, #1
 800c574:	d122      	bne.n	800c5bc <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c576:	68f8      	ldr	r0, [r7, #12]
 800c578:	f7ff fe98 	bl	800c2ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2200      	movs	r2, #0
 800c580:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c584:	e01a      	b.n	800c5bc <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c58c:	b2db      	uxtb	r3, r3
 800c58e:	2b03      	cmp	r3, #3
 800c590:	d114      	bne.n	800c5bc <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c598:	695b      	ldr	r3, [r3, #20]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d00e      	beq.n	800c5bc <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5a4:	695b      	ldr	r3, [r3, #20]
 800c5a6:	7afa      	ldrb	r2, [r7, #11]
 800c5a8:	4611      	mov	r1, r2
 800c5aa:	68f8      	ldr	r0, [r7, #12]
 800c5ac:	4798      	blx	r3
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c5b2:	7dfb      	ldrb	r3, [r7, #23]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d001      	beq.n	800c5bc <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c5b8:	7dfb      	ldrb	r3, [r7, #23]
 800c5ba:	e000      	b.n	800c5be <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c5bc:	2300      	movs	r3, #0
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3718      	adds	r7, #24
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}

0800c5c6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c5c6:	b580      	push	{r7, lr}
 800c5c8:	b082      	sub	sp, #8
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2201      	movs	r2, #1
 800c5d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d101      	bne.n	800c5fa <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c5f6:	2303      	movs	r3, #3
 800c5f8:	e02f      	b.n	800c65a <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c600:	2b00      	cmp	r3, #0
 800c602:	d00f      	beq.n	800c624 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c60a:	685b      	ldr	r3, [r3, #4]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d009      	beq.n	800c624 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c616:	685b      	ldr	r3, [r3, #4]
 800c618:	687a      	ldr	r2, [r7, #4]
 800c61a:	6852      	ldr	r2, [r2, #4]
 800c61c:	b2d2      	uxtb	r2, r2
 800c61e:	4611      	mov	r1, r2
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c624:	2340      	movs	r3, #64	; 0x40
 800c626:	2200      	movs	r2, #0
 800c628:	2100      	movs	r1, #0
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f001 fa7d 	bl	800db2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2201      	movs	r2, #1
 800c634:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2240      	movs	r2, #64	; 0x40
 800c63c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c640:	2340      	movs	r3, #64	; 0x40
 800c642:	2200      	movs	r2, #0
 800c644:	2180      	movs	r1, #128	; 0x80
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f001 fa6f 	bl	800db2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2201      	movs	r2, #1
 800c650:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2240      	movs	r2, #64	; 0x40
 800c656:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c658:	2300      	movs	r3, #0
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3708      	adds	r7, #8
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}

0800c662 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c662:	b480      	push	{r7}
 800c664:	b083      	sub	sp, #12
 800c666:	af00      	add	r7, sp, #0
 800c668:	6078      	str	r0, [r7, #4]
 800c66a:	460b      	mov	r3, r1
 800c66c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	78fa      	ldrb	r2, [r7, #3]
 800c672:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c674:	2300      	movs	r3, #0
}
 800c676:	4618      	mov	r0, r3
 800c678:	370c      	adds	r7, #12
 800c67a:	46bd      	mov	sp, r7
 800c67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c680:	4770      	bx	lr

0800c682 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c682:	b480      	push	{r7}
 800c684:	b083      	sub	sp, #12
 800c686:	af00      	add	r7, sp, #0
 800c688:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c690:	b2da      	uxtb	r2, r3
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2204      	movs	r2, #4
 800c69c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c6a0:	2300      	movs	r3, #0
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	370c      	adds	r7, #12
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ac:	4770      	bx	lr

0800c6ae <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c6ae:	b480      	push	{r7}
 800c6b0:	b083      	sub	sp, #12
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6bc:	b2db      	uxtb	r3, r3
 800c6be:	2b04      	cmp	r3, #4
 800c6c0:	d106      	bne.n	800c6d0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c6c8:	b2da      	uxtb	r2, r3
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c6d0:	2300      	movs	r3, #0
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	370c      	adds	r7, #12
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6dc:	4770      	bx	lr

0800c6de <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c6de:	b580      	push	{r7, lr}
 800c6e0:	b082      	sub	sp, #8
 800c6e2:	af00      	add	r7, sp, #0
 800c6e4:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d101      	bne.n	800c6f4 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c6f0:	2303      	movs	r3, #3
 800c6f2:	e012      	b.n	800c71a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6fa:	b2db      	uxtb	r3, r3
 800c6fc:	2b03      	cmp	r3, #3
 800c6fe:	d10b      	bne.n	800c718 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c706:	69db      	ldr	r3, [r3, #28]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d005      	beq.n	800c718 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c712:	69db      	ldr	r3, [r3, #28]
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c718:	2300      	movs	r3, #0
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	3708      	adds	r7, #8
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}

0800c722 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c722:	b480      	push	{r7}
 800c724:	b087      	sub	sp, #28
 800c726:	af00      	add	r7, sp, #0
 800c728:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	3301      	adds	r3, #1
 800c738:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c740:	8a3b      	ldrh	r3, [r7, #16]
 800c742:	021b      	lsls	r3, r3, #8
 800c744:	b21a      	sxth	r2, r3
 800c746:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c74a:	4313      	orrs	r3, r2
 800c74c:	b21b      	sxth	r3, r3
 800c74e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c750:	89fb      	ldrh	r3, [r7, #14]
}
 800c752:	4618      	mov	r0, r3
 800c754:	371c      	adds	r7, #28
 800c756:	46bd      	mov	sp, r7
 800c758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75c:	4770      	bx	lr
	...

0800c760 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b084      	sub	sp, #16
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c76a:	2300      	movs	r3, #0
 800c76c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c776:	2b40      	cmp	r3, #64	; 0x40
 800c778:	d005      	beq.n	800c786 <USBD_StdDevReq+0x26>
 800c77a:	2b40      	cmp	r3, #64	; 0x40
 800c77c:	d853      	bhi.n	800c826 <USBD_StdDevReq+0xc6>
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d00b      	beq.n	800c79a <USBD_StdDevReq+0x3a>
 800c782:	2b20      	cmp	r3, #32
 800c784:	d14f      	bne.n	800c826 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c78c:	689b      	ldr	r3, [r3, #8]
 800c78e:	6839      	ldr	r1, [r7, #0]
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	4798      	blx	r3
 800c794:	4603      	mov	r3, r0
 800c796:	73fb      	strb	r3, [r7, #15]
      break;
 800c798:	e04a      	b.n	800c830 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	785b      	ldrb	r3, [r3, #1]
 800c79e:	2b09      	cmp	r3, #9
 800c7a0:	d83b      	bhi.n	800c81a <USBD_StdDevReq+0xba>
 800c7a2:	a201      	add	r2, pc, #4	; (adr r2, 800c7a8 <USBD_StdDevReq+0x48>)
 800c7a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7a8:	0800c7fd 	.word	0x0800c7fd
 800c7ac:	0800c811 	.word	0x0800c811
 800c7b0:	0800c81b 	.word	0x0800c81b
 800c7b4:	0800c807 	.word	0x0800c807
 800c7b8:	0800c81b 	.word	0x0800c81b
 800c7bc:	0800c7db 	.word	0x0800c7db
 800c7c0:	0800c7d1 	.word	0x0800c7d1
 800c7c4:	0800c81b 	.word	0x0800c81b
 800c7c8:	0800c7f3 	.word	0x0800c7f3
 800c7cc:	0800c7e5 	.word	0x0800c7e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c7d0:	6839      	ldr	r1, [r7, #0]
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f000 f9de 	bl	800cb94 <USBD_GetDescriptor>
          break;
 800c7d8:	e024      	b.n	800c824 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c7da:	6839      	ldr	r1, [r7, #0]
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f000 fb6d 	bl	800cebc <USBD_SetAddress>
          break;
 800c7e2:	e01f      	b.n	800c824 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c7e4:	6839      	ldr	r1, [r7, #0]
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f000 fbac 	bl	800cf44 <USBD_SetConfig>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	73fb      	strb	r3, [r7, #15]
          break;
 800c7f0:	e018      	b.n	800c824 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c7f2:	6839      	ldr	r1, [r7, #0]
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f000 fc4b 	bl	800d090 <USBD_GetConfig>
          break;
 800c7fa:	e013      	b.n	800c824 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c7fc:	6839      	ldr	r1, [r7, #0]
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f000 fc7c 	bl	800d0fc <USBD_GetStatus>
          break;
 800c804:	e00e      	b.n	800c824 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c806:	6839      	ldr	r1, [r7, #0]
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f000 fcab 	bl	800d164 <USBD_SetFeature>
          break;
 800c80e:	e009      	b.n	800c824 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c810:	6839      	ldr	r1, [r7, #0]
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 fcba 	bl	800d18c <USBD_ClrFeature>
          break;
 800c818:	e004      	b.n	800c824 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c81a:	6839      	ldr	r1, [r7, #0]
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f000 fd11 	bl	800d244 <USBD_CtlError>
          break;
 800c822:	bf00      	nop
      }
      break;
 800c824:	e004      	b.n	800c830 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c826:	6839      	ldr	r1, [r7, #0]
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f000 fd0b 	bl	800d244 <USBD_CtlError>
      break;
 800c82e:	bf00      	nop
  }

  return ret;
 800c830:	7bfb      	ldrb	r3, [r7, #15]
}
 800c832:	4618      	mov	r0, r3
 800c834:	3710      	adds	r7, #16
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
 800c83a:	bf00      	nop

0800c83c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b084      	sub	sp, #16
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c846:	2300      	movs	r3, #0
 800c848:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	781b      	ldrb	r3, [r3, #0]
 800c84e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c852:	2b40      	cmp	r3, #64	; 0x40
 800c854:	d005      	beq.n	800c862 <USBD_StdItfReq+0x26>
 800c856:	2b40      	cmp	r3, #64	; 0x40
 800c858:	d82f      	bhi.n	800c8ba <USBD_StdItfReq+0x7e>
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d001      	beq.n	800c862 <USBD_StdItfReq+0x26>
 800c85e:	2b20      	cmp	r3, #32
 800c860:	d12b      	bne.n	800c8ba <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c868:	b2db      	uxtb	r3, r3
 800c86a:	3b01      	subs	r3, #1
 800c86c:	2b02      	cmp	r3, #2
 800c86e:	d81d      	bhi.n	800c8ac <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	889b      	ldrh	r3, [r3, #4]
 800c874:	b2db      	uxtb	r3, r3
 800c876:	2b01      	cmp	r3, #1
 800c878:	d813      	bhi.n	800c8a2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c880:	689b      	ldr	r3, [r3, #8]
 800c882:	6839      	ldr	r1, [r7, #0]
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	4798      	blx	r3
 800c888:	4603      	mov	r3, r0
 800c88a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	88db      	ldrh	r3, [r3, #6]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d110      	bne.n	800c8b6 <USBD_StdItfReq+0x7a>
 800c894:	7bfb      	ldrb	r3, [r7, #15]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d10d      	bne.n	800c8b6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f000 fd9d 	bl	800d3da <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c8a0:	e009      	b.n	800c8b6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c8a2:	6839      	ldr	r1, [r7, #0]
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f000 fccd 	bl	800d244 <USBD_CtlError>
          break;
 800c8aa:	e004      	b.n	800c8b6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c8ac:	6839      	ldr	r1, [r7, #0]
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 fcc8 	bl	800d244 <USBD_CtlError>
          break;
 800c8b4:	e000      	b.n	800c8b8 <USBD_StdItfReq+0x7c>
          break;
 800c8b6:	bf00      	nop
      }
      break;
 800c8b8:	e004      	b.n	800c8c4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c8ba:	6839      	ldr	r1, [r7, #0]
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f000 fcc1 	bl	800d244 <USBD_CtlError>
      break;
 800c8c2:	bf00      	nop
  }

  return ret;
 800c8c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3710      	adds	r7, #16
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}

0800c8ce <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8ce:	b580      	push	{r7, lr}
 800c8d0:	b084      	sub	sp, #16
 800c8d2:	af00      	add	r7, sp, #0
 800c8d4:	6078      	str	r0, [r7, #4]
 800c8d6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	889b      	ldrh	r3, [r3, #4]
 800c8e0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	781b      	ldrb	r3, [r3, #0]
 800c8e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c8ea:	2b40      	cmp	r3, #64	; 0x40
 800c8ec:	d007      	beq.n	800c8fe <USBD_StdEPReq+0x30>
 800c8ee:	2b40      	cmp	r3, #64	; 0x40
 800c8f0:	f200 8145 	bhi.w	800cb7e <USBD_StdEPReq+0x2b0>
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d00c      	beq.n	800c912 <USBD_StdEPReq+0x44>
 800c8f8:	2b20      	cmp	r3, #32
 800c8fa:	f040 8140 	bne.w	800cb7e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c904:	689b      	ldr	r3, [r3, #8]
 800c906:	6839      	ldr	r1, [r7, #0]
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	4798      	blx	r3
 800c90c:	4603      	mov	r3, r0
 800c90e:	73fb      	strb	r3, [r7, #15]
      break;
 800c910:	e13a      	b.n	800cb88 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	785b      	ldrb	r3, [r3, #1]
 800c916:	2b03      	cmp	r3, #3
 800c918:	d007      	beq.n	800c92a <USBD_StdEPReq+0x5c>
 800c91a:	2b03      	cmp	r3, #3
 800c91c:	f300 8129 	bgt.w	800cb72 <USBD_StdEPReq+0x2a4>
 800c920:	2b00      	cmp	r3, #0
 800c922:	d07f      	beq.n	800ca24 <USBD_StdEPReq+0x156>
 800c924:	2b01      	cmp	r3, #1
 800c926:	d03c      	beq.n	800c9a2 <USBD_StdEPReq+0xd4>
 800c928:	e123      	b.n	800cb72 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c930:	b2db      	uxtb	r3, r3
 800c932:	2b02      	cmp	r3, #2
 800c934:	d002      	beq.n	800c93c <USBD_StdEPReq+0x6e>
 800c936:	2b03      	cmp	r3, #3
 800c938:	d016      	beq.n	800c968 <USBD_StdEPReq+0x9a>
 800c93a:	e02c      	b.n	800c996 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c93c:	7bbb      	ldrb	r3, [r7, #14]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d00d      	beq.n	800c95e <USBD_StdEPReq+0x90>
 800c942:	7bbb      	ldrb	r3, [r7, #14]
 800c944:	2b80      	cmp	r3, #128	; 0x80
 800c946:	d00a      	beq.n	800c95e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c948:	7bbb      	ldrb	r3, [r7, #14]
 800c94a:	4619      	mov	r1, r3
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f001 f931 	bl	800dbb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c952:	2180      	movs	r1, #128	; 0x80
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f001 f92d 	bl	800dbb4 <USBD_LL_StallEP>
 800c95a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c95c:	e020      	b.n	800c9a0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c95e:	6839      	ldr	r1, [r7, #0]
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f000 fc6f 	bl	800d244 <USBD_CtlError>
              break;
 800c966:	e01b      	b.n	800c9a0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	885b      	ldrh	r3, [r3, #2]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d10e      	bne.n	800c98e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c970:	7bbb      	ldrb	r3, [r7, #14]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d00b      	beq.n	800c98e <USBD_StdEPReq+0xc0>
 800c976:	7bbb      	ldrb	r3, [r7, #14]
 800c978:	2b80      	cmp	r3, #128	; 0x80
 800c97a:	d008      	beq.n	800c98e <USBD_StdEPReq+0xc0>
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	88db      	ldrh	r3, [r3, #6]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d104      	bne.n	800c98e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c984:	7bbb      	ldrb	r3, [r7, #14]
 800c986:	4619      	mov	r1, r3
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f001 f913 	bl	800dbb4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f000 fd23 	bl	800d3da <USBD_CtlSendStatus>

              break;
 800c994:	e004      	b.n	800c9a0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c996:	6839      	ldr	r1, [r7, #0]
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f000 fc53 	bl	800d244 <USBD_CtlError>
              break;
 800c99e:	bf00      	nop
          }
          break;
 800c9a0:	e0ec      	b.n	800cb7c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9a8:	b2db      	uxtb	r3, r3
 800c9aa:	2b02      	cmp	r3, #2
 800c9ac:	d002      	beq.n	800c9b4 <USBD_StdEPReq+0xe6>
 800c9ae:	2b03      	cmp	r3, #3
 800c9b0:	d016      	beq.n	800c9e0 <USBD_StdEPReq+0x112>
 800c9b2:	e030      	b.n	800ca16 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c9b4:	7bbb      	ldrb	r3, [r7, #14]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d00d      	beq.n	800c9d6 <USBD_StdEPReq+0x108>
 800c9ba:	7bbb      	ldrb	r3, [r7, #14]
 800c9bc:	2b80      	cmp	r3, #128	; 0x80
 800c9be:	d00a      	beq.n	800c9d6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c9c0:	7bbb      	ldrb	r3, [r7, #14]
 800c9c2:	4619      	mov	r1, r3
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f001 f8f5 	bl	800dbb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9ca:	2180      	movs	r1, #128	; 0x80
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f001 f8f1 	bl	800dbb4 <USBD_LL_StallEP>
 800c9d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c9d4:	e025      	b.n	800ca22 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c9d6:	6839      	ldr	r1, [r7, #0]
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f000 fc33 	bl	800d244 <USBD_CtlError>
              break;
 800c9de:	e020      	b.n	800ca22 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	885b      	ldrh	r3, [r3, #2]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d11b      	bne.n	800ca20 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c9e8:	7bbb      	ldrb	r3, [r7, #14]
 800c9ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d004      	beq.n	800c9fc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c9f2:	7bbb      	ldrb	r3, [r7, #14]
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f001 f8fb 	bl	800dbf2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f000 fcec 	bl	800d3da <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca08:	689b      	ldr	r3, [r3, #8]
 800ca0a:	6839      	ldr	r1, [r7, #0]
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	4798      	blx	r3
 800ca10:	4603      	mov	r3, r0
 800ca12:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ca14:	e004      	b.n	800ca20 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ca16:	6839      	ldr	r1, [r7, #0]
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f000 fc13 	bl	800d244 <USBD_CtlError>
              break;
 800ca1e:	e000      	b.n	800ca22 <USBD_StdEPReq+0x154>
              break;
 800ca20:	bf00      	nop
          }
          break;
 800ca22:	e0ab      	b.n	800cb7c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca2a:	b2db      	uxtb	r3, r3
 800ca2c:	2b02      	cmp	r3, #2
 800ca2e:	d002      	beq.n	800ca36 <USBD_StdEPReq+0x168>
 800ca30:	2b03      	cmp	r3, #3
 800ca32:	d032      	beq.n	800ca9a <USBD_StdEPReq+0x1cc>
 800ca34:	e097      	b.n	800cb66 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca36:	7bbb      	ldrb	r3, [r7, #14]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d007      	beq.n	800ca4c <USBD_StdEPReq+0x17e>
 800ca3c:	7bbb      	ldrb	r3, [r7, #14]
 800ca3e:	2b80      	cmp	r3, #128	; 0x80
 800ca40:	d004      	beq.n	800ca4c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ca42:	6839      	ldr	r1, [r7, #0]
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f000 fbfd 	bl	800d244 <USBD_CtlError>
                break;
 800ca4a:	e091      	b.n	800cb70 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	da0b      	bge.n	800ca6c <USBD_StdEPReq+0x19e>
 800ca54:	7bbb      	ldrb	r3, [r7, #14]
 800ca56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ca5a:	4613      	mov	r3, r2
 800ca5c:	009b      	lsls	r3, r3, #2
 800ca5e:	4413      	add	r3, r2
 800ca60:	009b      	lsls	r3, r3, #2
 800ca62:	3310      	adds	r3, #16
 800ca64:	687a      	ldr	r2, [r7, #4]
 800ca66:	4413      	add	r3, r2
 800ca68:	3304      	adds	r3, #4
 800ca6a:	e00b      	b.n	800ca84 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ca6c:	7bbb      	ldrb	r3, [r7, #14]
 800ca6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca72:	4613      	mov	r3, r2
 800ca74:	009b      	lsls	r3, r3, #2
 800ca76:	4413      	add	r3, r2
 800ca78:	009b      	lsls	r3, r3, #2
 800ca7a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ca7e:	687a      	ldr	r2, [r7, #4]
 800ca80:	4413      	add	r3, r2
 800ca82:	3304      	adds	r3, #4
 800ca84:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	2202      	movs	r2, #2
 800ca90:	4619      	mov	r1, r3
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f000 fc47 	bl	800d326 <USBD_CtlSendData>
              break;
 800ca98:	e06a      	b.n	800cb70 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ca9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	da11      	bge.n	800cac6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800caa2:	7bbb      	ldrb	r3, [r7, #14]
 800caa4:	f003 020f 	and.w	r2, r3, #15
 800caa8:	6879      	ldr	r1, [r7, #4]
 800caaa:	4613      	mov	r3, r2
 800caac:	009b      	lsls	r3, r3, #2
 800caae:	4413      	add	r3, r2
 800cab0:	009b      	lsls	r3, r3, #2
 800cab2:	440b      	add	r3, r1
 800cab4:	3324      	adds	r3, #36	; 0x24
 800cab6:	881b      	ldrh	r3, [r3, #0]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d117      	bne.n	800caec <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cabc:	6839      	ldr	r1, [r7, #0]
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f000 fbc0 	bl	800d244 <USBD_CtlError>
                  break;
 800cac4:	e054      	b.n	800cb70 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cac6:	7bbb      	ldrb	r3, [r7, #14]
 800cac8:	f003 020f 	and.w	r2, r3, #15
 800cacc:	6879      	ldr	r1, [r7, #4]
 800cace:	4613      	mov	r3, r2
 800cad0:	009b      	lsls	r3, r3, #2
 800cad2:	4413      	add	r3, r2
 800cad4:	009b      	lsls	r3, r3, #2
 800cad6:	440b      	add	r3, r1
 800cad8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cadc:	881b      	ldrh	r3, [r3, #0]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d104      	bne.n	800caec <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cae2:	6839      	ldr	r1, [r7, #0]
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f000 fbad 	bl	800d244 <USBD_CtlError>
                  break;
 800caea:	e041      	b.n	800cb70 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800caec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	da0b      	bge.n	800cb0c <USBD_StdEPReq+0x23e>
 800caf4:	7bbb      	ldrb	r3, [r7, #14]
 800caf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cafa:	4613      	mov	r3, r2
 800cafc:	009b      	lsls	r3, r3, #2
 800cafe:	4413      	add	r3, r2
 800cb00:	009b      	lsls	r3, r3, #2
 800cb02:	3310      	adds	r3, #16
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	4413      	add	r3, r2
 800cb08:	3304      	adds	r3, #4
 800cb0a:	e00b      	b.n	800cb24 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cb0c:	7bbb      	ldrb	r3, [r7, #14]
 800cb0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb12:	4613      	mov	r3, r2
 800cb14:	009b      	lsls	r3, r3, #2
 800cb16:	4413      	add	r3, r2
 800cb18:	009b      	lsls	r3, r3, #2
 800cb1a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cb1e:	687a      	ldr	r2, [r7, #4]
 800cb20:	4413      	add	r3, r2
 800cb22:	3304      	adds	r3, #4
 800cb24:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cb26:	7bbb      	ldrb	r3, [r7, #14]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d002      	beq.n	800cb32 <USBD_StdEPReq+0x264>
 800cb2c:	7bbb      	ldrb	r3, [r7, #14]
 800cb2e:	2b80      	cmp	r3, #128	; 0x80
 800cb30:	d103      	bne.n	800cb3a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	2200      	movs	r2, #0
 800cb36:	601a      	str	r2, [r3, #0]
 800cb38:	e00e      	b.n	800cb58 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cb3a:	7bbb      	ldrb	r3, [r7, #14]
 800cb3c:	4619      	mov	r1, r3
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f001 f876 	bl	800dc30 <USBD_LL_IsStallEP>
 800cb44:	4603      	mov	r3, r0
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d003      	beq.n	800cb52 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	2201      	movs	r2, #1
 800cb4e:	601a      	str	r2, [r3, #0]
 800cb50:	e002      	b.n	800cb58 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	2200      	movs	r2, #0
 800cb56:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	2202      	movs	r2, #2
 800cb5c:	4619      	mov	r1, r3
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f000 fbe1 	bl	800d326 <USBD_CtlSendData>
              break;
 800cb64:	e004      	b.n	800cb70 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800cb66:	6839      	ldr	r1, [r7, #0]
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f000 fb6b 	bl	800d244 <USBD_CtlError>
              break;
 800cb6e:	bf00      	nop
          }
          break;
 800cb70:	e004      	b.n	800cb7c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800cb72:	6839      	ldr	r1, [r7, #0]
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f000 fb65 	bl	800d244 <USBD_CtlError>
          break;
 800cb7a:	bf00      	nop
      }
      break;
 800cb7c:	e004      	b.n	800cb88 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800cb7e:	6839      	ldr	r1, [r7, #0]
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f000 fb5f 	bl	800d244 <USBD_CtlError>
      break;
 800cb86:	bf00      	nop
  }

  return ret;
 800cb88:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3710      	adds	r7, #16
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}
	...

0800cb94 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b084      	sub	sp, #16
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
 800cb9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cba2:	2300      	movs	r3, #0
 800cba4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cba6:	2300      	movs	r3, #0
 800cba8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	885b      	ldrh	r3, [r3, #2]
 800cbae:	0a1b      	lsrs	r3, r3, #8
 800cbb0:	b29b      	uxth	r3, r3
 800cbb2:	3b01      	subs	r3, #1
 800cbb4:	2b0e      	cmp	r3, #14
 800cbb6:	f200 8152 	bhi.w	800ce5e <USBD_GetDescriptor+0x2ca>
 800cbba:	a201      	add	r2, pc, #4	; (adr r2, 800cbc0 <USBD_GetDescriptor+0x2c>)
 800cbbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbc0:	0800cc31 	.word	0x0800cc31
 800cbc4:	0800cc49 	.word	0x0800cc49
 800cbc8:	0800cc89 	.word	0x0800cc89
 800cbcc:	0800ce5f 	.word	0x0800ce5f
 800cbd0:	0800ce5f 	.word	0x0800ce5f
 800cbd4:	0800cdff 	.word	0x0800cdff
 800cbd8:	0800ce2b 	.word	0x0800ce2b
 800cbdc:	0800ce5f 	.word	0x0800ce5f
 800cbe0:	0800ce5f 	.word	0x0800ce5f
 800cbe4:	0800ce5f 	.word	0x0800ce5f
 800cbe8:	0800ce5f 	.word	0x0800ce5f
 800cbec:	0800ce5f 	.word	0x0800ce5f
 800cbf0:	0800ce5f 	.word	0x0800ce5f
 800cbf4:	0800ce5f 	.word	0x0800ce5f
 800cbf8:	0800cbfd 	.word	0x0800cbfd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc02:	69db      	ldr	r3, [r3, #28]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d00b      	beq.n	800cc20 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc0e:	69db      	ldr	r3, [r3, #28]
 800cc10:	687a      	ldr	r2, [r7, #4]
 800cc12:	7c12      	ldrb	r2, [r2, #16]
 800cc14:	f107 0108 	add.w	r1, r7, #8
 800cc18:	4610      	mov	r0, r2
 800cc1a:	4798      	blx	r3
 800cc1c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cc1e:	e126      	b.n	800ce6e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cc20:	6839      	ldr	r1, [r7, #0]
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f000 fb0e 	bl	800d244 <USBD_CtlError>
        err++;
 800cc28:	7afb      	ldrb	r3, [r7, #11]
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	72fb      	strb	r3, [r7, #11]
      break;
 800cc2e:	e11e      	b.n	800ce6e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	687a      	ldr	r2, [r7, #4]
 800cc3a:	7c12      	ldrb	r2, [r2, #16]
 800cc3c:	f107 0108 	add.w	r1, r7, #8
 800cc40:	4610      	mov	r0, r2
 800cc42:	4798      	blx	r3
 800cc44:	60f8      	str	r0, [r7, #12]
      break;
 800cc46:	e112      	b.n	800ce6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	7c1b      	ldrb	r3, [r3, #16]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d10d      	bne.n	800cc6c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc58:	f107 0208 	add.w	r2, r7, #8
 800cc5c:	4610      	mov	r0, r2
 800cc5e:	4798      	blx	r3
 800cc60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	3301      	adds	r3, #1
 800cc66:	2202      	movs	r2, #2
 800cc68:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cc6a:	e100      	b.n	800ce6e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc74:	f107 0208 	add.w	r2, r7, #8
 800cc78:	4610      	mov	r0, r2
 800cc7a:	4798      	blx	r3
 800cc7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	3301      	adds	r3, #1
 800cc82:	2202      	movs	r2, #2
 800cc84:	701a      	strb	r2, [r3, #0]
      break;
 800cc86:	e0f2      	b.n	800ce6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	885b      	ldrh	r3, [r3, #2]
 800cc8c:	b2db      	uxtb	r3, r3
 800cc8e:	2b05      	cmp	r3, #5
 800cc90:	f200 80ac 	bhi.w	800cdec <USBD_GetDescriptor+0x258>
 800cc94:	a201      	add	r2, pc, #4	; (adr r2, 800cc9c <USBD_GetDescriptor+0x108>)
 800cc96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc9a:	bf00      	nop
 800cc9c:	0800ccb5 	.word	0x0800ccb5
 800cca0:	0800cce9 	.word	0x0800cce9
 800cca4:	0800cd1d 	.word	0x0800cd1d
 800cca8:	0800cd51 	.word	0x0800cd51
 800ccac:	0800cd85 	.word	0x0800cd85
 800ccb0:	0800cdb9 	.word	0x0800cdb9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccba:	685b      	ldr	r3, [r3, #4]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d00b      	beq.n	800ccd8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccc6:	685b      	ldr	r3, [r3, #4]
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	7c12      	ldrb	r2, [r2, #16]
 800cccc:	f107 0108 	add.w	r1, r7, #8
 800ccd0:	4610      	mov	r0, r2
 800ccd2:	4798      	blx	r3
 800ccd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ccd6:	e091      	b.n	800cdfc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ccd8:	6839      	ldr	r1, [r7, #0]
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f000 fab2 	bl	800d244 <USBD_CtlError>
            err++;
 800cce0:	7afb      	ldrb	r3, [r7, #11]
 800cce2:	3301      	adds	r3, #1
 800cce4:	72fb      	strb	r3, [r7, #11]
          break;
 800cce6:	e089      	b.n	800cdfc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccee:	689b      	ldr	r3, [r3, #8]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d00b      	beq.n	800cd0c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccfa:	689b      	ldr	r3, [r3, #8]
 800ccfc:	687a      	ldr	r2, [r7, #4]
 800ccfe:	7c12      	ldrb	r2, [r2, #16]
 800cd00:	f107 0108 	add.w	r1, r7, #8
 800cd04:	4610      	mov	r0, r2
 800cd06:	4798      	blx	r3
 800cd08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd0a:	e077      	b.n	800cdfc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cd0c:	6839      	ldr	r1, [r7, #0]
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f000 fa98 	bl	800d244 <USBD_CtlError>
            err++;
 800cd14:	7afb      	ldrb	r3, [r7, #11]
 800cd16:	3301      	adds	r3, #1
 800cd18:	72fb      	strb	r3, [r7, #11]
          break;
 800cd1a:	e06f      	b.n	800cdfc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd22:	68db      	ldr	r3, [r3, #12]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d00b      	beq.n	800cd40 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd2e:	68db      	ldr	r3, [r3, #12]
 800cd30:	687a      	ldr	r2, [r7, #4]
 800cd32:	7c12      	ldrb	r2, [r2, #16]
 800cd34:	f107 0108 	add.w	r1, r7, #8
 800cd38:	4610      	mov	r0, r2
 800cd3a:	4798      	blx	r3
 800cd3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd3e:	e05d      	b.n	800cdfc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cd40:	6839      	ldr	r1, [r7, #0]
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f000 fa7e 	bl	800d244 <USBD_CtlError>
            err++;
 800cd48:	7afb      	ldrb	r3, [r7, #11]
 800cd4a:	3301      	adds	r3, #1
 800cd4c:	72fb      	strb	r3, [r7, #11]
          break;
 800cd4e:	e055      	b.n	800cdfc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd56:	691b      	ldr	r3, [r3, #16]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d00b      	beq.n	800cd74 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd62:	691b      	ldr	r3, [r3, #16]
 800cd64:	687a      	ldr	r2, [r7, #4]
 800cd66:	7c12      	ldrb	r2, [r2, #16]
 800cd68:	f107 0108 	add.w	r1, r7, #8
 800cd6c:	4610      	mov	r0, r2
 800cd6e:	4798      	blx	r3
 800cd70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd72:	e043      	b.n	800cdfc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cd74:	6839      	ldr	r1, [r7, #0]
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f000 fa64 	bl	800d244 <USBD_CtlError>
            err++;
 800cd7c:	7afb      	ldrb	r3, [r7, #11]
 800cd7e:	3301      	adds	r3, #1
 800cd80:	72fb      	strb	r3, [r7, #11]
          break;
 800cd82:	e03b      	b.n	800cdfc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd8a:	695b      	ldr	r3, [r3, #20]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d00b      	beq.n	800cda8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd96:	695b      	ldr	r3, [r3, #20]
 800cd98:	687a      	ldr	r2, [r7, #4]
 800cd9a:	7c12      	ldrb	r2, [r2, #16]
 800cd9c:	f107 0108 	add.w	r1, r7, #8
 800cda0:	4610      	mov	r0, r2
 800cda2:	4798      	blx	r3
 800cda4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cda6:	e029      	b.n	800cdfc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cda8:	6839      	ldr	r1, [r7, #0]
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f000 fa4a 	bl	800d244 <USBD_CtlError>
            err++;
 800cdb0:	7afb      	ldrb	r3, [r7, #11]
 800cdb2:	3301      	adds	r3, #1
 800cdb4:	72fb      	strb	r3, [r7, #11]
          break;
 800cdb6:	e021      	b.n	800cdfc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdbe:	699b      	ldr	r3, [r3, #24]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d00b      	beq.n	800cddc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdca:	699b      	ldr	r3, [r3, #24]
 800cdcc:	687a      	ldr	r2, [r7, #4]
 800cdce:	7c12      	ldrb	r2, [r2, #16]
 800cdd0:	f107 0108 	add.w	r1, r7, #8
 800cdd4:	4610      	mov	r0, r2
 800cdd6:	4798      	blx	r3
 800cdd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cdda:	e00f      	b.n	800cdfc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cddc:	6839      	ldr	r1, [r7, #0]
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f000 fa30 	bl	800d244 <USBD_CtlError>
            err++;
 800cde4:	7afb      	ldrb	r3, [r7, #11]
 800cde6:	3301      	adds	r3, #1
 800cde8:	72fb      	strb	r3, [r7, #11]
          break;
 800cdea:	e007      	b.n	800cdfc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cdec:	6839      	ldr	r1, [r7, #0]
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f000 fa28 	bl	800d244 <USBD_CtlError>
          err++;
 800cdf4:	7afb      	ldrb	r3, [r7, #11]
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800cdfa:	bf00      	nop
      }
      break;
 800cdfc:	e037      	b.n	800ce6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	7c1b      	ldrb	r3, [r3, #16]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d109      	bne.n	800ce1a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce0e:	f107 0208 	add.w	r2, r7, #8
 800ce12:	4610      	mov	r0, r2
 800ce14:	4798      	blx	r3
 800ce16:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ce18:	e029      	b.n	800ce6e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ce1a:	6839      	ldr	r1, [r7, #0]
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f000 fa11 	bl	800d244 <USBD_CtlError>
        err++;
 800ce22:	7afb      	ldrb	r3, [r7, #11]
 800ce24:	3301      	adds	r3, #1
 800ce26:	72fb      	strb	r3, [r7, #11]
      break;
 800ce28:	e021      	b.n	800ce6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	7c1b      	ldrb	r3, [r3, #16]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d10d      	bne.n	800ce4e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce3a:	f107 0208 	add.w	r2, r7, #8
 800ce3e:	4610      	mov	r0, r2
 800ce40:	4798      	blx	r3
 800ce42:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	3301      	adds	r3, #1
 800ce48:	2207      	movs	r2, #7
 800ce4a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ce4c:	e00f      	b.n	800ce6e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ce4e:	6839      	ldr	r1, [r7, #0]
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f000 f9f7 	bl	800d244 <USBD_CtlError>
        err++;
 800ce56:	7afb      	ldrb	r3, [r7, #11]
 800ce58:	3301      	adds	r3, #1
 800ce5a:	72fb      	strb	r3, [r7, #11]
      break;
 800ce5c:	e007      	b.n	800ce6e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ce5e:	6839      	ldr	r1, [r7, #0]
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f000 f9ef 	bl	800d244 <USBD_CtlError>
      err++;
 800ce66:	7afb      	ldrb	r3, [r7, #11]
 800ce68:	3301      	adds	r3, #1
 800ce6a:	72fb      	strb	r3, [r7, #11]
      break;
 800ce6c:	bf00      	nop
  }

  if (err != 0U)
 800ce6e:	7afb      	ldrb	r3, [r7, #11]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d11e      	bne.n	800ceb2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	88db      	ldrh	r3, [r3, #6]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d016      	beq.n	800ceaa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ce7c:	893b      	ldrh	r3, [r7, #8]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d00e      	beq.n	800cea0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	88da      	ldrh	r2, [r3, #6]
 800ce86:	893b      	ldrh	r3, [r7, #8]
 800ce88:	4293      	cmp	r3, r2
 800ce8a:	bf28      	it	cs
 800ce8c:	4613      	movcs	r3, r2
 800ce8e:	b29b      	uxth	r3, r3
 800ce90:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ce92:	893b      	ldrh	r3, [r7, #8]
 800ce94:	461a      	mov	r2, r3
 800ce96:	68f9      	ldr	r1, [r7, #12]
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f000 fa44 	bl	800d326 <USBD_CtlSendData>
 800ce9e:	e009      	b.n	800ceb4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cea0:	6839      	ldr	r1, [r7, #0]
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f000 f9ce 	bl	800d244 <USBD_CtlError>
 800cea8:	e004      	b.n	800ceb4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f000 fa95 	bl	800d3da <USBD_CtlSendStatus>
 800ceb0:	e000      	b.n	800ceb4 <USBD_GetDescriptor+0x320>
    return;
 800ceb2:	bf00      	nop
  }
}
 800ceb4:	3710      	adds	r7, #16
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}
 800ceba:	bf00      	nop

0800cebc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b084      	sub	sp, #16
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	889b      	ldrh	r3, [r3, #4]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d131      	bne.n	800cf32 <USBD_SetAddress+0x76>
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	88db      	ldrh	r3, [r3, #6]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d12d      	bne.n	800cf32 <USBD_SetAddress+0x76>
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	885b      	ldrh	r3, [r3, #2]
 800ceda:	2b7f      	cmp	r3, #127	; 0x7f
 800cedc:	d829      	bhi.n	800cf32 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	885b      	ldrh	r3, [r3, #2]
 800cee2:	b2db      	uxtb	r3, r3
 800cee4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cee8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cef0:	b2db      	uxtb	r3, r3
 800cef2:	2b03      	cmp	r3, #3
 800cef4:	d104      	bne.n	800cf00 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cef6:	6839      	ldr	r1, [r7, #0]
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f000 f9a3 	bl	800d244 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cefe:	e01d      	b.n	800cf3c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	7bfa      	ldrb	r2, [r7, #15]
 800cf04:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cf08:	7bfb      	ldrb	r3, [r7, #15]
 800cf0a:	4619      	mov	r1, r3
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	f000 febc 	bl	800dc8a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f000 fa61 	bl	800d3da <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cf18:	7bfb      	ldrb	r3, [r7, #15]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d004      	beq.n	800cf28 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2202      	movs	r2, #2
 800cf22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf26:	e009      	b.n	800cf3c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf30:	e004      	b.n	800cf3c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cf32:	6839      	ldr	r1, [r7, #0]
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f000 f985 	bl	800d244 <USBD_CtlError>
  }
}
 800cf3a:	bf00      	nop
 800cf3c:	bf00      	nop
 800cf3e:	3710      	adds	r7, #16
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b084      	sub	sp, #16
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
 800cf4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	885b      	ldrh	r3, [r3, #2]
 800cf56:	b2da      	uxtb	r2, r3
 800cf58:	4b4c      	ldr	r3, [pc, #304]	; (800d08c <USBD_SetConfig+0x148>)
 800cf5a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cf5c:	4b4b      	ldr	r3, [pc, #300]	; (800d08c <USBD_SetConfig+0x148>)
 800cf5e:	781b      	ldrb	r3, [r3, #0]
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	d905      	bls.n	800cf70 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cf64:	6839      	ldr	r1, [r7, #0]
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f000 f96c 	bl	800d244 <USBD_CtlError>
    return USBD_FAIL;
 800cf6c:	2303      	movs	r3, #3
 800cf6e:	e088      	b.n	800d082 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf76:	b2db      	uxtb	r3, r3
 800cf78:	2b02      	cmp	r3, #2
 800cf7a:	d002      	beq.n	800cf82 <USBD_SetConfig+0x3e>
 800cf7c:	2b03      	cmp	r3, #3
 800cf7e:	d025      	beq.n	800cfcc <USBD_SetConfig+0x88>
 800cf80:	e071      	b.n	800d066 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cf82:	4b42      	ldr	r3, [pc, #264]	; (800d08c <USBD_SetConfig+0x148>)
 800cf84:	781b      	ldrb	r3, [r3, #0]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d01c      	beq.n	800cfc4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800cf8a:	4b40      	ldr	r3, [pc, #256]	; (800d08c <USBD_SetConfig+0x148>)
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	461a      	mov	r2, r3
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cf94:	4b3d      	ldr	r3, [pc, #244]	; (800d08c <USBD_SetConfig+0x148>)
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	4619      	mov	r1, r3
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f7ff f991 	bl	800c2c2 <USBD_SetClassConfig>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cfa4:	7bfb      	ldrb	r3, [r7, #15]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d004      	beq.n	800cfb4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800cfaa:	6839      	ldr	r1, [r7, #0]
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	f000 f949 	bl	800d244 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cfb2:	e065      	b.n	800d080 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f000 fa10 	bl	800d3da <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2203      	movs	r2, #3
 800cfbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cfc2:	e05d      	b.n	800d080 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f000 fa08 	bl	800d3da <USBD_CtlSendStatus>
      break;
 800cfca:	e059      	b.n	800d080 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cfcc:	4b2f      	ldr	r3, [pc, #188]	; (800d08c <USBD_SetConfig+0x148>)
 800cfce:	781b      	ldrb	r3, [r3, #0]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d112      	bne.n	800cffa <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2202      	movs	r2, #2
 800cfd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cfdc:	4b2b      	ldr	r3, [pc, #172]	; (800d08c <USBD_SetConfig+0x148>)
 800cfde:	781b      	ldrb	r3, [r3, #0]
 800cfe0:	461a      	mov	r2, r3
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cfe6:	4b29      	ldr	r3, [pc, #164]	; (800d08c <USBD_SetConfig+0x148>)
 800cfe8:	781b      	ldrb	r3, [r3, #0]
 800cfea:	4619      	mov	r1, r3
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f7ff f984 	bl	800c2fa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f000 f9f1 	bl	800d3da <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cff8:	e042      	b.n	800d080 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800cffa:	4b24      	ldr	r3, [pc, #144]	; (800d08c <USBD_SetConfig+0x148>)
 800cffc:	781b      	ldrb	r3, [r3, #0]
 800cffe:	461a      	mov	r2, r3
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	685b      	ldr	r3, [r3, #4]
 800d004:	429a      	cmp	r2, r3
 800d006:	d02a      	beq.n	800d05e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	685b      	ldr	r3, [r3, #4]
 800d00c:	b2db      	uxtb	r3, r3
 800d00e:	4619      	mov	r1, r3
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f7ff f972 	bl	800c2fa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d016:	4b1d      	ldr	r3, [pc, #116]	; (800d08c <USBD_SetConfig+0x148>)
 800d018:	781b      	ldrb	r3, [r3, #0]
 800d01a:	461a      	mov	r2, r3
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d020:	4b1a      	ldr	r3, [pc, #104]	; (800d08c <USBD_SetConfig+0x148>)
 800d022:	781b      	ldrb	r3, [r3, #0]
 800d024:	4619      	mov	r1, r3
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f7ff f94b 	bl	800c2c2 <USBD_SetClassConfig>
 800d02c:	4603      	mov	r3, r0
 800d02e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d030:	7bfb      	ldrb	r3, [r7, #15]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d00f      	beq.n	800d056 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d036:	6839      	ldr	r1, [r7, #0]
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f000 f903 	bl	800d244 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	685b      	ldr	r3, [r3, #4]
 800d042:	b2db      	uxtb	r3, r3
 800d044:	4619      	mov	r1, r3
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f7ff f957 	bl	800c2fa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2202      	movs	r2, #2
 800d050:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d054:	e014      	b.n	800d080 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f000 f9bf 	bl	800d3da <USBD_CtlSendStatus>
      break;
 800d05c:	e010      	b.n	800d080 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f000 f9bb 	bl	800d3da <USBD_CtlSendStatus>
      break;
 800d064:	e00c      	b.n	800d080 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d066:	6839      	ldr	r1, [r7, #0]
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	f000 f8eb 	bl	800d244 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d06e:	4b07      	ldr	r3, [pc, #28]	; (800d08c <USBD_SetConfig+0x148>)
 800d070:	781b      	ldrb	r3, [r3, #0]
 800d072:	4619      	mov	r1, r3
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f7ff f940 	bl	800c2fa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d07a:	2303      	movs	r3, #3
 800d07c:	73fb      	strb	r3, [r7, #15]
      break;
 800d07e:	bf00      	nop
  }

  return ret;
 800d080:	7bfb      	ldrb	r3, [r7, #15]
}
 800d082:	4618      	mov	r0, r3
 800d084:	3710      	adds	r7, #16
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
 800d08a:	bf00      	nop
 800d08c:	20003278 	.word	0x20003278

0800d090 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	88db      	ldrh	r3, [r3, #6]
 800d09e:	2b01      	cmp	r3, #1
 800d0a0:	d004      	beq.n	800d0ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d0a2:	6839      	ldr	r1, [r7, #0]
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f000 f8cd 	bl	800d244 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d0aa:	e023      	b.n	800d0f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0b2:	b2db      	uxtb	r3, r3
 800d0b4:	2b02      	cmp	r3, #2
 800d0b6:	dc02      	bgt.n	800d0be <USBD_GetConfig+0x2e>
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	dc03      	bgt.n	800d0c4 <USBD_GetConfig+0x34>
 800d0bc:	e015      	b.n	800d0ea <USBD_GetConfig+0x5a>
 800d0be:	2b03      	cmp	r3, #3
 800d0c0:	d00b      	beq.n	800d0da <USBD_GetConfig+0x4a>
 800d0c2:	e012      	b.n	800d0ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	3308      	adds	r3, #8
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f000 f927 	bl	800d326 <USBD_CtlSendData>
        break;
 800d0d8:	e00c      	b.n	800d0f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	3304      	adds	r3, #4
 800d0de:	2201      	movs	r2, #1
 800d0e0:	4619      	mov	r1, r3
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f000 f91f 	bl	800d326 <USBD_CtlSendData>
        break;
 800d0e8:	e004      	b.n	800d0f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d0ea:	6839      	ldr	r1, [r7, #0]
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f000 f8a9 	bl	800d244 <USBD_CtlError>
        break;
 800d0f2:	bf00      	nop
}
 800d0f4:	bf00      	nop
 800d0f6:	3708      	adds	r7, #8
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}

0800d0fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b082      	sub	sp, #8
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
 800d104:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d10c:	b2db      	uxtb	r3, r3
 800d10e:	3b01      	subs	r3, #1
 800d110:	2b02      	cmp	r3, #2
 800d112:	d81e      	bhi.n	800d152 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	88db      	ldrh	r3, [r3, #6]
 800d118:	2b02      	cmp	r3, #2
 800d11a:	d004      	beq.n	800d126 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d11c:	6839      	ldr	r1, [r7, #0]
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f000 f890 	bl	800d244 <USBD_CtlError>
        break;
 800d124:	e01a      	b.n	800d15c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2201      	movs	r2, #1
 800d12a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d132:	2b00      	cmp	r3, #0
 800d134:	d005      	beq.n	800d142 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	68db      	ldr	r3, [r3, #12]
 800d13a:	f043 0202 	orr.w	r2, r3, #2
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	330c      	adds	r3, #12
 800d146:	2202      	movs	r2, #2
 800d148:	4619      	mov	r1, r3
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f000 f8eb 	bl	800d326 <USBD_CtlSendData>
      break;
 800d150:	e004      	b.n	800d15c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d152:	6839      	ldr	r1, [r7, #0]
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f000 f875 	bl	800d244 <USBD_CtlError>
      break;
 800d15a:	bf00      	nop
  }
}
 800d15c:	bf00      	nop
 800d15e:	3708      	adds	r7, #8
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}

0800d164 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b082      	sub	sp, #8
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	885b      	ldrh	r3, [r3, #2]
 800d172:	2b01      	cmp	r3, #1
 800d174:	d106      	bne.n	800d184 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2201      	movs	r2, #1
 800d17a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f000 f92b 	bl	800d3da <USBD_CtlSendStatus>
  }
}
 800d184:	bf00      	nop
 800d186:	3708      	adds	r7, #8
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}

0800d18c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b082      	sub	sp, #8
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
 800d194:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d19c:	b2db      	uxtb	r3, r3
 800d19e:	3b01      	subs	r3, #1
 800d1a0:	2b02      	cmp	r3, #2
 800d1a2:	d80b      	bhi.n	800d1bc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	885b      	ldrh	r3, [r3, #2]
 800d1a8:	2b01      	cmp	r3, #1
 800d1aa:	d10c      	bne.n	800d1c6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f000 f910 	bl	800d3da <USBD_CtlSendStatus>
      }
      break;
 800d1ba:	e004      	b.n	800d1c6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d1bc:	6839      	ldr	r1, [r7, #0]
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f000 f840 	bl	800d244 <USBD_CtlError>
      break;
 800d1c4:	e000      	b.n	800d1c8 <USBD_ClrFeature+0x3c>
      break;
 800d1c6:	bf00      	nop
  }
}
 800d1c8:	bf00      	nop
 800d1ca:	3708      	adds	r7, #8
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}

0800d1d0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b084      	sub	sp, #16
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	781a      	ldrb	r2, [r3, #0]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	3301      	adds	r3, #1
 800d1ea:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	781a      	ldrb	r2, [r3, #0]
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	3301      	adds	r3, #1
 800d1f8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d1fa:	68f8      	ldr	r0, [r7, #12]
 800d1fc:	f7ff fa91 	bl	800c722 <SWAPBYTE>
 800d200:	4603      	mov	r3, r0
 800d202:	461a      	mov	r2, r3
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	3301      	adds	r3, #1
 800d20c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	3301      	adds	r3, #1
 800d212:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d214:	68f8      	ldr	r0, [r7, #12]
 800d216:	f7ff fa84 	bl	800c722 <SWAPBYTE>
 800d21a:	4603      	mov	r3, r0
 800d21c:	461a      	mov	r2, r3
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	3301      	adds	r3, #1
 800d226:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	3301      	adds	r3, #1
 800d22c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d22e:	68f8      	ldr	r0, [r7, #12]
 800d230:	f7ff fa77 	bl	800c722 <SWAPBYTE>
 800d234:	4603      	mov	r3, r0
 800d236:	461a      	mov	r2, r3
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	80da      	strh	r2, [r3, #6]
}
 800d23c:	bf00      	nop
 800d23e:	3710      	adds	r7, #16
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}

0800d244 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b082      	sub	sp, #8
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d24e:	2180      	movs	r1, #128	; 0x80
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f000 fcaf 	bl	800dbb4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d256:	2100      	movs	r1, #0
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f000 fcab 	bl	800dbb4 <USBD_LL_StallEP>
}
 800d25e:	bf00      	nop
 800d260:	3708      	adds	r7, #8
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}

0800d266 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d266:	b580      	push	{r7, lr}
 800d268:	b086      	sub	sp, #24
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	60f8      	str	r0, [r7, #12]
 800d26e:	60b9      	str	r1, [r7, #8]
 800d270:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d272:	2300      	movs	r3, #0
 800d274:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d036      	beq.n	800d2ea <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d280:	6938      	ldr	r0, [r7, #16]
 800d282:	f000 f836 	bl	800d2f2 <USBD_GetLen>
 800d286:	4603      	mov	r3, r0
 800d288:	3301      	adds	r3, #1
 800d28a:	b29b      	uxth	r3, r3
 800d28c:	005b      	lsls	r3, r3, #1
 800d28e:	b29a      	uxth	r2, r3
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d294:	7dfb      	ldrb	r3, [r7, #23]
 800d296:	68ba      	ldr	r2, [r7, #8]
 800d298:	4413      	add	r3, r2
 800d29a:	687a      	ldr	r2, [r7, #4]
 800d29c:	7812      	ldrb	r2, [r2, #0]
 800d29e:	701a      	strb	r2, [r3, #0]
  idx++;
 800d2a0:	7dfb      	ldrb	r3, [r7, #23]
 800d2a2:	3301      	adds	r3, #1
 800d2a4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d2a6:	7dfb      	ldrb	r3, [r7, #23]
 800d2a8:	68ba      	ldr	r2, [r7, #8]
 800d2aa:	4413      	add	r3, r2
 800d2ac:	2203      	movs	r2, #3
 800d2ae:	701a      	strb	r2, [r3, #0]
  idx++;
 800d2b0:	7dfb      	ldrb	r3, [r7, #23]
 800d2b2:	3301      	adds	r3, #1
 800d2b4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d2b6:	e013      	b.n	800d2e0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d2b8:	7dfb      	ldrb	r3, [r7, #23]
 800d2ba:	68ba      	ldr	r2, [r7, #8]
 800d2bc:	4413      	add	r3, r2
 800d2be:	693a      	ldr	r2, [r7, #16]
 800d2c0:	7812      	ldrb	r2, [r2, #0]
 800d2c2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d2c4:	693b      	ldr	r3, [r7, #16]
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	613b      	str	r3, [r7, #16]
    idx++;
 800d2ca:	7dfb      	ldrb	r3, [r7, #23]
 800d2cc:	3301      	adds	r3, #1
 800d2ce:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d2d0:	7dfb      	ldrb	r3, [r7, #23]
 800d2d2:	68ba      	ldr	r2, [r7, #8]
 800d2d4:	4413      	add	r3, r2
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	701a      	strb	r2, [r3, #0]
    idx++;
 800d2da:	7dfb      	ldrb	r3, [r7, #23]
 800d2dc:	3301      	adds	r3, #1
 800d2de:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	781b      	ldrb	r3, [r3, #0]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d1e7      	bne.n	800d2b8 <USBD_GetString+0x52>
 800d2e8:	e000      	b.n	800d2ec <USBD_GetString+0x86>
    return;
 800d2ea:	bf00      	nop
  }
}
 800d2ec:	3718      	adds	r7, #24
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}

0800d2f2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d2f2:	b480      	push	{r7}
 800d2f4:	b085      	sub	sp, #20
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d302:	e005      	b.n	800d310 <USBD_GetLen+0x1e>
  {
    len++;
 800d304:	7bfb      	ldrb	r3, [r7, #15]
 800d306:	3301      	adds	r3, #1
 800d308:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	3301      	adds	r3, #1
 800d30e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d310:	68bb      	ldr	r3, [r7, #8]
 800d312:	781b      	ldrb	r3, [r3, #0]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d1f5      	bne.n	800d304 <USBD_GetLen+0x12>
  }

  return len;
 800d318:	7bfb      	ldrb	r3, [r7, #15]
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3714      	adds	r7, #20
 800d31e:	46bd      	mov	sp, r7
 800d320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d324:	4770      	bx	lr

0800d326 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d326:	b580      	push	{r7, lr}
 800d328:	b084      	sub	sp, #16
 800d32a:	af00      	add	r7, sp, #0
 800d32c:	60f8      	str	r0, [r7, #12]
 800d32e:	60b9      	str	r1, [r7, #8]
 800d330:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	2202      	movs	r2, #2
 800d336:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	687a      	ldr	r2, [r7, #4]
 800d33e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	687a      	ldr	r2, [r7, #4]
 800d344:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	68ba      	ldr	r2, [r7, #8]
 800d34a:	2100      	movs	r1, #0
 800d34c:	68f8      	ldr	r0, [r7, #12]
 800d34e:	f000 fcbb 	bl	800dcc8 <USBD_LL_Transmit>

  return USBD_OK;
 800d352:	2300      	movs	r3, #0
}
 800d354:	4618      	mov	r0, r3
 800d356:	3710      	adds	r7, #16
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}

0800d35c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b084      	sub	sp, #16
 800d360:	af00      	add	r7, sp, #0
 800d362:	60f8      	str	r0, [r7, #12]
 800d364:	60b9      	str	r1, [r7, #8]
 800d366:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	68ba      	ldr	r2, [r7, #8]
 800d36c:	2100      	movs	r1, #0
 800d36e:	68f8      	ldr	r0, [r7, #12]
 800d370:	f000 fcaa 	bl	800dcc8 <USBD_LL_Transmit>

  return USBD_OK;
 800d374:	2300      	movs	r3, #0
}
 800d376:	4618      	mov	r0, r3
 800d378:	3710      	adds	r7, #16
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}

0800d37e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d37e:	b580      	push	{r7, lr}
 800d380:	b084      	sub	sp, #16
 800d382:	af00      	add	r7, sp, #0
 800d384:	60f8      	str	r0, [r7, #12]
 800d386:	60b9      	str	r1, [r7, #8]
 800d388:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	2203      	movs	r2, #3
 800d38e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	687a      	ldr	r2, [r7, #4]
 800d396:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	687a      	ldr	r2, [r7, #4]
 800d39e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	68ba      	ldr	r2, [r7, #8]
 800d3a6:	2100      	movs	r1, #0
 800d3a8:	68f8      	ldr	r0, [r7, #12]
 800d3aa:	f000 fcae 	bl	800dd0a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d3ae:	2300      	movs	r3, #0
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3710      	adds	r7, #16
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}

0800d3b8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b084      	sub	sp, #16
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	60f8      	str	r0, [r7, #12]
 800d3c0:	60b9      	str	r1, [r7, #8]
 800d3c2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	68ba      	ldr	r2, [r7, #8]
 800d3c8:	2100      	movs	r1, #0
 800d3ca:	68f8      	ldr	r0, [r7, #12]
 800d3cc:	f000 fc9d 	bl	800dd0a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d3d0:	2300      	movs	r3, #0
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3710      	adds	r7, #16
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}

0800d3da <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d3da:	b580      	push	{r7, lr}
 800d3dc:	b082      	sub	sp, #8
 800d3de:	af00      	add	r7, sp, #0
 800d3e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2204      	movs	r2, #4
 800d3e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	2100      	movs	r1, #0
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f000 fc69 	bl	800dcc8 <USBD_LL_Transmit>

  return USBD_OK;
 800d3f6:	2300      	movs	r3, #0
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	3708      	adds	r7, #8
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}

0800d400 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b082      	sub	sp, #8
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2205      	movs	r2, #5
 800d40c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d410:	2300      	movs	r3, #0
 800d412:	2200      	movs	r2, #0
 800d414:	2100      	movs	r1, #0
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f000 fc77 	bl	800dd0a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d41c:	2300      	movs	r3, #0
}
 800d41e:	4618      	mov	r0, r3
 800d420:	3708      	adds	r7, #8
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}
	...

0800d428 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800d42c:	2200      	movs	r2, #0
 800d42e:	4912      	ldr	r1, [pc, #72]	; (800d478 <MX_USB_Device_Init+0x50>)
 800d430:	4812      	ldr	r0, [pc, #72]	; (800d47c <MX_USB_Device_Init+0x54>)
 800d432:	f7fe febd 	bl	800c1b0 <USBD_Init>
 800d436:	4603      	mov	r3, r0
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d001      	beq.n	800d440 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800d43c:	f7f4 f94c 	bl	80016d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800d440:	490f      	ldr	r1, [pc, #60]	; (800d480 <MX_USB_Device_Init+0x58>)
 800d442:	480e      	ldr	r0, [pc, #56]	; (800d47c <MX_USB_Device_Init+0x54>)
 800d444:	f7fe fef2 	bl	800c22c <USBD_RegisterClass>
 800d448:	4603      	mov	r3, r0
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d001      	beq.n	800d452 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800d44e:	f7f4 f943 	bl	80016d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800d452:	490c      	ldr	r1, [pc, #48]	; (800d484 <MX_USB_Device_Init+0x5c>)
 800d454:	4809      	ldr	r0, [pc, #36]	; (800d47c <MX_USB_Device_Init+0x54>)
 800d456:	f7fe fe05 	bl	800c064 <USBD_CDC_RegisterInterface>
 800d45a:	4603      	mov	r3, r0
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d001      	beq.n	800d464 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800d460:	f7f4 f93a 	bl	80016d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800d464:	4805      	ldr	r0, [pc, #20]	; (800d47c <MX_USB_Device_Init+0x54>)
 800d466:	f7fe ff15 	bl	800c294 <USBD_Start>
 800d46a:	4603      	mov	r3, r0
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d001      	beq.n	800d474 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800d470:	f7f4 f932 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800d474:	bf00      	nop
 800d476:	bd80      	pop	{r7, pc}
 800d478:	20002804 	.word	0x20002804
 800d47c:	2000327c 	.word	0x2000327c
 800d480:	200026ec 	.word	0x200026ec
 800d484:	200027f0 	.word	0x200027f0

0800d488 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d48c:	2200      	movs	r2, #0
 800d48e:	4905      	ldr	r1, [pc, #20]	; (800d4a4 <CDC_Init_FS+0x1c>)
 800d490:	4805      	ldr	r0, [pc, #20]	; (800d4a8 <CDC_Init_FS+0x20>)
 800d492:	f7fe fdfc 	bl	800c08e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d496:	4905      	ldr	r1, [pc, #20]	; (800d4ac <CDC_Init_FS+0x24>)
 800d498:	4803      	ldr	r0, [pc, #12]	; (800d4a8 <CDC_Init_FS+0x20>)
 800d49a:	f7fe fe16 	bl	800c0ca <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d49e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	bd80      	pop	{r7, pc}
 800d4a4:	20003d4c 	.word	0x20003d4c
 800d4a8:	2000327c 	.word	0x2000327c
 800d4ac:	2000354c 	.word	0x2000354c

0800d4b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d4b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4be:	4770      	bx	lr

0800d4c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b083      	sub	sp, #12
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	6039      	str	r1, [r7, #0]
 800d4ca:	71fb      	strb	r3, [r7, #7]
 800d4cc:	4613      	mov	r3, r2
 800d4ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d4d0:	79fb      	ldrb	r3, [r7, #7]
 800d4d2:	2b23      	cmp	r3, #35	; 0x23
 800d4d4:	d84a      	bhi.n	800d56c <CDC_Control_FS+0xac>
 800d4d6:	a201      	add	r2, pc, #4	; (adr r2, 800d4dc <CDC_Control_FS+0x1c>)
 800d4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4dc:	0800d56d 	.word	0x0800d56d
 800d4e0:	0800d56d 	.word	0x0800d56d
 800d4e4:	0800d56d 	.word	0x0800d56d
 800d4e8:	0800d56d 	.word	0x0800d56d
 800d4ec:	0800d56d 	.word	0x0800d56d
 800d4f0:	0800d56d 	.word	0x0800d56d
 800d4f4:	0800d56d 	.word	0x0800d56d
 800d4f8:	0800d56d 	.word	0x0800d56d
 800d4fc:	0800d56d 	.word	0x0800d56d
 800d500:	0800d56d 	.word	0x0800d56d
 800d504:	0800d56d 	.word	0x0800d56d
 800d508:	0800d56d 	.word	0x0800d56d
 800d50c:	0800d56d 	.word	0x0800d56d
 800d510:	0800d56d 	.word	0x0800d56d
 800d514:	0800d56d 	.word	0x0800d56d
 800d518:	0800d56d 	.word	0x0800d56d
 800d51c:	0800d56d 	.word	0x0800d56d
 800d520:	0800d56d 	.word	0x0800d56d
 800d524:	0800d56d 	.word	0x0800d56d
 800d528:	0800d56d 	.word	0x0800d56d
 800d52c:	0800d56d 	.word	0x0800d56d
 800d530:	0800d56d 	.word	0x0800d56d
 800d534:	0800d56d 	.word	0x0800d56d
 800d538:	0800d56d 	.word	0x0800d56d
 800d53c:	0800d56d 	.word	0x0800d56d
 800d540:	0800d56d 	.word	0x0800d56d
 800d544:	0800d56d 	.word	0x0800d56d
 800d548:	0800d56d 	.word	0x0800d56d
 800d54c:	0800d56d 	.word	0x0800d56d
 800d550:	0800d56d 	.word	0x0800d56d
 800d554:	0800d56d 	.word	0x0800d56d
 800d558:	0800d56d 	.word	0x0800d56d
 800d55c:	0800d56d 	.word	0x0800d56d
 800d560:	0800d56d 	.word	0x0800d56d
 800d564:	0800d56d 	.word	0x0800d56d
 800d568:	0800d56d 	.word	0x0800d56d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d56c:	bf00      	nop
  }

  return (USBD_OK);
 800d56e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d570:	4618      	mov	r0, r3
 800d572:	370c      	adds	r7, #12
 800d574:	46bd      	mov	sp, r7
 800d576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57a:	4770      	bx	lr

0800d57c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b084      	sub	sp, #16
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  input_received_flag = 1;
 800d586:	4b11      	ldr	r3, [pc, #68]	; (800d5cc <CDC_Receive_FS+0x50>)
 800d588:	2201      	movs	r2, #1
 800d58a:	701a      	strb	r2, [r3, #0]
  memset (UserRxBufferFS, '\0', APP_RX_DATA_SIZE);  // clear the buffer
 800d58c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d590:	2100      	movs	r1, #0
 800d592:	480f      	ldr	r0, [pc, #60]	; (800d5d0 <CDC_Receive_FS+0x54>)
 800d594:	f000 fca6 	bl	800dee4 <memset>
  uint8_t len = (uint8_t) Len;
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	73fb      	strb	r3, [r7, #15]
  memcpy(UserRxBufferFS, Buf, len);  // copy the data to the buffer
 800d59c:	7bfb      	ldrb	r3, [r7, #15]
 800d59e:	461a      	mov	r2, r3
 800d5a0:	6879      	ldr	r1, [r7, #4]
 800d5a2:	480b      	ldr	r0, [pc, #44]	; (800d5d0 <CDC_Receive_FS+0x54>)
 800d5a4:	f000 fc90 	bl	800dec8 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 800d5a8:	7bfb      	ldrb	r3, [r7, #15]
 800d5aa:	461a      	mov	r2, r3
 800d5ac:	2100      	movs	r1, #0
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f000 fc98 	bl	800dee4 <memset>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d5b4:	6879      	ldr	r1, [r7, #4]
 800d5b6:	4807      	ldr	r0, [pc, #28]	; (800d5d4 <CDC_Receive_FS+0x58>)
 800d5b8:	f7fe fd87 	bl	800c0ca <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d5bc:	4805      	ldr	r0, [pc, #20]	; (800d5d4 <CDC_Receive_FS+0x58>)
 800d5be:	f7fe fdcd 	bl	800c15c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d5c2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3710      	adds	r7, #16
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}
 800d5cc:	2000454c 	.word	0x2000454c
 800d5d0:	2000354c 	.word	0x2000354c
 800d5d4:	2000327c 	.word	0x2000327c

0800d5d8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b084      	sub	sp, #16
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
 800d5e0:	460b      	mov	r3, r1
 800d5e2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d5e8:	4b0d      	ldr	r3, [pc, #52]	; (800d620 <CDC_Transmit_FS+0x48>)
 800d5ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d5ee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d001      	beq.n	800d5fe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	e00b      	b.n	800d616 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d5fe:	887b      	ldrh	r3, [r7, #2]
 800d600:	461a      	mov	r2, r3
 800d602:	6879      	ldr	r1, [r7, #4]
 800d604:	4806      	ldr	r0, [pc, #24]	; (800d620 <CDC_Transmit_FS+0x48>)
 800d606:	f7fe fd42 	bl	800c08e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d60a:	4805      	ldr	r0, [pc, #20]	; (800d620 <CDC_Transmit_FS+0x48>)
 800d60c:	f7fe fd76 	bl	800c0fc <USBD_CDC_TransmitPacket>
 800d610:	4603      	mov	r3, r0
 800d612:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d614:	7bfb      	ldrb	r3, [r7, #15]
}
 800d616:	4618      	mov	r0, r3
 800d618:	3710      	adds	r7, #16
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}
 800d61e:	bf00      	nop
 800d620:	2000327c 	.word	0x2000327c

0800d624 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d624:	b480      	push	{r7}
 800d626:	b087      	sub	sp, #28
 800d628:	af00      	add	r7, sp, #0
 800d62a:	60f8      	str	r0, [r7, #12]
 800d62c:	60b9      	str	r1, [r7, #8]
 800d62e:	4613      	mov	r3, r2
 800d630:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d632:	2300      	movs	r3, #0
 800d634:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d636:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	371c      	adds	r7, #28
 800d63e:	46bd      	mov	sp, r7
 800d640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d644:	4770      	bx	lr
	...

0800d648 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d648:	b480      	push	{r7}
 800d64a:	b083      	sub	sp, #12
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	4603      	mov	r3, r0
 800d650:	6039      	str	r1, [r7, #0]
 800d652:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	2212      	movs	r2, #18
 800d658:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800d65a:	4b03      	ldr	r3, [pc, #12]	; (800d668 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	370c      	adds	r7, #12
 800d660:	46bd      	mov	sp, r7
 800d662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d666:	4770      	bx	lr
 800d668:	20002824 	.word	0x20002824

0800d66c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b083      	sub	sp, #12
 800d670:	af00      	add	r7, sp, #0
 800d672:	4603      	mov	r3, r0
 800d674:	6039      	str	r1, [r7, #0]
 800d676:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	2204      	movs	r2, #4
 800d67c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d67e:	4b03      	ldr	r3, [pc, #12]	; (800d68c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800d680:	4618      	mov	r0, r3
 800d682:	370c      	adds	r7, #12
 800d684:	46bd      	mov	sp, r7
 800d686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68a:	4770      	bx	lr
 800d68c:	20002838 	.word	0x20002838

0800d690 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
 800d696:	4603      	mov	r3, r0
 800d698:	6039      	str	r1, [r7, #0]
 800d69a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d69c:	79fb      	ldrb	r3, [r7, #7]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d105      	bne.n	800d6ae <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d6a2:	683a      	ldr	r2, [r7, #0]
 800d6a4:	4907      	ldr	r1, [pc, #28]	; (800d6c4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d6a6:	4808      	ldr	r0, [pc, #32]	; (800d6c8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800d6a8:	f7ff fddd 	bl	800d266 <USBD_GetString>
 800d6ac:	e004      	b.n	800d6b8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800d6ae:	683a      	ldr	r2, [r7, #0]
 800d6b0:	4904      	ldr	r1, [pc, #16]	; (800d6c4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800d6b2:	4805      	ldr	r0, [pc, #20]	; (800d6c8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800d6b4:	f7ff fdd7 	bl	800d266 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d6b8:	4b02      	ldr	r3, [pc, #8]	; (800d6c4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	3708      	adds	r7, #8
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}
 800d6c2:	bf00      	nop
 800d6c4:	20004550 	.word	0x20004550
 800d6c8:	08010aa4 	.word	0x08010aa4

0800d6cc <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b082      	sub	sp, #8
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	6039      	str	r1, [r7, #0]
 800d6d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d6d8:	683a      	ldr	r2, [r7, #0]
 800d6da:	4904      	ldr	r1, [pc, #16]	; (800d6ec <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800d6dc:	4804      	ldr	r0, [pc, #16]	; (800d6f0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800d6de:	f7ff fdc2 	bl	800d266 <USBD_GetString>
  return USBD_StrDesc;
 800d6e2:	4b02      	ldr	r3, [pc, #8]	; (800d6ec <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3708      	adds	r7, #8
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}
 800d6ec:	20004550 	.word	0x20004550
 800d6f0:	08010abc 	.word	0x08010abc

0800d6f4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b082      	sub	sp, #8
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	6039      	str	r1, [r7, #0]
 800d6fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	221a      	movs	r2, #26
 800d704:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d706:	f000 f843 	bl	800d790 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800d70a:	4b02      	ldr	r3, [pc, #8]	; (800d714 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3708      	adds	r7, #8
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}
 800d714:	2000283c 	.word	0x2000283c

0800d718 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b082      	sub	sp, #8
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	4603      	mov	r3, r0
 800d720:	6039      	str	r1, [r7, #0]
 800d722:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d724:	79fb      	ldrb	r3, [r7, #7]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d105      	bne.n	800d736 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d72a:	683a      	ldr	r2, [r7, #0]
 800d72c:	4907      	ldr	r1, [pc, #28]	; (800d74c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d72e:	4808      	ldr	r0, [pc, #32]	; (800d750 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d730:	f7ff fd99 	bl	800d266 <USBD_GetString>
 800d734:	e004      	b.n	800d740 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800d736:	683a      	ldr	r2, [r7, #0]
 800d738:	4904      	ldr	r1, [pc, #16]	; (800d74c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800d73a:	4805      	ldr	r0, [pc, #20]	; (800d750 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800d73c:	f7ff fd93 	bl	800d266 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d740:	4b02      	ldr	r3, [pc, #8]	; (800d74c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800d742:	4618      	mov	r0, r3
 800d744:	3708      	adds	r7, #8
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	20004550 	.word	0x20004550
 800d750:	08010ad0 	.word	0x08010ad0

0800d754 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b082      	sub	sp, #8
 800d758:	af00      	add	r7, sp, #0
 800d75a:	4603      	mov	r3, r0
 800d75c:	6039      	str	r1, [r7, #0]
 800d75e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d760:	79fb      	ldrb	r3, [r7, #7]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d105      	bne.n	800d772 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d766:	683a      	ldr	r2, [r7, #0]
 800d768:	4907      	ldr	r1, [pc, #28]	; (800d788 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d76a:	4808      	ldr	r0, [pc, #32]	; (800d78c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d76c:	f7ff fd7b 	bl	800d266 <USBD_GetString>
 800d770:	e004      	b.n	800d77c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800d772:	683a      	ldr	r2, [r7, #0]
 800d774:	4904      	ldr	r1, [pc, #16]	; (800d788 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800d776:	4805      	ldr	r0, [pc, #20]	; (800d78c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800d778:	f7ff fd75 	bl	800d266 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d77c:	4b02      	ldr	r3, [pc, #8]	; (800d788 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800d77e:	4618      	mov	r0, r3
 800d780:	3708      	adds	r7, #8
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}
 800d786:	bf00      	nop
 800d788:	20004550 	.word	0x20004550
 800d78c:	08010adc 	.word	0x08010adc

0800d790 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b084      	sub	sp, #16
 800d794:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d796:	4b0f      	ldr	r3, [pc, #60]	; (800d7d4 <Get_SerialNum+0x44>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d79c:	4b0e      	ldr	r3, [pc, #56]	; (800d7d8 <Get_SerialNum+0x48>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d7a2:	4b0e      	ldr	r3, [pc, #56]	; (800d7dc <Get_SerialNum+0x4c>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d7a8:	68fa      	ldr	r2, [r7, #12]
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	4413      	add	r3, r2
 800d7ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d009      	beq.n	800d7ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d7b6:	2208      	movs	r2, #8
 800d7b8:	4909      	ldr	r1, [pc, #36]	; (800d7e0 <Get_SerialNum+0x50>)
 800d7ba:	68f8      	ldr	r0, [r7, #12]
 800d7bc:	f000 f814 	bl	800d7e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d7c0:	2204      	movs	r2, #4
 800d7c2:	4908      	ldr	r1, [pc, #32]	; (800d7e4 <Get_SerialNum+0x54>)
 800d7c4:	68b8      	ldr	r0, [r7, #8]
 800d7c6:	f000 f80f 	bl	800d7e8 <IntToUnicode>
  }
}
 800d7ca:	bf00      	nop
 800d7cc:	3710      	adds	r7, #16
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}
 800d7d2:	bf00      	nop
 800d7d4:	1fff7590 	.word	0x1fff7590
 800d7d8:	1fff7594 	.word	0x1fff7594
 800d7dc:	1fff7598 	.word	0x1fff7598
 800d7e0:	2000283e 	.word	0x2000283e
 800d7e4:	2000284e 	.word	0x2000284e

0800d7e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b087      	sub	sp, #28
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	60f8      	str	r0, [r7, #12]
 800d7f0:	60b9      	str	r1, [r7, #8]
 800d7f2:	4613      	mov	r3, r2
 800d7f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	75fb      	strb	r3, [r7, #23]
 800d7fe:	e027      	b.n	800d850 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	0f1b      	lsrs	r3, r3, #28
 800d804:	2b09      	cmp	r3, #9
 800d806:	d80b      	bhi.n	800d820 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	0f1b      	lsrs	r3, r3, #28
 800d80c:	b2da      	uxtb	r2, r3
 800d80e:	7dfb      	ldrb	r3, [r7, #23]
 800d810:	005b      	lsls	r3, r3, #1
 800d812:	4619      	mov	r1, r3
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	440b      	add	r3, r1
 800d818:	3230      	adds	r2, #48	; 0x30
 800d81a:	b2d2      	uxtb	r2, r2
 800d81c:	701a      	strb	r2, [r3, #0]
 800d81e:	e00a      	b.n	800d836 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	0f1b      	lsrs	r3, r3, #28
 800d824:	b2da      	uxtb	r2, r3
 800d826:	7dfb      	ldrb	r3, [r7, #23]
 800d828:	005b      	lsls	r3, r3, #1
 800d82a:	4619      	mov	r1, r3
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	440b      	add	r3, r1
 800d830:	3237      	adds	r2, #55	; 0x37
 800d832:	b2d2      	uxtb	r2, r2
 800d834:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	011b      	lsls	r3, r3, #4
 800d83a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d83c:	7dfb      	ldrb	r3, [r7, #23]
 800d83e:	005b      	lsls	r3, r3, #1
 800d840:	3301      	adds	r3, #1
 800d842:	68ba      	ldr	r2, [r7, #8]
 800d844:	4413      	add	r3, r2
 800d846:	2200      	movs	r2, #0
 800d848:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d84a:	7dfb      	ldrb	r3, [r7, #23]
 800d84c:	3301      	adds	r3, #1
 800d84e:	75fb      	strb	r3, [r7, #23]
 800d850:	7dfa      	ldrb	r2, [r7, #23]
 800d852:	79fb      	ldrb	r3, [r7, #7]
 800d854:	429a      	cmp	r2, r3
 800d856:	d3d3      	bcc.n	800d800 <IntToUnicode+0x18>
  }
}
 800d858:	bf00      	nop
 800d85a:	bf00      	nop
 800d85c:	371c      	adds	r7, #28
 800d85e:	46bd      	mov	sp, r7
 800d860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d864:	4770      	bx	lr
	...

0800d868 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b098      	sub	sp, #96	; 0x60
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d870:	f107 030c 	add.w	r3, r7, #12
 800d874:	2254      	movs	r2, #84	; 0x54
 800d876:	2100      	movs	r1, #0
 800d878:	4618      	mov	r0, r3
 800d87a:	f000 fb33 	bl	800dee4 <memset>
  if(pcdHandle->Instance==USB)
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	4a15      	ldr	r2, [pc, #84]	; (800d8d8 <HAL_PCD_MspInit+0x70>)
 800d884:	4293      	cmp	r3, r2
 800d886:	d122      	bne.n	800d8ce <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d88c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d88e:	2300      	movs	r3, #0
 800d890:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d892:	f107 030c 	add.w	r3, r7, #12
 800d896:	4618      	mov	r0, r3
 800d898:	f7f9 fb04 	bl	8006ea4 <HAL_RCCEx_PeriphCLKConfig>
 800d89c:	4603      	mov	r3, r0
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d001      	beq.n	800d8a6 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800d8a2:	f7f3 ff19 	bl	80016d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d8a6:	4b0d      	ldr	r3, [pc, #52]	; (800d8dc <HAL_PCD_MspInit+0x74>)
 800d8a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8aa:	4a0c      	ldr	r2, [pc, #48]	; (800d8dc <HAL_PCD_MspInit+0x74>)
 800d8ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d8b0:	6593      	str	r3, [r2, #88]	; 0x58
 800d8b2:	4b0a      	ldr	r3, [pc, #40]	; (800d8dc <HAL_PCD_MspInit+0x74>)
 800d8b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d8ba:	60bb      	str	r3, [r7, #8]
 800d8bc:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800d8be:	2200      	movs	r2, #0
 800d8c0:	2100      	movs	r1, #0
 800d8c2:	2014      	movs	r0, #20
 800d8c4:	f7f5 fecb 	bl	800365e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800d8c8:	2014      	movs	r0, #20
 800d8ca:	f7f5 fee2 	bl	8003692 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d8ce:	bf00      	nop
 800d8d0:	3760      	adds	r7, #96	; 0x60
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}
 800d8d6:	bf00      	nop
 800d8d8:	40005c00 	.word	0x40005c00
 800d8dc:	40021000 	.word	0x40021000

0800d8e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d8f4:	4619      	mov	r1, r3
 800d8f6:	4610      	mov	r0, r2
 800d8f8:	f7fe fd17 	bl	800c32a <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800d8fc:	bf00      	nop
 800d8fe:	3708      	adds	r7, #8
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}

0800d904 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b082      	sub	sp, #8
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	460b      	mov	r3, r1
 800d90e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800d916:	78fa      	ldrb	r2, [r7, #3]
 800d918:	6879      	ldr	r1, [r7, #4]
 800d91a:	4613      	mov	r3, r2
 800d91c:	009b      	lsls	r3, r3, #2
 800d91e:	4413      	add	r3, r2
 800d920:	00db      	lsls	r3, r3, #3
 800d922:	440b      	add	r3, r1
 800d924:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d928:	681a      	ldr	r2, [r3, #0]
 800d92a:	78fb      	ldrb	r3, [r7, #3]
 800d92c:	4619      	mov	r1, r3
 800d92e:	f7fe fd51 	bl	800c3d4 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800d932:	bf00      	nop
 800d934:	3708      	adds	r7, #8
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}

0800d93a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d93a:	b580      	push	{r7, lr}
 800d93c:	b082      	sub	sp, #8
 800d93e:	af00      	add	r7, sp, #0
 800d940:	6078      	str	r0, [r7, #4]
 800d942:	460b      	mov	r3, r1
 800d944:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800d94c:	78fa      	ldrb	r2, [r7, #3]
 800d94e:	6879      	ldr	r1, [r7, #4]
 800d950:	4613      	mov	r3, r2
 800d952:	009b      	lsls	r3, r3, #2
 800d954:	4413      	add	r3, r2
 800d956:	00db      	lsls	r3, r3, #3
 800d958:	440b      	add	r3, r1
 800d95a:	333c      	adds	r3, #60	; 0x3c
 800d95c:	681a      	ldr	r2, [r3, #0]
 800d95e:	78fb      	ldrb	r3, [r7, #3]
 800d960:	4619      	mov	r1, r3
 800d962:	f7fe fd9a 	bl	800c49a <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800d966:	bf00      	nop
 800d968:	3708      	adds	r7, #8
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}

0800d96e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d96e:	b580      	push	{r7, lr}
 800d970:	b082      	sub	sp, #8
 800d972:	af00      	add	r7, sp, #0
 800d974:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d97c:	4618      	mov	r0, r3
 800d97e:	f7fe feae 	bl	800c6de <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800d982:	bf00      	nop
 800d984:	3708      	adds	r7, #8
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}

0800d98a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d98a:	b580      	push	{r7, lr}
 800d98c:	b084      	sub	sp, #16
 800d98e:	af00      	add	r7, sp, #0
 800d990:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d992:	2301      	movs	r3, #1
 800d994:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	689b      	ldr	r3, [r3, #8]
 800d99a:	2b02      	cmp	r3, #2
 800d99c:	d001      	beq.n	800d9a2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d99e:	f7f3 fe9b 	bl	80016d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d9a8:	7bfa      	ldrb	r2, [r7, #15]
 800d9aa:	4611      	mov	r1, r2
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f7fe fe58 	bl	800c662 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f7fe fe04 	bl	800c5c6 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800d9be:	bf00      	nop
 800d9c0:	3710      	adds	r7, #16
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}
	...

0800d9c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f7fe fe53 	bl	800c682 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	699b      	ldr	r3, [r3, #24]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d005      	beq.n	800d9f0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d9e4:	4b04      	ldr	r3, [pc, #16]	; (800d9f8 <HAL_PCD_SuspendCallback+0x30>)
 800d9e6:	691b      	ldr	r3, [r3, #16]
 800d9e8:	4a03      	ldr	r2, [pc, #12]	; (800d9f8 <HAL_PCD_SuspendCallback+0x30>)
 800d9ea:	f043 0306 	orr.w	r3, r3, #6
 800d9ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800d9f0:	bf00      	nop
 800d9f2:	3708      	adds	r7, #8
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}
 800d9f8:	e000ed00 	.word	0xe000ed00

0800d9fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	699b      	ldr	r3, [r3, #24]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d007      	beq.n	800da1c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800da0c:	4b08      	ldr	r3, [pc, #32]	; (800da30 <HAL_PCD_ResumeCallback+0x34>)
 800da0e:	691b      	ldr	r3, [r3, #16]
 800da10:	4a07      	ldr	r2, [pc, #28]	; (800da30 <HAL_PCD_ResumeCallback+0x34>)
 800da12:	f023 0306 	bic.w	r3, r3, #6
 800da16:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800da18:	f000 f9fa 	bl	800de10 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800da22:	4618      	mov	r0, r3
 800da24:	f7fe fe43 	bl	800c6ae <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800da28:	bf00      	nop
 800da2a:	3708      	adds	r7, #8
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}
 800da30:	e000ed00 	.word	0xe000ed00

0800da34 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b082      	sub	sp, #8
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800da3c:	4a2b      	ldr	r2, [pc, #172]	; (800daec <USBD_LL_Init+0xb8>)
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	4a29      	ldr	r2, [pc, #164]	; (800daec <USBD_LL_Init+0xb8>)
 800da48:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800da4c:	4b27      	ldr	r3, [pc, #156]	; (800daec <USBD_LL_Init+0xb8>)
 800da4e:	4a28      	ldr	r2, [pc, #160]	; (800daf0 <USBD_LL_Init+0xbc>)
 800da50:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800da52:	4b26      	ldr	r3, [pc, #152]	; (800daec <USBD_LL_Init+0xb8>)
 800da54:	2208      	movs	r2, #8
 800da56:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800da58:	4b24      	ldr	r3, [pc, #144]	; (800daec <USBD_LL_Init+0xb8>)
 800da5a:	2202      	movs	r2, #2
 800da5c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800da5e:	4b23      	ldr	r3, [pc, #140]	; (800daec <USBD_LL_Init+0xb8>)
 800da60:	2202      	movs	r2, #2
 800da62:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800da64:	4b21      	ldr	r3, [pc, #132]	; (800daec <USBD_LL_Init+0xb8>)
 800da66:	2200      	movs	r2, #0
 800da68:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800da6a:	4b20      	ldr	r3, [pc, #128]	; (800daec <USBD_LL_Init+0xb8>)
 800da6c:	2200      	movs	r2, #0
 800da6e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800da70:	4b1e      	ldr	r3, [pc, #120]	; (800daec <USBD_LL_Init+0xb8>)
 800da72:	2200      	movs	r2, #0
 800da74:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800da76:	4b1d      	ldr	r3, [pc, #116]	; (800daec <USBD_LL_Init+0xb8>)
 800da78:	2200      	movs	r2, #0
 800da7a:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800da7c:	481b      	ldr	r0, [pc, #108]	; (800daec <USBD_LL_Init+0xb8>)
 800da7e:	f7f6 ff36 	bl	80048ee <HAL_PCD_Init>
 800da82:	4603      	mov	r3, r0
 800da84:	2b00      	cmp	r3, #0
 800da86:	d001      	beq.n	800da8c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800da88:	f7f3 fe26 	bl	80016d8 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800da92:	2318      	movs	r3, #24
 800da94:	2200      	movs	r2, #0
 800da96:	2100      	movs	r1, #0
 800da98:	f7f8 fbef 	bl	800627a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800daa2:	2358      	movs	r3, #88	; 0x58
 800daa4:	2200      	movs	r2, #0
 800daa6:	2180      	movs	r1, #128	; 0x80
 800daa8:	f7f8 fbe7 	bl	800627a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dab2:	23c0      	movs	r3, #192	; 0xc0
 800dab4:	2200      	movs	r2, #0
 800dab6:	2181      	movs	r1, #129	; 0x81
 800dab8:	f7f8 fbdf 	bl	800627a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dac2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800dac6:	2200      	movs	r2, #0
 800dac8:	2101      	movs	r1, #1
 800daca:	f7f8 fbd6 	bl	800627a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dad4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dad8:	2200      	movs	r2, #0
 800dada:	2182      	movs	r1, #130	; 0x82
 800dadc:	f7f8 fbcd 	bl	800627a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800dae0:	2300      	movs	r3, #0
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3708      	adds	r7, #8
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
 800daea:	bf00      	nop
 800daec:	20004750 	.word	0x20004750
 800daf0:	40005c00 	.word	0x40005c00

0800daf4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b084      	sub	sp, #16
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dafc:	2300      	movs	r3, #0
 800dafe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db00:	2300      	movs	r3, #0
 800db02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7f6 ffd4 	bl	8004ab8 <HAL_PCD_Start>
 800db10:	4603      	mov	r3, r0
 800db12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db14:	7bfb      	ldrb	r3, [r7, #15]
 800db16:	4618      	mov	r0, r3
 800db18:	f000 f980 	bl	800de1c <USBD_Get_USB_Status>
 800db1c:	4603      	mov	r3, r0
 800db1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db20:	7bbb      	ldrb	r3, [r7, #14]
}
 800db22:	4618      	mov	r0, r3
 800db24:	3710      	adds	r7, #16
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}

0800db2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800db2a:	b580      	push	{r7, lr}
 800db2c:	b084      	sub	sp, #16
 800db2e:	af00      	add	r7, sp, #0
 800db30:	6078      	str	r0, [r7, #4]
 800db32:	4608      	mov	r0, r1
 800db34:	4611      	mov	r1, r2
 800db36:	461a      	mov	r2, r3
 800db38:	4603      	mov	r3, r0
 800db3a:	70fb      	strb	r3, [r7, #3]
 800db3c:	460b      	mov	r3, r1
 800db3e:	70bb      	strb	r3, [r7, #2]
 800db40:	4613      	mov	r3, r2
 800db42:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db44:	2300      	movs	r3, #0
 800db46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db48:	2300      	movs	r3, #0
 800db4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800db52:	78bb      	ldrb	r3, [r7, #2]
 800db54:	883a      	ldrh	r2, [r7, #0]
 800db56:	78f9      	ldrb	r1, [r7, #3]
 800db58:	f7f7 f91c 	bl	8004d94 <HAL_PCD_EP_Open>
 800db5c:	4603      	mov	r3, r0
 800db5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db60:	7bfb      	ldrb	r3, [r7, #15]
 800db62:	4618      	mov	r0, r3
 800db64:	f000 f95a 	bl	800de1c <USBD_Get_USB_Status>
 800db68:	4603      	mov	r3, r0
 800db6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800db6e:	4618      	mov	r0, r3
 800db70:	3710      	adds	r7, #16
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}

0800db76 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db76:	b580      	push	{r7, lr}
 800db78:	b084      	sub	sp, #16
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	6078      	str	r0, [r7, #4]
 800db7e:	460b      	mov	r3, r1
 800db80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db82:	2300      	movs	r3, #0
 800db84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db86:	2300      	movs	r3, #0
 800db88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800db90:	78fa      	ldrb	r2, [r7, #3]
 800db92:	4611      	mov	r1, r2
 800db94:	4618      	mov	r0, r3
 800db96:	f7f7 f963 	bl	8004e60 <HAL_PCD_EP_Close>
 800db9a:	4603      	mov	r3, r0
 800db9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db9e:	7bfb      	ldrb	r3, [r7, #15]
 800dba0:	4618      	mov	r0, r3
 800dba2:	f000 f93b 	bl	800de1c <USBD_Get_USB_Status>
 800dba6:	4603      	mov	r3, r0
 800dba8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	3710      	adds	r7, #16
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}

0800dbb4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b084      	sub	sp, #16
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	460b      	mov	r3, r1
 800dbbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dbce:	78fa      	ldrb	r2, [r7, #3]
 800dbd0:	4611      	mov	r1, r2
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f7f7 fa24 	bl	8005020 <HAL_PCD_EP_SetStall>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbdc:	7bfb      	ldrb	r3, [r7, #15]
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f000 f91c 	bl	800de1c <USBD_Get_USB_Status>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbe8:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	3710      	adds	r7, #16
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}

0800dbf2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dbf2:	b580      	push	{r7, lr}
 800dbf4:	b084      	sub	sp, #16
 800dbf6:	af00      	add	r7, sp, #0
 800dbf8:	6078      	str	r0, [r7, #4]
 800dbfa:	460b      	mov	r3, r1
 800dbfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc02:	2300      	movs	r3, #0
 800dc04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dc0c:	78fa      	ldrb	r2, [r7, #3]
 800dc0e:	4611      	mov	r1, r2
 800dc10:	4618      	mov	r0, r3
 800dc12:	f7f7 fa57 	bl	80050c4 <HAL_PCD_EP_ClrStall>
 800dc16:	4603      	mov	r3, r0
 800dc18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc1a:	7bfb      	ldrb	r3, [r7, #15]
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f000 f8fd 	bl	800de1c <USBD_Get_USB_Status>
 800dc22:	4603      	mov	r3, r0
 800dc24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc26:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3710      	adds	r7, #16
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}

0800dc30 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc30:	b480      	push	{r7}
 800dc32:	b085      	sub	sp, #20
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
 800dc38:	460b      	mov	r3, r1
 800dc3a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dc42:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dc44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	da0c      	bge.n	800dc66 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dc4c:	78fb      	ldrb	r3, [r7, #3]
 800dc4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc52:	68f9      	ldr	r1, [r7, #12]
 800dc54:	1c5a      	adds	r2, r3, #1
 800dc56:	4613      	mov	r3, r2
 800dc58:	009b      	lsls	r3, r3, #2
 800dc5a:	4413      	add	r3, r2
 800dc5c:	00db      	lsls	r3, r3, #3
 800dc5e:	440b      	add	r3, r1
 800dc60:	3302      	adds	r3, #2
 800dc62:	781b      	ldrb	r3, [r3, #0]
 800dc64:	e00b      	b.n	800dc7e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dc66:	78fb      	ldrb	r3, [r7, #3]
 800dc68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dc6c:	68f9      	ldr	r1, [r7, #12]
 800dc6e:	4613      	mov	r3, r2
 800dc70:	009b      	lsls	r3, r3, #2
 800dc72:	4413      	add	r3, r2
 800dc74:	00db      	lsls	r3, r3, #3
 800dc76:	440b      	add	r3, r1
 800dc78:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800dc7c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dc7e:	4618      	mov	r0, r3
 800dc80:	3714      	adds	r7, #20
 800dc82:	46bd      	mov	sp, r7
 800dc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc88:	4770      	bx	lr

0800dc8a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dc8a:	b580      	push	{r7, lr}
 800dc8c:	b084      	sub	sp, #16
 800dc8e:	af00      	add	r7, sp, #0
 800dc90:	6078      	str	r0, [r7, #4]
 800dc92:	460b      	mov	r3, r1
 800dc94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc96:	2300      	movs	r3, #0
 800dc98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dca4:	78fa      	ldrb	r2, [r7, #3]
 800dca6:	4611      	mov	r1, r2
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f7f7 f84e 	bl	8004d4a <HAL_PCD_SetAddress>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcb2:	7bfb      	ldrb	r3, [r7, #15]
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f000 f8b1 	bl	800de1c <USBD_Get_USB_Status>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dcbe:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3710      	adds	r7, #16
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}

0800dcc8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b086      	sub	sp, #24
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	60f8      	str	r0, [r7, #12]
 800dcd0:	607a      	str	r2, [r7, #4]
 800dcd2:	603b      	str	r3, [r7, #0]
 800dcd4:	460b      	mov	r3, r1
 800dcd6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcd8:	2300      	movs	r3, #0
 800dcda:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcdc:	2300      	movs	r3, #0
 800dcde:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dce6:	7af9      	ldrb	r1, [r7, #11]
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	687a      	ldr	r2, [r7, #4]
 800dcec:	f7f7 f955 	bl	8004f9a <HAL_PCD_EP_Transmit>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcf4:	7dfb      	ldrb	r3, [r7, #23]
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f000 f890 	bl	800de1c <USBD_Get_USB_Status>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dd00:	7dbb      	ldrb	r3, [r7, #22]
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3718      	adds	r7, #24
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}

0800dd0a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dd0a:	b580      	push	{r7, lr}
 800dd0c:	b086      	sub	sp, #24
 800dd0e:	af00      	add	r7, sp, #0
 800dd10:	60f8      	str	r0, [r7, #12]
 800dd12:	607a      	str	r2, [r7, #4]
 800dd14:	603b      	str	r3, [r7, #0]
 800dd16:	460b      	mov	r3, r1
 800dd18:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dd28:	7af9      	ldrb	r1, [r7, #11]
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	687a      	ldr	r2, [r7, #4]
 800dd2e:	f7f7 f8df 	bl	8004ef0 <HAL_PCD_EP_Receive>
 800dd32:	4603      	mov	r3, r0
 800dd34:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd36:	7dfb      	ldrb	r3, [r7, #23]
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f000 f86f 	bl	800de1c <USBD_Get_USB_Status>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dd42:	7dbb      	ldrb	r3, [r7, #22]
}
 800dd44:	4618      	mov	r0, r3
 800dd46:	3718      	adds	r7, #24
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}

0800dd4c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b082      	sub	sp, #8
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
 800dd54:	460b      	mov	r3, r1
 800dd56:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dd5e:	78fa      	ldrb	r2, [r7, #3]
 800dd60:	4611      	mov	r1, r2
 800dd62:	4618      	mov	r0, r3
 800dd64:	f7f7 f901 	bl	8004f6a <HAL_PCD_EP_GetRxCount>
 800dd68:	4603      	mov	r3, r0
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3708      	adds	r7, #8
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}
	...

0800dd74 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b082      	sub	sp, #8
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
 800dd7c:	460b      	mov	r3, r1
 800dd7e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800dd80:	78fb      	ldrb	r3, [r7, #3]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d002      	beq.n	800dd8c <HAL_PCDEx_LPM_Callback+0x18>
 800dd86:	2b01      	cmp	r3, #1
 800dd88:	d013      	beq.n	800ddb2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800dd8a:	e023      	b.n	800ddd4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	699b      	ldr	r3, [r3, #24]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d007      	beq.n	800dda4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800dd94:	f000 f83c 	bl	800de10 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dd98:	4b10      	ldr	r3, [pc, #64]	; (800dddc <HAL_PCDEx_LPM_Callback+0x68>)
 800dd9a:	691b      	ldr	r3, [r3, #16]
 800dd9c:	4a0f      	ldr	r2, [pc, #60]	; (800dddc <HAL_PCDEx_LPM_Callback+0x68>)
 800dd9e:	f023 0306 	bic.w	r3, r3, #6
 800dda2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f7fe fc7f 	bl	800c6ae <USBD_LL_Resume>
    break;
 800ddb0:	e010      	b.n	800ddd4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f7fe fc62 	bl	800c682 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	699b      	ldr	r3, [r3, #24]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d005      	beq.n	800ddd2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ddc6:	4b05      	ldr	r3, [pc, #20]	; (800dddc <HAL_PCDEx_LPM_Callback+0x68>)
 800ddc8:	691b      	ldr	r3, [r3, #16]
 800ddca:	4a04      	ldr	r2, [pc, #16]	; (800dddc <HAL_PCDEx_LPM_Callback+0x68>)
 800ddcc:	f043 0306 	orr.w	r3, r3, #6
 800ddd0:	6113      	str	r3, [r2, #16]
    break;
 800ddd2:	bf00      	nop
}
 800ddd4:	bf00      	nop
 800ddd6:	3708      	adds	r7, #8
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}
 800dddc:	e000ed00 	.word	0xe000ed00

0800dde0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dde0:	b480      	push	{r7}
 800dde2:	b083      	sub	sp, #12
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dde8:	4b03      	ldr	r3, [pc, #12]	; (800ddf8 <USBD_static_malloc+0x18>)
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	370c      	adds	r7, #12
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf4:	4770      	bx	lr
 800ddf6:	bf00      	nop
 800ddf8:	20004a44 	.word	0x20004a44

0800ddfc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ddfc:	b480      	push	{r7}
 800ddfe:	b083      	sub	sp, #12
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]

}
 800de04:	bf00      	nop
 800de06:	370c      	adds	r7, #12
 800de08:	46bd      	mov	sp, r7
 800de0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0e:	4770      	bx	lr

0800de10 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800de14:	f7f2 ffa6 	bl	8000d64 <SystemClock_Config>
}
 800de18:	bf00      	nop
 800de1a:	bd80      	pop	{r7, pc}

0800de1c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800de1c:	b480      	push	{r7}
 800de1e:	b085      	sub	sp, #20
 800de20:	af00      	add	r7, sp, #0
 800de22:	4603      	mov	r3, r0
 800de24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de26:	2300      	movs	r3, #0
 800de28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800de2a:	79fb      	ldrb	r3, [r7, #7]
 800de2c:	2b03      	cmp	r3, #3
 800de2e:	d817      	bhi.n	800de60 <USBD_Get_USB_Status+0x44>
 800de30:	a201      	add	r2, pc, #4	; (adr r2, 800de38 <USBD_Get_USB_Status+0x1c>)
 800de32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de36:	bf00      	nop
 800de38:	0800de49 	.word	0x0800de49
 800de3c:	0800de4f 	.word	0x0800de4f
 800de40:	0800de55 	.word	0x0800de55
 800de44:	0800de5b 	.word	0x0800de5b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800de48:	2300      	movs	r3, #0
 800de4a:	73fb      	strb	r3, [r7, #15]
    break;
 800de4c:	e00b      	b.n	800de66 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800de4e:	2303      	movs	r3, #3
 800de50:	73fb      	strb	r3, [r7, #15]
    break;
 800de52:	e008      	b.n	800de66 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800de54:	2301      	movs	r3, #1
 800de56:	73fb      	strb	r3, [r7, #15]
    break;
 800de58:	e005      	b.n	800de66 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800de5a:	2303      	movs	r3, #3
 800de5c:	73fb      	strb	r3, [r7, #15]
    break;
 800de5e:	e002      	b.n	800de66 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800de60:	2303      	movs	r3, #3
 800de62:	73fb      	strb	r3, [r7, #15]
    break;
 800de64:	bf00      	nop
  }
  return usb_status;
 800de66:	7bfb      	ldrb	r3, [r7, #15]
}
 800de68:	4618      	mov	r0, r3
 800de6a:	3714      	adds	r7, #20
 800de6c:	46bd      	mov	sp, r7
 800de6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de72:	4770      	bx	lr

0800de74 <__errno>:
 800de74:	4b01      	ldr	r3, [pc, #4]	; (800de7c <__errno+0x8>)
 800de76:	6818      	ldr	r0, [r3, #0]
 800de78:	4770      	bx	lr
 800de7a:	bf00      	nop
 800de7c:	20002858 	.word	0x20002858

0800de80 <__libc_init_array>:
 800de80:	b570      	push	{r4, r5, r6, lr}
 800de82:	4d0d      	ldr	r5, [pc, #52]	; (800deb8 <__libc_init_array+0x38>)
 800de84:	4c0d      	ldr	r4, [pc, #52]	; (800debc <__libc_init_array+0x3c>)
 800de86:	1b64      	subs	r4, r4, r5
 800de88:	10a4      	asrs	r4, r4, #2
 800de8a:	2600      	movs	r6, #0
 800de8c:	42a6      	cmp	r6, r4
 800de8e:	d109      	bne.n	800dea4 <__libc_init_array+0x24>
 800de90:	4d0b      	ldr	r5, [pc, #44]	; (800dec0 <__libc_init_array+0x40>)
 800de92:	4c0c      	ldr	r4, [pc, #48]	; (800dec4 <__libc_init_array+0x44>)
 800de94:	f002 fdae 	bl	80109f4 <_init>
 800de98:	1b64      	subs	r4, r4, r5
 800de9a:	10a4      	asrs	r4, r4, #2
 800de9c:	2600      	movs	r6, #0
 800de9e:	42a6      	cmp	r6, r4
 800dea0:	d105      	bne.n	800deae <__libc_init_array+0x2e>
 800dea2:	bd70      	pop	{r4, r5, r6, pc}
 800dea4:	f855 3b04 	ldr.w	r3, [r5], #4
 800dea8:	4798      	blx	r3
 800deaa:	3601      	adds	r6, #1
 800deac:	e7ee      	b.n	800de8c <__libc_init_array+0xc>
 800deae:	f855 3b04 	ldr.w	r3, [r5], #4
 800deb2:	4798      	blx	r3
 800deb4:	3601      	adds	r6, #1
 800deb6:	e7f2      	b.n	800de9e <__libc_init_array+0x1e>
 800deb8:	08010ed4 	.word	0x08010ed4
 800debc:	08010ed4 	.word	0x08010ed4
 800dec0:	08010ed4 	.word	0x08010ed4
 800dec4:	08010ed8 	.word	0x08010ed8

0800dec8 <memcpy>:
 800dec8:	440a      	add	r2, r1
 800deca:	4291      	cmp	r1, r2
 800decc:	f100 33ff 	add.w	r3, r0, #4294967295
 800ded0:	d100      	bne.n	800ded4 <memcpy+0xc>
 800ded2:	4770      	bx	lr
 800ded4:	b510      	push	{r4, lr}
 800ded6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800deda:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dede:	4291      	cmp	r1, r2
 800dee0:	d1f9      	bne.n	800ded6 <memcpy+0xe>
 800dee2:	bd10      	pop	{r4, pc}

0800dee4 <memset>:
 800dee4:	4402      	add	r2, r0
 800dee6:	4603      	mov	r3, r0
 800dee8:	4293      	cmp	r3, r2
 800deea:	d100      	bne.n	800deee <memset+0xa>
 800deec:	4770      	bx	lr
 800deee:	f803 1b01 	strb.w	r1, [r3], #1
 800def2:	e7f9      	b.n	800dee8 <memset+0x4>

0800def4 <__cvt>:
 800def4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800def8:	ec55 4b10 	vmov	r4, r5, d0
 800defc:	2d00      	cmp	r5, #0
 800defe:	460e      	mov	r6, r1
 800df00:	4619      	mov	r1, r3
 800df02:	462b      	mov	r3, r5
 800df04:	bfbb      	ittet	lt
 800df06:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800df0a:	461d      	movlt	r5, r3
 800df0c:	2300      	movge	r3, #0
 800df0e:	232d      	movlt	r3, #45	; 0x2d
 800df10:	700b      	strb	r3, [r1, #0]
 800df12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df14:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800df18:	4691      	mov	r9, r2
 800df1a:	f023 0820 	bic.w	r8, r3, #32
 800df1e:	bfbc      	itt	lt
 800df20:	4622      	movlt	r2, r4
 800df22:	4614      	movlt	r4, r2
 800df24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800df28:	d005      	beq.n	800df36 <__cvt+0x42>
 800df2a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800df2e:	d100      	bne.n	800df32 <__cvt+0x3e>
 800df30:	3601      	adds	r6, #1
 800df32:	2102      	movs	r1, #2
 800df34:	e000      	b.n	800df38 <__cvt+0x44>
 800df36:	2103      	movs	r1, #3
 800df38:	ab03      	add	r3, sp, #12
 800df3a:	9301      	str	r3, [sp, #4]
 800df3c:	ab02      	add	r3, sp, #8
 800df3e:	9300      	str	r3, [sp, #0]
 800df40:	ec45 4b10 	vmov	d0, r4, r5
 800df44:	4653      	mov	r3, sl
 800df46:	4632      	mov	r2, r6
 800df48:	f000 fcfa 	bl	800e940 <_dtoa_r>
 800df4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800df50:	4607      	mov	r7, r0
 800df52:	d102      	bne.n	800df5a <__cvt+0x66>
 800df54:	f019 0f01 	tst.w	r9, #1
 800df58:	d022      	beq.n	800dfa0 <__cvt+0xac>
 800df5a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800df5e:	eb07 0906 	add.w	r9, r7, r6
 800df62:	d110      	bne.n	800df86 <__cvt+0x92>
 800df64:	783b      	ldrb	r3, [r7, #0]
 800df66:	2b30      	cmp	r3, #48	; 0x30
 800df68:	d10a      	bne.n	800df80 <__cvt+0x8c>
 800df6a:	2200      	movs	r2, #0
 800df6c:	2300      	movs	r3, #0
 800df6e:	4620      	mov	r0, r4
 800df70:	4629      	mov	r1, r5
 800df72:	f7f2 fdd1 	bl	8000b18 <__aeabi_dcmpeq>
 800df76:	b918      	cbnz	r0, 800df80 <__cvt+0x8c>
 800df78:	f1c6 0601 	rsb	r6, r6, #1
 800df7c:	f8ca 6000 	str.w	r6, [sl]
 800df80:	f8da 3000 	ldr.w	r3, [sl]
 800df84:	4499      	add	r9, r3
 800df86:	2200      	movs	r2, #0
 800df88:	2300      	movs	r3, #0
 800df8a:	4620      	mov	r0, r4
 800df8c:	4629      	mov	r1, r5
 800df8e:	f7f2 fdc3 	bl	8000b18 <__aeabi_dcmpeq>
 800df92:	b108      	cbz	r0, 800df98 <__cvt+0xa4>
 800df94:	f8cd 900c 	str.w	r9, [sp, #12]
 800df98:	2230      	movs	r2, #48	; 0x30
 800df9a:	9b03      	ldr	r3, [sp, #12]
 800df9c:	454b      	cmp	r3, r9
 800df9e:	d307      	bcc.n	800dfb0 <__cvt+0xbc>
 800dfa0:	9b03      	ldr	r3, [sp, #12]
 800dfa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dfa4:	1bdb      	subs	r3, r3, r7
 800dfa6:	4638      	mov	r0, r7
 800dfa8:	6013      	str	r3, [r2, #0]
 800dfaa:	b004      	add	sp, #16
 800dfac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfb0:	1c59      	adds	r1, r3, #1
 800dfb2:	9103      	str	r1, [sp, #12]
 800dfb4:	701a      	strb	r2, [r3, #0]
 800dfb6:	e7f0      	b.n	800df9a <__cvt+0xa6>

0800dfb8 <__exponent>:
 800dfb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dfba:	4603      	mov	r3, r0
 800dfbc:	2900      	cmp	r1, #0
 800dfbe:	bfb8      	it	lt
 800dfc0:	4249      	neglt	r1, r1
 800dfc2:	f803 2b02 	strb.w	r2, [r3], #2
 800dfc6:	bfb4      	ite	lt
 800dfc8:	222d      	movlt	r2, #45	; 0x2d
 800dfca:	222b      	movge	r2, #43	; 0x2b
 800dfcc:	2909      	cmp	r1, #9
 800dfce:	7042      	strb	r2, [r0, #1]
 800dfd0:	dd2a      	ble.n	800e028 <__exponent+0x70>
 800dfd2:	f10d 0407 	add.w	r4, sp, #7
 800dfd6:	46a4      	mov	ip, r4
 800dfd8:	270a      	movs	r7, #10
 800dfda:	46a6      	mov	lr, r4
 800dfdc:	460a      	mov	r2, r1
 800dfde:	fb91 f6f7 	sdiv	r6, r1, r7
 800dfe2:	fb07 1516 	mls	r5, r7, r6, r1
 800dfe6:	3530      	adds	r5, #48	; 0x30
 800dfe8:	2a63      	cmp	r2, #99	; 0x63
 800dfea:	f104 34ff 	add.w	r4, r4, #4294967295
 800dfee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800dff2:	4631      	mov	r1, r6
 800dff4:	dcf1      	bgt.n	800dfda <__exponent+0x22>
 800dff6:	3130      	adds	r1, #48	; 0x30
 800dff8:	f1ae 0502 	sub.w	r5, lr, #2
 800dffc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e000:	1c44      	adds	r4, r0, #1
 800e002:	4629      	mov	r1, r5
 800e004:	4561      	cmp	r1, ip
 800e006:	d30a      	bcc.n	800e01e <__exponent+0x66>
 800e008:	f10d 0209 	add.w	r2, sp, #9
 800e00c:	eba2 020e 	sub.w	r2, r2, lr
 800e010:	4565      	cmp	r5, ip
 800e012:	bf88      	it	hi
 800e014:	2200      	movhi	r2, #0
 800e016:	4413      	add	r3, r2
 800e018:	1a18      	subs	r0, r3, r0
 800e01a:	b003      	add	sp, #12
 800e01c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e01e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e022:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e026:	e7ed      	b.n	800e004 <__exponent+0x4c>
 800e028:	2330      	movs	r3, #48	; 0x30
 800e02a:	3130      	adds	r1, #48	; 0x30
 800e02c:	7083      	strb	r3, [r0, #2]
 800e02e:	70c1      	strb	r1, [r0, #3]
 800e030:	1d03      	adds	r3, r0, #4
 800e032:	e7f1      	b.n	800e018 <__exponent+0x60>

0800e034 <_printf_float>:
 800e034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e038:	ed2d 8b02 	vpush	{d8}
 800e03c:	b08d      	sub	sp, #52	; 0x34
 800e03e:	460c      	mov	r4, r1
 800e040:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e044:	4616      	mov	r6, r2
 800e046:	461f      	mov	r7, r3
 800e048:	4605      	mov	r5, r0
 800e04a:	f001 fb5d 	bl	800f708 <_localeconv_r>
 800e04e:	f8d0 a000 	ldr.w	sl, [r0]
 800e052:	4650      	mov	r0, sl
 800e054:	f7f2 f8e4 	bl	8000220 <strlen>
 800e058:	2300      	movs	r3, #0
 800e05a:	930a      	str	r3, [sp, #40]	; 0x28
 800e05c:	6823      	ldr	r3, [r4, #0]
 800e05e:	9305      	str	r3, [sp, #20]
 800e060:	f8d8 3000 	ldr.w	r3, [r8]
 800e064:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e068:	3307      	adds	r3, #7
 800e06a:	f023 0307 	bic.w	r3, r3, #7
 800e06e:	f103 0208 	add.w	r2, r3, #8
 800e072:	f8c8 2000 	str.w	r2, [r8]
 800e076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e07a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e07e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e082:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e086:	9307      	str	r3, [sp, #28]
 800e088:	f8cd 8018 	str.w	r8, [sp, #24]
 800e08c:	ee08 0a10 	vmov	s16, r0
 800e090:	4b9f      	ldr	r3, [pc, #636]	; (800e310 <_printf_float+0x2dc>)
 800e092:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e096:	f04f 32ff 	mov.w	r2, #4294967295
 800e09a:	f7f2 fd6f 	bl	8000b7c <__aeabi_dcmpun>
 800e09e:	bb88      	cbnz	r0, 800e104 <_printf_float+0xd0>
 800e0a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e0a4:	4b9a      	ldr	r3, [pc, #616]	; (800e310 <_printf_float+0x2dc>)
 800e0a6:	f04f 32ff 	mov.w	r2, #4294967295
 800e0aa:	f7f2 fd49 	bl	8000b40 <__aeabi_dcmple>
 800e0ae:	bb48      	cbnz	r0, 800e104 <_printf_float+0xd0>
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	4640      	mov	r0, r8
 800e0b6:	4649      	mov	r1, r9
 800e0b8:	f7f2 fd38 	bl	8000b2c <__aeabi_dcmplt>
 800e0bc:	b110      	cbz	r0, 800e0c4 <_printf_float+0x90>
 800e0be:	232d      	movs	r3, #45	; 0x2d
 800e0c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0c4:	4b93      	ldr	r3, [pc, #588]	; (800e314 <_printf_float+0x2e0>)
 800e0c6:	4894      	ldr	r0, [pc, #592]	; (800e318 <_printf_float+0x2e4>)
 800e0c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e0cc:	bf94      	ite	ls
 800e0ce:	4698      	movls	r8, r3
 800e0d0:	4680      	movhi	r8, r0
 800e0d2:	2303      	movs	r3, #3
 800e0d4:	6123      	str	r3, [r4, #16]
 800e0d6:	9b05      	ldr	r3, [sp, #20]
 800e0d8:	f023 0204 	bic.w	r2, r3, #4
 800e0dc:	6022      	str	r2, [r4, #0]
 800e0de:	f04f 0900 	mov.w	r9, #0
 800e0e2:	9700      	str	r7, [sp, #0]
 800e0e4:	4633      	mov	r3, r6
 800e0e6:	aa0b      	add	r2, sp, #44	; 0x2c
 800e0e8:	4621      	mov	r1, r4
 800e0ea:	4628      	mov	r0, r5
 800e0ec:	f000 f9d8 	bl	800e4a0 <_printf_common>
 800e0f0:	3001      	adds	r0, #1
 800e0f2:	f040 8090 	bne.w	800e216 <_printf_float+0x1e2>
 800e0f6:	f04f 30ff 	mov.w	r0, #4294967295
 800e0fa:	b00d      	add	sp, #52	; 0x34
 800e0fc:	ecbd 8b02 	vpop	{d8}
 800e100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e104:	4642      	mov	r2, r8
 800e106:	464b      	mov	r3, r9
 800e108:	4640      	mov	r0, r8
 800e10a:	4649      	mov	r1, r9
 800e10c:	f7f2 fd36 	bl	8000b7c <__aeabi_dcmpun>
 800e110:	b140      	cbz	r0, 800e124 <_printf_float+0xf0>
 800e112:	464b      	mov	r3, r9
 800e114:	2b00      	cmp	r3, #0
 800e116:	bfbc      	itt	lt
 800e118:	232d      	movlt	r3, #45	; 0x2d
 800e11a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e11e:	487f      	ldr	r0, [pc, #508]	; (800e31c <_printf_float+0x2e8>)
 800e120:	4b7f      	ldr	r3, [pc, #508]	; (800e320 <_printf_float+0x2ec>)
 800e122:	e7d1      	b.n	800e0c8 <_printf_float+0x94>
 800e124:	6863      	ldr	r3, [r4, #4]
 800e126:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e12a:	9206      	str	r2, [sp, #24]
 800e12c:	1c5a      	adds	r2, r3, #1
 800e12e:	d13f      	bne.n	800e1b0 <_printf_float+0x17c>
 800e130:	2306      	movs	r3, #6
 800e132:	6063      	str	r3, [r4, #4]
 800e134:	9b05      	ldr	r3, [sp, #20]
 800e136:	6861      	ldr	r1, [r4, #4]
 800e138:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e13c:	2300      	movs	r3, #0
 800e13e:	9303      	str	r3, [sp, #12]
 800e140:	ab0a      	add	r3, sp, #40	; 0x28
 800e142:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e146:	ab09      	add	r3, sp, #36	; 0x24
 800e148:	ec49 8b10 	vmov	d0, r8, r9
 800e14c:	9300      	str	r3, [sp, #0]
 800e14e:	6022      	str	r2, [r4, #0]
 800e150:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e154:	4628      	mov	r0, r5
 800e156:	f7ff fecd 	bl	800def4 <__cvt>
 800e15a:	9b06      	ldr	r3, [sp, #24]
 800e15c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e15e:	2b47      	cmp	r3, #71	; 0x47
 800e160:	4680      	mov	r8, r0
 800e162:	d108      	bne.n	800e176 <_printf_float+0x142>
 800e164:	1cc8      	adds	r0, r1, #3
 800e166:	db02      	blt.n	800e16e <_printf_float+0x13a>
 800e168:	6863      	ldr	r3, [r4, #4]
 800e16a:	4299      	cmp	r1, r3
 800e16c:	dd41      	ble.n	800e1f2 <_printf_float+0x1be>
 800e16e:	f1ab 0b02 	sub.w	fp, fp, #2
 800e172:	fa5f fb8b 	uxtb.w	fp, fp
 800e176:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e17a:	d820      	bhi.n	800e1be <_printf_float+0x18a>
 800e17c:	3901      	subs	r1, #1
 800e17e:	465a      	mov	r2, fp
 800e180:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e184:	9109      	str	r1, [sp, #36]	; 0x24
 800e186:	f7ff ff17 	bl	800dfb8 <__exponent>
 800e18a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e18c:	1813      	adds	r3, r2, r0
 800e18e:	2a01      	cmp	r2, #1
 800e190:	4681      	mov	r9, r0
 800e192:	6123      	str	r3, [r4, #16]
 800e194:	dc02      	bgt.n	800e19c <_printf_float+0x168>
 800e196:	6822      	ldr	r2, [r4, #0]
 800e198:	07d2      	lsls	r2, r2, #31
 800e19a:	d501      	bpl.n	800e1a0 <_printf_float+0x16c>
 800e19c:	3301      	adds	r3, #1
 800e19e:	6123      	str	r3, [r4, #16]
 800e1a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d09c      	beq.n	800e0e2 <_printf_float+0xae>
 800e1a8:	232d      	movs	r3, #45	; 0x2d
 800e1aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e1ae:	e798      	b.n	800e0e2 <_printf_float+0xae>
 800e1b0:	9a06      	ldr	r2, [sp, #24]
 800e1b2:	2a47      	cmp	r2, #71	; 0x47
 800e1b4:	d1be      	bne.n	800e134 <_printf_float+0x100>
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d1bc      	bne.n	800e134 <_printf_float+0x100>
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	e7b9      	b.n	800e132 <_printf_float+0xfe>
 800e1be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e1c2:	d118      	bne.n	800e1f6 <_printf_float+0x1c2>
 800e1c4:	2900      	cmp	r1, #0
 800e1c6:	6863      	ldr	r3, [r4, #4]
 800e1c8:	dd0b      	ble.n	800e1e2 <_printf_float+0x1ae>
 800e1ca:	6121      	str	r1, [r4, #16]
 800e1cc:	b913      	cbnz	r3, 800e1d4 <_printf_float+0x1a0>
 800e1ce:	6822      	ldr	r2, [r4, #0]
 800e1d0:	07d0      	lsls	r0, r2, #31
 800e1d2:	d502      	bpl.n	800e1da <_printf_float+0x1a6>
 800e1d4:	3301      	adds	r3, #1
 800e1d6:	440b      	add	r3, r1
 800e1d8:	6123      	str	r3, [r4, #16]
 800e1da:	65a1      	str	r1, [r4, #88]	; 0x58
 800e1dc:	f04f 0900 	mov.w	r9, #0
 800e1e0:	e7de      	b.n	800e1a0 <_printf_float+0x16c>
 800e1e2:	b913      	cbnz	r3, 800e1ea <_printf_float+0x1b6>
 800e1e4:	6822      	ldr	r2, [r4, #0]
 800e1e6:	07d2      	lsls	r2, r2, #31
 800e1e8:	d501      	bpl.n	800e1ee <_printf_float+0x1ba>
 800e1ea:	3302      	adds	r3, #2
 800e1ec:	e7f4      	b.n	800e1d8 <_printf_float+0x1a4>
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	e7f2      	b.n	800e1d8 <_printf_float+0x1a4>
 800e1f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e1f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1f8:	4299      	cmp	r1, r3
 800e1fa:	db05      	blt.n	800e208 <_printf_float+0x1d4>
 800e1fc:	6823      	ldr	r3, [r4, #0]
 800e1fe:	6121      	str	r1, [r4, #16]
 800e200:	07d8      	lsls	r0, r3, #31
 800e202:	d5ea      	bpl.n	800e1da <_printf_float+0x1a6>
 800e204:	1c4b      	adds	r3, r1, #1
 800e206:	e7e7      	b.n	800e1d8 <_printf_float+0x1a4>
 800e208:	2900      	cmp	r1, #0
 800e20a:	bfd4      	ite	le
 800e20c:	f1c1 0202 	rsble	r2, r1, #2
 800e210:	2201      	movgt	r2, #1
 800e212:	4413      	add	r3, r2
 800e214:	e7e0      	b.n	800e1d8 <_printf_float+0x1a4>
 800e216:	6823      	ldr	r3, [r4, #0]
 800e218:	055a      	lsls	r2, r3, #21
 800e21a:	d407      	bmi.n	800e22c <_printf_float+0x1f8>
 800e21c:	6923      	ldr	r3, [r4, #16]
 800e21e:	4642      	mov	r2, r8
 800e220:	4631      	mov	r1, r6
 800e222:	4628      	mov	r0, r5
 800e224:	47b8      	blx	r7
 800e226:	3001      	adds	r0, #1
 800e228:	d12c      	bne.n	800e284 <_printf_float+0x250>
 800e22a:	e764      	b.n	800e0f6 <_printf_float+0xc2>
 800e22c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e230:	f240 80e0 	bls.w	800e3f4 <_printf_float+0x3c0>
 800e234:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e238:	2200      	movs	r2, #0
 800e23a:	2300      	movs	r3, #0
 800e23c:	f7f2 fc6c 	bl	8000b18 <__aeabi_dcmpeq>
 800e240:	2800      	cmp	r0, #0
 800e242:	d034      	beq.n	800e2ae <_printf_float+0x27a>
 800e244:	4a37      	ldr	r2, [pc, #220]	; (800e324 <_printf_float+0x2f0>)
 800e246:	2301      	movs	r3, #1
 800e248:	4631      	mov	r1, r6
 800e24a:	4628      	mov	r0, r5
 800e24c:	47b8      	blx	r7
 800e24e:	3001      	adds	r0, #1
 800e250:	f43f af51 	beq.w	800e0f6 <_printf_float+0xc2>
 800e254:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e258:	429a      	cmp	r2, r3
 800e25a:	db02      	blt.n	800e262 <_printf_float+0x22e>
 800e25c:	6823      	ldr	r3, [r4, #0]
 800e25e:	07d8      	lsls	r0, r3, #31
 800e260:	d510      	bpl.n	800e284 <_printf_float+0x250>
 800e262:	ee18 3a10 	vmov	r3, s16
 800e266:	4652      	mov	r2, sl
 800e268:	4631      	mov	r1, r6
 800e26a:	4628      	mov	r0, r5
 800e26c:	47b8      	blx	r7
 800e26e:	3001      	adds	r0, #1
 800e270:	f43f af41 	beq.w	800e0f6 <_printf_float+0xc2>
 800e274:	f04f 0800 	mov.w	r8, #0
 800e278:	f104 091a 	add.w	r9, r4, #26
 800e27c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e27e:	3b01      	subs	r3, #1
 800e280:	4543      	cmp	r3, r8
 800e282:	dc09      	bgt.n	800e298 <_printf_float+0x264>
 800e284:	6823      	ldr	r3, [r4, #0]
 800e286:	079b      	lsls	r3, r3, #30
 800e288:	f100 8105 	bmi.w	800e496 <_printf_float+0x462>
 800e28c:	68e0      	ldr	r0, [r4, #12]
 800e28e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e290:	4298      	cmp	r0, r3
 800e292:	bfb8      	it	lt
 800e294:	4618      	movlt	r0, r3
 800e296:	e730      	b.n	800e0fa <_printf_float+0xc6>
 800e298:	2301      	movs	r3, #1
 800e29a:	464a      	mov	r2, r9
 800e29c:	4631      	mov	r1, r6
 800e29e:	4628      	mov	r0, r5
 800e2a0:	47b8      	blx	r7
 800e2a2:	3001      	adds	r0, #1
 800e2a4:	f43f af27 	beq.w	800e0f6 <_printf_float+0xc2>
 800e2a8:	f108 0801 	add.w	r8, r8, #1
 800e2ac:	e7e6      	b.n	800e27c <_printf_float+0x248>
 800e2ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	dc39      	bgt.n	800e328 <_printf_float+0x2f4>
 800e2b4:	4a1b      	ldr	r2, [pc, #108]	; (800e324 <_printf_float+0x2f0>)
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	4631      	mov	r1, r6
 800e2ba:	4628      	mov	r0, r5
 800e2bc:	47b8      	blx	r7
 800e2be:	3001      	adds	r0, #1
 800e2c0:	f43f af19 	beq.w	800e0f6 <_printf_float+0xc2>
 800e2c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e2c8:	4313      	orrs	r3, r2
 800e2ca:	d102      	bne.n	800e2d2 <_printf_float+0x29e>
 800e2cc:	6823      	ldr	r3, [r4, #0]
 800e2ce:	07d9      	lsls	r1, r3, #31
 800e2d0:	d5d8      	bpl.n	800e284 <_printf_float+0x250>
 800e2d2:	ee18 3a10 	vmov	r3, s16
 800e2d6:	4652      	mov	r2, sl
 800e2d8:	4631      	mov	r1, r6
 800e2da:	4628      	mov	r0, r5
 800e2dc:	47b8      	blx	r7
 800e2de:	3001      	adds	r0, #1
 800e2e0:	f43f af09 	beq.w	800e0f6 <_printf_float+0xc2>
 800e2e4:	f04f 0900 	mov.w	r9, #0
 800e2e8:	f104 0a1a 	add.w	sl, r4, #26
 800e2ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2ee:	425b      	negs	r3, r3
 800e2f0:	454b      	cmp	r3, r9
 800e2f2:	dc01      	bgt.n	800e2f8 <_printf_float+0x2c4>
 800e2f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2f6:	e792      	b.n	800e21e <_printf_float+0x1ea>
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	4652      	mov	r2, sl
 800e2fc:	4631      	mov	r1, r6
 800e2fe:	4628      	mov	r0, r5
 800e300:	47b8      	blx	r7
 800e302:	3001      	adds	r0, #1
 800e304:	f43f aef7 	beq.w	800e0f6 <_printf_float+0xc2>
 800e308:	f109 0901 	add.w	r9, r9, #1
 800e30c:	e7ee      	b.n	800e2ec <_printf_float+0x2b8>
 800e30e:	bf00      	nop
 800e310:	7fefffff 	.word	0x7fefffff
 800e314:	08010b00 	.word	0x08010b00
 800e318:	08010b04 	.word	0x08010b04
 800e31c:	08010b0c 	.word	0x08010b0c
 800e320:	08010b08 	.word	0x08010b08
 800e324:	08010b10 	.word	0x08010b10
 800e328:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e32a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e32c:	429a      	cmp	r2, r3
 800e32e:	bfa8      	it	ge
 800e330:	461a      	movge	r2, r3
 800e332:	2a00      	cmp	r2, #0
 800e334:	4691      	mov	r9, r2
 800e336:	dc37      	bgt.n	800e3a8 <_printf_float+0x374>
 800e338:	f04f 0b00 	mov.w	fp, #0
 800e33c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e340:	f104 021a 	add.w	r2, r4, #26
 800e344:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e346:	9305      	str	r3, [sp, #20]
 800e348:	eba3 0309 	sub.w	r3, r3, r9
 800e34c:	455b      	cmp	r3, fp
 800e34e:	dc33      	bgt.n	800e3b8 <_printf_float+0x384>
 800e350:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e354:	429a      	cmp	r2, r3
 800e356:	db3b      	blt.n	800e3d0 <_printf_float+0x39c>
 800e358:	6823      	ldr	r3, [r4, #0]
 800e35a:	07da      	lsls	r2, r3, #31
 800e35c:	d438      	bmi.n	800e3d0 <_printf_float+0x39c>
 800e35e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e360:	9a05      	ldr	r2, [sp, #20]
 800e362:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e364:	1a9a      	subs	r2, r3, r2
 800e366:	eba3 0901 	sub.w	r9, r3, r1
 800e36a:	4591      	cmp	r9, r2
 800e36c:	bfa8      	it	ge
 800e36e:	4691      	movge	r9, r2
 800e370:	f1b9 0f00 	cmp.w	r9, #0
 800e374:	dc35      	bgt.n	800e3e2 <_printf_float+0x3ae>
 800e376:	f04f 0800 	mov.w	r8, #0
 800e37a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e37e:	f104 0a1a 	add.w	sl, r4, #26
 800e382:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e386:	1a9b      	subs	r3, r3, r2
 800e388:	eba3 0309 	sub.w	r3, r3, r9
 800e38c:	4543      	cmp	r3, r8
 800e38e:	f77f af79 	ble.w	800e284 <_printf_float+0x250>
 800e392:	2301      	movs	r3, #1
 800e394:	4652      	mov	r2, sl
 800e396:	4631      	mov	r1, r6
 800e398:	4628      	mov	r0, r5
 800e39a:	47b8      	blx	r7
 800e39c:	3001      	adds	r0, #1
 800e39e:	f43f aeaa 	beq.w	800e0f6 <_printf_float+0xc2>
 800e3a2:	f108 0801 	add.w	r8, r8, #1
 800e3a6:	e7ec      	b.n	800e382 <_printf_float+0x34e>
 800e3a8:	4613      	mov	r3, r2
 800e3aa:	4631      	mov	r1, r6
 800e3ac:	4642      	mov	r2, r8
 800e3ae:	4628      	mov	r0, r5
 800e3b0:	47b8      	blx	r7
 800e3b2:	3001      	adds	r0, #1
 800e3b4:	d1c0      	bne.n	800e338 <_printf_float+0x304>
 800e3b6:	e69e      	b.n	800e0f6 <_printf_float+0xc2>
 800e3b8:	2301      	movs	r3, #1
 800e3ba:	4631      	mov	r1, r6
 800e3bc:	4628      	mov	r0, r5
 800e3be:	9205      	str	r2, [sp, #20]
 800e3c0:	47b8      	blx	r7
 800e3c2:	3001      	adds	r0, #1
 800e3c4:	f43f ae97 	beq.w	800e0f6 <_printf_float+0xc2>
 800e3c8:	9a05      	ldr	r2, [sp, #20]
 800e3ca:	f10b 0b01 	add.w	fp, fp, #1
 800e3ce:	e7b9      	b.n	800e344 <_printf_float+0x310>
 800e3d0:	ee18 3a10 	vmov	r3, s16
 800e3d4:	4652      	mov	r2, sl
 800e3d6:	4631      	mov	r1, r6
 800e3d8:	4628      	mov	r0, r5
 800e3da:	47b8      	blx	r7
 800e3dc:	3001      	adds	r0, #1
 800e3de:	d1be      	bne.n	800e35e <_printf_float+0x32a>
 800e3e0:	e689      	b.n	800e0f6 <_printf_float+0xc2>
 800e3e2:	9a05      	ldr	r2, [sp, #20]
 800e3e4:	464b      	mov	r3, r9
 800e3e6:	4442      	add	r2, r8
 800e3e8:	4631      	mov	r1, r6
 800e3ea:	4628      	mov	r0, r5
 800e3ec:	47b8      	blx	r7
 800e3ee:	3001      	adds	r0, #1
 800e3f0:	d1c1      	bne.n	800e376 <_printf_float+0x342>
 800e3f2:	e680      	b.n	800e0f6 <_printf_float+0xc2>
 800e3f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e3f6:	2a01      	cmp	r2, #1
 800e3f8:	dc01      	bgt.n	800e3fe <_printf_float+0x3ca>
 800e3fa:	07db      	lsls	r3, r3, #31
 800e3fc:	d538      	bpl.n	800e470 <_printf_float+0x43c>
 800e3fe:	2301      	movs	r3, #1
 800e400:	4642      	mov	r2, r8
 800e402:	4631      	mov	r1, r6
 800e404:	4628      	mov	r0, r5
 800e406:	47b8      	blx	r7
 800e408:	3001      	adds	r0, #1
 800e40a:	f43f ae74 	beq.w	800e0f6 <_printf_float+0xc2>
 800e40e:	ee18 3a10 	vmov	r3, s16
 800e412:	4652      	mov	r2, sl
 800e414:	4631      	mov	r1, r6
 800e416:	4628      	mov	r0, r5
 800e418:	47b8      	blx	r7
 800e41a:	3001      	adds	r0, #1
 800e41c:	f43f ae6b 	beq.w	800e0f6 <_printf_float+0xc2>
 800e420:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e424:	2200      	movs	r2, #0
 800e426:	2300      	movs	r3, #0
 800e428:	f7f2 fb76 	bl	8000b18 <__aeabi_dcmpeq>
 800e42c:	b9d8      	cbnz	r0, 800e466 <_printf_float+0x432>
 800e42e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e430:	f108 0201 	add.w	r2, r8, #1
 800e434:	3b01      	subs	r3, #1
 800e436:	4631      	mov	r1, r6
 800e438:	4628      	mov	r0, r5
 800e43a:	47b8      	blx	r7
 800e43c:	3001      	adds	r0, #1
 800e43e:	d10e      	bne.n	800e45e <_printf_float+0x42a>
 800e440:	e659      	b.n	800e0f6 <_printf_float+0xc2>
 800e442:	2301      	movs	r3, #1
 800e444:	4652      	mov	r2, sl
 800e446:	4631      	mov	r1, r6
 800e448:	4628      	mov	r0, r5
 800e44a:	47b8      	blx	r7
 800e44c:	3001      	adds	r0, #1
 800e44e:	f43f ae52 	beq.w	800e0f6 <_printf_float+0xc2>
 800e452:	f108 0801 	add.w	r8, r8, #1
 800e456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e458:	3b01      	subs	r3, #1
 800e45a:	4543      	cmp	r3, r8
 800e45c:	dcf1      	bgt.n	800e442 <_printf_float+0x40e>
 800e45e:	464b      	mov	r3, r9
 800e460:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e464:	e6dc      	b.n	800e220 <_printf_float+0x1ec>
 800e466:	f04f 0800 	mov.w	r8, #0
 800e46a:	f104 0a1a 	add.w	sl, r4, #26
 800e46e:	e7f2      	b.n	800e456 <_printf_float+0x422>
 800e470:	2301      	movs	r3, #1
 800e472:	4642      	mov	r2, r8
 800e474:	e7df      	b.n	800e436 <_printf_float+0x402>
 800e476:	2301      	movs	r3, #1
 800e478:	464a      	mov	r2, r9
 800e47a:	4631      	mov	r1, r6
 800e47c:	4628      	mov	r0, r5
 800e47e:	47b8      	blx	r7
 800e480:	3001      	adds	r0, #1
 800e482:	f43f ae38 	beq.w	800e0f6 <_printf_float+0xc2>
 800e486:	f108 0801 	add.w	r8, r8, #1
 800e48a:	68e3      	ldr	r3, [r4, #12]
 800e48c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e48e:	1a5b      	subs	r3, r3, r1
 800e490:	4543      	cmp	r3, r8
 800e492:	dcf0      	bgt.n	800e476 <_printf_float+0x442>
 800e494:	e6fa      	b.n	800e28c <_printf_float+0x258>
 800e496:	f04f 0800 	mov.w	r8, #0
 800e49a:	f104 0919 	add.w	r9, r4, #25
 800e49e:	e7f4      	b.n	800e48a <_printf_float+0x456>

0800e4a0 <_printf_common>:
 800e4a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4a4:	4616      	mov	r6, r2
 800e4a6:	4699      	mov	r9, r3
 800e4a8:	688a      	ldr	r2, [r1, #8]
 800e4aa:	690b      	ldr	r3, [r1, #16]
 800e4ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e4b0:	4293      	cmp	r3, r2
 800e4b2:	bfb8      	it	lt
 800e4b4:	4613      	movlt	r3, r2
 800e4b6:	6033      	str	r3, [r6, #0]
 800e4b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e4bc:	4607      	mov	r7, r0
 800e4be:	460c      	mov	r4, r1
 800e4c0:	b10a      	cbz	r2, 800e4c6 <_printf_common+0x26>
 800e4c2:	3301      	adds	r3, #1
 800e4c4:	6033      	str	r3, [r6, #0]
 800e4c6:	6823      	ldr	r3, [r4, #0]
 800e4c8:	0699      	lsls	r1, r3, #26
 800e4ca:	bf42      	ittt	mi
 800e4cc:	6833      	ldrmi	r3, [r6, #0]
 800e4ce:	3302      	addmi	r3, #2
 800e4d0:	6033      	strmi	r3, [r6, #0]
 800e4d2:	6825      	ldr	r5, [r4, #0]
 800e4d4:	f015 0506 	ands.w	r5, r5, #6
 800e4d8:	d106      	bne.n	800e4e8 <_printf_common+0x48>
 800e4da:	f104 0a19 	add.w	sl, r4, #25
 800e4de:	68e3      	ldr	r3, [r4, #12]
 800e4e0:	6832      	ldr	r2, [r6, #0]
 800e4e2:	1a9b      	subs	r3, r3, r2
 800e4e4:	42ab      	cmp	r3, r5
 800e4e6:	dc26      	bgt.n	800e536 <_printf_common+0x96>
 800e4e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e4ec:	1e13      	subs	r3, r2, #0
 800e4ee:	6822      	ldr	r2, [r4, #0]
 800e4f0:	bf18      	it	ne
 800e4f2:	2301      	movne	r3, #1
 800e4f4:	0692      	lsls	r2, r2, #26
 800e4f6:	d42b      	bmi.n	800e550 <_printf_common+0xb0>
 800e4f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e4fc:	4649      	mov	r1, r9
 800e4fe:	4638      	mov	r0, r7
 800e500:	47c0      	blx	r8
 800e502:	3001      	adds	r0, #1
 800e504:	d01e      	beq.n	800e544 <_printf_common+0xa4>
 800e506:	6823      	ldr	r3, [r4, #0]
 800e508:	68e5      	ldr	r5, [r4, #12]
 800e50a:	6832      	ldr	r2, [r6, #0]
 800e50c:	f003 0306 	and.w	r3, r3, #6
 800e510:	2b04      	cmp	r3, #4
 800e512:	bf08      	it	eq
 800e514:	1aad      	subeq	r5, r5, r2
 800e516:	68a3      	ldr	r3, [r4, #8]
 800e518:	6922      	ldr	r2, [r4, #16]
 800e51a:	bf0c      	ite	eq
 800e51c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e520:	2500      	movne	r5, #0
 800e522:	4293      	cmp	r3, r2
 800e524:	bfc4      	itt	gt
 800e526:	1a9b      	subgt	r3, r3, r2
 800e528:	18ed      	addgt	r5, r5, r3
 800e52a:	2600      	movs	r6, #0
 800e52c:	341a      	adds	r4, #26
 800e52e:	42b5      	cmp	r5, r6
 800e530:	d11a      	bne.n	800e568 <_printf_common+0xc8>
 800e532:	2000      	movs	r0, #0
 800e534:	e008      	b.n	800e548 <_printf_common+0xa8>
 800e536:	2301      	movs	r3, #1
 800e538:	4652      	mov	r2, sl
 800e53a:	4649      	mov	r1, r9
 800e53c:	4638      	mov	r0, r7
 800e53e:	47c0      	blx	r8
 800e540:	3001      	adds	r0, #1
 800e542:	d103      	bne.n	800e54c <_printf_common+0xac>
 800e544:	f04f 30ff 	mov.w	r0, #4294967295
 800e548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e54c:	3501      	adds	r5, #1
 800e54e:	e7c6      	b.n	800e4de <_printf_common+0x3e>
 800e550:	18e1      	adds	r1, r4, r3
 800e552:	1c5a      	adds	r2, r3, #1
 800e554:	2030      	movs	r0, #48	; 0x30
 800e556:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e55a:	4422      	add	r2, r4
 800e55c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e560:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e564:	3302      	adds	r3, #2
 800e566:	e7c7      	b.n	800e4f8 <_printf_common+0x58>
 800e568:	2301      	movs	r3, #1
 800e56a:	4622      	mov	r2, r4
 800e56c:	4649      	mov	r1, r9
 800e56e:	4638      	mov	r0, r7
 800e570:	47c0      	blx	r8
 800e572:	3001      	adds	r0, #1
 800e574:	d0e6      	beq.n	800e544 <_printf_common+0xa4>
 800e576:	3601      	adds	r6, #1
 800e578:	e7d9      	b.n	800e52e <_printf_common+0x8e>
	...

0800e57c <_printf_i>:
 800e57c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e580:	7e0f      	ldrb	r7, [r1, #24]
 800e582:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e584:	2f78      	cmp	r7, #120	; 0x78
 800e586:	4691      	mov	r9, r2
 800e588:	4680      	mov	r8, r0
 800e58a:	460c      	mov	r4, r1
 800e58c:	469a      	mov	sl, r3
 800e58e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e592:	d807      	bhi.n	800e5a4 <_printf_i+0x28>
 800e594:	2f62      	cmp	r7, #98	; 0x62
 800e596:	d80a      	bhi.n	800e5ae <_printf_i+0x32>
 800e598:	2f00      	cmp	r7, #0
 800e59a:	f000 80d8 	beq.w	800e74e <_printf_i+0x1d2>
 800e59e:	2f58      	cmp	r7, #88	; 0x58
 800e5a0:	f000 80a3 	beq.w	800e6ea <_printf_i+0x16e>
 800e5a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e5a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e5ac:	e03a      	b.n	800e624 <_printf_i+0xa8>
 800e5ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e5b2:	2b15      	cmp	r3, #21
 800e5b4:	d8f6      	bhi.n	800e5a4 <_printf_i+0x28>
 800e5b6:	a101      	add	r1, pc, #4	; (adr r1, 800e5bc <_printf_i+0x40>)
 800e5b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e5bc:	0800e615 	.word	0x0800e615
 800e5c0:	0800e629 	.word	0x0800e629
 800e5c4:	0800e5a5 	.word	0x0800e5a5
 800e5c8:	0800e5a5 	.word	0x0800e5a5
 800e5cc:	0800e5a5 	.word	0x0800e5a5
 800e5d0:	0800e5a5 	.word	0x0800e5a5
 800e5d4:	0800e629 	.word	0x0800e629
 800e5d8:	0800e5a5 	.word	0x0800e5a5
 800e5dc:	0800e5a5 	.word	0x0800e5a5
 800e5e0:	0800e5a5 	.word	0x0800e5a5
 800e5e4:	0800e5a5 	.word	0x0800e5a5
 800e5e8:	0800e735 	.word	0x0800e735
 800e5ec:	0800e659 	.word	0x0800e659
 800e5f0:	0800e717 	.word	0x0800e717
 800e5f4:	0800e5a5 	.word	0x0800e5a5
 800e5f8:	0800e5a5 	.word	0x0800e5a5
 800e5fc:	0800e757 	.word	0x0800e757
 800e600:	0800e5a5 	.word	0x0800e5a5
 800e604:	0800e659 	.word	0x0800e659
 800e608:	0800e5a5 	.word	0x0800e5a5
 800e60c:	0800e5a5 	.word	0x0800e5a5
 800e610:	0800e71f 	.word	0x0800e71f
 800e614:	682b      	ldr	r3, [r5, #0]
 800e616:	1d1a      	adds	r2, r3, #4
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	602a      	str	r2, [r5, #0]
 800e61c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e620:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e624:	2301      	movs	r3, #1
 800e626:	e0a3      	b.n	800e770 <_printf_i+0x1f4>
 800e628:	6820      	ldr	r0, [r4, #0]
 800e62a:	6829      	ldr	r1, [r5, #0]
 800e62c:	0606      	lsls	r6, r0, #24
 800e62e:	f101 0304 	add.w	r3, r1, #4
 800e632:	d50a      	bpl.n	800e64a <_printf_i+0xce>
 800e634:	680e      	ldr	r6, [r1, #0]
 800e636:	602b      	str	r3, [r5, #0]
 800e638:	2e00      	cmp	r6, #0
 800e63a:	da03      	bge.n	800e644 <_printf_i+0xc8>
 800e63c:	232d      	movs	r3, #45	; 0x2d
 800e63e:	4276      	negs	r6, r6
 800e640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e644:	485e      	ldr	r0, [pc, #376]	; (800e7c0 <_printf_i+0x244>)
 800e646:	230a      	movs	r3, #10
 800e648:	e019      	b.n	800e67e <_printf_i+0x102>
 800e64a:	680e      	ldr	r6, [r1, #0]
 800e64c:	602b      	str	r3, [r5, #0]
 800e64e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e652:	bf18      	it	ne
 800e654:	b236      	sxthne	r6, r6
 800e656:	e7ef      	b.n	800e638 <_printf_i+0xbc>
 800e658:	682b      	ldr	r3, [r5, #0]
 800e65a:	6820      	ldr	r0, [r4, #0]
 800e65c:	1d19      	adds	r1, r3, #4
 800e65e:	6029      	str	r1, [r5, #0]
 800e660:	0601      	lsls	r1, r0, #24
 800e662:	d501      	bpl.n	800e668 <_printf_i+0xec>
 800e664:	681e      	ldr	r6, [r3, #0]
 800e666:	e002      	b.n	800e66e <_printf_i+0xf2>
 800e668:	0646      	lsls	r6, r0, #25
 800e66a:	d5fb      	bpl.n	800e664 <_printf_i+0xe8>
 800e66c:	881e      	ldrh	r6, [r3, #0]
 800e66e:	4854      	ldr	r0, [pc, #336]	; (800e7c0 <_printf_i+0x244>)
 800e670:	2f6f      	cmp	r7, #111	; 0x6f
 800e672:	bf0c      	ite	eq
 800e674:	2308      	moveq	r3, #8
 800e676:	230a      	movne	r3, #10
 800e678:	2100      	movs	r1, #0
 800e67a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e67e:	6865      	ldr	r5, [r4, #4]
 800e680:	60a5      	str	r5, [r4, #8]
 800e682:	2d00      	cmp	r5, #0
 800e684:	bfa2      	ittt	ge
 800e686:	6821      	ldrge	r1, [r4, #0]
 800e688:	f021 0104 	bicge.w	r1, r1, #4
 800e68c:	6021      	strge	r1, [r4, #0]
 800e68e:	b90e      	cbnz	r6, 800e694 <_printf_i+0x118>
 800e690:	2d00      	cmp	r5, #0
 800e692:	d04d      	beq.n	800e730 <_printf_i+0x1b4>
 800e694:	4615      	mov	r5, r2
 800e696:	fbb6 f1f3 	udiv	r1, r6, r3
 800e69a:	fb03 6711 	mls	r7, r3, r1, r6
 800e69e:	5dc7      	ldrb	r7, [r0, r7]
 800e6a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e6a4:	4637      	mov	r7, r6
 800e6a6:	42bb      	cmp	r3, r7
 800e6a8:	460e      	mov	r6, r1
 800e6aa:	d9f4      	bls.n	800e696 <_printf_i+0x11a>
 800e6ac:	2b08      	cmp	r3, #8
 800e6ae:	d10b      	bne.n	800e6c8 <_printf_i+0x14c>
 800e6b0:	6823      	ldr	r3, [r4, #0]
 800e6b2:	07de      	lsls	r6, r3, #31
 800e6b4:	d508      	bpl.n	800e6c8 <_printf_i+0x14c>
 800e6b6:	6923      	ldr	r3, [r4, #16]
 800e6b8:	6861      	ldr	r1, [r4, #4]
 800e6ba:	4299      	cmp	r1, r3
 800e6bc:	bfde      	ittt	le
 800e6be:	2330      	movle	r3, #48	; 0x30
 800e6c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e6c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e6c8:	1b52      	subs	r2, r2, r5
 800e6ca:	6122      	str	r2, [r4, #16]
 800e6cc:	f8cd a000 	str.w	sl, [sp]
 800e6d0:	464b      	mov	r3, r9
 800e6d2:	aa03      	add	r2, sp, #12
 800e6d4:	4621      	mov	r1, r4
 800e6d6:	4640      	mov	r0, r8
 800e6d8:	f7ff fee2 	bl	800e4a0 <_printf_common>
 800e6dc:	3001      	adds	r0, #1
 800e6de:	d14c      	bne.n	800e77a <_printf_i+0x1fe>
 800e6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e6e4:	b004      	add	sp, #16
 800e6e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6ea:	4835      	ldr	r0, [pc, #212]	; (800e7c0 <_printf_i+0x244>)
 800e6ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e6f0:	6829      	ldr	r1, [r5, #0]
 800e6f2:	6823      	ldr	r3, [r4, #0]
 800e6f4:	f851 6b04 	ldr.w	r6, [r1], #4
 800e6f8:	6029      	str	r1, [r5, #0]
 800e6fa:	061d      	lsls	r5, r3, #24
 800e6fc:	d514      	bpl.n	800e728 <_printf_i+0x1ac>
 800e6fe:	07df      	lsls	r7, r3, #31
 800e700:	bf44      	itt	mi
 800e702:	f043 0320 	orrmi.w	r3, r3, #32
 800e706:	6023      	strmi	r3, [r4, #0]
 800e708:	b91e      	cbnz	r6, 800e712 <_printf_i+0x196>
 800e70a:	6823      	ldr	r3, [r4, #0]
 800e70c:	f023 0320 	bic.w	r3, r3, #32
 800e710:	6023      	str	r3, [r4, #0]
 800e712:	2310      	movs	r3, #16
 800e714:	e7b0      	b.n	800e678 <_printf_i+0xfc>
 800e716:	6823      	ldr	r3, [r4, #0]
 800e718:	f043 0320 	orr.w	r3, r3, #32
 800e71c:	6023      	str	r3, [r4, #0]
 800e71e:	2378      	movs	r3, #120	; 0x78
 800e720:	4828      	ldr	r0, [pc, #160]	; (800e7c4 <_printf_i+0x248>)
 800e722:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e726:	e7e3      	b.n	800e6f0 <_printf_i+0x174>
 800e728:	0659      	lsls	r1, r3, #25
 800e72a:	bf48      	it	mi
 800e72c:	b2b6      	uxthmi	r6, r6
 800e72e:	e7e6      	b.n	800e6fe <_printf_i+0x182>
 800e730:	4615      	mov	r5, r2
 800e732:	e7bb      	b.n	800e6ac <_printf_i+0x130>
 800e734:	682b      	ldr	r3, [r5, #0]
 800e736:	6826      	ldr	r6, [r4, #0]
 800e738:	6961      	ldr	r1, [r4, #20]
 800e73a:	1d18      	adds	r0, r3, #4
 800e73c:	6028      	str	r0, [r5, #0]
 800e73e:	0635      	lsls	r5, r6, #24
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	d501      	bpl.n	800e748 <_printf_i+0x1cc>
 800e744:	6019      	str	r1, [r3, #0]
 800e746:	e002      	b.n	800e74e <_printf_i+0x1d2>
 800e748:	0670      	lsls	r0, r6, #25
 800e74a:	d5fb      	bpl.n	800e744 <_printf_i+0x1c8>
 800e74c:	8019      	strh	r1, [r3, #0]
 800e74e:	2300      	movs	r3, #0
 800e750:	6123      	str	r3, [r4, #16]
 800e752:	4615      	mov	r5, r2
 800e754:	e7ba      	b.n	800e6cc <_printf_i+0x150>
 800e756:	682b      	ldr	r3, [r5, #0]
 800e758:	1d1a      	adds	r2, r3, #4
 800e75a:	602a      	str	r2, [r5, #0]
 800e75c:	681d      	ldr	r5, [r3, #0]
 800e75e:	6862      	ldr	r2, [r4, #4]
 800e760:	2100      	movs	r1, #0
 800e762:	4628      	mov	r0, r5
 800e764:	f7f1 fd64 	bl	8000230 <memchr>
 800e768:	b108      	cbz	r0, 800e76e <_printf_i+0x1f2>
 800e76a:	1b40      	subs	r0, r0, r5
 800e76c:	6060      	str	r0, [r4, #4]
 800e76e:	6863      	ldr	r3, [r4, #4]
 800e770:	6123      	str	r3, [r4, #16]
 800e772:	2300      	movs	r3, #0
 800e774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e778:	e7a8      	b.n	800e6cc <_printf_i+0x150>
 800e77a:	6923      	ldr	r3, [r4, #16]
 800e77c:	462a      	mov	r2, r5
 800e77e:	4649      	mov	r1, r9
 800e780:	4640      	mov	r0, r8
 800e782:	47d0      	blx	sl
 800e784:	3001      	adds	r0, #1
 800e786:	d0ab      	beq.n	800e6e0 <_printf_i+0x164>
 800e788:	6823      	ldr	r3, [r4, #0]
 800e78a:	079b      	lsls	r3, r3, #30
 800e78c:	d413      	bmi.n	800e7b6 <_printf_i+0x23a>
 800e78e:	68e0      	ldr	r0, [r4, #12]
 800e790:	9b03      	ldr	r3, [sp, #12]
 800e792:	4298      	cmp	r0, r3
 800e794:	bfb8      	it	lt
 800e796:	4618      	movlt	r0, r3
 800e798:	e7a4      	b.n	800e6e4 <_printf_i+0x168>
 800e79a:	2301      	movs	r3, #1
 800e79c:	4632      	mov	r2, r6
 800e79e:	4649      	mov	r1, r9
 800e7a0:	4640      	mov	r0, r8
 800e7a2:	47d0      	blx	sl
 800e7a4:	3001      	adds	r0, #1
 800e7a6:	d09b      	beq.n	800e6e0 <_printf_i+0x164>
 800e7a8:	3501      	adds	r5, #1
 800e7aa:	68e3      	ldr	r3, [r4, #12]
 800e7ac:	9903      	ldr	r1, [sp, #12]
 800e7ae:	1a5b      	subs	r3, r3, r1
 800e7b0:	42ab      	cmp	r3, r5
 800e7b2:	dcf2      	bgt.n	800e79a <_printf_i+0x21e>
 800e7b4:	e7eb      	b.n	800e78e <_printf_i+0x212>
 800e7b6:	2500      	movs	r5, #0
 800e7b8:	f104 0619 	add.w	r6, r4, #25
 800e7bc:	e7f5      	b.n	800e7aa <_printf_i+0x22e>
 800e7be:	bf00      	nop
 800e7c0:	08010b12 	.word	0x08010b12
 800e7c4:	08010b23 	.word	0x08010b23

0800e7c8 <iprintf>:
 800e7c8:	b40f      	push	{r0, r1, r2, r3}
 800e7ca:	4b0a      	ldr	r3, [pc, #40]	; (800e7f4 <iprintf+0x2c>)
 800e7cc:	b513      	push	{r0, r1, r4, lr}
 800e7ce:	681c      	ldr	r4, [r3, #0]
 800e7d0:	b124      	cbz	r4, 800e7dc <iprintf+0x14>
 800e7d2:	69a3      	ldr	r3, [r4, #24]
 800e7d4:	b913      	cbnz	r3, 800e7dc <iprintf+0x14>
 800e7d6:	4620      	mov	r0, r4
 800e7d8:	f000 fef8 	bl	800f5cc <__sinit>
 800e7dc:	ab05      	add	r3, sp, #20
 800e7de:	9a04      	ldr	r2, [sp, #16]
 800e7e0:	68a1      	ldr	r1, [r4, #8]
 800e7e2:	9301      	str	r3, [sp, #4]
 800e7e4:	4620      	mov	r0, r4
 800e7e6:	f001 fc43 	bl	8010070 <_vfiprintf_r>
 800e7ea:	b002      	add	sp, #8
 800e7ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7f0:	b004      	add	sp, #16
 800e7f2:	4770      	bx	lr
 800e7f4:	20002858 	.word	0x20002858

0800e7f8 <putchar>:
 800e7f8:	4b09      	ldr	r3, [pc, #36]	; (800e820 <putchar+0x28>)
 800e7fa:	b513      	push	{r0, r1, r4, lr}
 800e7fc:	681c      	ldr	r4, [r3, #0]
 800e7fe:	4601      	mov	r1, r0
 800e800:	b134      	cbz	r4, 800e810 <putchar+0x18>
 800e802:	69a3      	ldr	r3, [r4, #24]
 800e804:	b923      	cbnz	r3, 800e810 <putchar+0x18>
 800e806:	9001      	str	r0, [sp, #4]
 800e808:	4620      	mov	r0, r4
 800e80a:	f000 fedf 	bl	800f5cc <__sinit>
 800e80e:	9901      	ldr	r1, [sp, #4]
 800e810:	68a2      	ldr	r2, [r4, #8]
 800e812:	4620      	mov	r0, r4
 800e814:	b002      	add	sp, #8
 800e816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e81a:	f001 bd59 	b.w	80102d0 <_putc_r>
 800e81e:	bf00      	nop
 800e820:	20002858 	.word	0x20002858

0800e824 <quorem>:
 800e824:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e828:	6903      	ldr	r3, [r0, #16]
 800e82a:	690c      	ldr	r4, [r1, #16]
 800e82c:	42a3      	cmp	r3, r4
 800e82e:	4607      	mov	r7, r0
 800e830:	f2c0 8081 	blt.w	800e936 <quorem+0x112>
 800e834:	3c01      	subs	r4, #1
 800e836:	f101 0814 	add.w	r8, r1, #20
 800e83a:	f100 0514 	add.w	r5, r0, #20
 800e83e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e842:	9301      	str	r3, [sp, #4]
 800e844:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e848:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e84c:	3301      	adds	r3, #1
 800e84e:	429a      	cmp	r2, r3
 800e850:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e854:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e858:	fbb2 f6f3 	udiv	r6, r2, r3
 800e85c:	d331      	bcc.n	800e8c2 <quorem+0x9e>
 800e85e:	f04f 0e00 	mov.w	lr, #0
 800e862:	4640      	mov	r0, r8
 800e864:	46ac      	mov	ip, r5
 800e866:	46f2      	mov	sl, lr
 800e868:	f850 2b04 	ldr.w	r2, [r0], #4
 800e86c:	b293      	uxth	r3, r2
 800e86e:	fb06 e303 	mla	r3, r6, r3, lr
 800e872:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e876:	b29b      	uxth	r3, r3
 800e878:	ebaa 0303 	sub.w	r3, sl, r3
 800e87c:	f8dc a000 	ldr.w	sl, [ip]
 800e880:	0c12      	lsrs	r2, r2, #16
 800e882:	fa13 f38a 	uxtah	r3, r3, sl
 800e886:	fb06 e202 	mla	r2, r6, r2, lr
 800e88a:	9300      	str	r3, [sp, #0]
 800e88c:	9b00      	ldr	r3, [sp, #0]
 800e88e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e892:	b292      	uxth	r2, r2
 800e894:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e898:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e89c:	f8bd 3000 	ldrh.w	r3, [sp]
 800e8a0:	4581      	cmp	r9, r0
 800e8a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e8a6:	f84c 3b04 	str.w	r3, [ip], #4
 800e8aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e8ae:	d2db      	bcs.n	800e868 <quorem+0x44>
 800e8b0:	f855 300b 	ldr.w	r3, [r5, fp]
 800e8b4:	b92b      	cbnz	r3, 800e8c2 <quorem+0x9e>
 800e8b6:	9b01      	ldr	r3, [sp, #4]
 800e8b8:	3b04      	subs	r3, #4
 800e8ba:	429d      	cmp	r5, r3
 800e8bc:	461a      	mov	r2, r3
 800e8be:	d32e      	bcc.n	800e91e <quorem+0xfa>
 800e8c0:	613c      	str	r4, [r7, #16]
 800e8c2:	4638      	mov	r0, r7
 800e8c4:	f001 f9b2 	bl	800fc2c <__mcmp>
 800e8c8:	2800      	cmp	r0, #0
 800e8ca:	db24      	blt.n	800e916 <quorem+0xf2>
 800e8cc:	3601      	adds	r6, #1
 800e8ce:	4628      	mov	r0, r5
 800e8d0:	f04f 0c00 	mov.w	ip, #0
 800e8d4:	f858 2b04 	ldr.w	r2, [r8], #4
 800e8d8:	f8d0 e000 	ldr.w	lr, [r0]
 800e8dc:	b293      	uxth	r3, r2
 800e8de:	ebac 0303 	sub.w	r3, ip, r3
 800e8e2:	0c12      	lsrs	r2, r2, #16
 800e8e4:	fa13 f38e 	uxtah	r3, r3, lr
 800e8e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e8ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e8f0:	b29b      	uxth	r3, r3
 800e8f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e8f6:	45c1      	cmp	r9, r8
 800e8f8:	f840 3b04 	str.w	r3, [r0], #4
 800e8fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e900:	d2e8      	bcs.n	800e8d4 <quorem+0xb0>
 800e902:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e906:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e90a:	b922      	cbnz	r2, 800e916 <quorem+0xf2>
 800e90c:	3b04      	subs	r3, #4
 800e90e:	429d      	cmp	r5, r3
 800e910:	461a      	mov	r2, r3
 800e912:	d30a      	bcc.n	800e92a <quorem+0x106>
 800e914:	613c      	str	r4, [r7, #16]
 800e916:	4630      	mov	r0, r6
 800e918:	b003      	add	sp, #12
 800e91a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e91e:	6812      	ldr	r2, [r2, #0]
 800e920:	3b04      	subs	r3, #4
 800e922:	2a00      	cmp	r2, #0
 800e924:	d1cc      	bne.n	800e8c0 <quorem+0x9c>
 800e926:	3c01      	subs	r4, #1
 800e928:	e7c7      	b.n	800e8ba <quorem+0x96>
 800e92a:	6812      	ldr	r2, [r2, #0]
 800e92c:	3b04      	subs	r3, #4
 800e92e:	2a00      	cmp	r2, #0
 800e930:	d1f0      	bne.n	800e914 <quorem+0xf0>
 800e932:	3c01      	subs	r4, #1
 800e934:	e7eb      	b.n	800e90e <quorem+0xea>
 800e936:	2000      	movs	r0, #0
 800e938:	e7ee      	b.n	800e918 <quorem+0xf4>
 800e93a:	0000      	movs	r0, r0
 800e93c:	0000      	movs	r0, r0
	...

0800e940 <_dtoa_r>:
 800e940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e944:	ed2d 8b04 	vpush	{d8-d9}
 800e948:	ec57 6b10 	vmov	r6, r7, d0
 800e94c:	b093      	sub	sp, #76	; 0x4c
 800e94e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e950:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e954:	9106      	str	r1, [sp, #24]
 800e956:	ee10 aa10 	vmov	sl, s0
 800e95a:	4604      	mov	r4, r0
 800e95c:	9209      	str	r2, [sp, #36]	; 0x24
 800e95e:	930c      	str	r3, [sp, #48]	; 0x30
 800e960:	46bb      	mov	fp, r7
 800e962:	b975      	cbnz	r5, 800e982 <_dtoa_r+0x42>
 800e964:	2010      	movs	r0, #16
 800e966:	f000 fed7 	bl	800f718 <malloc>
 800e96a:	4602      	mov	r2, r0
 800e96c:	6260      	str	r0, [r4, #36]	; 0x24
 800e96e:	b920      	cbnz	r0, 800e97a <_dtoa_r+0x3a>
 800e970:	4ba7      	ldr	r3, [pc, #668]	; (800ec10 <_dtoa_r+0x2d0>)
 800e972:	21ea      	movs	r1, #234	; 0xea
 800e974:	48a7      	ldr	r0, [pc, #668]	; (800ec14 <_dtoa_r+0x2d4>)
 800e976:	f001 fe19 	bl	80105ac <__assert_func>
 800e97a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e97e:	6005      	str	r5, [r0, #0]
 800e980:	60c5      	str	r5, [r0, #12]
 800e982:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e984:	6819      	ldr	r1, [r3, #0]
 800e986:	b151      	cbz	r1, 800e99e <_dtoa_r+0x5e>
 800e988:	685a      	ldr	r2, [r3, #4]
 800e98a:	604a      	str	r2, [r1, #4]
 800e98c:	2301      	movs	r3, #1
 800e98e:	4093      	lsls	r3, r2
 800e990:	608b      	str	r3, [r1, #8]
 800e992:	4620      	mov	r0, r4
 800e994:	f000 ff08 	bl	800f7a8 <_Bfree>
 800e998:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e99a:	2200      	movs	r2, #0
 800e99c:	601a      	str	r2, [r3, #0]
 800e99e:	1e3b      	subs	r3, r7, #0
 800e9a0:	bfaa      	itet	ge
 800e9a2:	2300      	movge	r3, #0
 800e9a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e9a8:	f8c8 3000 	strge.w	r3, [r8]
 800e9ac:	4b9a      	ldr	r3, [pc, #616]	; (800ec18 <_dtoa_r+0x2d8>)
 800e9ae:	bfbc      	itt	lt
 800e9b0:	2201      	movlt	r2, #1
 800e9b2:	f8c8 2000 	strlt.w	r2, [r8]
 800e9b6:	ea33 030b 	bics.w	r3, r3, fp
 800e9ba:	d11b      	bne.n	800e9f4 <_dtoa_r+0xb4>
 800e9bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e9be:	f242 730f 	movw	r3, #9999	; 0x270f
 800e9c2:	6013      	str	r3, [r2, #0]
 800e9c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e9c8:	4333      	orrs	r3, r6
 800e9ca:	f000 8592 	beq.w	800f4f2 <_dtoa_r+0xbb2>
 800e9ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e9d0:	b963      	cbnz	r3, 800e9ec <_dtoa_r+0xac>
 800e9d2:	4b92      	ldr	r3, [pc, #584]	; (800ec1c <_dtoa_r+0x2dc>)
 800e9d4:	e022      	b.n	800ea1c <_dtoa_r+0xdc>
 800e9d6:	4b92      	ldr	r3, [pc, #584]	; (800ec20 <_dtoa_r+0x2e0>)
 800e9d8:	9301      	str	r3, [sp, #4]
 800e9da:	3308      	adds	r3, #8
 800e9dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e9de:	6013      	str	r3, [r2, #0]
 800e9e0:	9801      	ldr	r0, [sp, #4]
 800e9e2:	b013      	add	sp, #76	; 0x4c
 800e9e4:	ecbd 8b04 	vpop	{d8-d9}
 800e9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9ec:	4b8b      	ldr	r3, [pc, #556]	; (800ec1c <_dtoa_r+0x2dc>)
 800e9ee:	9301      	str	r3, [sp, #4]
 800e9f0:	3303      	adds	r3, #3
 800e9f2:	e7f3      	b.n	800e9dc <_dtoa_r+0x9c>
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	4650      	mov	r0, sl
 800e9fa:	4659      	mov	r1, fp
 800e9fc:	f7f2 f88c 	bl	8000b18 <__aeabi_dcmpeq>
 800ea00:	ec4b ab19 	vmov	d9, sl, fp
 800ea04:	4680      	mov	r8, r0
 800ea06:	b158      	cbz	r0, 800ea20 <_dtoa_r+0xe0>
 800ea08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	6013      	str	r3, [r2, #0]
 800ea0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	f000 856b 	beq.w	800f4ec <_dtoa_r+0xbac>
 800ea16:	4883      	ldr	r0, [pc, #524]	; (800ec24 <_dtoa_r+0x2e4>)
 800ea18:	6018      	str	r0, [r3, #0]
 800ea1a:	1e43      	subs	r3, r0, #1
 800ea1c:	9301      	str	r3, [sp, #4]
 800ea1e:	e7df      	b.n	800e9e0 <_dtoa_r+0xa0>
 800ea20:	ec4b ab10 	vmov	d0, sl, fp
 800ea24:	aa10      	add	r2, sp, #64	; 0x40
 800ea26:	a911      	add	r1, sp, #68	; 0x44
 800ea28:	4620      	mov	r0, r4
 800ea2a:	f001 f9a5 	bl	800fd78 <__d2b>
 800ea2e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ea32:	ee08 0a10 	vmov	s16, r0
 800ea36:	2d00      	cmp	r5, #0
 800ea38:	f000 8084 	beq.w	800eb44 <_dtoa_r+0x204>
 800ea3c:	ee19 3a90 	vmov	r3, s19
 800ea40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea44:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ea48:	4656      	mov	r6, sl
 800ea4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ea4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ea52:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ea56:	4b74      	ldr	r3, [pc, #464]	; (800ec28 <_dtoa_r+0x2e8>)
 800ea58:	2200      	movs	r2, #0
 800ea5a:	4630      	mov	r0, r6
 800ea5c:	4639      	mov	r1, r7
 800ea5e:	f7f1 fc3b 	bl	80002d8 <__aeabi_dsub>
 800ea62:	a365      	add	r3, pc, #404	; (adr r3, 800ebf8 <_dtoa_r+0x2b8>)
 800ea64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea68:	f7f1 fdee 	bl	8000648 <__aeabi_dmul>
 800ea6c:	a364      	add	r3, pc, #400	; (adr r3, 800ec00 <_dtoa_r+0x2c0>)
 800ea6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea72:	f7f1 fc33 	bl	80002dc <__adddf3>
 800ea76:	4606      	mov	r6, r0
 800ea78:	4628      	mov	r0, r5
 800ea7a:	460f      	mov	r7, r1
 800ea7c:	f7f1 fd7a 	bl	8000574 <__aeabi_i2d>
 800ea80:	a361      	add	r3, pc, #388	; (adr r3, 800ec08 <_dtoa_r+0x2c8>)
 800ea82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea86:	f7f1 fddf 	bl	8000648 <__aeabi_dmul>
 800ea8a:	4602      	mov	r2, r0
 800ea8c:	460b      	mov	r3, r1
 800ea8e:	4630      	mov	r0, r6
 800ea90:	4639      	mov	r1, r7
 800ea92:	f7f1 fc23 	bl	80002dc <__adddf3>
 800ea96:	4606      	mov	r6, r0
 800ea98:	460f      	mov	r7, r1
 800ea9a:	f7f2 f885 	bl	8000ba8 <__aeabi_d2iz>
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	9000      	str	r0, [sp, #0]
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	4630      	mov	r0, r6
 800eaa6:	4639      	mov	r1, r7
 800eaa8:	f7f2 f840 	bl	8000b2c <__aeabi_dcmplt>
 800eaac:	b150      	cbz	r0, 800eac4 <_dtoa_r+0x184>
 800eaae:	9800      	ldr	r0, [sp, #0]
 800eab0:	f7f1 fd60 	bl	8000574 <__aeabi_i2d>
 800eab4:	4632      	mov	r2, r6
 800eab6:	463b      	mov	r3, r7
 800eab8:	f7f2 f82e 	bl	8000b18 <__aeabi_dcmpeq>
 800eabc:	b910      	cbnz	r0, 800eac4 <_dtoa_r+0x184>
 800eabe:	9b00      	ldr	r3, [sp, #0]
 800eac0:	3b01      	subs	r3, #1
 800eac2:	9300      	str	r3, [sp, #0]
 800eac4:	9b00      	ldr	r3, [sp, #0]
 800eac6:	2b16      	cmp	r3, #22
 800eac8:	d85a      	bhi.n	800eb80 <_dtoa_r+0x240>
 800eaca:	9a00      	ldr	r2, [sp, #0]
 800eacc:	4b57      	ldr	r3, [pc, #348]	; (800ec2c <_dtoa_r+0x2ec>)
 800eace:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ead2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ead6:	ec51 0b19 	vmov	r0, r1, d9
 800eada:	f7f2 f827 	bl	8000b2c <__aeabi_dcmplt>
 800eade:	2800      	cmp	r0, #0
 800eae0:	d050      	beq.n	800eb84 <_dtoa_r+0x244>
 800eae2:	9b00      	ldr	r3, [sp, #0]
 800eae4:	3b01      	subs	r3, #1
 800eae6:	9300      	str	r3, [sp, #0]
 800eae8:	2300      	movs	r3, #0
 800eaea:	930b      	str	r3, [sp, #44]	; 0x2c
 800eaec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eaee:	1b5d      	subs	r5, r3, r5
 800eaf0:	1e6b      	subs	r3, r5, #1
 800eaf2:	9305      	str	r3, [sp, #20]
 800eaf4:	bf45      	ittet	mi
 800eaf6:	f1c5 0301 	rsbmi	r3, r5, #1
 800eafa:	9304      	strmi	r3, [sp, #16]
 800eafc:	2300      	movpl	r3, #0
 800eafe:	2300      	movmi	r3, #0
 800eb00:	bf4c      	ite	mi
 800eb02:	9305      	strmi	r3, [sp, #20]
 800eb04:	9304      	strpl	r3, [sp, #16]
 800eb06:	9b00      	ldr	r3, [sp, #0]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	db3d      	blt.n	800eb88 <_dtoa_r+0x248>
 800eb0c:	9b05      	ldr	r3, [sp, #20]
 800eb0e:	9a00      	ldr	r2, [sp, #0]
 800eb10:	920a      	str	r2, [sp, #40]	; 0x28
 800eb12:	4413      	add	r3, r2
 800eb14:	9305      	str	r3, [sp, #20]
 800eb16:	2300      	movs	r3, #0
 800eb18:	9307      	str	r3, [sp, #28]
 800eb1a:	9b06      	ldr	r3, [sp, #24]
 800eb1c:	2b09      	cmp	r3, #9
 800eb1e:	f200 8089 	bhi.w	800ec34 <_dtoa_r+0x2f4>
 800eb22:	2b05      	cmp	r3, #5
 800eb24:	bfc4      	itt	gt
 800eb26:	3b04      	subgt	r3, #4
 800eb28:	9306      	strgt	r3, [sp, #24]
 800eb2a:	9b06      	ldr	r3, [sp, #24]
 800eb2c:	f1a3 0302 	sub.w	r3, r3, #2
 800eb30:	bfcc      	ite	gt
 800eb32:	2500      	movgt	r5, #0
 800eb34:	2501      	movle	r5, #1
 800eb36:	2b03      	cmp	r3, #3
 800eb38:	f200 8087 	bhi.w	800ec4a <_dtoa_r+0x30a>
 800eb3c:	e8df f003 	tbb	[pc, r3]
 800eb40:	59383a2d 	.word	0x59383a2d
 800eb44:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800eb48:	441d      	add	r5, r3
 800eb4a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800eb4e:	2b20      	cmp	r3, #32
 800eb50:	bfc1      	itttt	gt
 800eb52:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800eb56:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800eb5a:	fa0b f303 	lslgt.w	r3, fp, r3
 800eb5e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800eb62:	bfda      	itte	le
 800eb64:	f1c3 0320 	rsble	r3, r3, #32
 800eb68:	fa06 f003 	lslle.w	r0, r6, r3
 800eb6c:	4318      	orrgt	r0, r3
 800eb6e:	f7f1 fcf1 	bl	8000554 <__aeabi_ui2d>
 800eb72:	2301      	movs	r3, #1
 800eb74:	4606      	mov	r6, r0
 800eb76:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800eb7a:	3d01      	subs	r5, #1
 800eb7c:	930e      	str	r3, [sp, #56]	; 0x38
 800eb7e:	e76a      	b.n	800ea56 <_dtoa_r+0x116>
 800eb80:	2301      	movs	r3, #1
 800eb82:	e7b2      	b.n	800eaea <_dtoa_r+0x1aa>
 800eb84:	900b      	str	r0, [sp, #44]	; 0x2c
 800eb86:	e7b1      	b.n	800eaec <_dtoa_r+0x1ac>
 800eb88:	9b04      	ldr	r3, [sp, #16]
 800eb8a:	9a00      	ldr	r2, [sp, #0]
 800eb8c:	1a9b      	subs	r3, r3, r2
 800eb8e:	9304      	str	r3, [sp, #16]
 800eb90:	4253      	negs	r3, r2
 800eb92:	9307      	str	r3, [sp, #28]
 800eb94:	2300      	movs	r3, #0
 800eb96:	930a      	str	r3, [sp, #40]	; 0x28
 800eb98:	e7bf      	b.n	800eb1a <_dtoa_r+0x1da>
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	9308      	str	r3, [sp, #32]
 800eb9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	dc55      	bgt.n	800ec50 <_dtoa_r+0x310>
 800eba4:	2301      	movs	r3, #1
 800eba6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ebaa:	461a      	mov	r2, r3
 800ebac:	9209      	str	r2, [sp, #36]	; 0x24
 800ebae:	e00c      	b.n	800ebca <_dtoa_r+0x28a>
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	e7f3      	b.n	800eb9c <_dtoa_r+0x25c>
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebb8:	9308      	str	r3, [sp, #32]
 800ebba:	9b00      	ldr	r3, [sp, #0]
 800ebbc:	4413      	add	r3, r2
 800ebbe:	9302      	str	r3, [sp, #8]
 800ebc0:	3301      	adds	r3, #1
 800ebc2:	2b01      	cmp	r3, #1
 800ebc4:	9303      	str	r3, [sp, #12]
 800ebc6:	bfb8      	it	lt
 800ebc8:	2301      	movlt	r3, #1
 800ebca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ebcc:	2200      	movs	r2, #0
 800ebce:	6042      	str	r2, [r0, #4]
 800ebd0:	2204      	movs	r2, #4
 800ebd2:	f102 0614 	add.w	r6, r2, #20
 800ebd6:	429e      	cmp	r6, r3
 800ebd8:	6841      	ldr	r1, [r0, #4]
 800ebda:	d93d      	bls.n	800ec58 <_dtoa_r+0x318>
 800ebdc:	4620      	mov	r0, r4
 800ebde:	f000 fda3 	bl	800f728 <_Balloc>
 800ebe2:	9001      	str	r0, [sp, #4]
 800ebe4:	2800      	cmp	r0, #0
 800ebe6:	d13b      	bne.n	800ec60 <_dtoa_r+0x320>
 800ebe8:	4b11      	ldr	r3, [pc, #68]	; (800ec30 <_dtoa_r+0x2f0>)
 800ebea:	4602      	mov	r2, r0
 800ebec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ebf0:	e6c0      	b.n	800e974 <_dtoa_r+0x34>
 800ebf2:	2301      	movs	r3, #1
 800ebf4:	e7df      	b.n	800ebb6 <_dtoa_r+0x276>
 800ebf6:	bf00      	nop
 800ebf8:	636f4361 	.word	0x636f4361
 800ebfc:	3fd287a7 	.word	0x3fd287a7
 800ec00:	8b60c8b3 	.word	0x8b60c8b3
 800ec04:	3fc68a28 	.word	0x3fc68a28
 800ec08:	509f79fb 	.word	0x509f79fb
 800ec0c:	3fd34413 	.word	0x3fd34413
 800ec10:	08010b41 	.word	0x08010b41
 800ec14:	08010b58 	.word	0x08010b58
 800ec18:	7ff00000 	.word	0x7ff00000
 800ec1c:	08010b3d 	.word	0x08010b3d
 800ec20:	08010b34 	.word	0x08010b34
 800ec24:	08010b11 	.word	0x08010b11
 800ec28:	3ff80000 	.word	0x3ff80000
 800ec2c:	08010ca8 	.word	0x08010ca8
 800ec30:	08010bb3 	.word	0x08010bb3
 800ec34:	2501      	movs	r5, #1
 800ec36:	2300      	movs	r3, #0
 800ec38:	9306      	str	r3, [sp, #24]
 800ec3a:	9508      	str	r5, [sp, #32]
 800ec3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ec40:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ec44:	2200      	movs	r2, #0
 800ec46:	2312      	movs	r3, #18
 800ec48:	e7b0      	b.n	800ebac <_dtoa_r+0x26c>
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	9308      	str	r3, [sp, #32]
 800ec4e:	e7f5      	b.n	800ec3c <_dtoa_r+0x2fc>
 800ec50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec52:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ec56:	e7b8      	b.n	800ebca <_dtoa_r+0x28a>
 800ec58:	3101      	adds	r1, #1
 800ec5a:	6041      	str	r1, [r0, #4]
 800ec5c:	0052      	lsls	r2, r2, #1
 800ec5e:	e7b8      	b.n	800ebd2 <_dtoa_r+0x292>
 800ec60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec62:	9a01      	ldr	r2, [sp, #4]
 800ec64:	601a      	str	r2, [r3, #0]
 800ec66:	9b03      	ldr	r3, [sp, #12]
 800ec68:	2b0e      	cmp	r3, #14
 800ec6a:	f200 809d 	bhi.w	800eda8 <_dtoa_r+0x468>
 800ec6e:	2d00      	cmp	r5, #0
 800ec70:	f000 809a 	beq.w	800eda8 <_dtoa_r+0x468>
 800ec74:	9b00      	ldr	r3, [sp, #0]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	dd32      	ble.n	800ece0 <_dtoa_r+0x3a0>
 800ec7a:	4ab7      	ldr	r2, [pc, #732]	; (800ef58 <_dtoa_r+0x618>)
 800ec7c:	f003 030f 	and.w	r3, r3, #15
 800ec80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ec84:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ec88:	9b00      	ldr	r3, [sp, #0]
 800ec8a:	05d8      	lsls	r0, r3, #23
 800ec8c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ec90:	d516      	bpl.n	800ecc0 <_dtoa_r+0x380>
 800ec92:	4bb2      	ldr	r3, [pc, #712]	; (800ef5c <_dtoa_r+0x61c>)
 800ec94:	ec51 0b19 	vmov	r0, r1, d9
 800ec98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ec9c:	f7f1 fdfe 	bl	800089c <__aeabi_ddiv>
 800eca0:	f007 070f 	and.w	r7, r7, #15
 800eca4:	4682      	mov	sl, r0
 800eca6:	468b      	mov	fp, r1
 800eca8:	2503      	movs	r5, #3
 800ecaa:	4eac      	ldr	r6, [pc, #688]	; (800ef5c <_dtoa_r+0x61c>)
 800ecac:	b957      	cbnz	r7, 800ecc4 <_dtoa_r+0x384>
 800ecae:	4642      	mov	r2, r8
 800ecb0:	464b      	mov	r3, r9
 800ecb2:	4650      	mov	r0, sl
 800ecb4:	4659      	mov	r1, fp
 800ecb6:	f7f1 fdf1 	bl	800089c <__aeabi_ddiv>
 800ecba:	4682      	mov	sl, r0
 800ecbc:	468b      	mov	fp, r1
 800ecbe:	e028      	b.n	800ed12 <_dtoa_r+0x3d2>
 800ecc0:	2502      	movs	r5, #2
 800ecc2:	e7f2      	b.n	800ecaa <_dtoa_r+0x36a>
 800ecc4:	07f9      	lsls	r1, r7, #31
 800ecc6:	d508      	bpl.n	800ecda <_dtoa_r+0x39a>
 800ecc8:	4640      	mov	r0, r8
 800ecca:	4649      	mov	r1, r9
 800eccc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ecd0:	f7f1 fcba 	bl	8000648 <__aeabi_dmul>
 800ecd4:	3501      	adds	r5, #1
 800ecd6:	4680      	mov	r8, r0
 800ecd8:	4689      	mov	r9, r1
 800ecda:	107f      	asrs	r7, r7, #1
 800ecdc:	3608      	adds	r6, #8
 800ecde:	e7e5      	b.n	800ecac <_dtoa_r+0x36c>
 800ece0:	f000 809b 	beq.w	800ee1a <_dtoa_r+0x4da>
 800ece4:	9b00      	ldr	r3, [sp, #0]
 800ece6:	4f9d      	ldr	r7, [pc, #628]	; (800ef5c <_dtoa_r+0x61c>)
 800ece8:	425e      	negs	r6, r3
 800ecea:	4b9b      	ldr	r3, [pc, #620]	; (800ef58 <_dtoa_r+0x618>)
 800ecec:	f006 020f 	and.w	r2, r6, #15
 800ecf0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ecf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecf8:	ec51 0b19 	vmov	r0, r1, d9
 800ecfc:	f7f1 fca4 	bl	8000648 <__aeabi_dmul>
 800ed00:	1136      	asrs	r6, r6, #4
 800ed02:	4682      	mov	sl, r0
 800ed04:	468b      	mov	fp, r1
 800ed06:	2300      	movs	r3, #0
 800ed08:	2502      	movs	r5, #2
 800ed0a:	2e00      	cmp	r6, #0
 800ed0c:	d17a      	bne.n	800ee04 <_dtoa_r+0x4c4>
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d1d3      	bne.n	800ecba <_dtoa_r+0x37a>
 800ed12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	f000 8082 	beq.w	800ee1e <_dtoa_r+0x4de>
 800ed1a:	4b91      	ldr	r3, [pc, #580]	; (800ef60 <_dtoa_r+0x620>)
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	4650      	mov	r0, sl
 800ed20:	4659      	mov	r1, fp
 800ed22:	f7f1 ff03 	bl	8000b2c <__aeabi_dcmplt>
 800ed26:	2800      	cmp	r0, #0
 800ed28:	d079      	beq.n	800ee1e <_dtoa_r+0x4de>
 800ed2a:	9b03      	ldr	r3, [sp, #12]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d076      	beq.n	800ee1e <_dtoa_r+0x4de>
 800ed30:	9b02      	ldr	r3, [sp, #8]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	dd36      	ble.n	800eda4 <_dtoa_r+0x464>
 800ed36:	9b00      	ldr	r3, [sp, #0]
 800ed38:	4650      	mov	r0, sl
 800ed3a:	4659      	mov	r1, fp
 800ed3c:	1e5f      	subs	r7, r3, #1
 800ed3e:	2200      	movs	r2, #0
 800ed40:	4b88      	ldr	r3, [pc, #544]	; (800ef64 <_dtoa_r+0x624>)
 800ed42:	f7f1 fc81 	bl	8000648 <__aeabi_dmul>
 800ed46:	9e02      	ldr	r6, [sp, #8]
 800ed48:	4682      	mov	sl, r0
 800ed4a:	468b      	mov	fp, r1
 800ed4c:	3501      	adds	r5, #1
 800ed4e:	4628      	mov	r0, r5
 800ed50:	f7f1 fc10 	bl	8000574 <__aeabi_i2d>
 800ed54:	4652      	mov	r2, sl
 800ed56:	465b      	mov	r3, fp
 800ed58:	f7f1 fc76 	bl	8000648 <__aeabi_dmul>
 800ed5c:	4b82      	ldr	r3, [pc, #520]	; (800ef68 <_dtoa_r+0x628>)
 800ed5e:	2200      	movs	r2, #0
 800ed60:	f7f1 fabc 	bl	80002dc <__adddf3>
 800ed64:	46d0      	mov	r8, sl
 800ed66:	46d9      	mov	r9, fp
 800ed68:	4682      	mov	sl, r0
 800ed6a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ed6e:	2e00      	cmp	r6, #0
 800ed70:	d158      	bne.n	800ee24 <_dtoa_r+0x4e4>
 800ed72:	4b7e      	ldr	r3, [pc, #504]	; (800ef6c <_dtoa_r+0x62c>)
 800ed74:	2200      	movs	r2, #0
 800ed76:	4640      	mov	r0, r8
 800ed78:	4649      	mov	r1, r9
 800ed7a:	f7f1 faad 	bl	80002d8 <__aeabi_dsub>
 800ed7e:	4652      	mov	r2, sl
 800ed80:	465b      	mov	r3, fp
 800ed82:	4680      	mov	r8, r0
 800ed84:	4689      	mov	r9, r1
 800ed86:	f7f1 feef 	bl	8000b68 <__aeabi_dcmpgt>
 800ed8a:	2800      	cmp	r0, #0
 800ed8c:	f040 8295 	bne.w	800f2ba <_dtoa_r+0x97a>
 800ed90:	4652      	mov	r2, sl
 800ed92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ed96:	4640      	mov	r0, r8
 800ed98:	4649      	mov	r1, r9
 800ed9a:	f7f1 fec7 	bl	8000b2c <__aeabi_dcmplt>
 800ed9e:	2800      	cmp	r0, #0
 800eda0:	f040 8289 	bne.w	800f2b6 <_dtoa_r+0x976>
 800eda4:	ec5b ab19 	vmov	sl, fp, d9
 800eda8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800edaa:	2b00      	cmp	r3, #0
 800edac:	f2c0 8148 	blt.w	800f040 <_dtoa_r+0x700>
 800edb0:	9a00      	ldr	r2, [sp, #0]
 800edb2:	2a0e      	cmp	r2, #14
 800edb4:	f300 8144 	bgt.w	800f040 <_dtoa_r+0x700>
 800edb8:	4b67      	ldr	r3, [pc, #412]	; (800ef58 <_dtoa_r+0x618>)
 800edba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800edbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800edc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	f280 80d5 	bge.w	800ef74 <_dtoa_r+0x634>
 800edca:	9b03      	ldr	r3, [sp, #12]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	f300 80d1 	bgt.w	800ef74 <_dtoa_r+0x634>
 800edd2:	f040 826f 	bne.w	800f2b4 <_dtoa_r+0x974>
 800edd6:	4b65      	ldr	r3, [pc, #404]	; (800ef6c <_dtoa_r+0x62c>)
 800edd8:	2200      	movs	r2, #0
 800edda:	4640      	mov	r0, r8
 800eddc:	4649      	mov	r1, r9
 800edde:	f7f1 fc33 	bl	8000648 <__aeabi_dmul>
 800ede2:	4652      	mov	r2, sl
 800ede4:	465b      	mov	r3, fp
 800ede6:	f7f1 feb5 	bl	8000b54 <__aeabi_dcmpge>
 800edea:	9e03      	ldr	r6, [sp, #12]
 800edec:	4637      	mov	r7, r6
 800edee:	2800      	cmp	r0, #0
 800edf0:	f040 8245 	bne.w	800f27e <_dtoa_r+0x93e>
 800edf4:	9d01      	ldr	r5, [sp, #4]
 800edf6:	2331      	movs	r3, #49	; 0x31
 800edf8:	f805 3b01 	strb.w	r3, [r5], #1
 800edfc:	9b00      	ldr	r3, [sp, #0]
 800edfe:	3301      	adds	r3, #1
 800ee00:	9300      	str	r3, [sp, #0]
 800ee02:	e240      	b.n	800f286 <_dtoa_r+0x946>
 800ee04:	07f2      	lsls	r2, r6, #31
 800ee06:	d505      	bpl.n	800ee14 <_dtoa_r+0x4d4>
 800ee08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee0c:	f7f1 fc1c 	bl	8000648 <__aeabi_dmul>
 800ee10:	3501      	adds	r5, #1
 800ee12:	2301      	movs	r3, #1
 800ee14:	1076      	asrs	r6, r6, #1
 800ee16:	3708      	adds	r7, #8
 800ee18:	e777      	b.n	800ed0a <_dtoa_r+0x3ca>
 800ee1a:	2502      	movs	r5, #2
 800ee1c:	e779      	b.n	800ed12 <_dtoa_r+0x3d2>
 800ee1e:	9f00      	ldr	r7, [sp, #0]
 800ee20:	9e03      	ldr	r6, [sp, #12]
 800ee22:	e794      	b.n	800ed4e <_dtoa_r+0x40e>
 800ee24:	9901      	ldr	r1, [sp, #4]
 800ee26:	4b4c      	ldr	r3, [pc, #304]	; (800ef58 <_dtoa_r+0x618>)
 800ee28:	4431      	add	r1, r6
 800ee2a:	910d      	str	r1, [sp, #52]	; 0x34
 800ee2c:	9908      	ldr	r1, [sp, #32]
 800ee2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ee32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ee36:	2900      	cmp	r1, #0
 800ee38:	d043      	beq.n	800eec2 <_dtoa_r+0x582>
 800ee3a:	494d      	ldr	r1, [pc, #308]	; (800ef70 <_dtoa_r+0x630>)
 800ee3c:	2000      	movs	r0, #0
 800ee3e:	f7f1 fd2d 	bl	800089c <__aeabi_ddiv>
 800ee42:	4652      	mov	r2, sl
 800ee44:	465b      	mov	r3, fp
 800ee46:	f7f1 fa47 	bl	80002d8 <__aeabi_dsub>
 800ee4a:	9d01      	ldr	r5, [sp, #4]
 800ee4c:	4682      	mov	sl, r0
 800ee4e:	468b      	mov	fp, r1
 800ee50:	4649      	mov	r1, r9
 800ee52:	4640      	mov	r0, r8
 800ee54:	f7f1 fea8 	bl	8000ba8 <__aeabi_d2iz>
 800ee58:	4606      	mov	r6, r0
 800ee5a:	f7f1 fb8b 	bl	8000574 <__aeabi_i2d>
 800ee5e:	4602      	mov	r2, r0
 800ee60:	460b      	mov	r3, r1
 800ee62:	4640      	mov	r0, r8
 800ee64:	4649      	mov	r1, r9
 800ee66:	f7f1 fa37 	bl	80002d8 <__aeabi_dsub>
 800ee6a:	3630      	adds	r6, #48	; 0x30
 800ee6c:	f805 6b01 	strb.w	r6, [r5], #1
 800ee70:	4652      	mov	r2, sl
 800ee72:	465b      	mov	r3, fp
 800ee74:	4680      	mov	r8, r0
 800ee76:	4689      	mov	r9, r1
 800ee78:	f7f1 fe58 	bl	8000b2c <__aeabi_dcmplt>
 800ee7c:	2800      	cmp	r0, #0
 800ee7e:	d163      	bne.n	800ef48 <_dtoa_r+0x608>
 800ee80:	4642      	mov	r2, r8
 800ee82:	464b      	mov	r3, r9
 800ee84:	4936      	ldr	r1, [pc, #216]	; (800ef60 <_dtoa_r+0x620>)
 800ee86:	2000      	movs	r0, #0
 800ee88:	f7f1 fa26 	bl	80002d8 <__aeabi_dsub>
 800ee8c:	4652      	mov	r2, sl
 800ee8e:	465b      	mov	r3, fp
 800ee90:	f7f1 fe4c 	bl	8000b2c <__aeabi_dcmplt>
 800ee94:	2800      	cmp	r0, #0
 800ee96:	f040 80b5 	bne.w	800f004 <_dtoa_r+0x6c4>
 800ee9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee9c:	429d      	cmp	r5, r3
 800ee9e:	d081      	beq.n	800eda4 <_dtoa_r+0x464>
 800eea0:	4b30      	ldr	r3, [pc, #192]	; (800ef64 <_dtoa_r+0x624>)
 800eea2:	2200      	movs	r2, #0
 800eea4:	4650      	mov	r0, sl
 800eea6:	4659      	mov	r1, fp
 800eea8:	f7f1 fbce 	bl	8000648 <__aeabi_dmul>
 800eeac:	4b2d      	ldr	r3, [pc, #180]	; (800ef64 <_dtoa_r+0x624>)
 800eeae:	4682      	mov	sl, r0
 800eeb0:	468b      	mov	fp, r1
 800eeb2:	4640      	mov	r0, r8
 800eeb4:	4649      	mov	r1, r9
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	f7f1 fbc6 	bl	8000648 <__aeabi_dmul>
 800eebc:	4680      	mov	r8, r0
 800eebe:	4689      	mov	r9, r1
 800eec0:	e7c6      	b.n	800ee50 <_dtoa_r+0x510>
 800eec2:	4650      	mov	r0, sl
 800eec4:	4659      	mov	r1, fp
 800eec6:	f7f1 fbbf 	bl	8000648 <__aeabi_dmul>
 800eeca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eecc:	9d01      	ldr	r5, [sp, #4]
 800eece:	930f      	str	r3, [sp, #60]	; 0x3c
 800eed0:	4682      	mov	sl, r0
 800eed2:	468b      	mov	fp, r1
 800eed4:	4649      	mov	r1, r9
 800eed6:	4640      	mov	r0, r8
 800eed8:	f7f1 fe66 	bl	8000ba8 <__aeabi_d2iz>
 800eedc:	4606      	mov	r6, r0
 800eede:	f7f1 fb49 	bl	8000574 <__aeabi_i2d>
 800eee2:	3630      	adds	r6, #48	; 0x30
 800eee4:	4602      	mov	r2, r0
 800eee6:	460b      	mov	r3, r1
 800eee8:	4640      	mov	r0, r8
 800eeea:	4649      	mov	r1, r9
 800eeec:	f7f1 f9f4 	bl	80002d8 <__aeabi_dsub>
 800eef0:	f805 6b01 	strb.w	r6, [r5], #1
 800eef4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eef6:	429d      	cmp	r5, r3
 800eef8:	4680      	mov	r8, r0
 800eefa:	4689      	mov	r9, r1
 800eefc:	f04f 0200 	mov.w	r2, #0
 800ef00:	d124      	bne.n	800ef4c <_dtoa_r+0x60c>
 800ef02:	4b1b      	ldr	r3, [pc, #108]	; (800ef70 <_dtoa_r+0x630>)
 800ef04:	4650      	mov	r0, sl
 800ef06:	4659      	mov	r1, fp
 800ef08:	f7f1 f9e8 	bl	80002dc <__adddf3>
 800ef0c:	4602      	mov	r2, r0
 800ef0e:	460b      	mov	r3, r1
 800ef10:	4640      	mov	r0, r8
 800ef12:	4649      	mov	r1, r9
 800ef14:	f7f1 fe28 	bl	8000b68 <__aeabi_dcmpgt>
 800ef18:	2800      	cmp	r0, #0
 800ef1a:	d173      	bne.n	800f004 <_dtoa_r+0x6c4>
 800ef1c:	4652      	mov	r2, sl
 800ef1e:	465b      	mov	r3, fp
 800ef20:	4913      	ldr	r1, [pc, #76]	; (800ef70 <_dtoa_r+0x630>)
 800ef22:	2000      	movs	r0, #0
 800ef24:	f7f1 f9d8 	bl	80002d8 <__aeabi_dsub>
 800ef28:	4602      	mov	r2, r0
 800ef2a:	460b      	mov	r3, r1
 800ef2c:	4640      	mov	r0, r8
 800ef2e:	4649      	mov	r1, r9
 800ef30:	f7f1 fdfc 	bl	8000b2c <__aeabi_dcmplt>
 800ef34:	2800      	cmp	r0, #0
 800ef36:	f43f af35 	beq.w	800eda4 <_dtoa_r+0x464>
 800ef3a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ef3c:	1e6b      	subs	r3, r5, #1
 800ef3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ef40:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ef44:	2b30      	cmp	r3, #48	; 0x30
 800ef46:	d0f8      	beq.n	800ef3a <_dtoa_r+0x5fa>
 800ef48:	9700      	str	r7, [sp, #0]
 800ef4a:	e049      	b.n	800efe0 <_dtoa_r+0x6a0>
 800ef4c:	4b05      	ldr	r3, [pc, #20]	; (800ef64 <_dtoa_r+0x624>)
 800ef4e:	f7f1 fb7b 	bl	8000648 <__aeabi_dmul>
 800ef52:	4680      	mov	r8, r0
 800ef54:	4689      	mov	r9, r1
 800ef56:	e7bd      	b.n	800eed4 <_dtoa_r+0x594>
 800ef58:	08010ca8 	.word	0x08010ca8
 800ef5c:	08010c80 	.word	0x08010c80
 800ef60:	3ff00000 	.word	0x3ff00000
 800ef64:	40240000 	.word	0x40240000
 800ef68:	401c0000 	.word	0x401c0000
 800ef6c:	40140000 	.word	0x40140000
 800ef70:	3fe00000 	.word	0x3fe00000
 800ef74:	9d01      	ldr	r5, [sp, #4]
 800ef76:	4656      	mov	r6, sl
 800ef78:	465f      	mov	r7, fp
 800ef7a:	4642      	mov	r2, r8
 800ef7c:	464b      	mov	r3, r9
 800ef7e:	4630      	mov	r0, r6
 800ef80:	4639      	mov	r1, r7
 800ef82:	f7f1 fc8b 	bl	800089c <__aeabi_ddiv>
 800ef86:	f7f1 fe0f 	bl	8000ba8 <__aeabi_d2iz>
 800ef8a:	4682      	mov	sl, r0
 800ef8c:	f7f1 faf2 	bl	8000574 <__aeabi_i2d>
 800ef90:	4642      	mov	r2, r8
 800ef92:	464b      	mov	r3, r9
 800ef94:	f7f1 fb58 	bl	8000648 <__aeabi_dmul>
 800ef98:	4602      	mov	r2, r0
 800ef9a:	460b      	mov	r3, r1
 800ef9c:	4630      	mov	r0, r6
 800ef9e:	4639      	mov	r1, r7
 800efa0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800efa4:	f7f1 f998 	bl	80002d8 <__aeabi_dsub>
 800efa8:	f805 6b01 	strb.w	r6, [r5], #1
 800efac:	9e01      	ldr	r6, [sp, #4]
 800efae:	9f03      	ldr	r7, [sp, #12]
 800efb0:	1bae      	subs	r6, r5, r6
 800efb2:	42b7      	cmp	r7, r6
 800efb4:	4602      	mov	r2, r0
 800efb6:	460b      	mov	r3, r1
 800efb8:	d135      	bne.n	800f026 <_dtoa_r+0x6e6>
 800efba:	f7f1 f98f 	bl	80002dc <__adddf3>
 800efbe:	4642      	mov	r2, r8
 800efc0:	464b      	mov	r3, r9
 800efc2:	4606      	mov	r6, r0
 800efc4:	460f      	mov	r7, r1
 800efc6:	f7f1 fdcf 	bl	8000b68 <__aeabi_dcmpgt>
 800efca:	b9d0      	cbnz	r0, 800f002 <_dtoa_r+0x6c2>
 800efcc:	4642      	mov	r2, r8
 800efce:	464b      	mov	r3, r9
 800efd0:	4630      	mov	r0, r6
 800efd2:	4639      	mov	r1, r7
 800efd4:	f7f1 fda0 	bl	8000b18 <__aeabi_dcmpeq>
 800efd8:	b110      	cbz	r0, 800efe0 <_dtoa_r+0x6a0>
 800efda:	f01a 0f01 	tst.w	sl, #1
 800efde:	d110      	bne.n	800f002 <_dtoa_r+0x6c2>
 800efe0:	4620      	mov	r0, r4
 800efe2:	ee18 1a10 	vmov	r1, s16
 800efe6:	f000 fbdf 	bl	800f7a8 <_Bfree>
 800efea:	2300      	movs	r3, #0
 800efec:	9800      	ldr	r0, [sp, #0]
 800efee:	702b      	strb	r3, [r5, #0]
 800eff0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eff2:	3001      	adds	r0, #1
 800eff4:	6018      	str	r0, [r3, #0]
 800eff6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eff8:	2b00      	cmp	r3, #0
 800effa:	f43f acf1 	beq.w	800e9e0 <_dtoa_r+0xa0>
 800effe:	601d      	str	r5, [r3, #0]
 800f000:	e4ee      	b.n	800e9e0 <_dtoa_r+0xa0>
 800f002:	9f00      	ldr	r7, [sp, #0]
 800f004:	462b      	mov	r3, r5
 800f006:	461d      	mov	r5, r3
 800f008:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f00c:	2a39      	cmp	r2, #57	; 0x39
 800f00e:	d106      	bne.n	800f01e <_dtoa_r+0x6de>
 800f010:	9a01      	ldr	r2, [sp, #4]
 800f012:	429a      	cmp	r2, r3
 800f014:	d1f7      	bne.n	800f006 <_dtoa_r+0x6c6>
 800f016:	9901      	ldr	r1, [sp, #4]
 800f018:	2230      	movs	r2, #48	; 0x30
 800f01a:	3701      	adds	r7, #1
 800f01c:	700a      	strb	r2, [r1, #0]
 800f01e:	781a      	ldrb	r2, [r3, #0]
 800f020:	3201      	adds	r2, #1
 800f022:	701a      	strb	r2, [r3, #0]
 800f024:	e790      	b.n	800ef48 <_dtoa_r+0x608>
 800f026:	4ba6      	ldr	r3, [pc, #664]	; (800f2c0 <_dtoa_r+0x980>)
 800f028:	2200      	movs	r2, #0
 800f02a:	f7f1 fb0d 	bl	8000648 <__aeabi_dmul>
 800f02e:	2200      	movs	r2, #0
 800f030:	2300      	movs	r3, #0
 800f032:	4606      	mov	r6, r0
 800f034:	460f      	mov	r7, r1
 800f036:	f7f1 fd6f 	bl	8000b18 <__aeabi_dcmpeq>
 800f03a:	2800      	cmp	r0, #0
 800f03c:	d09d      	beq.n	800ef7a <_dtoa_r+0x63a>
 800f03e:	e7cf      	b.n	800efe0 <_dtoa_r+0x6a0>
 800f040:	9a08      	ldr	r2, [sp, #32]
 800f042:	2a00      	cmp	r2, #0
 800f044:	f000 80d7 	beq.w	800f1f6 <_dtoa_r+0x8b6>
 800f048:	9a06      	ldr	r2, [sp, #24]
 800f04a:	2a01      	cmp	r2, #1
 800f04c:	f300 80ba 	bgt.w	800f1c4 <_dtoa_r+0x884>
 800f050:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f052:	2a00      	cmp	r2, #0
 800f054:	f000 80b2 	beq.w	800f1bc <_dtoa_r+0x87c>
 800f058:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f05c:	9e07      	ldr	r6, [sp, #28]
 800f05e:	9d04      	ldr	r5, [sp, #16]
 800f060:	9a04      	ldr	r2, [sp, #16]
 800f062:	441a      	add	r2, r3
 800f064:	9204      	str	r2, [sp, #16]
 800f066:	9a05      	ldr	r2, [sp, #20]
 800f068:	2101      	movs	r1, #1
 800f06a:	441a      	add	r2, r3
 800f06c:	4620      	mov	r0, r4
 800f06e:	9205      	str	r2, [sp, #20]
 800f070:	f000 fc52 	bl	800f918 <__i2b>
 800f074:	4607      	mov	r7, r0
 800f076:	2d00      	cmp	r5, #0
 800f078:	dd0c      	ble.n	800f094 <_dtoa_r+0x754>
 800f07a:	9b05      	ldr	r3, [sp, #20]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	dd09      	ble.n	800f094 <_dtoa_r+0x754>
 800f080:	42ab      	cmp	r3, r5
 800f082:	9a04      	ldr	r2, [sp, #16]
 800f084:	bfa8      	it	ge
 800f086:	462b      	movge	r3, r5
 800f088:	1ad2      	subs	r2, r2, r3
 800f08a:	9204      	str	r2, [sp, #16]
 800f08c:	9a05      	ldr	r2, [sp, #20]
 800f08e:	1aed      	subs	r5, r5, r3
 800f090:	1ad3      	subs	r3, r2, r3
 800f092:	9305      	str	r3, [sp, #20]
 800f094:	9b07      	ldr	r3, [sp, #28]
 800f096:	b31b      	cbz	r3, 800f0e0 <_dtoa_r+0x7a0>
 800f098:	9b08      	ldr	r3, [sp, #32]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	f000 80af 	beq.w	800f1fe <_dtoa_r+0x8be>
 800f0a0:	2e00      	cmp	r6, #0
 800f0a2:	dd13      	ble.n	800f0cc <_dtoa_r+0x78c>
 800f0a4:	4639      	mov	r1, r7
 800f0a6:	4632      	mov	r2, r6
 800f0a8:	4620      	mov	r0, r4
 800f0aa:	f000 fcf5 	bl	800fa98 <__pow5mult>
 800f0ae:	ee18 2a10 	vmov	r2, s16
 800f0b2:	4601      	mov	r1, r0
 800f0b4:	4607      	mov	r7, r0
 800f0b6:	4620      	mov	r0, r4
 800f0b8:	f000 fc44 	bl	800f944 <__multiply>
 800f0bc:	ee18 1a10 	vmov	r1, s16
 800f0c0:	4680      	mov	r8, r0
 800f0c2:	4620      	mov	r0, r4
 800f0c4:	f000 fb70 	bl	800f7a8 <_Bfree>
 800f0c8:	ee08 8a10 	vmov	s16, r8
 800f0cc:	9b07      	ldr	r3, [sp, #28]
 800f0ce:	1b9a      	subs	r2, r3, r6
 800f0d0:	d006      	beq.n	800f0e0 <_dtoa_r+0x7a0>
 800f0d2:	ee18 1a10 	vmov	r1, s16
 800f0d6:	4620      	mov	r0, r4
 800f0d8:	f000 fcde 	bl	800fa98 <__pow5mult>
 800f0dc:	ee08 0a10 	vmov	s16, r0
 800f0e0:	2101      	movs	r1, #1
 800f0e2:	4620      	mov	r0, r4
 800f0e4:	f000 fc18 	bl	800f918 <__i2b>
 800f0e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	4606      	mov	r6, r0
 800f0ee:	f340 8088 	ble.w	800f202 <_dtoa_r+0x8c2>
 800f0f2:	461a      	mov	r2, r3
 800f0f4:	4601      	mov	r1, r0
 800f0f6:	4620      	mov	r0, r4
 800f0f8:	f000 fcce 	bl	800fa98 <__pow5mult>
 800f0fc:	9b06      	ldr	r3, [sp, #24]
 800f0fe:	2b01      	cmp	r3, #1
 800f100:	4606      	mov	r6, r0
 800f102:	f340 8081 	ble.w	800f208 <_dtoa_r+0x8c8>
 800f106:	f04f 0800 	mov.w	r8, #0
 800f10a:	6933      	ldr	r3, [r6, #16]
 800f10c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f110:	6918      	ldr	r0, [r3, #16]
 800f112:	f000 fbb1 	bl	800f878 <__hi0bits>
 800f116:	f1c0 0020 	rsb	r0, r0, #32
 800f11a:	9b05      	ldr	r3, [sp, #20]
 800f11c:	4418      	add	r0, r3
 800f11e:	f010 001f 	ands.w	r0, r0, #31
 800f122:	f000 8092 	beq.w	800f24a <_dtoa_r+0x90a>
 800f126:	f1c0 0320 	rsb	r3, r0, #32
 800f12a:	2b04      	cmp	r3, #4
 800f12c:	f340 808a 	ble.w	800f244 <_dtoa_r+0x904>
 800f130:	f1c0 001c 	rsb	r0, r0, #28
 800f134:	9b04      	ldr	r3, [sp, #16]
 800f136:	4403      	add	r3, r0
 800f138:	9304      	str	r3, [sp, #16]
 800f13a:	9b05      	ldr	r3, [sp, #20]
 800f13c:	4403      	add	r3, r0
 800f13e:	4405      	add	r5, r0
 800f140:	9305      	str	r3, [sp, #20]
 800f142:	9b04      	ldr	r3, [sp, #16]
 800f144:	2b00      	cmp	r3, #0
 800f146:	dd07      	ble.n	800f158 <_dtoa_r+0x818>
 800f148:	ee18 1a10 	vmov	r1, s16
 800f14c:	461a      	mov	r2, r3
 800f14e:	4620      	mov	r0, r4
 800f150:	f000 fcfc 	bl	800fb4c <__lshift>
 800f154:	ee08 0a10 	vmov	s16, r0
 800f158:	9b05      	ldr	r3, [sp, #20]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	dd05      	ble.n	800f16a <_dtoa_r+0x82a>
 800f15e:	4631      	mov	r1, r6
 800f160:	461a      	mov	r2, r3
 800f162:	4620      	mov	r0, r4
 800f164:	f000 fcf2 	bl	800fb4c <__lshift>
 800f168:	4606      	mov	r6, r0
 800f16a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d06e      	beq.n	800f24e <_dtoa_r+0x90e>
 800f170:	ee18 0a10 	vmov	r0, s16
 800f174:	4631      	mov	r1, r6
 800f176:	f000 fd59 	bl	800fc2c <__mcmp>
 800f17a:	2800      	cmp	r0, #0
 800f17c:	da67      	bge.n	800f24e <_dtoa_r+0x90e>
 800f17e:	9b00      	ldr	r3, [sp, #0]
 800f180:	3b01      	subs	r3, #1
 800f182:	ee18 1a10 	vmov	r1, s16
 800f186:	9300      	str	r3, [sp, #0]
 800f188:	220a      	movs	r2, #10
 800f18a:	2300      	movs	r3, #0
 800f18c:	4620      	mov	r0, r4
 800f18e:	f000 fb2d 	bl	800f7ec <__multadd>
 800f192:	9b08      	ldr	r3, [sp, #32]
 800f194:	ee08 0a10 	vmov	s16, r0
 800f198:	2b00      	cmp	r3, #0
 800f19a:	f000 81b1 	beq.w	800f500 <_dtoa_r+0xbc0>
 800f19e:	2300      	movs	r3, #0
 800f1a0:	4639      	mov	r1, r7
 800f1a2:	220a      	movs	r2, #10
 800f1a4:	4620      	mov	r0, r4
 800f1a6:	f000 fb21 	bl	800f7ec <__multadd>
 800f1aa:	9b02      	ldr	r3, [sp, #8]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	4607      	mov	r7, r0
 800f1b0:	f300 808e 	bgt.w	800f2d0 <_dtoa_r+0x990>
 800f1b4:	9b06      	ldr	r3, [sp, #24]
 800f1b6:	2b02      	cmp	r3, #2
 800f1b8:	dc51      	bgt.n	800f25e <_dtoa_r+0x91e>
 800f1ba:	e089      	b.n	800f2d0 <_dtoa_r+0x990>
 800f1bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f1be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f1c2:	e74b      	b.n	800f05c <_dtoa_r+0x71c>
 800f1c4:	9b03      	ldr	r3, [sp, #12]
 800f1c6:	1e5e      	subs	r6, r3, #1
 800f1c8:	9b07      	ldr	r3, [sp, #28]
 800f1ca:	42b3      	cmp	r3, r6
 800f1cc:	bfbf      	itttt	lt
 800f1ce:	9b07      	ldrlt	r3, [sp, #28]
 800f1d0:	9607      	strlt	r6, [sp, #28]
 800f1d2:	1af2      	sublt	r2, r6, r3
 800f1d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f1d6:	bfb6      	itet	lt
 800f1d8:	189b      	addlt	r3, r3, r2
 800f1da:	1b9e      	subge	r6, r3, r6
 800f1dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f1de:	9b03      	ldr	r3, [sp, #12]
 800f1e0:	bfb8      	it	lt
 800f1e2:	2600      	movlt	r6, #0
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	bfb7      	itett	lt
 800f1e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f1ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f1f0:	1a9d      	sublt	r5, r3, r2
 800f1f2:	2300      	movlt	r3, #0
 800f1f4:	e734      	b.n	800f060 <_dtoa_r+0x720>
 800f1f6:	9e07      	ldr	r6, [sp, #28]
 800f1f8:	9d04      	ldr	r5, [sp, #16]
 800f1fa:	9f08      	ldr	r7, [sp, #32]
 800f1fc:	e73b      	b.n	800f076 <_dtoa_r+0x736>
 800f1fe:	9a07      	ldr	r2, [sp, #28]
 800f200:	e767      	b.n	800f0d2 <_dtoa_r+0x792>
 800f202:	9b06      	ldr	r3, [sp, #24]
 800f204:	2b01      	cmp	r3, #1
 800f206:	dc18      	bgt.n	800f23a <_dtoa_r+0x8fa>
 800f208:	f1ba 0f00 	cmp.w	sl, #0
 800f20c:	d115      	bne.n	800f23a <_dtoa_r+0x8fa>
 800f20e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f212:	b993      	cbnz	r3, 800f23a <_dtoa_r+0x8fa>
 800f214:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f218:	0d1b      	lsrs	r3, r3, #20
 800f21a:	051b      	lsls	r3, r3, #20
 800f21c:	b183      	cbz	r3, 800f240 <_dtoa_r+0x900>
 800f21e:	9b04      	ldr	r3, [sp, #16]
 800f220:	3301      	adds	r3, #1
 800f222:	9304      	str	r3, [sp, #16]
 800f224:	9b05      	ldr	r3, [sp, #20]
 800f226:	3301      	adds	r3, #1
 800f228:	9305      	str	r3, [sp, #20]
 800f22a:	f04f 0801 	mov.w	r8, #1
 800f22e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f230:	2b00      	cmp	r3, #0
 800f232:	f47f af6a 	bne.w	800f10a <_dtoa_r+0x7ca>
 800f236:	2001      	movs	r0, #1
 800f238:	e76f      	b.n	800f11a <_dtoa_r+0x7da>
 800f23a:	f04f 0800 	mov.w	r8, #0
 800f23e:	e7f6      	b.n	800f22e <_dtoa_r+0x8ee>
 800f240:	4698      	mov	r8, r3
 800f242:	e7f4      	b.n	800f22e <_dtoa_r+0x8ee>
 800f244:	f43f af7d 	beq.w	800f142 <_dtoa_r+0x802>
 800f248:	4618      	mov	r0, r3
 800f24a:	301c      	adds	r0, #28
 800f24c:	e772      	b.n	800f134 <_dtoa_r+0x7f4>
 800f24e:	9b03      	ldr	r3, [sp, #12]
 800f250:	2b00      	cmp	r3, #0
 800f252:	dc37      	bgt.n	800f2c4 <_dtoa_r+0x984>
 800f254:	9b06      	ldr	r3, [sp, #24]
 800f256:	2b02      	cmp	r3, #2
 800f258:	dd34      	ble.n	800f2c4 <_dtoa_r+0x984>
 800f25a:	9b03      	ldr	r3, [sp, #12]
 800f25c:	9302      	str	r3, [sp, #8]
 800f25e:	9b02      	ldr	r3, [sp, #8]
 800f260:	b96b      	cbnz	r3, 800f27e <_dtoa_r+0x93e>
 800f262:	4631      	mov	r1, r6
 800f264:	2205      	movs	r2, #5
 800f266:	4620      	mov	r0, r4
 800f268:	f000 fac0 	bl	800f7ec <__multadd>
 800f26c:	4601      	mov	r1, r0
 800f26e:	4606      	mov	r6, r0
 800f270:	ee18 0a10 	vmov	r0, s16
 800f274:	f000 fcda 	bl	800fc2c <__mcmp>
 800f278:	2800      	cmp	r0, #0
 800f27a:	f73f adbb 	bgt.w	800edf4 <_dtoa_r+0x4b4>
 800f27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f280:	9d01      	ldr	r5, [sp, #4]
 800f282:	43db      	mvns	r3, r3
 800f284:	9300      	str	r3, [sp, #0]
 800f286:	f04f 0800 	mov.w	r8, #0
 800f28a:	4631      	mov	r1, r6
 800f28c:	4620      	mov	r0, r4
 800f28e:	f000 fa8b 	bl	800f7a8 <_Bfree>
 800f292:	2f00      	cmp	r7, #0
 800f294:	f43f aea4 	beq.w	800efe0 <_dtoa_r+0x6a0>
 800f298:	f1b8 0f00 	cmp.w	r8, #0
 800f29c:	d005      	beq.n	800f2aa <_dtoa_r+0x96a>
 800f29e:	45b8      	cmp	r8, r7
 800f2a0:	d003      	beq.n	800f2aa <_dtoa_r+0x96a>
 800f2a2:	4641      	mov	r1, r8
 800f2a4:	4620      	mov	r0, r4
 800f2a6:	f000 fa7f 	bl	800f7a8 <_Bfree>
 800f2aa:	4639      	mov	r1, r7
 800f2ac:	4620      	mov	r0, r4
 800f2ae:	f000 fa7b 	bl	800f7a8 <_Bfree>
 800f2b2:	e695      	b.n	800efe0 <_dtoa_r+0x6a0>
 800f2b4:	2600      	movs	r6, #0
 800f2b6:	4637      	mov	r7, r6
 800f2b8:	e7e1      	b.n	800f27e <_dtoa_r+0x93e>
 800f2ba:	9700      	str	r7, [sp, #0]
 800f2bc:	4637      	mov	r7, r6
 800f2be:	e599      	b.n	800edf4 <_dtoa_r+0x4b4>
 800f2c0:	40240000 	.word	0x40240000
 800f2c4:	9b08      	ldr	r3, [sp, #32]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	f000 80ca 	beq.w	800f460 <_dtoa_r+0xb20>
 800f2cc:	9b03      	ldr	r3, [sp, #12]
 800f2ce:	9302      	str	r3, [sp, #8]
 800f2d0:	2d00      	cmp	r5, #0
 800f2d2:	dd05      	ble.n	800f2e0 <_dtoa_r+0x9a0>
 800f2d4:	4639      	mov	r1, r7
 800f2d6:	462a      	mov	r2, r5
 800f2d8:	4620      	mov	r0, r4
 800f2da:	f000 fc37 	bl	800fb4c <__lshift>
 800f2de:	4607      	mov	r7, r0
 800f2e0:	f1b8 0f00 	cmp.w	r8, #0
 800f2e4:	d05b      	beq.n	800f39e <_dtoa_r+0xa5e>
 800f2e6:	6879      	ldr	r1, [r7, #4]
 800f2e8:	4620      	mov	r0, r4
 800f2ea:	f000 fa1d 	bl	800f728 <_Balloc>
 800f2ee:	4605      	mov	r5, r0
 800f2f0:	b928      	cbnz	r0, 800f2fe <_dtoa_r+0x9be>
 800f2f2:	4b87      	ldr	r3, [pc, #540]	; (800f510 <_dtoa_r+0xbd0>)
 800f2f4:	4602      	mov	r2, r0
 800f2f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f2fa:	f7ff bb3b 	b.w	800e974 <_dtoa_r+0x34>
 800f2fe:	693a      	ldr	r2, [r7, #16]
 800f300:	3202      	adds	r2, #2
 800f302:	0092      	lsls	r2, r2, #2
 800f304:	f107 010c 	add.w	r1, r7, #12
 800f308:	300c      	adds	r0, #12
 800f30a:	f7fe fddd 	bl	800dec8 <memcpy>
 800f30e:	2201      	movs	r2, #1
 800f310:	4629      	mov	r1, r5
 800f312:	4620      	mov	r0, r4
 800f314:	f000 fc1a 	bl	800fb4c <__lshift>
 800f318:	9b01      	ldr	r3, [sp, #4]
 800f31a:	f103 0901 	add.w	r9, r3, #1
 800f31e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f322:	4413      	add	r3, r2
 800f324:	9305      	str	r3, [sp, #20]
 800f326:	f00a 0301 	and.w	r3, sl, #1
 800f32a:	46b8      	mov	r8, r7
 800f32c:	9304      	str	r3, [sp, #16]
 800f32e:	4607      	mov	r7, r0
 800f330:	4631      	mov	r1, r6
 800f332:	ee18 0a10 	vmov	r0, s16
 800f336:	f7ff fa75 	bl	800e824 <quorem>
 800f33a:	4641      	mov	r1, r8
 800f33c:	9002      	str	r0, [sp, #8]
 800f33e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f342:	ee18 0a10 	vmov	r0, s16
 800f346:	f000 fc71 	bl	800fc2c <__mcmp>
 800f34a:	463a      	mov	r2, r7
 800f34c:	9003      	str	r0, [sp, #12]
 800f34e:	4631      	mov	r1, r6
 800f350:	4620      	mov	r0, r4
 800f352:	f000 fc87 	bl	800fc64 <__mdiff>
 800f356:	68c2      	ldr	r2, [r0, #12]
 800f358:	f109 3bff 	add.w	fp, r9, #4294967295
 800f35c:	4605      	mov	r5, r0
 800f35e:	bb02      	cbnz	r2, 800f3a2 <_dtoa_r+0xa62>
 800f360:	4601      	mov	r1, r0
 800f362:	ee18 0a10 	vmov	r0, s16
 800f366:	f000 fc61 	bl	800fc2c <__mcmp>
 800f36a:	4602      	mov	r2, r0
 800f36c:	4629      	mov	r1, r5
 800f36e:	4620      	mov	r0, r4
 800f370:	9207      	str	r2, [sp, #28]
 800f372:	f000 fa19 	bl	800f7a8 <_Bfree>
 800f376:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f37a:	ea43 0102 	orr.w	r1, r3, r2
 800f37e:	9b04      	ldr	r3, [sp, #16]
 800f380:	430b      	orrs	r3, r1
 800f382:	464d      	mov	r5, r9
 800f384:	d10f      	bne.n	800f3a6 <_dtoa_r+0xa66>
 800f386:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f38a:	d02a      	beq.n	800f3e2 <_dtoa_r+0xaa2>
 800f38c:	9b03      	ldr	r3, [sp, #12]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	dd02      	ble.n	800f398 <_dtoa_r+0xa58>
 800f392:	9b02      	ldr	r3, [sp, #8]
 800f394:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f398:	f88b a000 	strb.w	sl, [fp]
 800f39c:	e775      	b.n	800f28a <_dtoa_r+0x94a>
 800f39e:	4638      	mov	r0, r7
 800f3a0:	e7ba      	b.n	800f318 <_dtoa_r+0x9d8>
 800f3a2:	2201      	movs	r2, #1
 800f3a4:	e7e2      	b.n	800f36c <_dtoa_r+0xa2c>
 800f3a6:	9b03      	ldr	r3, [sp, #12]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	db04      	blt.n	800f3b6 <_dtoa_r+0xa76>
 800f3ac:	9906      	ldr	r1, [sp, #24]
 800f3ae:	430b      	orrs	r3, r1
 800f3b0:	9904      	ldr	r1, [sp, #16]
 800f3b2:	430b      	orrs	r3, r1
 800f3b4:	d122      	bne.n	800f3fc <_dtoa_r+0xabc>
 800f3b6:	2a00      	cmp	r2, #0
 800f3b8:	ddee      	ble.n	800f398 <_dtoa_r+0xa58>
 800f3ba:	ee18 1a10 	vmov	r1, s16
 800f3be:	2201      	movs	r2, #1
 800f3c0:	4620      	mov	r0, r4
 800f3c2:	f000 fbc3 	bl	800fb4c <__lshift>
 800f3c6:	4631      	mov	r1, r6
 800f3c8:	ee08 0a10 	vmov	s16, r0
 800f3cc:	f000 fc2e 	bl	800fc2c <__mcmp>
 800f3d0:	2800      	cmp	r0, #0
 800f3d2:	dc03      	bgt.n	800f3dc <_dtoa_r+0xa9c>
 800f3d4:	d1e0      	bne.n	800f398 <_dtoa_r+0xa58>
 800f3d6:	f01a 0f01 	tst.w	sl, #1
 800f3da:	d0dd      	beq.n	800f398 <_dtoa_r+0xa58>
 800f3dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f3e0:	d1d7      	bne.n	800f392 <_dtoa_r+0xa52>
 800f3e2:	2339      	movs	r3, #57	; 0x39
 800f3e4:	f88b 3000 	strb.w	r3, [fp]
 800f3e8:	462b      	mov	r3, r5
 800f3ea:	461d      	mov	r5, r3
 800f3ec:	3b01      	subs	r3, #1
 800f3ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f3f2:	2a39      	cmp	r2, #57	; 0x39
 800f3f4:	d071      	beq.n	800f4da <_dtoa_r+0xb9a>
 800f3f6:	3201      	adds	r2, #1
 800f3f8:	701a      	strb	r2, [r3, #0]
 800f3fa:	e746      	b.n	800f28a <_dtoa_r+0x94a>
 800f3fc:	2a00      	cmp	r2, #0
 800f3fe:	dd07      	ble.n	800f410 <_dtoa_r+0xad0>
 800f400:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f404:	d0ed      	beq.n	800f3e2 <_dtoa_r+0xaa2>
 800f406:	f10a 0301 	add.w	r3, sl, #1
 800f40a:	f88b 3000 	strb.w	r3, [fp]
 800f40e:	e73c      	b.n	800f28a <_dtoa_r+0x94a>
 800f410:	9b05      	ldr	r3, [sp, #20]
 800f412:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f416:	4599      	cmp	r9, r3
 800f418:	d047      	beq.n	800f4aa <_dtoa_r+0xb6a>
 800f41a:	ee18 1a10 	vmov	r1, s16
 800f41e:	2300      	movs	r3, #0
 800f420:	220a      	movs	r2, #10
 800f422:	4620      	mov	r0, r4
 800f424:	f000 f9e2 	bl	800f7ec <__multadd>
 800f428:	45b8      	cmp	r8, r7
 800f42a:	ee08 0a10 	vmov	s16, r0
 800f42e:	f04f 0300 	mov.w	r3, #0
 800f432:	f04f 020a 	mov.w	r2, #10
 800f436:	4641      	mov	r1, r8
 800f438:	4620      	mov	r0, r4
 800f43a:	d106      	bne.n	800f44a <_dtoa_r+0xb0a>
 800f43c:	f000 f9d6 	bl	800f7ec <__multadd>
 800f440:	4680      	mov	r8, r0
 800f442:	4607      	mov	r7, r0
 800f444:	f109 0901 	add.w	r9, r9, #1
 800f448:	e772      	b.n	800f330 <_dtoa_r+0x9f0>
 800f44a:	f000 f9cf 	bl	800f7ec <__multadd>
 800f44e:	4639      	mov	r1, r7
 800f450:	4680      	mov	r8, r0
 800f452:	2300      	movs	r3, #0
 800f454:	220a      	movs	r2, #10
 800f456:	4620      	mov	r0, r4
 800f458:	f000 f9c8 	bl	800f7ec <__multadd>
 800f45c:	4607      	mov	r7, r0
 800f45e:	e7f1      	b.n	800f444 <_dtoa_r+0xb04>
 800f460:	9b03      	ldr	r3, [sp, #12]
 800f462:	9302      	str	r3, [sp, #8]
 800f464:	9d01      	ldr	r5, [sp, #4]
 800f466:	ee18 0a10 	vmov	r0, s16
 800f46a:	4631      	mov	r1, r6
 800f46c:	f7ff f9da 	bl	800e824 <quorem>
 800f470:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f474:	9b01      	ldr	r3, [sp, #4]
 800f476:	f805 ab01 	strb.w	sl, [r5], #1
 800f47a:	1aea      	subs	r2, r5, r3
 800f47c:	9b02      	ldr	r3, [sp, #8]
 800f47e:	4293      	cmp	r3, r2
 800f480:	dd09      	ble.n	800f496 <_dtoa_r+0xb56>
 800f482:	ee18 1a10 	vmov	r1, s16
 800f486:	2300      	movs	r3, #0
 800f488:	220a      	movs	r2, #10
 800f48a:	4620      	mov	r0, r4
 800f48c:	f000 f9ae 	bl	800f7ec <__multadd>
 800f490:	ee08 0a10 	vmov	s16, r0
 800f494:	e7e7      	b.n	800f466 <_dtoa_r+0xb26>
 800f496:	9b02      	ldr	r3, [sp, #8]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	bfc8      	it	gt
 800f49c:	461d      	movgt	r5, r3
 800f49e:	9b01      	ldr	r3, [sp, #4]
 800f4a0:	bfd8      	it	le
 800f4a2:	2501      	movle	r5, #1
 800f4a4:	441d      	add	r5, r3
 800f4a6:	f04f 0800 	mov.w	r8, #0
 800f4aa:	ee18 1a10 	vmov	r1, s16
 800f4ae:	2201      	movs	r2, #1
 800f4b0:	4620      	mov	r0, r4
 800f4b2:	f000 fb4b 	bl	800fb4c <__lshift>
 800f4b6:	4631      	mov	r1, r6
 800f4b8:	ee08 0a10 	vmov	s16, r0
 800f4bc:	f000 fbb6 	bl	800fc2c <__mcmp>
 800f4c0:	2800      	cmp	r0, #0
 800f4c2:	dc91      	bgt.n	800f3e8 <_dtoa_r+0xaa8>
 800f4c4:	d102      	bne.n	800f4cc <_dtoa_r+0xb8c>
 800f4c6:	f01a 0f01 	tst.w	sl, #1
 800f4ca:	d18d      	bne.n	800f3e8 <_dtoa_r+0xaa8>
 800f4cc:	462b      	mov	r3, r5
 800f4ce:	461d      	mov	r5, r3
 800f4d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f4d4:	2a30      	cmp	r2, #48	; 0x30
 800f4d6:	d0fa      	beq.n	800f4ce <_dtoa_r+0xb8e>
 800f4d8:	e6d7      	b.n	800f28a <_dtoa_r+0x94a>
 800f4da:	9a01      	ldr	r2, [sp, #4]
 800f4dc:	429a      	cmp	r2, r3
 800f4de:	d184      	bne.n	800f3ea <_dtoa_r+0xaaa>
 800f4e0:	9b00      	ldr	r3, [sp, #0]
 800f4e2:	3301      	adds	r3, #1
 800f4e4:	9300      	str	r3, [sp, #0]
 800f4e6:	2331      	movs	r3, #49	; 0x31
 800f4e8:	7013      	strb	r3, [r2, #0]
 800f4ea:	e6ce      	b.n	800f28a <_dtoa_r+0x94a>
 800f4ec:	4b09      	ldr	r3, [pc, #36]	; (800f514 <_dtoa_r+0xbd4>)
 800f4ee:	f7ff ba95 	b.w	800ea1c <_dtoa_r+0xdc>
 800f4f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	f47f aa6e 	bne.w	800e9d6 <_dtoa_r+0x96>
 800f4fa:	4b07      	ldr	r3, [pc, #28]	; (800f518 <_dtoa_r+0xbd8>)
 800f4fc:	f7ff ba8e 	b.w	800ea1c <_dtoa_r+0xdc>
 800f500:	9b02      	ldr	r3, [sp, #8]
 800f502:	2b00      	cmp	r3, #0
 800f504:	dcae      	bgt.n	800f464 <_dtoa_r+0xb24>
 800f506:	9b06      	ldr	r3, [sp, #24]
 800f508:	2b02      	cmp	r3, #2
 800f50a:	f73f aea8 	bgt.w	800f25e <_dtoa_r+0x91e>
 800f50e:	e7a9      	b.n	800f464 <_dtoa_r+0xb24>
 800f510:	08010bb3 	.word	0x08010bb3
 800f514:	08010b10 	.word	0x08010b10
 800f518:	08010b34 	.word	0x08010b34

0800f51c <std>:
 800f51c:	2300      	movs	r3, #0
 800f51e:	b510      	push	{r4, lr}
 800f520:	4604      	mov	r4, r0
 800f522:	e9c0 3300 	strd	r3, r3, [r0]
 800f526:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f52a:	6083      	str	r3, [r0, #8]
 800f52c:	8181      	strh	r1, [r0, #12]
 800f52e:	6643      	str	r3, [r0, #100]	; 0x64
 800f530:	81c2      	strh	r2, [r0, #14]
 800f532:	6183      	str	r3, [r0, #24]
 800f534:	4619      	mov	r1, r3
 800f536:	2208      	movs	r2, #8
 800f538:	305c      	adds	r0, #92	; 0x5c
 800f53a:	f7fe fcd3 	bl	800dee4 <memset>
 800f53e:	4b05      	ldr	r3, [pc, #20]	; (800f554 <std+0x38>)
 800f540:	6263      	str	r3, [r4, #36]	; 0x24
 800f542:	4b05      	ldr	r3, [pc, #20]	; (800f558 <std+0x3c>)
 800f544:	62a3      	str	r3, [r4, #40]	; 0x28
 800f546:	4b05      	ldr	r3, [pc, #20]	; (800f55c <std+0x40>)
 800f548:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f54a:	4b05      	ldr	r3, [pc, #20]	; (800f560 <std+0x44>)
 800f54c:	6224      	str	r4, [r4, #32]
 800f54e:	6323      	str	r3, [r4, #48]	; 0x30
 800f550:	bd10      	pop	{r4, pc}
 800f552:	bf00      	nop
 800f554:	08010381 	.word	0x08010381
 800f558:	080103a3 	.word	0x080103a3
 800f55c:	080103db 	.word	0x080103db
 800f560:	080103ff 	.word	0x080103ff

0800f564 <_cleanup_r>:
 800f564:	4901      	ldr	r1, [pc, #4]	; (800f56c <_cleanup_r+0x8>)
 800f566:	f000 b8af 	b.w	800f6c8 <_fwalk_reent>
 800f56a:	bf00      	nop
 800f56c:	08010715 	.word	0x08010715

0800f570 <__sfmoreglue>:
 800f570:	b570      	push	{r4, r5, r6, lr}
 800f572:	2268      	movs	r2, #104	; 0x68
 800f574:	1e4d      	subs	r5, r1, #1
 800f576:	4355      	muls	r5, r2
 800f578:	460e      	mov	r6, r1
 800f57a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f57e:	f000 fcd9 	bl	800ff34 <_malloc_r>
 800f582:	4604      	mov	r4, r0
 800f584:	b140      	cbz	r0, 800f598 <__sfmoreglue+0x28>
 800f586:	2100      	movs	r1, #0
 800f588:	e9c0 1600 	strd	r1, r6, [r0]
 800f58c:	300c      	adds	r0, #12
 800f58e:	60a0      	str	r0, [r4, #8]
 800f590:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f594:	f7fe fca6 	bl	800dee4 <memset>
 800f598:	4620      	mov	r0, r4
 800f59a:	bd70      	pop	{r4, r5, r6, pc}

0800f59c <__sfp_lock_acquire>:
 800f59c:	4801      	ldr	r0, [pc, #4]	; (800f5a4 <__sfp_lock_acquire+0x8>)
 800f59e:	f000 b8b8 	b.w	800f712 <__retarget_lock_acquire_recursive>
 800f5a2:	bf00      	nop
 800f5a4:	20004c65 	.word	0x20004c65

0800f5a8 <__sfp_lock_release>:
 800f5a8:	4801      	ldr	r0, [pc, #4]	; (800f5b0 <__sfp_lock_release+0x8>)
 800f5aa:	f000 b8b3 	b.w	800f714 <__retarget_lock_release_recursive>
 800f5ae:	bf00      	nop
 800f5b0:	20004c65 	.word	0x20004c65

0800f5b4 <__sinit_lock_acquire>:
 800f5b4:	4801      	ldr	r0, [pc, #4]	; (800f5bc <__sinit_lock_acquire+0x8>)
 800f5b6:	f000 b8ac 	b.w	800f712 <__retarget_lock_acquire_recursive>
 800f5ba:	bf00      	nop
 800f5bc:	20004c66 	.word	0x20004c66

0800f5c0 <__sinit_lock_release>:
 800f5c0:	4801      	ldr	r0, [pc, #4]	; (800f5c8 <__sinit_lock_release+0x8>)
 800f5c2:	f000 b8a7 	b.w	800f714 <__retarget_lock_release_recursive>
 800f5c6:	bf00      	nop
 800f5c8:	20004c66 	.word	0x20004c66

0800f5cc <__sinit>:
 800f5cc:	b510      	push	{r4, lr}
 800f5ce:	4604      	mov	r4, r0
 800f5d0:	f7ff fff0 	bl	800f5b4 <__sinit_lock_acquire>
 800f5d4:	69a3      	ldr	r3, [r4, #24]
 800f5d6:	b11b      	cbz	r3, 800f5e0 <__sinit+0x14>
 800f5d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5dc:	f7ff bff0 	b.w	800f5c0 <__sinit_lock_release>
 800f5e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f5e4:	6523      	str	r3, [r4, #80]	; 0x50
 800f5e6:	4b13      	ldr	r3, [pc, #76]	; (800f634 <__sinit+0x68>)
 800f5e8:	4a13      	ldr	r2, [pc, #76]	; (800f638 <__sinit+0x6c>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	62a2      	str	r2, [r4, #40]	; 0x28
 800f5ee:	42a3      	cmp	r3, r4
 800f5f0:	bf04      	itt	eq
 800f5f2:	2301      	moveq	r3, #1
 800f5f4:	61a3      	streq	r3, [r4, #24]
 800f5f6:	4620      	mov	r0, r4
 800f5f8:	f000 f820 	bl	800f63c <__sfp>
 800f5fc:	6060      	str	r0, [r4, #4]
 800f5fe:	4620      	mov	r0, r4
 800f600:	f000 f81c 	bl	800f63c <__sfp>
 800f604:	60a0      	str	r0, [r4, #8]
 800f606:	4620      	mov	r0, r4
 800f608:	f000 f818 	bl	800f63c <__sfp>
 800f60c:	2200      	movs	r2, #0
 800f60e:	60e0      	str	r0, [r4, #12]
 800f610:	2104      	movs	r1, #4
 800f612:	6860      	ldr	r0, [r4, #4]
 800f614:	f7ff ff82 	bl	800f51c <std>
 800f618:	68a0      	ldr	r0, [r4, #8]
 800f61a:	2201      	movs	r2, #1
 800f61c:	2109      	movs	r1, #9
 800f61e:	f7ff ff7d 	bl	800f51c <std>
 800f622:	68e0      	ldr	r0, [r4, #12]
 800f624:	2202      	movs	r2, #2
 800f626:	2112      	movs	r1, #18
 800f628:	f7ff ff78 	bl	800f51c <std>
 800f62c:	2301      	movs	r3, #1
 800f62e:	61a3      	str	r3, [r4, #24]
 800f630:	e7d2      	b.n	800f5d8 <__sinit+0xc>
 800f632:	bf00      	nop
 800f634:	08010afc 	.word	0x08010afc
 800f638:	0800f565 	.word	0x0800f565

0800f63c <__sfp>:
 800f63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f63e:	4607      	mov	r7, r0
 800f640:	f7ff ffac 	bl	800f59c <__sfp_lock_acquire>
 800f644:	4b1e      	ldr	r3, [pc, #120]	; (800f6c0 <__sfp+0x84>)
 800f646:	681e      	ldr	r6, [r3, #0]
 800f648:	69b3      	ldr	r3, [r6, #24]
 800f64a:	b913      	cbnz	r3, 800f652 <__sfp+0x16>
 800f64c:	4630      	mov	r0, r6
 800f64e:	f7ff ffbd 	bl	800f5cc <__sinit>
 800f652:	3648      	adds	r6, #72	; 0x48
 800f654:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f658:	3b01      	subs	r3, #1
 800f65a:	d503      	bpl.n	800f664 <__sfp+0x28>
 800f65c:	6833      	ldr	r3, [r6, #0]
 800f65e:	b30b      	cbz	r3, 800f6a4 <__sfp+0x68>
 800f660:	6836      	ldr	r6, [r6, #0]
 800f662:	e7f7      	b.n	800f654 <__sfp+0x18>
 800f664:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f668:	b9d5      	cbnz	r5, 800f6a0 <__sfp+0x64>
 800f66a:	4b16      	ldr	r3, [pc, #88]	; (800f6c4 <__sfp+0x88>)
 800f66c:	60e3      	str	r3, [r4, #12]
 800f66e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f672:	6665      	str	r5, [r4, #100]	; 0x64
 800f674:	f000 f84c 	bl	800f710 <__retarget_lock_init_recursive>
 800f678:	f7ff ff96 	bl	800f5a8 <__sfp_lock_release>
 800f67c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f680:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f684:	6025      	str	r5, [r4, #0]
 800f686:	61a5      	str	r5, [r4, #24]
 800f688:	2208      	movs	r2, #8
 800f68a:	4629      	mov	r1, r5
 800f68c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f690:	f7fe fc28 	bl	800dee4 <memset>
 800f694:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f698:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f69c:	4620      	mov	r0, r4
 800f69e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6a0:	3468      	adds	r4, #104	; 0x68
 800f6a2:	e7d9      	b.n	800f658 <__sfp+0x1c>
 800f6a4:	2104      	movs	r1, #4
 800f6a6:	4638      	mov	r0, r7
 800f6a8:	f7ff ff62 	bl	800f570 <__sfmoreglue>
 800f6ac:	4604      	mov	r4, r0
 800f6ae:	6030      	str	r0, [r6, #0]
 800f6b0:	2800      	cmp	r0, #0
 800f6b2:	d1d5      	bne.n	800f660 <__sfp+0x24>
 800f6b4:	f7ff ff78 	bl	800f5a8 <__sfp_lock_release>
 800f6b8:	230c      	movs	r3, #12
 800f6ba:	603b      	str	r3, [r7, #0]
 800f6bc:	e7ee      	b.n	800f69c <__sfp+0x60>
 800f6be:	bf00      	nop
 800f6c0:	08010afc 	.word	0x08010afc
 800f6c4:	ffff0001 	.word	0xffff0001

0800f6c8 <_fwalk_reent>:
 800f6c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6cc:	4606      	mov	r6, r0
 800f6ce:	4688      	mov	r8, r1
 800f6d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f6d4:	2700      	movs	r7, #0
 800f6d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f6da:	f1b9 0901 	subs.w	r9, r9, #1
 800f6de:	d505      	bpl.n	800f6ec <_fwalk_reent+0x24>
 800f6e0:	6824      	ldr	r4, [r4, #0]
 800f6e2:	2c00      	cmp	r4, #0
 800f6e4:	d1f7      	bne.n	800f6d6 <_fwalk_reent+0xe>
 800f6e6:	4638      	mov	r0, r7
 800f6e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6ec:	89ab      	ldrh	r3, [r5, #12]
 800f6ee:	2b01      	cmp	r3, #1
 800f6f0:	d907      	bls.n	800f702 <_fwalk_reent+0x3a>
 800f6f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f6f6:	3301      	adds	r3, #1
 800f6f8:	d003      	beq.n	800f702 <_fwalk_reent+0x3a>
 800f6fa:	4629      	mov	r1, r5
 800f6fc:	4630      	mov	r0, r6
 800f6fe:	47c0      	blx	r8
 800f700:	4307      	orrs	r7, r0
 800f702:	3568      	adds	r5, #104	; 0x68
 800f704:	e7e9      	b.n	800f6da <_fwalk_reent+0x12>
	...

0800f708 <_localeconv_r>:
 800f708:	4800      	ldr	r0, [pc, #0]	; (800f70c <_localeconv_r+0x4>)
 800f70a:	4770      	bx	lr
 800f70c:	200029ac 	.word	0x200029ac

0800f710 <__retarget_lock_init_recursive>:
 800f710:	4770      	bx	lr

0800f712 <__retarget_lock_acquire_recursive>:
 800f712:	4770      	bx	lr

0800f714 <__retarget_lock_release_recursive>:
 800f714:	4770      	bx	lr
	...

0800f718 <malloc>:
 800f718:	4b02      	ldr	r3, [pc, #8]	; (800f724 <malloc+0xc>)
 800f71a:	4601      	mov	r1, r0
 800f71c:	6818      	ldr	r0, [r3, #0]
 800f71e:	f000 bc09 	b.w	800ff34 <_malloc_r>
 800f722:	bf00      	nop
 800f724:	20002858 	.word	0x20002858

0800f728 <_Balloc>:
 800f728:	b570      	push	{r4, r5, r6, lr}
 800f72a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f72c:	4604      	mov	r4, r0
 800f72e:	460d      	mov	r5, r1
 800f730:	b976      	cbnz	r6, 800f750 <_Balloc+0x28>
 800f732:	2010      	movs	r0, #16
 800f734:	f7ff fff0 	bl	800f718 <malloc>
 800f738:	4602      	mov	r2, r0
 800f73a:	6260      	str	r0, [r4, #36]	; 0x24
 800f73c:	b920      	cbnz	r0, 800f748 <_Balloc+0x20>
 800f73e:	4b18      	ldr	r3, [pc, #96]	; (800f7a0 <_Balloc+0x78>)
 800f740:	4818      	ldr	r0, [pc, #96]	; (800f7a4 <_Balloc+0x7c>)
 800f742:	2166      	movs	r1, #102	; 0x66
 800f744:	f000 ff32 	bl	80105ac <__assert_func>
 800f748:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f74c:	6006      	str	r6, [r0, #0]
 800f74e:	60c6      	str	r6, [r0, #12]
 800f750:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f752:	68f3      	ldr	r3, [r6, #12]
 800f754:	b183      	cbz	r3, 800f778 <_Balloc+0x50>
 800f756:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f758:	68db      	ldr	r3, [r3, #12]
 800f75a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f75e:	b9b8      	cbnz	r0, 800f790 <_Balloc+0x68>
 800f760:	2101      	movs	r1, #1
 800f762:	fa01 f605 	lsl.w	r6, r1, r5
 800f766:	1d72      	adds	r2, r6, #5
 800f768:	0092      	lsls	r2, r2, #2
 800f76a:	4620      	mov	r0, r4
 800f76c:	f000 fb60 	bl	800fe30 <_calloc_r>
 800f770:	b160      	cbz	r0, 800f78c <_Balloc+0x64>
 800f772:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f776:	e00e      	b.n	800f796 <_Balloc+0x6e>
 800f778:	2221      	movs	r2, #33	; 0x21
 800f77a:	2104      	movs	r1, #4
 800f77c:	4620      	mov	r0, r4
 800f77e:	f000 fb57 	bl	800fe30 <_calloc_r>
 800f782:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f784:	60f0      	str	r0, [r6, #12]
 800f786:	68db      	ldr	r3, [r3, #12]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d1e4      	bne.n	800f756 <_Balloc+0x2e>
 800f78c:	2000      	movs	r0, #0
 800f78e:	bd70      	pop	{r4, r5, r6, pc}
 800f790:	6802      	ldr	r2, [r0, #0]
 800f792:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f796:	2300      	movs	r3, #0
 800f798:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f79c:	e7f7      	b.n	800f78e <_Balloc+0x66>
 800f79e:	bf00      	nop
 800f7a0:	08010b41 	.word	0x08010b41
 800f7a4:	08010c24 	.word	0x08010c24

0800f7a8 <_Bfree>:
 800f7a8:	b570      	push	{r4, r5, r6, lr}
 800f7aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f7ac:	4605      	mov	r5, r0
 800f7ae:	460c      	mov	r4, r1
 800f7b0:	b976      	cbnz	r6, 800f7d0 <_Bfree+0x28>
 800f7b2:	2010      	movs	r0, #16
 800f7b4:	f7ff ffb0 	bl	800f718 <malloc>
 800f7b8:	4602      	mov	r2, r0
 800f7ba:	6268      	str	r0, [r5, #36]	; 0x24
 800f7bc:	b920      	cbnz	r0, 800f7c8 <_Bfree+0x20>
 800f7be:	4b09      	ldr	r3, [pc, #36]	; (800f7e4 <_Bfree+0x3c>)
 800f7c0:	4809      	ldr	r0, [pc, #36]	; (800f7e8 <_Bfree+0x40>)
 800f7c2:	218a      	movs	r1, #138	; 0x8a
 800f7c4:	f000 fef2 	bl	80105ac <__assert_func>
 800f7c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f7cc:	6006      	str	r6, [r0, #0]
 800f7ce:	60c6      	str	r6, [r0, #12]
 800f7d0:	b13c      	cbz	r4, 800f7e2 <_Bfree+0x3a>
 800f7d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f7d4:	6862      	ldr	r2, [r4, #4]
 800f7d6:	68db      	ldr	r3, [r3, #12]
 800f7d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f7dc:	6021      	str	r1, [r4, #0]
 800f7de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f7e2:	bd70      	pop	{r4, r5, r6, pc}
 800f7e4:	08010b41 	.word	0x08010b41
 800f7e8:	08010c24 	.word	0x08010c24

0800f7ec <__multadd>:
 800f7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7f0:	690d      	ldr	r5, [r1, #16]
 800f7f2:	4607      	mov	r7, r0
 800f7f4:	460c      	mov	r4, r1
 800f7f6:	461e      	mov	r6, r3
 800f7f8:	f101 0c14 	add.w	ip, r1, #20
 800f7fc:	2000      	movs	r0, #0
 800f7fe:	f8dc 3000 	ldr.w	r3, [ip]
 800f802:	b299      	uxth	r1, r3
 800f804:	fb02 6101 	mla	r1, r2, r1, r6
 800f808:	0c1e      	lsrs	r6, r3, #16
 800f80a:	0c0b      	lsrs	r3, r1, #16
 800f80c:	fb02 3306 	mla	r3, r2, r6, r3
 800f810:	b289      	uxth	r1, r1
 800f812:	3001      	adds	r0, #1
 800f814:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f818:	4285      	cmp	r5, r0
 800f81a:	f84c 1b04 	str.w	r1, [ip], #4
 800f81e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f822:	dcec      	bgt.n	800f7fe <__multadd+0x12>
 800f824:	b30e      	cbz	r6, 800f86a <__multadd+0x7e>
 800f826:	68a3      	ldr	r3, [r4, #8]
 800f828:	42ab      	cmp	r3, r5
 800f82a:	dc19      	bgt.n	800f860 <__multadd+0x74>
 800f82c:	6861      	ldr	r1, [r4, #4]
 800f82e:	4638      	mov	r0, r7
 800f830:	3101      	adds	r1, #1
 800f832:	f7ff ff79 	bl	800f728 <_Balloc>
 800f836:	4680      	mov	r8, r0
 800f838:	b928      	cbnz	r0, 800f846 <__multadd+0x5a>
 800f83a:	4602      	mov	r2, r0
 800f83c:	4b0c      	ldr	r3, [pc, #48]	; (800f870 <__multadd+0x84>)
 800f83e:	480d      	ldr	r0, [pc, #52]	; (800f874 <__multadd+0x88>)
 800f840:	21b5      	movs	r1, #181	; 0xb5
 800f842:	f000 feb3 	bl	80105ac <__assert_func>
 800f846:	6922      	ldr	r2, [r4, #16]
 800f848:	3202      	adds	r2, #2
 800f84a:	f104 010c 	add.w	r1, r4, #12
 800f84e:	0092      	lsls	r2, r2, #2
 800f850:	300c      	adds	r0, #12
 800f852:	f7fe fb39 	bl	800dec8 <memcpy>
 800f856:	4621      	mov	r1, r4
 800f858:	4638      	mov	r0, r7
 800f85a:	f7ff ffa5 	bl	800f7a8 <_Bfree>
 800f85e:	4644      	mov	r4, r8
 800f860:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f864:	3501      	adds	r5, #1
 800f866:	615e      	str	r6, [r3, #20]
 800f868:	6125      	str	r5, [r4, #16]
 800f86a:	4620      	mov	r0, r4
 800f86c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f870:	08010bb3 	.word	0x08010bb3
 800f874:	08010c24 	.word	0x08010c24

0800f878 <__hi0bits>:
 800f878:	0c03      	lsrs	r3, r0, #16
 800f87a:	041b      	lsls	r3, r3, #16
 800f87c:	b9d3      	cbnz	r3, 800f8b4 <__hi0bits+0x3c>
 800f87e:	0400      	lsls	r0, r0, #16
 800f880:	2310      	movs	r3, #16
 800f882:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f886:	bf04      	itt	eq
 800f888:	0200      	lsleq	r0, r0, #8
 800f88a:	3308      	addeq	r3, #8
 800f88c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f890:	bf04      	itt	eq
 800f892:	0100      	lsleq	r0, r0, #4
 800f894:	3304      	addeq	r3, #4
 800f896:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f89a:	bf04      	itt	eq
 800f89c:	0080      	lsleq	r0, r0, #2
 800f89e:	3302      	addeq	r3, #2
 800f8a0:	2800      	cmp	r0, #0
 800f8a2:	db05      	blt.n	800f8b0 <__hi0bits+0x38>
 800f8a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f8a8:	f103 0301 	add.w	r3, r3, #1
 800f8ac:	bf08      	it	eq
 800f8ae:	2320      	moveq	r3, #32
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	4770      	bx	lr
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	e7e4      	b.n	800f882 <__hi0bits+0xa>

0800f8b8 <__lo0bits>:
 800f8b8:	6803      	ldr	r3, [r0, #0]
 800f8ba:	f013 0207 	ands.w	r2, r3, #7
 800f8be:	4601      	mov	r1, r0
 800f8c0:	d00b      	beq.n	800f8da <__lo0bits+0x22>
 800f8c2:	07da      	lsls	r2, r3, #31
 800f8c4:	d423      	bmi.n	800f90e <__lo0bits+0x56>
 800f8c6:	0798      	lsls	r0, r3, #30
 800f8c8:	bf49      	itett	mi
 800f8ca:	085b      	lsrmi	r3, r3, #1
 800f8cc:	089b      	lsrpl	r3, r3, #2
 800f8ce:	2001      	movmi	r0, #1
 800f8d0:	600b      	strmi	r3, [r1, #0]
 800f8d2:	bf5c      	itt	pl
 800f8d4:	600b      	strpl	r3, [r1, #0]
 800f8d6:	2002      	movpl	r0, #2
 800f8d8:	4770      	bx	lr
 800f8da:	b298      	uxth	r0, r3
 800f8dc:	b9a8      	cbnz	r0, 800f90a <__lo0bits+0x52>
 800f8de:	0c1b      	lsrs	r3, r3, #16
 800f8e0:	2010      	movs	r0, #16
 800f8e2:	b2da      	uxtb	r2, r3
 800f8e4:	b90a      	cbnz	r2, 800f8ea <__lo0bits+0x32>
 800f8e6:	3008      	adds	r0, #8
 800f8e8:	0a1b      	lsrs	r3, r3, #8
 800f8ea:	071a      	lsls	r2, r3, #28
 800f8ec:	bf04      	itt	eq
 800f8ee:	091b      	lsreq	r3, r3, #4
 800f8f0:	3004      	addeq	r0, #4
 800f8f2:	079a      	lsls	r2, r3, #30
 800f8f4:	bf04      	itt	eq
 800f8f6:	089b      	lsreq	r3, r3, #2
 800f8f8:	3002      	addeq	r0, #2
 800f8fa:	07da      	lsls	r2, r3, #31
 800f8fc:	d403      	bmi.n	800f906 <__lo0bits+0x4e>
 800f8fe:	085b      	lsrs	r3, r3, #1
 800f900:	f100 0001 	add.w	r0, r0, #1
 800f904:	d005      	beq.n	800f912 <__lo0bits+0x5a>
 800f906:	600b      	str	r3, [r1, #0]
 800f908:	4770      	bx	lr
 800f90a:	4610      	mov	r0, r2
 800f90c:	e7e9      	b.n	800f8e2 <__lo0bits+0x2a>
 800f90e:	2000      	movs	r0, #0
 800f910:	4770      	bx	lr
 800f912:	2020      	movs	r0, #32
 800f914:	4770      	bx	lr
	...

0800f918 <__i2b>:
 800f918:	b510      	push	{r4, lr}
 800f91a:	460c      	mov	r4, r1
 800f91c:	2101      	movs	r1, #1
 800f91e:	f7ff ff03 	bl	800f728 <_Balloc>
 800f922:	4602      	mov	r2, r0
 800f924:	b928      	cbnz	r0, 800f932 <__i2b+0x1a>
 800f926:	4b05      	ldr	r3, [pc, #20]	; (800f93c <__i2b+0x24>)
 800f928:	4805      	ldr	r0, [pc, #20]	; (800f940 <__i2b+0x28>)
 800f92a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f92e:	f000 fe3d 	bl	80105ac <__assert_func>
 800f932:	2301      	movs	r3, #1
 800f934:	6144      	str	r4, [r0, #20]
 800f936:	6103      	str	r3, [r0, #16]
 800f938:	bd10      	pop	{r4, pc}
 800f93a:	bf00      	nop
 800f93c:	08010bb3 	.word	0x08010bb3
 800f940:	08010c24 	.word	0x08010c24

0800f944 <__multiply>:
 800f944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f948:	4691      	mov	r9, r2
 800f94a:	690a      	ldr	r2, [r1, #16]
 800f94c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f950:	429a      	cmp	r2, r3
 800f952:	bfb8      	it	lt
 800f954:	460b      	movlt	r3, r1
 800f956:	460c      	mov	r4, r1
 800f958:	bfbc      	itt	lt
 800f95a:	464c      	movlt	r4, r9
 800f95c:	4699      	movlt	r9, r3
 800f95e:	6927      	ldr	r7, [r4, #16]
 800f960:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f964:	68a3      	ldr	r3, [r4, #8]
 800f966:	6861      	ldr	r1, [r4, #4]
 800f968:	eb07 060a 	add.w	r6, r7, sl
 800f96c:	42b3      	cmp	r3, r6
 800f96e:	b085      	sub	sp, #20
 800f970:	bfb8      	it	lt
 800f972:	3101      	addlt	r1, #1
 800f974:	f7ff fed8 	bl	800f728 <_Balloc>
 800f978:	b930      	cbnz	r0, 800f988 <__multiply+0x44>
 800f97a:	4602      	mov	r2, r0
 800f97c:	4b44      	ldr	r3, [pc, #272]	; (800fa90 <__multiply+0x14c>)
 800f97e:	4845      	ldr	r0, [pc, #276]	; (800fa94 <__multiply+0x150>)
 800f980:	f240 115d 	movw	r1, #349	; 0x15d
 800f984:	f000 fe12 	bl	80105ac <__assert_func>
 800f988:	f100 0514 	add.w	r5, r0, #20
 800f98c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f990:	462b      	mov	r3, r5
 800f992:	2200      	movs	r2, #0
 800f994:	4543      	cmp	r3, r8
 800f996:	d321      	bcc.n	800f9dc <__multiply+0x98>
 800f998:	f104 0314 	add.w	r3, r4, #20
 800f99c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f9a0:	f109 0314 	add.w	r3, r9, #20
 800f9a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f9a8:	9202      	str	r2, [sp, #8]
 800f9aa:	1b3a      	subs	r2, r7, r4
 800f9ac:	3a15      	subs	r2, #21
 800f9ae:	f022 0203 	bic.w	r2, r2, #3
 800f9b2:	3204      	adds	r2, #4
 800f9b4:	f104 0115 	add.w	r1, r4, #21
 800f9b8:	428f      	cmp	r7, r1
 800f9ba:	bf38      	it	cc
 800f9bc:	2204      	movcc	r2, #4
 800f9be:	9201      	str	r2, [sp, #4]
 800f9c0:	9a02      	ldr	r2, [sp, #8]
 800f9c2:	9303      	str	r3, [sp, #12]
 800f9c4:	429a      	cmp	r2, r3
 800f9c6:	d80c      	bhi.n	800f9e2 <__multiply+0x9e>
 800f9c8:	2e00      	cmp	r6, #0
 800f9ca:	dd03      	ble.n	800f9d4 <__multiply+0x90>
 800f9cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d05a      	beq.n	800fa8a <__multiply+0x146>
 800f9d4:	6106      	str	r6, [r0, #16]
 800f9d6:	b005      	add	sp, #20
 800f9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9dc:	f843 2b04 	str.w	r2, [r3], #4
 800f9e0:	e7d8      	b.n	800f994 <__multiply+0x50>
 800f9e2:	f8b3 a000 	ldrh.w	sl, [r3]
 800f9e6:	f1ba 0f00 	cmp.w	sl, #0
 800f9ea:	d024      	beq.n	800fa36 <__multiply+0xf2>
 800f9ec:	f104 0e14 	add.w	lr, r4, #20
 800f9f0:	46a9      	mov	r9, r5
 800f9f2:	f04f 0c00 	mov.w	ip, #0
 800f9f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f9fa:	f8d9 1000 	ldr.w	r1, [r9]
 800f9fe:	fa1f fb82 	uxth.w	fp, r2
 800fa02:	b289      	uxth	r1, r1
 800fa04:	fb0a 110b 	mla	r1, sl, fp, r1
 800fa08:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fa0c:	f8d9 2000 	ldr.w	r2, [r9]
 800fa10:	4461      	add	r1, ip
 800fa12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fa16:	fb0a c20b 	mla	r2, sl, fp, ip
 800fa1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fa1e:	b289      	uxth	r1, r1
 800fa20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fa24:	4577      	cmp	r7, lr
 800fa26:	f849 1b04 	str.w	r1, [r9], #4
 800fa2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fa2e:	d8e2      	bhi.n	800f9f6 <__multiply+0xb2>
 800fa30:	9a01      	ldr	r2, [sp, #4]
 800fa32:	f845 c002 	str.w	ip, [r5, r2]
 800fa36:	9a03      	ldr	r2, [sp, #12]
 800fa38:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fa3c:	3304      	adds	r3, #4
 800fa3e:	f1b9 0f00 	cmp.w	r9, #0
 800fa42:	d020      	beq.n	800fa86 <__multiply+0x142>
 800fa44:	6829      	ldr	r1, [r5, #0]
 800fa46:	f104 0c14 	add.w	ip, r4, #20
 800fa4a:	46ae      	mov	lr, r5
 800fa4c:	f04f 0a00 	mov.w	sl, #0
 800fa50:	f8bc b000 	ldrh.w	fp, [ip]
 800fa54:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fa58:	fb09 220b 	mla	r2, r9, fp, r2
 800fa5c:	4492      	add	sl, r2
 800fa5e:	b289      	uxth	r1, r1
 800fa60:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800fa64:	f84e 1b04 	str.w	r1, [lr], #4
 800fa68:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fa6c:	f8be 1000 	ldrh.w	r1, [lr]
 800fa70:	0c12      	lsrs	r2, r2, #16
 800fa72:	fb09 1102 	mla	r1, r9, r2, r1
 800fa76:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800fa7a:	4567      	cmp	r7, ip
 800fa7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fa80:	d8e6      	bhi.n	800fa50 <__multiply+0x10c>
 800fa82:	9a01      	ldr	r2, [sp, #4]
 800fa84:	50a9      	str	r1, [r5, r2]
 800fa86:	3504      	adds	r5, #4
 800fa88:	e79a      	b.n	800f9c0 <__multiply+0x7c>
 800fa8a:	3e01      	subs	r6, #1
 800fa8c:	e79c      	b.n	800f9c8 <__multiply+0x84>
 800fa8e:	bf00      	nop
 800fa90:	08010bb3 	.word	0x08010bb3
 800fa94:	08010c24 	.word	0x08010c24

0800fa98 <__pow5mult>:
 800fa98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa9c:	4615      	mov	r5, r2
 800fa9e:	f012 0203 	ands.w	r2, r2, #3
 800faa2:	4606      	mov	r6, r0
 800faa4:	460f      	mov	r7, r1
 800faa6:	d007      	beq.n	800fab8 <__pow5mult+0x20>
 800faa8:	4c25      	ldr	r4, [pc, #148]	; (800fb40 <__pow5mult+0xa8>)
 800faaa:	3a01      	subs	r2, #1
 800faac:	2300      	movs	r3, #0
 800faae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fab2:	f7ff fe9b 	bl	800f7ec <__multadd>
 800fab6:	4607      	mov	r7, r0
 800fab8:	10ad      	asrs	r5, r5, #2
 800faba:	d03d      	beq.n	800fb38 <__pow5mult+0xa0>
 800fabc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fabe:	b97c      	cbnz	r4, 800fae0 <__pow5mult+0x48>
 800fac0:	2010      	movs	r0, #16
 800fac2:	f7ff fe29 	bl	800f718 <malloc>
 800fac6:	4602      	mov	r2, r0
 800fac8:	6270      	str	r0, [r6, #36]	; 0x24
 800faca:	b928      	cbnz	r0, 800fad8 <__pow5mult+0x40>
 800facc:	4b1d      	ldr	r3, [pc, #116]	; (800fb44 <__pow5mult+0xac>)
 800face:	481e      	ldr	r0, [pc, #120]	; (800fb48 <__pow5mult+0xb0>)
 800fad0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fad4:	f000 fd6a 	bl	80105ac <__assert_func>
 800fad8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fadc:	6004      	str	r4, [r0, #0]
 800fade:	60c4      	str	r4, [r0, #12]
 800fae0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fae4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fae8:	b94c      	cbnz	r4, 800fafe <__pow5mult+0x66>
 800faea:	f240 2171 	movw	r1, #625	; 0x271
 800faee:	4630      	mov	r0, r6
 800faf0:	f7ff ff12 	bl	800f918 <__i2b>
 800faf4:	2300      	movs	r3, #0
 800faf6:	f8c8 0008 	str.w	r0, [r8, #8]
 800fafa:	4604      	mov	r4, r0
 800fafc:	6003      	str	r3, [r0, #0]
 800fafe:	f04f 0900 	mov.w	r9, #0
 800fb02:	07eb      	lsls	r3, r5, #31
 800fb04:	d50a      	bpl.n	800fb1c <__pow5mult+0x84>
 800fb06:	4639      	mov	r1, r7
 800fb08:	4622      	mov	r2, r4
 800fb0a:	4630      	mov	r0, r6
 800fb0c:	f7ff ff1a 	bl	800f944 <__multiply>
 800fb10:	4639      	mov	r1, r7
 800fb12:	4680      	mov	r8, r0
 800fb14:	4630      	mov	r0, r6
 800fb16:	f7ff fe47 	bl	800f7a8 <_Bfree>
 800fb1a:	4647      	mov	r7, r8
 800fb1c:	106d      	asrs	r5, r5, #1
 800fb1e:	d00b      	beq.n	800fb38 <__pow5mult+0xa0>
 800fb20:	6820      	ldr	r0, [r4, #0]
 800fb22:	b938      	cbnz	r0, 800fb34 <__pow5mult+0x9c>
 800fb24:	4622      	mov	r2, r4
 800fb26:	4621      	mov	r1, r4
 800fb28:	4630      	mov	r0, r6
 800fb2a:	f7ff ff0b 	bl	800f944 <__multiply>
 800fb2e:	6020      	str	r0, [r4, #0]
 800fb30:	f8c0 9000 	str.w	r9, [r0]
 800fb34:	4604      	mov	r4, r0
 800fb36:	e7e4      	b.n	800fb02 <__pow5mult+0x6a>
 800fb38:	4638      	mov	r0, r7
 800fb3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb3e:	bf00      	nop
 800fb40:	08010d70 	.word	0x08010d70
 800fb44:	08010b41 	.word	0x08010b41
 800fb48:	08010c24 	.word	0x08010c24

0800fb4c <__lshift>:
 800fb4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb50:	460c      	mov	r4, r1
 800fb52:	6849      	ldr	r1, [r1, #4]
 800fb54:	6923      	ldr	r3, [r4, #16]
 800fb56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fb5a:	68a3      	ldr	r3, [r4, #8]
 800fb5c:	4607      	mov	r7, r0
 800fb5e:	4691      	mov	r9, r2
 800fb60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fb64:	f108 0601 	add.w	r6, r8, #1
 800fb68:	42b3      	cmp	r3, r6
 800fb6a:	db0b      	blt.n	800fb84 <__lshift+0x38>
 800fb6c:	4638      	mov	r0, r7
 800fb6e:	f7ff fddb 	bl	800f728 <_Balloc>
 800fb72:	4605      	mov	r5, r0
 800fb74:	b948      	cbnz	r0, 800fb8a <__lshift+0x3e>
 800fb76:	4602      	mov	r2, r0
 800fb78:	4b2a      	ldr	r3, [pc, #168]	; (800fc24 <__lshift+0xd8>)
 800fb7a:	482b      	ldr	r0, [pc, #172]	; (800fc28 <__lshift+0xdc>)
 800fb7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fb80:	f000 fd14 	bl	80105ac <__assert_func>
 800fb84:	3101      	adds	r1, #1
 800fb86:	005b      	lsls	r3, r3, #1
 800fb88:	e7ee      	b.n	800fb68 <__lshift+0x1c>
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	f100 0114 	add.w	r1, r0, #20
 800fb90:	f100 0210 	add.w	r2, r0, #16
 800fb94:	4618      	mov	r0, r3
 800fb96:	4553      	cmp	r3, sl
 800fb98:	db37      	blt.n	800fc0a <__lshift+0xbe>
 800fb9a:	6920      	ldr	r0, [r4, #16]
 800fb9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fba0:	f104 0314 	add.w	r3, r4, #20
 800fba4:	f019 091f 	ands.w	r9, r9, #31
 800fba8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fbac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fbb0:	d02f      	beq.n	800fc12 <__lshift+0xc6>
 800fbb2:	f1c9 0e20 	rsb	lr, r9, #32
 800fbb6:	468a      	mov	sl, r1
 800fbb8:	f04f 0c00 	mov.w	ip, #0
 800fbbc:	681a      	ldr	r2, [r3, #0]
 800fbbe:	fa02 f209 	lsl.w	r2, r2, r9
 800fbc2:	ea42 020c 	orr.w	r2, r2, ip
 800fbc6:	f84a 2b04 	str.w	r2, [sl], #4
 800fbca:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbce:	4298      	cmp	r0, r3
 800fbd0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fbd4:	d8f2      	bhi.n	800fbbc <__lshift+0x70>
 800fbd6:	1b03      	subs	r3, r0, r4
 800fbd8:	3b15      	subs	r3, #21
 800fbda:	f023 0303 	bic.w	r3, r3, #3
 800fbde:	3304      	adds	r3, #4
 800fbe0:	f104 0215 	add.w	r2, r4, #21
 800fbe4:	4290      	cmp	r0, r2
 800fbe6:	bf38      	it	cc
 800fbe8:	2304      	movcc	r3, #4
 800fbea:	f841 c003 	str.w	ip, [r1, r3]
 800fbee:	f1bc 0f00 	cmp.w	ip, #0
 800fbf2:	d001      	beq.n	800fbf8 <__lshift+0xac>
 800fbf4:	f108 0602 	add.w	r6, r8, #2
 800fbf8:	3e01      	subs	r6, #1
 800fbfa:	4638      	mov	r0, r7
 800fbfc:	612e      	str	r6, [r5, #16]
 800fbfe:	4621      	mov	r1, r4
 800fc00:	f7ff fdd2 	bl	800f7a8 <_Bfree>
 800fc04:	4628      	mov	r0, r5
 800fc06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc0a:	f842 0f04 	str.w	r0, [r2, #4]!
 800fc0e:	3301      	adds	r3, #1
 800fc10:	e7c1      	b.n	800fb96 <__lshift+0x4a>
 800fc12:	3904      	subs	r1, #4
 800fc14:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc18:	f841 2f04 	str.w	r2, [r1, #4]!
 800fc1c:	4298      	cmp	r0, r3
 800fc1e:	d8f9      	bhi.n	800fc14 <__lshift+0xc8>
 800fc20:	e7ea      	b.n	800fbf8 <__lshift+0xac>
 800fc22:	bf00      	nop
 800fc24:	08010bb3 	.word	0x08010bb3
 800fc28:	08010c24 	.word	0x08010c24

0800fc2c <__mcmp>:
 800fc2c:	b530      	push	{r4, r5, lr}
 800fc2e:	6902      	ldr	r2, [r0, #16]
 800fc30:	690c      	ldr	r4, [r1, #16]
 800fc32:	1b12      	subs	r2, r2, r4
 800fc34:	d10e      	bne.n	800fc54 <__mcmp+0x28>
 800fc36:	f100 0314 	add.w	r3, r0, #20
 800fc3a:	3114      	adds	r1, #20
 800fc3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fc40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fc44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fc48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fc4c:	42a5      	cmp	r5, r4
 800fc4e:	d003      	beq.n	800fc58 <__mcmp+0x2c>
 800fc50:	d305      	bcc.n	800fc5e <__mcmp+0x32>
 800fc52:	2201      	movs	r2, #1
 800fc54:	4610      	mov	r0, r2
 800fc56:	bd30      	pop	{r4, r5, pc}
 800fc58:	4283      	cmp	r3, r0
 800fc5a:	d3f3      	bcc.n	800fc44 <__mcmp+0x18>
 800fc5c:	e7fa      	b.n	800fc54 <__mcmp+0x28>
 800fc5e:	f04f 32ff 	mov.w	r2, #4294967295
 800fc62:	e7f7      	b.n	800fc54 <__mcmp+0x28>

0800fc64 <__mdiff>:
 800fc64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc68:	460c      	mov	r4, r1
 800fc6a:	4606      	mov	r6, r0
 800fc6c:	4611      	mov	r1, r2
 800fc6e:	4620      	mov	r0, r4
 800fc70:	4690      	mov	r8, r2
 800fc72:	f7ff ffdb 	bl	800fc2c <__mcmp>
 800fc76:	1e05      	subs	r5, r0, #0
 800fc78:	d110      	bne.n	800fc9c <__mdiff+0x38>
 800fc7a:	4629      	mov	r1, r5
 800fc7c:	4630      	mov	r0, r6
 800fc7e:	f7ff fd53 	bl	800f728 <_Balloc>
 800fc82:	b930      	cbnz	r0, 800fc92 <__mdiff+0x2e>
 800fc84:	4b3a      	ldr	r3, [pc, #232]	; (800fd70 <__mdiff+0x10c>)
 800fc86:	4602      	mov	r2, r0
 800fc88:	f240 2132 	movw	r1, #562	; 0x232
 800fc8c:	4839      	ldr	r0, [pc, #228]	; (800fd74 <__mdiff+0x110>)
 800fc8e:	f000 fc8d 	bl	80105ac <__assert_func>
 800fc92:	2301      	movs	r3, #1
 800fc94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fc98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc9c:	bfa4      	itt	ge
 800fc9e:	4643      	movge	r3, r8
 800fca0:	46a0      	movge	r8, r4
 800fca2:	4630      	mov	r0, r6
 800fca4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fca8:	bfa6      	itte	ge
 800fcaa:	461c      	movge	r4, r3
 800fcac:	2500      	movge	r5, #0
 800fcae:	2501      	movlt	r5, #1
 800fcb0:	f7ff fd3a 	bl	800f728 <_Balloc>
 800fcb4:	b920      	cbnz	r0, 800fcc0 <__mdiff+0x5c>
 800fcb6:	4b2e      	ldr	r3, [pc, #184]	; (800fd70 <__mdiff+0x10c>)
 800fcb8:	4602      	mov	r2, r0
 800fcba:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fcbe:	e7e5      	b.n	800fc8c <__mdiff+0x28>
 800fcc0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fcc4:	6926      	ldr	r6, [r4, #16]
 800fcc6:	60c5      	str	r5, [r0, #12]
 800fcc8:	f104 0914 	add.w	r9, r4, #20
 800fccc:	f108 0514 	add.w	r5, r8, #20
 800fcd0:	f100 0e14 	add.w	lr, r0, #20
 800fcd4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fcd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fcdc:	f108 0210 	add.w	r2, r8, #16
 800fce0:	46f2      	mov	sl, lr
 800fce2:	2100      	movs	r1, #0
 800fce4:	f859 3b04 	ldr.w	r3, [r9], #4
 800fce8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fcec:	fa1f f883 	uxth.w	r8, r3
 800fcf0:	fa11 f18b 	uxtah	r1, r1, fp
 800fcf4:	0c1b      	lsrs	r3, r3, #16
 800fcf6:	eba1 0808 	sub.w	r8, r1, r8
 800fcfa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fcfe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fd02:	fa1f f888 	uxth.w	r8, r8
 800fd06:	1419      	asrs	r1, r3, #16
 800fd08:	454e      	cmp	r6, r9
 800fd0a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fd0e:	f84a 3b04 	str.w	r3, [sl], #4
 800fd12:	d8e7      	bhi.n	800fce4 <__mdiff+0x80>
 800fd14:	1b33      	subs	r3, r6, r4
 800fd16:	3b15      	subs	r3, #21
 800fd18:	f023 0303 	bic.w	r3, r3, #3
 800fd1c:	3304      	adds	r3, #4
 800fd1e:	3415      	adds	r4, #21
 800fd20:	42a6      	cmp	r6, r4
 800fd22:	bf38      	it	cc
 800fd24:	2304      	movcc	r3, #4
 800fd26:	441d      	add	r5, r3
 800fd28:	4473      	add	r3, lr
 800fd2a:	469e      	mov	lr, r3
 800fd2c:	462e      	mov	r6, r5
 800fd2e:	4566      	cmp	r6, ip
 800fd30:	d30e      	bcc.n	800fd50 <__mdiff+0xec>
 800fd32:	f10c 0203 	add.w	r2, ip, #3
 800fd36:	1b52      	subs	r2, r2, r5
 800fd38:	f022 0203 	bic.w	r2, r2, #3
 800fd3c:	3d03      	subs	r5, #3
 800fd3e:	45ac      	cmp	ip, r5
 800fd40:	bf38      	it	cc
 800fd42:	2200      	movcc	r2, #0
 800fd44:	441a      	add	r2, r3
 800fd46:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fd4a:	b17b      	cbz	r3, 800fd6c <__mdiff+0x108>
 800fd4c:	6107      	str	r7, [r0, #16]
 800fd4e:	e7a3      	b.n	800fc98 <__mdiff+0x34>
 800fd50:	f856 8b04 	ldr.w	r8, [r6], #4
 800fd54:	fa11 f288 	uxtah	r2, r1, r8
 800fd58:	1414      	asrs	r4, r2, #16
 800fd5a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fd5e:	b292      	uxth	r2, r2
 800fd60:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fd64:	f84e 2b04 	str.w	r2, [lr], #4
 800fd68:	1421      	asrs	r1, r4, #16
 800fd6a:	e7e0      	b.n	800fd2e <__mdiff+0xca>
 800fd6c:	3f01      	subs	r7, #1
 800fd6e:	e7ea      	b.n	800fd46 <__mdiff+0xe2>
 800fd70:	08010bb3 	.word	0x08010bb3
 800fd74:	08010c24 	.word	0x08010c24

0800fd78 <__d2b>:
 800fd78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fd7c:	4689      	mov	r9, r1
 800fd7e:	2101      	movs	r1, #1
 800fd80:	ec57 6b10 	vmov	r6, r7, d0
 800fd84:	4690      	mov	r8, r2
 800fd86:	f7ff fccf 	bl	800f728 <_Balloc>
 800fd8a:	4604      	mov	r4, r0
 800fd8c:	b930      	cbnz	r0, 800fd9c <__d2b+0x24>
 800fd8e:	4602      	mov	r2, r0
 800fd90:	4b25      	ldr	r3, [pc, #148]	; (800fe28 <__d2b+0xb0>)
 800fd92:	4826      	ldr	r0, [pc, #152]	; (800fe2c <__d2b+0xb4>)
 800fd94:	f240 310a 	movw	r1, #778	; 0x30a
 800fd98:	f000 fc08 	bl	80105ac <__assert_func>
 800fd9c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fda0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fda4:	bb35      	cbnz	r5, 800fdf4 <__d2b+0x7c>
 800fda6:	2e00      	cmp	r6, #0
 800fda8:	9301      	str	r3, [sp, #4]
 800fdaa:	d028      	beq.n	800fdfe <__d2b+0x86>
 800fdac:	4668      	mov	r0, sp
 800fdae:	9600      	str	r6, [sp, #0]
 800fdb0:	f7ff fd82 	bl	800f8b8 <__lo0bits>
 800fdb4:	9900      	ldr	r1, [sp, #0]
 800fdb6:	b300      	cbz	r0, 800fdfa <__d2b+0x82>
 800fdb8:	9a01      	ldr	r2, [sp, #4]
 800fdba:	f1c0 0320 	rsb	r3, r0, #32
 800fdbe:	fa02 f303 	lsl.w	r3, r2, r3
 800fdc2:	430b      	orrs	r3, r1
 800fdc4:	40c2      	lsrs	r2, r0
 800fdc6:	6163      	str	r3, [r4, #20]
 800fdc8:	9201      	str	r2, [sp, #4]
 800fdca:	9b01      	ldr	r3, [sp, #4]
 800fdcc:	61a3      	str	r3, [r4, #24]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	bf14      	ite	ne
 800fdd2:	2202      	movne	r2, #2
 800fdd4:	2201      	moveq	r2, #1
 800fdd6:	6122      	str	r2, [r4, #16]
 800fdd8:	b1d5      	cbz	r5, 800fe10 <__d2b+0x98>
 800fdda:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fdde:	4405      	add	r5, r0
 800fde0:	f8c9 5000 	str.w	r5, [r9]
 800fde4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fde8:	f8c8 0000 	str.w	r0, [r8]
 800fdec:	4620      	mov	r0, r4
 800fdee:	b003      	add	sp, #12
 800fdf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fdf8:	e7d5      	b.n	800fda6 <__d2b+0x2e>
 800fdfa:	6161      	str	r1, [r4, #20]
 800fdfc:	e7e5      	b.n	800fdca <__d2b+0x52>
 800fdfe:	a801      	add	r0, sp, #4
 800fe00:	f7ff fd5a 	bl	800f8b8 <__lo0bits>
 800fe04:	9b01      	ldr	r3, [sp, #4]
 800fe06:	6163      	str	r3, [r4, #20]
 800fe08:	2201      	movs	r2, #1
 800fe0a:	6122      	str	r2, [r4, #16]
 800fe0c:	3020      	adds	r0, #32
 800fe0e:	e7e3      	b.n	800fdd8 <__d2b+0x60>
 800fe10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fe14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fe18:	f8c9 0000 	str.w	r0, [r9]
 800fe1c:	6918      	ldr	r0, [r3, #16]
 800fe1e:	f7ff fd2b 	bl	800f878 <__hi0bits>
 800fe22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fe26:	e7df      	b.n	800fde8 <__d2b+0x70>
 800fe28:	08010bb3 	.word	0x08010bb3
 800fe2c:	08010c24 	.word	0x08010c24

0800fe30 <_calloc_r>:
 800fe30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe32:	fba1 2402 	umull	r2, r4, r1, r2
 800fe36:	b94c      	cbnz	r4, 800fe4c <_calloc_r+0x1c>
 800fe38:	4611      	mov	r1, r2
 800fe3a:	9201      	str	r2, [sp, #4]
 800fe3c:	f000 f87a 	bl	800ff34 <_malloc_r>
 800fe40:	9a01      	ldr	r2, [sp, #4]
 800fe42:	4605      	mov	r5, r0
 800fe44:	b930      	cbnz	r0, 800fe54 <_calloc_r+0x24>
 800fe46:	4628      	mov	r0, r5
 800fe48:	b003      	add	sp, #12
 800fe4a:	bd30      	pop	{r4, r5, pc}
 800fe4c:	220c      	movs	r2, #12
 800fe4e:	6002      	str	r2, [r0, #0]
 800fe50:	2500      	movs	r5, #0
 800fe52:	e7f8      	b.n	800fe46 <_calloc_r+0x16>
 800fe54:	4621      	mov	r1, r4
 800fe56:	f7fe f845 	bl	800dee4 <memset>
 800fe5a:	e7f4      	b.n	800fe46 <_calloc_r+0x16>

0800fe5c <_free_r>:
 800fe5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe5e:	2900      	cmp	r1, #0
 800fe60:	d044      	beq.n	800feec <_free_r+0x90>
 800fe62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe66:	9001      	str	r0, [sp, #4]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	f1a1 0404 	sub.w	r4, r1, #4
 800fe6e:	bfb8      	it	lt
 800fe70:	18e4      	addlt	r4, r4, r3
 800fe72:	f000 fd27 	bl	80108c4 <__malloc_lock>
 800fe76:	4a1e      	ldr	r2, [pc, #120]	; (800fef0 <_free_r+0x94>)
 800fe78:	9801      	ldr	r0, [sp, #4]
 800fe7a:	6813      	ldr	r3, [r2, #0]
 800fe7c:	b933      	cbnz	r3, 800fe8c <_free_r+0x30>
 800fe7e:	6063      	str	r3, [r4, #4]
 800fe80:	6014      	str	r4, [r2, #0]
 800fe82:	b003      	add	sp, #12
 800fe84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe88:	f000 bd22 	b.w	80108d0 <__malloc_unlock>
 800fe8c:	42a3      	cmp	r3, r4
 800fe8e:	d908      	bls.n	800fea2 <_free_r+0x46>
 800fe90:	6825      	ldr	r5, [r4, #0]
 800fe92:	1961      	adds	r1, r4, r5
 800fe94:	428b      	cmp	r3, r1
 800fe96:	bf01      	itttt	eq
 800fe98:	6819      	ldreq	r1, [r3, #0]
 800fe9a:	685b      	ldreq	r3, [r3, #4]
 800fe9c:	1949      	addeq	r1, r1, r5
 800fe9e:	6021      	streq	r1, [r4, #0]
 800fea0:	e7ed      	b.n	800fe7e <_free_r+0x22>
 800fea2:	461a      	mov	r2, r3
 800fea4:	685b      	ldr	r3, [r3, #4]
 800fea6:	b10b      	cbz	r3, 800feac <_free_r+0x50>
 800fea8:	42a3      	cmp	r3, r4
 800feaa:	d9fa      	bls.n	800fea2 <_free_r+0x46>
 800feac:	6811      	ldr	r1, [r2, #0]
 800feae:	1855      	adds	r5, r2, r1
 800feb0:	42a5      	cmp	r5, r4
 800feb2:	d10b      	bne.n	800fecc <_free_r+0x70>
 800feb4:	6824      	ldr	r4, [r4, #0]
 800feb6:	4421      	add	r1, r4
 800feb8:	1854      	adds	r4, r2, r1
 800feba:	42a3      	cmp	r3, r4
 800febc:	6011      	str	r1, [r2, #0]
 800febe:	d1e0      	bne.n	800fe82 <_free_r+0x26>
 800fec0:	681c      	ldr	r4, [r3, #0]
 800fec2:	685b      	ldr	r3, [r3, #4]
 800fec4:	6053      	str	r3, [r2, #4]
 800fec6:	4421      	add	r1, r4
 800fec8:	6011      	str	r1, [r2, #0]
 800feca:	e7da      	b.n	800fe82 <_free_r+0x26>
 800fecc:	d902      	bls.n	800fed4 <_free_r+0x78>
 800fece:	230c      	movs	r3, #12
 800fed0:	6003      	str	r3, [r0, #0]
 800fed2:	e7d6      	b.n	800fe82 <_free_r+0x26>
 800fed4:	6825      	ldr	r5, [r4, #0]
 800fed6:	1961      	adds	r1, r4, r5
 800fed8:	428b      	cmp	r3, r1
 800feda:	bf04      	itt	eq
 800fedc:	6819      	ldreq	r1, [r3, #0]
 800fede:	685b      	ldreq	r3, [r3, #4]
 800fee0:	6063      	str	r3, [r4, #4]
 800fee2:	bf04      	itt	eq
 800fee4:	1949      	addeq	r1, r1, r5
 800fee6:	6021      	streq	r1, [r4, #0]
 800fee8:	6054      	str	r4, [r2, #4]
 800feea:	e7ca      	b.n	800fe82 <_free_r+0x26>
 800feec:	b003      	add	sp, #12
 800feee:	bd30      	pop	{r4, r5, pc}
 800fef0:	20004c68 	.word	0x20004c68

0800fef4 <sbrk_aligned>:
 800fef4:	b570      	push	{r4, r5, r6, lr}
 800fef6:	4e0e      	ldr	r6, [pc, #56]	; (800ff30 <sbrk_aligned+0x3c>)
 800fef8:	460c      	mov	r4, r1
 800fefa:	6831      	ldr	r1, [r6, #0]
 800fefc:	4605      	mov	r5, r0
 800fefe:	b911      	cbnz	r1, 800ff06 <sbrk_aligned+0x12>
 800ff00:	f000 fa2e 	bl	8010360 <_sbrk_r>
 800ff04:	6030      	str	r0, [r6, #0]
 800ff06:	4621      	mov	r1, r4
 800ff08:	4628      	mov	r0, r5
 800ff0a:	f000 fa29 	bl	8010360 <_sbrk_r>
 800ff0e:	1c43      	adds	r3, r0, #1
 800ff10:	d00a      	beq.n	800ff28 <sbrk_aligned+0x34>
 800ff12:	1cc4      	adds	r4, r0, #3
 800ff14:	f024 0403 	bic.w	r4, r4, #3
 800ff18:	42a0      	cmp	r0, r4
 800ff1a:	d007      	beq.n	800ff2c <sbrk_aligned+0x38>
 800ff1c:	1a21      	subs	r1, r4, r0
 800ff1e:	4628      	mov	r0, r5
 800ff20:	f000 fa1e 	bl	8010360 <_sbrk_r>
 800ff24:	3001      	adds	r0, #1
 800ff26:	d101      	bne.n	800ff2c <sbrk_aligned+0x38>
 800ff28:	f04f 34ff 	mov.w	r4, #4294967295
 800ff2c:	4620      	mov	r0, r4
 800ff2e:	bd70      	pop	{r4, r5, r6, pc}
 800ff30:	20004c6c 	.word	0x20004c6c

0800ff34 <_malloc_r>:
 800ff34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff38:	1ccd      	adds	r5, r1, #3
 800ff3a:	f025 0503 	bic.w	r5, r5, #3
 800ff3e:	3508      	adds	r5, #8
 800ff40:	2d0c      	cmp	r5, #12
 800ff42:	bf38      	it	cc
 800ff44:	250c      	movcc	r5, #12
 800ff46:	2d00      	cmp	r5, #0
 800ff48:	4607      	mov	r7, r0
 800ff4a:	db01      	blt.n	800ff50 <_malloc_r+0x1c>
 800ff4c:	42a9      	cmp	r1, r5
 800ff4e:	d905      	bls.n	800ff5c <_malloc_r+0x28>
 800ff50:	230c      	movs	r3, #12
 800ff52:	603b      	str	r3, [r7, #0]
 800ff54:	2600      	movs	r6, #0
 800ff56:	4630      	mov	r0, r6
 800ff58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff5c:	4e2e      	ldr	r6, [pc, #184]	; (8010018 <_malloc_r+0xe4>)
 800ff5e:	f000 fcb1 	bl	80108c4 <__malloc_lock>
 800ff62:	6833      	ldr	r3, [r6, #0]
 800ff64:	461c      	mov	r4, r3
 800ff66:	bb34      	cbnz	r4, 800ffb6 <_malloc_r+0x82>
 800ff68:	4629      	mov	r1, r5
 800ff6a:	4638      	mov	r0, r7
 800ff6c:	f7ff ffc2 	bl	800fef4 <sbrk_aligned>
 800ff70:	1c43      	adds	r3, r0, #1
 800ff72:	4604      	mov	r4, r0
 800ff74:	d14d      	bne.n	8010012 <_malloc_r+0xde>
 800ff76:	6834      	ldr	r4, [r6, #0]
 800ff78:	4626      	mov	r6, r4
 800ff7a:	2e00      	cmp	r6, #0
 800ff7c:	d140      	bne.n	8010000 <_malloc_r+0xcc>
 800ff7e:	6823      	ldr	r3, [r4, #0]
 800ff80:	4631      	mov	r1, r6
 800ff82:	4638      	mov	r0, r7
 800ff84:	eb04 0803 	add.w	r8, r4, r3
 800ff88:	f000 f9ea 	bl	8010360 <_sbrk_r>
 800ff8c:	4580      	cmp	r8, r0
 800ff8e:	d13a      	bne.n	8010006 <_malloc_r+0xd2>
 800ff90:	6821      	ldr	r1, [r4, #0]
 800ff92:	3503      	adds	r5, #3
 800ff94:	1a6d      	subs	r5, r5, r1
 800ff96:	f025 0503 	bic.w	r5, r5, #3
 800ff9a:	3508      	adds	r5, #8
 800ff9c:	2d0c      	cmp	r5, #12
 800ff9e:	bf38      	it	cc
 800ffa0:	250c      	movcc	r5, #12
 800ffa2:	4629      	mov	r1, r5
 800ffa4:	4638      	mov	r0, r7
 800ffa6:	f7ff ffa5 	bl	800fef4 <sbrk_aligned>
 800ffaa:	3001      	adds	r0, #1
 800ffac:	d02b      	beq.n	8010006 <_malloc_r+0xd2>
 800ffae:	6823      	ldr	r3, [r4, #0]
 800ffb0:	442b      	add	r3, r5
 800ffb2:	6023      	str	r3, [r4, #0]
 800ffb4:	e00e      	b.n	800ffd4 <_malloc_r+0xa0>
 800ffb6:	6822      	ldr	r2, [r4, #0]
 800ffb8:	1b52      	subs	r2, r2, r5
 800ffba:	d41e      	bmi.n	800fffa <_malloc_r+0xc6>
 800ffbc:	2a0b      	cmp	r2, #11
 800ffbe:	d916      	bls.n	800ffee <_malloc_r+0xba>
 800ffc0:	1961      	adds	r1, r4, r5
 800ffc2:	42a3      	cmp	r3, r4
 800ffc4:	6025      	str	r5, [r4, #0]
 800ffc6:	bf18      	it	ne
 800ffc8:	6059      	strne	r1, [r3, #4]
 800ffca:	6863      	ldr	r3, [r4, #4]
 800ffcc:	bf08      	it	eq
 800ffce:	6031      	streq	r1, [r6, #0]
 800ffd0:	5162      	str	r2, [r4, r5]
 800ffd2:	604b      	str	r3, [r1, #4]
 800ffd4:	4638      	mov	r0, r7
 800ffd6:	f104 060b 	add.w	r6, r4, #11
 800ffda:	f000 fc79 	bl	80108d0 <__malloc_unlock>
 800ffde:	f026 0607 	bic.w	r6, r6, #7
 800ffe2:	1d23      	adds	r3, r4, #4
 800ffe4:	1af2      	subs	r2, r6, r3
 800ffe6:	d0b6      	beq.n	800ff56 <_malloc_r+0x22>
 800ffe8:	1b9b      	subs	r3, r3, r6
 800ffea:	50a3      	str	r3, [r4, r2]
 800ffec:	e7b3      	b.n	800ff56 <_malloc_r+0x22>
 800ffee:	6862      	ldr	r2, [r4, #4]
 800fff0:	42a3      	cmp	r3, r4
 800fff2:	bf0c      	ite	eq
 800fff4:	6032      	streq	r2, [r6, #0]
 800fff6:	605a      	strne	r2, [r3, #4]
 800fff8:	e7ec      	b.n	800ffd4 <_malloc_r+0xa0>
 800fffa:	4623      	mov	r3, r4
 800fffc:	6864      	ldr	r4, [r4, #4]
 800fffe:	e7b2      	b.n	800ff66 <_malloc_r+0x32>
 8010000:	4634      	mov	r4, r6
 8010002:	6876      	ldr	r6, [r6, #4]
 8010004:	e7b9      	b.n	800ff7a <_malloc_r+0x46>
 8010006:	230c      	movs	r3, #12
 8010008:	603b      	str	r3, [r7, #0]
 801000a:	4638      	mov	r0, r7
 801000c:	f000 fc60 	bl	80108d0 <__malloc_unlock>
 8010010:	e7a1      	b.n	800ff56 <_malloc_r+0x22>
 8010012:	6025      	str	r5, [r4, #0]
 8010014:	e7de      	b.n	800ffd4 <_malloc_r+0xa0>
 8010016:	bf00      	nop
 8010018:	20004c68 	.word	0x20004c68

0801001c <__sfputc_r>:
 801001c:	6893      	ldr	r3, [r2, #8]
 801001e:	3b01      	subs	r3, #1
 8010020:	2b00      	cmp	r3, #0
 8010022:	b410      	push	{r4}
 8010024:	6093      	str	r3, [r2, #8]
 8010026:	da08      	bge.n	801003a <__sfputc_r+0x1e>
 8010028:	6994      	ldr	r4, [r2, #24]
 801002a:	42a3      	cmp	r3, r4
 801002c:	db01      	blt.n	8010032 <__sfputc_r+0x16>
 801002e:	290a      	cmp	r1, #10
 8010030:	d103      	bne.n	801003a <__sfputc_r+0x1e>
 8010032:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010036:	f000 b9e7 	b.w	8010408 <__swbuf_r>
 801003a:	6813      	ldr	r3, [r2, #0]
 801003c:	1c58      	adds	r0, r3, #1
 801003e:	6010      	str	r0, [r2, #0]
 8010040:	7019      	strb	r1, [r3, #0]
 8010042:	4608      	mov	r0, r1
 8010044:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010048:	4770      	bx	lr

0801004a <__sfputs_r>:
 801004a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801004c:	4606      	mov	r6, r0
 801004e:	460f      	mov	r7, r1
 8010050:	4614      	mov	r4, r2
 8010052:	18d5      	adds	r5, r2, r3
 8010054:	42ac      	cmp	r4, r5
 8010056:	d101      	bne.n	801005c <__sfputs_r+0x12>
 8010058:	2000      	movs	r0, #0
 801005a:	e007      	b.n	801006c <__sfputs_r+0x22>
 801005c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010060:	463a      	mov	r2, r7
 8010062:	4630      	mov	r0, r6
 8010064:	f7ff ffda 	bl	801001c <__sfputc_r>
 8010068:	1c43      	adds	r3, r0, #1
 801006a:	d1f3      	bne.n	8010054 <__sfputs_r+0xa>
 801006c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010070 <_vfiprintf_r>:
 8010070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010074:	460d      	mov	r5, r1
 8010076:	b09d      	sub	sp, #116	; 0x74
 8010078:	4614      	mov	r4, r2
 801007a:	4698      	mov	r8, r3
 801007c:	4606      	mov	r6, r0
 801007e:	b118      	cbz	r0, 8010088 <_vfiprintf_r+0x18>
 8010080:	6983      	ldr	r3, [r0, #24]
 8010082:	b90b      	cbnz	r3, 8010088 <_vfiprintf_r+0x18>
 8010084:	f7ff faa2 	bl	800f5cc <__sinit>
 8010088:	4b89      	ldr	r3, [pc, #548]	; (80102b0 <_vfiprintf_r+0x240>)
 801008a:	429d      	cmp	r5, r3
 801008c:	d11b      	bne.n	80100c6 <_vfiprintf_r+0x56>
 801008e:	6875      	ldr	r5, [r6, #4]
 8010090:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010092:	07d9      	lsls	r1, r3, #31
 8010094:	d405      	bmi.n	80100a2 <_vfiprintf_r+0x32>
 8010096:	89ab      	ldrh	r3, [r5, #12]
 8010098:	059a      	lsls	r2, r3, #22
 801009a:	d402      	bmi.n	80100a2 <_vfiprintf_r+0x32>
 801009c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801009e:	f7ff fb38 	bl	800f712 <__retarget_lock_acquire_recursive>
 80100a2:	89ab      	ldrh	r3, [r5, #12]
 80100a4:	071b      	lsls	r3, r3, #28
 80100a6:	d501      	bpl.n	80100ac <_vfiprintf_r+0x3c>
 80100a8:	692b      	ldr	r3, [r5, #16]
 80100aa:	b9eb      	cbnz	r3, 80100e8 <_vfiprintf_r+0x78>
 80100ac:	4629      	mov	r1, r5
 80100ae:	4630      	mov	r0, r6
 80100b0:	f000 fa0e 	bl	80104d0 <__swsetup_r>
 80100b4:	b1c0      	cbz	r0, 80100e8 <_vfiprintf_r+0x78>
 80100b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80100b8:	07dc      	lsls	r4, r3, #31
 80100ba:	d50e      	bpl.n	80100da <_vfiprintf_r+0x6a>
 80100bc:	f04f 30ff 	mov.w	r0, #4294967295
 80100c0:	b01d      	add	sp, #116	; 0x74
 80100c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100c6:	4b7b      	ldr	r3, [pc, #492]	; (80102b4 <_vfiprintf_r+0x244>)
 80100c8:	429d      	cmp	r5, r3
 80100ca:	d101      	bne.n	80100d0 <_vfiprintf_r+0x60>
 80100cc:	68b5      	ldr	r5, [r6, #8]
 80100ce:	e7df      	b.n	8010090 <_vfiprintf_r+0x20>
 80100d0:	4b79      	ldr	r3, [pc, #484]	; (80102b8 <_vfiprintf_r+0x248>)
 80100d2:	429d      	cmp	r5, r3
 80100d4:	bf08      	it	eq
 80100d6:	68f5      	ldreq	r5, [r6, #12]
 80100d8:	e7da      	b.n	8010090 <_vfiprintf_r+0x20>
 80100da:	89ab      	ldrh	r3, [r5, #12]
 80100dc:	0598      	lsls	r0, r3, #22
 80100de:	d4ed      	bmi.n	80100bc <_vfiprintf_r+0x4c>
 80100e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80100e2:	f7ff fb17 	bl	800f714 <__retarget_lock_release_recursive>
 80100e6:	e7e9      	b.n	80100bc <_vfiprintf_r+0x4c>
 80100e8:	2300      	movs	r3, #0
 80100ea:	9309      	str	r3, [sp, #36]	; 0x24
 80100ec:	2320      	movs	r3, #32
 80100ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80100f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80100f6:	2330      	movs	r3, #48	; 0x30
 80100f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80102bc <_vfiprintf_r+0x24c>
 80100fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010100:	f04f 0901 	mov.w	r9, #1
 8010104:	4623      	mov	r3, r4
 8010106:	469a      	mov	sl, r3
 8010108:	f813 2b01 	ldrb.w	r2, [r3], #1
 801010c:	b10a      	cbz	r2, 8010112 <_vfiprintf_r+0xa2>
 801010e:	2a25      	cmp	r2, #37	; 0x25
 8010110:	d1f9      	bne.n	8010106 <_vfiprintf_r+0x96>
 8010112:	ebba 0b04 	subs.w	fp, sl, r4
 8010116:	d00b      	beq.n	8010130 <_vfiprintf_r+0xc0>
 8010118:	465b      	mov	r3, fp
 801011a:	4622      	mov	r2, r4
 801011c:	4629      	mov	r1, r5
 801011e:	4630      	mov	r0, r6
 8010120:	f7ff ff93 	bl	801004a <__sfputs_r>
 8010124:	3001      	adds	r0, #1
 8010126:	f000 80aa 	beq.w	801027e <_vfiprintf_r+0x20e>
 801012a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801012c:	445a      	add	r2, fp
 801012e:	9209      	str	r2, [sp, #36]	; 0x24
 8010130:	f89a 3000 	ldrb.w	r3, [sl]
 8010134:	2b00      	cmp	r3, #0
 8010136:	f000 80a2 	beq.w	801027e <_vfiprintf_r+0x20e>
 801013a:	2300      	movs	r3, #0
 801013c:	f04f 32ff 	mov.w	r2, #4294967295
 8010140:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010144:	f10a 0a01 	add.w	sl, sl, #1
 8010148:	9304      	str	r3, [sp, #16]
 801014a:	9307      	str	r3, [sp, #28]
 801014c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010150:	931a      	str	r3, [sp, #104]	; 0x68
 8010152:	4654      	mov	r4, sl
 8010154:	2205      	movs	r2, #5
 8010156:	f814 1b01 	ldrb.w	r1, [r4], #1
 801015a:	4858      	ldr	r0, [pc, #352]	; (80102bc <_vfiprintf_r+0x24c>)
 801015c:	f7f0 f868 	bl	8000230 <memchr>
 8010160:	9a04      	ldr	r2, [sp, #16]
 8010162:	b9d8      	cbnz	r0, 801019c <_vfiprintf_r+0x12c>
 8010164:	06d1      	lsls	r1, r2, #27
 8010166:	bf44      	itt	mi
 8010168:	2320      	movmi	r3, #32
 801016a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801016e:	0713      	lsls	r3, r2, #28
 8010170:	bf44      	itt	mi
 8010172:	232b      	movmi	r3, #43	; 0x2b
 8010174:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010178:	f89a 3000 	ldrb.w	r3, [sl]
 801017c:	2b2a      	cmp	r3, #42	; 0x2a
 801017e:	d015      	beq.n	80101ac <_vfiprintf_r+0x13c>
 8010180:	9a07      	ldr	r2, [sp, #28]
 8010182:	4654      	mov	r4, sl
 8010184:	2000      	movs	r0, #0
 8010186:	f04f 0c0a 	mov.w	ip, #10
 801018a:	4621      	mov	r1, r4
 801018c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010190:	3b30      	subs	r3, #48	; 0x30
 8010192:	2b09      	cmp	r3, #9
 8010194:	d94e      	bls.n	8010234 <_vfiprintf_r+0x1c4>
 8010196:	b1b0      	cbz	r0, 80101c6 <_vfiprintf_r+0x156>
 8010198:	9207      	str	r2, [sp, #28]
 801019a:	e014      	b.n	80101c6 <_vfiprintf_r+0x156>
 801019c:	eba0 0308 	sub.w	r3, r0, r8
 80101a0:	fa09 f303 	lsl.w	r3, r9, r3
 80101a4:	4313      	orrs	r3, r2
 80101a6:	9304      	str	r3, [sp, #16]
 80101a8:	46a2      	mov	sl, r4
 80101aa:	e7d2      	b.n	8010152 <_vfiprintf_r+0xe2>
 80101ac:	9b03      	ldr	r3, [sp, #12]
 80101ae:	1d19      	adds	r1, r3, #4
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	9103      	str	r1, [sp, #12]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	bfbb      	ittet	lt
 80101b8:	425b      	neglt	r3, r3
 80101ba:	f042 0202 	orrlt.w	r2, r2, #2
 80101be:	9307      	strge	r3, [sp, #28]
 80101c0:	9307      	strlt	r3, [sp, #28]
 80101c2:	bfb8      	it	lt
 80101c4:	9204      	strlt	r2, [sp, #16]
 80101c6:	7823      	ldrb	r3, [r4, #0]
 80101c8:	2b2e      	cmp	r3, #46	; 0x2e
 80101ca:	d10c      	bne.n	80101e6 <_vfiprintf_r+0x176>
 80101cc:	7863      	ldrb	r3, [r4, #1]
 80101ce:	2b2a      	cmp	r3, #42	; 0x2a
 80101d0:	d135      	bne.n	801023e <_vfiprintf_r+0x1ce>
 80101d2:	9b03      	ldr	r3, [sp, #12]
 80101d4:	1d1a      	adds	r2, r3, #4
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	9203      	str	r2, [sp, #12]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	bfb8      	it	lt
 80101de:	f04f 33ff 	movlt.w	r3, #4294967295
 80101e2:	3402      	adds	r4, #2
 80101e4:	9305      	str	r3, [sp, #20]
 80101e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80102cc <_vfiprintf_r+0x25c>
 80101ea:	7821      	ldrb	r1, [r4, #0]
 80101ec:	2203      	movs	r2, #3
 80101ee:	4650      	mov	r0, sl
 80101f0:	f7f0 f81e 	bl	8000230 <memchr>
 80101f4:	b140      	cbz	r0, 8010208 <_vfiprintf_r+0x198>
 80101f6:	2340      	movs	r3, #64	; 0x40
 80101f8:	eba0 000a 	sub.w	r0, r0, sl
 80101fc:	fa03 f000 	lsl.w	r0, r3, r0
 8010200:	9b04      	ldr	r3, [sp, #16]
 8010202:	4303      	orrs	r3, r0
 8010204:	3401      	adds	r4, #1
 8010206:	9304      	str	r3, [sp, #16]
 8010208:	f814 1b01 	ldrb.w	r1, [r4], #1
 801020c:	482c      	ldr	r0, [pc, #176]	; (80102c0 <_vfiprintf_r+0x250>)
 801020e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010212:	2206      	movs	r2, #6
 8010214:	f7f0 f80c 	bl	8000230 <memchr>
 8010218:	2800      	cmp	r0, #0
 801021a:	d03f      	beq.n	801029c <_vfiprintf_r+0x22c>
 801021c:	4b29      	ldr	r3, [pc, #164]	; (80102c4 <_vfiprintf_r+0x254>)
 801021e:	bb1b      	cbnz	r3, 8010268 <_vfiprintf_r+0x1f8>
 8010220:	9b03      	ldr	r3, [sp, #12]
 8010222:	3307      	adds	r3, #7
 8010224:	f023 0307 	bic.w	r3, r3, #7
 8010228:	3308      	adds	r3, #8
 801022a:	9303      	str	r3, [sp, #12]
 801022c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801022e:	443b      	add	r3, r7
 8010230:	9309      	str	r3, [sp, #36]	; 0x24
 8010232:	e767      	b.n	8010104 <_vfiprintf_r+0x94>
 8010234:	fb0c 3202 	mla	r2, ip, r2, r3
 8010238:	460c      	mov	r4, r1
 801023a:	2001      	movs	r0, #1
 801023c:	e7a5      	b.n	801018a <_vfiprintf_r+0x11a>
 801023e:	2300      	movs	r3, #0
 8010240:	3401      	adds	r4, #1
 8010242:	9305      	str	r3, [sp, #20]
 8010244:	4619      	mov	r1, r3
 8010246:	f04f 0c0a 	mov.w	ip, #10
 801024a:	4620      	mov	r0, r4
 801024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010250:	3a30      	subs	r2, #48	; 0x30
 8010252:	2a09      	cmp	r2, #9
 8010254:	d903      	bls.n	801025e <_vfiprintf_r+0x1ee>
 8010256:	2b00      	cmp	r3, #0
 8010258:	d0c5      	beq.n	80101e6 <_vfiprintf_r+0x176>
 801025a:	9105      	str	r1, [sp, #20]
 801025c:	e7c3      	b.n	80101e6 <_vfiprintf_r+0x176>
 801025e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010262:	4604      	mov	r4, r0
 8010264:	2301      	movs	r3, #1
 8010266:	e7f0      	b.n	801024a <_vfiprintf_r+0x1da>
 8010268:	ab03      	add	r3, sp, #12
 801026a:	9300      	str	r3, [sp, #0]
 801026c:	462a      	mov	r2, r5
 801026e:	4b16      	ldr	r3, [pc, #88]	; (80102c8 <_vfiprintf_r+0x258>)
 8010270:	a904      	add	r1, sp, #16
 8010272:	4630      	mov	r0, r6
 8010274:	f7fd fede 	bl	800e034 <_printf_float>
 8010278:	4607      	mov	r7, r0
 801027a:	1c78      	adds	r0, r7, #1
 801027c:	d1d6      	bne.n	801022c <_vfiprintf_r+0x1bc>
 801027e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010280:	07d9      	lsls	r1, r3, #31
 8010282:	d405      	bmi.n	8010290 <_vfiprintf_r+0x220>
 8010284:	89ab      	ldrh	r3, [r5, #12]
 8010286:	059a      	lsls	r2, r3, #22
 8010288:	d402      	bmi.n	8010290 <_vfiprintf_r+0x220>
 801028a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801028c:	f7ff fa42 	bl	800f714 <__retarget_lock_release_recursive>
 8010290:	89ab      	ldrh	r3, [r5, #12]
 8010292:	065b      	lsls	r3, r3, #25
 8010294:	f53f af12 	bmi.w	80100bc <_vfiprintf_r+0x4c>
 8010298:	9809      	ldr	r0, [sp, #36]	; 0x24
 801029a:	e711      	b.n	80100c0 <_vfiprintf_r+0x50>
 801029c:	ab03      	add	r3, sp, #12
 801029e:	9300      	str	r3, [sp, #0]
 80102a0:	462a      	mov	r2, r5
 80102a2:	4b09      	ldr	r3, [pc, #36]	; (80102c8 <_vfiprintf_r+0x258>)
 80102a4:	a904      	add	r1, sp, #16
 80102a6:	4630      	mov	r0, r6
 80102a8:	f7fe f968 	bl	800e57c <_printf_i>
 80102ac:	e7e4      	b.n	8010278 <_vfiprintf_r+0x208>
 80102ae:	bf00      	nop
 80102b0:	08010be4 	.word	0x08010be4
 80102b4:	08010c04 	.word	0x08010c04
 80102b8:	08010bc4 	.word	0x08010bc4
 80102bc:	08010d7c 	.word	0x08010d7c
 80102c0:	08010d86 	.word	0x08010d86
 80102c4:	0800e035 	.word	0x0800e035
 80102c8:	0801004b 	.word	0x0801004b
 80102cc:	08010d82 	.word	0x08010d82

080102d0 <_putc_r>:
 80102d0:	b570      	push	{r4, r5, r6, lr}
 80102d2:	460d      	mov	r5, r1
 80102d4:	4614      	mov	r4, r2
 80102d6:	4606      	mov	r6, r0
 80102d8:	b118      	cbz	r0, 80102e2 <_putc_r+0x12>
 80102da:	6983      	ldr	r3, [r0, #24]
 80102dc:	b90b      	cbnz	r3, 80102e2 <_putc_r+0x12>
 80102de:	f7ff f975 	bl	800f5cc <__sinit>
 80102e2:	4b1c      	ldr	r3, [pc, #112]	; (8010354 <_putc_r+0x84>)
 80102e4:	429c      	cmp	r4, r3
 80102e6:	d124      	bne.n	8010332 <_putc_r+0x62>
 80102e8:	6874      	ldr	r4, [r6, #4]
 80102ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80102ec:	07d8      	lsls	r0, r3, #31
 80102ee:	d405      	bmi.n	80102fc <_putc_r+0x2c>
 80102f0:	89a3      	ldrh	r3, [r4, #12]
 80102f2:	0599      	lsls	r1, r3, #22
 80102f4:	d402      	bmi.n	80102fc <_putc_r+0x2c>
 80102f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80102f8:	f7ff fa0b 	bl	800f712 <__retarget_lock_acquire_recursive>
 80102fc:	68a3      	ldr	r3, [r4, #8]
 80102fe:	3b01      	subs	r3, #1
 8010300:	2b00      	cmp	r3, #0
 8010302:	60a3      	str	r3, [r4, #8]
 8010304:	da05      	bge.n	8010312 <_putc_r+0x42>
 8010306:	69a2      	ldr	r2, [r4, #24]
 8010308:	4293      	cmp	r3, r2
 801030a:	db1c      	blt.n	8010346 <_putc_r+0x76>
 801030c:	b2eb      	uxtb	r3, r5
 801030e:	2b0a      	cmp	r3, #10
 8010310:	d019      	beq.n	8010346 <_putc_r+0x76>
 8010312:	6823      	ldr	r3, [r4, #0]
 8010314:	1c5a      	adds	r2, r3, #1
 8010316:	6022      	str	r2, [r4, #0]
 8010318:	701d      	strb	r5, [r3, #0]
 801031a:	b2ed      	uxtb	r5, r5
 801031c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801031e:	07da      	lsls	r2, r3, #31
 8010320:	d405      	bmi.n	801032e <_putc_r+0x5e>
 8010322:	89a3      	ldrh	r3, [r4, #12]
 8010324:	059b      	lsls	r3, r3, #22
 8010326:	d402      	bmi.n	801032e <_putc_r+0x5e>
 8010328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801032a:	f7ff f9f3 	bl	800f714 <__retarget_lock_release_recursive>
 801032e:	4628      	mov	r0, r5
 8010330:	bd70      	pop	{r4, r5, r6, pc}
 8010332:	4b09      	ldr	r3, [pc, #36]	; (8010358 <_putc_r+0x88>)
 8010334:	429c      	cmp	r4, r3
 8010336:	d101      	bne.n	801033c <_putc_r+0x6c>
 8010338:	68b4      	ldr	r4, [r6, #8]
 801033a:	e7d6      	b.n	80102ea <_putc_r+0x1a>
 801033c:	4b07      	ldr	r3, [pc, #28]	; (801035c <_putc_r+0x8c>)
 801033e:	429c      	cmp	r4, r3
 8010340:	bf08      	it	eq
 8010342:	68f4      	ldreq	r4, [r6, #12]
 8010344:	e7d1      	b.n	80102ea <_putc_r+0x1a>
 8010346:	4629      	mov	r1, r5
 8010348:	4622      	mov	r2, r4
 801034a:	4630      	mov	r0, r6
 801034c:	f000 f85c 	bl	8010408 <__swbuf_r>
 8010350:	4605      	mov	r5, r0
 8010352:	e7e3      	b.n	801031c <_putc_r+0x4c>
 8010354:	08010be4 	.word	0x08010be4
 8010358:	08010c04 	.word	0x08010c04
 801035c:	08010bc4 	.word	0x08010bc4

08010360 <_sbrk_r>:
 8010360:	b538      	push	{r3, r4, r5, lr}
 8010362:	4d06      	ldr	r5, [pc, #24]	; (801037c <_sbrk_r+0x1c>)
 8010364:	2300      	movs	r3, #0
 8010366:	4604      	mov	r4, r0
 8010368:	4608      	mov	r0, r1
 801036a:	602b      	str	r3, [r5, #0]
 801036c:	f7f1 fc72 	bl	8001c54 <_sbrk>
 8010370:	1c43      	adds	r3, r0, #1
 8010372:	d102      	bne.n	801037a <_sbrk_r+0x1a>
 8010374:	682b      	ldr	r3, [r5, #0]
 8010376:	b103      	cbz	r3, 801037a <_sbrk_r+0x1a>
 8010378:	6023      	str	r3, [r4, #0]
 801037a:	bd38      	pop	{r3, r4, r5, pc}
 801037c:	20004c70 	.word	0x20004c70

08010380 <__sread>:
 8010380:	b510      	push	{r4, lr}
 8010382:	460c      	mov	r4, r1
 8010384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010388:	f000 faa8 	bl	80108dc <_read_r>
 801038c:	2800      	cmp	r0, #0
 801038e:	bfab      	itete	ge
 8010390:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010392:	89a3      	ldrhlt	r3, [r4, #12]
 8010394:	181b      	addge	r3, r3, r0
 8010396:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801039a:	bfac      	ite	ge
 801039c:	6563      	strge	r3, [r4, #84]	; 0x54
 801039e:	81a3      	strhlt	r3, [r4, #12]
 80103a0:	bd10      	pop	{r4, pc}

080103a2 <__swrite>:
 80103a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103a6:	461f      	mov	r7, r3
 80103a8:	898b      	ldrh	r3, [r1, #12]
 80103aa:	05db      	lsls	r3, r3, #23
 80103ac:	4605      	mov	r5, r0
 80103ae:	460c      	mov	r4, r1
 80103b0:	4616      	mov	r6, r2
 80103b2:	d505      	bpl.n	80103c0 <__swrite+0x1e>
 80103b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103b8:	2302      	movs	r3, #2
 80103ba:	2200      	movs	r2, #0
 80103bc:	f000 f9f8 	bl	80107b0 <_lseek_r>
 80103c0:	89a3      	ldrh	r3, [r4, #12]
 80103c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80103c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80103ca:	81a3      	strh	r3, [r4, #12]
 80103cc:	4632      	mov	r2, r6
 80103ce:	463b      	mov	r3, r7
 80103d0:	4628      	mov	r0, r5
 80103d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80103d6:	f000 b869 	b.w	80104ac <_write_r>

080103da <__sseek>:
 80103da:	b510      	push	{r4, lr}
 80103dc:	460c      	mov	r4, r1
 80103de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103e2:	f000 f9e5 	bl	80107b0 <_lseek_r>
 80103e6:	1c43      	adds	r3, r0, #1
 80103e8:	89a3      	ldrh	r3, [r4, #12]
 80103ea:	bf15      	itete	ne
 80103ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80103ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80103f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80103f6:	81a3      	strheq	r3, [r4, #12]
 80103f8:	bf18      	it	ne
 80103fa:	81a3      	strhne	r3, [r4, #12]
 80103fc:	bd10      	pop	{r4, pc}

080103fe <__sclose>:
 80103fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010402:	f000 b8f1 	b.w	80105e8 <_close_r>
	...

08010408 <__swbuf_r>:
 8010408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801040a:	460e      	mov	r6, r1
 801040c:	4614      	mov	r4, r2
 801040e:	4605      	mov	r5, r0
 8010410:	b118      	cbz	r0, 801041a <__swbuf_r+0x12>
 8010412:	6983      	ldr	r3, [r0, #24]
 8010414:	b90b      	cbnz	r3, 801041a <__swbuf_r+0x12>
 8010416:	f7ff f8d9 	bl	800f5cc <__sinit>
 801041a:	4b21      	ldr	r3, [pc, #132]	; (80104a0 <__swbuf_r+0x98>)
 801041c:	429c      	cmp	r4, r3
 801041e:	d12b      	bne.n	8010478 <__swbuf_r+0x70>
 8010420:	686c      	ldr	r4, [r5, #4]
 8010422:	69a3      	ldr	r3, [r4, #24]
 8010424:	60a3      	str	r3, [r4, #8]
 8010426:	89a3      	ldrh	r3, [r4, #12]
 8010428:	071a      	lsls	r2, r3, #28
 801042a:	d52f      	bpl.n	801048c <__swbuf_r+0x84>
 801042c:	6923      	ldr	r3, [r4, #16]
 801042e:	b36b      	cbz	r3, 801048c <__swbuf_r+0x84>
 8010430:	6923      	ldr	r3, [r4, #16]
 8010432:	6820      	ldr	r0, [r4, #0]
 8010434:	1ac0      	subs	r0, r0, r3
 8010436:	6963      	ldr	r3, [r4, #20]
 8010438:	b2f6      	uxtb	r6, r6
 801043a:	4283      	cmp	r3, r0
 801043c:	4637      	mov	r7, r6
 801043e:	dc04      	bgt.n	801044a <__swbuf_r+0x42>
 8010440:	4621      	mov	r1, r4
 8010442:	4628      	mov	r0, r5
 8010444:	f000 f966 	bl	8010714 <_fflush_r>
 8010448:	bb30      	cbnz	r0, 8010498 <__swbuf_r+0x90>
 801044a:	68a3      	ldr	r3, [r4, #8]
 801044c:	3b01      	subs	r3, #1
 801044e:	60a3      	str	r3, [r4, #8]
 8010450:	6823      	ldr	r3, [r4, #0]
 8010452:	1c5a      	adds	r2, r3, #1
 8010454:	6022      	str	r2, [r4, #0]
 8010456:	701e      	strb	r6, [r3, #0]
 8010458:	6963      	ldr	r3, [r4, #20]
 801045a:	3001      	adds	r0, #1
 801045c:	4283      	cmp	r3, r0
 801045e:	d004      	beq.n	801046a <__swbuf_r+0x62>
 8010460:	89a3      	ldrh	r3, [r4, #12]
 8010462:	07db      	lsls	r3, r3, #31
 8010464:	d506      	bpl.n	8010474 <__swbuf_r+0x6c>
 8010466:	2e0a      	cmp	r6, #10
 8010468:	d104      	bne.n	8010474 <__swbuf_r+0x6c>
 801046a:	4621      	mov	r1, r4
 801046c:	4628      	mov	r0, r5
 801046e:	f000 f951 	bl	8010714 <_fflush_r>
 8010472:	b988      	cbnz	r0, 8010498 <__swbuf_r+0x90>
 8010474:	4638      	mov	r0, r7
 8010476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010478:	4b0a      	ldr	r3, [pc, #40]	; (80104a4 <__swbuf_r+0x9c>)
 801047a:	429c      	cmp	r4, r3
 801047c:	d101      	bne.n	8010482 <__swbuf_r+0x7a>
 801047e:	68ac      	ldr	r4, [r5, #8]
 8010480:	e7cf      	b.n	8010422 <__swbuf_r+0x1a>
 8010482:	4b09      	ldr	r3, [pc, #36]	; (80104a8 <__swbuf_r+0xa0>)
 8010484:	429c      	cmp	r4, r3
 8010486:	bf08      	it	eq
 8010488:	68ec      	ldreq	r4, [r5, #12]
 801048a:	e7ca      	b.n	8010422 <__swbuf_r+0x1a>
 801048c:	4621      	mov	r1, r4
 801048e:	4628      	mov	r0, r5
 8010490:	f000 f81e 	bl	80104d0 <__swsetup_r>
 8010494:	2800      	cmp	r0, #0
 8010496:	d0cb      	beq.n	8010430 <__swbuf_r+0x28>
 8010498:	f04f 37ff 	mov.w	r7, #4294967295
 801049c:	e7ea      	b.n	8010474 <__swbuf_r+0x6c>
 801049e:	bf00      	nop
 80104a0:	08010be4 	.word	0x08010be4
 80104a4:	08010c04 	.word	0x08010c04
 80104a8:	08010bc4 	.word	0x08010bc4

080104ac <_write_r>:
 80104ac:	b538      	push	{r3, r4, r5, lr}
 80104ae:	4d07      	ldr	r5, [pc, #28]	; (80104cc <_write_r+0x20>)
 80104b0:	4604      	mov	r4, r0
 80104b2:	4608      	mov	r0, r1
 80104b4:	4611      	mov	r1, r2
 80104b6:	2200      	movs	r2, #0
 80104b8:	602a      	str	r2, [r5, #0]
 80104ba:	461a      	mov	r2, r3
 80104bc:	f7f1 fb79 	bl	8001bb2 <_write>
 80104c0:	1c43      	adds	r3, r0, #1
 80104c2:	d102      	bne.n	80104ca <_write_r+0x1e>
 80104c4:	682b      	ldr	r3, [r5, #0]
 80104c6:	b103      	cbz	r3, 80104ca <_write_r+0x1e>
 80104c8:	6023      	str	r3, [r4, #0]
 80104ca:	bd38      	pop	{r3, r4, r5, pc}
 80104cc:	20004c70 	.word	0x20004c70

080104d0 <__swsetup_r>:
 80104d0:	4b32      	ldr	r3, [pc, #200]	; (801059c <__swsetup_r+0xcc>)
 80104d2:	b570      	push	{r4, r5, r6, lr}
 80104d4:	681d      	ldr	r5, [r3, #0]
 80104d6:	4606      	mov	r6, r0
 80104d8:	460c      	mov	r4, r1
 80104da:	b125      	cbz	r5, 80104e6 <__swsetup_r+0x16>
 80104dc:	69ab      	ldr	r3, [r5, #24]
 80104de:	b913      	cbnz	r3, 80104e6 <__swsetup_r+0x16>
 80104e0:	4628      	mov	r0, r5
 80104e2:	f7ff f873 	bl	800f5cc <__sinit>
 80104e6:	4b2e      	ldr	r3, [pc, #184]	; (80105a0 <__swsetup_r+0xd0>)
 80104e8:	429c      	cmp	r4, r3
 80104ea:	d10f      	bne.n	801050c <__swsetup_r+0x3c>
 80104ec:	686c      	ldr	r4, [r5, #4]
 80104ee:	89a3      	ldrh	r3, [r4, #12]
 80104f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80104f4:	0719      	lsls	r1, r3, #28
 80104f6:	d42c      	bmi.n	8010552 <__swsetup_r+0x82>
 80104f8:	06dd      	lsls	r5, r3, #27
 80104fa:	d411      	bmi.n	8010520 <__swsetup_r+0x50>
 80104fc:	2309      	movs	r3, #9
 80104fe:	6033      	str	r3, [r6, #0]
 8010500:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010504:	81a3      	strh	r3, [r4, #12]
 8010506:	f04f 30ff 	mov.w	r0, #4294967295
 801050a:	e03e      	b.n	801058a <__swsetup_r+0xba>
 801050c:	4b25      	ldr	r3, [pc, #148]	; (80105a4 <__swsetup_r+0xd4>)
 801050e:	429c      	cmp	r4, r3
 8010510:	d101      	bne.n	8010516 <__swsetup_r+0x46>
 8010512:	68ac      	ldr	r4, [r5, #8]
 8010514:	e7eb      	b.n	80104ee <__swsetup_r+0x1e>
 8010516:	4b24      	ldr	r3, [pc, #144]	; (80105a8 <__swsetup_r+0xd8>)
 8010518:	429c      	cmp	r4, r3
 801051a:	bf08      	it	eq
 801051c:	68ec      	ldreq	r4, [r5, #12]
 801051e:	e7e6      	b.n	80104ee <__swsetup_r+0x1e>
 8010520:	0758      	lsls	r0, r3, #29
 8010522:	d512      	bpl.n	801054a <__swsetup_r+0x7a>
 8010524:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010526:	b141      	cbz	r1, 801053a <__swsetup_r+0x6a>
 8010528:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801052c:	4299      	cmp	r1, r3
 801052e:	d002      	beq.n	8010536 <__swsetup_r+0x66>
 8010530:	4630      	mov	r0, r6
 8010532:	f7ff fc93 	bl	800fe5c <_free_r>
 8010536:	2300      	movs	r3, #0
 8010538:	6363      	str	r3, [r4, #52]	; 0x34
 801053a:	89a3      	ldrh	r3, [r4, #12]
 801053c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010540:	81a3      	strh	r3, [r4, #12]
 8010542:	2300      	movs	r3, #0
 8010544:	6063      	str	r3, [r4, #4]
 8010546:	6923      	ldr	r3, [r4, #16]
 8010548:	6023      	str	r3, [r4, #0]
 801054a:	89a3      	ldrh	r3, [r4, #12]
 801054c:	f043 0308 	orr.w	r3, r3, #8
 8010550:	81a3      	strh	r3, [r4, #12]
 8010552:	6923      	ldr	r3, [r4, #16]
 8010554:	b94b      	cbnz	r3, 801056a <__swsetup_r+0x9a>
 8010556:	89a3      	ldrh	r3, [r4, #12]
 8010558:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801055c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010560:	d003      	beq.n	801056a <__swsetup_r+0x9a>
 8010562:	4621      	mov	r1, r4
 8010564:	4630      	mov	r0, r6
 8010566:	f000 f95b 	bl	8010820 <__smakebuf_r>
 801056a:	89a0      	ldrh	r0, [r4, #12]
 801056c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010570:	f010 0301 	ands.w	r3, r0, #1
 8010574:	d00a      	beq.n	801058c <__swsetup_r+0xbc>
 8010576:	2300      	movs	r3, #0
 8010578:	60a3      	str	r3, [r4, #8]
 801057a:	6963      	ldr	r3, [r4, #20]
 801057c:	425b      	negs	r3, r3
 801057e:	61a3      	str	r3, [r4, #24]
 8010580:	6923      	ldr	r3, [r4, #16]
 8010582:	b943      	cbnz	r3, 8010596 <__swsetup_r+0xc6>
 8010584:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010588:	d1ba      	bne.n	8010500 <__swsetup_r+0x30>
 801058a:	bd70      	pop	{r4, r5, r6, pc}
 801058c:	0781      	lsls	r1, r0, #30
 801058e:	bf58      	it	pl
 8010590:	6963      	ldrpl	r3, [r4, #20]
 8010592:	60a3      	str	r3, [r4, #8]
 8010594:	e7f4      	b.n	8010580 <__swsetup_r+0xb0>
 8010596:	2000      	movs	r0, #0
 8010598:	e7f7      	b.n	801058a <__swsetup_r+0xba>
 801059a:	bf00      	nop
 801059c:	20002858 	.word	0x20002858
 80105a0:	08010be4 	.word	0x08010be4
 80105a4:	08010c04 	.word	0x08010c04
 80105a8:	08010bc4 	.word	0x08010bc4

080105ac <__assert_func>:
 80105ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80105ae:	4614      	mov	r4, r2
 80105b0:	461a      	mov	r2, r3
 80105b2:	4b09      	ldr	r3, [pc, #36]	; (80105d8 <__assert_func+0x2c>)
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	4605      	mov	r5, r0
 80105b8:	68d8      	ldr	r0, [r3, #12]
 80105ba:	b14c      	cbz	r4, 80105d0 <__assert_func+0x24>
 80105bc:	4b07      	ldr	r3, [pc, #28]	; (80105dc <__assert_func+0x30>)
 80105be:	9100      	str	r1, [sp, #0]
 80105c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80105c4:	4906      	ldr	r1, [pc, #24]	; (80105e0 <__assert_func+0x34>)
 80105c6:	462b      	mov	r3, r5
 80105c8:	f000 f8e0 	bl	801078c <fiprintf>
 80105cc:	f000 f9a5 	bl	801091a <abort>
 80105d0:	4b04      	ldr	r3, [pc, #16]	; (80105e4 <__assert_func+0x38>)
 80105d2:	461c      	mov	r4, r3
 80105d4:	e7f3      	b.n	80105be <__assert_func+0x12>
 80105d6:	bf00      	nop
 80105d8:	20002858 	.word	0x20002858
 80105dc:	08010d8d 	.word	0x08010d8d
 80105e0:	08010d9a 	.word	0x08010d9a
 80105e4:	08010dc8 	.word	0x08010dc8

080105e8 <_close_r>:
 80105e8:	b538      	push	{r3, r4, r5, lr}
 80105ea:	4d06      	ldr	r5, [pc, #24]	; (8010604 <_close_r+0x1c>)
 80105ec:	2300      	movs	r3, #0
 80105ee:	4604      	mov	r4, r0
 80105f0:	4608      	mov	r0, r1
 80105f2:	602b      	str	r3, [r5, #0]
 80105f4:	f7f1 faf9 	bl	8001bea <_close>
 80105f8:	1c43      	adds	r3, r0, #1
 80105fa:	d102      	bne.n	8010602 <_close_r+0x1a>
 80105fc:	682b      	ldr	r3, [r5, #0]
 80105fe:	b103      	cbz	r3, 8010602 <_close_r+0x1a>
 8010600:	6023      	str	r3, [r4, #0]
 8010602:	bd38      	pop	{r3, r4, r5, pc}
 8010604:	20004c70 	.word	0x20004c70

08010608 <__sflush_r>:
 8010608:	898a      	ldrh	r2, [r1, #12]
 801060a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801060e:	4605      	mov	r5, r0
 8010610:	0710      	lsls	r0, r2, #28
 8010612:	460c      	mov	r4, r1
 8010614:	d458      	bmi.n	80106c8 <__sflush_r+0xc0>
 8010616:	684b      	ldr	r3, [r1, #4]
 8010618:	2b00      	cmp	r3, #0
 801061a:	dc05      	bgt.n	8010628 <__sflush_r+0x20>
 801061c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801061e:	2b00      	cmp	r3, #0
 8010620:	dc02      	bgt.n	8010628 <__sflush_r+0x20>
 8010622:	2000      	movs	r0, #0
 8010624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010628:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801062a:	2e00      	cmp	r6, #0
 801062c:	d0f9      	beq.n	8010622 <__sflush_r+0x1a>
 801062e:	2300      	movs	r3, #0
 8010630:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010634:	682f      	ldr	r7, [r5, #0]
 8010636:	602b      	str	r3, [r5, #0]
 8010638:	d032      	beq.n	80106a0 <__sflush_r+0x98>
 801063a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801063c:	89a3      	ldrh	r3, [r4, #12]
 801063e:	075a      	lsls	r2, r3, #29
 8010640:	d505      	bpl.n	801064e <__sflush_r+0x46>
 8010642:	6863      	ldr	r3, [r4, #4]
 8010644:	1ac0      	subs	r0, r0, r3
 8010646:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010648:	b10b      	cbz	r3, 801064e <__sflush_r+0x46>
 801064a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801064c:	1ac0      	subs	r0, r0, r3
 801064e:	2300      	movs	r3, #0
 8010650:	4602      	mov	r2, r0
 8010652:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010654:	6a21      	ldr	r1, [r4, #32]
 8010656:	4628      	mov	r0, r5
 8010658:	47b0      	blx	r6
 801065a:	1c43      	adds	r3, r0, #1
 801065c:	89a3      	ldrh	r3, [r4, #12]
 801065e:	d106      	bne.n	801066e <__sflush_r+0x66>
 8010660:	6829      	ldr	r1, [r5, #0]
 8010662:	291d      	cmp	r1, #29
 8010664:	d82c      	bhi.n	80106c0 <__sflush_r+0xb8>
 8010666:	4a2a      	ldr	r2, [pc, #168]	; (8010710 <__sflush_r+0x108>)
 8010668:	40ca      	lsrs	r2, r1
 801066a:	07d6      	lsls	r6, r2, #31
 801066c:	d528      	bpl.n	80106c0 <__sflush_r+0xb8>
 801066e:	2200      	movs	r2, #0
 8010670:	6062      	str	r2, [r4, #4]
 8010672:	04d9      	lsls	r1, r3, #19
 8010674:	6922      	ldr	r2, [r4, #16]
 8010676:	6022      	str	r2, [r4, #0]
 8010678:	d504      	bpl.n	8010684 <__sflush_r+0x7c>
 801067a:	1c42      	adds	r2, r0, #1
 801067c:	d101      	bne.n	8010682 <__sflush_r+0x7a>
 801067e:	682b      	ldr	r3, [r5, #0]
 8010680:	b903      	cbnz	r3, 8010684 <__sflush_r+0x7c>
 8010682:	6560      	str	r0, [r4, #84]	; 0x54
 8010684:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010686:	602f      	str	r7, [r5, #0]
 8010688:	2900      	cmp	r1, #0
 801068a:	d0ca      	beq.n	8010622 <__sflush_r+0x1a>
 801068c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010690:	4299      	cmp	r1, r3
 8010692:	d002      	beq.n	801069a <__sflush_r+0x92>
 8010694:	4628      	mov	r0, r5
 8010696:	f7ff fbe1 	bl	800fe5c <_free_r>
 801069a:	2000      	movs	r0, #0
 801069c:	6360      	str	r0, [r4, #52]	; 0x34
 801069e:	e7c1      	b.n	8010624 <__sflush_r+0x1c>
 80106a0:	6a21      	ldr	r1, [r4, #32]
 80106a2:	2301      	movs	r3, #1
 80106a4:	4628      	mov	r0, r5
 80106a6:	47b0      	blx	r6
 80106a8:	1c41      	adds	r1, r0, #1
 80106aa:	d1c7      	bne.n	801063c <__sflush_r+0x34>
 80106ac:	682b      	ldr	r3, [r5, #0]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d0c4      	beq.n	801063c <__sflush_r+0x34>
 80106b2:	2b1d      	cmp	r3, #29
 80106b4:	d001      	beq.n	80106ba <__sflush_r+0xb2>
 80106b6:	2b16      	cmp	r3, #22
 80106b8:	d101      	bne.n	80106be <__sflush_r+0xb6>
 80106ba:	602f      	str	r7, [r5, #0]
 80106bc:	e7b1      	b.n	8010622 <__sflush_r+0x1a>
 80106be:	89a3      	ldrh	r3, [r4, #12]
 80106c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106c4:	81a3      	strh	r3, [r4, #12]
 80106c6:	e7ad      	b.n	8010624 <__sflush_r+0x1c>
 80106c8:	690f      	ldr	r7, [r1, #16]
 80106ca:	2f00      	cmp	r7, #0
 80106cc:	d0a9      	beq.n	8010622 <__sflush_r+0x1a>
 80106ce:	0793      	lsls	r3, r2, #30
 80106d0:	680e      	ldr	r6, [r1, #0]
 80106d2:	bf08      	it	eq
 80106d4:	694b      	ldreq	r3, [r1, #20]
 80106d6:	600f      	str	r7, [r1, #0]
 80106d8:	bf18      	it	ne
 80106da:	2300      	movne	r3, #0
 80106dc:	eba6 0807 	sub.w	r8, r6, r7
 80106e0:	608b      	str	r3, [r1, #8]
 80106e2:	f1b8 0f00 	cmp.w	r8, #0
 80106e6:	dd9c      	ble.n	8010622 <__sflush_r+0x1a>
 80106e8:	6a21      	ldr	r1, [r4, #32]
 80106ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80106ec:	4643      	mov	r3, r8
 80106ee:	463a      	mov	r2, r7
 80106f0:	4628      	mov	r0, r5
 80106f2:	47b0      	blx	r6
 80106f4:	2800      	cmp	r0, #0
 80106f6:	dc06      	bgt.n	8010706 <__sflush_r+0xfe>
 80106f8:	89a3      	ldrh	r3, [r4, #12]
 80106fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106fe:	81a3      	strh	r3, [r4, #12]
 8010700:	f04f 30ff 	mov.w	r0, #4294967295
 8010704:	e78e      	b.n	8010624 <__sflush_r+0x1c>
 8010706:	4407      	add	r7, r0
 8010708:	eba8 0800 	sub.w	r8, r8, r0
 801070c:	e7e9      	b.n	80106e2 <__sflush_r+0xda>
 801070e:	bf00      	nop
 8010710:	20400001 	.word	0x20400001

08010714 <_fflush_r>:
 8010714:	b538      	push	{r3, r4, r5, lr}
 8010716:	690b      	ldr	r3, [r1, #16]
 8010718:	4605      	mov	r5, r0
 801071a:	460c      	mov	r4, r1
 801071c:	b913      	cbnz	r3, 8010724 <_fflush_r+0x10>
 801071e:	2500      	movs	r5, #0
 8010720:	4628      	mov	r0, r5
 8010722:	bd38      	pop	{r3, r4, r5, pc}
 8010724:	b118      	cbz	r0, 801072e <_fflush_r+0x1a>
 8010726:	6983      	ldr	r3, [r0, #24]
 8010728:	b90b      	cbnz	r3, 801072e <_fflush_r+0x1a>
 801072a:	f7fe ff4f 	bl	800f5cc <__sinit>
 801072e:	4b14      	ldr	r3, [pc, #80]	; (8010780 <_fflush_r+0x6c>)
 8010730:	429c      	cmp	r4, r3
 8010732:	d11b      	bne.n	801076c <_fflush_r+0x58>
 8010734:	686c      	ldr	r4, [r5, #4]
 8010736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d0ef      	beq.n	801071e <_fflush_r+0xa>
 801073e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010740:	07d0      	lsls	r0, r2, #31
 8010742:	d404      	bmi.n	801074e <_fflush_r+0x3a>
 8010744:	0599      	lsls	r1, r3, #22
 8010746:	d402      	bmi.n	801074e <_fflush_r+0x3a>
 8010748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801074a:	f7fe ffe2 	bl	800f712 <__retarget_lock_acquire_recursive>
 801074e:	4628      	mov	r0, r5
 8010750:	4621      	mov	r1, r4
 8010752:	f7ff ff59 	bl	8010608 <__sflush_r>
 8010756:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010758:	07da      	lsls	r2, r3, #31
 801075a:	4605      	mov	r5, r0
 801075c:	d4e0      	bmi.n	8010720 <_fflush_r+0xc>
 801075e:	89a3      	ldrh	r3, [r4, #12]
 8010760:	059b      	lsls	r3, r3, #22
 8010762:	d4dd      	bmi.n	8010720 <_fflush_r+0xc>
 8010764:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010766:	f7fe ffd5 	bl	800f714 <__retarget_lock_release_recursive>
 801076a:	e7d9      	b.n	8010720 <_fflush_r+0xc>
 801076c:	4b05      	ldr	r3, [pc, #20]	; (8010784 <_fflush_r+0x70>)
 801076e:	429c      	cmp	r4, r3
 8010770:	d101      	bne.n	8010776 <_fflush_r+0x62>
 8010772:	68ac      	ldr	r4, [r5, #8]
 8010774:	e7df      	b.n	8010736 <_fflush_r+0x22>
 8010776:	4b04      	ldr	r3, [pc, #16]	; (8010788 <_fflush_r+0x74>)
 8010778:	429c      	cmp	r4, r3
 801077a:	bf08      	it	eq
 801077c:	68ec      	ldreq	r4, [r5, #12]
 801077e:	e7da      	b.n	8010736 <_fflush_r+0x22>
 8010780:	08010be4 	.word	0x08010be4
 8010784:	08010c04 	.word	0x08010c04
 8010788:	08010bc4 	.word	0x08010bc4

0801078c <fiprintf>:
 801078c:	b40e      	push	{r1, r2, r3}
 801078e:	b503      	push	{r0, r1, lr}
 8010790:	4601      	mov	r1, r0
 8010792:	ab03      	add	r3, sp, #12
 8010794:	4805      	ldr	r0, [pc, #20]	; (80107ac <fiprintf+0x20>)
 8010796:	f853 2b04 	ldr.w	r2, [r3], #4
 801079a:	6800      	ldr	r0, [r0, #0]
 801079c:	9301      	str	r3, [sp, #4]
 801079e:	f7ff fc67 	bl	8010070 <_vfiprintf_r>
 80107a2:	b002      	add	sp, #8
 80107a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80107a8:	b003      	add	sp, #12
 80107aa:	4770      	bx	lr
 80107ac:	20002858 	.word	0x20002858

080107b0 <_lseek_r>:
 80107b0:	b538      	push	{r3, r4, r5, lr}
 80107b2:	4d07      	ldr	r5, [pc, #28]	; (80107d0 <_lseek_r+0x20>)
 80107b4:	4604      	mov	r4, r0
 80107b6:	4608      	mov	r0, r1
 80107b8:	4611      	mov	r1, r2
 80107ba:	2200      	movs	r2, #0
 80107bc:	602a      	str	r2, [r5, #0]
 80107be:	461a      	mov	r2, r3
 80107c0:	f7f1 fa3a 	bl	8001c38 <_lseek>
 80107c4:	1c43      	adds	r3, r0, #1
 80107c6:	d102      	bne.n	80107ce <_lseek_r+0x1e>
 80107c8:	682b      	ldr	r3, [r5, #0]
 80107ca:	b103      	cbz	r3, 80107ce <_lseek_r+0x1e>
 80107cc:	6023      	str	r3, [r4, #0]
 80107ce:	bd38      	pop	{r3, r4, r5, pc}
 80107d0:	20004c70 	.word	0x20004c70

080107d4 <__swhatbuf_r>:
 80107d4:	b570      	push	{r4, r5, r6, lr}
 80107d6:	460e      	mov	r6, r1
 80107d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107dc:	2900      	cmp	r1, #0
 80107de:	b096      	sub	sp, #88	; 0x58
 80107e0:	4614      	mov	r4, r2
 80107e2:	461d      	mov	r5, r3
 80107e4:	da08      	bge.n	80107f8 <__swhatbuf_r+0x24>
 80107e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80107ea:	2200      	movs	r2, #0
 80107ec:	602a      	str	r2, [r5, #0]
 80107ee:	061a      	lsls	r2, r3, #24
 80107f0:	d410      	bmi.n	8010814 <__swhatbuf_r+0x40>
 80107f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107f6:	e00e      	b.n	8010816 <__swhatbuf_r+0x42>
 80107f8:	466a      	mov	r2, sp
 80107fa:	f000 f895 	bl	8010928 <_fstat_r>
 80107fe:	2800      	cmp	r0, #0
 8010800:	dbf1      	blt.n	80107e6 <__swhatbuf_r+0x12>
 8010802:	9a01      	ldr	r2, [sp, #4]
 8010804:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010808:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801080c:	425a      	negs	r2, r3
 801080e:	415a      	adcs	r2, r3
 8010810:	602a      	str	r2, [r5, #0]
 8010812:	e7ee      	b.n	80107f2 <__swhatbuf_r+0x1e>
 8010814:	2340      	movs	r3, #64	; 0x40
 8010816:	2000      	movs	r0, #0
 8010818:	6023      	str	r3, [r4, #0]
 801081a:	b016      	add	sp, #88	; 0x58
 801081c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010820 <__smakebuf_r>:
 8010820:	898b      	ldrh	r3, [r1, #12]
 8010822:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010824:	079d      	lsls	r5, r3, #30
 8010826:	4606      	mov	r6, r0
 8010828:	460c      	mov	r4, r1
 801082a:	d507      	bpl.n	801083c <__smakebuf_r+0x1c>
 801082c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010830:	6023      	str	r3, [r4, #0]
 8010832:	6123      	str	r3, [r4, #16]
 8010834:	2301      	movs	r3, #1
 8010836:	6163      	str	r3, [r4, #20]
 8010838:	b002      	add	sp, #8
 801083a:	bd70      	pop	{r4, r5, r6, pc}
 801083c:	ab01      	add	r3, sp, #4
 801083e:	466a      	mov	r2, sp
 8010840:	f7ff ffc8 	bl	80107d4 <__swhatbuf_r>
 8010844:	9900      	ldr	r1, [sp, #0]
 8010846:	4605      	mov	r5, r0
 8010848:	4630      	mov	r0, r6
 801084a:	f7ff fb73 	bl	800ff34 <_malloc_r>
 801084e:	b948      	cbnz	r0, 8010864 <__smakebuf_r+0x44>
 8010850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010854:	059a      	lsls	r2, r3, #22
 8010856:	d4ef      	bmi.n	8010838 <__smakebuf_r+0x18>
 8010858:	f023 0303 	bic.w	r3, r3, #3
 801085c:	f043 0302 	orr.w	r3, r3, #2
 8010860:	81a3      	strh	r3, [r4, #12]
 8010862:	e7e3      	b.n	801082c <__smakebuf_r+0xc>
 8010864:	4b0d      	ldr	r3, [pc, #52]	; (801089c <__smakebuf_r+0x7c>)
 8010866:	62b3      	str	r3, [r6, #40]	; 0x28
 8010868:	89a3      	ldrh	r3, [r4, #12]
 801086a:	6020      	str	r0, [r4, #0]
 801086c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010870:	81a3      	strh	r3, [r4, #12]
 8010872:	9b00      	ldr	r3, [sp, #0]
 8010874:	6163      	str	r3, [r4, #20]
 8010876:	9b01      	ldr	r3, [sp, #4]
 8010878:	6120      	str	r0, [r4, #16]
 801087a:	b15b      	cbz	r3, 8010894 <__smakebuf_r+0x74>
 801087c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010880:	4630      	mov	r0, r6
 8010882:	f000 f863 	bl	801094c <_isatty_r>
 8010886:	b128      	cbz	r0, 8010894 <__smakebuf_r+0x74>
 8010888:	89a3      	ldrh	r3, [r4, #12]
 801088a:	f023 0303 	bic.w	r3, r3, #3
 801088e:	f043 0301 	orr.w	r3, r3, #1
 8010892:	81a3      	strh	r3, [r4, #12]
 8010894:	89a0      	ldrh	r0, [r4, #12]
 8010896:	4305      	orrs	r5, r0
 8010898:	81a5      	strh	r5, [r4, #12]
 801089a:	e7cd      	b.n	8010838 <__smakebuf_r+0x18>
 801089c:	0800f565 	.word	0x0800f565

080108a0 <__ascii_mbtowc>:
 80108a0:	b082      	sub	sp, #8
 80108a2:	b901      	cbnz	r1, 80108a6 <__ascii_mbtowc+0x6>
 80108a4:	a901      	add	r1, sp, #4
 80108a6:	b142      	cbz	r2, 80108ba <__ascii_mbtowc+0x1a>
 80108a8:	b14b      	cbz	r3, 80108be <__ascii_mbtowc+0x1e>
 80108aa:	7813      	ldrb	r3, [r2, #0]
 80108ac:	600b      	str	r3, [r1, #0]
 80108ae:	7812      	ldrb	r2, [r2, #0]
 80108b0:	1e10      	subs	r0, r2, #0
 80108b2:	bf18      	it	ne
 80108b4:	2001      	movne	r0, #1
 80108b6:	b002      	add	sp, #8
 80108b8:	4770      	bx	lr
 80108ba:	4610      	mov	r0, r2
 80108bc:	e7fb      	b.n	80108b6 <__ascii_mbtowc+0x16>
 80108be:	f06f 0001 	mvn.w	r0, #1
 80108c2:	e7f8      	b.n	80108b6 <__ascii_mbtowc+0x16>

080108c4 <__malloc_lock>:
 80108c4:	4801      	ldr	r0, [pc, #4]	; (80108cc <__malloc_lock+0x8>)
 80108c6:	f7fe bf24 	b.w	800f712 <__retarget_lock_acquire_recursive>
 80108ca:	bf00      	nop
 80108cc:	20004c64 	.word	0x20004c64

080108d0 <__malloc_unlock>:
 80108d0:	4801      	ldr	r0, [pc, #4]	; (80108d8 <__malloc_unlock+0x8>)
 80108d2:	f7fe bf1f 	b.w	800f714 <__retarget_lock_release_recursive>
 80108d6:	bf00      	nop
 80108d8:	20004c64 	.word	0x20004c64

080108dc <_read_r>:
 80108dc:	b538      	push	{r3, r4, r5, lr}
 80108de:	4d07      	ldr	r5, [pc, #28]	; (80108fc <_read_r+0x20>)
 80108e0:	4604      	mov	r4, r0
 80108e2:	4608      	mov	r0, r1
 80108e4:	4611      	mov	r1, r2
 80108e6:	2200      	movs	r2, #0
 80108e8:	602a      	str	r2, [r5, #0]
 80108ea:	461a      	mov	r2, r3
 80108ec:	f7f1 f944 	bl	8001b78 <_read>
 80108f0:	1c43      	adds	r3, r0, #1
 80108f2:	d102      	bne.n	80108fa <_read_r+0x1e>
 80108f4:	682b      	ldr	r3, [r5, #0]
 80108f6:	b103      	cbz	r3, 80108fa <_read_r+0x1e>
 80108f8:	6023      	str	r3, [r4, #0]
 80108fa:	bd38      	pop	{r3, r4, r5, pc}
 80108fc:	20004c70 	.word	0x20004c70

08010900 <__ascii_wctomb>:
 8010900:	b149      	cbz	r1, 8010916 <__ascii_wctomb+0x16>
 8010902:	2aff      	cmp	r2, #255	; 0xff
 8010904:	bf85      	ittet	hi
 8010906:	238a      	movhi	r3, #138	; 0x8a
 8010908:	6003      	strhi	r3, [r0, #0]
 801090a:	700a      	strbls	r2, [r1, #0]
 801090c:	f04f 30ff 	movhi.w	r0, #4294967295
 8010910:	bf98      	it	ls
 8010912:	2001      	movls	r0, #1
 8010914:	4770      	bx	lr
 8010916:	4608      	mov	r0, r1
 8010918:	4770      	bx	lr

0801091a <abort>:
 801091a:	b508      	push	{r3, lr}
 801091c:	2006      	movs	r0, #6
 801091e:	f000 f84d 	bl	80109bc <raise>
 8010922:	2001      	movs	r0, #1
 8010924:	f7f1 f91e 	bl	8001b64 <_exit>

08010928 <_fstat_r>:
 8010928:	b538      	push	{r3, r4, r5, lr}
 801092a:	4d07      	ldr	r5, [pc, #28]	; (8010948 <_fstat_r+0x20>)
 801092c:	2300      	movs	r3, #0
 801092e:	4604      	mov	r4, r0
 8010930:	4608      	mov	r0, r1
 8010932:	4611      	mov	r1, r2
 8010934:	602b      	str	r3, [r5, #0]
 8010936:	f7f1 f964 	bl	8001c02 <_fstat>
 801093a:	1c43      	adds	r3, r0, #1
 801093c:	d102      	bne.n	8010944 <_fstat_r+0x1c>
 801093e:	682b      	ldr	r3, [r5, #0]
 8010940:	b103      	cbz	r3, 8010944 <_fstat_r+0x1c>
 8010942:	6023      	str	r3, [r4, #0]
 8010944:	bd38      	pop	{r3, r4, r5, pc}
 8010946:	bf00      	nop
 8010948:	20004c70 	.word	0x20004c70

0801094c <_isatty_r>:
 801094c:	b538      	push	{r3, r4, r5, lr}
 801094e:	4d06      	ldr	r5, [pc, #24]	; (8010968 <_isatty_r+0x1c>)
 8010950:	2300      	movs	r3, #0
 8010952:	4604      	mov	r4, r0
 8010954:	4608      	mov	r0, r1
 8010956:	602b      	str	r3, [r5, #0]
 8010958:	f7f1 f963 	bl	8001c22 <_isatty>
 801095c:	1c43      	adds	r3, r0, #1
 801095e:	d102      	bne.n	8010966 <_isatty_r+0x1a>
 8010960:	682b      	ldr	r3, [r5, #0]
 8010962:	b103      	cbz	r3, 8010966 <_isatty_r+0x1a>
 8010964:	6023      	str	r3, [r4, #0]
 8010966:	bd38      	pop	{r3, r4, r5, pc}
 8010968:	20004c70 	.word	0x20004c70

0801096c <_raise_r>:
 801096c:	291f      	cmp	r1, #31
 801096e:	b538      	push	{r3, r4, r5, lr}
 8010970:	4604      	mov	r4, r0
 8010972:	460d      	mov	r5, r1
 8010974:	d904      	bls.n	8010980 <_raise_r+0x14>
 8010976:	2316      	movs	r3, #22
 8010978:	6003      	str	r3, [r0, #0]
 801097a:	f04f 30ff 	mov.w	r0, #4294967295
 801097e:	bd38      	pop	{r3, r4, r5, pc}
 8010980:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010982:	b112      	cbz	r2, 801098a <_raise_r+0x1e>
 8010984:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010988:	b94b      	cbnz	r3, 801099e <_raise_r+0x32>
 801098a:	4620      	mov	r0, r4
 801098c:	f000 f830 	bl	80109f0 <_getpid_r>
 8010990:	462a      	mov	r2, r5
 8010992:	4601      	mov	r1, r0
 8010994:	4620      	mov	r0, r4
 8010996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801099a:	f000 b817 	b.w	80109cc <_kill_r>
 801099e:	2b01      	cmp	r3, #1
 80109a0:	d00a      	beq.n	80109b8 <_raise_r+0x4c>
 80109a2:	1c59      	adds	r1, r3, #1
 80109a4:	d103      	bne.n	80109ae <_raise_r+0x42>
 80109a6:	2316      	movs	r3, #22
 80109a8:	6003      	str	r3, [r0, #0]
 80109aa:	2001      	movs	r0, #1
 80109ac:	e7e7      	b.n	801097e <_raise_r+0x12>
 80109ae:	2400      	movs	r4, #0
 80109b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80109b4:	4628      	mov	r0, r5
 80109b6:	4798      	blx	r3
 80109b8:	2000      	movs	r0, #0
 80109ba:	e7e0      	b.n	801097e <_raise_r+0x12>

080109bc <raise>:
 80109bc:	4b02      	ldr	r3, [pc, #8]	; (80109c8 <raise+0xc>)
 80109be:	4601      	mov	r1, r0
 80109c0:	6818      	ldr	r0, [r3, #0]
 80109c2:	f7ff bfd3 	b.w	801096c <_raise_r>
 80109c6:	bf00      	nop
 80109c8:	20002858 	.word	0x20002858

080109cc <_kill_r>:
 80109cc:	b538      	push	{r3, r4, r5, lr}
 80109ce:	4d07      	ldr	r5, [pc, #28]	; (80109ec <_kill_r+0x20>)
 80109d0:	2300      	movs	r3, #0
 80109d2:	4604      	mov	r4, r0
 80109d4:	4608      	mov	r0, r1
 80109d6:	4611      	mov	r1, r2
 80109d8:	602b      	str	r3, [r5, #0]
 80109da:	f7f1 f8b3 	bl	8001b44 <_kill>
 80109de:	1c43      	adds	r3, r0, #1
 80109e0:	d102      	bne.n	80109e8 <_kill_r+0x1c>
 80109e2:	682b      	ldr	r3, [r5, #0]
 80109e4:	b103      	cbz	r3, 80109e8 <_kill_r+0x1c>
 80109e6:	6023      	str	r3, [r4, #0]
 80109e8:	bd38      	pop	{r3, r4, r5, pc}
 80109ea:	bf00      	nop
 80109ec:	20004c70 	.word	0x20004c70

080109f0 <_getpid_r>:
 80109f0:	f7f1 b8a0 	b.w	8001b34 <_getpid>

080109f4 <_init>:
 80109f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109f6:	bf00      	nop
 80109f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109fa:	bc08      	pop	{r3}
 80109fc:	469e      	mov	lr, r3
 80109fe:	4770      	bx	lr

08010a00 <_fini>:
 8010a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a02:	bf00      	nop
 8010a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a06:	bc08      	pop	{r3}
 8010a08:	469e      	mov	lr, r3
 8010a0a:	4770      	bx	lr
