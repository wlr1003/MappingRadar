
radar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048c8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004aa0  08004aa0  00014aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ab8  08004ab8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004ab8  08004ab8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ab8  08004ab8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ab8  08004ab8  00014ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004abc  08004abc  00014abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  2000000c  08004acc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  08004acc  0002049c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012903  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028da  00000000  00000000  0003293f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  00035220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e98  00000000  00000000  000361c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002134b  00000000  00000000  00037060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001136f  00000000  00000000  000583ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db0c7  00000000  00000000  0006971a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001447e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004174  00000000  00000000  00144834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004a88 	.word	0x08004a88

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004a88 	.word	0x08004a88

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fb9d 	bl	800095a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f80d 	bl	800023e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f996 	bl	8000554 <MX_GPIO_Init>
  MX_DMA_Init();
 8000228:	f000 f96a 	bl	8000500 <MX_DMA_Init>
  MX_ADC1_Init();
 800022c:	f000 f852 	bl	80002d4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000230:	f000 f8c8 	bl	80003c4 <MX_DAC1_Init>
  MX_SAI1_Init();
 8000234:	f000 f900 	bl	8000438 <MX_SAI1_Init>
  MX_USB_PCD_Init();
 8000238:	f000 f93a 	bl	80004b0 <MX_USB_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800023c:	e7fe      	b.n	800023c <main+0x24>

0800023e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023e:	b580      	push	{r7, lr}
 8000240:	b094      	sub	sp, #80	; 0x50
 8000242:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000244:	f107 0318 	add.w	r3, r7, #24
 8000248:	2238      	movs	r2, #56	; 0x38
 800024a:	2100      	movs	r1, #0
 800024c:	4618      	mov	r0, r3
 800024e:	f004 fc13 	bl	8004a78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	2200      	movs	r2, #0
 8000256:	601a      	str	r2, [r3, #0]
 8000258:	605a      	str	r2, [r3, #4]
 800025a:	609a      	str	r2, [r3, #8]
 800025c:	60da      	str	r2, [r3, #12]
 800025e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000260:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000264:	f002 fc3c 	bl	8002ae0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000268:	2301      	movs	r3, #1
 800026a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800026c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000270:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000272:	2302      	movs	r3, #2
 8000274:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000276:	2303      	movs	r3, #3
 8000278:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800027a:	2301      	movs	r3, #1
 800027c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 800027e:	230c      	movs	r3, #12
 8000280:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8000282:	2308      	movs	r3, #8
 8000284:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000286:	2304      	movs	r3, #4
 8000288:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800028a:	2302      	movs	r3, #2
 800028c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028e:	f107 0318 	add.w	r3, r7, #24
 8000292:	4618      	mov	r0, r3
 8000294:	f002 fcc8 	bl	8002c28 <HAL_RCC_OscConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800029e:	f000 f97d 	bl	800059c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a2:	230f      	movs	r3, #15
 80002a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a6:	2303      	movs	r3, #3
 80002a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	2103      	movs	r1, #3
 80002bc:	4618      	mov	r0, r3
 80002be:	f002 ffcb 	bl	8003258 <HAL_RCC_ClockConfig>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80002c8:	f000 f968 	bl	800059c <Error_Handler>
  }
}
 80002cc:	bf00      	nop
 80002ce:	3750      	adds	r7, #80	; 0x50
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b08c      	sub	sp, #48	; 0x30
 80002d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2220      	movs	r2, #32
 80002ea:	2100      	movs	r1, #0
 80002ec:	4618      	mov	r0, r3
 80002ee:	f004 fbc3 	bl	8004a78 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002f2:	4b32      	ldr	r3, [pc, #200]	; (80003bc <MX_ADC1_Init+0xe8>)
 80002f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80002fa:	4b30      	ldr	r3, [pc, #192]	; (80003bc <MX_ADC1_Init+0xe8>)
 80002fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000300:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000302:	4b2e      	ldr	r3, [pc, #184]	; (80003bc <MX_ADC1_Init+0xe8>)
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000308:	4b2c      	ldr	r3, [pc, #176]	; (80003bc <MX_ADC1_Init+0xe8>)
 800030a:	2200      	movs	r2, #0
 800030c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800030e:	4b2b      	ldr	r3, [pc, #172]	; (80003bc <MX_ADC1_Init+0xe8>)
 8000310:	2200      	movs	r2, #0
 8000312:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000314:	4b29      	ldr	r3, [pc, #164]	; (80003bc <MX_ADC1_Init+0xe8>)
 8000316:	2200      	movs	r2, #0
 8000318:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800031a:	4b28      	ldr	r3, [pc, #160]	; (80003bc <MX_ADC1_Init+0xe8>)
 800031c:	2204      	movs	r2, #4
 800031e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000320:	4b26      	ldr	r3, [pc, #152]	; (80003bc <MX_ADC1_Init+0xe8>)
 8000322:	2200      	movs	r2, #0
 8000324:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000326:	4b25      	ldr	r3, [pc, #148]	; (80003bc <MX_ADC1_Init+0xe8>)
 8000328:	2200      	movs	r2, #0
 800032a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800032c:	4b23      	ldr	r3, [pc, #140]	; (80003bc <MX_ADC1_Init+0xe8>)
 800032e:	2201      	movs	r2, #1
 8000330:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000332:	4b22      	ldr	r3, [pc, #136]	; (80003bc <MX_ADC1_Init+0xe8>)
 8000334:	2200      	movs	r2, #0
 8000336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800033a:	4b20      	ldr	r3, [pc, #128]	; (80003bc <MX_ADC1_Init+0xe8>)
 800033c:	2200      	movs	r2, #0
 800033e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000340:	4b1e      	ldr	r3, [pc, #120]	; (80003bc <MX_ADC1_Init+0xe8>)
 8000342:	2200      	movs	r2, #0
 8000344:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000346:	4b1d      	ldr	r3, [pc, #116]	; (80003bc <MX_ADC1_Init+0xe8>)
 8000348:	2200      	movs	r2, #0
 800034a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800034e:	4b1b      	ldr	r3, [pc, #108]	; (80003bc <MX_ADC1_Init+0xe8>)
 8000350:	2200      	movs	r2, #0
 8000352:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000354:	4b19      	ldr	r3, [pc, #100]	; (80003bc <MX_ADC1_Init+0xe8>)
 8000356:	2200      	movs	r2, #0
 8000358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800035c:	4817      	ldr	r0, [pc, #92]	; (80003bc <MX_ADC1_Init+0xe8>)
 800035e:	f000 fd69 	bl	8000e34 <HAL_ADC_Init>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000368:	f000 f918 	bl	800059c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800036c:	2300      	movs	r3, #0
 800036e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000374:	4619      	mov	r1, r3
 8000376:	4811      	ldr	r0, [pc, #68]	; (80003bc <MX_ADC1_Init+0xe8>)
 8000378:	f001 fb84 	bl	8001a84 <HAL_ADCEx_MultiModeConfigChannel>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000382:	f000 f90b 	bl	800059c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000386:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <MX_ADC1_Init+0xec>)
 8000388:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800038a:	2306      	movs	r3, #6
 800038c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800038e:	2300      	movs	r3, #0
 8000390:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000392:	237f      	movs	r3, #127	; 0x7f
 8000394:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000396:	2304      	movs	r3, #4
 8000398:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800039a:	2300      	movs	r3, #0
 800039c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	4619      	mov	r1, r3
 80003a2:	4806      	ldr	r0, [pc, #24]	; (80003bc <MX_ADC1_Init+0xe8>)
 80003a4:	f000 ff08 	bl	80011b8 <HAL_ADC_ConfigChannel>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80003ae:	f000 f8f5 	bl	800059c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	3730      	adds	r7, #48	; 0x30
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	20000028 	.word	0x20000028
 80003c0:	04300002 	.word	0x04300002

080003c4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b08c      	sub	sp, #48	; 0x30
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80003ca:	463b      	mov	r3, r7
 80003cc:	2230      	movs	r2, #48	; 0x30
 80003ce:	2100      	movs	r1, #0
 80003d0:	4618      	mov	r0, r3
 80003d2:	f004 fb51 	bl	8004a78 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80003d6:	4b16      	ldr	r3, [pc, #88]	; (8000430 <MX_DAC1_Init+0x6c>)
 80003d8:	4a16      	ldr	r2, [pc, #88]	; (8000434 <MX_DAC1_Init+0x70>)
 80003da:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80003dc:	4814      	ldr	r0, [pc, #80]	; (8000430 <MX_DAC1_Init+0x6c>)
 80003de:	f001 fd68 	bl	8001eb2 <HAL_DAC_Init>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80003e8:	f000 f8d8 	bl	800059c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80003ec:	2302      	movs	r3, #2
 80003ee:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80003f0:	2300      	movs	r3, #0
 80003f2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80003f4:	2300      	movs	r3, #0
 80003f6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80003f8:	2300      	movs	r3, #0
 80003fa:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80003fc:	2300      	movs	r3, #0
 80003fe:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000400:	2300      	movs	r3, #0
 8000402:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000404:	2300      	movs	r3, #0
 8000406:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000408:	2301      	movs	r3, #1
 800040a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800040c:	2300      	movs	r3, #0
 800040e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000410:	463b      	mov	r3, r7
 8000412:	2200      	movs	r2, #0
 8000414:	4619      	mov	r1, r3
 8000416:	4806      	ldr	r0, [pc, #24]	; (8000430 <MX_DAC1_Init+0x6c>)
 8000418:	f001 fd6e 	bl	8001ef8 <HAL_DAC_ConfigChannel>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000422:	f000 f8bb 	bl	800059c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000426:	bf00      	nop
 8000428:	3730      	adds	r7, #48	; 0x30
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	20000094 	.word	0x20000094
 8000434:	50000800 	.word	0x50000800

08000438 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 800043c:	4b1a      	ldr	r3, [pc, #104]	; (80004a8 <MX_SAI1_Init+0x70>)
 800043e:	4a1b      	ldr	r2, [pc, #108]	; (80004ac <MX_SAI1_Init+0x74>)
 8000440:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 8000442:	4b19      	ldr	r3, [pc, #100]	; (80004a8 <MX_SAI1_Init+0x70>)
 8000444:	2204      	movs	r2, #4
 8000446:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000448:	4b17      	ldr	r3, [pc, #92]	; (80004a8 <MX_SAI1_Init+0x70>)
 800044a:	2200      	movs	r2, #0
 800044c:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800044e:	4b16      	ldr	r3, [pc, #88]	; (80004a8 <MX_SAI1_Init+0x70>)
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000454:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <MX_SAI1_Init+0x70>)
 8000456:	2200      	movs	r2, #0
 8000458:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800045a:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <MX_SAI1_Init+0x70>)
 800045c:	2200      	movs	r2, #0
 800045e:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000460:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <MX_SAI1_Init+0x70>)
 8000462:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000466:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.MckOutput = SAI_MCK_OUTPUT_ENABLE;
 8000468:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <MX_SAI1_Init+0x70>)
 800046a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800046e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000470:	4b0d      	ldr	r3, [pc, #52]	; (80004a8 <MX_SAI1_Init+0x70>)
 8000472:	2200      	movs	r2, #0
 8000474:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000476:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <MX_SAI1_Init+0x70>)
 8000478:	2200      	movs	r2, #0
 800047a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 800047c:	4b0a      	ldr	r3, [pc, #40]	; (80004a8 <MX_SAI1_Init+0x70>)
 800047e:	2200      	movs	r2, #0
 8000480:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 0;
 8000484:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <MX_SAI1_Init+0x70>)
 8000486:	2200      	movs	r2, #0
 8000488:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800048a:	4b07      	ldr	r3, [pc, #28]	; (80004a8 <MX_SAI1_Init+0x70>)
 800048c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000490:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000492:	4805      	ldr	r0, [pc, #20]	; (80004a8 <MX_SAI1_Init+0x70>)
 8000494:	f004 f880 	bl	8004598 <HAL_SAI_Init>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_SAI1_Init+0x6a>
  {
    Error_Handler();
 800049e:	f000 f87d 	bl	800059c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	20000108 	.word	0x20000108
 80004ac:	40015404 	.word	0x40015404

080004b0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80004b4:	4b10      	ldr	r3, [pc, #64]	; (80004f8 <MX_USB_PCD_Init+0x48>)
 80004b6:	4a11      	ldr	r2, [pc, #68]	; (80004fc <MX_USB_PCD_Init+0x4c>)
 80004b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80004ba:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <MX_USB_PCD_Init+0x48>)
 80004bc:	2208      	movs	r2, #8
 80004be:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80004c0:	4b0d      	ldr	r3, [pc, #52]	; (80004f8 <MX_USB_PCD_Init+0x48>)
 80004c2:	2202      	movs	r2, #2
 80004c4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80004c6:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <MX_USB_PCD_Init+0x48>)
 80004c8:	2202      	movs	r2, #2
 80004ca:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80004cc:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <MX_USB_PCD_Init+0x48>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <MX_USB_PCD_Init+0x48>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80004d8:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <MX_USB_PCD_Init+0x48>)
 80004da:	2200      	movs	r2, #0
 80004dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80004de:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <MX_USB_PCD_Init+0x48>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <MX_USB_PCD_Init+0x48>)
 80004e6:	f002 f9eb 	bl	80028c0 <HAL_PCD_Init>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80004f0:	f000 f854 	bl	800059c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	200001a0 	.word	0x200001a0
 80004fc:	40005c00 	.word	0x40005c00

08000500 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000506:	4b12      	ldr	r3, [pc, #72]	; (8000550 <MX_DMA_Init+0x50>)
 8000508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800050a:	4a11      	ldr	r2, [pc, #68]	; (8000550 <MX_DMA_Init+0x50>)
 800050c:	f043 0304 	orr.w	r3, r3, #4
 8000510:	6493      	str	r3, [r2, #72]	; 0x48
 8000512:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <MX_DMA_Init+0x50>)
 8000514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000516:	f003 0304 	and.w	r3, r3, #4
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <MX_DMA_Init+0x50>)
 8000520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000522:	4a0b      	ldr	r2, [pc, #44]	; (8000550 <MX_DMA_Init+0x50>)
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	6493      	str	r3, [r2, #72]	; 0x48
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <MX_DMA_Init+0x50>)
 800052c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	2100      	movs	r1, #0
 800053a:	200b      	movs	r0, #11
 800053c:	f001 fc85 	bl	8001e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000540:	200b      	movs	r0, #11
 8000542:	f001 fc9c 	bl	8001e7e <HAL_NVIC_EnableIRQ>

}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40021000 	.word	0x40021000

08000554 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800055a:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <MX_GPIO_Init+0x44>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	4a0e      	ldr	r2, [pc, #56]	; (8000598 <MX_GPIO_Init+0x44>)
 8000560:	f043 0320 	orr.w	r3, r3, #32
 8000564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000566:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <MX_GPIO_Init+0x44>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056a:	f003 0320 	and.w	r3, r3, #32
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000572:	4b09      	ldr	r3, [pc, #36]	; (8000598 <MX_GPIO_Init+0x44>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000576:	4a08      	ldr	r2, [pc, #32]	; (8000598 <MX_GPIO_Init+0x44>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <MX_GPIO_Init+0x44>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	683b      	ldr	r3, [r7, #0]

}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40021000 	.word	0x40021000

0800059c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a0:	b672      	cpsid	i
}
 80005a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <Error_Handler+0x8>
	...

080005a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ae:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <HAL_MspInit+0x44>)
 80005b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005b2:	4a0e      	ldr	r2, [pc, #56]	; (80005ec <HAL_MspInit+0x44>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6613      	str	r3, [r2, #96]	; 0x60
 80005ba:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <HAL_MspInit+0x44>)
 80005bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_MspInit+0x44>)
 80005c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ca:	4a08      	ldr	r2, [pc, #32]	; (80005ec <HAL_MspInit+0x44>)
 80005cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d0:	6593      	str	r3, [r2, #88]	; 0x58
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <HAL_MspInit+0x44>)
 80005d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	40021000 	.word	0x40021000

080005f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b09e      	sub	sp, #120	; 0x78
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000608:	f107 0310 	add.w	r3, r7, #16
 800060c:	2254      	movs	r2, #84	; 0x54
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f004 fa31 	bl	8004a78 <memset>
  if(hadc->Instance==ADC1)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800061e:	d134      	bne.n	800068a <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000620:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000624:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000626:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800062a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800062c:	f107 0310 	add.w	r3, r7, #16
 8000630:	4618      	mov	r0, r3
 8000632:	f003 f829 	bl	8003688 <HAL_RCCEx_PeriphCLKConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800063c:	f7ff ffae 	bl	800059c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000640:	4b14      	ldr	r3, [pc, #80]	; (8000694 <HAL_ADC_MspInit+0xa4>)
 8000642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000644:	4a13      	ldr	r2, [pc, #76]	; (8000694 <HAL_ADC_MspInit+0xa4>)
 8000646:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800064a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <HAL_ADC_MspInit+0xa4>)
 800064e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000658:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <HAL_ADC_MspInit+0xa4>)
 800065a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065c:	4a0d      	ldr	r2, [pc, #52]	; (8000694 <HAL_ADC_MspInit+0xa4>)
 800065e:	f043 0301 	orr.w	r3, r3, #1
 8000662:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000664:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <HAL_ADC_MspInit+0xa4>)
 8000666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000668:	f003 0301 	and.w	r3, r3, #1
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000670:	230f      	movs	r3, #15
 8000672:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000674:	2303      	movs	r3, #3
 8000676:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000680:	4619      	mov	r1, r3
 8000682:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000686:	f001 ff99 	bl	80025bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800068a:	bf00      	nop
 800068c:	3778      	adds	r7, #120	; 0x78
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000

08000698 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a2b      	ldr	r2, [pc, #172]	; (8000764 <HAL_DAC_MspInit+0xcc>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d14f      	bne.n	800075a <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80006ba:	4b2b      	ldr	r3, [pc, #172]	; (8000768 <HAL_DAC_MspInit+0xd0>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	4a2a      	ldr	r2, [pc, #168]	; (8000768 <HAL_DAC_MspInit+0xd0>)
 80006c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c6:	4b28      	ldr	r3, [pc, #160]	; (8000768 <HAL_DAC_MspInit+0xd0>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006ce:	613b      	str	r3, [r7, #16]
 80006d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	4b25      	ldr	r3, [pc, #148]	; (8000768 <HAL_DAC_MspInit+0xd0>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	4a24      	ldr	r2, [pc, #144]	; (8000768 <HAL_DAC_MspInit+0xd0>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006de:	4b22      	ldr	r3, [pc, #136]	; (8000768 <HAL_DAC_MspInit+0xd0>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006ea:	2310      	movs	r3, #16
 80006ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ee:	2303      	movs	r3, #3
 80006f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4619      	mov	r1, r3
 80006fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000700:	f001 ff5c 	bl	80025bc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8000704:	4b19      	ldr	r3, [pc, #100]	; (800076c <HAL_DAC_MspInit+0xd4>)
 8000706:	4a1a      	ldr	r2, [pc, #104]	; (8000770 <HAL_DAC_MspInit+0xd8>)
 8000708:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <HAL_DAC_MspInit+0xd4>)
 800070c:	2206      	movs	r2, #6
 800070e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000710:	4b16      	ldr	r3, [pc, #88]	; (800076c <HAL_DAC_MspInit+0xd4>)
 8000712:	2210      	movs	r2, #16
 8000714:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <HAL_DAC_MspInit+0xd4>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800071c:	4b13      	ldr	r3, [pc, #76]	; (800076c <HAL_DAC_MspInit+0xd4>)
 800071e:	2280      	movs	r2, #128	; 0x80
 8000720:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <HAL_DAC_MspInit+0xd4>)
 8000724:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000728:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <HAL_DAC_MspInit+0xd4>)
 800072c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000730:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <HAL_DAC_MspInit+0xd4>)
 8000734:	2200      	movs	r2, #0
 8000736:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <HAL_DAC_MspInit+0xd4>)
 800073a:	2200      	movs	r2, #0
 800073c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800073e:	480b      	ldr	r0, [pc, #44]	; (800076c <HAL_DAC_MspInit+0xd4>)
 8000740:	f001 fd82 	bl	8002248 <HAL_DMA_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800074a:	f7ff ff27 	bl	800059c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4a06      	ldr	r2, [pc, #24]	; (800076c <HAL_DAC_MspInit+0xd4>)
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	4a05      	ldr	r2, [pc, #20]	; (800076c <HAL_DAC_MspInit+0xd4>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800075a:	bf00      	nop
 800075c:	3728      	adds	r7, #40	; 0x28
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	50000800 	.word	0x50000800
 8000768:	40021000 	.word	0x40021000
 800076c:	200000a8 	.word	0x200000a8
 8000770:	40020008 	.word	0x40020008

08000774 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b098      	sub	sp, #96	; 0x60
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	2254      	movs	r2, #84	; 0x54
 8000782:	2100      	movs	r1, #0
 8000784:	4618      	mov	r0, r3
 8000786:	f004 f977 	bl	8004a78 <memset>
  if(hpcd->Instance==USB)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a11      	ldr	r2, [pc, #68]	; (80007d4 <HAL_PCD_MspInit+0x60>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d11b      	bne.n	80007cc <HAL_PCD_MspInit+0x58>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000794:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000798:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800079a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800079e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	4618      	mov	r0, r3
 80007a6:	f002 ff6f 	bl	8003688 <HAL_RCCEx_PeriphCLKConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 80007b0:	f7ff fef4 	bl	800059c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <HAL_PCD_MspInit+0x64>)
 80007b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007b8:	4a07      	ldr	r2, [pc, #28]	; (80007d8 <HAL_PCD_MspInit+0x64>)
 80007ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80007be:	6593      	str	r3, [r2, #88]	; 0x58
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <HAL_PCD_MspInit+0x64>)
 80007c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80007cc:	bf00      	nop
 80007ce:	3760      	adds	r7, #96	; 0x60
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40005c00 	.word	0x40005c00
 80007d8:	40021000 	.word	0x40021000

080007dc <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b09e      	sub	sp, #120	; 0x78
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	2254      	movs	r2, #84	; 0x54
 80007ea:	2100      	movs	r1, #0
 80007ec:	4618      	mov	r0, r3
 80007ee:	f004 f943 	bl	8004a78 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a1e      	ldr	r2, [pc, #120]	; (8000870 <HAL_SAI_MspInit+0x94>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d135      	bne.n	8000868 <HAL_SAI_MspInit+0x8c>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80007fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000800:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_SYSCLK;
 8000802:	2300      	movs	r3, #0
 8000804:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000806:	f107 0310 	add.w	r3, r7, #16
 800080a:	4618      	mov	r0, r3
 800080c:	f002 ff3c 	bl	8003688 <HAL_RCCEx_PeriphCLKConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <HAL_SAI_MspInit+0x3e>
    {
      Error_Handler();
 8000816:	f7ff fec1 	bl	800059c <Error_Handler>
    }

    if (SAI1_client == 0)
 800081a:	4b16      	ldr	r3, [pc, #88]	; (8000874 <HAL_SAI_MspInit+0x98>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d10b      	bne.n	800083a <HAL_SAI_MspInit+0x5e>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <HAL_SAI_MspInit+0x9c>)
 8000824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000826:	4a14      	ldr	r2, [pc, #80]	; (8000878 <HAL_SAI_MspInit+0x9c>)
 8000828:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800082c:	6613      	str	r3, [r2, #96]	; 0x60
 800082e:	4b12      	ldr	r3, [pc, #72]	; (8000878 <HAL_SAI_MspInit+0x9c>)
 8000830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000832:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <HAL_SAI_MspInit+0x98>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	3301      	adds	r3, #1
 8000840:	4a0c      	ldr	r2, [pc, #48]	; (8000874 <HAL_SAI_MspInit+0x98>)
 8000842:	6013      	str	r3, [r2, #0]

    /**SAI1_A_Block_A GPIO Configuration
    PA10     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000848:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF14_SAI1;
 8000856:	230e      	movs	r3, #14
 8000858:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800085e:	4619      	mov	r1, r3
 8000860:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000864:	f001 feaa 	bl	80025bc <HAL_GPIO_Init>

    }
}
 8000868:	bf00      	nop
 800086a:	3778      	adds	r7, #120	; 0x78
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40015404 	.word	0x40015404
 8000874:	20000494 	.word	0x20000494
 8000878:	40021000 	.word	0x40021000

0800087c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <NMI_Handler+0x4>

08000882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <HardFault_Handler+0x4>

08000888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <MemManage_Handler+0x4>

0800088e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000892:	e7fe      	b.n	8000892 <BusFault_Handler+0x4>

08000894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <UsageFault_Handler+0x4>

0800089a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c8:	f000 f89a 	bl	8000a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80008d4:	4802      	ldr	r0, [pc, #8]	; (80008e0 <DMA1_Channel1_IRQHandler+0x10>)
 80008d6:	f001 fd5f 	bl	8002398 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200000a8 	.word	0x200000a8

080008e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <SystemInit+0x20>)
 80008ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ee:	4a05      	ldr	r2, [pc, #20]	; (8000904 <SystemInit+0x20>)
 80008f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000908:	480d      	ldr	r0, [pc, #52]	; (8000940 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800090a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800090c:	480d      	ldr	r0, [pc, #52]	; (8000944 <LoopForever+0x6>)
  ldr r1, =_edata
 800090e:	490e      	ldr	r1, [pc, #56]	; (8000948 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000910:	4a0e      	ldr	r2, [pc, #56]	; (800094c <LoopForever+0xe>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000914:	e002      	b.n	800091c <LoopCopyDataInit>

08000916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091a:	3304      	adds	r3, #4

0800091c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800091c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000920:	d3f9      	bcc.n	8000916 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000922:	4a0b      	ldr	r2, [pc, #44]	; (8000950 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000924:	4c0b      	ldr	r4, [pc, #44]	; (8000954 <LoopForever+0x16>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000928:	e001      	b.n	800092e <LoopFillZerobss>

0800092a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800092c:	3204      	adds	r2, #4

0800092e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000930:	d3fb      	bcc.n	800092a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000932:	f7ff ffd7 	bl	80008e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000936:	f004 f87b 	bl	8004a30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800093a:	f7ff fc6d 	bl	8000218 <main>

0800093e <LoopForever>:

LoopForever:
    b LoopForever
 800093e:	e7fe      	b.n	800093e <LoopForever>
  ldr   r0, =_estack
 8000940:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000948:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800094c:	08004ac0 	.word	0x08004ac0
  ldr r2, =_sbss
 8000950:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000954:	2000049c 	.word	0x2000049c

08000958 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000958:	e7fe      	b.n	8000958 <ADC1_2_IRQHandler>

0800095a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000960:	2300      	movs	r3, #0
 8000962:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000964:	2003      	movs	r0, #3
 8000966:	f001 fa65 	bl	8001e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800096a:	200f      	movs	r0, #15
 800096c:	f000 f80e 	bl	800098c <HAL_InitTick>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d002      	beq.n	800097c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000976:	2301      	movs	r3, #1
 8000978:	71fb      	strb	r3, [r7, #7]
 800097a:	e001      	b.n	8000980 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800097c:	f7ff fe14 	bl	80005a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000980:	79fb      	ldrb	r3, [r7, #7]

}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000994:	2300      	movs	r3, #0
 8000996:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000998:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <HAL_InitTick+0x68>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d022      	beq.n	80009e6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <HAL_InitTick+0x6c>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <HAL_InitTick+0x68>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80009b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b4:	4618      	mov	r0, r3
 80009b6:	f001 fa70 	bl	8001e9a <HAL_SYSTICK_Config>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d10f      	bne.n	80009e0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b0f      	cmp	r3, #15
 80009c4:	d809      	bhi.n	80009da <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c6:	2200      	movs	r2, #0
 80009c8:	6879      	ldr	r1, [r7, #4]
 80009ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009ce:	f001 fa3c 	bl	8001e4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009d2:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <HAL_InitTick+0x70>)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6013      	str	r3, [r2, #0]
 80009d8:	e007      	b.n	80009ea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	73fb      	strb	r3, [r7, #15]
 80009de:	e004      	b.n	80009ea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009e0:	2301      	movs	r3, #1
 80009e2:	73fb      	strb	r3, [r7, #15]
 80009e4:	e001      	b.n	80009ea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000008 	.word	0x20000008
 80009f8:	20000000 	.word	0x20000000
 80009fc:	20000004 	.word	0x20000004

08000a00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a04:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <HAL_IncTick+0x1c>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <HAL_IncTick+0x20>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	4a03      	ldr	r2, [pc, #12]	; (8000a1c <HAL_IncTick+0x1c>)
 8000a10:	6013      	str	r3, [r2, #0]
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	20000498 	.word	0x20000498
 8000a20:	20000008 	.word	0x20000008

08000a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return uwTick;
 8000a28:	4b03      	ldr	r3, [pc, #12]	; (8000a38 <HAL_GetTick+0x14>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	20000498 	.word	0x20000498

08000a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a44:	f7ff ffee 	bl	8000a24 <HAL_GetTick>
 8000a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a54:	d004      	beq.n	8000a60 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <HAL_Delay+0x40>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a60:	bf00      	nop
 8000a62:	f7ff ffdf 	bl	8000a24 <HAL_GetTick>
 8000a66:	4602      	mov	r2, r0
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	68fa      	ldr	r2, [r7, #12]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d8f7      	bhi.n	8000a62 <HAL_Delay+0x26>
  {
  }
}
 8000a72:	bf00      	nop
 8000a74:	bf00      	nop
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000008 	.word	0x20000008

08000a80 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	431a      	orrs	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	609a      	str	r2, [r3, #8]
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
 8000aae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	689b      	ldr	r3, [r3, #8]
 8000ab4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	431a      	orrs	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	609a      	str	r2, [r3, #8]
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b087      	sub	sp, #28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
 8000af4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	3360      	adds	r3, #96	; 0x60
 8000afa:	461a      	mov	r2, r3
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	4413      	add	r3, r2
 8000b02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <LL_ADC_SetOffset+0x44>)
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000b12:	683a      	ldr	r2, [r7, #0]
 8000b14:	430a      	orrs	r2, r1
 8000b16:	4313      	orrs	r3, r2
 8000b18:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000b20:	bf00      	nop
 8000b22:	371c      	adds	r7, #28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	03fff000 	.word	0x03fff000

08000b30 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	3360      	adds	r3, #96	; 0x60
 8000b3e:	461a      	mov	r2, r3
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	4413      	add	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b087      	sub	sp, #28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	3360      	adds	r3, #96	; 0x60
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	4413      	add	r3, r2
 8000b74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	431a      	orrs	r2, r3
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000b86:	bf00      	nop
 8000b88:	371c      	adds	r7, #28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b087      	sub	sp, #28
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	60f8      	str	r0, [r7, #12]
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	3360      	adds	r3, #96	; 0x60
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	4413      	add	r3, r2
 8000baa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	431a      	orrs	r2, r3
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000bbc:	bf00      	nop
 8000bbe:	371c      	adds	r7, #28
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b087      	sub	sp, #28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	3360      	adds	r3, #96	; 0x60
 8000bd8:	461a      	mov	r2, r3
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	4413      	add	r3, r2
 8000be0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	431a      	orrs	r2, r3
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000bf2:	bf00      	nop
 8000bf4:	371c      	adds	r7, #28
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	695b      	ldr	r3, [r3, #20]
 8000c0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	431a      	orrs	r2, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	615a      	str	r2, [r3, #20]
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b087      	sub	sp, #28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	3330      	adds	r3, #48	; 0x30
 8000c34:	461a      	mov	r2, r3
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	f003 030c 	and.w	r3, r3, #12
 8000c40:	4413      	add	r3, r2
 8000c42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	f003 031f 	and.w	r3, r3, #31
 8000c4e:	211f      	movs	r1, #31
 8000c50:	fa01 f303 	lsl.w	r3, r1, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	401a      	ands	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	0e9b      	lsrs	r3, r3, #26
 8000c5c:	f003 011f 	and.w	r1, r3, #31
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	f003 031f 	and.w	r3, r3, #31
 8000c66:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6a:	431a      	orrs	r2, r3
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000c70:	bf00      	nop
 8000c72:	371c      	adds	r7, #28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b087      	sub	sp, #28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	3314      	adds	r3, #20
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	0e5b      	lsrs	r3, r3, #25
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	4413      	add	r3, r2
 8000c9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	0d1b      	lsrs	r3, r3, #20
 8000ca4:	f003 031f 	and.w	r3, r3, #31
 8000ca8:	2107      	movs	r1, #7
 8000caa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	0d1b      	lsrs	r3, r3, #20
 8000cb6:	f003 031f 	and.w	r3, r3, #31
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc0:	431a      	orrs	r2, r3
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000cc6:	bf00      	nop
 8000cc8:	371c      	adds	r7, #28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a0f      	ldr	r2, [pc, #60]	; (8000d20 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d10a      	bne.n	8000cfe <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8000cfc:	e00a      	b.n	8000d14 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	401a      	ands	r2, r3
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	407f0000 	.word	0x407f0000

08000d24 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000d34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	6093      	str	r3, [r2, #8]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d5c:	d101      	bne.n	8000d62 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e000      	b.n	8000d64 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000d62:	2300      	movs	r3, #0
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000d80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000dac:	d101      	bne.n	8000db2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000dae:	2301      	movs	r3, #1
 8000db0:	e000      	b.n	8000db4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000db2:	2300      	movs	r3, #0
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d101      	bne.n	8000dd8 <LL_ADC_IsEnabled+0x18>
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e000      	b.n	8000dda <LL_ADC_IsEnabled+0x1a>
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	f003 0304 	and.w	r3, r3, #4
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	d101      	bne.n	8000dfe <LL_ADC_REG_IsConversionOngoing+0x18>
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e000      	b.n	8000e00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000dfe:	2300      	movs	r3, #0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	f003 0308 	and.w	r3, r3, #8
 8000e1c:	2b08      	cmp	r3, #8
 8000e1e:	d101      	bne.n	8000e24 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000e20:	2301      	movs	r3, #1
 8000e22:	e000      	b.n	8000e26 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
	...

08000e34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e34:	b590      	push	{r4, r7, lr}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e1af      	b.n	80011ae <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d109      	bne.n	8000e70 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff fbc7 	bl	80005f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff67 	bl	8000d48 <LL_ADC_IsDeepPowerDownEnabled>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d004      	beq.n	8000e8a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff4d 	bl	8000d24 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff ff82 	bl	8000d98 <LL_ADC_IsInternalRegulatorEnabled>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d115      	bne.n	8000ec6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff ff66 	bl	8000d70 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000ea4:	4b9f      	ldr	r3, [pc, #636]	; (8001124 <HAL_ADC_Init+0x2f0>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	099b      	lsrs	r3, r3, #6
 8000eaa:	4a9f      	ldr	r2, [pc, #636]	; (8001128 <HAL_ADC_Init+0x2f4>)
 8000eac:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb0:	099b      	lsrs	r3, r3, #6
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000eb8:	e002      	b.n	8000ec0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1f9      	bne.n	8000eba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ff64 	bl	8000d98 <LL_ADC_IsInternalRegulatorEnabled>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d10d      	bne.n	8000ef2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eda:	f043 0210 	orr.w	r2, r3, #16
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee6:	f043 0201 	orr.w	r2, r3, #1
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ff75 	bl	8000de6 <LL_ADC_REG_IsConversionOngoing>
 8000efc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f02:	f003 0310 	and.w	r3, r3, #16
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f040 8148 	bne.w	800119c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f040 8144 	bne.w	800119c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f18:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000f1c:	f043 0202 	orr.w	r2, r3, #2
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff49 	bl	8000dc0 <LL_ADC_IsEnabled>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d141      	bne.n	8000fb8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f3c:	d004      	beq.n	8000f48 <HAL_ADC_Init+0x114>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a7a      	ldr	r2, [pc, #488]	; (800112c <HAL_ADC_Init+0x2f8>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d10f      	bne.n	8000f68 <HAL_ADC_Init+0x134>
 8000f48:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000f4c:	f7ff ff38 	bl	8000dc0 <LL_ADC_IsEnabled>
 8000f50:	4604      	mov	r4, r0
 8000f52:	4876      	ldr	r0, [pc, #472]	; (800112c <HAL_ADC_Init+0x2f8>)
 8000f54:	f7ff ff34 	bl	8000dc0 <LL_ADC_IsEnabled>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4323      	orrs	r3, r4
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	bf0c      	ite	eq
 8000f60:	2301      	moveq	r3, #1
 8000f62:	2300      	movne	r3, #0
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	e012      	b.n	8000f8e <HAL_ADC_Init+0x15a>
 8000f68:	4871      	ldr	r0, [pc, #452]	; (8001130 <HAL_ADC_Init+0x2fc>)
 8000f6a:	f7ff ff29 	bl	8000dc0 <LL_ADC_IsEnabled>
 8000f6e:	4604      	mov	r4, r0
 8000f70:	4870      	ldr	r0, [pc, #448]	; (8001134 <HAL_ADC_Init+0x300>)
 8000f72:	f7ff ff25 	bl	8000dc0 <LL_ADC_IsEnabled>
 8000f76:	4603      	mov	r3, r0
 8000f78:	431c      	orrs	r4, r3
 8000f7a:	486f      	ldr	r0, [pc, #444]	; (8001138 <HAL_ADC_Init+0x304>)
 8000f7c:	f7ff ff20 	bl	8000dc0 <LL_ADC_IsEnabled>
 8000f80:	4603      	mov	r3, r0
 8000f82:	4323      	orrs	r3, r4
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	bf0c      	ite	eq
 8000f88:	2301      	moveq	r3, #1
 8000f8a:	2300      	movne	r3, #0
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d012      	beq.n	8000fb8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f9a:	d004      	beq.n	8000fa6 <HAL_ADC_Init+0x172>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a62      	ldr	r2, [pc, #392]	; (800112c <HAL_ADC_Init+0x2f8>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d101      	bne.n	8000faa <HAL_ADC_Init+0x176>
 8000fa6:	4a65      	ldr	r2, [pc, #404]	; (800113c <HAL_ADC_Init+0x308>)
 8000fa8:	e000      	b.n	8000fac <HAL_ADC_Init+0x178>
 8000faa:	4a65      	ldr	r2, [pc, #404]	; (8001140 <HAL_ADC_Init+0x30c>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4610      	mov	r0, r2
 8000fb4:	f7ff fd64 	bl	8000a80 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	7f5b      	ldrb	r3, [r3, #29]
 8000fbc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000fc2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000fc8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000fce:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fd6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d106      	bne.n	8000ff4 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fea:	3b01      	subs	r3, #1
 8000fec:	045b      	lsls	r3, r3, #17
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d009      	beq.n	8001010 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001000:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001008:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	68da      	ldr	r2, [r3, #12]
 8001016:	4b4b      	ldr	r3, [pc, #300]	; (8001144 <HAL_ADC_Init+0x310>)
 8001018:	4013      	ands	r3, r2
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	6812      	ldr	r2, [r2, #0]
 800101e:	69b9      	ldr	r1, [r7, #24]
 8001020:	430b      	orrs	r3, r1
 8001022:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	430a      	orrs	r2, r1
 8001038:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fed1 	bl	8000de6 <LL_ADC_REG_IsConversionOngoing>
 8001044:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fede 	bl	8000e0c <LL_ADC_INJ_IsConversionOngoing>
 8001050:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d17f      	bne.n	8001158 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d17c      	bne.n	8001158 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001062:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800106a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800107a:	f023 0302 	bic.w	r3, r3, #2
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	6812      	ldr	r2, [r2, #0]
 8001082:	69b9      	ldr	r1, [r7, #24]
 8001084:	430b      	orrs	r3, r1
 8001086:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d017      	beq.n	80010c0 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	691a      	ldr	r2, [r3, #16]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800109e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80010a8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80010ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	6911      	ldr	r1, [r2, #16]
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	6812      	ldr	r2, [r2, #0]
 80010b8:	430b      	orrs	r3, r1
 80010ba:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80010be:	e013      	b.n	80010e8 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	691a      	ldr	r2, [r3, #16]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80010ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	6812      	ldr	r2, [r2, #0]
 80010dc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80010e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010e4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d12a      	bne.n	8001148 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	691b      	ldr	r3, [r3, #16]
 80010f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80010fc:	f023 0304 	bic.w	r3, r3, #4
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001108:	4311      	orrs	r1, r2
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800110e:	4311      	orrs	r1, r2
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001114:	430a      	orrs	r2, r1
 8001116:	431a      	orrs	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f042 0201 	orr.w	r2, r2, #1
 8001120:	611a      	str	r2, [r3, #16]
 8001122:	e019      	b.n	8001158 <HAL_ADC_Init+0x324>
 8001124:	20000000 	.word	0x20000000
 8001128:	053e2d63 	.word	0x053e2d63
 800112c:	50000100 	.word	0x50000100
 8001130:	50000400 	.word	0x50000400
 8001134:	50000500 	.word	0x50000500
 8001138:	50000600 	.word	0x50000600
 800113c:	50000300 	.word	0x50000300
 8001140:	50000700 	.word	0x50000700
 8001144:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	691a      	ldr	r2, [r3, #16]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 0201 	bic.w	r2, r2, #1
 8001156:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d10c      	bne.n	800117a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f023 010f 	bic.w	r1, r3, #15
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a1b      	ldr	r3, [r3, #32]
 800116e:	1e5a      	subs	r2, r3, #1
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	430a      	orrs	r2, r1
 8001176:	631a      	str	r2, [r3, #48]	; 0x30
 8001178:	e007      	b.n	800118a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 020f 	bic.w	r2, r2, #15
 8001188:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800118e:	f023 0303 	bic.w	r3, r3, #3
 8001192:	f043 0201 	orr.w	r2, r3, #1
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	65da      	str	r2, [r3, #92]	; 0x5c
 800119a:	e007      	b.n	80011ac <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a0:	f043 0210 	orr.w	r2, r3, #16
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80011ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3724      	adds	r7, #36	; 0x24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd90      	pop	{r4, r7, pc}
 80011b6:	bf00      	nop

080011b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b0b6      	sub	sp, #216	; 0xd8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011c2:	2300      	movs	r3, #0
 80011c4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d102      	bne.n	80011dc <HAL_ADC_ConfigChannel+0x24>
 80011d6:	2302      	movs	r3, #2
 80011d8:	f000 bc13 	b.w	8001a02 <HAL_ADC_ConfigChannel+0x84a>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fdfc 	bl	8000de6 <LL_ADC_REG_IsConversionOngoing>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f040 83f3 	bne.w	80019dc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6818      	ldr	r0, [r3, #0]
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	6859      	ldr	r1, [r3, #4]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	f7ff fd0e 	bl	8000c24 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fdea 	bl	8000de6 <LL_ADC_REG_IsConversionOngoing>
 8001212:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fdf6 	bl	8000e0c <LL_ADC_INJ_IsConversionOngoing>
 8001220:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001224:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001228:	2b00      	cmp	r3, #0
 800122a:	f040 81d9 	bne.w	80015e0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800122e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001232:	2b00      	cmp	r3, #0
 8001234:	f040 81d4 	bne.w	80015e0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001240:	d10f      	bne.n	8001262 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6818      	ldr	r0, [r3, #0]
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2200      	movs	r2, #0
 800124c:	4619      	mov	r1, r3
 800124e:	f7ff fd15 	bl	8000c7c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fccf 	bl	8000bfe <LL_ADC_SetSamplingTimeCommonConfig>
 8001260:	e00e      	b.n	8001280 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6818      	ldr	r0, [r3, #0]
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	6819      	ldr	r1, [r3, #0]
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	461a      	mov	r2, r3
 8001270:	f7ff fd04 	bl	8000c7c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fcbf 	bl	8000bfe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	695a      	ldr	r2, [r3, #20]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	08db      	lsrs	r3, r3, #3
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	2b04      	cmp	r3, #4
 80012a0:	d022      	beq.n	80012e8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6818      	ldr	r0, [r3, #0]
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	6919      	ldr	r1, [r3, #16]
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80012b2:	f7ff fc19 	bl	8000ae8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6818      	ldr	r0, [r3, #0]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	6919      	ldr	r1, [r3, #16]
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	461a      	mov	r2, r3
 80012c4:	f7ff fc65 	bl	8000b92 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6818      	ldr	r0, [r3, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	6919      	ldr	r1, [r3, #16]
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	7f1b      	ldrb	r3, [r3, #28]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d102      	bne.n	80012de <HAL_ADC_ConfigChannel+0x126>
 80012d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012dc:	e000      	b.n	80012e0 <HAL_ADC_ConfigChannel+0x128>
 80012de:	2300      	movs	r3, #0
 80012e0:	461a      	mov	r2, r3
 80012e2:	f7ff fc71 	bl	8000bc8 <LL_ADC_SetOffsetSaturation>
 80012e6:	e17b      	b.n	80015e0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fc1e 	bl	8000b30 <LL_ADC_GetOffsetChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10a      	bne.n	8001314 <HAL_ADC_ConfigChannel+0x15c>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fc13 	bl	8000b30 <LL_ADC_GetOffsetChannel>
 800130a:	4603      	mov	r3, r0
 800130c:	0e9b      	lsrs	r3, r3, #26
 800130e:	f003 021f 	and.w	r2, r3, #31
 8001312:	e01e      	b.n	8001352 <HAL_ADC_ConfigChannel+0x19a>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fc08 	bl	8000b30 <LL_ADC_GetOffsetChannel>
 8001320:	4603      	mov	r3, r0
 8001322:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001326:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800132a:	fa93 f3a3 	rbit	r3, r3
 800132e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001332:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001336:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800133a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001342:	2320      	movs	r3, #32
 8001344:	e004      	b.n	8001350 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001346:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800134a:	fab3 f383 	clz	r3, r3
 800134e:	b2db      	uxtb	r3, r3
 8001350:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800135a:	2b00      	cmp	r3, #0
 800135c:	d105      	bne.n	800136a <HAL_ADC_ConfigChannel+0x1b2>
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	0e9b      	lsrs	r3, r3, #26
 8001364:	f003 031f 	and.w	r3, r3, #31
 8001368:	e018      	b.n	800139c <HAL_ADC_ConfigChannel+0x1e4>
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001372:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001376:	fa93 f3a3 	rbit	r3, r3
 800137a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800137e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001382:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001386:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800138e:	2320      	movs	r3, #32
 8001390:	e004      	b.n	800139c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001392:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001396:	fab3 f383 	clz	r3, r3
 800139a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800139c:	429a      	cmp	r2, r3
 800139e:	d106      	bne.n	80013ae <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2200      	movs	r2, #0
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fbd7 	bl	8000b5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2101      	movs	r1, #1
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fbbb 	bl	8000b30 <LL_ADC_GetOffsetChannel>
 80013ba:	4603      	mov	r3, r0
 80013bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d10a      	bne.n	80013da <HAL_ADC_ConfigChannel+0x222>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2101      	movs	r1, #1
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fbb0 	bl	8000b30 <LL_ADC_GetOffsetChannel>
 80013d0:	4603      	mov	r3, r0
 80013d2:	0e9b      	lsrs	r3, r3, #26
 80013d4:	f003 021f 	and.w	r2, r3, #31
 80013d8:	e01e      	b.n	8001418 <HAL_ADC_ConfigChannel+0x260>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2101      	movs	r1, #1
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fba5 	bl	8000b30 <LL_ADC_GetOffsetChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80013f0:	fa93 f3a3 	rbit	r3, r3
 80013f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80013f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80013fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001400:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001408:	2320      	movs	r3, #32
 800140a:	e004      	b.n	8001416 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800140c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001410:	fab3 f383 	clz	r3, r3
 8001414:	b2db      	uxtb	r3, r3
 8001416:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001420:	2b00      	cmp	r3, #0
 8001422:	d105      	bne.n	8001430 <HAL_ADC_ConfigChannel+0x278>
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	0e9b      	lsrs	r3, r3, #26
 800142a:	f003 031f 	and.w	r3, r3, #31
 800142e:	e018      	b.n	8001462 <HAL_ADC_ConfigChannel+0x2aa>
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001438:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800143c:	fa93 f3a3 	rbit	r3, r3
 8001440:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001444:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001448:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800144c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001450:	2b00      	cmp	r3, #0
 8001452:	d101      	bne.n	8001458 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001454:	2320      	movs	r3, #32
 8001456:	e004      	b.n	8001462 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001458:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800145c:	fab3 f383 	clz	r3, r3
 8001460:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001462:	429a      	cmp	r2, r3
 8001464:	d106      	bne.n	8001474 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2200      	movs	r2, #0
 800146c:	2101      	movs	r1, #1
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fb74 	bl	8000b5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2102      	movs	r1, #2
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff fb58 	bl	8000b30 <LL_ADC_GetOffsetChannel>
 8001480:	4603      	mov	r3, r0
 8001482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001486:	2b00      	cmp	r3, #0
 8001488:	d10a      	bne.n	80014a0 <HAL_ADC_ConfigChannel+0x2e8>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2102      	movs	r1, #2
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fb4d 	bl	8000b30 <LL_ADC_GetOffsetChannel>
 8001496:	4603      	mov	r3, r0
 8001498:	0e9b      	lsrs	r3, r3, #26
 800149a:	f003 021f 	and.w	r2, r3, #31
 800149e:	e01e      	b.n	80014de <HAL_ADC_ConfigChannel+0x326>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2102      	movs	r1, #2
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fb42 	bl	8000b30 <LL_ADC_GetOffsetChannel>
 80014ac:	4603      	mov	r3, r0
 80014ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80014b6:	fa93 f3a3 	rbit	r3, r3
 80014ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80014be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80014c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80014c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80014ce:	2320      	movs	r3, #32
 80014d0:	e004      	b.n	80014dc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80014d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014d6:	fab3 f383 	clz	r3, r3
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d105      	bne.n	80014f6 <HAL_ADC_ConfigChannel+0x33e>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	0e9b      	lsrs	r3, r3, #26
 80014f0:	f003 031f 	and.w	r3, r3, #31
 80014f4:	e016      	b.n	8001524 <HAL_ADC_ConfigChannel+0x36c>
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001502:	fa93 f3a3 	rbit	r3, r3
 8001506:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001508:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800150a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800150e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001516:	2320      	movs	r3, #32
 8001518:	e004      	b.n	8001524 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800151a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800151e:	fab3 f383 	clz	r3, r3
 8001522:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001524:	429a      	cmp	r2, r3
 8001526:	d106      	bne.n	8001536 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2200      	movs	r2, #0
 800152e:	2102      	movs	r1, #2
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fb13 	bl	8000b5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2103      	movs	r1, #3
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff faf7 	bl	8000b30 <LL_ADC_GetOffsetChannel>
 8001542:	4603      	mov	r3, r0
 8001544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001548:	2b00      	cmp	r3, #0
 800154a:	d10a      	bne.n	8001562 <HAL_ADC_ConfigChannel+0x3aa>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2103      	movs	r1, #3
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff faec 	bl	8000b30 <LL_ADC_GetOffsetChannel>
 8001558:	4603      	mov	r3, r0
 800155a:	0e9b      	lsrs	r3, r3, #26
 800155c:	f003 021f 	and.w	r2, r3, #31
 8001560:	e017      	b.n	8001592 <HAL_ADC_ConfigChannel+0x3da>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2103      	movs	r1, #3
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fae1 	bl	8000b30 <LL_ADC_GetOffsetChannel>
 800156e:	4603      	mov	r3, r0
 8001570:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001572:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001574:	fa93 f3a3 	rbit	r3, r3
 8001578:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800157a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800157c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800157e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001584:	2320      	movs	r3, #32
 8001586:	e003      	b.n	8001590 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001588:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800158a:	fab3 f383 	clz	r3, r3
 800158e:	b2db      	uxtb	r3, r3
 8001590:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800159a:	2b00      	cmp	r3, #0
 800159c:	d105      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x3f2>
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	0e9b      	lsrs	r3, r3, #26
 80015a4:	f003 031f 	and.w	r3, r3, #31
 80015a8:	e011      	b.n	80015ce <HAL_ADC_ConfigChannel+0x416>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015b2:	fa93 f3a3 	rbit	r3, r3
 80015b6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80015b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80015ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80015bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80015c2:	2320      	movs	r3, #32
 80015c4:	e003      	b.n	80015ce <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80015c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015c8:	fab3 f383 	clz	r3, r3
 80015cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d106      	bne.n	80015e0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2200      	movs	r2, #0
 80015d8:	2103      	movs	r1, #3
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fabe 	bl	8000b5c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fbeb 	bl	8000dc0 <LL_ADC_IsEnabled>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f040 813d 	bne.w	800186c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6818      	ldr	r0, [r3, #0]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	6819      	ldr	r1, [r3, #0]
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	461a      	mov	r2, r3
 8001600:	f7ff fb68 	bl	8000cd4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	4aa2      	ldr	r2, [pc, #648]	; (8001894 <HAL_ADC_ConfigChannel+0x6dc>)
 800160a:	4293      	cmp	r3, r2
 800160c:	f040 812e 	bne.w	800186c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800161c:	2b00      	cmp	r3, #0
 800161e:	d10b      	bne.n	8001638 <HAL_ADC_ConfigChannel+0x480>
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	0e9b      	lsrs	r3, r3, #26
 8001626:	3301      	adds	r3, #1
 8001628:	f003 031f 	and.w	r3, r3, #31
 800162c:	2b09      	cmp	r3, #9
 800162e:	bf94      	ite	ls
 8001630:	2301      	movls	r3, #1
 8001632:	2300      	movhi	r3, #0
 8001634:	b2db      	uxtb	r3, r3
 8001636:	e019      	b.n	800166c <HAL_ADC_ConfigChannel+0x4b4>
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001640:	fa93 f3a3 	rbit	r3, r3
 8001644:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001646:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001648:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800164a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001650:	2320      	movs	r3, #32
 8001652:	e003      	b.n	800165c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001654:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001656:	fab3 f383 	clz	r3, r3
 800165a:	b2db      	uxtb	r3, r3
 800165c:	3301      	adds	r3, #1
 800165e:	f003 031f 	and.w	r3, r3, #31
 8001662:	2b09      	cmp	r3, #9
 8001664:	bf94      	ite	ls
 8001666:	2301      	movls	r3, #1
 8001668:	2300      	movhi	r3, #0
 800166a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800166c:	2b00      	cmp	r3, #0
 800166e:	d079      	beq.n	8001764 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001678:	2b00      	cmp	r3, #0
 800167a:	d107      	bne.n	800168c <HAL_ADC_ConfigChannel+0x4d4>
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	0e9b      	lsrs	r3, r3, #26
 8001682:	3301      	adds	r3, #1
 8001684:	069b      	lsls	r3, r3, #26
 8001686:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800168a:	e015      	b.n	80016b8 <HAL_ADC_ConfigChannel+0x500>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001694:	fa93 f3a3 	rbit	r3, r3
 8001698:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800169a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800169c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800169e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d101      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80016a4:	2320      	movs	r3, #32
 80016a6:	e003      	b.n	80016b0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80016a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016aa:	fab3 f383 	clz	r3, r3
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	3301      	adds	r3, #1
 80016b2:	069b      	lsls	r3, r3, #26
 80016b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d109      	bne.n	80016d8 <HAL_ADC_ConfigChannel+0x520>
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	0e9b      	lsrs	r3, r3, #26
 80016ca:	3301      	adds	r3, #1
 80016cc:	f003 031f 	and.w	r3, r3, #31
 80016d0:	2101      	movs	r1, #1
 80016d2:	fa01 f303 	lsl.w	r3, r1, r3
 80016d6:	e017      	b.n	8001708 <HAL_ADC_ConfigChannel+0x550>
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016e0:	fa93 f3a3 	rbit	r3, r3
 80016e4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80016e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016e8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80016ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d101      	bne.n	80016f4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80016f0:	2320      	movs	r3, #32
 80016f2:	e003      	b.n	80016fc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80016f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016f6:	fab3 f383 	clz	r3, r3
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	3301      	adds	r3, #1
 80016fe:	f003 031f 	and.w	r3, r3, #31
 8001702:	2101      	movs	r1, #1
 8001704:	fa01 f303 	lsl.w	r3, r1, r3
 8001708:	ea42 0103 	orr.w	r1, r2, r3
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001714:	2b00      	cmp	r3, #0
 8001716:	d10a      	bne.n	800172e <HAL_ADC_ConfigChannel+0x576>
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	0e9b      	lsrs	r3, r3, #26
 800171e:	3301      	adds	r3, #1
 8001720:	f003 021f 	and.w	r2, r3, #31
 8001724:	4613      	mov	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	4413      	add	r3, r2
 800172a:	051b      	lsls	r3, r3, #20
 800172c:	e018      	b.n	8001760 <HAL_ADC_ConfigChannel+0x5a8>
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001736:	fa93 f3a3 	rbit	r3, r3
 800173a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800173c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800173e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001746:	2320      	movs	r3, #32
 8001748:	e003      	b.n	8001752 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800174a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800174c:	fab3 f383 	clz	r3, r3
 8001750:	b2db      	uxtb	r3, r3
 8001752:	3301      	adds	r3, #1
 8001754:	f003 021f 	and.w	r2, r3, #31
 8001758:	4613      	mov	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4413      	add	r3, r2
 800175e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001760:	430b      	orrs	r3, r1
 8001762:	e07e      	b.n	8001862 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800176c:	2b00      	cmp	r3, #0
 800176e:	d107      	bne.n	8001780 <HAL_ADC_ConfigChannel+0x5c8>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	0e9b      	lsrs	r3, r3, #26
 8001776:	3301      	adds	r3, #1
 8001778:	069b      	lsls	r3, r3, #26
 800177a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800177e:	e015      	b.n	80017ac <HAL_ADC_ConfigChannel+0x5f4>
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001788:	fa93 f3a3 	rbit	r3, r3
 800178c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800178e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001790:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001798:	2320      	movs	r3, #32
 800179a:	e003      	b.n	80017a4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800179c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800179e:	fab3 f383 	clz	r3, r3
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	3301      	adds	r3, #1
 80017a6:	069b      	lsls	r3, r3, #26
 80017a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d109      	bne.n	80017cc <HAL_ADC_ConfigChannel+0x614>
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	0e9b      	lsrs	r3, r3, #26
 80017be:	3301      	adds	r3, #1
 80017c0:	f003 031f 	and.w	r3, r3, #31
 80017c4:	2101      	movs	r1, #1
 80017c6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ca:	e017      	b.n	80017fc <HAL_ADC_ConfigChannel+0x644>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d2:	6a3b      	ldr	r3, [r7, #32]
 80017d4:	fa93 f3a3 	rbit	r3, r3
 80017d8:	61fb      	str	r3, [r7, #28]
  return result;
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80017e4:	2320      	movs	r3, #32
 80017e6:	e003      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	fab3 f383 	clz	r3, r3
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	3301      	adds	r3, #1
 80017f2:	f003 031f 	and.w	r3, r3, #31
 80017f6:	2101      	movs	r1, #1
 80017f8:	fa01 f303 	lsl.w	r3, r1, r3
 80017fc:	ea42 0103 	orr.w	r1, r2, r3
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10d      	bne.n	8001828 <HAL_ADC_ConfigChannel+0x670>
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	0e9b      	lsrs	r3, r3, #26
 8001812:	3301      	adds	r3, #1
 8001814:	f003 021f 	and.w	r2, r3, #31
 8001818:	4613      	mov	r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	4413      	add	r3, r2
 800181e:	3b1e      	subs	r3, #30
 8001820:	051b      	lsls	r3, r3, #20
 8001822:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001826:	e01b      	b.n	8001860 <HAL_ADC_ConfigChannel+0x6a8>
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	fa93 f3a3 	rbit	r3, r3
 8001834:	613b      	str	r3, [r7, #16]
  return result;
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001840:	2320      	movs	r3, #32
 8001842:	e003      	b.n	800184c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	fab3 f383 	clz	r3, r3
 800184a:	b2db      	uxtb	r3, r3
 800184c:	3301      	adds	r3, #1
 800184e:	f003 021f 	and.w	r2, r3, #31
 8001852:	4613      	mov	r3, r2
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	4413      	add	r3, r2
 8001858:	3b1e      	subs	r3, #30
 800185a:	051b      	lsls	r3, r3, #20
 800185c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001860:	430b      	orrs	r3, r1
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	6892      	ldr	r2, [r2, #8]
 8001866:	4619      	mov	r1, r3
 8001868:	f7ff fa08 	bl	8000c7c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <HAL_ADC_ConfigChannel+0x6e0>)
 8001872:	4013      	ands	r3, r2
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 80be 	beq.w	80019f6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001882:	d004      	beq.n	800188e <HAL_ADC_ConfigChannel+0x6d6>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a04      	ldr	r2, [pc, #16]	; (800189c <HAL_ADC_ConfigChannel+0x6e4>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d10a      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x6ec>
 800188e:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <HAL_ADC_ConfigChannel+0x6e8>)
 8001890:	e009      	b.n	80018a6 <HAL_ADC_ConfigChannel+0x6ee>
 8001892:	bf00      	nop
 8001894:	407f0000 	.word	0x407f0000
 8001898:	80080000 	.word	0x80080000
 800189c:	50000100 	.word	0x50000100
 80018a0:	50000300 	.word	0x50000300
 80018a4:	4b59      	ldr	r3, [pc, #356]	; (8001a0c <HAL_ADC_ConfigChannel+0x854>)
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff f910 	bl	8000acc <LL_ADC_GetCommonPathInternalCh>
 80018ac:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a56      	ldr	r2, [pc, #344]	; (8001a10 <HAL_ADC_ConfigChannel+0x858>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d004      	beq.n	80018c4 <HAL_ADC_ConfigChannel+0x70c>
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a55      	ldr	r2, [pc, #340]	; (8001a14 <HAL_ADC_ConfigChannel+0x85c>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d13a      	bne.n	800193a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80018c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80018c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d134      	bne.n	800193a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018d8:	d005      	beq.n	80018e6 <HAL_ADC_ConfigChannel+0x72e>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a4e      	ldr	r2, [pc, #312]	; (8001a18 <HAL_ADC_ConfigChannel+0x860>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	f040 8085 	bne.w	80019f0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018ee:	d004      	beq.n	80018fa <HAL_ADC_ConfigChannel+0x742>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a49      	ldr	r2, [pc, #292]	; (8001a1c <HAL_ADC_ConfigChannel+0x864>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d101      	bne.n	80018fe <HAL_ADC_ConfigChannel+0x746>
 80018fa:	4a49      	ldr	r2, [pc, #292]	; (8001a20 <HAL_ADC_ConfigChannel+0x868>)
 80018fc:	e000      	b.n	8001900 <HAL_ADC_ConfigChannel+0x748>
 80018fe:	4a43      	ldr	r2, [pc, #268]	; (8001a0c <HAL_ADC_ConfigChannel+0x854>)
 8001900:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001904:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001908:	4619      	mov	r1, r3
 800190a:	4610      	mov	r0, r2
 800190c:	f7ff f8cb 	bl	8000aa6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001910:	4b44      	ldr	r3, [pc, #272]	; (8001a24 <HAL_ADC_ConfigChannel+0x86c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	099b      	lsrs	r3, r3, #6
 8001916:	4a44      	ldr	r2, [pc, #272]	; (8001a28 <HAL_ADC_ConfigChannel+0x870>)
 8001918:	fba2 2303 	umull	r2, r3, r2, r3
 800191c:	099b      	lsrs	r3, r3, #6
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	4613      	mov	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	4413      	add	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800192a:	e002      	b.n	8001932 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	3b01      	subs	r3, #1
 8001930:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1f9      	bne.n	800192c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001938:	e05a      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a3b      	ldr	r2, [pc, #236]	; (8001a2c <HAL_ADC_ConfigChannel+0x874>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d125      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x7d8>
 8001944:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001948:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d11f      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a31      	ldr	r2, [pc, #196]	; (8001a1c <HAL_ADC_ConfigChannel+0x864>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d104      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x7ac>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a34      	ldr	r2, [pc, #208]	; (8001a30 <HAL_ADC_ConfigChannel+0x878>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d047      	beq.n	80019f4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800196c:	d004      	beq.n	8001978 <HAL_ADC_ConfigChannel+0x7c0>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a2a      	ldr	r2, [pc, #168]	; (8001a1c <HAL_ADC_ConfigChannel+0x864>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d101      	bne.n	800197c <HAL_ADC_ConfigChannel+0x7c4>
 8001978:	4a29      	ldr	r2, [pc, #164]	; (8001a20 <HAL_ADC_ConfigChannel+0x868>)
 800197a:	e000      	b.n	800197e <HAL_ADC_ConfigChannel+0x7c6>
 800197c:	4a23      	ldr	r2, [pc, #140]	; (8001a0c <HAL_ADC_ConfigChannel+0x854>)
 800197e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001986:	4619      	mov	r1, r3
 8001988:	4610      	mov	r0, r2
 800198a:	f7ff f88c 	bl	8000aa6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800198e:	e031      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a27      	ldr	r2, [pc, #156]	; (8001a34 <HAL_ADC_ConfigChannel+0x87c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d12d      	bne.n	80019f6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800199a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800199e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d127      	bne.n	80019f6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a1c      	ldr	r2, [pc, #112]	; (8001a1c <HAL_ADC_ConfigChannel+0x864>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d022      	beq.n	80019f6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019b8:	d004      	beq.n	80019c4 <HAL_ADC_ConfigChannel+0x80c>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a17      	ldr	r2, [pc, #92]	; (8001a1c <HAL_ADC_ConfigChannel+0x864>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d101      	bne.n	80019c8 <HAL_ADC_ConfigChannel+0x810>
 80019c4:	4a16      	ldr	r2, [pc, #88]	; (8001a20 <HAL_ADC_ConfigChannel+0x868>)
 80019c6:	e000      	b.n	80019ca <HAL_ADC_ConfigChannel+0x812>
 80019c8:	4a10      	ldr	r2, [pc, #64]	; (8001a0c <HAL_ADC_ConfigChannel+0x854>)
 80019ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80019ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019d2:	4619      	mov	r1, r3
 80019d4:	4610      	mov	r0, r2
 80019d6:	f7ff f866 	bl	8000aa6 <LL_ADC_SetCommonPathInternalCh>
 80019da:	e00c      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e0:	f043 0220 	orr.w	r2, r3, #32
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80019ee:	e002      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80019f0:	bf00      	nop
 80019f2:	e000      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80019f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80019fe:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	37d8      	adds	r7, #216	; 0xd8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	50000700 	.word	0x50000700
 8001a10:	c3210000 	.word	0xc3210000
 8001a14:	90c00010 	.word	0x90c00010
 8001a18:	50000600 	.word	0x50000600
 8001a1c:	50000100 	.word	0x50000100
 8001a20:	50000300 	.word	0x50000300
 8001a24:	20000000 	.word	0x20000000
 8001a28:	053e2d63 	.word	0x053e2d63
 8001a2c:	c7520000 	.word	0xc7520000
 8001a30:	50000500 	.word	0x50000500
 8001a34:	cb840000 	.word	0xcb840000

08001a38 <LL_ADC_IsEnabled>:
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d101      	bne.n	8001a50 <LL_ADC_IsEnabled+0x18>
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e000      	b.n	8001a52 <LL_ADC_IsEnabled+0x1a>
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <LL_ADC_REG_IsConversionOngoing>:
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 0304 	and.w	r3, r3, #4
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	d101      	bne.n	8001a76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001a84:	b590      	push	{r4, r7, lr}
 8001a86:	b0a1      	sub	sp, #132	; 0x84
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d101      	bne.n	8001aa2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	e0e7      	b.n	8001c72 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001aaa:	2300      	movs	r3, #0
 8001aac:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001aae:	2300      	movs	r3, #0
 8001ab0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001aba:	d102      	bne.n	8001ac2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001abc:	4b6f      	ldr	r3, [pc, #444]	; (8001c7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	e009      	b.n	8001ad6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a6e      	ldr	r2, [pc, #440]	; (8001c80 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d102      	bne.n	8001ad2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8001acc:	4b6d      	ldr	r3, [pc, #436]	; (8001c84 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	e001      	b.n	8001ad6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d10b      	bne.n	8001af4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae0:	f043 0220 	orr.w	r2, r3, #32
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0be      	b.n	8001c72 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff ffb1 	bl	8001a5e <LL_ADC_REG_IsConversionOngoing>
 8001afc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff ffab 	bl	8001a5e <LL_ADC_REG_IsConversionOngoing>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f040 80a0 	bne.w	8001c50 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001b10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f040 809c 	bne.w	8001c50 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b20:	d004      	beq.n	8001b2c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a55      	ldr	r2, [pc, #340]	; (8001c7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d101      	bne.n	8001b30 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001b2c:	4b56      	ldr	r3, [pc, #344]	; (8001c88 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8001b2e:	e000      	b.n	8001b32 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001b30:	4b56      	ldr	r3, [pc, #344]	; (8001c8c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8001b32:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d04b      	beq.n	8001bd4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001b3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	6859      	ldr	r1, [r3, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b4e:	035b      	lsls	r3, r3, #13
 8001b50:	430b      	orrs	r3, r1
 8001b52:	431a      	orrs	r2, r3
 8001b54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b56:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b60:	d004      	beq.n	8001b6c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a45      	ldr	r2, [pc, #276]	; (8001c7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d10f      	bne.n	8001b8c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8001b6c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001b70:	f7ff ff62 	bl	8001a38 <LL_ADC_IsEnabled>
 8001b74:	4604      	mov	r4, r0
 8001b76:	4841      	ldr	r0, [pc, #260]	; (8001c7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001b78:	f7ff ff5e 	bl	8001a38 <LL_ADC_IsEnabled>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	4323      	orrs	r3, r4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	bf0c      	ite	eq
 8001b84:	2301      	moveq	r3, #1
 8001b86:	2300      	movne	r3, #0
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	e012      	b.n	8001bb2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8001b8c:	483c      	ldr	r0, [pc, #240]	; (8001c80 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8001b8e:	f7ff ff53 	bl	8001a38 <LL_ADC_IsEnabled>
 8001b92:	4604      	mov	r4, r0
 8001b94:	483b      	ldr	r0, [pc, #236]	; (8001c84 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8001b96:	f7ff ff4f 	bl	8001a38 <LL_ADC_IsEnabled>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	431c      	orrs	r4, r3
 8001b9e:	483c      	ldr	r0, [pc, #240]	; (8001c90 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8001ba0:	f7ff ff4a 	bl	8001a38 <LL_ADC_IsEnabled>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	4323      	orrs	r3, r4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	bf0c      	ite	eq
 8001bac:	2301      	moveq	r3, #1
 8001bae:	2300      	movne	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d056      	beq.n	8001c64 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001bb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001bbe:	f023 030f 	bic.w	r3, r3, #15
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	6811      	ldr	r1, [r2, #0]
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	6892      	ldr	r2, [r2, #8]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bd0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001bd2:	e047      	b.n	8001c64 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001bd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bde:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001be8:	d004      	beq.n	8001bf4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a23      	ldr	r2, [pc, #140]	; (8001c7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d10f      	bne.n	8001c14 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8001bf4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001bf8:	f7ff ff1e 	bl	8001a38 <LL_ADC_IsEnabled>
 8001bfc:	4604      	mov	r4, r0
 8001bfe:	481f      	ldr	r0, [pc, #124]	; (8001c7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8001c00:	f7ff ff1a 	bl	8001a38 <LL_ADC_IsEnabled>
 8001c04:	4603      	mov	r3, r0
 8001c06:	4323      	orrs	r3, r4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bf0c      	ite	eq
 8001c0c:	2301      	moveq	r3, #1
 8001c0e:	2300      	movne	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	e012      	b.n	8001c3a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8001c14:	481a      	ldr	r0, [pc, #104]	; (8001c80 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8001c16:	f7ff ff0f 	bl	8001a38 <LL_ADC_IsEnabled>
 8001c1a:	4604      	mov	r4, r0
 8001c1c:	4819      	ldr	r0, [pc, #100]	; (8001c84 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8001c1e:	f7ff ff0b 	bl	8001a38 <LL_ADC_IsEnabled>
 8001c22:	4603      	mov	r3, r0
 8001c24:	431c      	orrs	r4, r3
 8001c26:	481a      	ldr	r0, [pc, #104]	; (8001c90 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8001c28:	f7ff ff06 	bl	8001a38 <LL_ADC_IsEnabled>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4323      	orrs	r3, r4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	bf0c      	ite	eq
 8001c34:	2301      	moveq	r3, #1
 8001c36:	2300      	movne	r3, #0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d012      	beq.n	8001c64 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001c3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001c46:	f023 030f 	bic.w	r3, r3, #15
 8001c4a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001c4c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c4e:	e009      	b.n	8001c64 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c54:	f043 0220 	orr.w	r2, r3, #32
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001c62:	e000      	b.n	8001c66 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c64:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001c6e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3784      	adds	r7, #132	; 0x84
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd90      	pop	{r4, r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	50000100 	.word	0x50000100
 8001c80:	50000400 	.word	0x50000400
 8001c84:	50000500 	.word	0x50000500
 8001c88:	50000300 	.word	0x50000300
 8001c8c:	50000700 	.word	0x50000700
 8001c90:	50000600 	.word	0x50000600

08001c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cc6:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	60d3      	str	r3, [r2, #12]
}
 8001ccc:	bf00      	nop
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	0a1b      	lsrs	r3, r3, #8
 8001ce6:	f003 0307 	and.w	r3, r3, #7
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	db0b      	blt.n	8001d22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	f003 021f 	and.w	r2, r3, #31
 8001d10:	4907      	ldr	r1, [pc, #28]	; (8001d30 <__NVIC_EnableIRQ+0x38>)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	095b      	lsrs	r3, r3, #5
 8001d18:	2001      	movs	r0, #1
 8001d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000e100 	.word	0xe000e100

08001d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	db0a      	blt.n	8001d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	490c      	ldr	r1, [pc, #48]	; (8001d80 <__NVIC_SetPriority+0x4c>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	0112      	lsls	r2, r2, #4
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	440b      	add	r3, r1
 8001d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d5c:	e00a      	b.n	8001d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4908      	ldr	r1, [pc, #32]	; (8001d84 <__NVIC_SetPriority+0x50>)
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	3b04      	subs	r3, #4
 8001d6c:	0112      	lsls	r2, r2, #4
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	440b      	add	r3, r1
 8001d72:	761a      	strb	r2, [r3, #24]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000e100 	.word	0xe000e100
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b089      	sub	sp, #36	; 0x24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f1c3 0307 	rsb	r3, r3, #7
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	bf28      	it	cs
 8001da6:	2304      	movcs	r3, #4
 8001da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3304      	adds	r3, #4
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d902      	bls.n	8001db8 <NVIC_EncodePriority+0x30>
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3b03      	subs	r3, #3
 8001db6:	e000      	b.n	8001dba <NVIC_EncodePriority+0x32>
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	401a      	ands	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dda:	43d9      	mvns	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	4313      	orrs	r3, r2
         );
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3724      	adds	r7, #36	; 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e00:	d301      	bcc.n	8001e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e02:	2301      	movs	r3, #1
 8001e04:	e00f      	b.n	8001e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <SysTick_Config+0x40>)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e0e:	210f      	movs	r1, #15
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e14:	f7ff ff8e 	bl	8001d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <SysTick_Config+0x40>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1e:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <SysTick_Config+0x40>)
 8001e20:	2207      	movs	r2, #7
 8001e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	e000e010 	.word	0xe000e010

08001e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff ff29 	bl	8001c94 <__NVIC_SetPriorityGrouping>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e58:	f7ff ff40 	bl	8001cdc <__NVIC_GetPriorityGrouping>
 8001e5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	68b9      	ldr	r1, [r7, #8]
 8001e62:	6978      	ldr	r0, [r7, #20]
 8001e64:	f7ff ff90 	bl	8001d88 <NVIC_EncodePriority>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e6e:	4611      	mov	r1, r2
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ff5f 	bl	8001d34 <__NVIC_SetPriority>
}
 8001e76:	bf00      	nop
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	4603      	mov	r3, r0
 8001e86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff33 	bl	8001cf8 <__NVIC_EnableIRQ>
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff ffa4 	bl	8001df0 <SysTick_Config>
 8001ea8:	4603      	mov	r3, r0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e014      	b.n	8001eee <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	791b      	ldrb	r3, [r3, #4]
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d105      	bne.n	8001eda <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7fe fbdf 	bl	8000698 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2202      	movs	r2, #2
 8001ede:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08a      	sub	sp, #40	; 0x28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	795b      	ldrb	r3, [r3, #5]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_DAC_ConfigChannel+0x18>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e192      	b.n	8002236 <HAL_DAC_ConfigChannel+0x33e>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2201      	movs	r2, #1
 8001f14:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2202      	movs	r2, #2
 8001f1a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d174      	bne.n	800200e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001f24:	f7fe fd7e 	bl	8000a24 <HAL_GetTick>
 8001f28:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d134      	bne.n	8001f9a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001f30:	e011      	b.n	8001f56 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001f32:	f7fe fd77 	bl	8000a24 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d90a      	bls.n	8001f56 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	f043 0208 	orr.w	r2, r3, #8
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2203      	movs	r2, #3
 8001f50:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e16f      	b.n	8002236 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1e6      	bne.n	8001f32 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8001f64:	2001      	movs	r0, #1
 8001f66:	f7fe fd69 	bl	8000a3c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f72:	641a      	str	r2, [r3, #64]	; 0x40
 8001f74:	e01e      	b.n	8001fb4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001f76:	f7fe fd55 	bl	8000a24 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d90a      	bls.n	8001f9a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	f043 0208 	orr.w	r2, r3, #8
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2203      	movs	r2, #3
 8001f94:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e14d      	b.n	8002236 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	dbe8      	blt.n	8001f76 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	f7fe fd49 	bl	8000a3c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fb2:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f003 0310 	and.w	r3, r3, #16
 8001fc0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	ea02 0103 	and.w	r1, r2, r3
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f003 0310 	and.w	r3, r3, #16
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f003 0310 	and.w	r3, r3, #16
 8001fee:	21ff      	movs	r1, #255	; 0xff
 8001ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	ea02 0103 	and.w	r1, r2, r3
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f003 0310 	and.w	r3, r3, #16
 8002004:	409a      	lsls	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d11d      	bne.n	8002052 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f003 0310 	and.w	r3, r3, #16
 8002024:	221f      	movs	r2, #31
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800202e:	4013      	ands	r3, r2
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002046:	4313      	orrs	r3, r2
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002050:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f003 0310 	and.w	r3, r3, #16
 8002060:	2207      	movs	r2, #7
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43db      	mvns	r3, r3
 8002068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800206a:	4013      	ands	r3, r2
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d102      	bne.n	800207c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8002076:	2300      	movs	r3, #0
 8002078:	623b      	str	r3, [r7, #32]
 800207a:	e00f      	b.n	800209c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	2b02      	cmp	r3, #2
 8002082:	d102      	bne.n	800208a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002084:	2301      	movs	r3, #1
 8002086:	623b      	str	r3, [r7, #32]
 8002088:	e008      	b.n	800209c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d102      	bne.n	8002098 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002092:	2301      	movs	r3, #1
 8002094:	623b      	str	r3, [r7, #32]
 8002096:	e001      	b.n	800209c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002098:	2300      	movs	r3, #0
 800209a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	6a3a      	ldr	r2, [r7, #32]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f003 0310 	and.w	r3, r3, #16
 80020b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020be:	4013      	ands	r3, r2
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	791b      	ldrb	r3, [r3, #4]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d102      	bne.n	80020d0 <HAL_DAC_ConfigChannel+0x1d8>
 80020ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ce:	e000      	b.n	80020d2 <HAL_DAC_ConfigChannel+0x1da>
 80020d0:	2300      	movs	r3, #0
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f003 0310 	and.w	r3, r3, #16
 80020de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43db      	mvns	r3, r3
 80020e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ea:	4013      	ands	r3, r2
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	795b      	ldrb	r3, [r3, #5]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d102      	bne.n	80020fc <HAL_DAC_ConfigChannel+0x204>
 80020f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020fa:	e000      	b.n	80020fe <HAL_DAC_ConfigChannel+0x206>
 80020fc:	2300      	movs	r3, #0
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b02      	cmp	r3, #2
 8002112:	d114      	bne.n	800213e <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002114:	f001 fa3c 	bl	8003590 <HAL_RCC_GetHCLKFreq>
 8002118:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	4a48      	ldr	r2, [pc, #288]	; (8002240 <HAL_DAC_ConfigChannel+0x348>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d904      	bls.n	800212c <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
 800212a:	e00f      	b.n	800214c <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	4a45      	ldr	r2, [pc, #276]	; (8002244 <HAL_DAC_ConfigChannel+0x34c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d90a      	bls.n	800214a <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
 800213c:	e006      	b.n	800214c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002144:	4313      	orrs	r3, r2
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
 8002148:	e000      	b.n	800214c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800214a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800215a:	4313      	orrs	r3, r2
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002164:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6819      	ldr	r1, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f003 0310 	and.w	r3, r3, #16
 8002172:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43da      	mvns	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	400a      	ands	r2, r1
 8002182:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f003 0310 	and.w	r3, r3, #16
 8002192:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800219e:	4013      	ands	r3, r2
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b6:	4313      	orrs	r3, r2
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6819      	ldr	r1, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	22c0      	movs	r2, #192	; 0xc0
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43da      	mvns	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	400a      	ands	r2, r1
 80021dc:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	089b      	lsrs	r3, r3, #2
 80021e4:	f003 030f 	and.w	r3, r3, #15
 80021e8:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	089b      	lsrs	r3, r3, #2
 80021f0:	021b      	lsls	r3, r3, #8
 80021f2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f003 0310 	and.w	r3, r3, #16
 8002208:	f640 710f 	movw	r1, #3855	; 0xf0f
 800220c:	fa01 f303 	lsl.w	r3, r1, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	ea02 0103 	and.w	r1, r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f003 0310 	and.w	r3, r3, #16
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	409a      	lsls	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2201      	movs	r2, #1
 800222c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3728      	adds	r7, #40	; 0x28
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	09896800 	.word	0x09896800
 8002244:	04c4b400 	.word	0x04c4b400

08002248 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e08d      	b.n	8002376 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	4b47      	ldr	r3, [pc, #284]	; (8002380 <HAL_DMA_Init+0x138>)
 8002262:	429a      	cmp	r2, r3
 8002264:	d80f      	bhi.n	8002286 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	4b45      	ldr	r3, [pc, #276]	; (8002384 <HAL_DMA_Init+0x13c>)
 800226e:	4413      	add	r3, r2
 8002270:	4a45      	ldr	r2, [pc, #276]	; (8002388 <HAL_DMA_Init+0x140>)
 8002272:	fba2 2303 	umull	r2, r3, r2, r3
 8002276:	091b      	lsrs	r3, r3, #4
 8002278:	009a      	lsls	r2, r3, #2
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a42      	ldr	r2, [pc, #264]	; (800238c <HAL_DMA_Init+0x144>)
 8002282:	641a      	str	r2, [r3, #64]	; 0x40
 8002284:	e00e      	b.n	80022a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	4b40      	ldr	r3, [pc, #256]	; (8002390 <HAL_DMA_Init+0x148>)
 800228e:	4413      	add	r3, r2
 8002290:	4a3d      	ldr	r2, [pc, #244]	; (8002388 <HAL_DMA_Init+0x140>)
 8002292:	fba2 2303 	umull	r2, r3, r2, r3
 8002296:	091b      	lsrs	r3, r3, #4
 8002298:	009a      	lsls	r2, r3, #2
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a3c      	ldr	r2, [pc, #240]	; (8002394 <HAL_DMA_Init+0x14c>)
 80022a2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2202      	movs	r2, #2
 80022a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80022ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80022c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f8fe 	bl	80024f8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002304:	d102      	bne.n	800230c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002320:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d010      	beq.n	800234c <HAL_DMA_Init+0x104>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b04      	cmp	r3, #4
 8002330:	d80c      	bhi.n	800234c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f91e 	bl	8002574 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	e008      	b.n	800235e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40020407 	.word	0x40020407
 8002384:	bffdfff8 	.word	0xbffdfff8
 8002388:	cccccccd 	.word	0xcccccccd
 800238c:	40020000 	.word	0x40020000
 8002390:	bffdfbf8 	.word	0xbffdfbf8
 8002394:	40020400 	.word	0x40020400

08002398 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b4:	f003 031f 	and.w	r3, r3, #31
 80023b8:	2204      	movs	r2, #4
 80023ba:	409a      	lsls	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4013      	ands	r3, r2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d026      	beq.n	8002412 <HAL_DMA_IRQHandler+0x7a>
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d021      	beq.n	8002412 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0320 	and.w	r3, r3, #32
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d107      	bne.n	80023ec <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 0204 	bic.w	r2, r2, #4
 80023ea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f0:	f003 021f 	and.w	r2, r3, #31
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	2104      	movs	r1, #4
 80023fa:	fa01 f202 	lsl.w	r2, r1, r2
 80023fe:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	2b00      	cmp	r3, #0
 8002406:	d071      	beq.n	80024ec <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002410:	e06c      	b.n	80024ec <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	f003 031f 	and.w	r3, r3, #31
 800241a:	2202      	movs	r2, #2
 800241c:	409a      	lsls	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	4013      	ands	r3, r2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d02e      	beq.n	8002484 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d029      	beq.n	8002484 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0320 	and.w	r3, r3, #32
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10b      	bne.n	8002456 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 020a 	bic.w	r2, r2, #10
 800244c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245a:	f003 021f 	and.w	r2, r3, #31
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	2102      	movs	r1, #2
 8002464:	fa01 f202 	lsl.w	r2, r1, r2
 8002468:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002476:	2b00      	cmp	r3, #0
 8002478:	d038      	beq.n	80024ec <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002482:	e033      	b.n	80024ec <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002488:	f003 031f 	and.w	r3, r3, #31
 800248c:	2208      	movs	r2, #8
 800248e:	409a      	lsls	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4013      	ands	r3, r2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d02a      	beq.n	80024ee <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d025      	beq.n	80024ee <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 020e 	bic.w	r2, r2, #14
 80024b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	f003 021f 	and.w	r2, r3, #31
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	2101      	movs	r1, #1
 80024c0:	fa01 f202 	lsl.w	r2, r1, r2
 80024c4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d004      	beq.n	80024ee <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80024ec:	bf00      	nop
 80024ee:	bf00      	nop
}
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b087      	sub	sp, #28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	461a      	mov	r2, r3
 8002506:	4b16      	ldr	r3, [pc, #88]	; (8002560 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002508:	429a      	cmp	r2, r3
 800250a:	d802      	bhi.n	8002512 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800250c:	4b15      	ldr	r3, [pc, #84]	; (8002564 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	e001      	b.n	8002516 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002512:	4b15      	ldr	r3, [pc, #84]	; (8002568 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002514:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	3b08      	subs	r3, #8
 8002522:	4a12      	ldr	r2, [pc, #72]	; (800256c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002524:	fba2 2303 	umull	r2, r3, r2, r3
 8002528:	091b      	lsrs	r3, r3, #4
 800252a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002530:	089b      	lsrs	r3, r3, #2
 8002532:	009a      	lsls	r2, r3, #2
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4413      	add	r3, r2
 8002538:	461a      	mov	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a0b      	ldr	r2, [pc, #44]	; (8002570 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002542:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f003 031f 	and.w	r3, r3, #31
 800254a:	2201      	movs	r2, #1
 800254c:	409a      	lsls	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002552:	bf00      	nop
 8002554:	371c      	adds	r7, #28
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	40020407 	.word	0x40020407
 8002564:	40020800 	.word	0x40020800
 8002568:	40020820 	.word	0x40020820
 800256c:	cccccccd 	.word	0xcccccccd
 8002570:	40020880 	.word	0x40020880

08002574 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002588:	4413      	add	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	461a      	mov	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a08      	ldr	r2, [pc, #32]	; (80025b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002596:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	3b01      	subs	r3, #1
 800259c:	f003 031f 	and.w	r3, r3, #31
 80025a0:	2201      	movs	r2, #1
 80025a2:	409a      	lsls	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80025a8:	bf00      	nop
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	1000823f 	.word	0x1000823f
 80025b8:	40020940 	.word	0x40020940

080025bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025bc:	b480      	push	{r7}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80025ca:	e15a      	b.n	8002882 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	2101      	movs	r1, #1
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	fa01 f303 	lsl.w	r3, r1, r3
 80025d8:	4013      	ands	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 814c 	beq.w	800287c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d005      	beq.n	80025fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d130      	bne.n	800265e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	2203      	movs	r2, #3
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	4013      	ands	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4313      	orrs	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002632:	2201      	movs	r2, #1
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	4013      	ands	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	091b      	lsrs	r3, r3, #4
 8002648:	f003 0201 	and.w	r2, r3, #1
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	2b03      	cmp	r3, #3
 8002668:	d017      	beq.n	800269a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	2203      	movs	r2, #3
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43db      	mvns	r3, r3
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	4013      	ands	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d123      	bne.n	80026ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	08da      	lsrs	r2, r3, #3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3208      	adds	r2, #8
 80026ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	220f      	movs	r2, #15
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43db      	mvns	r3, r3
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4013      	ands	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	691a      	ldr	r2, [r3, #16]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	08da      	lsrs	r2, r3, #3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3208      	adds	r2, #8
 80026e8:	6939      	ldr	r1, [r7, #16]
 80026ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	2203      	movs	r2, #3
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	4013      	ands	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 0203 	and.w	r2, r3, #3
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 80a6 	beq.w	800287c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002730:	4b5b      	ldr	r3, [pc, #364]	; (80028a0 <HAL_GPIO_Init+0x2e4>)
 8002732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002734:	4a5a      	ldr	r2, [pc, #360]	; (80028a0 <HAL_GPIO_Init+0x2e4>)
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	6613      	str	r3, [r2, #96]	; 0x60
 800273c:	4b58      	ldr	r3, [pc, #352]	; (80028a0 <HAL_GPIO_Init+0x2e4>)
 800273e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002748:	4a56      	ldr	r2, [pc, #344]	; (80028a4 <HAL_GPIO_Init+0x2e8>)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	089b      	lsrs	r3, r3, #2
 800274e:	3302      	adds	r3, #2
 8002750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002754:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	220f      	movs	r2, #15
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4013      	ands	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002772:	d01f      	beq.n	80027b4 <HAL_GPIO_Init+0x1f8>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a4c      	ldr	r2, [pc, #304]	; (80028a8 <HAL_GPIO_Init+0x2ec>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d019      	beq.n	80027b0 <HAL_GPIO_Init+0x1f4>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a4b      	ldr	r2, [pc, #300]	; (80028ac <HAL_GPIO_Init+0x2f0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d013      	beq.n	80027ac <HAL_GPIO_Init+0x1f0>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a4a      	ldr	r2, [pc, #296]	; (80028b0 <HAL_GPIO_Init+0x2f4>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d00d      	beq.n	80027a8 <HAL_GPIO_Init+0x1ec>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a49      	ldr	r2, [pc, #292]	; (80028b4 <HAL_GPIO_Init+0x2f8>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d007      	beq.n	80027a4 <HAL_GPIO_Init+0x1e8>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a48      	ldr	r2, [pc, #288]	; (80028b8 <HAL_GPIO_Init+0x2fc>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d101      	bne.n	80027a0 <HAL_GPIO_Init+0x1e4>
 800279c:	2305      	movs	r3, #5
 800279e:	e00a      	b.n	80027b6 <HAL_GPIO_Init+0x1fa>
 80027a0:	2306      	movs	r3, #6
 80027a2:	e008      	b.n	80027b6 <HAL_GPIO_Init+0x1fa>
 80027a4:	2304      	movs	r3, #4
 80027a6:	e006      	b.n	80027b6 <HAL_GPIO_Init+0x1fa>
 80027a8:	2303      	movs	r3, #3
 80027aa:	e004      	b.n	80027b6 <HAL_GPIO_Init+0x1fa>
 80027ac:	2302      	movs	r3, #2
 80027ae:	e002      	b.n	80027b6 <HAL_GPIO_Init+0x1fa>
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <HAL_GPIO_Init+0x1fa>
 80027b4:	2300      	movs	r3, #0
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	f002 0203 	and.w	r2, r2, #3
 80027bc:	0092      	lsls	r2, r2, #2
 80027be:	4093      	lsls	r3, r2
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027c6:	4937      	ldr	r1, [pc, #220]	; (80028a4 <HAL_GPIO_Init+0x2e8>)
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	089b      	lsrs	r3, r3, #2
 80027cc:	3302      	adds	r3, #2
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027d4:	4b39      	ldr	r3, [pc, #228]	; (80028bc <HAL_GPIO_Init+0x300>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	43db      	mvns	r3, r3
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	4013      	ands	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027f8:	4a30      	ldr	r2, [pc, #192]	; (80028bc <HAL_GPIO_Init+0x300>)
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027fe:	4b2f      	ldr	r3, [pc, #188]	; (80028bc <HAL_GPIO_Init+0x300>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	43db      	mvns	r3, r3
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	4013      	ands	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4313      	orrs	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002822:	4a26      	ldr	r2, [pc, #152]	; (80028bc <HAL_GPIO_Init+0x300>)
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002828:	4b24      	ldr	r3, [pc, #144]	; (80028bc <HAL_GPIO_Init+0x300>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	43db      	mvns	r3, r3
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4013      	ands	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	4313      	orrs	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800284c:	4a1b      	ldr	r2, [pc, #108]	; (80028bc <HAL_GPIO_Init+0x300>)
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002852:	4b1a      	ldr	r3, [pc, #104]	; (80028bc <HAL_GPIO_Init+0x300>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	43db      	mvns	r3, r3
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	4013      	ands	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4313      	orrs	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002876:	4a11      	ldr	r2, [pc, #68]	; (80028bc <HAL_GPIO_Init+0x300>)
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	3301      	adds	r3, #1
 8002880:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	fa22 f303 	lsr.w	r3, r2, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	f47f ae9d 	bne.w	80025cc <HAL_GPIO_Init+0x10>
  }
}
 8002892:	bf00      	nop
 8002894:	bf00      	nop
 8002896:	371c      	adds	r7, #28
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	40021000 	.word	0x40021000
 80028a4:	40010000 	.word	0x40010000
 80028a8:	48000400 	.word	0x48000400
 80028ac:	48000800 	.word	0x48000800
 80028b0:	48000c00 	.word	0x48000c00
 80028b4:	48001000 	.word	0x48001000
 80028b8:	48001400 	.word	0x48001400
 80028bc:	40010400 	.word	0x40010400

080028c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028c2:	b08b      	sub	sp, #44	; 0x2c
 80028c4:	af06      	add	r7, sp, #24
 80028c6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e0d7      	b.n	8002a82 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fd ff44 	bl	8000774 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2203      	movs	r2, #3
 80028f0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f002 f85d 	bl	80049b8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028fe:	2300      	movs	r3, #0
 8002900:	73fb      	strb	r3, [r7, #15]
 8002902:	e04c      	b.n	800299e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	4613      	mov	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	440b      	add	r3, r1
 8002914:	3301      	adds	r3, #1
 8002916:	2201      	movs	r2, #1
 8002918:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800291a:	7bfb      	ldrb	r3, [r7, #15]
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	1c5a      	adds	r2, r3, #1
 8002920:	4613      	mov	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	440b      	add	r3, r1
 800292a:	7bfa      	ldrb	r2, [r7, #15]
 800292c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800292e:	7bfa      	ldrb	r2, [r7, #15]
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	b298      	uxth	r0, r3
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	440b      	add	r3, r1
 8002940:	3336      	adds	r3, #54	; 0x36
 8002942:	4602      	mov	r2, r0
 8002944:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002946:	7bfb      	ldrb	r3, [r7, #15]
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	4613      	mov	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	440b      	add	r3, r1
 8002956:	3303      	adds	r3, #3
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800295c:	7bfa      	ldrb	r2, [r7, #15]
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	440b      	add	r3, r1
 800296a:	3338      	adds	r3, #56	; 0x38
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002970:	7bfa      	ldrb	r2, [r7, #15]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	440b      	add	r3, r1
 800297e:	333c      	adds	r3, #60	; 0x3c
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002984:	7bfa      	ldrb	r2, [r7, #15]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	4613      	mov	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	440b      	add	r3, r1
 8002992:	3340      	adds	r3, #64	; 0x40
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002998:	7bfb      	ldrb	r3, [r7, #15]
 800299a:	3301      	adds	r3, #1
 800299c:	73fb      	strb	r3, [r7, #15]
 800299e:	7bfa      	ldrb	r2, [r7, #15]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d3ad      	bcc.n	8002904 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029a8:	2300      	movs	r3, #0
 80029aa:	73fb      	strb	r3, [r7, #15]
 80029ac:	e044      	b.n	8002a38 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029ae:	7bfa      	ldrb	r2, [r7, #15]
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	440b      	add	r3, r1
 80029bc:	f203 1369 	addw	r3, r3, #361	; 0x169
 80029c0:	2200      	movs	r2, #0
 80029c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029c4:	7bfa      	ldrb	r2, [r7, #15]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	440b      	add	r3, r1
 80029d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029d6:	7bfa      	ldrb	r2, [r7, #15]
 80029d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029da:	7bfa      	ldrb	r2, [r7, #15]
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	440b      	add	r3, r1
 80029e8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80029ec:	2200      	movs	r2, #0
 80029ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029f0:	7bfa      	ldrb	r2, [r7, #15]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	440b      	add	r3, r1
 80029fe:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a06:	7bfa      	ldrb	r2, [r7, #15]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	440b      	add	r3, r1
 8002a14:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a1c:	7bfa      	ldrb	r2, [r7, #15]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	440b      	add	r3, r1
 8002a2a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
 8002a34:	3301      	adds	r3, #1
 8002a36:	73fb      	strb	r3, [r7, #15]
 8002a38:	7bfa      	ldrb	r2, [r7, #15]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d3b5      	bcc.n	80029ae <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	603b      	str	r3, [r7, #0]
 8002a48:	687e      	ldr	r6, [r7, #4]
 8002a4a:	466d      	mov	r5, sp
 8002a4c:	f106 0410 	add.w	r4, r6, #16
 8002a50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a54:	6823      	ldr	r3, [r4, #0]
 8002a56:	602b      	str	r3, [r5, #0]
 8002a58:	1d33      	adds	r3, r6, #4
 8002a5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a5c:	6838      	ldr	r0, [r7, #0]
 8002a5e:	f001 ffc6 	bl	80049ee <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d102      	bne.n	8002a80 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f805 	bl	8002a8a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a8a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b085      	sub	sp, #20
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	f043 0302 	orr.w	r3, r3, #2
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
	...

08002ae0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d141      	bne.n	8002b72 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002aee:	4b4b      	ldr	r3, [pc, #300]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002afa:	d131      	bne.n	8002b60 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002afc:	4b47      	ldr	r3, [pc, #284]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b02:	4a46      	ldr	r2, [pc, #280]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b0c:	4b43      	ldr	r3, [pc, #268]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b14:	4a41      	ldr	r2, [pc, #260]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b1c:	4b40      	ldr	r3, [pc, #256]	; (8002c20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2232      	movs	r2, #50	; 0x32
 8002b22:	fb02 f303 	mul.w	r3, r2, r3
 8002b26:	4a3f      	ldr	r2, [pc, #252]	; (8002c24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b28:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2c:	0c9b      	lsrs	r3, r3, #18
 8002b2e:	3301      	adds	r3, #1
 8002b30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b32:	e002      	b.n	8002b3a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b3a:	4b38      	ldr	r3, [pc, #224]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b46:	d102      	bne.n	8002b4e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f2      	bne.n	8002b34 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b4e:	4b33      	ldr	r3, [pc, #204]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b5a:	d158      	bne.n	8002c0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e057      	b.n	8002c10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b60:	4b2e      	ldr	r3, [pc, #184]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b66:	4a2d      	ldr	r2, [pc, #180]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b70:	e04d      	b.n	8002c0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b78:	d141      	bne.n	8002bfe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b7a:	4b28      	ldr	r3, [pc, #160]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b86:	d131      	bne.n	8002bec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b88:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b8e:	4a23      	ldr	r2, [pc, #140]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b98:	4b20      	ldr	r3, [pc, #128]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ba0:	4a1e      	ldr	r2, [pc, #120]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ba2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ba6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ba8:	4b1d      	ldr	r3, [pc, #116]	; (8002c20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2232      	movs	r2, #50	; 0x32
 8002bae:	fb02 f303 	mul.w	r3, r2, r3
 8002bb2:	4a1c      	ldr	r2, [pc, #112]	; (8002c24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb8:	0c9b      	lsrs	r3, r3, #18
 8002bba:	3301      	adds	r3, #1
 8002bbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bbe:	e002      	b.n	8002bc6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bc6:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bd2:	d102      	bne.n	8002bda <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f2      	bne.n	8002bc0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bda:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be6:	d112      	bne.n	8002c0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e011      	b.n	8002c10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bf2:	4a0a      	ldr	r2, [pc, #40]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002bfc:	e007      	b.n	8002c0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bfe:	4b07      	ldr	r3, [pc, #28]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c06:	4a05      	ldr	r2, [pc, #20]	; (8002c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c0c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	40007000 	.word	0x40007000
 8002c20:	20000000 	.word	0x20000000
 8002c24:	431bde83 	.word	0x431bde83

08002c28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e306      	b.n	8003248 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d075      	beq.n	8002d32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c46:	4b97      	ldr	r3, [pc, #604]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
 8002c4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c50:	4b94      	ldr	r3, [pc, #592]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f003 0303 	and.w	r3, r3, #3
 8002c58:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	2b0c      	cmp	r3, #12
 8002c5e:	d102      	bne.n	8002c66 <HAL_RCC_OscConfig+0x3e>
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	2b03      	cmp	r3, #3
 8002c64:	d002      	beq.n	8002c6c <HAL_RCC_OscConfig+0x44>
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d10b      	bne.n	8002c84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c6c:	4b8d      	ldr	r3, [pc, #564]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d05b      	beq.n	8002d30 <HAL_RCC_OscConfig+0x108>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d157      	bne.n	8002d30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e2e1      	b.n	8003248 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c8c:	d106      	bne.n	8002c9c <HAL_RCC_OscConfig+0x74>
 8002c8e:	4b85      	ldr	r3, [pc, #532]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a84      	ldr	r2, [pc, #528]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	e01d      	b.n	8002cd8 <HAL_RCC_OscConfig+0xb0>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ca4:	d10c      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x98>
 8002ca6:	4b7f      	ldr	r3, [pc, #508]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a7e      	ldr	r2, [pc, #504]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	4b7c      	ldr	r3, [pc, #496]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a7b      	ldr	r2, [pc, #492]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	e00b      	b.n	8002cd8 <HAL_RCC_OscConfig+0xb0>
 8002cc0:	4b78      	ldr	r3, [pc, #480]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a77      	ldr	r2, [pc, #476]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cca:	6013      	str	r3, [r2, #0]
 8002ccc:	4b75      	ldr	r3, [pc, #468]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a74      	ldr	r2, [pc, #464]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d013      	beq.n	8002d08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce0:	f7fd fea0 	bl	8000a24 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce8:	f7fd fe9c 	bl	8000a24 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b64      	cmp	r3, #100	; 0x64
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e2a6      	b.n	8003248 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cfa:	4b6a      	ldr	r3, [pc, #424]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0f0      	beq.n	8002ce8 <HAL_RCC_OscConfig+0xc0>
 8002d06:	e014      	b.n	8002d32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d08:	f7fd fe8c 	bl	8000a24 <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d10:	f7fd fe88 	bl	8000a24 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b64      	cmp	r3, #100	; 0x64
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e292      	b.n	8003248 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d22:	4b60      	ldr	r3, [pc, #384]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f0      	bne.n	8002d10 <HAL_RCC_OscConfig+0xe8>
 8002d2e:	e000      	b.n	8002d32 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d075      	beq.n	8002e2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d3e:	4b59      	ldr	r3, [pc, #356]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 030c 	and.w	r3, r3, #12
 8002d46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d48:	4b56      	ldr	r3, [pc, #344]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f003 0303 	and.w	r3, r3, #3
 8002d50:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	2b0c      	cmp	r3, #12
 8002d56:	d102      	bne.n	8002d5e <HAL_RCC_OscConfig+0x136>
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d002      	beq.n	8002d64 <HAL_RCC_OscConfig+0x13c>
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d11f      	bne.n	8002da4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d64:	4b4f      	ldr	r3, [pc, #316]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <HAL_RCC_OscConfig+0x154>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e265      	b.n	8003248 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7c:	4b49      	ldr	r3, [pc, #292]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	061b      	lsls	r3, r3, #24
 8002d8a:	4946      	ldr	r1, [pc, #280]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d90:	4b45      	ldr	r3, [pc, #276]	; (8002ea8 <HAL_RCC_OscConfig+0x280>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7fd fdf9 	bl	800098c <HAL_InitTick>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d043      	beq.n	8002e28 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e251      	b.n	8003248 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d023      	beq.n	8002df4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dac:	4b3d      	ldr	r3, [pc, #244]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a3c      	ldr	r2, [pc, #240]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db8:	f7fd fe34 	bl	8000a24 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc0:	f7fd fe30 	bl	8000a24 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e23a      	b.n	8003248 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dd2:	4b34      	ldr	r3, [pc, #208]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0f0      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dde:	4b31      	ldr	r3, [pc, #196]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	061b      	lsls	r3, r3, #24
 8002dec:	492d      	ldr	r1, [pc, #180]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	604b      	str	r3, [r1, #4]
 8002df2:	e01a      	b.n	8002e2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002df4:	4b2b      	ldr	r3, [pc, #172]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a2a      	ldr	r2, [pc, #168]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002dfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e00:	f7fd fe10 	bl	8000a24 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e08:	f7fd fe0c 	bl	8000a24 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e216      	b.n	8003248 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e1a:	4b22      	ldr	r3, [pc, #136]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f0      	bne.n	8002e08 <HAL_RCC_OscConfig+0x1e0>
 8002e26:	e000      	b.n	8002e2a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d041      	beq.n	8002eba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d01c      	beq.n	8002e78 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e3e:	4b19      	ldr	r3, [pc, #100]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e44:	4a17      	ldr	r2, [pc, #92]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4e:	f7fd fde9 	bl	8000a24 <HAL_GetTick>
 8002e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e56:	f7fd fde5 	bl	8000a24 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e1ef      	b.n	8003248 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e68:	4b0e      	ldr	r3, [pc, #56]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0ef      	beq.n	8002e56 <HAL_RCC_OscConfig+0x22e>
 8002e76:	e020      	b.n	8002eba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e78:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e7e:	4a09      	ldr	r2, [pc, #36]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002e80:	f023 0301 	bic.w	r3, r3, #1
 8002e84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e88:	f7fd fdcc 	bl	8000a24 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e8e:	e00d      	b.n	8002eac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e90:	f7fd fdc8 	bl	8000a24 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d906      	bls.n	8002eac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e1d2      	b.n	8003248 <HAL_RCC_OscConfig+0x620>
 8002ea2:	bf00      	nop
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002eac:	4b8c      	ldr	r3, [pc, #560]	; (80030e0 <HAL_RCC_OscConfig+0x4b8>)
 8002eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1ea      	bne.n	8002e90 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0304 	and.w	r3, r3, #4
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 80a6 	beq.w	8003014 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ecc:	4b84      	ldr	r3, [pc, #528]	; (80030e0 <HAL_RCC_OscConfig+0x4b8>)
 8002ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_RCC_OscConfig+0x2b4>
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e000      	b.n	8002ede <HAL_RCC_OscConfig+0x2b6>
 8002edc:	2300      	movs	r3, #0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00d      	beq.n	8002efe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee2:	4b7f      	ldr	r3, [pc, #508]	; (80030e0 <HAL_RCC_OscConfig+0x4b8>)
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee6:	4a7e      	ldr	r2, [pc, #504]	; (80030e0 <HAL_RCC_OscConfig+0x4b8>)
 8002ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eec:	6593      	str	r3, [r2, #88]	; 0x58
 8002eee:	4b7c      	ldr	r3, [pc, #496]	; (80030e0 <HAL_RCC_OscConfig+0x4b8>)
 8002ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002efa:	2301      	movs	r3, #1
 8002efc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002efe:	4b79      	ldr	r3, [pc, #484]	; (80030e4 <HAL_RCC_OscConfig+0x4bc>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d118      	bne.n	8002f3c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f0a:	4b76      	ldr	r3, [pc, #472]	; (80030e4 <HAL_RCC_OscConfig+0x4bc>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a75      	ldr	r2, [pc, #468]	; (80030e4 <HAL_RCC_OscConfig+0x4bc>)
 8002f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f16:	f7fd fd85 	bl	8000a24 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f1e:	f7fd fd81 	bl	8000a24 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e18b      	b.n	8003248 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f30:	4b6c      	ldr	r3, [pc, #432]	; (80030e4 <HAL_RCC_OscConfig+0x4bc>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0f0      	beq.n	8002f1e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d108      	bne.n	8002f56 <HAL_RCC_OscConfig+0x32e>
 8002f44:	4b66      	ldr	r3, [pc, #408]	; (80030e0 <HAL_RCC_OscConfig+0x4b8>)
 8002f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4a:	4a65      	ldr	r2, [pc, #404]	; (80030e0 <HAL_RCC_OscConfig+0x4b8>)
 8002f4c:	f043 0301 	orr.w	r3, r3, #1
 8002f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f54:	e024      	b.n	8002fa0 <HAL_RCC_OscConfig+0x378>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	2b05      	cmp	r3, #5
 8002f5c:	d110      	bne.n	8002f80 <HAL_RCC_OscConfig+0x358>
 8002f5e:	4b60      	ldr	r3, [pc, #384]	; (80030e0 <HAL_RCC_OscConfig+0x4b8>)
 8002f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f64:	4a5e      	ldr	r2, [pc, #376]	; (80030e0 <HAL_RCC_OscConfig+0x4b8>)
 8002f66:	f043 0304 	orr.w	r3, r3, #4
 8002f6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f6e:	4b5c      	ldr	r3, [pc, #368]	; (80030e0 <HAL_RCC_OscConfig+0x4b8>)
 8002f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f74:	4a5a      	ldr	r2, [pc, #360]	; (80030e0 <HAL_RCC_OscConfig+0x4b8>)
 8002f76:	f043 0301 	orr.w	r3, r3, #1
 8002f7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f7e:	e00f      	b.n	8002fa0 <HAL_RCC_OscConfig+0x378>
 8002f80:	4b57      	ldr	r3, [pc, #348]	; (80030e0 <HAL_RCC_OscConfig+0x4b8>)
 8002f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f86:	4a56      	ldr	r2, [pc, #344]	; (80030e0 <HAL_RCC_OscConfig+0x4b8>)
 8002f88:	f023 0301 	bic.w	r3, r3, #1
 8002f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f90:	4b53      	ldr	r3, [pc, #332]	; (80030e0 <HAL_RCC_OscConfig+0x4b8>)
 8002f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f96:	4a52      	ldr	r2, [pc, #328]	; (80030e0 <HAL_RCC_OscConfig+0x4b8>)
 8002f98:	f023 0304 	bic.w	r3, r3, #4
 8002f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d016      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa8:	f7fd fd3c 	bl	8000a24 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fae:	e00a      	b.n	8002fc6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb0:	f7fd fd38 	bl	8000a24 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e140      	b.n	8003248 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fc6:	4b46      	ldr	r3, [pc, #280]	; (80030e0 <HAL_RCC_OscConfig+0x4b8>)
 8002fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0ed      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x388>
 8002fd4:	e015      	b.n	8003002 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd6:	f7fd fd25 	bl	8000a24 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fdc:	e00a      	b.n	8002ff4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fde:	f7fd fd21 	bl	8000a24 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e129      	b.n	8003248 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ff4:	4b3a      	ldr	r3, [pc, #232]	; (80030e0 <HAL_RCC_OscConfig+0x4b8>)
 8002ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1ed      	bne.n	8002fde <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003002:	7ffb      	ldrb	r3, [r7, #31]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d105      	bne.n	8003014 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003008:	4b35      	ldr	r3, [pc, #212]	; (80030e0 <HAL_RCC_OscConfig+0x4b8>)
 800300a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300c:	4a34      	ldr	r2, [pc, #208]	; (80030e0 <HAL_RCC_OscConfig+0x4b8>)
 800300e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003012:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0320 	and.w	r3, r3, #32
 800301c:	2b00      	cmp	r3, #0
 800301e:	d03c      	beq.n	800309a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d01c      	beq.n	8003062 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003028:	4b2d      	ldr	r3, [pc, #180]	; (80030e0 <HAL_RCC_OscConfig+0x4b8>)
 800302a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800302e:	4a2c      	ldr	r2, [pc, #176]	; (80030e0 <HAL_RCC_OscConfig+0x4b8>)
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003038:	f7fd fcf4 	bl	8000a24 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003040:	f7fd fcf0 	bl	8000a24 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e0fa      	b.n	8003248 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003052:	4b23      	ldr	r3, [pc, #140]	; (80030e0 <HAL_RCC_OscConfig+0x4b8>)
 8003054:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0ef      	beq.n	8003040 <HAL_RCC_OscConfig+0x418>
 8003060:	e01b      	b.n	800309a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003062:	4b1f      	ldr	r3, [pc, #124]	; (80030e0 <HAL_RCC_OscConfig+0x4b8>)
 8003064:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003068:	4a1d      	ldr	r2, [pc, #116]	; (80030e0 <HAL_RCC_OscConfig+0x4b8>)
 800306a:	f023 0301 	bic.w	r3, r3, #1
 800306e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003072:	f7fd fcd7 	bl	8000a24 <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800307a:	f7fd fcd3 	bl	8000a24 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e0dd      	b.n	8003248 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800308c:	4b14      	ldr	r3, [pc, #80]	; (80030e0 <HAL_RCC_OscConfig+0x4b8>)
 800308e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1ef      	bne.n	800307a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 80d1 	beq.w	8003246 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030a4:	4b0e      	ldr	r3, [pc, #56]	; (80030e0 <HAL_RCC_OscConfig+0x4b8>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 030c 	and.w	r3, r3, #12
 80030ac:	2b0c      	cmp	r3, #12
 80030ae:	f000 808b 	beq.w	80031c8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d15e      	bne.n	8003178 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ba:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <HAL_RCC_OscConfig+0x4b8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a08      	ldr	r2, [pc, #32]	; (80030e0 <HAL_RCC_OscConfig+0x4b8>)
 80030c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c6:	f7fd fcad 	bl	8000a24 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030cc:	e00c      	b.n	80030e8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ce:	f7fd fca9 	bl	8000a24 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d905      	bls.n	80030e8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e0b3      	b.n	8003248 <HAL_RCC_OscConfig+0x620>
 80030e0:	40021000 	.word	0x40021000
 80030e4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030e8:	4b59      	ldr	r3, [pc, #356]	; (8003250 <HAL_RCC_OscConfig+0x628>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1ec      	bne.n	80030ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030f4:	4b56      	ldr	r3, [pc, #344]	; (8003250 <HAL_RCC_OscConfig+0x628>)
 80030f6:	68da      	ldr	r2, [r3, #12]
 80030f8:	4b56      	ldr	r3, [pc, #344]	; (8003254 <HAL_RCC_OscConfig+0x62c>)
 80030fa:	4013      	ands	r3, r2
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6a11      	ldr	r1, [r2, #32]
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003104:	3a01      	subs	r2, #1
 8003106:	0112      	lsls	r2, r2, #4
 8003108:	4311      	orrs	r1, r2
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800310e:	0212      	lsls	r2, r2, #8
 8003110:	4311      	orrs	r1, r2
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003116:	0852      	lsrs	r2, r2, #1
 8003118:	3a01      	subs	r2, #1
 800311a:	0552      	lsls	r2, r2, #21
 800311c:	4311      	orrs	r1, r2
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003122:	0852      	lsrs	r2, r2, #1
 8003124:	3a01      	subs	r2, #1
 8003126:	0652      	lsls	r2, r2, #25
 8003128:	4311      	orrs	r1, r2
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800312e:	06d2      	lsls	r2, r2, #27
 8003130:	430a      	orrs	r2, r1
 8003132:	4947      	ldr	r1, [pc, #284]	; (8003250 <HAL_RCC_OscConfig+0x628>)
 8003134:	4313      	orrs	r3, r2
 8003136:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003138:	4b45      	ldr	r3, [pc, #276]	; (8003250 <HAL_RCC_OscConfig+0x628>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a44      	ldr	r2, [pc, #272]	; (8003250 <HAL_RCC_OscConfig+0x628>)
 800313e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003142:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003144:	4b42      	ldr	r3, [pc, #264]	; (8003250 <HAL_RCC_OscConfig+0x628>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	4a41      	ldr	r2, [pc, #260]	; (8003250 <HAL_RCC_OscConfig+0x628>)
 800314a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800314e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003150:	f7fd fc68 	bl	8000a24 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003158:	f7fd fc64 	bl	8000a24 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e06e      	b.n	8003248 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800316a:	4b39      	ldr	r3, [pc, #228]	; (8003250 <HAL_RCC_OscConfig+0x628>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f0      	beq.n	8003158 <HAL_RCC_OscConfig+0x530>
 8003176:	e066      	b.n	8003246 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003178:	4b35      	ldr	r3, [pc, #212]	; (8003250 <HAL_RCC_OscConfig+0x628>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a34      	ldr	r2, [pc, #208]	; (8003250 <HAL_RCC_OscConfig+0x628>)
 800317e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003182:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003184:	4b32      	ldr	r3, [pc, #200]	; (8003250 <HAL_RCC_OscConfig+0x628>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	4a31      	ldr	r2, [pc, #196]	; (8003250 <HAL_RCC_OscConfig+0x628>)
 800318a:	f023 0303 	bic.w	r3, r3, #3
 800318e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003190:	4b2f      	ldr	r3, [pc, #188]	; (8003250 <HAL_RCC_OscConfig+0x628>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	4a2e      	ldr	r2, [pc, #184]	; (8003250 <HAL_RCC_OscConfig+0x628>)
 8003196:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800319a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800319e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a0:	f7fd fc40 	bl	8000a24 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a8:	f7fd fc3c 	bl	8000a24 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e046      	b.n	8003248 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ba:	4b25      	ldr	r3, [pc, #148]	; (8003250 <HAL_RCC_OscConfig+0x628>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1f0      	bne.n	80031a8 <HAL_RCC_OscConfig+0x580>
 80031c6:	e03e      	b.n	8003246 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e039      	b.n	8003248 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80031d4:	4b1e      	ldr	r3, [pc, #120]	; (8003250 <HAL_RCC_OscConfig+0x628>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f003 0203 	and.w	r2, r3, #3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d12c      	bne.n	8003242 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	3b01      	subs	r3, #1
 80031f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d123      	bne.n	8003242 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003206:	429a      	cmp	r2, r3
 8003208:	d11b      	bne.n	8003242 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003214:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003216:	429a      	cmp	r2, r3
 8003218:	d113      	bne.n	8003242 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	085b      	lsrs	r3, r3, #1
 8003226:	3b01      	subs	r3, #1
 8003228:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800322a:	429a      	cmp	r2, r3
 800322c:	d109      	bne.n	8003242 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003238:	085b      	lsrs	r3, r3, #1
 800323a:	3b01      	subs	r3, #1
 800323c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800323e:	429a      	cmp	r2, r3
 8003240:	d001      	beq.n	8003246 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3720      	adds	r7, #32
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40021000 	.word	0x40021000
 8003254:	019f800c 	.word	0x019f800c

08003258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003262:	2300      	movs	r3, #0
 8003264:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e11e      	b.n	80034ae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003270:	4b91      	ldr	r3, [pc, #580]	; (80034b8 <HAL_RCC_ClockConfig+0x260>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 030f 	and.w	r3, r3, #15
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d910      	bls.n	80032a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327e:	4b8e      	ldr	r3, [pc, #568]	; (80034b8 <HAL_RCC_ClockConfig+0x260>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f023 020f 	bic.w	r2, r3, #15
 8003286:	498c      	ldr	r1, [pc, #560]	; (80034b8 <HAL_RCC_ClockConfig+0x260>)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	4313      	orrs	r3, r2
 800328c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800328e:	4b8a      	ldr	r3, [pc, #552]	; (80034b8 <HAL_RCC_ClockConfig+0x260>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	429a      	cmp	r2, r3
 800329a:	d001      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e106      	b.n	80034ae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d073      	beq.n	8003394 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d129      	bne.n	8003308 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032b4:	4b81      	ldr	r3, [pc, #516]	; (80034bc <HAL_RCC_ClockConfig+0x264>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e0f4      	b.n	80034ae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80032c4:	f000 f99c 	bl	8003600 <RCC_GetSysClockFreqFromPLLSource>
 80032c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	4a7c      	ldr	r2, [pc, #496]	; (80034c0 <HAL_RCC_ClockConfig+0x268>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d93f      	bls.n	8003352 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80032d2:	4b7a      	ldr	r3, [pc, #488]	; (80034bc <HAL_RCC_ClockConfig+0x264>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d009      	beq.n	80032f2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d033      	beq.n	8003352 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d12f      	bne.n	8003352 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032f2:	4b72      	ldr	r3, [pc, #456]	; (80034bc <HAL_RCC_ClockConfig+0x264>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032fa:	4a70      	ldr	r2, [pc, #448]	; (80034bc <HAL_RCC_ClockConfig+0x264>)
 80032fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003300:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003302:	2380      	movs	r3, #128	; 0x80
 8003304:	617b      	str	r3, [r7, #20]
 8003306:	e024      	b.n	8003352 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b02      	cmp	r3, #2
 800330e:	d107      	bne.n	8003320 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003310:	4b6a      	ldr	r3, [pc, #424]	; (80034bc <HAL_RCC_ClockConfig+0x264>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d109      	bne.n	8003330 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e0c6      	b.n	80034ae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003320:	4b66      	ldr	r3, [pc, #408]	; (80034bc <HAL_RCC_ClockConfig+0x264>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e0be      	b.n	80034ae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003330:	f000 f8ce 	bl	80034d0 <HAL_RCC_GetSysClockFreq>
 8003334:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	4a61      	ldr	r2, [pc, #388]	; (80034c0 <HAL_RCC_ClockConfig+0x268>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d909      	bls.n	8003352 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800333e:	4b5f      	ldr	r3, [pc, #380]	; (80034bc <HAL_RCC_ClockConfig+0x264>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003346:	4a5d      	ldr	r2, [pc, #372]	; (80034bc <HAL_RCC_ClockConfig+0x264>)
 8003348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800334c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800334e:	2380      	movs	r3, #128	; 0x80
 8003350:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003352:	4b5a      	ldr	r3, [pc, #360]	; (80034bc <HAL_RCC_ClockConfig+0x264>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f023 0203 	bic.w	r2, r3, #3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	4957      	ldr	r1, [pc, #348]	; (80034bc <HAL_RCC_ClockConfig+0x264>)
 8003360:	4313      	orrs	r3, r2
 8003362:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003364:	f7fd fb5e 	bl	8000a24 <HAL_GetTick>
 8003368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336a:	e00a      	b.n	8003382 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800336c:	f7fd fb5a 	bl	8000a24 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	f241 3288 	movw	r2, #5000	; 0x1388
 800337a:	4293      	cmp	r3, r2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e095      	b.n	80034ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003382:	4b4e      	ldr	r3, [pc, #312]	; (80034bc <HAL_RCC_ClockConfig+0x264>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 020c 	and.w	r2, r3, #12
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	429a      	cmp	r2, r3
 8003392:	d1eb      	bne.n	800336c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d023      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d005      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033ac:	4b43      	ldr	r3, [pc, #268]	; (80034bc <HAL_RCC_ClockConfig+0x264>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	4a42      	ldr	r2, [pc, #264]	; (80034bc <HAL_RCC_ClockConfig+0x264>)
 80033b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033b6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0308 	and.w	r3, r3, #8
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d007      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80033c4:	4b3d      	ldr	r3, [pc, #244]	; (80034bc <HAL_RCC_ClockConfig+0x264>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80033cc:	4a3b      	ldr	r2, [pc, #236]	; (80034bc <HAL_RCC_ClockConfig+0x264>)
 80033ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d4:	4b39      	ldr	r3, [pc, #228]	; (80034bc <HAL_RCC_ClockConfig+0x264>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	4936      	ldr	r1, [pc, #216]	; (80034bc <HAL_RCC_ClockConfig+0x264>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	608b      	str	r3, [r1, #8]
 80033e6:	e008      	b.n	80033fa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	2b80      	cmp	r3, #128	; 0x80
 80033ec:	d105      	bne.n	80033fa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80033ee:	4b33      	ldr	r3, [pc, #204]	; (80034bc <HAL_RCC_ClockConfig+0x264>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	4a32      	ldr	r2, [pc, #200]	; (80034bc <HAL_RCC_ClockConfig+0x264>)
 80033f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033f8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033fa:	4b2f      	ldr	r3, [pc, #188]	; (80034b8 <HAL_RCC_ClockConfig+0x260>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	429a      	cmp	r2, r3
 8003406:	d21d      	bcs.n	8003444 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003408:	4b2b      	ldr	r3, [pc, #172]	; (80034b8 <HAL_RCC_ClockConfig+0x260>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f023 020f 	bic.w	r2, r3, #15
 8003410:	4929      	ldr	r1, [pc, #164]	; (80034b8 <HAL_RCC_ClockConfig+0x260>)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	4313      	orrs	r3, r2
 8003416:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003418:	f7fd fb04 	bl	8000a24 <HAL_GetTick>
 800341c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800341e:	e00a      	b.n	8003436 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003420:	f7fd fb00 	bl	8000a24 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	f241 3288 	movw	r2, #5000	; 0x1388
 800342e:	4293      	cmp	r3, r2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e03b      	b.n	80034ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003436:	4b20      	ldr	r3, [pc, #128]	; (80034b8 <HAL_RCC_ClockConfig+0x260>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	d1ed      	bne.n	8003420 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003450:	4b1a      	ldr	r3, [pc, #104]	; (80034bc <HAL_RCC_ClockConfig+0x264>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	4917      	ldr	r1, [pc, #92]	; (80034bc <HAL_RCC_ClockConfig+0x264>)
 800345e:	4313      	orrs	r3, r2
 8003460:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b00      	cmp	r3, #0
 800346c:	d009      	beq.n	8003482 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800346e:	4b13      	ldr	r3, [pc, #76]	; (80034bc <HAL_RCC_ClockConfig+0x264>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	490f      	ldr	r1, [pc, #60]	; (80034bc <HAL_RCC_ClockConfig+0x264>)
 800347e:	4313      	orrs	r3, r2
 8003480:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003482:	f000 f825 	bl	80034d0 <HAL_RCC_GetSysClockFreq>
 8003486:	4602      	mov	r2, r0
 8003488:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <HAL_RCC_ClockConfig+0x264>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	091b      	lsrs	r3, r3, #4
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	490c      	ldr	r1, [pc, #48]	; (80034c4 <HAL_RCC_ClockConfig+0x26c>)
 8003494:	5ccb      	ldrb	r3, [r1, r3]
 8003496:	f003 031f 	and.w	r3, r3, #31
 800349a:	fa22 f303 	lsr.w	r3, r2, r3
 800349e:	4a0a      	ldr	r2, [pc, #40]	; (80034c8 <HAL_RCC_ClockConfig+0x270>)
 80034a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80034a2:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <HAL_RCC_ClockConfig+0x274>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fd fa70 	bl	800098c <HAL_InitTick>
 80034ac:	4603      	mov	r3, r0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40022000 	.word	0x40022000
 80034bc:	40021000 	.word	0x40021000
 80034c0:	04c4b400 	.word	0x04c4b400
 80034c4:	08004aa0 	.word	0x08004aa0
 80034c8:	20000000 	.word	0x20000000
 80034cc:	20000004 	.word	0x20000004

080034d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b087      	sub	sp, #28
 80034d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80034d6:	4b2c      	ldr	r3, [pc, #176]	; (8003588 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 030c 	and.w	r3, r3, #12
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d102      	bne.n	80034e8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034e2:	4b2a      	ldr	r3, [pc, #168]	; (800358c <HAL_RCC_GetSysClockFreq+0xbc>)
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	e047      	b.n	8003578 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80034e8:	4b27      	ldr	r3, [pc, #156]	; (8003588 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f003 030c 	and.w	r3, r3, #12
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d102      	bne.n	80034fa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034f4:	4b25      	ldr	r3, [pc, #148]	; (800358c <HAL_RCC_GetSysClockFreq+0xbc>)
 80034f6:	613b      	str	r3, [r7, #16]
 80034f8:	e03e      	b.n	8003578 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80034fa:	4b23      	ldr	r3, [pc, #140]	; (8003588 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 030c 	and.w	r3, r3, #12
 8003502:	2b0c      	cmp	r3, #12
 8003504:	d136      	bne.n	8003574 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003506:	4b20      	ldr	r3, [pc, #128]	; (8003588 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003510:	4b1d      	ldr	r3, [pc, #116]	; (8003588 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	091b      	lsrs	r3, r3, #4
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	3301      	adds	r3, #1
 800351c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2b03      	cmp	r3, #3
 8003522:	d10c      	bne.n	800353e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003524:	4a19      	ldr	r2, [pc, #100]	; (800358c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	fbb2 f3f3 	udiv	r3, r2, r3
 800352c:	4a16      	ldr	r2, [pc, #88]	; (8003588 <HAL_RCC_GetSysClockFreq+0xb8>)
 800352e:	68d2      	ldr	r2, [r2, #12]
 8003530:	0a12      	lsrs	r2, r2, #8
 8003532:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003536:	fb02 f303 	mul.w	r3, r2, r3
 800353a:	617b      	str	r3, [r7, #20]
      break;
 800353c:	e00c      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800353e:	4a13      	ldr	r2, [pc, #76]	; (800358c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	fbb2 f3f3 	udiv	r3, r2, r3
 8003546:	4a10      	ldr	r2, [pc, #64]	; (8003588 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003548:	68d2      	ldr	r2, [r2, #12]
 800354a:	0a12      	lsrs	r2, r2, #8
 800354c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003550:	fb02 f303 	mul.w	r3, r2, r3
 8003554:	617b      	str	r3, [r7, #20]
      break;
 8003556:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003558:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <HAL_RCC_GetSysClockFreq+0xb8>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	0e5b      	lsrs	r3, r3, #25
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	3301      	adds	r3, #1
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003570:	613b      	str	r3, [r7, #16]
 8003572:	e001      	b.n	8003578 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003578:	693b      	ldr	r3, [r7, #16]
}
 800357a:	4618      	mov	r0, r3
 800357c:	371c      	adds	r7, #28
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40021000 	.word	0x40021000
 800358c:	00f42400 	.word	0x00f42400

08003590 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003594:	4b03      	ldr	r3, [pc, #12]	; (80035a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003596:	681b      	ldr	r3, [r3, #0]
}
 8003598:	4618      	mov	r0, r3
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	20000000 	.word	0x20000000

080035a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80035ac:	f7ff fff0 	bl	8003590 <HAL_RCC_GetHCLKFreq>
 80035b0:	4602      	mov	r2, r0
 80035b2:	4b06      	ldr	r3, [pc, #24]	; (80035cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	0a1b      	lsrs	r3, r3, #8
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	4904      	ldr	r1, [pc, #16]	; (80035d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035be:	5ccb      	ldrb	r3, [r1, r3]
 80035c0:	f003 031f 	and.w	r3, r3, #31
 80035c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40021000 	.word	0x40021000
 80035d0:	08004ab0 	.word	0x08004ab0

080035d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035d8:	f7ff ffda 	bl	8003590 <HAL_RCC_GetHCLKFreq>
 80035dc:	4602      	mov	r2, r0
 80035de:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	0adb      	lsrs	r3, r3, #11
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	4904      	ldr	r1, [pc, #16]	; (80035fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80035ea:	5ccb      	ldrb	r3, [r1, r3]
 80035ec:	f003 031f 	and.w	r3, r3, #31
 80035f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40021000 	.word	0x40021000
 80035fc:	08004ab0 	.word	0x08004ab0

08003600 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003600:	b480      	push	{r7}
 8003602:	b087      	sub	sp, #28
 8003604:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003606:	4b1e      	ldr	r3, [pc, #120]	; (8003680 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003610:	4b1b      	ldr	r3, [pc, #108]	; (8003680 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	3301      	adds	r3, #1
 800361c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	2b03      	cmp	r3, #3
 8003622:	d10c      	bne.n	800363e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003624:	4a17      	ldr	r2, [pc, #92]	; (8003684 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	fbb2 f3f3 	udiv	r3, r2, r3
 800362c:	4a14      	ldr	r2, [pc, #80]	; (8003680 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800362e:	68d2      	ldr	r2, [r2, #12]
 8003630:	0a12      	lsrs	r2, r2, #8
 8003632:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003636:	fb02 f303 	mul.w	r3, r2, r3
 800363a:	617b      	str	r3, [r7, #20]
    break;
 800363c:	e00c      	b.n	8003658 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800363e:	4a11      	ldr	r2, [pc, #68]	; (8003684 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	fbb2 f3f3 	udiv	r3, r2, r3
 8003646:	4a0e      	ldr	r2, [pc, #56]	; (8003680 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003648:	68d2      	ldr	r2, [r2, #12]
 800364a:	0a12      	lsrs	r2, r2, #8
 800364c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003650:	fb02 f303 	mul.w	r3, r2, r3
 8003654:	617b      	str	r3, [r7, #20]
    break;
 8003656:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003658:	4b09      	ldr	r3, [pc, #36]	; (8003680 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	0e5b      	lsrs	r3, r3, #25
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	3301      	adds	r3, #1
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003670:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003672:	687b      	ldr	r3, [r7, #4]
}
 8003674:	4618      	mov	r0, r3
 8003676:	371c      	adds	r7, #28
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	40021000 	.word	0x40021000
 8003684:	00f42400 	.word	0x00f42400

08003688 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003690:	2300      	movs	r3, #0
 8003692:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003694:	2300      	movs	r3, #0
 8003696:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 8098 	beq.w	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036a6:	2300      	movs	r3, #0
 80036a8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036aa:	4b43      	ldr	r3, [pc, #268]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10d      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036b6:	4b40      	ldr	r3, [pc, #256]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ba:	4a3f      	ldr	r2, [pc, #252]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036c0:	6593      	str	r3, [r2, #88]	; 0x58
 80036c2:	4b3d      	ldr	r3, [pc, #244]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ca:	60bb      	str	r3, [r7, #8]
 80036cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ce:	2301      	movs	r3, #1
 80036d0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036d2:	4b3a      	ldr	r3, [pc, #232]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a39      	ldr	r2, [pc, #228]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80036d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036de:	f7fd f9a1 	bl	8000a24 <HAL_GetTick>
 80036e2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036e4:	e009      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e6:	f7fd f99d 	bl	8000a24 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d902      	bls.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	74fb      	strb	r3, [r7, #19]
        break;
 80036f8:	e005      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036fa:	4b30      	ldr	r3, [pc, #192]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0ef      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003706:	7cfb      	ldrb	r3, [r7, #19]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d159      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800370c:	4b2a      	ldr	r3, [pc, #168]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800370e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003716:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d01e      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	429a      	cmp	r2, r3
 8003726:	d019      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003728:	4b23      	ldr	r3, [pc, #140]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800372a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003732:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003734:	4b20      	ldr	r3, [pc, #128]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373a:	4a1f      	ldr	r2, [pc, #124]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800373c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003744:	4b1c      	ldr	r3, [pc, #112]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374a:	4a1b      	ldr	r2, [pc, #108]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800374c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003754:	4a18      	ldr	r2, [pc, #96]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d016      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003766:	f7fd f95d 	bl	8000a24 <HAL_GetTick>
 800376a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800376c:	e00b      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800376e:	f7fd f959 	bl	8000a24 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	f241 3288 	movw	r2, #5000	; 0x1388
 800377c:	4293      	cmp	r3, r2
 800377e:	d902      	bls.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	74fb      	strb	r3, [r7, #19]
            break;
 8003784:	e006      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003786:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0ec      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003794:	7cfb      	ldrb	r3, [r7, #19]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10b      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800379a:	4b07      	ldr	r3, [pc, #28]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800379c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a8:	4903      	ldr	r1, [pc, #12]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037b0:	e008      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037b2:	7cfb      	ldrb	r3, [r7, #19]
 80037b4:	74bb      	strb	r3, [r7, #18]
 80037b6:	e005      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80037b8:	40021000 	.word	0x40021000
 80037bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c0:	7cfb      	ldrb	r3, [r7, #19]
 80037c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037c4:	7c7b      	ldrb	r3, [r7, #17]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d105      	bne.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ca:	4ba7      	ldr	r3, [pc, #668]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ce:	4aa6      	ldr	r2, [pc, #664]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037e2:	4ba1      	ldr	r3, [pc, #644]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e8:	f023 0203 	bic.w	r2, r3, #3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	499d      	ldr	r1, [pc, #628]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003804:	4b98      	ldr	r3, [pc, #608]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380a:	f023 020c 	bic.w	r2, r3, #12
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	4995      	ldr	r1, [pc, #596]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003826:	4b90      	ldr	r3, [pc, #576]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	498c      	ldr	r1, [pc, #560]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00a      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003848:	4b87      	ldr	r3, [pc, #540]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800384a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	4984      	ldr	r1, [pc, #528]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003858:	4313      	orrs	r3, r2
 800385a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0310 	and.w	r3, r3, #16
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800386a:	4b7f      	ldr	r3, [pc, #508]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800386c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003870:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	497b      	ldr	r1, [pc, #492]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800387a:	4313      	orrs	r3, r2
 800387c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0320 	and.w	r3, r3, #32
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800388c:	4b76      	ldr	r3, [pc, #472]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800388e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003892:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	4973      	ldr	r1, [pc, #460]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038ae:	4b6e      	ldr	r3, [pc, #440]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	496a      	ldr	r1, [pc, #424]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038d0:	4b65      	ldr	r3, [pc, #404]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	4962      	ldr	r1, [pc, #392]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038f2:	4b5d      	ldr	r3, [pc, #372]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	4959      	ldr	r1, [pc, #356]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003914:	4b54      	ldr	r3, [pc, #336]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003916:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800391a:	f023 0203 	bic.w	r2, r3, #3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003922:	4951      	ldr	r1, [pc, #324]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003924:	4313      	orrs	r3, r2
 8003926:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003936:	4b4c      	ldr	r3, [pc, #304]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003944:	4948      	ldr	r1, [pc, #288]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003946:	4313      	orrs	r3, r2
 8003948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003954:	2b00      	cmp	r3, #0
 8003956:	d015      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003958:	4b43      	ldr	r3, [pc, #268]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800395a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	4940      	ldr	r1, [pc, #256]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003968:	4313      	orrs	r3, r2
 800396a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003976:	d105      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003978:	4b3b      	ldr	r3, [pc, #236]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	4a3a      	ldr	r2, [pc, #232]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800397e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003982:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800398c:	2b00      	cmp	r3, #0
 800398e:	d015      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003990:	4b35      	ldr	r3, [pc, #212]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003996:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800399e:	4932      	ldr	r1, [pc, #200]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039ae:	d105      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039b0:	4b2d      	ldr	r3, [pc, #180]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	4a2c      	ldr	r2, [pc, #176]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039ba:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d015      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039c8:	4b27      	ldr	r3, [pc, #156]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d6:	4924      	ldr	r1, [pc, #144]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039e6:	d105      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039e8:	4b1f      	ldr	r3, [pc, #124]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	4a1e      	ldr	r2, [pc, #120]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039f2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d015      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a00:	4b19      	ldr	r3, [pc, #100]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0e:	4916      	ldr	r1, [pc, #88]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a1e:	d105      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a20:	4b11      	ldr	r3, [pc, #68]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	4a10      	ldr	r2, [pc, #64]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a2a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d019      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a38:	4b0b      	ldr	r3, [pc, #44]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	4908      	ldr	r1, [pc, #32]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a56:	d109      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a58:	4b03      	ldr	r3, [pc, #12]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	4a02      	ldr	r2, [pc, #8]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a62:	60d3      	str	r3, [r2, #12]
 8003a64:	e002      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003a66:	bf00      	nop
 8003a68:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d015      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a78:	4b29      	ldr	r3, [pc, #164]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	4926      	ldr	r1, [pc, #152]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a96:	d105      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003a98:	4b21      	ldr	r3, [pc, #132]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	4a20      	ldr	r2, [pc, #128]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d015      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003ab0:	4b1b      	ldr	r3, [pc, #108]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003abe:	4918      	ldr	r1, [pc, #96]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ace:	d105      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ad0:	4b13      	ldr	r3, [pc, #76]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	4a12      	ldr	r2, [pc, #72]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ada:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d015      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003ae8:	4b0d      	ldr	r3, [pc, #52]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003aea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003aee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af6:	490a      	ldr	r1, [pc, #40]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b06:	d105      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b08:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	4a04      	ldr	r2, [pc, #16]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b12:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003b14:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3718      	adds	r7, #24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40021000 	.word	0x40021000

08003b24 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_QSPI  QSPI peripheral clock (only for devices with QSPI)
  *            @arg @ref RCC_PERIPHCLK_RTC  RTC peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b088      	sub	sp, #32
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	61fb      	str	r3, [r7, #28]
  uint32_t pllvco, plln, pllp;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b36:	d136      	bne.n	8003ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003b38:	4bb1      	ldr	r3, [pc, #708]	; (8003e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b42:	613b      	str	r3, [r7, #16]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8003b44:	4bae      	ldr	r3, [pc, #696]	; (8003e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d108      	bne.n	8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b58:	d104      	bne.n	8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8003b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b5e:	61fb      	str	r3, [r7, #28]
 8003b60:	f000 bd0e 	b.w	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8003b64:	4ba6      	ldr	r3, [pc, #664]	; (8003e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d108      	bne.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b78:	d104      	bne.n	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    {
      frequency = LSI_VALUE;
 8003b7a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003b7e:	61fb      	str	r3, [r7, #28]
 8003b80:	f000 bcfe 	b.w	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8003b84:	4b9e      	ldr	r3, [pc, #632]	; (8003e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b90:	f040 84f6 	bne.w	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b9a:	f040 84f1 	bne.w	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
    {
      frequency = HSE_VALUE / 32U;
 8003b9e:	4b99      	ldr	r3, [pc, #612]	; (8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003ba0:	61fb      	str	r3, [r7, #28]
 8003ba2:	f000 bced 	b.w	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)   /* HSI ? */
 8003ba6:	4b96      	ldr	r3, [pc, #600]	; (8003e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d10c      	bne.n	8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003bb2:	4b93      	ldr	r3, [pc, #588]	; (8003e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bbe:	d102      	bne.n	8003bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        pllvco = HSI_VALUE;
 8003bc0:	4b91      	ldr	r3, [pc, #580]	; (8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003bc2:	61bb      	str	r3, [r7, #24]
 8003bc4:	e017      	b.n	8003bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61bb      	str	r3, [r7, #24]
 8003bca:	e014      	b.n	8003bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)   /* HSE ? */
 8003bcc:	4b8c      	ldr	r3, [pc, #560]	; (8003e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f003 0303 	and.w	r3, r3, #3
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d10c      	bne.n	8003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003bd8:	4b89      	ldr	r3, [pc, #548]	; (8003e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003be4:	d102      	bne.n	8003bec <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      {
        pllvco = HSE_VALUE;
 8003be6:	4b88      	ldr	r3, [pc, #544]	; (8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003be8:	61bb      	str	r3, [r7, #24]
 8003bea:	e004      	b.n	8003bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	61bb      	str	r3, [r7, #24]
 8003bf0:	e001      	b.n	8003bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else /* No source */
    {
      pllvco = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61bb      	str	r3, [r7, #24]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003bf6:	4b82      	ldr	r3, [pc, #520]	; (8003e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	091b      	lsrs	r3, r3, #4
 8003bfc:	f003 030f 	and.w	r3, r3, #15
 8003c00:	3301      	adds	r3, #1
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c08:	61bb      	str	r3, [r7, #24]

    switch(PeriphClk)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c10:	f000 8462 	beq.w	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c1a:	f200 848a 	bhi.w	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c24:	f000 8261 	beq.w	80040ea <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c2e:	f200 8480 	bhi.w	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c38:	f000 8413 	beq.w	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0x93e>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c42:	f200 8476 	bhi.w	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c4c:	f000 83cc 	beq.w	80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c56:	f200 846c 	bhi.w	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c60:	f000 8394 	beq.w	800438c <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c6a:	f200 8462 	bhi.w	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c74:	f000 835c 	beq.w	8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c7e:	f200 8458 	bhi.w	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c88:	f000 8316 	beq.w	80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c92:	f200 844e 	bhi.w	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c9c:	f000 82c8 	beq.w	8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ca6:	f200 8444 	bhi.w	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cb0:	f000 827a 	beq.w	80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cba:	f200 843a 	bhi.w	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cc4:	f000 8234 	beq.w	8004130 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cce:	f200 8430 	bhi.w	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cd8:	f000 81e2 	beq.w	80040a0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ce2:	f200 8426 	bhi.w	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b80      	cmp	r3, #128	; 0x80
 8003cea:	f000 81af 	beq.w	800404c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b80      	cmp	r3, #128	; 0x80
 8003cf2:	f200 841e 	bhi.w	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b20      	cmp	r3, #32
 8003cfa:	d84b      	bhi.n	8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 8417 	beq.w	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	2b1f      	cmp	r3, #31
 8003d0a:	f200 8412 	bhi.w	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
 8003d0e:	a201      	add	r2, pc, #4	; (adr r2, 8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>)
 8003d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d14:	08003d9f 	.word	0x08003d9f
 8003d18:	08003e0d 	.word	0x08003e0d
 8003d1c:	08004533 	.word	0x08004533
 8003d20:	08003e6f 	.word	0x08003e6f
 8003d24:	08004533 	.word	0x08004533
 8003d28:	08004533 	.word	0x08004533
 8003d2c:	08004533 	.word	0x08004533
 8003d30:	08003ed1 	.word	0x08003ed1
 8003d34:	08004533 	.word	0x08004533
 8003d38:	08004533 	.word	0x08004533
 8003d3c:	08004533 	.word	0x08004533
 8003d40:	08004533 	.word	0x08004533
 8003d44:	08004533 	.word	0x08004533
 8003d48:	08004533 	.word	0x08004533
 8003d4c:	08004533 	.word	0x08004533
 8003d50:	08003f33 	.word	0x08003f33
 8003d54:	08004533 	.word	0x08004533
 8003d58:	08004533 	.word	0x08004533
 8003d5c:	08004533 	.word	0x08004533
 8003d60:	08004533 	.word	0x08004533
 8003d64:	08004533 	.word	0x08004533
 8003d68:	08004533 	.word	0x08004533
 8003d6c:	08004533 	.word	0x08004533
 8003d70:	08004533 	.word	0x08004533
 8003d74:	08004533 	.word	0x08004533
 8003d78:	08004533 	.word	0x08004533
 8003d7c:	08004533 	.word	0x08004533
 8003d80:	08004533 	.word	0x08004533
 8003d84:	08004533 	.word	0x08004533
 8003d88:	08004533 	.word	0x08004533
 8003d8c:	08004533 	.word	0x08004533
 8003d90:	08003f9b 	.word	0x08003f9b
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b40      	cmp	r3, #64	; 0x40
 8003d98:	f000 8133 	beq.w	8004002 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
      break;

#endif /* QUADSPI */

    default:
      break;
 8003d9c:	e3c9      	b.n	8004532 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003d9e:	4b18      	ldr	r3, [pc, #96]	; (8003e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da4:	f003 0303 	and.w	r3, r3, #3
 8003da8:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d103      	bne.n	8003db8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
        frequency = HAL_RCC_GetPCLK2Freq();
 8003db0:	f7ff fc10 	bl	80035d4 <HAL_RCC_GetPCLK2Freq>
 8003db4:	61f8      	str	r0, [r7, #28]
      break;
 8003db6:	e3be      	b.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
      else if(srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d103      	bne.n	8003dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
        frequency = HAL_RCC_GetSysClockFreq();
 8003dbe:	f7ff fb87 	bl	80034d0 <HAL_RCC_GetSysClockFreq>
 8003dc2:	61f8      	str	r0, [r7, #28]
      break;
 8003dc4:	e3b7      	b.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI) )
 8003dc6:	4b0e      	ldr	r3, [pc, #56]	; (8003e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd2:	d105      	bne.n	8003de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d102      	bne.n	8003de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
        frequency = HSI_VALUE;
 8003dda:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003ddc:	61fb      	str	r3, [r7, #28]
      break;
 8003dde:	e3aa      	b.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8003de0:	4b07      	ldr	r3, [pc, #28]	; (8003e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8003de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	f040 83a3 	bne.w	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	2b03      	cmp	r3, #3
 8003df4:	f040 839f 	bne.w	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
        frequency = LSE_VALUE;
 8003df8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dfc:	61fb      	str	r3, [r7, #28]
      break;
 8003dfe:	e39a      	b.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8003e00:	40021000 	.word	0x40021000
 8003e04:	0007a120 	.word	0x0007a120
 8003e08:	00f42400 	.word	0x00f42400
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003e0c:	4ba2      	ldr	r3, [pc, #648]	; (8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8003e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e12:	f003 030c 	and.w	r3, r3, #12
 8003e16:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d103      	bne.n	8003e26 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003e1e:	f7ff fbc3 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 8003e22:	61f8      	str	r0, [r7, #28]
      break;
 8003e24:	e389      	b.n	800453a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
      else if(srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d103      	bne.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
        frequency = HAL_RCC_GetSysClockFreq();
 8003e2c:	f7ff fb50 	bl	80034d0 <HAL_RCC_GetSysClockFreq>
 8003e30:	61f8      	str	r0, [r7, #28]
      break;
 8003e32:	e382      	b.n	800453a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8003e34:	4b98      	ldr	r3, [pc, #608]	; (8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e40:	d105      	bne.n	8003e4e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	d102      	bne.n	8003e4e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
        frequency = HSI_VALUE;
 8003e48:	4b94      	ldr	r3, [pc, #592]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003e4a:	61fb      	str	r3, [r7, #28]
      break;
 8003e4c:	e375      	b.n	800453a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))  && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8003e4e:	4b92      	ldr	r3, [pc, #584]	; (8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8003e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	f040 836e 	bne.w	800453a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	2b0c      	cmp	r3, #12
 8003e62:	f040 836a 	bne.w	800453a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        frequency = LSE_VALUE;
 8003e66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e6a:	61fb      	str	r3, [r7, #28]
      break;
 8003e6c:	e365      	b.n	800453a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003e6e:	4b8a      	ldr	r3, [pc, #552]	; (8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8003e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e78:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d103      	bne.n	8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003e80:	f7ff fb92 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 8003e84:	61f8      	str	r0, [r7, #28]
      break;
 8003e86:	e35a      	b.n	800453e <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      else if(srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	2b10      	cmp	r3, #16
 8003e8c:	d103      	bne.n	8003e96 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
        frequency = HAL_RCC_GetSysClockFreq();
 8003e8e:	f7ff fb1f 	bl	80034d0 <HAL_RCC_GetSysClockFreq>
 8003e92:	61f8      	str	r0, [r7, #28]
      break;
 8003e94:	e353      	b.n	800453e <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8003e96:	4b80      	ldr	r3, [pc, #512]	; (8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ea2:	d105      	bne.n	8003eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	2b20      	cmp	r3, #32
 8003ea8:	d102      	bne.n	8003eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>
        frequency = HSI_VALUE;
 8003eaa:	4b7c      	ldr	r3, [pc, #496]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003eac:	61fb      	str	r3, [r7, #28]
      break;
 8003eae:	e346      	b.n	800453e <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8003eb0:	4b79      	ldr	r3, [pc, #484]	; (8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8003eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	f040 833f 	bne.w	800453e <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	2b30      	cmp	r3, #48	; 0x30
 8003ec4:	f040 833b 	bne.w	800453e <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
        frequency = LSE_VALUE;
 8003ec8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ecc:	61fb      	str	r3, [r7, #28]
      break;
 8003ece:	e336      	b.n	800453e <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003ed0:	4b71      	ldr	r3, [pc, #452]	; (8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8003ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003eda:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d103      	bne.n	8003eea <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003ee2:	f7ff fb61 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 8003ee6:	61f8      	str	r0, [r7, #28]
      break;
 8003ee8:	e32b      	b.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      else if(srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	2b40      	cmp	r3, #64	; 0x40
 8003eee:	d103      	bne.n	8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        frequency = HAL_RCC_GetSysClockFreq();
 8003ef0:	f7ff faee 	bl	80034d0 <HAL_RCC_GetSysClockFreq>
 8003ef4:	61f8      	str	r0, [r7, #28]
      break;
 8003ef6:	e324      	b.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8003ef8:	4b67      	ldr	r3, [pc, #412]	; (8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f04:	d105      	bne.n	8003f12 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	2b80      	cmp	r3, #128	; 0x80
 8003f0a:	d102      	bne.n	8003f12 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
        frequency = HSI_VALUE;
 8003f0c:	4b63      	ldr	r3, [pc, #396]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003f0e:	61fb      	str	r3, [r7, #28]
      break;
 8003f10:	e317      	b.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8003f12:	4b61      	ldr	r3, [pc, #388]	; (8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8003f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	f040 8310 	bne.w	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	2bc0      	cmp	r3, #192	; 0xc0
 8003f26:	f040 830c 	bne.w	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
        frequency = LSE_VALUE;
 8003f2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f2e:	61fb      	str	r3, [r7, #28]
      break;
 8003f30:	e307      	b.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8003f32:	4b59      	ldr	r3, [pc, #356]	; (8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8003f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f3c:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d103      	bne.n	8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x428>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003f44:	f7ff fb30 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 8003f48:	61f8      	str	r0, [r7, #28]
      break;
 8003f4a:	e2fc      	b.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      else if(srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f52:	d103      	bne.n	8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0x438>
        frequency = HAL_RCC_GetSysClockFreq();
 8003f54:	f7ff fabc 	bl	80034d0 <HAL_RCC_GetSysClockFreq>
 8003f58:	61f8      	str	r0, [r7, #28]
      break;
 8003f5a:	e2f4      	b.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8003f5c:	4b4e      	ldr	r3, [pc, #312]	; (8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f68:	d106      	bne.n	8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f70:	d102      	bne.n	8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
        frequency = HSI_VALUE;
 8003f72:	4b4a      	ldr	r3, [pc, #296]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003f74:	61fb      	str	r3, [r7, #28]
      break;
 8003f76:	e2e6      	b.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8003f78:	4b47      	ldr	r3, [pc, #284]	; (8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8003f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	f040 82df 	bne.w	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f8e:	f040 82da 	bne.w	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
        frequency = LSE_VALUE;
 8003f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f96:	61fb      	str	r3, [r7, #28]
      break;
 8003f98:	e2d5      	b.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003f9a:	4b3f      	ldr	r3, [pc, #252]	; (8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8003f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003fa4:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d103      	bne.n	8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        frequency = HAL_RCC_GetPCLK1Freq();
 8003fac:	f7ff fafc 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 8003fb0:	61f8      	str	r0, [r7, #28]
      break;
 8003fb2:	e2ca      	b.n	800454a <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      else if(srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fba:	d103      	bne.n	8003fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
        frequency = HAL_RCC_GetSysClockFreq();
 8003fbc:	f7ff fa88 	bl	80034d0 <HAL_RCC_GetSysClockFreq>
 8003fc0:	61f8      	str	r0, [r7, #28]
      break;
 8003fc2:	e2c2      	b.n	800454a <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8003fc4:	4b34      	ldr	r3, [pc, #208]	; (8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fd0:	d106      	bne.n	8003fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fd8:	d102      	bne.n	8003fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
        frequency = HSI_VALUE;
 8003fda:	4b30      	ldr	r3, [pc, #192]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8003fdc:	61fb      	str	r3, [r7, #28]
      break;
 8003fde:	e2b4      	b.n	800454a <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8003fe0:	4b2d      	ldr	r3, [pc, #180]	; (8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8003fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	f040 82ad 	bne.w	800454a <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ff6:	f040 82a8 	bne.w	800454a <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
        frequency = LSE_VALUE;
 8003ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ffe:	61fb      	str	r3, [r7, #28]
      break;
 8004000:	e2a3      	b.n	800454a <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004002:	4b25      	ldr	r3, [pc, #148]	; (8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8004004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004008:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800400c:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d103      	bne.n	800401c <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004014:	f7ff fac8 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 8004018:	61f8      	str	r0, [r7, #28]
      break;
 800401a:	e298      	b.n	800454e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      else if(srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004022:	d103      	bne.n	800402c <HAL_RCCEx_GetPeriphCLKFreq+0x508>
        frequency = HAL_RCC_GetSysClockFreq();
 8004024:	f7ff fa54 	bl	80034d0 <HAL_RCC_GetSysClockFreq>
 8004028:	61f8      	str	r0, [r7, #28]
      break;
 800402a:	e290      	b.n	800454e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800402c:	4b1a      	ldr	r3, [pc, #104]	; (8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004038:	f040 8289 	bne.w	800454e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004042:	f040 8284 	bne.w	800454e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
        frequency = HSI_VALUE;
 8004046:	4b15      	ldr	r3, [pc, #84]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004048:	61fb      	str	r3, [r7, #28]
      break;
 800404a:	e280      	b.n	800454e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800404c:	4b12      	ldr	r3, [pc, #72]	; (8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800404e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004052:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004056:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d103      	bne.n	8004066 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
        frequency = HAL_RCC_GetPCLK1Freq();
 800405e:	f7ff faa3 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 8004062:	61f8      	str	r0, [r7, #28]
      break;
 8004064:	e275      	b.n	8004552 <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      else if(srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800406c:	d103      	bne.n	8004076 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
        frequency = HAL_RCC_GetSysClockFreq();
 800406e:	f7ff fa2f 	bl	80034d0 <HAL_RCC_GetSysClockFreq>
 8004072:	61f8      	str	r0, [r7, #28]
      break;
 8004074:	e26d      	b.n	8004552 <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004076:	4b08      	ldr	r3, [pc, #32]	; (8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800407e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004082:	f040 8266 	bne.w	8004552 <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800408c:	f040 8261 	bne.w	8004552 <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
        frequency = HSI_VALUE;
 8004090:	4b02      	ldr	r3, [pc, #8]	; (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004092:	61fb      	str	r3, [r7, #28]
      break;
 8004094:	e25d      	b.n	8004552 <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
 8004096:	bf00      	nop
 8004098:	40021000 	.word	0x40021000
 800409c:	00f42400 	.word	0x00f42400
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80040a0:	4ba0      	ldr	r3, [pc, #640]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x800>)
 80040a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040aa:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d103      	bne.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0x596>
        frequency = HAL_RCC_GetPCLK1Freq();
 80040b2:	f7ff fa79 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 80040b6:	61f8      	str	r0, [r7, #28]
      break;
 80040b8:	e24d      	b.n	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
      else if(srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c0:	d103      	bne.n	80040ca <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
        frequency = HAL_RCC_GetSysClockFreq();
 80040c2:	f7ff fa05 	bl	80034d0 <HAL_RCC_GetSysClockFreq>
 80040c6:	61f8      	str	r0, [r7, #28]
      break;
 80040c8:	e245      	b.n	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80040ca:	4b96      	ldr	r3, [pc, #600]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x800>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d6:	f040 823e 	bne.w	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040e0:	f040 8239 	bne.w	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
        frequency = HSI_VALUE;
 80040e4:	4b90      	ldr	r3, [pc, #576]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80040e6:	61fb      	str	r3, [r7, #28]
      break;
 80040e8:	e235      	b.n	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
      srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80040ea:	4b8e      	ldr	r3, [pc, #568]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x800>)
 80040ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040f0:	f003 0303 	and.w	r3, r3, #3
 80040f4:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d103      	bne.n	8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        frequency = HAL_RCC_GetPCLK1Freq();
 80040fc:	f7ff fa54 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 8004100:	61f8      	str	r0, [r7, #28]
      break;
 8004102:	e22a      	b.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
      else if(srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d103      	bne.n	8004112 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
        frequency = HAL_RCC_GetSysClockFreq();
 800410a:	f7ff f9e1 	bl	80034d0 <HAL_RCC_GetSysClockFreq>
 800410e:	61f8      	str	r0, [r7, #28]
      break;
 8004110:	e223      	b.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8004112:	4b84      	ldr	r3, [pc, #528]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x800>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800411a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800411e:	f040 821c 	bne.w	800455a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	2b02      	cmp	r3, #2
 8004126:	f040 8218 	bne.w	800455a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
        frequency = HSI_VALUE;
 800412a:	4b7f      	ldr	r3, [pc, #508]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800412c:	61fb      	str	r3, [r7, #28]
      break;
 800412e:	e214      	b.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004130:	4b7c      	ldr	r3, [pc, #496]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x800>)
 8004132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004136:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800413a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d103      	bne.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004142:	f7ff fa31 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 8004146:	61f8      	str	r0, [r7, #28]
      break;
 8004148:	e209      	b.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
      else if((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800414a:	4b76      	ldr	r3, [pc, #472]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x800>)
 800414c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b02      	cmp	r3, #2
 8004156:	d107      	bne.n	8004168 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800415e:	d103      	bne.n	8004168 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        frequency = LSI_VALUE;
 8004160:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004164:	61fb      	str	r3, [r7, #28]
 8004166:	e01e      	b.n	80041a6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8004168:	4b6e      	ldr	r3, [pc, #440]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x800>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004174:	d106      	bne.n	8004184 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800417c:	d102      	bne.n	8004184 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        frequency = HSI_VALUE;
 800417e:	4b6a      	ldr	r3, [pc, #424]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004180:	61fb      	str	r3, [r7, #28]
 8004182:	e010      	b.n	80041a6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
      else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8004184:	4b67      	ldr	r3, [pc, #412]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x800>)
 8004186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b02      	cmp	r3, #2
 8004190:	f040 81e5 	bne.w	800455e <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800419a:	f040 81e0 	bne.w	800455e <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        frequency = LSE_VALUE;
 800419e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041a2:	61fb      	str	r3, [r7, #28]
      break;
 80041a4:	e1db      	b.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 80041a6:	e1da      	b.n	800455e <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80041a8:	4b5e      	ldr	r3, [pc, #376]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x800>)
 80041aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80041b2:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_SAI1CLKSOURCE_SYSCLK)
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d103      	bne.n	80041c2 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
        frequency = HAL_RCC_GetSysClockFreq();
 80041ba:	f7ff f989 	bl	80034d0 <HAL_RCC_GetSysClockFreq>
 80041be:	61f8      	str	r0, [r7, #28]
      break;
 80041c0:	e1cf      	b.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      else if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041c8:	d11b      	bne.n	8004202 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 80041ca:	4b56      	ldr	r3, [pc, #344]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x800>)
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f000 81c5 	beq.w	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80041d8:	4b52      	ldr	r3, [pc, #328]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x800>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	0a1b      	lsrs	r3, r3, #8
 80041de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041e2:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	fb03 f202 	mul.w	r2, r3, r2
 80041ec:	4b4d      	ldr	r3, [pc, #308]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x800>)
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	0d5b      	lsrs	r3, r3, #21
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	3301      	adds	r3, #1
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80041fe:	61fb      	str	r3, [r7, #28]
      break;
 8004200:	e1af      	b.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      else if(srcclk == RCC_SAI1CLKSOURCE_EXT)
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004208:	d102      	bne.n	8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
        frequency = EXTERNAL_CLOCK_VALUE;
 800420a:	4b48      	ldr	r3, [pc, #288]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800420c:	61fb      	str	r3, [r7, #28]
      break;
 800420e:	e1a8      	b.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SAI1CLKSOURCE_HSI))
 8004210:	4b44      	ldr	r3, [pc, #272]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x800>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800421c:	f040 81a1 	bne.w	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004226:	f040 819c 	bne.w	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
        frequency = HSI_VALUE;
 800422a:	4b3f      	ldr	r3, [pc, #252]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800422c:	61fb      	str	r3, [r7, #28]
      break;
 800422e:	e198      	b.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004230:	4b3c      	ldr	r3, [pc, #240]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x800>)
 8004232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004236:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800423a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2SCLKSOURCE_SYSCLK)
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d103      	bne.n	800424a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
        frequency = HAL_RCC_GetSysClockFreq();
 8004242:	f7ff f945 	bl	80034d0 <HAL_RCC_GetSysClockFreq>
 8004246:	61f8      	str	r0, [r7, #28]
      break;
 8004248:	e18d      	b.n	8004566 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
      else if(srcclk == RCC_I2SCLKSOURCE_PLL)
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004250:	d11b      	bne.n	800428a <HAL_RCCEx_GetPeriphCLKFreq+0x766>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 8004252:	4b34      	ldr	r3, [pc, #208]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x800>)
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 8183 	beq.w	8004566 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004260:	4b30      	ldr	r3, [pc, #192]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x800>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	0a1b      	lsrs	r3, r3, #8
 8004266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800426a:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	fb03 f202 	mul.w	r2, r3, r2
 8004274:	4b2b      	ldr	r3, [pc, #172]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x800>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	0d5b      	lsrs	r3, r3, #21
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	3301      	adds	r3, #1
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	fbb2 f3f3 	udiv	r3, r2, r3
 8004286:	61fb      	str	r3, [r7, #28]
      break;
 8004288:	e16d      	b.n	8004566 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
      else if(srcclk == RCC_I2SCLKSOURCE_EXT)
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004290:	d102      	bne.n	8004298 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004292:	4b26      	ldr	r3, [pc, #152]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004294:	61fb      	str	r3, [r7, #28]
      break;
 8004296:	e166      	b.n	8004566 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2SCLKSOURCE_HSI))
 8004298:	4b22      	ldr	r3, [pc, #136]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x800>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a4:	f040 815f 	bne.w	8004566 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042ae:	f040 815a 	bne.w	8004566 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
        frequency = HSI_VALUE;
 80042b2:	4b1d      	ldr	r3, [pc, #116]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80042b4:	61fb      	str	r3, [r7, #28]
      break;
 80042b6:	e156      	b.n	8004566 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80042b8:	4b1a      	ldr	r3, [pc, #104]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x800>)
 80042ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042be:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80042c2:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_FDCANCLKSOURCE_PCLK1)
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042ca:	d103      	bne.n	80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
        frequency = HAL_RCC_GetPCLK1Freq();
 80042cc:	f7ff f96c 	bl	80035a8 <HAL_RCC_GetPCLK1Freq>
 80042d0:	61f8      	str	r0, [r7, #28]
      break;
 80042d2:	e14a      	b.n	800456a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      else if(srcclk == RCC_FDCANCLKSOURCE_HSE)
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d102      	bne.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
        frequency = HSE_VALUE;
 80042da:	4b13      	ldr	r3, [pc, #76]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80042dc:	61fb      	str	r3, [r7, #28]
      break;
 80042de:	e144      	b.n	800456a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      else if(srcclk == RCC_FDCANCLKSOURCE_PLL)
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042e6:	f040 8140 	bne.w	800456a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 80042ea:	4b0e      	ldr	r3, [pc, #56]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x800>)
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 8139 	beq.w	800456a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80042f8:	4b0a      	ldr	r3, [pc, #40]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x800>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	0a1b      	lsrs	r3, r3, #8
 80042fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004302:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	fb03 f202 	mul.w	r2, r3, r2
 800430c:	4b05      	ldr	r3, [pc, #20]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x800>)
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	0d5b      	lsrs	r3, r3, #21
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	3301      	adds	r3, #1
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	fbb2 f3f3 	udiv	r3, r2, r3
 800431e:	61fb      	str	r3, [r7, #28]
      break;
 8004320:	e123      	b.n	800456a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8004322:	bf00      	nop
 8004324:	40021000 	.word	0x40021000
 8004328:	00f42400 	.word	0x00f42400
 800432c:	00bb8000 	.word	0x00bb8000
      srcclk = __HAL_RCC_GET_USB_SOURCE();
 8004330:	4b96      	ldr	r3, [pc, #600]	; (800458c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>)
 8004332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004336:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800433a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USBCLKSOURCE_PLL)  /* PLL ? */
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004342:	d114      	bne.n	800436e <HAL_RCCEx_GetPeriphCLKFreq+0x84a>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004344:	4b91      	ldr	r3, [pc, #580]	; (800458c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	0a1b      	lsrs	r3, r3, #8
 800434a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800434e:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	fb03 f202 	mul.w	r2, r3, r2
 8004358:	4b8c      	ldr	r3, [pc, #560]	; (800458c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	0d5b      	lsrs	r3, r3, #21
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	3301      	adds	r3, #1
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	fbb2 f3f3 	udiv	r3, r2, r3
 800436a:	61fb      	str	r3, [r7, #28]
      break;
 800436c:	e0ff      	b.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      else if((HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48)) /* HSI48 ? */
 800436e:	4b87      	ldr	r3, [pc, #540]	; (800458c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>)
 8004370:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b02      	cmp	r3, #2
 800437a:	f040 80f8 	bne.w	800456e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	f040 80f4 	bne.w	800456e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
        frequency = HSI48_VALUE;
 8004386:	4b82      	ldr	r3, [pc, #520]	; (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>)
 8004388:	61fb      	str	r3, [r7, #28]
      break;
 800438a:	e0f0      	b.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800438c:	4b7f      	ldr	r3, [pc, #508]	; (800458c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>)
 800438e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004392:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004396:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_RNGCLKSOURCE_PLL)  /* PLL ? */
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800439e:	d114      	bne.n	80043ca <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80043a0:	4b7a      	ldr	r3, [pc, #488]	; (800458c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	0a1b      	lsrs	r3, r3, #8
 80043a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043aa:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	fb03 f202 	mul.w	r2, r3, r2
 80043b4:	4b75      	ldr	r3, [pc, #468]	; (800458c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	0d5b      	lsrs	r3, r3, #21
 80043ba:	f003 0303 	and.w	r3, r3, #3
 80043be:	3301      	adds	r3, #1
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c6:	61fb      	str	r3, [r7, #28]
      break;
 80043c8:	e0d3      	b.n	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
      else if( (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48)) /* HSI48 ? */
 80043ca:	4b70      	ldr	r3, [pc, #448]	; (800458c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>)
 80043cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	f040 80cc 	bne.w	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f040 80c8 	bne.w	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
        frequency = HSI48_VALUE;
 80043e2:	4b6b      	ldr	r3, [pc, #428]	; (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>)
 80043e4:	61fb      	str	r3, [r7, #28]
      break;
 80043e6:	e0c4      	b.n	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 80043e8:	4b68      	ldr	r3, [pc, #416]	; (800458c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>)
 80043ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80043f2:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC12CLKSOURCE_PLL)
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043fa:	d129      	bne.n	8004450 <HAL_RCCEx_GetPeriphCLKFreq+0x92c>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 80043fc:	4b63      	ldr	r3, [pc, #396]	; (800458c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 80b6 	beq.w	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800440a:	4b60      	ldr	r3, [pc, #384]	; (800458c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>)
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	0a1b      	lsrs	r3, r3, #8
 8004410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004414:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004416:	4b5d      	ldr	r3, [pc, #372]	; (800458c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>)
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	0edb      	lsrs	r3, r3, #27
 800441c:	f003 031f 	and.w	r3, r3, #31
 8004420:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10a      	bne.n	800443e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004428:	4b58      	ldr	r3, [pc, #352]	; (800458c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
              pllp = 17U;
 8004434:	2311      	movs	r3, #17
 8004436:	617b      	str	r3, [r7, #20]
 8004438:	e001      	b.n	800443e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
              pllp = 7U;
 800443a:	2307      	movs	r3, #7
 800443c:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	fb03 f202 	mul.w	r2, r3, r2
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	fbb2 f3f3 	udiv	r3, r2, r3
 800444c:	61fb      	str	r3, [r7, #28]
      break;
 800444e:	e092      	b.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
      else if(srcclk == RCC_ADC12CLKSOURCE_SYSCLK)
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004456:	f040 808e 	bne.w	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
        frequency = HAL_RCC_GetSysClockFreq();
 800445a:	f7ff f839 	bl	80034d0 <HAL_RCC_GetSysClockFreq>
 800445e:	61f8      	str	r0, [r7, #28]
      break;
 8004460:	e089      	b.n	8004576 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
      srcclk = __HAL_RCC_GET_ADC345_SOURCE();
 8004462:	4b4a      	ldr	r3, [pc, #296]	; (800458c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>)
 8004464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004468:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800446c:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC345CLKSOURCE_PLL)
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004474:	d128      	bne.n	80044c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 8004476:	4b45      	ldr	r3, [pc, #276]	; (800458c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>)
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d07b      	beq.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004482:	4b42      	ldr	r3, [pc, #264]	; (800458c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>)
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	0a1b      	lsrs	r3, r3, #8
 8004488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800448c:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800448e:	4b3f      	ldr	r3, [pc, #252]	; (800458c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>)
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	0edb      	lsrs	r3, r3, #27
 8004494:	f003 031f 	and.w	r3, r3, #31
 8004498:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10a      	bne.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80044a0:	4b3a      	ldr	r3, [pc, #232]	; (800458c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d002      	beq.n	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
              pllp = 17U;
 80044ac:	2311      	movs	r3, #17
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	e001      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
              pllp = 7U;
 80044b2:	2307      	movs	r3, #7
 80044b4:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	fb03 f202 	mul.w	r2, r3, r2
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c4:	61fb      	str	r3, [r7, #28]
      break;
 80044c6:	e058      	b.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
      else if(srcclk == RCC_ADC345CLKSOURCE_SYSCLK)
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044ce:	d154      	bne.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
        frequency = HAL_RCC_GetSysClockFreq();
 80044d0:	f7fe fffe 	bl	80034d0 <HAL_RCC_GetSysClockFreq>
 80044d4:	61f8      	str	r0, [r7, #28]
      break;
 80044d6:	e050      	b.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
      srcclk = __HAL_RCC_GET_QSPI_SOURCE();
 80044d8:	4b2c      	ldr	r3, [pc, #176]	; (800458c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>)
 80044da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044de:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80044e2:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_QSPICLKSOURCE_PLL)  /* PLL ? */
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044ea:	d114      	bne.n	8004516 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80044ec:	4b27      	ldr	r3, [pc, #156]	; (800458c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	0a1b      	lsrs	r3, r3, #8
 80044f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044f6:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	fb03 f202 	mul.w	r2, r3, r2
 8004500:	4b22      	ldr	r3, [pc, #136]	; (800458c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	0d5b      	lsrs	r3, r3, #21
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	3301      	adds	r3, #1
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004512:	61fb      	str	r3, [r7, #28]
      break;
 8004514:	e033      	b.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
      else if(srcclk == RCC_QSPICLKSOURCE_HSI)
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800451c:	d102      	bne.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
        frequency = HSI_VALUE;
 800451e:	4b1d      	ldr	r3, [pc, #116]	; (8004594 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8004520:	61fb      	str	r3, [r7, #28]
      break;
 8004522:	e02c      	b.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
      else if(srcclk == RCC_QSPICLKSOURCE_SYSCLK)
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d129      	bne.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
        frequency = HAL_RCC_GetSysClockFreq();
 800452a:	f7fe ffd1 	bl	80034d0 <HAL_RCC_GetSysClockFreq>
 800452e:	61f8      	str	r0, [r7, #28]
      break;
 8004530:	e025      	b.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
      break;
 8004532:	bf00      	nop
 8004534:	e024      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
      break;
 8004536:	bf00      	nop
 8004538:	e022      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
      break;
 800453a:	bf00      	nop
 800453c:	e020      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
      break;
 800453e:	bf00      	nop
 8004540:	e01e      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
      break;
 8004542:	bf00      	nop
 8004544:	e01c      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
      break;
 8004546:	bf00      	nop
 8004548:	e01a      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
      break;
 800454a:	bf00      	nop
 800454c:	e018      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
      break;
 800454e:	bf00      	nop
 8004550:	e016      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
      break;
 8004552:	bf00      	nop
 8004554:	e014      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
      break;
 8004556:	bf00      	nop
 8004558:	e012      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
      break;
 800455a:	bf00      	nop
 800455c:	e010      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
      break;
 800455e:	bf00      	nop
 8004560:	e00e      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
      break;
 8004562:	bf00      	nop
 8004564:	e00c      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
      break;
 8004566:	bf00      	nop
 8004568:	e00a      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
      break;
 800456a:	bf00      	nop
 800456c:	e008      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
      break;
 800456e:	bf00      	nop
 8004570:	e006      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
      break;
 8004572:	bf00      	nop
 8004574:	e004      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
      break;
 8004576:	bf00      	nop
 8004578:	e002      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
      break;
 800457a:	bf00      	nop
 800457c:	e000      	b.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
      break;
 800457e:	bf00      	nop
    }
  }

  return(frequency);
 8004580:	69fb      	ldr	r3, [r7, #28]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3720      	adds	r7, #32
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	40021000 	.word	0x40021000
 8004590:	02dc6c00 	.word	0x02dc6c00
 8004594:	00f42400 	.word	0x00f42400

08004598 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b08a      	sub	sp, #40	; 0x28
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e1c0      	b.n	800492c <HAL_SAI_Init+0x394>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d10e      	bne.n	80045d2 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a7d      	ldr	r2, [pc, #500]	; (80047b0 <HAL_SAI_Init+0x218>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d107      	bne.n	80045ce <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d103      	bne.n	80045ce <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e1ac      	b.n	800492c <HAL_SAI_Init+0x394>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d106      	bne.n	80045ec <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7fc f8f8 	bl	80007dc <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f9a9 	bl	8004944 <SAI_Disable>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e197      	b.n	800492c <HAL_SAI_Init+0x394>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2202      	movs	r2, #2
 8004600:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	2b02      	cmp	r3, #2
 800460a:	d00c      	beq.n	8004626 <HAL_SAI_Init+0x8e>
 800460c:	2b02      	cmp	r3, #2
 800460e:	d80d      	bhi.n	800462c <HAL_SAI_Init+0x94>
 8004610:	2b00      	cmp	r3, #0
 8004612:	d002      	beq.n	800461a <HAL_SAI_Init+0x82>
 8004614:	2b01      	cmp	r3, #1
 8004616:	d003      	beq.n	8004620 <HAL_SAI_Init+0x88>
 8004618:	e008      	b.n	800462c <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800461a:	2300      	movs	r3, #0
 800461c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800461e:	e008      	b.n	8004632 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004620:	2310      	movs	r3, #16
 8004622:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004624:	e005      	b.n	8004632 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004626:	2320      	movs	r3, #32
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800462a:	e002      	b.n	8004632 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004630:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	2b03      	cmp	r3, #3
 8004638:	d81d      	bhi.n	8004676 <HAL_SAI_Init+0xde>
 800463a:	a201      	add	r2, pc, #4	; (adr r2, 8004640 <HAL_SAI_Init+0xa8>)
 800463c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004640:	08004651 	.word	0x08004651
 8004644:	08004657 	.word	0x08004657
 8004648:	0800465f 	.word	0x0800465f
 800464c:	08004667 	.word	0x08004667
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8004650:	2300      	movs	r3, #0
 8004652:	61fb      	str	r3, [r7, #28]
      break;
 8004654:	e012      	b.n	800467c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004656:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800465a:	61fb      	str	r3, [r7, #28]
      break;
 800465c:	e00e      	b.n	800467c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800465e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004662:	61fb      	str	r3, [r7, #28]
      break;
 8004664:	e00a      	b.n	800467c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004666:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800466a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	f043 0301 	orr.w	r3, r3, #1
 8004672:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8004674:	e002      	b.n	800467c <HAL_SAI_Init+0xe4>
    default :
      syncen_bits = 0;
 8004676:	2300      	movs	r3, #0
 8004678:	61fb      	str	r3, [r7, #28]
      break;
 800467a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a4b      	ldr	r2, [pc, #300]	; (80047b0 <HAL_SAI_Init+0x218>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d004      	beq.n	8004690 <HAL_SAI_Init+0xf8>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a4a      	ldr	r2, [pc, #296]	; (80047b4 <HAL_SAI_Init+0x21c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d102      	bne.n	8004696 <HAL_SAI_Init+0xfe>
  {
    SAI1->GCR = tmpregisterGCR;
 8004690:	4a49      	ldr	r2, [pc, #292]	; (80047b8 <HAL_SAI_Init+0x220>)
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d06f      	beq.n	800477e <HAL_SAI_Init+0x1e6>
  {
    uint32_t freq = 0;
 800469e:	2300      	movs	r3, #0
 80046a0:	61bb      	str	r3, [r7, #24]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a42      	ldr	r2, [pc, #264]	; (80047b0 <HAL_SAI_Init+0x218>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d004      	beq.n	80046b6 <HAL_SAI_Init+0x11e>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a40      	ldr	r2, [pc, #256]	; (80047b4 <HAL_SAI_Init+0x21c>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d104      	bne.n	80046c0 <HAL_SAI_Init+0x128>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80046b6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80046ba:	f7ff fa33 	bl	8003b24 <HAL_RCCEx_GetPeriphCLKFreq>
 80046be:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80046c8:	d120      	bne.n	800470c <HAL_SAI_Init+0x174>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	d102      	bne.n	80046d8 <HAL_SAI_Init+0x140>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 80046d2:	2340      	movs	r3, #64	; 0x40
 80046d4:	613b      	str	r3, [r7, #16]
 80046d6:	e00a      	b.n	80046ee <HAL_SAI_Init+0x156>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d103      	bne.n	80046e8 <HAL_SAI_Init+0x150>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 80046e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046e4:	613b      	str	r3, [r7, #16]
 80046e6:	e002      	b.n	80046ee <HAL_SAI_Init+0x156>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ec:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	4613      	mov	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4413      	add	r3, r2
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	4619      	mov	r1, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	fb02 f303 	mul.w	r3, r2, r3
 8004704:	fbb1 f3f3 	udiv	r3, r1, r3
 8004708:	617b      	str	r3, [r7, #20]
 800470a:	e017      	b.n	800473c <HAL_SAI_Init+0x1a4>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004710:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004714:	d101      	bne.n	800471a <HAL_SAI_Init+0x182>
 8004716:	2302      	movs	r3, #2
 8004718:	e000      	b.n	800471c <HAL_SAI_Init+0x184>
 800471a:	2301      	movs	r3, #1
 800471c:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	4613      	mov	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	4619      	mov	r1, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	fb02 f303 	mul.w	r3, r2, r3
 8004734:	021b      	lsls	r3, r3, #8
 8004736:	fbb1 f3f3 	udiv	r3, r1, r3
 800473a:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	4a1f      	ldr	r2, [pc, #124]	; (80047bc <HAL_SAI_Init+0x224>)
 8004740:	fba2 2303 	umull	r2, r3, r2, r3
 8004744:	08da      	lsrs	r2, r3, #3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800474a:	6979      	ldr	r1, [r7, #20]
 800474c:	4b1b      	ldr	r3, [pc, #108]	; (80047bc <HAL_SAI_Init+0x224>)
 800474e:	fba3 2301 	umull	r2, r3, r3, r1
 8004752:	08da      	lsrs	r2, r3, #3
 8004754:	4613      	mov	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	1aca      	subs	r2, r1, r3
 800475e:	2a08      	cmp	r2, #8
 8004760:	d904      	bls.n	800476c <HAL_SAI_Init+0x1d4>
    {
      hsai->Init.Mckdiv += 1U;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004770:	2b04      	cmp	r3, #4
 8004772:	d104      	bne.n	800477e <HAL_SAI_Init+0x1e6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	085a      	lsrs	r2, r3, #1
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_SAI_Init+0x1f6>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2b02      	cmp	r3, #2
 800478c:	d109      	bne.n	80047a2 <HAL_SAI_Init+0x20a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004792:	2b01      	cmp	r3, #1
 8004794:	d101      	bne.n	800479a <HAL_SAI_Init+0x202>
 8004796:	2300      	movs	r3, #0
 8004798:	e001      	b.n	800479e <HAL_SAI_Init+0x206>
 800479a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800479e:	623b      	str	r3, [r7, #32]
 80047a0:	e010      	b.n	80047c4 <HAL_SAI_Init+0x22c>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d10a      	bne.n	80047c0 <HAL_SAI_Init+0x228>
 80047aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047ae:	e008      	b.n	80047c2 <HAL_SAI_Init+0x22a>
 80047b0:	40015404 	.word	0x40015404
 80047b4:	40015424 	.word	0x40015424
 80047b8:	40015400 	.word	0x40015400
 80047bc:	cccccccd 	.word	0xcccccccd
 80047c0:	2300      	movs	r3, #0
 80047c2:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6819      	ldr	r1, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	4b59      	ldr	r3, [pc, #356]	; (8004934 <HAL_SAI_Init+0x39c>)
 80047d0:	400b      	ands	r3, r1
 80047d2:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6819      	ldr	r1, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80047e8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ee:	431a      	orrs	r2, r3
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 80047fc:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004808:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	051b      	lsls	r3, r3, #20
 8004810:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004816:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6812      	ldr	r2, [r2, #0]
 8004830:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004834:	f023 030f 	bic.w	r3, r3, #15
 8004838:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6859      	ldr	r1, [r3, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69da      	ldr	r2, [r3, #28]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004848:	431a      	orrs	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484e:	431a      	orrs	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	430a      	orrs	r2, r1
 8004856:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6899      	ldr	r1, [r3, #8]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	4b35      	ldr	r3, [pc, #212]	; (8004938 <HAL_SAI_Init+0x3a0>)
 8004864:	400b      	ands	r3, r1
 8004866:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6899      	ldr	r1, [r3, #8]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004872:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004878:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800487e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8004884:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488a:	3b01      	subs	r3, #1
 800488c:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800488e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68d9      	ldr	r1, [r3, #12]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	f24f 0320 	movw	r3, #61472	; 0xf020
 80048a6:	400b      	ands	r3, r1
 80048a8:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68d9      	ldr	r1, [r3, #12]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048b8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048be:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80048c0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c6:	3b01      	subs	r3, #1
 80048c8:	021b      	lsls	r3, r3, #8
 80048ca:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a18      	ldr	r2, [pc, #96]	; (800493c <HAL_SAI_Init+0x3a4>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d119      	bne.n	8004912 <HAL_SAI_Init+0x37a>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80048de:	4b18      	ldr	r3, [pc, #96]	; (8004940 <HAL_SAI_Init+0x3a8>)
 80048e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e2:	4a17      	ldr	r2, [pc, #92]	; (8004940 <HAL_SAI_Init+0x3a8>)
 80048e4:	f023 0301 	bic.w	r3, r3, #1
 80048e8:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d10e      	bne.n	8004912 <HAL_SAI_Init+0x37a>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fc:	3b01      	subs	r3, #1
 80048fe:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8004900:	490f      	ldr	r1, [pc, #60]	; (8004940 <HAL_SAI_Init+0x3a8>)
 8004902:	4313      	orrs	r3, r2
 8004904:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8004906:	4b0e      	ldr	r3, [pc, #56]	; (8004940 <HAL_SAI_Init+0x3a8>)
 8004908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800490a:	4a0d      	ldr	r2, [pc, #52]	; (8004940 <HAL_SAI_Init+0x3a8>)
 800490c:	f043 0301 	orr.w	r3, r3, #1
 8004910:	6453      	str	r3, [r2, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3728      	adds	r7, #40	; 0x28
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	f005c010 	.word	0xf005c010
 8004938:	fff88000 	.word	0xfff88000
 800493c:	40015404 	.word	0x40015404
 8004940:	40015400 	.word	0x40015400

08004944 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800494c:	4b18      	ldr	r3, [pc, #96]	; (80049b0 <SAI_Disable+0x6c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a18      	ldr	r2, [pc, #96]	; (80049b4 <SAI_Disable+0x70>)
 8004952:	fba2 2303 	umull	r2, r3, r2, r3
 8004956:	0b1b      	lsrs	r3, r3, #12
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800495c:	2300      	movs	r3, #0
 800495e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800496e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10a      	bne.n	800498c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800497c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	72fb      	strb	r3, [r7, #11]
      break;
 800498a:	e009      	b.n	80049a0 <SAI_Disable+0x5c>
    }
    count--;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	3b01      	subs	r3, #1
 8004990:	60fb      	str	r3, [r7, #12]
  } while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1e7      	bne.n	8004970 <SAI_Disable+0x2c>

  return status;
 80049a0:	7afb      	ldrb	r3, [r7, #11]
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	20000000 	.word	0x20000000
 80049b4:	95cbec1b 	.word	0x95cbec1b

080049b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80049c0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80049c4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	43db      	mvns	r3, r3
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	4013      	ands	r3, r2
 80049d8:	b29a      	uxth	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80049ee:	b084      	sub	sp, #16
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	f107 0014 	add.w	r0, r7, #20
 80049fc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	b004      	add	sp, #16
 8004a2e:	4770      	bx	lr

08004a30 <__libc_init_array>:
 8004a30:	b570      	push	{r4, r5, r6, lr}
 8004a32:	4d0d      	ldr	r5, [pc, #52]	; (8004a68 <__libc_init_array+0x38>)
 8004a34:	4c0d      	ldr	r4, [pc, #52]	; (8004a6c <__libc_init_array+0x3c>)
 8004a36:	1b64      	subs	r4, r4, r5
 8004a38:	10a4      	asrs	r4, r4, #2
 8004a3a:	2600      	movs	r6, #0
 8004a3c:	42a6      	cmp	r6, r4
 8004a3e:	d109      	bne.n	8004a54 <__libc_init_array+0x24>
 8004a40:	4d0b      	ldr	r5, [pc, #44]	; (8004a70 <__libc_init_array+0x40>)
 8004a42:	4c0c      	ldr	r4, [pc, #48]	; (8004a74 <__libc_init_array+0x44>)
 8004a44:	f000 f820 	bl	8004a88 <_init>
 8004a48:	1b64      	subs	r4, r4, r5
 8004a4a:	10a4      	asrs	r4, r4, #2
 8004a4c:	2600      	movs	r6, #0
 8004a4e:	42a6      	cmp	r6, r4
 8004a50:	d105      	bne.n	8004a5e <__libc_init_array+0x2e>
 8004a52:	bd70      	pop	{r4, r5, r6, pc}
 8004a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a58:	4798      	blx	r3
 8004a5a:	3601      	adds	r6, #1
 8004a5c:	e7ee      	b.n	8004a3c <__libc_init_array+0xc>
 8004a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a62:	4798      	blx	r3
 8004a64:	3601      	adds	r6, #1
 8004a66:	e7f2      	b.n	8004a4e <__libc_init_array+0x1e>
 8004a68:	08004ab8 	.word	0x08004ab8
 8004a6c:	08004ab8 	.word	0x08004ab8
 8004a70:	08004ab8 	.word	0x08004ab8
 8004a74:	08004abc 	.word	0x08004abc

08004a78 <memset>:
 8004a78:	4402      	add	r2, r0
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d100      	bne.n	8004a82 <memset+0xa>
 8004a80:	4770      	bx	lr
 8004a82:	f803 1b01 	strb.w	r1, [r3], #1
 8004a86:	e7f9      	b.n	8004a7c <memset+0x4>

08004a88 <_init>:
 8004a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8a:	bf00      	nop
 8004a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a8e:	bc08      	pop	{r3}
 8004a90:	469e      	mov	lr, r3
 8004a92:	4770      	bx	lr

08004a94 <_fini>:
 8004a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a96:	bf00      	nop
 8004a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a9a:	bc08      	pop	{r3}
 8004a9c:	469e      	mov	lr, r3
 8004a9e:	4770      	bx	lr
